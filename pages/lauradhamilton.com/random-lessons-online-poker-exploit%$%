<!DOCTYPE html>
 
<html lang="en-US">
<head>
<title>
When Random Isn&#39;t Random Enough: Lessons from an Online Poker Exploit - Laura Diane Hamilton
</title>
<meta content="authenticity_token" name="csrf-param"/>
<meta content="OlfyZCSewN3ghvduoYn4T0UqPFTm9Mp2ovreVQwWEs8=" name="csrf-token"/><link href="/assets/application-39d4b25f387ce8ca05418e3b14ee2d74.css" media="screen" rel="stylesheet"/>
<meta name="author" content="Laura Diane Hamilton">
<link href="/posts.rss" rel="alternate" title="RSS" type="application/rss+xml">
<link href="http://fonts.googleapis.com/css?family=Raleway:300" rel="stylesheet" type="text/css">
<script src="/assets/application-308211cc687bb736ba939371ed784cfe.js"></script>
</head>
<body class="posts show not-logged-in ">
<div id="sheet"></div>
<div id="body">
<a id="edit-button" href="/admin" data-target="#modal-login" class="icon-edit" data-no-turbolink="true"></a>
<header class="clearfix">
<div id="header-content">
<h1>
<a href="/">Laura Diane Hamilton</a>
</h1>
<p>
CEO and Founder of <a href="http://www.additiveanalytics.com">Additive Analytics</a><br><br><a href="/lauradhamilton_resume.pdf">Resum√©</a>
</p>
<div class="twitter">
<script type="text/javascript">
              $('#twitter-wjs').remove();
              !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");
            </script>
</div>
<ul id="connect" class="clearfix">
<li>
<a class="icon-twitter" href="http://twitter.com/lauradhamilton" id="connect-twitter">@lauradhamilton</a>
</li>
<li>
<a class="icon-linkedin" href="https://linkedin.com/in/lauradhamilton" id="connect-linkedin">linkedin</a>
</li>
<li>
<a class="icon-github" href="https://github.com/lauradhamilton" id="connect-github">github</a>
</li>
<li>
<a class="icon-google-plus-sign" href="https://plus.google.com/110556329633561103408" id="connect-googleplus" rel="author">googleplus</a>
</li>
<li class="right">
<a class="icon-envelope" href="mailto:lauradhamilton@gmail.com" id="connect-email">email</a>
</li>
<li class="right">
<a class="open-external icon-rss" href="/posts.rss" id="connect-rss">rss</a>
</li>
</ul>
</div>
</header>
<div id="content">
<div class="inner"><article id="post-76" class="full">
<h1>
When Random Isn&#39;t Random Enough: Lessons from an Online Poker Exploit
</h1>
<time>February 09, 2014</time>
<div class="post"><p>
Today I am going to retell a <a href="http://www.cigital.com/papers/download/developer_gambling.php">story from 1999</a>, a story in which developers of a popular online poker platform implemented card-shuffling software with a handle of subtle but critical bugs.
</p>
<p><img src="/posts/2014/deck_of_cards_poker.jpg"/>
Image credit: <a href="http://www.flickr.com/photos/davidwells75/12336385074/sizes/l/">David Wells on Flickr</a></p>
<p>
Although this story is 15 years old, the lessons it holds for algorithm developers are still relevant.
</p>
<p>
It's far to easy to introduce subtle bugs into random number generators and algorithms, and those bugs can have disastrous results.
</p>
<p>
In online poker&mdash;as in real poker&mdash;the game starts with the shuffle. It's important to ensure that the shuffle is randomly distributed.
</p>
<p>
There are 52 distinct cards in a fair deck; there are 52! distinct possible shuffles. Or 8.0658x10<sup>67</sup>. Which is a big number.
</p>
<p>
In 1999, ASF Software, Inc. provided the software behind many of the popular online poker platforms of the era. They published their shuffling algorithm.
</p>
<p>
Here it is. Take a look and see if you can spot a flaw.
</p>
<p>
<code>
procedure TDeck.Shuffle;
var
ctr: Byte;
tmp: Byte;
random_number: Byte;
begin
{ Fill the deck with unique cards }
for ctr := 1 to 52 do
Card[ctr] := ctr;
{ Generate a new seed based on the system clock }
randomize;
{ Randomly rearrange each card }
for ctr := 1 to 52 do begin
random_number := random(51)+1;
tmp := card[random_number];
card[random_number] := card[ctr];
card[ctr] := tmp;
end;
CurrentCard := 1;
JustShuffled := True;
end;
</code>
</p>
<p><br/></p>
<p>
<strong>Flaw #1: An Off-by-One Error</strong>
</p>
<p>
The algorithm above tries to iterate over each card in the deck, swapping each card with another randomly chosen card in the deck. However&mdash;every programmer has made this mistake before&mdash;there's an off-by-one error. The function random(n) returns a number between 0 and (n-1), not between 1 and n as the programmer intends. As a result, the algorithm will never swap the 52nd card with itself; the 52nd card can never end up in the 52nd place. So that is the first reason the "random" card shuffling isn't really random.
</p>
<p><br/></p>
<p>
<strong>Flaw #2: The Shuffle Isn't Uniform</strong>
</p>
<p>
The flawed algorithm above swaps the ith card with a random card selected from the entire deck&mdash;all 52 cards. A proper shuffling algorithm will swap the ith card only with a card in the interval (i, n). That is, it considers each element for a random swap only once. There are n! unique shuffles, and the proper shuffling algorithm generates each shuffled deck only once. The original bad implementation makes certain decks significantly more likely than others.
</p>
<p><br/></p>
<p>
<strong>Flaw #3: Using a 32-bit Seed</strong>
</p>
<p>
If your business or technology depends on using random numbers, your best bet is to use a hardware random number generator. ASF didn't do that. They used a deterministic machine with a software pseudo-random number generator. Worse, they used a 32-bit seed. Because the output of the pseudo-random number generator is 100% determined by the seed, there are only N^32 possible seed values&mdash;meaning only N^32 possible shuffles. That's only about 4 billion possible shuffles, out of a total of 8.0658x10<sup>67</sup> theoretical possible shuffles.
</p>
<p><br/></p>
<p>
<strong>Flaw #4: Using the System Clock as a Seed</strong>
</p>
<p>
The flawed algorithm used the Pascal function Randomize(), which chooses the seed based on the number of milliseconds since midnight. But there are only 86,400,000 milliseconds in the day&mdash;which means that there are only 86,400,000 possible shuffles that the flawed algorithm could produce.
</p>
<p>
But it gets worse. Because the random number generator seed is based on the server time clock, hackers synchronized their program with the server clock and were able to reduce the number of possible shuffles to only 200,000. At that point, once the hacker knew 5 cards in the shuffle, he could quickly search through the 200,000 possible shuffles in realtime and find the exact one in his game. So once the hacker knew the 2 cards in his hand and the 3 cards in the flop, his program could tell him which cards would come on the turn and the river, as well as which cards every other player held.
</p>
<p>
Some final words of wisdom from Robert Sedgewick, author of <a href="http://www.amazon.com/gp/product/032157351X/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=032157351X&amp;linkCode=as2&amp;tag=laurdianhami-20">Algorithms</a>:<img src="http://ir-na.amazon-adsystem.com/e/ir?t=laurdianhami-20&amp;l=as2&amp;o=1&amp;a=032157351X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;"/>
<blockquote>
"That's a pretty tough thing to have happen if you're implementing online poker. You might want to make sure that if you're advertising that you're doing a random shuffle that you go ahead and do so."&mdash;Robert Sedgewick, Professor of Computer Science, Princeton
</blockquote>
</p>
</div>
<div id="edit-link" class="hide" data-href="/76/edit"></div>
</article><aside class="signature">
Follow me on <a href="http://twitter.com/lauradhamilton">Twitter</a> or subscribe to <a href="/posts.rss">RSS</a>
</aside>
<nav class="history clearfix">
<a class="next" href="/resubmitting-your-sitemap-to-google">Resubmitting Your Sitemap to Google</a><a class="prev" href="/introduction-to-java-videos">Introduction to Java Videos</a>
</nav>
<disclaimer><a href="/">Lauradhamilton.com</a> is a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for sites to earn advertising fees by advertising and linking to amazon.com.</disclaimer>
</div>
</div>
<div class="avgrund-cover"></div>
</div>
<aside id="modal-login" class="avgrund-popup"><form accept-charset="UTF-8" action="/sessions" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;"/><input name="authenticity_token" type="hidden" value="OlfyZCSewN3ghvduoYn4T0UqPFTm9Mp2ovreVQwWEs8="/></div>
<h3>Login</h3>
<div class="field">
<label for="email">Email</label>
<input id="email" name="email" type="text"/>
</div>
<div class="field">
<label for="password">Password</label>
<input id="password" name="password" type="password"/>
</div>
<div class="actions">
<input name="commit" type="submit" value="Login"/>
</div>
</form>
</aside>
<script type="text/javascript">
      var _gaq=[['_setAccount',' UA-38928252-1 '],['_trackPageview']];
      (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];
      g.src=('https:'==location.protocol?'//ssl':'//www')+'.google-analytics.com/ga.js';
      s.parentNode.insertBefore(g,s)}(document,'script'));
    </script>
</body>
</html>