<!DOCTYPE html>
<html>
   <head>
      <meta charset="UTF-8">

      <!-- use Google Chrome Frame on IE when available -->
      <meta http-equiv="X-UA-Compatible" content="chrome=1" />

      <meta name="viewport" content="initial-scale=1.0" />

      <meta name="Language" content="en">
      <meta name="Creator" content="Tavendo GmbH">

      <link rel="alternate" type="application/atom+xml" title="Recent Changes" href="/atom.xml" />

      <!-- <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,600|Montserrat:700,400' rel='stylesheet' type='text/css'> -->
      <!-- <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,300italic,400italic,700italic|Montserrat:400,700' rel='stylesheet' type='text/css'> -->
      <!-- <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,300italic,400italic,700italic|Montserrat:400,700|Play:400,700' rel='stylesheet' type='text/css'> -->
      <!-- <link href='http://fonts.googleapis.com/css?family=Open+Sans:400italic,700italic,400,700|Montserrat:400,700|Play:400,700' rel='stylesheet' type='text/css'> -->
      <!-- <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,300italic,400italic,700italic|Montserrat:400,700|Play:400,700' rel='stylesheet' type='text/css'> -->

      <script src="/static/deps/modernizr.custom.js"></script>

      <script>
         var dontSwitchSVGinAndroid = false;
      </script>

      <link rel="stylesheet" type="text/css" href="/static/deps/bootstrap/bootstrap.min.css" />


      <link rel="shortcut icon" href="/static/img/favicon.ico">
      <link rel="stylesheet" href="/static/css/tavendo.css">
      <link rel="stylesheet" href="/static/css/layout_t.css">

      

   <meta name="Language" content="en">
   <meta name="Creator" content="Tavendo GmbH">

   <link rel="stylesheet" href="/static/css/layout_tp.css">

   

   



<link href="/static/deps/syntaxhighlighter/styles/shCore.css" rel="stylesheet" type="text/css" />
<link href="/static/deps/syntaxhighlighter/styles/shThemeTavendo.css" rel="stylesheet" type="text/css" />

<script src="/static/deps/syntaxhighlighter/scripts/shCore.js" type="text/javascript"></script>
<script src="/static/deps/syntaxhighlighter/scripts/shBrushJScript.js" type="text/javascript"></script>
<script src="/static/deps/syntaxhighlighter/scripts/shBrushCss.js" type="text/javascript"></script>
<script src="/static/deps/syntaxhighlighter/scripts/shBrushXml.js" type="text/javascript"></script>
<script src="/static/deps/syntaxhighlighter/scripts/shBrushPlSql.js" type="text/javascript"></script>
<script src="/static/deps/syntaxhighlighter/scripts/shBrushPython.js" type="text/javascript"></script>

<link rel="stylesheet" href="/static/css/layout_tpb.css">

<script type="text/javascript">
  SyntaxHighlighter.all()
</script>

   

<link rel="stylesheet" href="/static/css/page_t_blog_post.css">
<title>Is Crossbar.io the Future of Python Web Apps?</title>







      <!-- fix for IE < 9 not allowing styling of unsupported elements - here, the HTML5 sectioning elements -->
      <!--[if lt IE 9]>
        <script>
          document.createElement("header" );
          document.createElement("footer" );
          document.createElement("section");
          document.createElement("aside"  );
          document.createElement("nav"    );
          document.createElement("article");
          document.createElement("hgroup" );
          document.createElement("time"   );
        </script>
        <noscript>
           <strong>Warning !</strong>
           Because your browser does not support HTML5, some elements are simulated using JScript.
           Unfortunately your browser has disabled scripting. Please enable it in order to display this page.
        </noscript>
      <![endif]-->

      
         <script>
           (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
           (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
           m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
           })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
           ga('create', 'UA-23019220-2', 'tavendo.com');
           ga('send', 'pageview');
         </script>
      

   </head>

   <body>

      

      

      <!-- load scripts here since scripts referenced as part of the page content may need them -->
      <script type="text/javascript" src="/static/deps/jquery-1.10.2.min.js"></script>
      <script type="text/javascript" src="/static/deps/autobahn.min.js"></script>

      <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
      <script src="/static/deps/jquery-1.10.2.min.js"></script>
      <script src="/static/deps/bootstrap/bootstrap.min.js"></script>

      <!-- yahoo browser detect for some corner cases -->
      <script src="/static/deps/yahooBrowserDetect.js"></script>


      <!-- community widget iframe -->
      
      <!-- general styles for the widget -->
      <link rel="stylesheet" type="text/css" href="https://demo.crossbar.io/clandeckwidget/css/parent.css" />
      <!-- site-specific modifications -->
      <link rel="stylesheet" type="text/css" href="/static/css/communitywidget.css" />
      <!-- base stylesheet to ensure non-Display if nothing loads -->
      <style>
         #communityWidget.nonDisplay {
            display: none;
         }
      </style>
      <iframe id="communityWidget" class="nonDisplay" src="https://demo.crossbar.io/clandeckwidget/index.html" frameborder="0"></iframe>
      <script src="https://demo.crossbar.io/clandeckwidget/js/parent.js"></script>
      

      <!--block for the page content-->
      

<!--[if lt IE 8]>
   <div id="legacyIE">

      <div id="legacyNotice">
         <p>
            This site does not include legacy support for the version of Internet Explorer that you are using.
         </p>
         <p>
            The Web has come a long way since your browser was launched, and usage of legacy browsers is holding everyone back.
         </p>
         <p>
            Please upgrade your browser to Internet Explorer 8 or higher, or use one of the other available modern browsers, such as <a href="https://www.google.com/intl/en/chrome/browser/">Google Chrome</a>, <a href="http://www.mozilla.org/en-US/firefox/new/">Mozilla Firefox</a> or <a href="http://www.opera.com/de/computer/windows">Opera</a>.
         </p>
      </div>

   </div>
<![endif]-->

   <div id="wrap">    
      
   <!-- Fixed bootstrap navbar -->
   <div id="navbarFullWidthWrapper">
      <nav class="navbar navbar-inverse navbar-static-top" role="navigation">

         <div class="navbar-header">

            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
               <span class="sr-only">Toggle navigation</span>
               <span class="icon-bar"></span>
               <span class="icon-bar"></span>
               <span class="icon-bar"></span>
            </button>

            <a class="navbar-brand" href="/">
               <img src="/static/img/gen/tavendo_logo_color_white.svg" alt="crossbar logo inverted" width="130" height="28">
               <!-- <img src="/static/img/gen/tavendo_logo_white_navbar.svg" alt="crossbar logo inverted" width="130" height="28"> -->
               <!-- <img src="/static/img/gen/tavendo_logo_color_navbar.svg" alt="crossbar logo inverted" width="130" height="28"> -->
            </a>

         </div>

         <div class="collapse navbar-collapse navbar-ex1-collapse">

            <ul class="nav navbar-nav">
               <li  class="" >
                  <a href="/">Home</a>
               </li> 
               <li  class="active" >
                  <a href="/blog/">Blog</a>
               </li>       
            </ul>

          </div>

      </nav>
   </div>
   

   <div id="centralContainer" class="centralContainer">
      
         

   <div id="blogTextContainer" class="blogTextContainer">

      <h1>Is Crossbar.io the Future of Python Web Apps?</h1>
      <div style="position: relative; top: -22px;">
         <div class="blogpost_authordate">
            2014-06-01, Sam
         </div>
         
            <div class="blogpost_taglist">
               Tags:           
               
                  <a href="/blog/tag/crossbar/">crossbar</a>
               
                  <a href="/blog/tag/python/">python</a>
               
                  <a href="/blog/tag/websocket/">websocket</a>
               
                  <a href="/blog/tag/wamp/">wamp</a>
               
                  <a href="/blog/tag/webapps/">webapps</a>
               
            </div>
         
         
         <span style="margin-left: 32px; position: relative; top: 4px;">
            <iframe allowtransparency="true" frameborder="0" scrolling="no" src="https://platform.twitter.com/widgets/tweet_button.html?url=http://tavendo.com/blog/post/is-crossbar-the-future-of-python-web-apps/&via=tavendo&hashtags=python,websocket,wamp&text=Is%20Crossbar.io%20the%20Future%20of%20Python%20Web%20Apps%3F" style="width:100px; height:20px;"></iframe>
         </span>
         
      </div>
      <p>Crossbar.io - next-gen app server with big potential. An independent review by Sam &amp; Max.</p>
<h2>The Right Thing - Badly Explained</h2>
<p>A guest post by Sam from <a href="http://sametmax.com/">Sam &amp; Max</a>. Original (French) <a href="http://sametmax.com/crossbar-le-futur-des-applications-web-python//">version</a> and Reddit <a href="http://www.reddit.com/r/Python/comments/27d0km/is_crossbario_the_future_of_python_web_apps/">discussion</a>. More related posts:</p>
<ul>
<li><a href="/blog/post/small-demo-of-a-pragmatic-use-of-wamp-in-python">Small demo of a pragmatic use of WAMP in Python</a></li>
<li><a href="/blog/post/free-your-code-backends-in-the-browser">Free Your Code - Backends in the Browser</a></li>
</ul>
<hr />
<p>I have been following Crossbar.io for some time now, and I'm very, very surprised to not hear more about it  in the Python community.</p>
<p>Well, in fact, I'm not <em>totally</em> surprised.</p>
<p>On the one hand, it's a tech that, in my opinion, represents what Python should aim for in order to finally be BFFL (Best Friends For Life) with <a href="https://en.wikipedia.org/wiki/Go_language">Go</a>/<a href="https://en.wikipedia.org/wiki/Nodejs">NodeJS</a> and offer, at last, a killer feature in the word of complex server applications.</p>
<p>But on the other hand, well, their <a href="http://crossbar.io/">home page</a> explains what it's for with this blob :</p>
<blockquote>
<p>Crossbar.io is an application router which implements the Web Application Messaging Protocol (WAMP). WAMP provides asynchronous Remote Procedure Calls and Publish &amp; Subscribe (with WebSocket being one transport option) and allows to connect application components in distributed systems</p>
</blockquote>
<p>Yes, sir, yes, but, err... In real life, I mean, what the hell can I do with it ?</p>
<p>It's always the same problem with smart people: they make uber cool stuff, and nobody got a clue of its usefulness because they can't manage to explain it.</p>
<p>Since I'm a bit dumb myself, I'm gonna take this opportunity to share the love.</p>
<h2>Web Application Message Protocol (WAMP)</h2>
<p>Crossbar.io allows several parts of an application to communicate through it, using the WAMP protocol. Of course, a WAMP client can talk to the server and vice-versa, just like a <a href="https://en.wikipedia.org/wiki/HTTP">HTTP</a> client can talk to <a href="https://en.wikipedia.org/wiki/Apache_HTTP_Server">Apache</a>/<a href="https://en.wikipedia.org/wiki/Nginx">Nginx</a>. But more than that, WAMP clients can talk transparently and easily to <strong>each other</strong>, the way an <a href="https://en.wikipedia.org/wiki/AMQP">AMQP</a> client can talk to others through a RabbitMQ server.</p>
<p>Still, this doesn't help you much if you don't know what WAMP is. Putting the cart before selling the bear's skin, or something like that.</p>
<p>WAMP is a <a href="http://wamp.ws/spec/">standardized protocol</a> built with real time message exchange in mind. It's not tied to Python, even though Crossbar.io implements it in Python. You can speak WAMP in any language.</p>
<p>It works mainly on top of <a href="https://en.wikipedia.org/wiki/Websocket">Websocket</a>, so you can use it directly in the browser, in Firefox, Chrome, Opera, Safari, and even IE10, using a Javascript library. Which is just a big wrapper around the Websocket <a href="https://en.wikipedia.org/wiki/API">API</a> standardizing data transmission. There is nothing magical behind it, no complicated format, no binary data, just plain vanilla websocket with <a href="https://en.wikipedia.org/wiki/JSON">JSON</a> formatted data using certain conventions. In that sense it compares to <a href="https://github.com/sockjs">SockJS</a> and (RIP) <a href="http://socket.io/">socket.io</a>.</p>
<p>But unlike SockJS, it is not limited to use in the browser. There are libraries to use it in Python, C++ or NodeJS server codes, in <a href="https://en.wikipedia.org/wiki/Android_(operating_system)">Android</a> apps, and even directly in Nginx guts or from an <a href="https://en.wikipedia.org/wiki/Oracle_Database">Oracle database</a> (in SQL) with some routers.</p>
<figure>
   <img src="/static/img/gen/is-crossbar-the-future-of-python-web-apps/general.svg" alt="basic diagramm of WAMP routing" class="imgCentered imgThreeQuarter">
   <figcaption>
      Like HTTP, WAMP is just a way to send data from point A to point B. But unlike it, WAMP allows clients to talk to each others, no just to the server.
   </figcaption>
</figure>

<p><strong>You must understand this, it's very important, it means you can send and receive arbitrary data in real time between all these systems, without headache, in a congruent and transparent way.</strong></p>
<p>In summary, WAMP is like, but better than :</p>
<ul>
<li>HTTP requests, because it's push, asynchronous and real time;</li>
<li>websocket using SockJS, cause it's a standard, and works on and between server side components/services, even using different languages.</li>
<li>AMQP messages, since it works in the browser, and is easy to setup.</li>
</ul>
<p>Used intelligently, Crossbar.io can let Python join in the innovative real time frameworks playground with others such as MeteorJs, and potentially, be even better.</p>
<p>Because WAMP allows you to do 2 things, easily, and well.</p>
<h2>1 â PUB/SUB</h2>
<p>It's saying "call this function when this event arrives". It's like <a href="https://docs.djangoproject.com/en/dev/topics/signals/">Django signals</a> or <a href="http://qt-project.org/doc/qt-4.8/signalsandslots.html">QT slots</a>, but it works across the network. This is what is often currently done with Redis nowaday. Using WAMP and Javascript, it looks like this :</p>
<div class="codebox blogCodebox">
   <pre class="brush: javascript; toolbar: false; gutter: false; auto-links: false; highlight: []">

// connecting to the WAMP router (E.G: crossbar.io)
ab.connect("ws://localhost:9000", function(session) {
    // say you are interedted in this event
    session.subscribe('the_event_you_like', function(topic, evt){
        // do stuff with data sent with the event
        // every time the event is sent
        // such as updating the DOM
    });
});

   </pre>
</div>

<figure>
   <img src="/static/img/gen/is-crossbar-the-future-of-python-web-apps/sub.svg" alt="diagram of subscribing to an event with a WAMP router" class="imgCentered imgThreeQuarter">
   <figcaption>
      Clients SUBscribe to an event. An event is an arbitrary name choosen by the programmer, which he is going to trigger himself when he thinks something important is going on which the rest of the system should react to.
   </figcaption>
</figure>

<p>Somewhere else, in an other part of the file, or even in another browser :</p>
<div class="codebox blogCodebox">
   <pre class="brush: javascript; toolbar: false; gutter: false; auto-links: false; highlight: []">

ab.connect("ws://localhost:9000", function(session) {
    // create and event and attach data to it
    session.publish('the_event_you_like', ['some data']);
});   

   </pre>
</div>

<figure>
   <img src="/static/img/gen/is-crossbar-the-future-of-python-web-apps/pub.svg" alt="diagram of publishing an event to a WAMp router plus event routing to subscribers" class="imgCentered imgThreeQuarter">
   <figcaption>
      The programmer can decide something important occurs (creating a content, user sign in, notification) and PUBlishes the event.
   </figcaption>
</figure>

<p>And yes, that's it. You connect to Crossbar.io, and you chat. The subscribed callback will be called with the published data. Even if there are 1000 miles between them. Even if code A is in a browser and B is on another one, or a NodeJS server, or and Android app.</p>
<p>What's scary at the beginning is that you got TOO MUCH flexibility :</p>
<ul>
<li>What kind of event should I expect / trigger ?</li>
<li>What kind of data should I send / received ?</li>
<li>Is it fast ? Is it light ?</li>
</ul>
<p>But in fact it's super easy: an event is just an action from your app, such as adding an element (a post, a comment, a user), deleting it, modifying it. In the end, it's good ol' <a href="https://en.wikipedia.org/wiki/CRUD">CRUD</a>, but in real time, and with push instead of pull. You choose a name describing your action, you attach data to it, and voila, you got an event all the subscribers can receive.</p>
<p>With a bonus though: it works on the server too! Your Python code receives "add a comment" as an event? It can add the comment in database, send a message to a cache service, or another web site in NodeJS to update it, send back and event to update all the web pages and the Android app, etc.</p>
<p>You can send any kind of data that is serializable to JSON. Anything you would send using HTTP, really. Deeply nested and complex things like geographical data - or very simple ones like notifications.</p>
<p><strong>With Pub/Sub, WAMP replaces everything you would normally do with <a href="https://en.wikipedia.org/wiki/AJAX">AJAX</a> calls in the browser, and stuff you would do with messages queues on the server.</strong> What's even more powerful is that it unites the two words.</p>
<p>And even if it doesnt match <a href="https://en.wikipedia.org/wiki/ZeroMQ">ZeroMQ</a> performance (which does not have a central server), it's still very <a href="https://into.aalto.fi/download/attachments/12324178/Huang_Fuguo_thesis_2.pdf?version=1&amp;amp;modificationDate=1383290628000">fast and light</a>.</p>
<h2>2 â RPC</h2>
<p>Calling a function located somewhere else than in its own code. It's definitely NIH (if you got painful memories of <a href="https://en.wikipedia.org/wiki/CORBA">CORBA</a> or <a href="https://en.wikipedia.org/wiki/SOAP">SOAP</a>, raise your hand), and it's very handy. </p>
<p>Let's keep it simple and carry on with Javascript examples, but remember you can do the same in C++ or Python:</p>
<div class="codebox blogCodebox">
   <pre class="brush: javascript; toolbar: false; gutter: false; auto-links: false; highlight: []">

ab.connect("ws://localhost:9000", function(session) {
   function a_function(a, b) {
      return a + b;
   }
   // you declare that this function is callable from outside
   session.register('a_function', a_function);
}); 

   </pre>
</div>

<figure>
   <img src="/static/img/gen/is-crossbar-the-future-of-python-web-apps/register.svg" alt="diagramm of WAMP procedure registration with a router" class="imgCentered imgThreeQuarter">
   <figcaption>
      RPC (for Remote Procedure Call) is kinda the reverse of PUB/SUB. A client exposes some code, and another asks for its execution.
   </figcaption>
</figure>

<p>From the caller side :</p>
<div class="codebox blogCodebox">
   <pre class="brush: javascript; toolbar: false; gutter: false; auto-links: false; highlight: []">

ab.connect("ws://localhost:9000", function(session) {
    // the call remotly the function, get back a promise
    // which will let you work on the result
   session.call('une_fonction', 2, 3).then(
      function (res) {
         console.log(res);
      }
   );
});

   </pre>
</div>

<figure>
   <img src="/static/img/gen/is-crossbar-the-future-of-python-web-apps/call.svg" alt="diagramm of WAMP RPC call and routing" class="imgCentered imgThreeQuarter">
   <figcaption>
      Unlike PUB/SUB, RPC only involves two clients at the same time. But it's still asynchronous. The caller doesn't wait for the result, it is notified by the WAMP router when it's ready.
   </figcaption>
</figure>

<p>Much like PUB/SUB, people have a hard time to grasp the usefulness, again because of the lot of freedom it brings. Imagine your project is now divided in a lots of small services, that run independently :</p>
<ul>
<li>One web service.</li>
<li>One auth service.</li>
<li>One API service.</li>
<li>One long running task service.</li>
<li>One monitoring and tech admin service.</li>
</ul>
<p>All these services can communicate with each other using RPC, but don't need to actually run in the same process. You can (finally!), use all your server cores, and even move them to different servers if you feel like it.</p>
<p>Even better, having a blocking service doesn't lead to the whole system getting stuck. One major issue with Python asynchronous systems is that many libraries are still blocking (typically ORMs). With this kind of architecture, you can create a service doing only blocking calls, and let other non blocking services just be, and call the blocking one using RPC asynchronously. While the bad blocking service is stuck, the rest of the system can process other requests.</p>
<h2>Crossbar.io, more than a WAMP router</h2>
<p>The vision of the Crossbar.io developers is to allow you to build systems with composable services communicating with each other instead of some big central process. So they didn't stop at routing.</p>
<p>Crossbar.io is also a process manager, much like a <a href="https://pypi.python.org/pypi/supervisor/3.0">supervisor</a>, or more likely, <a href="https://pypi.python.org/pypi/circus/0.11.1">circus</a> (Tarek, stop working on that stuff, come here!) with its ZeroMQ communication stack.</p>
<p>You can configure it with a simple JSON file, and define Python classes that will be run in a separate process and be able to discuss using WAMP</p>
<div class="codebox blogCodebox">
   <pre class="brush: javascript; toolbar: false; gutter: false; auto-links: false; highlight: []">
{
   "processes": [
      { // first process
         "type": "worker",
         "modules": [
            {
               a_worker.Class
            },
            {
               an_other_worker.Class
            }
         ]
      },
      {  // second process
         "type": "worker",
         "modules": [
            {
               an_another_worker_in_another_process.Class
            }
         ]
      }
   ]
}
   </pre>
</div>

<p>But if that's not enough, you can also run external non-Python programs, and Crossbar.io will happily handle their life cycle :</p>
<div class="codebox blogCodebox">
   <pre class="brush: javascript; toolbar: false; gutter: false; auto-links: false; highlight: []">
 {
    "processes": [
       {
          "type": "guest",
          "executable": "/usr/bin/node",
          "arguments": ["your_script.js"],
          "stdout": "log"
       }
    ]
 } 
   </pre>
</div>

<p>So now you have 3 powerful tools to build a decoupled, scalable, multi-core architecture (bye bye <a href="https://en.wikipedia.org/wiki/Global_Interpreter_Lock">GIL</a>!), that can compensate for blocking libraries:</p>
<ul>
<li>A flexible, simple protocol allowing everybody to talk to each other (WAMP).</li>
<li>An API to react to change (PUB/SUB) or request an action (RPC).</li>
<li>A software to manage this communication and your system components life cycle.</li>
</ul>
<h2>Concrete use case</h2>
<p>WAMP is the kind of tech that does NOT allow you to do something you couldn't do before. It's not new stuff.</p>
<p>However, WAMP DOES allow you to do it better, and more easily.</p>
<p>Take the work flow of a user connecting to a forum. He goes to a form, posts his credentials, reloads the page, and he is signed in. If other users reload the page, they will see one more person is online.</p>
<p>Now, if you want to make that more dynamic, you can use AJAX, and if you wish to have near real time updates, you'll need to set a timeout to make regular AJAX calls or even go for long polling. It works, but it's really a hack.</p>
<p>Some modern sites use websockets, and asynchronous servers based on Javascript/Erlang/Go, and a PUB/SUB router on top of it like Redis. It's faster, easier, and the app is very reactive. But it's a heterogeneous system, there is nothing standard about it. Plus if you want to send messages between components (and God forbid, between components using different languages), it will require even more work.</p>
<p>WAMP unifies all that. A bit of RPC to sign in :</p>
<figure>
   <img src="/static/img/gen/is-crossbar-the-future-of-python-web-apps/rpc_concret.svg" alt="diagramm of login process using Crossbar.io" class="imgCentered imgMedium">
   <figcaption>
      Please note that RPC works from any client to any client. There is no mandatory orientation. Signin in is a simple example, but you can do much more complex stuff.
   </figcaption>
</figure>

<p>Then, a bit of PUB/SUB to notify everybody something just happened :</p>
<figure>
   <img src="/static/img/gen/is-crossbar-the-future-of-python-web-apps/pub_sub_concret.svg" alt="diagramm of pubsub notification using Crossbar.io" class="imgCentered imgMedium">
   <figcaption>
      I only draw light clients here, but remember your client can be a NodeJS server, a database, some C++ code...
   </figcaption>
</figure>

<p>Or course, you COULD do that with an existing stack. It's just not as handy.</p>
<p>Moreover, Crossbar.io promotes separation of concerns, with a service that deals only with authentication, without needing a kraken-lookalike system to do so. If tomorrow your auth needs to have its own core/server/VM for performance or security reasons, it's possible, and easy.</p>
<p>Crossbar.io and WAMP, are in that sense already the best friends of our lovely new toys such as Docker.io (service composition) or AngularJS (reactive data updates).</p>
<h2>Now, here is the catch</h2>
<p>Because, of course, there is alway a catch in our sadistic job.</p>
<p>And it's the youth of the project. And the fact that there is only a small team working on it right now. <strong>They need help.</strong></p>
<p>It's quite stable, the code works, the sources are clean.</p>
<p>But the doc, or dear Zalgo, the doc. The examples aren't up to date, there are two versions of the protocol which are at odds with each other, so that you often don't know anymore which part belongs to which.</p>
<p>And just like any young project, it lacks of out of the box definitive solution this-is-how-you-do-it-I-swear ways to tackle important problems like authentication.</p>
<p>But the worst is the API. Especially the Python API, which is based on Twisted, and exposed with almost no polish. If you don't know Twisted, it's a bit like Zope: powerful, robust - and the API will make you want to kill yourself.</p>
<p>Brace yourself, the Python 'hello world' is comming: </p>
<div class="codebox blogCodebox">
   <pre class="brush: python; toolbar: false; gutter: false; auto-links: false; highlight: []">
from twisted.python import log
from twisted.internet.defer import inlineCallbacks

# autobahn is the de facto Python lib to build
# WAMP clients
from autobahn.twisted.wamp import ApplicationSession
from autobahn.twisted.wamp import ApplicationRunner

class ListenForEvent(ApplicationSession):

    def __init__(self, config):
        ApplicationSession.__init__(self)
        self.config = config

    def onConnect(self):
        self.join(self.config.realm)

    @inlineCallbacks
    def onJoin(self, details):
        callback = lambda x: log.msg("Received event %s" % x)
        yield self.subscribe(callback, 'un_evenement')

# Python doesn't have a default event loop, so
# we need to start one
if __name__ == '__main__':
   runner = ApplicationRunner(endpoint="tcp:127.0.0.1:8080",
                              url="ws://localhost:8080/ws",
                              realm="realm1")
   runner.run(ListenForEvent)

   </pre>
</div>

<p>This is why I lured you with the JS examples and not Python, despite the fact that I'm a Python expert and deeply in love with it.</p>
<p>Here is what you should be able to do if for a simple project:</p>
<div class="codebox blogCodebox">
   <pre class="brush: python; toolbar: false; gutter: false; auto-links: false; highlight: []">
from autobahn.app import App

app = App(url="ws://localhost:8080/ws")

@event("an_event")
def handle_event(details):

    app.log("Received event %s" % x)

@register()
def rpc_exposed_function(a, b):
    return a + b

if __name__ == '__main__':
   app.run()
   </pre>
</div>

<p>Which is something we talked on the mailling list, and <a href="https://github.com/tavendo/AutobahnPython/issues/208">it's now happening</a>. But it needs so much more work. It needs to be battle tested. It needs to be sent to bite the dirt, and back. </p>
<p><strong>It needs you.</strong></p>
<h2>In the end</h2>
<p>The Python community can be conservative and, just like WSGI became the champion because Django adopted it and pushed the need for it, an asynchronous standard will emerge only if a killer app proves the need for it. </p>
<p>For now we have none, because innovation is stale in the Web Python community. Partly because we love our current tools, partly because we can hack around it (<a href="https://github.com/kljensen/async-flask-sqlalchemy-example">async flask + gevent</a>, <a href="http://www.celeryproject.org/">celery</a>) but also because some people are just leaving Python for Go or NodeJS. The Python 3 transition didn't help either.</p>
<p>Right now, we improve, but don't create that much. It's a good thing for stability, but evolution sometimes need a bit of disruption.</p>
<p>My suggestion about the flask-style API is not innocent. I strongly believe there is a need for the Python community to have an app providing a full stack for asynchronous web app programming in an elegant and powerful fashion. Powerful is provided by  Twisted and Tornado, but they're not elegant, and certainly not sexy or pleasant.</p>
<p>In the end, it will be possible for some new (or old :)) Jacob Kaplan-Moss to build a framework including a flask-style web framework using cyclone and make it interact with the flask-style Autobahn. Adding some tools in the mix like: </p>
<ul>
<li>a live settings service, </li>
<li>a dummy key/val store for dev, </li>
<li>some static file tools, </li>
<li>a log/stat component,</li>
<li>a task queue manager, </li>
<li>a search engine (like woosh) and </li>
<li>modern libs (path.py, arrow, docopt, etc) </li>
</ul>
<p>With this we would have a pure Python framework which tackles all the common tasks of today's programming, yet with a very, very simple API.</p>
<p>This alone could motivate people to finally build new gen ORM, make peace with asynchronous APIs and NoSQL systems in Python, and invent more.</p>
<p>This would be a killer app that will make people want to code stuff with it. Something the Python community lacks. 
Nothing evolved much since Django came out. 
Tornado is no fun. 
Twisted can do everything, but do you want to do anything with it? 
Ruby is dying because people are switching from Rails to NodeJS. </p>
<p>Python is lucky to have a more robust backing because it's not just Web oriented (plenty of innovative stuff happens in Python, just not on the Web), and because the current tools are awesome, but we do need innovation.</p>
<p>That's why I believe in Crossbar.io. I believe it is the first step in the creation of the work tools of tomorrow. And since WAMP works in NodeJS as well, it will make the 2 worlds merge, and that can be wonderful.</p>
<p><em>About the author</em></p>
<p>Sam is a developer mainly working in Python and JavaScript. Contact him at <a href="http://sametmax.com/">Sam &amp; Max</a>.</p>
<p><em>License</em></p>
<p>This blog post is licensed under <a href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons CC-BY-SA</a>.</p>
<p><em>reddit thread</em></p>
<p>There's a long, interesting <a href="http://www.reddit.com/r/Python/comments/27d0km/is_crossbario_the_future_of_python_web_apps/">reddit thread</a> regarding this post. </p>
   </div>

   <div id="blogSideBar" class="blogSideBar">

      <div class="mainCTA">
         <!-- <p>
            Get hosted Crossbar.io for development
         </p>
         <p>
            Launching soon
         </p>
         <p>
            SIGN UP NOW
         </p> -->

         <p class="intro">
            Find out how to create component-based, real-time apps
            for the Web, mobile and IoT in less time and with less complexity using
         </p>

         <a class="crossbarLink" href="http://crossbar.io">
            <img class="crossbarLogo" src="/static/img/gen/crossbar_icon.svg" alt="Crossbar.io logo">
            <img class="crossbarName" src="/static/img/gen/crossbar_name_paths.svg" alt="Crossbar.io name">
         </a>        

         <p class="osar">
            Crossbar.io is an open-source Unified Application Router
            created and supported by Tavendo
         </p>

         <a class="ctaLink" href="https://github.com/crossbario/crossbar#crossbario">Learn more</a>

      </div>

      <div class="about">
         <h1>
            About
         </h1>

         <p>   
            Tavendo creates <b>open-source infrastructure software</b> for
            component-based, real-time Web, mobile and IoT applications.
         </p>
         <p>
            We are authors and maintainers of
            <a href="http://wamp.ws/">WAMP</a> (Web Application Messaging Protocol),
            <a href="http://crossbar.io/">Crossbar.io</a> (Unified Application Router) and <a href="http://autobahn.ws/">Autobahn</a> (Real-time Web Framework).
         </p>
         <p>            
            Tavendo offers <b>consulting</b>, <b>support</b> and <b>custom development</b>
            for Crossbar.io and Autobahn based solutions.
            Get in contact: send us an <a class="contactLink" href="mailto:service@tavendo.de">Email</a> describing your project, issue or question.
         </p>
<!--
         <div class="contactMeans">
            Contact us by 
            <a class="contactLink" href="mailto:service@tavendo.de">Email</a>
         </div>
-->
         <div class="contactMeans">
            <iframe id="twitterButton" transparency="true" frameborder="0" scrolling="no" src="https://platform.twitter.com/widgets/follow_button.html?screen_name=tavendo&show_count=false&show_screen_name=false"></iframe>
            us on 
            <a class="contactLink" href="https://twitter.com/tavendo">Twitter</a>
         </div>

         <div class="contactMeans ">
            Tavendo on 
            <a href="https://github.com/tavendo">GitHub</a>
            <!-- <span>&nbsp;</span> -->
            <a href="https://github.com/tavendo" class="imgLink">
               <img class="githubMark" src="/static/img/GitHub-Mark-32px.png">
            </a>
         </div>   
       

      </div>

      <div class="blogConnect">

         <a class="rss" href="/atom.xml">
            <img src="/static/img/gen/atom.svg" alt="Atom Feed">
         </a>         

         <h1>
            Recent posts
         </h1>

         <ul>
            
               
               <li>
                  <a class="blogpost_title" href="/blog/post/small-demo-of-a-pragmatic-use-of-wamp-in-python/">Small demo of a pragmatic use of WAMP in Python</a>
               </li>
               
            
               
               <li>
                  <a class="blogpost_title" href="/blog/post/free-your-code-backends-in-the-browser/">Free Your Code - Backends in the Browser</a>
               </li>
               
            
               
               <li>
                  <a class="blogpost_title" href="/blog/post/is-crossbar-the-future-of-python-web-apps/">Is Crossbar.io the Future of Python Web Apps?</a>
               </li>
               
            
               
               <li>
                  <a class="blogpost_title" href="/blog/post/help_beginner_web_developer/">Help! For beginner Web developers</a>
               </li>
               
            
               
               <li>
                  <a class="blogpost_title" href="/blog/post/dissecting-websocket-overhead/">Dissecting WebSocket&#39;s Overhead</a>
               </li>
               
            
               
               <li>
                  <a class="blogpost_title" href="/blog/post/tech-popularity-on-stackoverflow/">40 data points of software tech popularity</a>
               </li>
               
            
               
               <li>
                  <a class="blogpost_title" href="/blog/post/re-one-warstory/">REone - My path to the real-time Web</a>
               </li>
               
            
               
            
               
            
               
            
               
            
               
            
               
            
               
            
               
            
               
            
         </ul>

         <script>
           (function() {
             var cx = '004456671460342441872:se6a40mf4pe';
             var gcse = document.createElement('script');
             gcse.type = 'text/javascript';
             gcse.async = true;
             gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
                 '//www.google.com/cse/cse.js?cx=' + cx;
             var s = document.getElementsByTagName('script')[0];
             s.parentNode.insertBefore(gcse, s);
           })();
         </script>
         <gcse:search></gcse:search>

      </div>

   </div>   

   
      <div id="disqus">
         <div id="disqus_thread"></div>
         <script type="text/javascript">
            var disqus_shortname = 'tavendo';
            var disqus_identifier = 'is-crossbar-the-future-of-python-web-apps';
            var disqus_title = 'Is Crossbar.io the Future of Python Web Apps?';
            var disqus_url = 'http://tavendo.com/blog/post/is-crossbar-the-future-of-python-web-apps/';
            /* var disqus_category_id = ''; */
            var disqus_disable_mobile = false;

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function() {
                var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
         </script>
         <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
      </div>
   


            
   </div>


   </div>



      <div id="footer">
         <br>
         <p>
            Copyright &copy; 2011-2013 Tavendo GmbH. All rights reserved.
            <a href="/impressum/">Anbieterkennzeichnung</a> nach deutschem Recht.
         </p>
         <p>
            Tavendo, WAMP, Crossbar.io and ShowRoomDummy are trademarks of Tavendo GmbH. All other trademarks are those of their respective entities. 
         </p>
         <br>
      </div>

      <script type="text/javascript">
         // SVG vs. PNG detection and switching

         if (!Modernizr.svg) {
            // switch out all SVGs for PNGs on unsupported browsers
            // loads both SVG + PNG on these, but then it's only a fallback
            // for some cases
            switchToPNG();
         }

         // Android browser does very badly with SVG, so switch to PNG for this
         if (YAHOO.env.ua.android != 0 && YAHOO.env.ua.chrome === 0 && dontSwitchSVGinAndroid === false) {
            // alert("android browser!"  + YAHOO.env.ua.chrome);
            switchToPNG();
            // add the no-svg class that CSS style switches rely on
            // and which modernizr didn't add because the browser
            // has some support for SVG
            var html= document.getElementsByTagName("html");
            $(html).removeClass("svg").addClass("no-svg");
         }

         function switchToPNG () {
            // get all img elements on the page
            // and replace any SVGs with PNGs
            // requires that SVG & PNGs exist at the same path
            // with only different file extensions

            var imgLinks = document.getElementsByTagName("img"),
                imgLinksLength = imgLinks.length;

            for(var i = 0; i < imgLinksLength; i++ ) {
               var cur = imgLinks[i],
                   curLink = cur.src,
                   curLinkSplit = cur.src.split("."),
                   curLinkType = cur.src.split(".").pop(),
                   curLinkBase = curLink.slice(0, curLink.lastIndexOf(".")),
                   newLink;

               if(curLinkType === "svg") {
                  newLink = curLinkBase + ".png";
                  cur.src = newLink;
               }

            }
         }
      </script>

   </body>
</html>