<!DOCTYPE html>
<!--[if IE 6]>
<html id="ie6" lang="en">
<![endif]-->
<!--[if IE 7]>
<html id="ie7" lang="en">
<![endif]-->
<!--[if IE 8]>
<html id="ie8" lang="en">
<![endif]-->
<!--[if !(IE 6) | !(IE 7) | !(IE 8)]><!-->
<html lang="en">
<!--<![endif]-->
<!--
	generated in 0.688 seconds
	131543 bytes batcached for 300 seconds
-->
<head>
<meta charset="UTF-8" />
<title>Buggy Security Guidance from Apple | Random ASCII</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="stylesheet" type="text/css" media="all" href="http://s1.wp.com/wp-content/themes/pub/twentyten/style.css?m=1386301037g" />
<link rel="pingback" href="http://randomascii.wordpress.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Random ASCII &raquo; Feed" href="http://randomascii.wordpress.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Random ASCII &raquo; Comments Feed" href="http://randomascii.wordpress.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Random ASCII &raquo; Buggy Security Guidance from&nbsp;Apple Comments Feed" href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
function addLoadEvent(func){var oldonload=window.onload;if(typeof window.onload!='function'){window.onload=func;}else{window.onload=function(){oldonload();func();}}}
/* ]]> */
</script>
<link rel='stylesheet' id='all-css-0' href='http://s1.wp.com/_static/??-eJx9kt1OxCAQhV9InK02xhvjs1CYpXQHhsA0Td9e2qrrusoVcybnm78AS1KGo2AUCLNKNDsfC5TgCdeUeUIjt+rRlPIAf2PkL1hgQknaXNSu7uwDsbsC7BxankWdmYgXWLx12OyRkbSgVYmL/FItzHDGmg9Jy+YIaL1GwlBtLSykly9qC8e6130bGWudAmkeQJaaWGsWiqyEakmVPgAPkcVXpnwHrc4OWREbLZ7jjVBn0j63T7QduYYOquuHbEHbBY/SUEadN/jzbU8ZMR9LXcP/DjT24IgHTa2Kxw8o++SO2WbUdq/4Ht66/tR33dPr6Xn6ADTABw0=' type='text/css' media='all' />
<script type='text/javascript'>
/* <![CDATA[ */
var LoggedOutFollow = {"invalid_email":"Your subscription did not succeed, please try again with a valid email address."};
/* ]]> */
</script>
<script type='text/javascript' src='http://s1.wp.com/_static/??-eJyFj90OwiAMhV9IZFs08cb4LNvoSBEoUpDo08sSNTpNdtW/7/S0sgQxkk/gkzQsHQ1oQWSG2OvaE+gn2hreyMqhH21WwDNoLhni7RlWAeFQxz7B1qF/wR+ugTg5YK6Wf6bfVuivCGUVM5BCP55FBMb7z9bBkhbBZo2eZc01KMpJTGQtFVlQaUhLjctvRQRbn1FivntRVdXJHdtd0+wPbdd05gFmiIRF'></script>
<link rel='stylesheet' id='all-css-0' href='http://s2.wp.com/wp-content/mu-plugins/highlander-comments/style.css?m=1377793621g' type='text/css' media='all' />
<!--[if lt IE 8]>
<link rel='stylesheet' id='highlander-comments-ie7-css'  href='http://s2.wp.com/wp-content/mu-plugins/highlander-comments/style-ie7.css?m=1351637563g&#038;ver=20110606' type='text/css' media='all' />
<![endif]-->
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://randomascii.wordpress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://randomascii.wordpress.com/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='Self Inflicted Denial of Service in Visual Studio&nbsp;Search' href='http://randomascii.wordpress.com/2014/04/15/self-inflicted-denial-of-service-in-visual-studio-search/' />
<link rel='next' title='Undefined Behavior *Can* Format Your&nbsp;Drive' href='http://randomascii.wordpress.com/2014/05/19/undefined-behavior-can-format-your-drive/' />
<meta name="generator" content="WordPress.com" />
<link rel='canonical' href='http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/' />
<link rel='shortlink' href='http://wp.me/p1fTCO-r3' />
<link rel="alternate" type="application/json+oembed" href="https://public-api.wordpress.com/oembed/1.0/?format=json&amp;url=http%3A%2F%2Frandomascii.wordpress.com%2F2014%2F04%2F17%2Fbuggy-security-guidance-from-apple%2F&amp;for=wpcom-auto-discovery" /><link rel="alternate" type="application/xml+oembed" href="https://public-api.wordpress.com/oembed/1.0/?format=xml&amp;url=http%3A%2F%2Frandomascii.wordpress.com%2F2014%2F04%2F17%2Fbuggy-security-guidance-from-apple%2F&amp;for=wpcom-auto-discovery" />
<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="article" />
<meta property="og:title" content="Buggy Security Guidance from Apple" />
<meta property="og:url" content="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/" />
<meta property="og:description" content="In February 2014 Apple published their Secure Coding Guide. I glanced through it and noticed that their sample code for detecting integer overflow was buggy – it triggered undefined behavior, could..." />
<meta property="article:published_time" content="2014-04-18T05:38:37+00:00" />
<meta property="article:modified_time" content="2014-06-18T00:50:55+00:00" />
<meta property="article:author" content="http://randomascii.wordpress.com/author/brucedawson/" />
<meta property="og:site_name" content="Random ASCII" />
<meta property="og:image" content="https://randomascii.files.wordpress.com/2014/04/image10.png" />
<meta property="og:image:secure_url" content="https://randomascii.files.wordpress.com/2014/04/image10.png" />
<meta name="twitter:site" content="@BruceDawson0xB" />
<meta name="twitter:image" content="https://randomascii.files.wordpress.com/2014/04/image10.png?w=1400" />
<meta name="twitter:card" content="photo" />
<meta name="twitter:creator" content="@BruceDawson0xB" />
<meta property="fb:app_id" content="249643311490" />
<meta property="article:publisher" content="https://www.facebook.com/WordPresscom" />
<link rel="shortcut icon" type="image/x-icon" href="http://s2.wp.com/i/favicon.ico?m=1311975824g" sizes="16x16 24x24 32x32 48x48" />
<link rel="icon" type="image/x-icon" href="http://s2.wp.com/i/favicon.ico?m=1311975824g" sizes="16x16 24x24 32x32 48x48" />
<link rel="apple-touch-icon-precomposed" href="http://s0.wp.com/i/webclip.png?m=1391188133g" />
<link rel='openid.server' href='http://randomascii.wordpress.com/?openidserver=1' />
<link rel='openid.delegate' href='http://randomascii.wordpress.com/' />
<link rel="search" type="application/opensearchdescription+xml" href="http://randomascii.wordpress.com/osd.xml" title="Random ASCII" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com" />
<meta name="application-name" content="Random ASCII" /><meta name="msapplication-window" content="width=device-width;height=device-height" /><meta name="msapplication-tooltip" content="Forecast for randomascii: programming, tech topics, with a chance of unicycling" /><meta name="msapplication-task" content="name=Subscribe;action-uri=http://randomascii.wordpress.com/feed/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="title" content="Buggy Security Guidance from&nbsp;Apple | Random ASCII on WordPress.com" />
<meta name="description" content="In February 2014 Apple published their Secure Coding Guide. I glanced through it and noticed that their sample code for detecting integer overflow was buggy – it triggered undefined behavior, could be optimized away, and was thus unsafe to use. I tweeted this, then Jon Kalb blogged it, and then Apple quietly fixed their guide.&hellip;" />

<script type='text/javascript' src='//partner.googleadservices.com/gampad/google_service.js'>
</script>
<script type='text/javascript'>
if ( typeof GS_googleAddAdSenseService == 'function' ) { GS_googleAddAdSenseService("ca-pub-3443918307802676"); }
if ( typeof GS_googleEnableAllServices == 'function' ) { GS_googleEnableAllServices() };
</script>
<script type="text/javascript" src="//c.amazon-adsystem.com/aax2/amzn_ads.js"></script>
<script type="text/javascript">
try { amznads.getAds("3033","300x250"); } catch(e) { /* ignore */ }
</script>
<script type="text/javascript">
var amznKeys = amznads.getKeys();
if (typeof amznKeys != "undefined" && amznKeys != "") { for (var i =0; i < amznKeys.length; i++) { var key = amznKeys[i]; GA_googleAddAttr("amzn", key);} }
document.close();
</script>
<script type='text/javascript'>
if ( typeof GA_googleAddSlot == 'function' ) { GA_googleAddSlot("ca-pub-3443918307802676", "wpcom_below_post_adsafe"); }
</script>
<script type='text/javascript'>
if ( typeof GA_googleFetchAds == 'function' ) { GA_googleFetchAds(); }
</script>

<script type="text/javascript">
var wpcom_ads = { bid: 18565082, pt: 'permalink', wa: 0, as: 1, domain: 'randomascii.wordpress.com', url: 'http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/', gid: '', };
</script>
<style type="text/css" id="syntaxhighlighteranchor"></style>
<script type="text/javascript">
	window.google_analytics_uacct = "UA-52447-2";
</script>

<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-52447-2']);
	_gaq.push(['_setDomainName', 'wordpress.com']);
	_gaq.push(['_initData']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
	})();
</script>
</head>

<body class="single single-post postid-1677 single-format-standard mp6 single-author highlander-enabled highlander-light">
<div id="wrapper" class="hfeed">
	<div id="header">
		<div id="masthead">
			<div id="branding" role="banner">
								<div id="site-title">
					<span>
						<a href="http://randomascii.wordpress.com/" title="Random ASCII" rel="home">Random ASCII</a>
					</span>
				</div>
				<div id="site-description">Forecast for randomascii: programming, tech topics, with a chance of unicycling</div>

										<a class="home-link" href="http://randomascii.wordpress.com/" title="Random ASCII" rel="home">
							<img src="http://randomascii.files.wordpress.com/2011/07/blog-header-from-p2090787.jpg" width="940" height="198" alt="" />
						</a>
								</div><!-- #branding -->

			<div id="access" role="navigation">
			  				<div class="skip-link screen-reader-text"><a href="#content" title="Skip to content">Skip to content</a></div>
								<div class="menu"><ul><li ><a href="http://randomascii.wordpress.com/">Home</a></li><li class="page_item page-item-2"><a href="http://randomascii.wordpress.com/about/">About</a></li></ul></div>
			</div><!-- #access -->
		</div><!-- #masthead -->
	</div><!-- #header -->

	<div id="main">

		<div id="container">
			<div id="content" role="main">

			

				<div id="nav-above" class="navigation">
					<div class="nav-previous"><a href="http://randomascii.wordpress.com/2014/04/15/self-inflicted-denial-of-service-in-visual-studio-search/" rel="prev"><span class="meta-nav">&larr;</span> Self Inflicted Denial of Service in Visual Studio&nbsp;Search</a></div>
					<div class="nav-next"><a href="http://randomascii.wordpress.com/2014/05/19/undefined-behavior-can-format-your-drive/" rel="next">Undefined Behavior *Can* Format Your&nbsp;Drive <span class="meta-nav">&rarr;</span></a></div>
				</div><!-- #nav-above -->

				<div id="post-1677" class="post-1677 post type-post status-publish format-standard hentry category-programming category-security tag-integer-overflow">
											<h2 class="entry-title"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/" rel="bookmark">Buggy Security Guidance from&nbsp;Apple</a></h2>					
					<div class="entry-meta">
													<span class="meta-prep meta-prep-author">Posted on</span> <a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/" title="10:38 pm" rel="bookmark"><span class="entry-date">April 17, 2014</span></a>							<span class="by-author"><span class="sep">by</span> <span class="author vcard"><a class="url fn n" href="http://randomascii.wordpress.com/author/brucedawson/" title="View all posts by brucedawson" rel="author">brucedawson</a></span> </span>											</div><!-- .entry-meta -->

					<div class="entry-content">
						<p>In February 2014 Apple published their Secure Coding Guide. I glanced through it and noticed that their sample code for detecting integer overflow was buggy – it triggered undefined behavior, could be optimized away, and was thus unsafe to use.</p>
<p>I <a href="https://twitter.com/BruceDawson0xB/status/435953883924287489">tweeted this</a>, then Jon Kalb <a href="http://www.slashslash.info/2014/02/undefined-behavior-and-apples-secure-coding-guide/">blogged it</a>, and then Apple quietly fixed their guide.</p>
<p>But their code is still broken, still triggers undefined behavior, and fails completely on 64-bit builds.</p>
<p>Update, June 17, 2014: <a href="http://randomascii.wordpress.com/2014/05/19/undefined-behavior-can-format-your-drive/">no change</a>. Apple’s security guidance is still entirely broken for 64-bit builds.</p>
<p><span id="more-1677"></span>
<p>Apple’s Secure Coding Guide is available <a href="https://developer.apple.com/library/ios/documentation/Security/Conceptual/SecureCodingGuide/SecureCodingGuide.pdf">here</a>. And I think the guide is mostly correct. But they sure are having trouble with detecting integer overflow. To be fair, it is tricky, but still. They should be able to do better.</p>
<p>The problem is on page 28, in their “Avoiding Integer Overflow and Underflows” section. This page contains two code snippets. The first is an example of a common mistake, and the second is Apple’s recommended guidance on how to avoid integer overflow when multiplying.</p>
<h2>The original problem</h2>
<p>Their recommended code originally looked like this:</p>
<blockquote><p>size_t bytes = n * m;<br />if (n &gt; 0 &amp;&amp; m &gt; 0 &amp;&amp; SIZE_MAX/n &gt;= m) {<br />&nbsp;&nbsp;&nbsp; &#8230; /* allocate &#8220;bytes&#8221; space */<br />}</p>
</blockquote>
<p><a href="https://twitter.com/BruceDawson0xB/status/435953883924287489"><img title="image" style="background-image:none;float:right;padding-top:0;padding-left:0;margin:0 0 4px 4px;display:inline;padding-right:0;border-width:0;" border="0" alt="image" src="https://randomascii.files.wordpress.com/2014/04/image10.png?w=371&#038;h=140" width="371" align="right" height="140"></a>The types of ‘n’ and ‘m’ are never mentioned, which is unforgivably ambiguous for a security document. If you carefully read the surrounding text and its discussion of undefined behavior on overflow, in particular its reference to <a href="https://www.kb.cert.org/vuls/id/162289">CWE-733, CERT VU#162289</a>, it is clear that ‘n’ and ‘m’ are both signed integers. If they were unsigned then their previous discussion about the C language specification allowing compilers to optimize out the tests makes no sense.</p>
<blockquote><p>Unsigned overflow is defined to “obey the laws of arithmetic modulo 2^n”</p>
</blockquote>
<p>The problem with their initial recommended code is that signed overflow gives undefined behavior in C/C++. It doesn’t matter if the results of the signed overflow are never used – the <a href="http://blog.regehr.org/archives/213">entire execution of the program is undefined</a> as soon as signed integer overflow happens. Since Apple did the check for overflow <em>after</em> doing the multiply they have closed the undefined door after the metaphorical horse has left. They checked too late. If ‘n’ and ‘m’ overflow then the compiler is permitted to <a href="http://feross.org/gcc-ownage/">launch nethack</a>, format your drive, or sing sea shanties in Spanish.</p>
<blockquote><p>(Singing sea shanties in Spanish requires the optional voice module, or an embedded <a href="http://randomascii.wordpress.com/2014/03/31/you-got-your-web-browser-in-my-compiler/">web browser</a> for multimedia functionality)</p>
</blockquote>
<p>More practically speaking (since most compilers are <a href="http://blog.regehr.org/archives/761">not actively evil</a>), an optimizing compiler could detect that the checks are unnecessary, and omit them, thus creating a perfect example of security theater.</p>
<blockquote><p>(Examples of deleted security checks due to undefined behavior can be found <a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html">here</a>)</p>
</blockquote>
<p>Some optimizing compilers exploit undefined behavior by using it to prune the state tree. Since signed integer overflow is undefined the compiler is allowed to assume that it cannot happen. Therefore, at the time of the ‘if’ statement the compiler is allowed to assume that n*m does not overflow, and the compiler may therefore determine that the overflow checks will always pass, and can therefore be removed. We <em>loves</em> the optimizations.</p>
<p>This is not a theoretical concern. Serious security bugs have happened because compilers removed checks that were provably unnecessary due to undefined behavior.</p>
<p>In short, you have to check for overflow <em>before</em> you overflow. Doing the signed integer overflow and then checking is not legal.</p>
<h2>The new problem</h2>
<p>At some point Apple quietly fixed their document. They didn’t change the date (the footer still says February 11 but the properties now say March 10) or acknowledge the error (the revision history is silent), but they fixed the code. This is now their recommended code for avoiding integer overflow when multiplying:</p>
<blockquote><p>if (n &gt; 0 &amp;&amp; m &gt; 0 &amp;&amp; SIZE_MAX/n &gt;= m) {<br />&nbsp;&nbsp;&nbsp; size_t bytes = n * m;<br />&nbsp;&nbsp;&nbsp; &#8230; /* allocate &#8220;bytes&#8221; space */<br />}</p>
</blockquote>
<p>Much better! Except not really.</p>
<p>They now avoid doing the multiplication until they have done the check, but their code is still wrong.</p>
<p>SIZE_MAX is the <a href="http://en.wikipedia.org/wiki/Size_t#stddef.h">maximum value of a size_t</a> typed variable. We’ve already established that ‘n’ and ‘m’ are not size_t types – they appear to be signed integers. The maximum value for a signed integer is INT_MAX. Apple is using the wrong constant!</p>
<p>In order to avoid integer overflow (undefined behavior, dragons be here) they either need to check against INT_MAX instead of SIZE_MAX, or they need to cast ‘n’ and ‘m’ to size_t before doing the multiplication.</p>
<p>The fact that the result of the multiplication is assigned to a size_t is irrelevant. The multiplication is a signed integer multiplication, it produces a signed integer result, and this result is then converted to a size_t during the assignment.</p>
<p>When compiling 64-bit code this is a disaster. For 64-bit code the value of SIZE_MAX is 2^64-1 and (assuming 32-bit integers) there are no values of ‘n’ and ‘m’ that could possibly exceed it, so all positives values will pass the test. For a 64-bit build Apple’s code offers precisely zero protection. goto fail. Do not pass go. Do not collect $200.</p>
<p>When compiling 32-bit code the outcome is not so clear. On every CPU I have ever used a signed multiply gives the same results in the bottom word of the result as an unsigned multiply, so it is highly likely that the result will always be correct. But the behavior is still undefined. And anytime you find yourself saying “I’m sure that this undefined behavior won’t matter” you should make sure you aren’t working on software where security matters. And you certainly shouldn’t be writing security guides…</p>
<h2>Code that works</h2>
<p>The code below should work – and I hereby license this fixed version to Apple with the only requirement being that they acknowledge the original errors so that developers who followed their advice might hear about the problems:</p>
<blockquote><p>if (n &gt; 0 &amp;&amp; m &gt; 0 &amp;&amp; SIZE_MAX/n &gt;= m) {<br />&nbsp;&nbsp;&nbsp; size_t bytes = (size_t)n * (size_t)m;<br />&nbsp;&nbsp;&nbsp; &#8230; /* allocate &#8220;bytes&#8221; space */<br />}</p>
</blockquote>
<p>If using C++ then you could also use numeric_limits&lt;&gt;::max() and a typedef to ensure that your MAX values match your types.</p>
<p>This stuff is crazy tricky. If you want to get serious about this you should check out <a href="http://safeint.codeplex.com/">SafeInt</a>, for code or for ideas. Or check out this guide (mentioned in the <a href="http://www.reddit.com/r/programming/comments/23cyo2/apple_doesnt_understand_integer_overflow/">reddit discussion</a>):</p>
<p><a title="https://www.securecoding.cert.org/confluence/display/seccode/INT32-C.+Ensure+that+operations+on+signed+integers+do+not+result+in+overflow" href="https://www.securecoding.cert.org/confluence/display/seccode/INT32-C.+Ensure+that+operations+on+signed+integers+do+not+result+in+overflow">https://www.securecoding.cert.org/confluence/display/seccode/INT32-C.+Ensure+that+operations+on+signed+integers+do+not+result+in+overflow</a></p>
<h2>Maybe they meant size_t</h2>
<p>One could argue that Apple’s code is fine as long as ‘m’ and ‘n’ have type size_t. That is true, but that supposition is just not supported by the surrounding text. And, if ‘n’ and ‘m’ are intended to be of type size_t then that needs to be explicitly stated. Failing to list such a crucial requirement is absolutely unforgivable.</p>
<h2>Perspective</h2>
<p>It’s nice to take a break from critiquing Microsoft…</p>

<div class="wpa" style="position: relative; width:300px; text-align: center; padding: 0; margin: 10px auto; overflow: hidden; clear: both;">
<a style="position: absolute; text-align: left; display: block; font: 9px/1 sans-serif; text-decoration: underline;" href="http://en.wordpress.com/about-these-ads/" rel="nofollow">About these ads</a>
<script type="text/javascript">
		var wpcom_adclk_hovering = false;
		var wpcom_adclk_recorded = false;
		var wpcom_adclk_theme = "Twenty Ten";
		var wpcom_adclk_slot = "wpcom_below_post_adsafe";
		var wpcom_adclk_network = ( typeof wpcom_adclk_network === "undefined" ) ? "" : wpcom_adclk_network ;

		jQuery(document).ready( function() {
			function wpcom_adclk_hover_yes() { wpcom_adclk_hovering = true; }
			function wpcom_adclk_hover_no() { wpcom_adclk_hovering = false; }
			jQuery(".wpa").click(wpcom_adclk_click);
			jQuery(".wpa iframe").hover( wpcom_adclk_hover_yes, wpcom_adclk_hover_no );
			jQuery(".wpa object").hover( wpcom_adclk_hover_yes, wpcom_adclk_hover_no );

			jQuery(window).blur( function() {
				if ( wpcom_adclk_hovering ) { wpcom_adclk_click(); }
			});
		});

		function wpcom_adclk_impression() {
			var stat_gif = document.location.protocol + "//stats.wordpress.com/g.gif?v=wpcom-no-pv";
			stat_gif += "&x_ads_imp_theme=" + wpcom_adclk_theme;
			stat_gif += "&x_ads_imp_placement="+wpcom_adclk_slot;
			stat_gif += "&x_ads_imp_network=" + wpcom_adclk_network;
			stat_gif += "&x_ads_imp_theme_network="+wpcom_adclk_theme+"_"+wpcom_adclk_network;
			new Image().src = stat_gif + "&baba=" + Math.random();
			return true;
		}

		function wpcom_adclk_click() {
			if (wpcom_adclk_recorded) { return true; } // no double counting
			var stat_gif = document.location.protocol + "//stats.wordpress.com/g.gif?v=wpcom-no-pv";
			stat_gif += "&x_ads_click_theme=" + wpcom_adclk_theme;
			stat_gif += "&x_ads_click_placement="+wpcom_adclk_slot;
			stat_gif += "&x_ads_click_network=" + wpcom_adclk_network;
			stat_gif += "&x_ads_click_theme_network="+wpcom_adclk_theme+"_"+wpcom_adclk_network;

			new Image().src = stat_gif + "&baba=" + Math.random();
			wpcom_adclk_recorded = true;
			var now=new Date(); var end=now.getTime()+250;
			while(true){now=new Date();if(now.getTime()>end){break;}}
			return true;
		}
	
if ( typeof GA_googleAddAttr == 'function' ) {
GA_googleAddAttr("AdOpt", "1");
GA_googleAddAttr("Origin", "other");
GA_googleAddAttr("LangId", "1");
GA_googleAddAttr("Domain", "randomascii.wordpress.com");
GA_googleAddAttr("BlogId", "18565082");
GA_googleAddAttr("PageURL", "http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/");
GA_googleAddAttr("AdSafe", "1");
GA_googleAddAttr("Autotag", "science");
GA_googleAddAttr("Autotag", "technology");
GA_googleAddAttr("Tag", "programming");
GA_googleAddAttr("Tag", "security");
GA_googleAddAttr("Tag", "integer-overflow");
GA_googleAddAttr("Partner", "AOL");
GA_googleAddAttr("theme_bg", "ffffff");
GA_googleAddAttr("theme_text", "333333");
GA_googleAddAttr("theme_link", "0066cc");
GA_googleAddAttr("theme_border", "cccccc");
GA_googleAddAttr("theme_url", "ff4b33");
GA_googleAddAdSensePageAttr("google_page_url", "http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/");
GA_googleFillSlot("wpcom_below_post_adsafe");
}
</script>
</div>
<style type="text/css">
div.wpa>div { margin-top: 1em; } #google_ads_div_wpcom_below_post_adsafe_ad_container { display: block !important; }
</style>
<script type="text/javascript">
jQuery( window ).load( function() {
    if ( jQuery(".wpa script[src*='virool.com']").length > 0 || jQuery(".wpa script[src*='shareth.ru']").length > 0 || jQuery(".wpa iframe[src*='boomvideo.tv']").length > 0 || jQuery(".wpa iframe[src*='viewablemedia.net']").length > 0 || jQuery(".wpa .sharethrough-placement").length > 0 ) {
        jQuery( '.wpa' ).css( 'width', '400px' );
    }
setTimeout(function(){if(typeof GS_googleAddAdSenseService !== 'function'){new Image().src=document.location.protocol+"//stats.wordpress.com/g.gif?v=wpcom-no-pv&x_noads=adblock&baba="+Math.random()}},100);
} );
</script>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-digg"><a rel="nofollow" class="share-digg sd-button share-icon" href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/?share=digg" title="Click to Digg this post"><span>Digg</span></a></li><li class="share-email"><a rel="nofollow" class="share-email sd-button share-icon" href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/?share=email" title="Click to email this to a friend"><span>Email</span></a></li><li class="share-reddit"><a rel="nofollow" class="share-reddit sd-button share-icon" href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/?share=reddit" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-twitter"><a rel="nofollow" class="share-twitter sd-button share-icon" href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/?share=twitter" title="Click to share on Twitter" id="sharing-twitter-1677"><span>Twitter</span></a></li><li class="share-end"></li></ul></div></div></div><div class='sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded' id='like-post-wrapper-18565082-1677-53b3216c2a5ce' data-src='//widgets.wp.com/likes/#blog_id=18565082&amp;post_id=1677&amp;origin=randomascii.wordpress.com&amp;obj_id=18565082-1677-53b3216c2a5ce' data-name='like-post-frame-18565082-1677-53b3216c2a5ce'><h3 class='sd-title'>Like this:</h3><div class='likes-widget-placeholder post-likes-widget-placeholder' style='height:55px'><span class='button'><span>Like</span></span> <span class="loading">Loading...</span></div><span class='sd-text-color'></span><a class='sd-link-color'></a></div>
<div id='jp-relatedposts' class='jp-relatedposts' >
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
</div></div>											</div><!-- .entry-content -->

					<div id="entry-author-info">
						<div id="author-avatar">
							<img alt='' src='http://1.gravatar.com/avatar/d69d2780728dfc033fcc8123f31ef8fa?s=60&#038;d=identicon&#038;r=G' class='avatar avatar-60' height='60' width='60' />						</div><!-- #author-avatar -->
						<div id="author-description">
							<h2>About brucedawson</h2>
							I'm a programmer, working for Valve (http://www.valvesoftware.com/), focusing on optimization and reliability. Nothing's more fun than making code run 5x faster. Unless it's eliminating large numbers of bugs.

I also unicycle. And play (ice) hockey. And juggle.							<div id="author-link">
								<a href="http://randomascii.wordpress.com/author/brucedawson/" rel="author">
									View all posts by brucedawson <span class="meta-nav">&rarr;</span>								</a>
							</div><!-- #author-link	-->
						</div><!-- #author-description -->
					</div><!-- #entry-author-info -->

					<div class="entry-utility">
												This entry was posted in <a href="http://randomascii.wordpress.com/category/programming/" rel="category tag">Programming</a>, <a href="http://randomascii.wordpress.com/category/security/" rel="category tag">Security</a> and tagged <a href="http://randomascii.wordpress.com/tag/integer-overflow/" rel="tag">Integer overflow</a>. Bookmark the <a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/" title="Permalink to Buggy Security Guidance from&nbsp;Apple" rel="bookmark">permalink</a>.											</div><!-- .entry-utility -->
				</div><!-- #post-## -->

				<div id="nav-below" class="navigation">
					<div class="nav-previous"><a href="http://randomascii.wordpress.com/2014/04/15/self-inflicted-denial-of-service-in-visual-studio-search/" rel="prev"><span class="meta-nav">&larr;</span> Self Inflicted Denial of Service in Visual Studio&nbsp;Search</a></div>
					<div class="nav-next"><a href="http://randomascii.wordpress.com/2014/05/19/undefined-behavior-can-format-your-drive/" rel="next">Undefined Behavior *Can* Format Your&nbsp;Drive <span class="meta-nav">&rarr;</span></a></div>
				</div><!-- #nav-below -->

				
			<div id="comments">


			<h3 id="comments-title">44 Responses to <em>Buggy Security Guidance from&nbsp;Apple</em></h3>


			<ol class="commentlist">
					<li class="comment even thread-even depth-1 highlander-comment" id="li-comment-11191">
		<div id="comment-11191">
			<div class="comment-author vcard">
				<img alt='' src='http://2.gravatar.com/avatar/ea2d38cd6dc84e4e8fc779dfc7d8a690?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn">KrzaQ</cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11191">
				April 18, 2014 at 3:26 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>I&#8217;m pretty sure that in your zeal to fix the real bug, you managed to introduce a harmless one into your logic:</p>
<p>&gt; In order to avoid integer overflow (undefined behavior, dragons be here) they either need to check against INT_MAX instead of SIZE_MAX, or they need to cast ‘n’ and ‘m’ to size_t before doing the multiplication.</p>
<p>Actually, casting either &#8216;n&#8217; or &#8216;m&#8217; is sufficient.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11191#respond' onclick='return addComment.moveForm("comment-11191", "11191", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-brucedawson bypostauthor odd alt depth-2 highlander-comment" id="li-comment-11194">
		<div id="comment-11194">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/d69d2780728dfc033fcc8123f31ef8fa?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://randomascii.wordpress.com' rel='external nofollow' class='url'>brucedawson</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11194">
				April 18, 2014 at 7:57 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>Yes, casting just one of them would be fine. I like the symmetry of casting both of them, so I allowed myself a slight exaggeration in my rhetoric.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11194#respond' onclick='return addComment.moveForm("comment-11194", "11194", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment even depth-3 highlander-comment" id="li-comment-11217">
		<div id="comment-11217">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/0287e0a38ccc8b2fbf1e103572a5951b?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn">c</cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11217">
				April 18, 2014 at 6:20 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>I feel it adds readability, eliminating any doubt about what type is actually being evaluated</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11217#respond' onclick='return addComment.moveForm("comment-11217", "11217", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-11195">
		<div id="comment-11195">
			<div class="comment-author vcard">
				<img alt='' src='http://2.gravatar.com/avatar/e7b999fa6a00cdd0ac750c27895ebc6e?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://gravatar.com/sstewartgallus' rel='external nofollow' class='url'>Steven Stewart-Gallus</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11195">
				April 18, 2014 at 9:37 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>Actually, while on any reasonable platform casting only one of &#8216;n&#8217; or &#8216;m&#8217; is sufficient on a strange platform that has int types having a greater rank than size_t types casting both values is required.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11195#respond' onclick='return addComment.moveForm("comment-11195", "11195", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment even depth-3 highlander-comment" id="li-comment-11200">
		<div id="comment-11200">
			<div class="comment-author vcard">
				<img alt='' src='http://2.gravatar.com/avatar/ea2d38cd6dc84e4e8fc779dfc7d8a690?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn">KrzaQ</cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11200">
				April 18, 2014 at 10:10 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>I don&#8217;t see how, if int has a greater rank than size_t, then there are two options:</p>
<p>1. numeric_limits::max() &gt; numeric_limits::max() and in that case, because size_t has lesser rank, it can be promoted to signed int or unsigned int due to integral promotions. Because in this case int cannot represent all possible values of size_t, it is promoted to unsigned int. And now the binary multiplication operator, seeing signed and unsigned type of the same rank, will return unsigned result.</p>
<p>2. numeric_limits::max() &lt;= numeric_limits::max() &#8211; in this case, the check in the line above (SIZE_MAX/n &gt;= m) is enough to ensure that there is no integer overflow.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11200#respond' onclick='return addComment.moveForm("comment-11200", "11200", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment odd alt depth-4 highlander-comment" id="li-comment-11202">
		<div id="comment-11202">
			<div class="comment-author vcard">
				<img alt='' src='http://2.gravatar.com/avatar/ea2d38cd6dc84e4e8fc779dfc7d8a690?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn">KrzaQ</cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11202">
				April 18, 2014 at 10:12 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>so, wordpress ate my template parameters.<br />
errata:<br />
1. numeric_limits{size_t}::max() &gt; numeric_limits{int}::max()<br />
2. numeric_limits{size_t}::max() &lt;= numeric_limits{int}::max()</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11202#respond' onclick='return addComment.moveForm("comment-11202", "11202", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment even depth-4 highlander-comment" id="li-comment-11224">
		<div id="comment-11224">
			<div class="comment-author vcard">
				<img alt='' src='http://i1.wp.com/graph.facebook.com/502061754/picture?q=type%3Dlarge%26_md5%3D5d79b8e0dfce28f53c2bb68c4e11d61d&#038;resize=40%2C40' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='https://www.facebook.com/xardox' rel='external nofollow' class='url'>Don Hopkins</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11224">
				April 19, 2014 at 3:23 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>If you&#8217;re going to be pedantic, please be pedantic in a way that clearly expresses the INTENTION of the program and falls as far as possible on the side of safety and unambiguity as you can, without breaking the meaning of the program or increasing the difficulty of humans to understand it. Any other form of pedantism is simply obnoxious and counterproductive. Got that? Ok, thanks! Bye!</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11224#respond' onclick='return addComment.moveForm("comment-11224", "11224", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment odd alt depth-5 highlander-comment" id="li-comment-11226">
		<div id="comment-11226">
			<div class="comment-author vcard">
				<img alt='' src='http://2.gravatar.com/avatar/ea2d38cd6dc84e4e8fc779dfc7d8a690?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn">KrzaQ</cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11226">
				April 19, 2014 at 3:35 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>The original statement wasn&#8217;t entirely correct and I pointed that out. No need to get snippy about that.</p>
<p>For readability, I agree that casting both is better, but I would probably recommend static casts or constructor-style casts and, more importantly, not doing all this in a single line in the first place.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1 highlander-comment" id="li-comment-11196">
		<div id="comment-11196">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/41f0b6be614ce50d142f6dd0856e07b4?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn">Jim</cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11196">
				April 18, 2014 at 9:49 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>Reading this post is like reading a Harry Potter novel: the winy analyzing over something very unimportant. </p>
<p>&#8220;One could argue that Apple’s code is fine as long as ‘m’ and ‘n’ have type size_t. That is true, but that supposition is just not supported by the surrounding text.&#8221; </p>
<p>Hey Apple, put this entire post to waste by:<br />
size_t n,m;<br />
&#8230;<br />
if (n &gt; 0 &amp;&amp; m &gt; 0 &amp;&amp; SIZE_MAX/n &gt;= m) {<br />
    size_t bytes = (size_t)n * (size_t)m;<br />
    … /* allocate “bytes” space */<br />
}</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11196#respond' onclick='return addComment.moveForm("comment-11196", "11196", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-brucedawson bypostauthor odd alt depth-2 highlander-comment" id="li-comment-11201">
		<div id="comment-11201">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/d69d2780728dfc033fcc8123f31ef8fa?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://randomascii.wordpress.com' rel='external nofollow' class='url'>brucedawson</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11201">
				April 18, 2014 at 10:12 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>Sorry you think it&#8217;s winy [sic], but as recent news (heartbleed, Apple SSL fail, etc.) have shown, tiny errors in security code matter. Apple&#8217;s advice is wrong. Dangerously wrong. They need to fix it. Your fix would be fine, although personally I prefer the cast to size_t as being more idiot-proof.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11201#respond' onclick='return addComment.moveForm("comment-11201", "11201", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment even depth-2 highlander-comment" id="li-comment-11225">
		<div id="comment-11225">
			<div class="comment-author vcard">
				<img alt='' src='http://i1.wp.com/graph.facebook.com/502061754/picture?q=type%3Dlarge&#038;resize=40%2C40' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='https://www.facebook.com/xardox' rel='external nofollow' class='url'>Don Hopkins</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11225">
				April 19, 2014 at 3:27 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>I&#8217;m more &#8220;winy&#8221; that I just had to rekey all of my SSL certificates. The road to fail is paved in goto intentions.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11225#respond' onclick='return addComment.moveForm("comment-11225", "11225", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 highlander-comment" id="li-comment-11197">
		<div id="comment-11197">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/a48f336120d4aa7be494df22a8df0544?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://yosoygames.com.ar' rel='external nofollow' class='url'>darksylinc</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11197">
				April 18, 2014 at 10:05 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>There is also ANOTHER bug in that documentation<br />
The docs said that this is bad because of undefined behavior potentially removing the &#8216;if&#8217; check<br />
size_t bytes = n * m;<br />
if (bytes &lt; n || bytes &lt; m) { /* BAD BAD BAD */<br />
&#8230; /* allocate &quot;bytes&quot; space */<br />
}</p>
<p>Forgetting about UB for a moment, This works if, as proposed by the guide, n or m is negative. But it doesn&#039;t protect against all kinds of overflow.<br />
The snippet is wrong. The following code passes that tests, even though the multiplication is clearly overflowing and there is no undefined behavior:<br />
uint32_t a = 100000;<br />
uint32_t b = 100000;<br />
uint32_t val = a * b;<br />
int32_t val2 = (int)val;<br />
cout &lt;&lt; val &lt;&lt; endl;<br />
cout &lt;&lt; val2 &lt;&lt; endl;</p>
<p>Both val &amp; val2 result is 1.410.065.408; which passes the test &#039;if (bytes &lt; n || bytes &lt; m) but does not pass &#039;if (n &gt; 0 &amp;&amp; m &gt; 0 &amp;&amp; SIZE_MAX/n &gt;= m)&#8217;</p>
<p>The Apple security guide is comparing broken code with functioning code, claiming that Undefined Behavior is the reason the broken code is broken (it&#8217;s not just that); and claiming that the 2nd snippet is free from UB (which as you pointed out, it&#8217;s not).<br />
That&#8217;s a double fail. Triple fail if you consider they &#8220;fixed&#8221; the snippet and was still wrong.<br />
The original author clearly doesn&#8217;t understand what&#8217;s going on*, or is too lazy to care.</p>
<p>*To be honest, the C/C++ standard is incredibly complex. It&#8217;s understandable, but not an excuse.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11197#respond' onclick='return addComment.moveForm("comment-11197", "11197", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1 highlander-comment" id="li-comment-11205">
		<div id="comment-11205">
			<div class="comment-author vcard">
				<img alt='' src='http://2.gravatar.com/avatar/e53b833683be7bc108e761d4ae0c0e5c?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn">wtf lol</cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11205">
				April 18, 2014 at 10:55 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>For 32-bit on some processors it&#8217;s simple.  For example, ARM has an instruction that can do 32bit x 32bit = 64bit result.  After the multiply, you check top-32bits if non-zero then you have a problem, otherwise the bottom-32-bit result is ok.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11205#respond' onclick='return addComment.moveForm("comment-11205", "11205", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-11206">
		<div id="comment-11206">
			<div class="comment-author vcard">
				<img alt='' src='http://2.gravatar.com/avatar/e53b833683be7bc108e761d4ae0c0e5c?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn">wtf lol</cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11206">
				April 18, 2014 at 10:57 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>My post meant &#8220;unsigned&#8221; values.  For sign, it&#8217;s a little bit more work, but similar concept.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11206#respond' onclick='return addComment.moveForm("comment-11206", "11206", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-brucedawson bypostauthor even depth-3 highlander-comment" id="li-comment-11207">
		<div id="comment-11207">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/d69d2780728dfc033fcc8123f31ef8fa?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://randomascii.wordpress.com' rel='external nofollow' class='url'>brucedawson</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11207">
				April 18, 2014 at 11:13 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>I&#8217;m sure all processors have a 32&#215;32=64 multiply instruction. To access it from C/C++ you have to cast the inputs to 64- bit.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11207#respond' onclick='return addComment.moveForm("comment-11207", "11207", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="post pingback">
		<p>Pingback: <a href='http://blog.gslin.org/archives/2014/04/19/4533/%e6%aa%a2%e6%9f%a5%e5%a4%a7%e5%b0%8f%e6%99%82%e8%a6%81%e6%b3%a8%e6%84%8f%e7%9a%84%e5%95%8f%e9%a1%8c/' rel='external nofollow' class='url'>檢查大小時要注意的問題 | Gea-Suan Lin&#039;s BLOG</a></p>
	</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 highlander-comment" id="li-comment-11213">
		<div id="comment-11213">
			<div class="comment-author vcard">
				<img alt='' src='http://2.gravatar.com/avatar/e917968317abb617b39d12613b1975a9?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://arjunsreedharan.org' rel='external nofollow' class='url'>Arjun Sreedharan</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11213">
				April 18, 2014 at 1:51 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>Just one page behind from where you quote the snippets (pg 27); it&#8217;s written:</p>
<p>&gt;&gt;Also, any bits that overflow past the length of an integer variable (whether signed or unsigned) are dropped.</p>
<p>Overflow for signed integers causes Undefined-Behavior, not just dropping the overflowing bit.<br />
I don&#8217;t understand, where are they doing with this !!</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11213#respond' onclick='return addComment.moveForm("comment-11213", "11213", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-brucedawson bypostauthor even depth-2 highlander-comment" id="li-comment-11221">
		<div id="comment-11221">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/d69d2780728dfc033fcc8123f31ef8fa?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://randomascii.wordpress.com' rel='external nofollow' class='url'>brucedawson</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11221">
				April 18, 2014 at 11:07 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>Truly odd, I agree.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11221#respond' onclick='return addComment.moveForm("comment-11221", "11221", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="li-comment-11214">
		<div id="comment-11214">
			<div class="comment-author vcard">
				<img alt='' src='http://2.gravatar.com/avatar/8e3587e9819c4e7fe01623486bbb926c?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn">anon</cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11214">
				April 18, 2014 at 2:03 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>For unsigned n and m, the check `n &gt; 0 &amp;&amp; m &gt; 0` isn&#8217;t needed, the multiplication couldn&#8217;t overflow.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11214#respond' onclick='return addComment.moveForm("comment-11214", "11214", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-brucedawson bypostauthor even depth-2 highlander-comment" id="li-comment-11220">
		<div id="comment-11220">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/d69d2780728dfc033fcc8123f31ef8fa?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://randomascii.wordpress.com' rel='external nofollow' class='url'>brucedawson</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11220">
				April 18, 2014 at 10:46 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>The check for &#8216;n &gt; 0&#8242; is needed to avoid a divide-by-zero. I agree that the check for &#8216;m &gt; 0&#8242; is odd. I guess they want to treat an attempt to allocate zero bytes as an error, but that is a completely separate decision from trying to avoid integer overflow.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11220#respond' onclick='return addComment.moveForm("comment-11220", "11220", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 highlander-comment" id="li-comment-11227">
		<div id="comment-11227">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/3d1877e21c369bc5870dbf262a3e3948?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn">anon</cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11227">
				April 19, 2014 at 3:36 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>For the specific case of allocating a buffer of q = m*n bytes, it seems to me that it would be more secure to sanity check m and n instead of worrying about multiplication overflow.</p>
<p>Even with overflow prevention, naively allocating m*n bytes, where m and n are untrusted, will allow a DoS attack through the allocation of an arbitrarily large block of memory.</p>
<p>Set a design target on the maximum valid value for m and n and cap them there e.g.</p>
<p>uint32 SaferM = min(MAX_M, abs(m));<br />
uint32 SaferN = min(MAX_N, abs(n));<br />
uint64 q = (uint64)SaferM * (uint64)SaferN;<br />
if (q &gt; 0 &amp;&amp; q &lt; MAX_Q) ptr = malloc(q);</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11227#respond' onclick='return addComment.moveForm("comment-11227", "11227", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-brucedawson bypostauthor even depth-2 highlander-comment" id="li-comment-11238">
		<div id="comment-11238">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/d69d2780728dfc033fcc8123f31ef8fa?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://randomascii.wordpress.com' rel='external nofollow' class='url'>brucedawson</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11238">
				April 19, 2014 at 3:49 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>Agreed, that can be better, in many domains. Many image decoders clamp width/height to 16Ki or 32 Ki in order to avoid overflow. The downside is that you end up with image editors that refuse to load some images &#8212; I have images of the earth that are 43,200&#215;43,200 and lots of programs won&#8217;t touch them.</p>
<p>If you&#8217;re trying to prevent DoS attacks then clamping the total size is more appropriate, so that someone can still create, say, request 200,000&#215;10 items.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11238#respond' onclick='return addComment.moveForm("comment-11238", "11238", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="post pingback">
		<p>Pingback: <a href='http://devgrapher.com/?p=963' rel='external nofollow' class='url'>Programming 이슈, 4월 2주 | Tinkering Driven Life</a></p>
	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="li-comment-11231">
		<div id="comment-11231">
			<div class="comment-author vcard">
				<img alt='' src='http://i1.wp.com/lh4.googleusercontent.com/-EyuOS4Di9lg/AAAAAAAAAAI/AAAAAAAAAic/XNsWKc4nZMQ/photo.jpg?resize=40%2C40' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='https://plus.google.com/117904230859295174457' rel='external nofollow' class='url'>Jeffrey Soldan</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11231">
				April 19, 2014 at 8:11 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>&#8220;The problem with their initial recommended code is that signed overflow gives undefined behavior in C/C++.&#8221;</p>
<p>This is incorrect and I wish people would stop spreading this incorrect interpretation of the standard.</p>
<p>That standard states that IF the underlying architecture has undefined behavior for signed integer overflows than the behavior will be undefined, however, if the behavior of signed integer overflows is defined by the architecture the emitted code will follow the same rules. As far as I can recall, every major architecture in use today not only has well defined signed integer overflow behavior, but uses essentially the same rules for it.</p>
<p>In other words, the compiler is required to preserve the behavior of the underlying architecture the code is running on, and on every major architecture in use today that is well defined. Optimizing out those sign checks is invalid.</p>
<p>I believe the intention was that compilers should not be required to emit additional code to change the behavior, but are just required to maintain it.</p>
<p>It is worth noting that the GCC developers have horribly misinterpreted this as well, so while the standard DOES define what to expect, there have been non-conforming implementations in popular use.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11231#respond' onclick='return addComment.moveForm("comment-11231", "11231", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-brucedawson bypostauthor even depth-2 highlander-comment" id="li-comment-11232">
		<div id="comment-11232">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/d69d2780728dfc033fcc8123f31ef8fa?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://randomascii.wordpress.com' rel='external nofollow' class='url'>brucedawson</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11232">
				April 19, 2014 at 8:53 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>Do you have a reference for your claim that signed integer overflow is defined? From my reading of the C++ standard it is clearly not. Section 5/4 of the draft C++14 standard says:</p>
<p>&#8220;If during the evaluation of an expression, the result is not mathematically defined or not in the range of representable values for its type, the behavior is undefined.&#8221;</p>
<p>They later explain that unsigned math is expected to follow modulo 2^n rules, so this doesn&#8217;t apply to unsigned math, but I have seen no similar escape valve for signed arithmetic. I think that if gcc/clang were misinterpreting the standard then somebody on the C++ committee would have pointed it out by now.</p>
<p>I agree that all modern computers implement signed arithmetic identically, but the C/C++ standard tells us not to rely on this. I am not convinced that this is a good idea, but it is what we have.</p>
<p>Of course, the code is still broken for 64-bit compiles, regardless of the state of undefined behavior.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11232#respond' onclick='return addComment.moveForm("comment-11232", "11232", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-11248">
		<div id="comment-11248">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/981849a5b45ba25eb4f0baf98c38bf2c?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='https://plus.google.com/117904230859295174457' rel='external nofollow' class='url'>Jeffrey Soldan</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11248">
				April 20, 2014 at 4:38 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>Looking at the C99 and C++11 draft specs (the only ones I had available at the moment), I was unable to find the section I mentioned. I originally found it in a copy of the spec linked as proof for the GCC debate on the subject, and I&#8217;m not sure which version it was. I&#8217;m assuming early ANSI C perhaps?</p>
<p>I concede that the section I referred to has apparently been removed. </p>
<p>However, there are other things which clarify this as a non-conforming defect.</p>
<p>I put together a quick test in GCC in which optimization breaks behavior of signed int wrapping. In this test, std::numeric_limits::is_modulo returns true.<br />
Regarding is_modulo the C++11 spec states:<br />
&#8220;True if the type is modulo. A type is modulo if, for any operation involving +, -, or * on values of that type whose result would fall outside the range [min(),max()], the value returned diﬀers from the true value by an integer multiple of max() &#8211; min() + 1.&#8221;<br />
Per the C++11 spec (as well as LIA-1), by defining it&#8217;s signed int implementation as modulo it&#8217;s required to wrap on overflow.</p>
<p>I tried the same test with clang, which also stated signed int was modulo, and thus must wrap on overflow. My simple test did not break under clang&#8217;s optimization.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11248#respond' onclick='return addComment.moveForm("comment-11248", "11248", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment even depth-4 highlander-comment" id="li-comment-11249">
		<div id="comment-11249">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/981849a5b45ba25eb4f0baf98c38bf2c?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='https://plus.google.com/117904230859295174457' rel='external nofollow' class='url'>Jeffrey Soldan</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11249">
				April 20, 2014 at 5:02 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>I suppose my original statement should be changed to state signed overflow IS defined when an implementation defines signed types as modulo, which is true of at least gcc and clang.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11249#respond' onclick='return addComment.moveForm("comment-11249", "11249", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment odd alt depth-5 highlander-comment" id="li-comment-11276">
		<div id="comment-11276">
			<div class="comment-author vcard">
				<img alt='' src='http://i0.wp.com/graph.facebook.com/1448135628/picture?q=type%3Dlarge&#038;resize=40%2C40' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='https://www.facebook.com/Robert.Blair.Aldridge' rel='external nofollow' class='url'>Robert Blair Aldridge</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11276">
				April 22, 2014 at 11:57 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>We don&#8217;t want to be writing code whose behavior is different based on the implementation of the language specification.  If the specification said anywhere that the behavior of signed integer overflow is left up to the implementer then avoid it like the plague.  For [another] example, if the language specification leaves the sign of &#8216;char&#8217; to be decided by the implementation then will you take a chance or will you check every time to know for sure and never assume the sign?  Also in C++11 under fundamental types section 3.9.1, footnote 46 states &#8216;This implies that unsigned arithmetic does not overflow because a result that cannot be represented by the resulting unsigned integer type is reduced modulo the number that is one greater than the largest value that can be represented by the resulting unsigned integer type.&#8217;  And there is no corresponding footnote for signed integer overflow or lack thereof, presuming that the standard deals with overflow differently in the context of signed integer versus unsigned integer.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment byuser comment-author-brucedawson bypostauthor even depth-5 highlander-comment" id="li-comment-11282">
		<div id="comment-11282">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/d69d2780728dfc033fcc8123f31ef8fa?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://randomascii.wordpress.com' rel='external nofollow' class='url'>brucedawson</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11282">
				April 23, 2014 at 8:55 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>I suspect the bug is that gcc an clang are incorrectly setting is_modulo, and they will correct how they set it. I agree with Robert that having signed overflow defined for some compilers/settings is dangerous. I think I&#8217;d like to see it defined for all conforming implementations.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment byuser comment-author-drakonite odd alt depth-5 highlander-comment" id="li-comment-11283">
		<div id="comment-11283">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/981849a5b45ba25eb4f0baf98c38bf2c?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn">drakonite</cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11283">
				April 23, 2014 at 10:13 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>is_modulo is correct for all hardware which uses two&#8217;s compliment for storing signed values, as that is the behavior caused in two&#8217;s compliment on overflow.</p>
<p>The idea of signed int overflow being undefined is due to when the C language was originally drafted there had been other methods of storing signed values in use, specifically one&#8217;s compliment, in which signed int overflow did not have a mathematical definition. Requiring specific behavior for non-two&#8217;s complement hardware would have required significant additional code emitted for every signed integer arithmetic operation.</p>
<p>As far as I am aware there is no modern architecture which does not use two&#8217;s complement representation of signed integers, and given how entrenched two&#8217;s complement is as well as the myriad of benefits it has, I have serious doubts anyone will consider not using it.</p>
<p>I do not agree it is dangerous nor that it should be avoided to rely on this behavior at this point. If you feel your code could be at risk you should be able to add a static assert against std::numeric_limits::is_modulo, though it should be true for every modern architecture.</p>
<p>The only &#8220;problem case&#8221; I&#8217;m aware of is GCC&#8217;s current optimization behavior, which due to the definition of is_modulo providing a mathematical definition for signed int overflow I strongly say is erroneous and non-conforming behavior on GCC&#8217;s part.</p>
<p>Is this straightforward? No. Should it be better explained in the spec? Yes. Should signed int overflow undefined? Given it being defined as modulo on all modern architecture, IMO, no, it should not be treated as undefined, as there is a clear mathematical definition.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment byuser comment-author-brucedawson bypostauthor even depth-5 highlander-comment" id="li-comment-11284">
		<div id="comment-11284">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/d69d2780728dfc033fcc8123f31ef8fa?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://randomascii.wordpress.com' rel='external nofollow' class='url'>brucedawson</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11284">
				April 23, 2014 at 2:21 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>I think you are correct that the &#8216;only &#8220;problem case&#8221;&#8216; is gcc&#8217;s/clang&#8217;s current behavior, but that&#8217;s a pretty big if.</p>
<p>The reason I often hear for leaving signed overflow undefined is that it allows some constructs to be compiled to significantly faster code. That is, it allows some valid code constructs that do not overflow to generate faster code than if signed overflow was defined to have modulo behavior. I&#8217;m sorry that I don&#8217;t have references handy right now.</p>
<p>I&#8217;m not saying that I agree with this calculation, but it is something that has to be understood and addressed on the road to defining signed overflow.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 highlander-comment" id="li-comment-11234">
		<div id="comment-11234">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/492afcba533ee050bbe324f99144b4d8?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn">loreb</cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11234">
				April 19, 2014 at 9:02 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>Git has a (imho) very elegant solution for signed/unsigned addition &#8211; extending to multiplication would require turning it into a function (to avoid evaluating the arguments twice) or requiring that the operands be nonzero.<br />
It&#8217;s at <a href="https://git.kernel.org/cgit/git/git.git/tree/git-compat-util.h" rel="nofollow">https://git.kernel.org/cgit/git/git.git/tree/git-compat-util.h</a></p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11234#respond' onclick='return addComment.moveForm("comment-11234", "11234", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-brucedawson bypostauthor even depth-2 highlander-comment" id="li-comment-11237">
		<div id="comment-11237">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/d69d2780728dfc033fcc8123f31ef8fa?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://randomascii.wordpress.com' rel='external nofollow' class='url'>brucedawson</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11237">
				April 19, 2014 at 3:45 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>Not bad. It has the usual macro problems of potential double evaluation, and it also has the requirement that a be &gt;= 0, and that the types match. So, it is safe as long as it is used very carefully. I&#8217;d prefer an inline template function to make it truly safe.</p>
<p>Still, it does show some good techniques.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11237#respond' onclick='return addComment.moveForm("comment-11237", "11237", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="li-comment-11239">
		<div id="comment-11239">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/feca1bdbf5bfacd94fd58079fee4a2c4?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn">Félix Cloutier</cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11239">
				April 19, 2014 at 4:16 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>If you reported it and it got fixed last time, I&#8217;m gonna make the bet that someone at Apple will read the comments: just use Clang&#8217;s checked arithmetic builtins (<a href="http://clang.llvm.org/docs/LanguageExtensions.html#checked-arithmetic-builtins" rel="nofollow">http://clang.llvm.org/docs/LanguageExtensions.html#checked-arithmetic-builtins</a>) and be done with it. They&#8217;re more expressive and visibly safer.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11239#respond' onclick='return addComment.moveForm("comment-11239", "11239", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-brucedawson bypostauthor even depth-2 highlander-comment" id="li-comment-11240">
		<div id="comment-11240">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/d69d2780728dfc033fcc8123f31ef8fa?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://randomascii.wordpress.com' rel='external nofollow' class='url'>brucedawson</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11240">
				April 19, 2014 at 4:22 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>This time I sent e-mail to <a href="mailto:product-security@apple.com">product-security@apple.com</a> with the full set of concerns. They said they will address my concerns in a future version of the guide.</p>
<p>Intrinsics would be a good idea. It is hard for developers to write C/C++ code that does significant math on arbitrary numbers without hitting undefined behavior. SafeInt and other efforts try to make it easier, but it&#8217;s still complex. Intrinsics that exploit the CPUs carry and overflow flags would be very helpful.</p>
<p>Or, how about something like this:</p>
<p>    if (safeeval(result = x + y * w + 7))<br />
        p = malloc(result);<br />
    else<br />
        // Handle failure.</p>
<p>A compiler can safely evaluate that expression in machine code far more easily than a developer constrained by C/C++.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11240#respond' onclick='return addComment.moveForm("comment-11240", "11240", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-11277">
		<div id="comment-11277">
			<div class="comment-author vcard">
				<img alt='' src='http://i0.wp.com/graph.facebook.com/1448135628/picture?q=type%3Dlarge&#038;resize=40%2C40' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='https://www.facebook.com/Robert.Blair.Aldridge' rel='external nofollow' class='url'>Robert Blair Aldridge</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11277">
				April 22, 2014 at 11:59 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>Apple has a separate website for submitting bugs, it may be more helpful in the future then sending an email (or do both and reference the bug number in the email).  <a href="https://bugreport.apple.com/‎" rel="nofollow">https://bugreport.apple.com/‎</a></p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11277#respond' onclick='return addComment.moveForm("comment-11277", "11277", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="post pingback">
		<p>Pingback: <a href='http://mjtsai.com/blog/2014/04/20/buggy-security-guidance-from-apple/' rel='external nofollow' class='url'>Michael Tsai - Blog - Buggy Security Guidance from Apple</a></p>
	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1 highlander-comment" id="li-comment-11271">
		<div id="comment-11271">
			<div class="comment-author vcard">
				<img alt='' src='http://2.gravatar.com/avatar/e79e7b45dc0c4040eb53935c0f921cbe?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://tim.dierks.org/' rel='external nofollow' class='url'>Tim Dierks</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11271">
				April 22, 2014 at 2:10 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>If they meant size_t, it&#8217;s a different problem, as size_t is unsigned and unsigned overflow is not undefined behavior in C. In the specific example (allocating space for n items, each m bytes long), all values are by their nature positive or zero, so all the work should be done in unsigned values anyway.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11271#respond' onclick='return addComment.moveForm("comment-11271", "11271", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="li-comment-11286">
		<div id="comment-11286">
			<div class="comment-author vcard">
				<img alt='' src='http://2.gravatar.com/avatar/b959463cffc863714d48741587e9feff?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://www.codeplex.com/SafeInt' rel='external nofollow' class='url'>David LeBlanc</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11286">
				April 23, 2014 at 2:52 pm</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>The proposed fix is still not ideal, and size_t is a poorly chosen type to handle this sort of problem. The first problem is that the code uses division at all. A div instruction is very expensive. If we&#8217;re assuming a 32-bit signed input, then the best and easiest thing to do is to just do this:</p>
<p>__int64 ret = (__int64)x * (__int64)y;<br />
if (ret &gt; 32) != 0) complain;</p>
<p>It also doesn&#8217;t reject 0 as a legal input. And yes, signed overflow is indeed undefined by the standard, and _some_ compilers will indeed remove non-standard code. Their example is broken. This approach also only incurs a couple of extra instructions and doesn&#8217;t waste expensive instructions on something we won&#8217;t use later in the common case, which is that it won&#8217;t overflow.</p>
<p>An additional problem is that the typical intent when we&#8217;re accepting 2 ints as sizes is that the size of the allocation also ought to fit into a 32-bit int &#8211; very likely all sorts of internal structures think that 2GB ought to be enough memory. So the fixed version that would calculate a 64-bit size_t (and never overflow, so the division isn&#8217;t needed) could actually end up asking for up to 2^62 -1 bytes, and no practical allocator that exists today can do that.</p>
<p>BTW, SafeInt is fully supported on their compiler, and will quite happily solve most of the problem for them, except the part where the allocation size needs an artificial limit of INT_MAX, though it can be made to do it like so:</p>
<p>p = malloc( (unsigned int)(SafeInt(x) * y) );</p>
<p>This will first check that the multiplication doesn&#8217;t overflow an int, and then the cast checks whether it ended up negative, and because a non-negative int won&#8217;t exceed 2^31-1, you now have an upper limit.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11286#respond' onclick='return addComment.moveForm("comment-11286", "11286", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="post pingback">
		<p>Pingback: <a href='http://www.timglu.com/%d0%b0%d0%bf%d1%80%d0%b5%d0%bb%d1%8c%d1%81%d0%ba%d0%b0%d1%8f-%d0%bb%d0%b5%d0%bd%d1%82%d0%b0-%d0%bb%d1%83%d1%87%d1%88%d0%b5%d0%b5-%d0%b7%d0%b0-%d0%bc%d0%b5%d1%81%d1%8f%d1%86-2/' rel='external nofollow' class='url'>Апрельская лента: лучшее за месяц</a></p>
	</li><!-- #comment-## -->
	<li class="post pingback">
		<p>Pingback: <a href='http://randomascii.wordpress.com/2014/05/19/undefined-behavior-can-format-your-drive/' rel='external nofollow' class='url'>Undefined Behavior *Can* Format Your Drive | Random ASCII</a></p>
	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1 highlander-comment" id="li-comment-11602">
		<div id="comment-11602">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/67b2b9e6a2bcce21849309d18f6196bf?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://gravatar.com/ihgreenman' rel='external nofollow' class='url'>IHGreenman</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11602">
				May 20, 2014 at 9:12 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>Actually, I’m not sure that your (Bruce’s) assumption about m and n being signed is correct.</p>
<p>If you look at the if statement, it is checking if m and n are *greater than zero* and not that they are *greater than or equal to zero*. Allocating zero bytes (as would be done if m or n were zero) doesn’t make sense. Further, zero is a perfectly valid value regardless if you’re talking about signed or unsigned, so that portion of the if statement wouldn’t be nuked.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11602#respond' onclick='return addComment.moveForm("comment-11602", "11602", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-ihgreenman odd alt depth-2 highlander-comment" id="li-comment-11603">
		<div id="comment-11603">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/67b2b9e6a2bcce21849309d18f6196bf?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://gravatar.com/ihgreenman' rel='external nofollow' class='url'>IHGreenman</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11603">
				May 20, 2014 at 9:20 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>I do emphatically agree, however, that it is sloppy of Apple to not specify the types of m and n.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11603#respond' onclick='return addComment.moveForm("comment-11603", "11603", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-brucedawson bypostauthor even depth-3 highlander-comment" id="li-comment-11604">
		<div id="comment-11604">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/d69d2780728dfc033fcc8123f31ef8fa?s=40&#038;d=identicon&#038;r=G' class='avatar avatar-40' height='40' width='40' />				<cite class="fn"><a href='http://randomascii.wordpress.com' rel='external nofollow' class='url'>brucedawson</a></cite> <span class="says">says:</span>			</div><!-- .comment-author .vcard -->
			
			<div class="comment-meta commentmetadata"><a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/#comment-11604">
				May 20, 2014 at 10:02 am</a>			</div><!-- .comment-meta .commentmetadata -->

			<div class="comment-body"><p>The most we can say with certainty about &#8216;m&#8217; and &#8216;n&#8217; is that they might be unsigned, so the behavior *might* be defined, which I think we all agree is pretty weak. However I think the surrounding text makes it clear that Apple assumes that they are signed, due to their discussion of undefined behavior earlier on the page.</p>
<p>The &gt;0 check is compatible with them being signed or unsigned so it doesn&#8217;t help either way.</p>
<p>But, it&#8217;s all mostly irrelevant. The main remaining issue is that if &#8216;m&#8217; and &#8216;n&#8217; are 32-bit and size_t is 64-bit (true for any 64-bit build environment) then the code is 100% busted, regardless of whether &#8216;m&#8217; and &#8216;n&#8217; are signed or not.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2014/04/17/buggy-security-guidance-from-apple/?replytocom=11604#respond' onclick='return addComment.moveForm("comment-11604", "11604", "respond", "1677")'>Reply</a>			</div><!-- .reply -->
		</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
			</ol>


	

								<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2014/04/17/buggy-security-guidance-from-apple/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://randomascii.wordpress.com/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																										


												<input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="8afbefef68" /><input type="hidden" name="_wp_http_referer" value="/2014/04/17/buggy-security-guidance-from-apple/" />
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest" />

<div class="comment-form-field comment-textarea">
	<label for="comment">Enter your comment here...</label>
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..."></textarea></div>
</div>

<div id="comment-form-identity">

	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" title="Guest">
					<span></span>
				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" title="WordPress.com">
					<span></span>
				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" title="Twitter">
					<span></span>
				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" title="Facebook">
					<span></span>
				</a>
			</li>
			<li>
			<iframe id="googleplus-sign-in" name="googleplus-sign-in" src="https://public-api.wordpress.com/connect/?googleplus-sign-in=http%3A%2F%2Frandomascii.wordpress.com" width="24" height="24" scrolling="no" allowtransparency="true" seamless="seamless" frameborder="0"></iframe>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav" />
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value="" /></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value="" /></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="text" value="" /></div>
				</div>
			</div>
	
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="http://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png?m=1391188133g" alt="WordPress.com Logo" width="25" class="no-grav" />
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="" />
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="" />
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="" />
				<p class="comment-form-posting-as pa-wordpress"><strong></strong> You are commenting using your WordPress.com account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav" />
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="" />
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="" />
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="" />
				<p class="comment-form-posting-as pa-twitter"><strong></strong> You are commenting using your Twitter account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Facebook photo" width="25" class="no-grav" />
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="" />
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="" />
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="" />
				<p class="comment-form-posting-as pa-facebook"><strong></strong> You are commenting using your Facebook account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>

	<div id="comment-form-googleplus" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Google+ photo" width="25" class="no-grav" />
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="googleplus_avatar" id="googleplus-avatar" class="comment-meta-googleplus" value="" />
				<input type="hidden" name="googleplus_user_id" id="googleplus-user_id" class="comment-meta-googleplus" value="" />
				<input type="hidden" name="googleplus_access_token" id="googleplus-access_token" class="comment-meta-googleplus" value="" />
				<p class="comment-form-posting-as pa-googleplus"><strong></strong> You are commenting using your Google+ account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'googleplus' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

	
</div>

<script type="text/javascript">
var highlander_expando_javascript = function(){
	var input = document.createElement( 'input' ),
	    comment = jQuery( '#comment' );

	if ( 'placeholder' in input ) {
		comment.attr( 'placeholder', jQuery( '.comment-textarea label' ).remove().text() );
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	jQuery( '#comment-form-identity' ).hide();
	jQuery( '#comment-form-subscribe' ).hide();
	jQuery( '#commentform .form-submit' ).hide();

	comment.css( { 'height':'10px' } ).one( 'focus', function() {
		var timer = setInterval( HighlanderComments.resizeCallback, 10 )
		jQuery( this ).animate( { 'height': HighlanderComments.initialHeight } ).delay( 100 ).queue( function(n) { clearInterval( timer ); HighlanderComments.resizeCallback(); n(); } );
		jQuery( '#comment-form-identity' ).slideDown();
		jQuery( '#comment-form-subscribe' ).slideDown();
		jQuery( '#commentform .form-submit' ).slideDown();
	});
}
jQuery(document).ready( highlander_expando_javascript );
</script>

<div id="comment-form-subscribe">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;" tabindex="6"/> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of follow-up comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;" tabindex="7"/> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog"  style="display: inline;">Notify me of new posts via email.</label></p></div>

												<p class="form-submit">
							<input name="submit" type="submit" id="comment-submit" value="Post Comment" />
							<input type='hidden' name='comment_post_ID' value='1677' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
						</p>
						<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="0b1ec25de2" /></p>
<input type="hidden" name="genseq" value="1404248428" />
<p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="248"/></p>					</form>
							</div><!-- #respond -->
			<div style="clear: both"></div>
</div><!-- #comments -->


			</div><!-- #content -->
		</div><!-- #container -->


		<div id="primary" class="widget-area" role="complementary">
						<ul class="xoxo">

<li id="search-2" class="widget-container widget_search"><form role="search" method="get" id="searchform" class="searchform" action="http://randomascii.wordpress.com/">
				<div>
					<label class="screen-reader-text" for="s">Search for:</label>
					<input type="text" value="" name="s" id="s" />
					<input type="submit" id="searchsubmit" value="Search" />
				</div>
			</form></li>		<li id="recent-posts-2" class="widget-container widget_recent_entries">		<h3 class="widget-title">Recent Posts</h3>		<ul>
					<li>
				<a href="http://randomascii.wordpress.com/2014/06/26/please-calculate-this-circles-circumference/">Please Calculate This Circle&rsquo;s&nbsp;Circumference</a>
						</li>
					<li>
				<a href="http://randomascii.wordpress.com/2014/05/19/undefined-behavior-can-format-your-drive/">Undefined Behavior *Can* Format Your&nbsp;Drive</a>
						</li>
					<li>
				<a href="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/">Buggy Security Guidance from&nbsp;Apple</a>
						</li>
					<li>
				<a href="http://randomascii.wordpress.com/2014/04/15/self-inflicted-denial-of-service-in-visual-studio-search/">Self Inflicted Denial of Service in Visual Studio&nbsp;Search</a>
						</li>
					<li>
				<a href="http://randomascii.wordpress.com/2014/03/31/you-got-your-web-browser-in-my-compiler/">You Got Your Web Browser in my&nbsp;Compiler!</a>
						</li>
				</ul>
		</li><li id="categories-2" class="widget-container widget_categories"><h3 class="widget-title">Categories</h3>		<ul>
	<li class="cat-item cat-item-55391280"><a href="http://randomascii.wordpress.com/category/altdevblogaday/" >AltDevBlogADay</a>
</li>
	<li class="cat-item cat-item-6354"><a href="http://randomascii.wordpress.com/category/bugs/" >Bugs</a>
</li>
	<li class="cat-item cat-item-1757973"><a href="http://randomascii.wordpress.com/category/code-analysis/" >Code analysis</a>
</li>
	<li class="cat-item cat-item-60792921"><a href="http://randomascii.wordpress.com/category/code-reliability/" >Code Reliability</a>
</li>
	<li class="cat-item cat-item-10392"><a href="http://randomascii.wordpress.com/category/computers-and-internet/" >Computers and Internet</a>
</li>
	<li class="cat-item cat-item-35087155"><a href="http://randomascii.wordpress.com/category/documentation-2/" >Documentation</a>
</li>
	<li class="cat-item cat-item-9313"><a href="http://randomascii.wordpress.com/category/drinks/" >Drinks</a>
</li>
	<li class="cat-item cat-item-184"><a href="http://randomascii.wordpress.com/category/environment/" >Environment</a>
</li>
	<li class="cat-item cat-item-1909999"><a href="http://randomascii.wordpress.com/category/floating-point/" >Floating Point</a>
</li>
	<li class="cat-item cat-item-69836"><a href="http://randomascii.wordpress.com/category/fractals/" >Fractals</a>
</li>
	<li class="cat-item cat-item-272"><a href="http://randomascii.wordpress.com/category/fun/" >Fun</a>
</li>
	<li class="cat-item cat-item-1256"><a href="http://randomascii.wordpress.com/category/gaming/" >Gaming</a>
</li>
	<li class="cat-item cat-item-570049"><a href="http://randomascii.wordpress.com/category/investigative-reporting/" >Investigative Reporting</a>
</li>
	<li class="cat-item cat-item-610"><a href="http://randomascii.wordpress.com/category/linux/" >Linux</a>
</li>
	<li class="cat-item cat-item-2813"><a href="http://randomascii.wordpress.com/category/math/" >Math</a>
</li>
	<li class="cat-item cat-item-1471"><a href="http://randomascii.wordpress.com/category/memory/" >memory</a>
</li>
	<li class="cat-item cat-item-1930"><a href="http://randomascii.wordpress.com/category/performance/" >Performance</a>
</li>
	<li class="cat-item cat-item-196"><a href="http://randomascii.wordpress.com/category/programming/" >Programming</a>
</li>
	<li class="cat-item cat-item-47"><a href="http://randomascii.wordpress.com/category/rants/" >Rants</a>
</li>
	<li class="cat-item cat-item-801"><a href="http://randomascii.wordpress.com/category/security/" >Security</a>
</li>
	<li class="cat-item cat-item-35212230"><a href="http://randomascii.wordpress.com/category/symbols-2/" >Symbols</a>
</li>
	<li class="cat-item cat-item-1"><a href="http://randomascii.wordpress.com/category/uncategorized/" >Uncategorized</a>
</li>
	<li class="cat-item cat-item-310023"><a href="http://randomascii.wordpress.com/category/unicycling/" >Unicycling</a>
</li>
	<li class="cat-item cat-item-35569987"><a href="http://randomascii.wordpress.com/category/visual-studio-2/" >Visual Studio</a>
</li>
	<li class="cat-item cat-item-16237569"><a href="http://randomascii.wordpress.com/category/wlpg/" >WLPG</a>
</li>
	<li class="cat-item cat-item-25050463"><a href="http://randomascii.wordpress.com/category/xperf/" >xperf</a>
</li>
		</ul>
</li><li id="twitter_timeline-2" class="widget-container widget_twitter_timeline"><h3 class="widget-title">Follow me on Twitter</h3><a class="twitter-timeline" data-widget-id="402237941470085120" data-theme="light" data-link-color="#f96e5b" data-border-color="#e8e8e8" data-tweet-limit="4" width="225" height="400" lang="EN">My Tweets</a></li><li id="meta-2" class="widget-container widget_meta"><h3 class="widget-title">Meta</h3>			<ul>
			<li><a href="https://en.wordpress.com/signup/?ref=wplogin">Register</a></li>			<li><a href="https://randomascii.wordpress.com/wp-login.php">Log in</a></li>
			<li><a href="http://randomascii.wordpress.com/feed/" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="http://randomascii.wordpress.com/comments/feed/" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
<li><a href="http://wordpress.com/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.com</a></li>			</ul>
</li>			</ul>
		</div><!-- #primary .widget-area -->

	</div><!-- #main -->

	<div id="footer" role="contentinfo">
		<div id="colophon">



			<div id="site-info">
				<a href="http://randomascii.wordpress.com/" title="Random ASCII" rel="home">
					Random ASCII				</a>
			</div><!-- #site-info -->

			<div id="site-generator">
				<a href="http://theme.wordpress.com/themes/twentyten/" title="Learn more about this theme">The Twenty Ten Theme</a>.				<a href="http://wordpress.com/?ref=footer_blog">Blog at WordPress.com</a>.
			</div><!-- #site-generator -->

		</div><!-- #colophon -->
	</div><!-- #footer -->

</div><!-- #wrapper -->

                <script type="text/javascript">
                        !function(d,s,id){
                                var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';
                                if(!d.getElementById(id)){
                                        js=d.createElement(s);
                                        js.id=id;js.src=p+"://platform.twitter.com/widgets.js";
                                        fjs.parentNode.insertBefore(js,fjs);
                                }
                        }
                        (document,"script","twitter-wjs");
                </script>
        <script type='text/javascript' src='//0.gravatar.com/js/gprofiles.js?ver=201427x'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://s2.wp.com/wp-content/mu-plugins/gravatar-hovercards/wpgroho.js?m=1380573781g'></script>

	<script>
		//initialize and attach hovercards to all gravatars
		jQuery( document ).ready( function( $ ) {
			if ( typeof Gravatar.init !== "function" ) {
				return;
			}			

			Gravatar.profile_cb = function( hash, id ) {
				WPGroHo.syncProfileData( hash, id );
			};
			Gravatar.my_hash = WPGroHo.my_hash;
			Gravatar.init( 'body', '#wp-admin-bar-my-account' );
		});
	</script>

		<div style="display:none">
	<div class="grofile-hash-map-d69d2780728dfc033fcc8123f31ef8fa">
	</div>
	<div class="grofile-hash-map-ea2d38cd6dc84e4e8fc779dfc7d8a690">
	</div>
	<div class="grofile-hash-map-d69d2780728dfc033fcc8123f31ef8fa">
	</div>
	<div class="grofile-hash-map-0287e0a38ccc8b2fbf1e103572a5951b">
	</div>
	<div class="grofile-hash-map-e7b999fa6a00cdd0ac750c27895ebc6e">
	</div>
	<div class="grofile-hash-map-f26d08d931b458ab8ca8e2ad88038236">
	</div>
	<div class="grofile-hash-map-41f0b6be614ce50d142f6dd0856e07b4">
	</div>
	<div class="grofile-hash-map-a48f336120d4aa7be494df22a8df0544">
	</div>
	<div class="grofile-hash-map-e53b833683be7bc108e761d4ae0c0e5c">
	</div>
	<div class="grofile-hash-map-e917968317abb617b39d12613b1975a9">
	</div>
	<div class="grofile-hash-map-8e3587e9819c4e7fe01623486bbb926c">
	</div>
	<div class="grofile-hash-map-3d1877e21c369bc5870dbf262a3e3948">
	</div>
	<div class="grofile-hash-map-981849a5b45ba25eb4f0baf98c38bf2c">
	</div>
	<div class="grofile-hash-map-7a6f3b1583dd26c34c0c5e331f661963">
	</div>
	<div class="grofile-hash-map-981849a5b45ba25eb4f0baf98c38bf2c">
	</div>
	<div class="grofile-hash-map-492afcba533ee050bbe324f99144b4d8">
	</div>
	<div class="grofile-hash-map-feca1bdbf5bfacd94fd58079fee4a2c4">
	</div>
	<div class="grofile-hash-map-e79e7b45dc0c4040eb53935c0f921cbe">
	</div>
	<div class="grofile-hash-map-b959463cffc863714d48741587e9feff">
	</div>
	<div class="grofile-hash-map-67b2b9e6a2bcce21849309d18f6196bf">
	</div>
	<div class="grofile-hash-map-67b2b9e6a2bcce21849309d18f6196bf">
	</div>
	</div>
<script type='text/javascript'>
/* <![CDATA[ */
var HighlanderComments = {"loggingInText":"Logging In\u2026","submittingText":"Posting Comment\u2026","postCommentText":"Post Comment","connectingToText":"Connecting to %s","commentingAsText":"%1$s: You are commenting using your %2$s account.","logoutText":"Log Out","loginText":"Log In","connectURL":"http:\/\/randomascii.wordpress.com\/public.api\/connect\/?action=request","logoutURL":"https:\/\/randomascii.wordpress.com\/wp-login.php?action=logout&_wpnonce=549b3c572c","homeURL":"http:\/\/randomascii.wordpress.com\/","postID":"1677","gravDefault":"identicon","enterACommentError":"Please enter a comment","enterEmailError":"Please enter your email address here","invalidEmailError":"Invalid email address","enterAuthorError":"Please enter your name here","gravatarFromEmail":"This picture will show whenever you leave a comment. Click to customize it.","logInToExternalAccount":"Log in to use details from one of these accounts.","change":"Change","changeAccount":"Change Account","comment_registration":"","userIsLoggedIn":"","isJetpack":"0"};
/* ]]> */
</script>
<script type='text/javascript' src='http://s1.wp.com/_static/??/wp-content/js/jquery/jquery.autoresize.js,/wp-content/mu-plugins/highlander-comments/script.js?m=1403644162j'></script>

	<div id="bit" class="loggedout-follow-normal">
		<a class="bsub" href="javascript:void(0)"><span id='bsub-text'>Follow</span></a>
		<div id="bitsubscribe">

					<h3><label for="loggedout-follow-field">Follow &ldquo;Random ASCII&rdquo;</label></h3>

			<form action="https://subscribe.wordpress.com" method="post" accept-charset="utf-8" id="loggedout-follow">
			<p>Get every new post delivered to your Inbox.</p>

			<p id="loggedout-follow-error" style="display: none;"></p>

						<p class="bit-follow-count">Join 2,054 other followers</p>
			<p><input type="email" name="email" value="Enter your email address" onfocus='this.value=(this.value=="Enter your email address") ? "" : this.value;' onblur='this.value=(this.value=="") ? "Enter email address" : this.value;'  id="loggedout-follow-field"/></p>

			<input type="hidden" name="action" value="subscribe"/>
			<input type="hidden" name="blog_id" value="18565082"/>
			<input type="hidden" name="source" value="http://randomascii.wordpress.com/2014/04/17/buggy-security-guidance-from-apple/"/>
			<input type="hidden" name="sub-type" value="loggedout-follow"/>

			<input type="hidden" id="_wpnonce" name="_wpnonce" value="a2011d2cd8" /><input type="hidden" name="_wp_http_referer" value="/2014/04/17/buggy-security-guidance-from-apple/" />
			<p id='bsub-subscribe-button'><input type="submit" value="Sign me up" /></p>
			</form>
					<div id='bsub-credit'><a href="http://wordpress.com/signup/?ref=lof">Powered by WordPress.com</a></div>
		</div><!-- #bitsubscribe -->
	</div><!-- #bit -->

	<script type="text/javascript">
		WPCOM_sharing_counts = {"http:\/\/randomascii.wordpress.com\/2014\/04\/17\/buggy-security-guidance-from-apple\/":1677}	</script>
	<div id="sharing_email" style="display: none;">
		<form action="/2014/04/17/buggy-security-guidance-from-apple/" method="post">
			<label for="target_email">Send to Email Address</label>
			<input type="email" name="target_email" id="target_email" value="" />

			
				<label for="source_name">Your Name</label>
				<input type="text" name="source_name" id="source_name" value="" />

				<label for="source_email">Your Email Address</label>
				<input type="email" name="source_email" id="source_email" value="" />

			
			<div class="recaptcha" id="sharing_recaptcha"></div><input type="hidden" name="recaptcha_public_key" id="recaptcha_public_key" value="6LcYW8MSAAAAADBAuEH9yaPcF7lWh11Iq62ZKtoo" />
			<img style="float: right; display: none" class="loading" src="http://s2.wp.com/wp-content/mu-plugins/post-flair/sharing/images/loading.gif?m=1315610318g" alt="loading" width="16" height="16" />
			<input type="submit" value="Send Email" class="sharing_send" />
			<a href="#cancel" class="sharing_cancel">Cancel</a>

			<div class="errors errors-1" style="display: none;">
				Post was not sent - check your email addresses!			</div>

			<div class="errors errors-2" style="display: none;">
				Email check failed, please try again			</div>

			<div class="errors errors-3" style="display: none;">
				Sorry, your blog cannot share posts by email.			</div>
		</form>
	</div>
		<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-twitter' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
				return false;
			});
		});
		</script>
				<iframe src='http://widgets.wp.com/likes/master.html?ver=20140528#ver=20140528&amp;mp6=1' scrolling='no' id='likes-master' name='likes-master' style='display:none;'></iframe>
		<div id='likes-other-gravatars'><div class="likes-text"><span>%d</span> bloggers like this:</div><ul class="wpl-avatars sd-like-gravatars"></ul></div>
		<script type="text/javascript">
		//<![CDATA[
			var jetpackLikesWidgetQueue = [];
			var jetpackLikesWidgetBatch = [];
			var jetpackLikesMasterReady = false;

			function JetpackLikespostMessage( message, target ) {
				if ( "string" === typeof message ){
					try{
						message = JSON.parse( message );
					}
					catch(e) {
						return;
					}
				}

				pm( {
					target: target,
					type: 'likesMessage',
					data: message,
					origin: '*'
				} );
			}

			function JetpackLikesBatchHandler() {
				var requests = [];
				jQuery( 'div.jetpack-likes-widget-unloaded' ).each( function( i ) {
					if ( jetpackLikesWidgetBatch.indexOf( this.id ) > -1 )
						return;
					jetpackLikesWidgetBatch.push( this.id );
					var regex = /like-(post|comment)-wrapper-(\d+)-(\d+)-(\w+)/;
					var match = regex.exec( this.id );
					if ( ! match || match.length != 5 )
						return;

					var info = {
						blog_id: match[2],
						width:   this.width
					};

					if ( 'post' == match[1] ) {
						info.post_id = match[3];
					} else if ( 'comment' == match[1] ) {
						info.comment_id = match[3];
					}

					info.obj_id = match[4];

					requests.push( info );
				});

				if ( requests.length > 0 ) {
					JetpackLikespostMessage( { event: 'initialBatch', requests: requests }, window.frames['likes-master'] );
				}
			}

			function JetpackLikesMessageListener( event ) {
				if ( "undefined" == typeof event.event )
					return;

				if ( 'masterReady' == event.event ) {
					jQuery( document ).ready( function() {
						jetpackLikesMasterReady = true;

						var stylesData = {
								event: 'injectStyles'
						};

						if ( jQuery( 'iframe.admin-bar-likes-widget' ).length > 0 ) {
							JetpackLikespostMessage( { event: 'adminBarEnabled' }, window.frames[ 'likes-master' ] );

							stylesData.adminBarStyles = {
								background: jQuery( '#wpadminbar .quicklinks li#wp-admin-bar-wpl-like > a' ).css( 'background' ),
								isRtl: ( 'rtl' == jQuery( '#wpadminbar' ).css( 'direction' ) )
							};
						}

						if ( !window.addEventListener )
							jQuery( '#wp-admin-bar-admin-bar-likes-widget' ).hide();

						stylesData.textStyles = {
							color: jQuery( '.sd-text-color').css( 'color' ),
							fontFamily: jQuery( '.sd-text-color' ).css( 'font-family' ),
							fontSize: jQuery( '.sd-text-color' ).css( 'font-size' ),
							direction: jQuery( '.sd-text-color' ).css( 'direction' ),
							fontWeight: jQuery( '.sd-text-color' ).css( 'font-weight' ),
							fontStyle: jQuery( '.sd-text-color' ).css( 'font-style' ),
							textDecoration: jQuery( '.sd-text-color' ).css('text-decoration')
						};

						stylesData.linkStyles = {
							color: jQuery( '.sd-link-color' ).css('color'),
							fontFamily: jQuery( '.sd-link-color' ).css('font-family'),
							fontSize: jQuery( '.sd-link-color' ).css('font-size'),
							textDecoration: jQuery( '.sd-link-color' ).css('text-decoration'),
							fontWeight: jQuery( '.sd-link-color' ).css( 'font-weight' ),
							fontStyle: jQuery( '.sd-link-color' ).css( 'font-style' )
						};

						JetpackLikespostMessage( stylesData, window.frames[ 'likes-master' ] );

						JetpackLikesBatchHandler();

						jQuery( document ).on( 'inview', 'div.jetpack-likes-widget-unloaded', function() {
							jetpackLikesWidgetQueue.push( this.id );
						});
					});
				}

				if ( 'showLikeWidget' == event.event ) {
					jQuery( '#' + event.id + ' .post-likes-widget-placeholder'  ).fadeOut( 'fast', function() {
						jQuery( '#' + event.id + ' .post-likes-widget' ).fadeIn( 'fast', function() {
							JetpackLikespostMessage( { event: 'likeWidgetDisplayed', blog_id: event.blog_id, post_id: event.post_id, obj_id: event.obj_id }, window.frames['likes-master'] );
						});
					});
				}

				if ( 'clickReblogFlair' == event.event ) {
					wpcom_reblog.toggle_reblog_box_flair( event.obj_id );
				}

				if ( 'showOtherGravatars' == event.event ) {
					var $container = jQuery( '#likes-other-gravatars' );
					var $list = $container.find( 'ul' );

					$container.hide();
					$list.html( '' );

					$container.find( '.likes-text span' ).text( event.total );

					jQuery.each( event.likers, function( i, liker ) {
						$list.append( '<li class="' + liker.css_class + '"><a href="' + liker.profile_URL + '" class="wpl-liker" rel="nofollow" target="_parent"><img src="' + liker.avatar_URL + '" alt="' + liker.name + '" width="30" height="30" style="padding-right: 3px;" /></a></li>');
					} );

					var offset = jQuery( "[name='" + event.parent + "']" ).offset();

					$container.css( 'left', offset.left + event.position.left - 10 + 'px' );
					$container.css( 'top', offset.top + event.position.top - 33 + 'px' );

					var rowLength = Math.floor( event.width / 37 );
					var height = ( Math.ceil( event.likers.length / rowLength ) * 37 ) + 13;
					if ( height > 204 ) {
						height = 204;
					}

					$container.css( 'height', height + 'px' );
					$container.css( 'width', rowLength * 37 - 7 + 'px' );

					$list.css( 'width', rowLength * 37 + 'px' );

					$container.fadeIn( 'slow' );

					var scrollbarWidth = $list[0].offsetWidth - $list[0].clientWidth;
					if ( scrollbarWidth > 0 ) {
						$container.width( $container.width() + scrollbarWidth );
						$list.width( $list.width() + scrollbarWidth );
					}
				}
			}

			pm.bind( 'likesMessage', function(e) { JetpackLikesMessageListener(e); } );

			jQuery( document ).click( function( e ) {
				var $container = jQuery( '#likes-other-gravatars' );

				if ( $container.has( e.target ).length === 0 ) {
					$container.fadeOut( 'slow' );
				}
			});

			function JetpackLikesWidgetQueueHandler() {
				var wrapperID;
				if ( ! jetpackLikesMasterReady ) {
					setTimeout( JetpackLikesWidgetQueueHandler, 500 );
					return;
				}

				if ( jetpackLikesWidgetQueue.length > 0 ) {
					// We may have a widget that needs creating now
					var found = false;
					while( jetpackLikesWidgetQueue.length > 0 ) {
						// Grab the first member of the queue that isn't already loading.
						wrapperID = jetpackLikesWidgetQueue.splice( 0, 1 )[0];
						if ( jQuery( '#' + wrapperID ).hasClass( 'jetpack-likes-widget-unloaded' ) ) {
							found = true;
							break;
						}
					}
					if ( ! found ) {
						setTimeout( JetpackLikesWidgetQueueHandler, 500 );
						return;
					}
				} else if ( jQuery( 'div.jetpack-likes-widget-unloaded' ).length > 0 ) {
					// Grab any unloaded widgets for a batch request
					JetpackLikesBatchHandler();

					// Get the next unloaded widget
					wrapperID = jQuery( 'div.jetpack-likes-widget-unloaded' ).first()[0].id;
					if ( ! wrapperID ) {
						// Everything is currently loaded
						setTimeout( JetpackLikesWidgetQueueHandler, 500 );
						return;
					}
				}

				if ( 'undefined' === typeof wrapperID ) {
					setTimeout( JetpackLikesWidgetQueueHandler, 500 );
					return;
				}

				var $wrapper = jQuery( '#' + wrapperID );
				$wrapper.find( 'iframe' ).remove();

				if ( $wrapper.hasClass( 'slim-likes-widget' ) ) {
					$wrapper.find( '.post-likes-widget-placeholder' ).after( "<iframe class='post-likes-widget jetpack-likes-widget' name='" + $wrapper.data( 'name' ) + "' height='22px' width='68px' frameBorder='0' scrolling='no' src='" + $wrapper.data( 'src' ) + "'></iframe>" );
				} else {
					$wrapper.find( '.post-likes-widget-placeholder' ).after( "<iframe class='post-likes-widget jetpack-likes-widget' name='" + $wrapper.data( 'name' ) + "' height='55px' width='100%' frameBorder='0' src='" + $wrapper.data( 'src' ) + "'></iframe>" );
				}

				$wrapper.removeClass( 'jetpack-likes-widget-unloaded' ).addClass( 'jetpack-likes-widget-loading' );

				$wrapper.find( 'iframe' ).load( function( e ) {
					var $iframe = jQuery( e.target );
					$wrapper.removeClass( 'jetpack-likes-widget-loading' ).addClass( 'jetpack-likes-widget-loaded' );

					JetpackLikespostMessage( { event: 'loadLikeWidget', name: $iframe.attr( 'name' ), width: $iframe.width() }, window.frames[ 'likes-master' ] );

					if ( $wrapper.hasClass( 'slim-likes-widget' ) ) {
						$wrapper.find( 'iframe' ).Jetpack( 'resizeable' );
					}
				});
				setTimeout( JetpackLikesWidgetQueueHandler, 250 );
			}
			JetpackLikesWidgetQueueHandler();
		//]]>
		</script>
<script type='text/javascript'>
/* <![CDATA[ */
var recaptcha_options = {"lang":"en"};
/* ]]> */
</script>
<script type='text/javascript' src='http://s0.wp.com/_static/??-eJx9jEEOwiAQRS8kTJsmRhbGoxhCaR1kBsJA1duLC7au/uK99+GVlUtcPVcIAqs/0Pn81kFO0BGyi2318mMuEXVNFZ/jRxPykEZPTeXYdmQB+0QhX9WiJ7j3E9hSoT9+TlLVFi0WkIctyPvYHt3oOi/GmNlM50v4AgRVQGc='></script>
<script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script>	<script type="text/javascript">
	var skimlinks_pub_id = "725X584219"
	var skimlinks_sitename = "randomascii.wordpress.com";
	</script>
	<script type="text/javascript" src="http://s.skimresources.com/js/725X1342.skimlinks.js"></script><script src="http://s.stats.wordpress.com/w.js?21" type="text/javascript"></script>
<script type="text/javascript">
st_go({'blog':'18565082','v':'wpcom','tz':'-7','user_id':'0','post':'1677','subd':'randomascii'});
ex_go({'crypt':'UE5XaGUuOTlwaD85flAmcm1mcmZsaDhkV11YdWtpP0NsWnVkPS9sL0ViLndld3BNMGlIP3kvLj1XdFlhNHB3aUJiTXBXc0dXfk94S1hOLFJ2OCZhRXBSNVkta1hKWWUleUxodn5lMjBZazZCd0xwY2dsLUIxJk9PTGdXXUJjaD8vVUssbF93VWphWFZRcWIvYVpqVDYsLFVNVFFFLStVTH5OSUxOQ1ksWWRdYU5fLkI2LiVaZllhdWcydllLfERMRWwsZGVBaVVtTjIuWE0mN0loejF2WD01OHNaSi9tcWpWejFGfHQsR2dIZjEyR1RyW3d8W1N6eF9HVlslbXJZP0lmNzhSVmFDa01VYW55MnNYLGU4ZXgyLVU4dlovaT9Na3FUd3V3V1krMlZPRW1PT2FCJTY='});
addLoadEvent(function(){linktracker_init('18565082',1677);});
	</script>
<noscript><img src="http://stats.wordpress.com/b.gif?v=noscript" style="height:0px;width:0px;overflow:hidden" alt="" /></noscript>
<script>
if ( 'object' === typeof wpcom_mobile_user_agent_info ) {

	wpcom_mobile_user_agent_info.init();
	var mobileStatsQueryString = "";
	
	if( false !== wpcom_mobile_user_agent_info.matchedPlatformName )
		mobileStatsQueryString += "&x_" + 'mobile_platforms' + '=' + wpcom_mobile_user_agent_info.matchedPlatformName;
	
	if( false !== wpcom_mobile_user_agent_info.matchedUserAgentName )
		mobileStatsQueryString += "&x_" + 'mobile_devices' + '=' + wpcom_mobile_user_agent_info.matchedUserAgentName;
	
	if( wpcom_mobile_user_agent_info.isIPad() )
		mobileStatsQueryString += "&x_" + 'ipad_views' + '=' + 'views';

	if( "" != mobileStatsQueryString ) {
		new Image().src = document.location.protocol + '//stats.wordpress.com/g.gif?v=wpcom-no-pv' + mobileStatsQueryString + '&baba=' + Math.random();
	}
	
}
</script></body>
</html>