<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US" xml:lang="en-US">
<head profile="http://gmpg.org/xfn/11"><link rel="stylesheet" type="text/css" href="http://d26g26mszp4v2i.cloudfront.net/wp-content/cache/minify/000000/JYxRCsQwCAUvVHF7JJu1sEWMVUOa26_QrwczzNtxdv-acwRYtyHktZGBkUsYp9n2wYOEtPHLth2TDmHoJ7SuyZrVyqikObOWv-7BviCWJj31Aefv4fgD.css.gzip" media="all"/>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<title>An Epic Review of PyCharm 3 from a Vim User&#8217;s Perspective</title>
<meta name="robots" content="noodp,noydir"/>
<link rel="Shortcut Icon" href="http://d26g26mszp4v2i.cloudfront.net/wp-content/themes/balance/images/favicon.ico.gzip" type="image/x-icon"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/><link rel="alternate" type="application/rss+xml" title="Andrew Brookins &raquo; Feed" href="http://andrewbrookins.com/feed/"/>
<link rel="alternate" type="application/rss+xml" title="Andrew Brookins &raquo; Comments Feed" href="http://andrewbrookins.com/comments/feed/"/>

            <script type="text/javascript">//<![CDATA[
var _gaq=_gaq||[];_gaq.push(['_setAccount','UA-11725342-1']);_gaq.push(['_trackPageview']);(function(){var ga=document.createElement('script');ga.type='text/javascript';ga.async=true;ga.src=('https:'==document.location.protocol?'https://ssl':'http://www')+'.google-analytics.com/ga.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(ga,s);})();
//]]></script>
			<link rel="alternate" type="application/rss+xml" title="Andrew Brookins &raquo; An Epic Review of PyCharm 3 from a Vim User&#8217;s Perspective Comments Feed" href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/feed/"/>
<link rel="canonical" href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/"/>



<script type="text/javascript" src="http://d26g26mszp4v2i.cloudfront.net/wp-content/cache/minify/000000/M9bPKixNLarUMYYydHMz04sSS1L1cjPzdAxhgsWVeSWJFVh5ehAeSD0A.js.gzip"></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://andrewbrookins.com/xmlrpc.php?rsd"/>
	
	<script type="text/javascript">jQuery.noConflict();jQuery(document).ready(function($){$.syntax({root:'http://andrewbrookins.com/wp-content/plugins/jquery-syntax/jquery-syntax/'})});</script>

<!-- BEGIN: Open Graph Protocol Tools: http://opengraphprotocol.org/ for more info -->
<meta property="http://ogp.me/ns#image" content="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/navigation_bar_floating-300x179.png"/>
<meta property="http://ogp.me/ns#image:width" content="300"/>
<meta property="http://ogp.me/ns#image:height" content="179"/>
<meta property="http://ogp.me/ns#locale" content="en_US"/>
<meta property="http://ogp.me/ns#site_name" content="Andrew Brookins"/>
<meta property="http://ogp.me/ns#title" content="An Epic Review of PyCharm 3 from a Vim User&#8217;s Perspective"/>
<meta property="http://ogp.me/ns#type" content="article"/>
<meta property="http://ogp.me/ns#url" content="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/"/>
<meta property="http://ogp.me/ns/article#author" content="http://andrewbrookins.com/author/admin/"/>
<meta property="http://ogp.me/ns/article#modified_time" content="2014-02-03T09:41:18+00:00"/>
<meta property="http://ogp.me/ns/article#published_time" content="2014-02-01T15:17:36+00:00"/>
<meta property="http://ogp.me/ns/fb#admins" content="618035425"/>
<meta name="twitter:card" content="photo"/>
<!-- End: Open Graph Protocol Tools-->
<link rel="pingback" href="http://andrewbrookins.com/xmlrpc.php"/>
</head>
<body class="single single-post postid-974 single-format-standard content-sidebar balance-blue">
<div id="wrap">
<div id="header"><div class="wrap"><div id="title-area"><p id="title"><a href="http://andrewbrookins.com/" title="Andrew Brookins">Andrew Brookins</a></p><p id="description">software engineering, the nature of good and evil, etc.</p></div><!-- end #title-area --><div class="widget-area"><div id="nav_menu-4" class="widget widget_nav_menu"><div class="widget-wrap"><div class="menu-top-container"><ul id="menu-top" class="menu genesis-nav-menu"><li id="menu-item-611" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-611"><a href="/">Home</a></li>
<li id="menu-item-953" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-953"><a href="http://andrewbrookins.com/about-me/">About</a></li>
<li id="menu-item-1075" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1075"><a href="http://andrewbrookins.com/index/">Index</a></li>
</ul></div></div></div>
</div><!-- end .widget-area --></div><!-- end .wrap --></div><!--end #header--><div class="breadcrumb"><div class="wrap"><span class="home">You are here:</span><a href="http://andrewbrookins.com/" title="View Home">Home</a> <a href="http://andrewbrookins.com/category/python/" title="View all items in Python">Python</a> An Epic Review of PyCharm 3 from a Vim User&#8217;s Perspective</div></div><div id="inner"><div class="wrap">	<div id="content-sidebar-wrap">
				<div id="content" class="hfeed">
				<div class="post-974 post type-post status-publish format-standard has-post-thumbnail hentry category-python category-tech entry">

		<div class="post-info"><span class="author vcard"><span class="fn"><a href="http://andrewbrookins.com/author/admin/" class="fn n" title="Andrew" rel="author">Andrew</a></span></span> <span class="date published time" title="2014-02-01T15:17:36+00:00">February 1, 2014</span> </div>		<h1 class="entry-title">An Epic Review of PyCharm 3 from a Vim User&#8217;s Perspective</h1> 
		
				<div class="entry-content">
			<p>This review is for the Professional Edition of PyCharm 3. It includes screenshots and sound-free video demos of PyCharm features. I will try to cut straight to the point while offering some tips from my experience.</p>
<p>My perspective is that of a professional software developer who has used Vim, Emacs, Sublime Text, PyDev and others. For the past year and a half I&#39;ve used PyCharm for all my Python, JavaScript and CoffeeScript.</p>
<h1><span id="Code_Completion">Code Completion</span></h1>
<p> <iframe width="640" height="390" src="//www.youtube.com/embed/RNmTUF4fsKQ" frameborder="0" allowfullscreen></iframe> </p>
<p>Code completion was great in PyCharm 2.7 and it has only gotten better. There are now two types of completion in the editor: structural, which understands Python and JavaScript objects, and word expansion, which is more like Vim&#39;s omnicomplete.</p>
<p><span id="more-974"></span></p>
<p>With structural completion, PyCharm displays a modal dialog containing fields of an object&#39;s class first, followed by fields and methods of its superclasses and mixins. Once you trigger this completion dialog, you can type to filter the selection.</p>
<p>Word expansion is a new feature in PyCharm 3 that lets you complete symbols anywhere in the file, including comments and docstrings. Rather than being aware of a structure or object, the completion works through simple text matching. It&#39;s great for writing documentation.</p>
<p>I’ve always found Python completion features in other editors, usually built on the Rope library, slow or unreliable or both. PyCharm’s completion is intelligent and reliable, and works with JavaScript too. You really feel that you&#39;re using a well-engineered tool built for the future of programming — editing the meaning of code, not just text. And you can always fall back to simple word expansion when you need to.</p>
<h1><span id="Code_Navigation">Code Navigation</span></h1>
<p> <iframe width="640" height="390" src="//www.youtube.com/embed/HiFyoiIRwuk" frameborder="0" allowfullscreen></iframe> </p>
<p>What I mean by Code Navigation is the use of keyboard shortcuts that jump you to the definition of a symbol. PyCharm has a couple of these features &#8212; pretty much everything you&#39;d hope from a Python IDE.</p>
<p>The first is Goto Symbol, which opens a popup similar to the one provided for completion of fields on an object, except that it includes symbols across the entire project. I use this when I know where I want to go by name.</p>
<p>More often I use the Goto Declaration feature. This is available by moving your cursor over a symbol and firing a keyboard shortcut (I think it&#39;s also available as a mouse action.)</p>
<p>I use these features <em>all day, every day</em> to review APIs and docstrings of library code I’m using. It’s indispensable and works consistently.</p>
<p>This is the feature I’ve had the most trouble getting other editors to do well. Vim and Sublime Text with the rope library and some integration tweaks — or PyDev in Eclipse — can sometimes give you decent navigation. However, I’ve used all of these extensively and they all failed every day. Furthermore, it was not always clear why they failed. The end result? Sadness, anger and a sense of Primitive Humanity falling to darkness.</p>
<p>With PyCharm, I don&#39;t even notice this feature anymore. I just expect to get wherever I want to go, and I do.</p>
<h1><span id="Vim_Emulation_with_IdeaVim">Vim Emulation with IdeaVim</span></h1>
<p>I&#39;ve discarded a lot of editors that claimed to have Vim emulation either built-in or through a plugin. PyCharm&#39;s is the best.</p>
<p>The ex command line is decent, block cursor and line highlighting look great, modal editing is responsive and IdeaVim supports all of the motion commands I use on a regular basis. There is a good list of <a href="https://github.com/JetBrains/ideavim/blob/master/index.txt" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);">all the Vim features the plugin supports</a>.</p>
<p>However, all is not chocolate and roses. Custom bindings work more like they do in Emacs and Sublime Text than in Vim because there is no concept mode-specific bindings or a leader key. You end up combining Control, Command, Option (or Alt, Win, etc. on PCs) with various keys to produce unique sequences.</p>
<p>So, that&#39;s a drag, but I was once a hardcore Vim user and here I am, almost two years of PyCharm later.</p>
<p>See the Keyboard Shortcuts section for a more in-depth review of the keybinding system.</p>
<p>In my experience, JetBrains is committed to Vim emulation. The company releases regular updates to IdeaVim, and the plugin has become much more feature-rich and reliable over time.</p>
<h1><span id="Running_Tests">Running Tests</span></h1>
<p> <iframe width="640" height="390" src="//www.youtube.com/embed/iFLuRwXqd7I" frameborder="0" allowfullscreen></iframe> </p>
<p>PyCharm’s test runner helps me achieve an uninterrupted flow state while writing tests. It supports all of the testing libraries I&#39;ve thrown at it, including the Django test runner, nose, Unittest and py.test.</p>
<p>For what seems like a simple feature, it has a huge impact. I’ll try to explain by talking about my experiences with other editors.</p>
<p>You can get a nice system going with Vim or ST 2, but ultimately your workflow is something like “write tests, switch focus to command-line interface, execute the last command or type a new command to run a specific test or suite, examine output, switch focus back to editor.”</p>
<p>After using PyCharm, I find this workflow primitive and distracting.</p>
<p>In PyCharm, if I want to run a test I’m working on, I hit a keyboard shortcut that detects the test method or class my cursor is within and offers to run or debug it. In the dialog box that opens when I hit this keyboard shortcut I have several options for how to run the test, based on the test runners PyCharm finds for the configured interpreter (nose, Unittest, py.test, etc.). I can type the number of an option to run it.</p>
<p>Test output appears in a panel at the bottom of the window. If the test raises an exception, PyCharm converts each line of the stack trace into a hyperlink that opens the file in question at that line when I click on it.</p>
<p>Seems simple, right? After using these features for a year, I can’t live without them. Here’s why:</p>
<ul>
<li>After the tests run, I can hit a keyboard shortcut to jump between the tests I ran (useful if some failed)</li>
<li>When I&#39;m writing code, I can hit a keyboard shortcut that reruns the last test immediately (no context switch required)</li>
<li>I want to give JetBrains $100 just for turning lines of a stack trace into hyperlinks</li>
</ul>
<h1><span id="Debugging">Debugging</span></h1>
<p> <iframe width="640" height="390" src="//www.youtube.com/embed/WZN6O_JfMeM" frameborder="0" allowfullscreen></iframe> </p>
<p>At first I wasn’t super impressed with using PyCharm’s graphical debugger, compared to my experience with <code>ipdb</code>. It’s grown on me over time, though, and now when I try to use <code>ipdb</code> I feel that old sadness for Primitive Humanity.</p>
<p>PyCharm lets you set a breakpoint with the mouse or a keyboard shortcut. When you run project code with the debugger, either using a test or a Run action like the Django development server, a special toolbar window slides into view with the debugging context when execution hits your breakpoint.</p>
<p>You can then interact with each frame on the stack by clicking on a list of frames in the debugging panel. A &quot;Variables&quot; tree lets you view the state of each variable in the scope of the current frame. You can also run arbitrary code within the scope of the frame by using the “Evaluate Expression” command (available via keyboard shortcut), or run an interactive console session similar to <code>ipdb</code>.</p>
<p>The Evaluate Expression command opens a modal dialog box. The “result” portion of the dialog shows the return result of the expression after you click “Evaluate.”</p>
<p>You see the exception class of any exception raised by the expression, but not a stack trace. “Code Fragment Mode” lets you write more than one line for your expression. The interactive console is useful because you can see standard output (you can&#39;t in Evaluate Expression). However, while there is a keyboard shortcut to launch Evaluate Expression, I haven’t found one for the interactive console, which seems to require two mouse clicks (ugh!).</p>
<p>In summary, I like the PyCharm debugger better than ipdb because it helps me to avoid switching contexts. With Evaluate Expression, I can remain in a flow state while I debug failing tests, using only keyboard shortcuts. This beats switching to a terminal window and interacting with ipdb. </p>
<h1><span id="Code_Generation">Code Generation</span></h1>
<p> <iframe width="640" height="390" src="//www.youtube.com/embed/7CUNoGueMuU" frameborder="0" allowfullscreen></iframe> </p>
<p>PyCharm has a feature called Intention Actions that provide automated solutions to problems the editor detects in your code. These include using a symbol that isn’t found in the current scope, improper return values and small refactors that can make your code better, among other things.</p>
<p>According to the docs, there are three types of Intention Actions: “Create from usage” (missing symbols), “Quick fixes” (problems your in your code) and “Micro-refactorings” (e.g. convert lambda into function def).</p>
<p>When an intention action is available, you will see an indicator in either the status bar on the bottom of the window, the text itself (if it’s a syntax error or unresolved symbol) or both. Then you can use a keyboard shortcut to trigger a menu of actions available.</p>
<p>While you can use intention actions to create class, class method and function stubs, I don’t often do this. I do regularly use them to fix errors and add import statements.</p>
<p>The result is that I feel like I&#39;m pair programming with an observant coworker who has memorized Python syntax, a small dictionary and PEP8.</p>
<h1><span id="Error_Detection_and_Resolution">Error Detection and Resolution</span></h1>
<p>PyCharm detects several types of errors in your code and will offer to fix them for you through the Intention Action feature. These include the types of errors that you probably already use <code>pylint</code> to check for in your editor of choice: syntax errors and PEP8 violations. It also detects spelling mistakes with what appears to be a very limited dictionary.</p>
<p>Beyond these simple scans, the editor understands Python in the sense that it can detect common design mistakes, like not closing a resource, and offer automated solutions. It can also detect alternative style choices, like single-versus-double quotations, and offer to change between them.</p>
<p>Erroneous statements are underlined with a red squiggly line by default, but this is configurable. One of the options in the Intention Action menu for an error is to silence it. You can also configure whether PyCharm should check for spelling errors in code, or in comments only (or never).</p>
<p>This is a great feature that I didn&#39;t record a video to show because it looks exactly the same as Intention Actions in “Code Generation.” As with that feature, it feels like working with a pedantic-yet-helpful pair programmer.</p>
<h1><span id="Refactoring">Refactoring</span></h1>
<p>If you haven’t used refactoring tools before, this is a feature that automates the rather laborious process of doing things like renaming a method or variable that may have dozens or hundreds of usages across a project.</p>
<p>Doable with ack (or grep) and Vim. But would I want to go back to that life? No. Here’s why. Let’s say I want to rename a method with a name like “add” that’s guaranteed to give me false positives from a text-based search like grep. In PyCharm I trigger the refactor menu with a keyboard shortcut:</p>
<figure><img src="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/refactor_this_menu.png"/></figure>
<p>Alright, great. I have tons of refactoring options. I’m only going to show renaming because that is what I do the most. So, I hit the Enter key on “Rename…” and I’m asked for the new name:</p>
<figure><img src="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/rename_method_dialog.png"/></figure>
<p>What’s that “Preview” button? Oh, it’s just a sweet tree containing all the occurrences of the symbol.</p>
<figure><img src="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/refactor_preview_pane.png"/></figure>
<p>From the preview, I can right-click on any branch of the tree and exclude all sub-items from the operation. There’s a button at the bottom (not in the screenshot) that lets me cancel or do the refactor.</p>
<p>If I want to undo the refactor, all of the changes are rolled up into a single undo, and I get a special dialog box (“Undo renaming method to add_please?”).</p>
<p>This feels like the future of programming. Seriously. I believe that the industry will continue to build development environments that have a deep understanding of how languages, frameworks and platforms work. PyCharm’s refactoring tools feel like just the tip of this iceberg, and yet they still blow away the alternatives. And you can refactor JavaScript, too.</p>
<h1><span id="Pip_and_Virtualenv_Integration">Pip and Virtualenv Integration</span></h1>
<p> <iframe width="640" height="390" src="//www.youtube.com/embed/SeyoRF1hu54" frameborder="0" allowfullscreen></iframe> </p>
<p>Virtualenv and Pip support are woven into PyCharm, and both work pretty well. When you first open a directory of Python code, the editor warns you that the project lacks a Python interpreter. At that point you can choose to use the system Python or a virtualenv Python.</p>
<p>If there is a <code>requirements.txt</code> file in the project, PyCharm will check to see if the interpreter contains all of the referenced libraries, and if it doesn&#39;t, a warning will flash on screen that offers to download the missing packages for you.</p>
<p>When a project uses a non-standard requirements file name (or multiple requirements files), you can set the name of the requirements file in the Python Integrated Tools section of the settings window.</p>
<p>I&#39;ve heard that PyCharm can detect which virtualenv to use for a project. This probably relies on you having created the virtualenv inside of the project directory structure, which I don&#39;t do. I have my virtualenvs in <code>~/envs</code> and my source in <code>~/src</code>, so I manually configure a Python interpreter for new projects. It&#39;s still pretty convenient.</p>
<p>Because PyCharm knows about Python interpreters, when you create Run actions (or run an automatically created one, e.g. for a test) you can choose which interpreter the action should use. The default is the currently configured project interpreter.</p>
<p>Awareness of virtualenvs is a nice background-level feature that underpins all of the rest of PyCharm&#39;s code intelligence features, which are of course amazing.</p>
<h1><span id="Keyboard_Shortcuts">Keyboard Shortcuts</span></h1>
<p> <iframe width="640" height="390" src="//www.youtube.com/embed/jIpKo01ATok" frameborder="0" allowfullscreen></iframe> </p>
<p>Almost every command in PyCharm has a keyboard shortcut, even some of the commands that might seem available only from the top-screen menus. Many of these are not configured out-of-the-box, so you must stumble upon them like lost treasure.</p>
<p>If you&#39;re just exploring for new PyCharm commands, an easier way to find them is to use the Find Action command (Shift+Command+A on OS X). This opens up a searchable menu of commands alongside of which is the currently-mapped keyboard shortcut. This is probably one of the most important features for new users to PyCharm. I encourage you to spend some quality time with it!</p>
<p>You configure keyboard shortcuts in the Keymap section of the settings window. The Keymap section has a textbox that you use to filter all the available commands. The filter helps if you have a vague idea of what you want to do, like &quot;window&quot; or &quot;project,&quot; but in my experience you often need to do some internet research to find new commands. Changes you&#39;ve made from a default keymap are highlighted in blue when you return to the Keymap section.</p>
<p>Once you find a command you want to map or remap, you double-click on it to bring up a context menu. The menu lets you remove a keybinding or add a new one. You can add multiple shortcuts to a single action (not sure why) and multiple commands can have the same shortcut (very useful because not all commands are available all the time). If your chosen shortcut is already in use, the editor will warn you and give a list of all the commands that overlap.</p>
<h1><span id="Tab_Split_and_Window_Management">Tab, Split and Window Management</span></h1>
<p> <iframe width="640" height="390" src="//www.youtube.com/embed/HXBhHwEgtYY" frameborder="0" allowfullscreen></iframe> </p>
<p>When it comes to splitting the editor into multiple panes, there’s good news and there’s bad news.</p>
<p>The good news is that PyCharm supports arbitrary window splits in a way that&#39;s more intuitive than Sublime Text and somewhat less than Vim. Typically you’ll have each project open in a separate window, but you can also yank a tab into its own window or detach one of the many different tool panels into a separate window.</p>
<p>PyCharm represents an open file with a tab. I don&#39;t use tabs with Vim, so at first it seemed like JetBrains had dumped something foul in my cereal. Tabs have grown on me since then, in large part because the tools the editor includes for jumping between open and recent files mean I don&#39;t pay much attention to tabs except when I really need to.</p>
<p>You can configure the editor to either keep adding new rows of tabs as your number of open files fills the current window, or to hide tabs that don&#39;t fit. If you let it hide tabs, a small button appears in the upper-right corner of a window when some tabs are hidden. You can click on the button to see a list of hidden tabs. When you use a hidden file, its tab comes out of hiding and an older tabs is hidden in its place.</p>
<p>If you desire ruthless efficiency, you can set a “tab limit” that defaults to ten. If you open more than that number of tabs, PyCharm start closing old ones. You have a couple of options for the tab-closing strategy.</p>
<p>The bad news is that window splits are not quite the smooth-as-butter experience that you get with Vim. The biggest problem I have is with how PyCharm handles opening a file by name (through the Navigate to File command) from a split when the file is already &quot;open&quot; in another split.</p>
<p>If you do this, your cursor will jump to whatever split the file is already open in. Vim would open the file in the current split, which is the behavior I’ve come to expect. I get why they did it, but I&#39;d prefer this to be a configuration option.</p>
<p>As for windows, PyCharm is a modern OS X application, unlike Vim and even MacVim, so you can have files from multiple projects open in multiple windows galore and it properly tracks the project context for each window.</p>
<h1><span id="Jumping_to_Open_and_Recent_Files">Jumping to Open and Recent Files</span></h1>
<p> <iframe width="640" height="390" src="//www.youtube.com/embed/-b-_9KJTNCA" frameborder="0" allowfullscreen></iframe> </p>
<p>In Vim and Emacs I used plugins like bufexplorer and ibuffer (respectively) to get an overview of open files and to quickly switch back and forth between them.</p>
<p>PyCharm has a couple of features like this. First is the list of recent files, which you can trigger with a keyboard shortcut. This list is searchable and defaults to the last file you had open. If you start typing, it filters down the list of items.</p>
<p>This is great because I don’t even keep track mentally of files I may have opened 16 files ago — I get a helpful list that jogs my memory (&quot;What was that one module I was looking at with the broken thing&#8230;?&quot;).</p>
<p>You can also hone this down further with the Recently Edited Files command. This is just the subset of files you&#39;ve edited in the past N minutes (I don&#39;t know how long).</p>
<p>Finally there&#39;s the Switcher command. This is similar to the Recent Files list except it operates on your open tabs. By default the keyboard shortcut on OS X is Control+Tab.</p>
<p>I don’t even notice these features anymore because they’re muscle memory. Most of the time I’m using them to jump back and forth between a few open files I’m working on — or more often, the immediate last file. </p>
<h1><span id="Jumping_to_Files_on_Disk">Jumping to Files on Disk</span></h1>
<p>Get ready because these features pack heat. Well, at least one of them does (the navigation bar — keep reading).</p>
<p>PyCharm lets you jump to any file in the current project using a fuzzy search against the file name and path, like Sublime Text, Eclipse, Xcode and Vim with certain plugins. It works very well. The UI is similar to “Goto Symbol,” a list of partial matches that filters down as you modify your search text. I use this all day, when I’m not using the Recent Files menu to open files. One really nice thing about it is that with a small tap of a key in the result window you can see &quot;non-project&quot; items too &#8212; these are search results across the entire Python environment, including all of the project libraries. Very useful.</p>
<p>In PyCharm 3.1 there is also a new Search Anywhere command that combines searching for project symbols and filenames. I haven&#39;t fully transitioned to using this instead of the separate navigation commands, but it seems useful.</p>
<p>If you like to see a tree of files, though, PyCharm has a comprehensive one that<br/>works better than Sublime Text&#39;s and NERDTree in Vim. You can easily show and hide the tree with a keyboard shortcut. When the tree is focused, typing filters the visible files. The UX on the filter is nicely done &#8212; matching item are highlighted, and only these are available when you use the up and down arrows. This is probably easier to understand in the video demo.</p>
<p>Other than that, it probably looks like any old file tree, but its context menu is powerful! I don&#39;t know the keyboard shortcut to open the context menu, but you can see it by right clicking on a file (as usual).</p>
<figure><img src="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/file_tree_context.png"/></figure>
<p>Honestly though, I don&#39;t use the tree often because there is something way better called the navigation bar. I’m not sure how to describe it other than that it’s like a keyboard-navigable breadcrumb file tree. I’ll have to show you. Here is what it looks like in its default position (I usually have it hidden by default):</p>
<figure><img src="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/navigation_bar_default.png"/></figure>
<p>“Ugh, so crowded!” you probably thought. Yeah, I know, that’s why I have it turned off. But check this out — you can still activate a special floating version of the navigation bar with a keyboard shortcut. I have this command mapped to Command+Up-Arrow and use it all the time. Watch a video that shows how smooth it is. </p>
<p> <iframe width="640" height="390" src="//www.youtube.com/embed/j7_v55sYUuI" frameborder="0" allowfullscreen></iframe> </p>
<p>As you can see in the video, the Navigation Bar allows you to open a Refactor command on files in the directory tree, which includes the ability to rename, copy and delete them easily without losing your focus. I&#39;m going to be at PyCon Montreal this year, where I&#39;ll buy a beer for whoever made this.</p>
<h1><span id="Reformatting_Code">Reformatting Code</span></h1>
<p>A seemingly insignificant feature — automated reformatting of selected code to configurable spacing and indentation rules — turns out to be another one I use all day. Here’s an example of me correcting spaces and indentation on a block of Cornice code — first I select the problematic lines:</p>
<figure><img src="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/example_of_badly_formatted_code.png"/></figure>
<p>Then I use my Reformat Code keyboard shortcut to fix the indentation:</p>
<figure><img src="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/reformatted_code.png"/></figure>
<p>Each language has its own configuration section for this feature. Here’s a screenshot of Python’s:</p>
<figure><img src="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/code_style_preference_pane.png"/></figure>
<p>Most of the time, this feels like an unconscious extension of my will. It also helps me to ensure that my code is following a project&#39;s style guide.</p>
<p>Props aside, Reformat Code doesn’t always understand how I want the reformat to happen because there are ambiguities — for instance, it won’t add a line break for each parameter in a method call to make it a bit more readable when that seems like the best thing to do.</p>
<p>Then there are just plain old errors, like the fact that it won’t reformat docstrings or comments to my configured column width (I had to write my own plugin to do that). Or that it occasionally it moves lines to the wrong indent level.</p>
<p>Still, I’ll often sweep whole function definitions with with Reformat Code as I’m writing, to clean up after myself, and then fix the one or two things PyCharm didn’t do quite to my liking.</p>
<p>I use this feature more with JavaScript than Python, and it works very well in those files, too.</p>
<h1><span id="The_Terminal">The Terminal</span></h1>
<p><iframe width="640" height="390" src="//www.youtube.com/embed/xlaPXSgJAJo" frameborder="0" allowfullscreen></iframe></p>
<p>PyCharm 3 offers a built-in terminal emulator. It&#39;s a decent terminal that I can keyboard-shortcut into to run a Django management command or see a Git diff. However, there are other tools in the editor to do both of those things that are a little nicer &#8212; a Git diff viewer that surpasses the command-line output from Git, and the Run Action system that allows you to create reusable actions for running Django management commands.</p>
<p>That said, despite nice Git and GitHub tools, I still use the command line for most of my Git work. However, I use iTerm for this because PyCharm&#39;s terminal doesn&#39;t seem to work well with tmux, and I can&#39;t live without tmux. I think this is a natural problem of hosting a terminal emulator within a text editor powered by keyboard shortcuts &#8212; PyCharm appears to swallow my tmux command prefix (Control+A). However, if you don&#39;t use tmux (and maybe if you don&#39;t use screen either), or don&#39;t need to use them from within PyCharm, it&#39;s a decent terminal.</p>
<h1><span id="Color_Schemes">Color Schemes</span></h1>
<p>Coming from Vim and Emacs, I’m somewhat dissatisfied with color scheme support in PyCharm. There aren’t many color schemes bundled with the editor, and the selection among community-created color schemes is thin in comparison with Vim’s.</p>
<p>I’ve also had trouble with a color scheme either lacking the option to change the color of some syntax, or using a color for a piece of syntax without giving me the option to change it (I lack a good example of that, but I remember it happened with CoffeeScript).</p>
<p>Still, there are upsides. There’s a nice graphical configuration panel that lets you override colors for different languages, and support for importing custom color schemes.</p>
<p>Plus, if you use Solarized, the One True Color Scheme, then you’re in luck because there are a couple of decent ports of the color scheme to Intellij-based editors (though I had to fiddle with the default colors in Python, JavaScript and CoffeeScript to avoid vomiting).</p>
<p>Here’s a screenshot of me editing colors for the Solarized Dark scheme and Python:</p>
<figure><img src="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/color_override_example.png"/></figure>
<p>There is also a new feature called “Look and Feel” that affects your experience with the editor. The Look and Feel choice is a theme for the PyCharm UI chrome, like the tabs, gutter and status bar, which by default are all a metallic gray color.</p>
<p>In my screenshots I’m using the “Darcula” Look and Feel setting, but here’s a screenshot of me using Solarized Light and the default UI Look and Feel:</p>
<figure><img src="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/default_look_and_feel-1024x573.png"/></figure>
<p>All in all, color scheme support is decent. I&#39;m not entirely satisfied because there are too few color schemes packages with the editor and too few available from the community. There is also not an easy way to discover new, non-bundled color schemes from within PyCharm, which would be nice.</p>
<h1><span id="Editing_Backing_Up_and_Restoring_Configuration">Editing, Backing Up and Restoring Configuration</span></h1>
<p>Project and IDE settings are configured using a graphical interface that is searchable. I’m not sure I prefer it over a text file, but then again, I don’t get syntax errors changing configuration anymore.</p>
<p>I&#39;ve shown the settings window in video demos elsewhere in this review, but in case you missed it, here is a screenshot:</p>
<figure><img src="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/searching_preferences.png"/></figure>
<p>What I do miss is having a single source of configuration “truth” for my editor — like a <code>.vimrc</code> file — that I can place in version control and share among computers. With PyCharm, you can export and import your settings, but the resulting file isn’t exactly human-readable. Oh well.</p>
<h1><span id="Snippets">Snippets</span></h1>
<p>PyCharm comes with a yasnippet-like feature called Live Templates. You can find plugins for this type of feature in every editor, and it’s a must-have for languages like Java and JavaScript that require tons of boilerplate.</p>
<p>Anyway, it’s a decent feature and I’ve used it to create lots of little snippets. Here’s a screenshot of the configuration panel for Live Templates, expanded to show the default JavaScript templates:</p>
<figure><img src="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/javascript_live_templates-1024x623.png"/></figure>
<p>If snippets are your thing, then you can find lots of videos of people using PyCharm templates to nice effect. I don&#39;t use them very much.</p>
<h1><span id="Running_Arbitrary_Code">Running Arbitrary Code</span></h1>
<p>Ok, hold onto your pants — there is no built-in support for creating scratch files.</p>
<p>You read that right. I know, I know, that has to be a terrible lie, right? Well, it’s the truth. To write code in PyCharm you must create a named file that becomes associated with the project. BUT WAIT, THERE’S A PLUGIN.</p>
<p>Fortunately for my sanity, the <a href="http://plugins.jetbrains.com/plugin/?idea&amp;pluginId=4428" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://plugins.jetbrains.com']);">Scratch plugin</a> adds some nice keyboard shortcuts (and menus) for creating arbitrary files of any type the editor supports, which result in you getting completion and all the other fancy features, as long as you’re referencing symbols that exist in the current project.</p>
<h1><span id="Opening_PyCharm_from_the_Command_Line">Opening PyCharm from the Command Line</span></h1>
<p>The editor will create a charm binary that you can use to open files in PyCharm from the command line. It works pretty much the same way as using <code>vim &lt;filename&gt;</code>. The only downside is that files open in your current project. That’s not always what you want, and I’m not sure if there’s a way to tell charm to launch them in a new project or in a specific project.</p>
<h1><span id="Using_Plugins">Using Plugins</span></h1>
<p>Compared to Vim, there aren’t many available plugins. This hasn’t been a problem for me because 90% of the features I used plugins for in Vim are either built into the editor or available as a plugin. There may not be a plugin to post to Orkut for you, though. You’ll have to get down in the mud and cut some Java for that one.</p>
<p>The plugins that are available are all discoverable through a configuration panel from within the editor, which is great. They’re searchable and include details about the current plugin version and author.</p>
<p>Here’s the configuration panel that shows your currently installed plugins:</p>
<figure><img src="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/installed_plugins-1024x532.png"/></figure>
<p>And here’s the panel that opens when you want to search for plugins in the plugin repository:</p>
<figure><img src="http://d26g26mszp4v2i.cloudfront.net/wp-content/uploads/2013/06/plugins_from_repository-1024x595.png"/></figure>
<p>If you use Sublime Text or Emacs, you already have a tool like this, so it will be familiar and perhaps a little troubling, since occasionally you might have to click a mouse button.</p>
<p>Coming from Vim, this was a great feature. I’ve used several plugin management plugins for Vim and they were decent, but usually lacked a good discovery mechanism.</p>
<h1><span id="Creating_Plugins">Creating Plugins</span></h1>
<p>Unlike Sublime Text or Vim, you have to use an entirely separate editor to edit plugins — Intellij IDEA Community Edition. The good news is that it’s free.</p>
<p>The bad news? You have to write plugins in Java.</p>
<p>I’m going to save additional details about writing plugins for a potential future blog post, after I write a couple more Intellij plugins to get experience. However, in summary I’ll say that I didn’t mind writing Java but I had a hell of a time finding comprehensive documentation on the plugin APIs.</p>
<!--<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
		<rdf:Description rdf:about="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/"
    dc:identifier="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/"
    dc:title="An Epic Review of PyCharm 3 from a Vim User&#8217;s Perspective"
    trackback:ping="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/trackback/" />
</rdf:RDF>-->
		</div><!-- end .entry-content -->
		<div class="post-meta"><span class="categories">Filed Under: <a href="http://andrewbrookins.com/category/python/" title="View all posts in Python" rel="category tag">Python</a>, <a href="http://andrewbrookins.com/category/tech/" title="View all posts in Technology" rel="category tag">Technology</a></span>    </div>
	</div><!-- end .postclass -->
			<div id="comments">
			<h3>Comments</h3>			<ol class="comment-list">
				
	<li class="comment even thread-even depth-1" id="comment-2328">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/03671a05389885dc096868846a08c5f8?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn"><a href="http://www.obeythetestinggoat.com" onclick="javascript:_gaq.push(['_trackEvent','outbound-commentauthor','http://www.obeythetestinggoat.com']);" rel='external nofollow' class='url'>Harry P</a></cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2328">June 7, 2013 at 9:05 am</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>Thanks for a great write up man! Committed vim user here, almost convinced I should give PyCharm another go&#8230;  Or certainly to look for new ways of working with vi.</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		<ul class="children">

	<li class="comment byuser comment-author-admin bypostauthor odd alt depth-2" id="comment-2330">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/c7ebe753fecbe3a066839f8377c19b06?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn">Andrew</cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2330">June 7, 2013 at 10:49 am</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>Thanks! And congrats on your book &#8212; it&#8217;s looking good.</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

	<li class="comment even thread-odd thread-alt depth-1" id="comment-2329">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/0b5753548758c3e9924d08d934712f9c?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn"><a href="http://RECURSIVEDREAM.COM" onclick="javascript:_gaq.push(['_trackEvent','outbound-commentauthor','http://RECURSIVEDREAM.COM']);" rel='external nofollow' class='url'>Tom D</a></cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2329">June 7, 2013 at 10:46 am</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>Very interesting write-up. As a long-time Emacs (and, before that, Vim) user, I can honestly say that more or less everything you describe here I have either (a) never needed or (b) find solutions like ropemacs, jedi, python.el, flycheck, etc. perfectly acceptable.</p>
<p>When it comes to completion, docs, navigation, etc. I like the combination of Python-powered solutions (like jedi.el) and fallbacks like etags. I&#8217;ve watched over the shoulder of Pycharm users before and when completion fails for whatever reason, they&#8217;re kinda stuck. When it happens to me, I always have the &#8220;dumb&#8221; TAGS file fallback.</p>
<p>While I generally have no use for IDE features in Python, I do love me some `rope-organize-imports` <img src="http://d26g26mszp4v2i.cloudfront.net/wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley"/> </p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		<ul class="children">

	<li class="comment byuser comment-author-admin bypostauthor odd alt depth-2" id="comment-2346">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/c7ebe753fecbe3a066839f8377c19b06?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn">Andrew</cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2346">June 15, 2013 at 11:45 am</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>Awesome, I&#8217;m glad your editor is working for you!</p>
<p>I wish there was a &#8220;dumb&#8221; TAGS-file like feature that would kick in if normal completion failed, or which could have a separate command. Apparently there is a feature that will complete words in the current file, like Vim&#8217;s omnicomplete functionality (thanks to John Florian for pointing that out in his comment), but that&#8217;s a little too dumb to work for this purpose.</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		<ul class="children">

	<li class="comment even depth-3" id="comment-2631">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/de7fd1ac113889bcf1abb704e1682757?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn"><a href="http://safariflow.com" onclick="javascript:_gaq.push(['_trackEvent','outbound-commentauthor','http://safariflow.com']);" rel='external nofollow' class='url'>Michael Sokolov</a></cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2631">February 11, 2014 at 4:34 pm</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>Thanks, Andrew! I haven&#8217;t tried out everything you mentioned here, but  I feel like language-aware symbol lookup (go to definition, who calls) together with a modern debugger is enough to make me put up with the less-than-perfect emacs emulation in the editor.  I was fumbling around with etags (in emacs) for a while, but in the end I find it&#8217;s little better than a text search across all your files if you want to do who-calls lookups.  And PyCharm does provide that.</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

	<li class="comment odd alt thread-even depth-1" id="comment-2336">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/d87c49e89a4c2493685be5638a156014?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn"><a href="http://codehill.com" onclick="javascript:_gaq.push(['_trackEvent','outbound-commentauthor','http://codehill.com']);" rel='external nofollow' class='url'>amgad s</a></cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2336">June 10, 2013 at 9:12 pm</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>Thanks. I&#8217;m considering switching from Sublime Text 2 to PyCharm after trying it for week and your detailed review was all I needed to convince me.</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		</li><!-- #comment-## -->

	<li class="comment even thread-odd thread-alt depth-1" id="comment-2341">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/e102232a821d9e0b6e8600ef6fea7fae?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn">John Florian</cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2341">June 14, 2013 at 10:04 am</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>As far as emulating vim&#8217;s dumb completion, for use within things like doc strings, I&#8217;ve found that I can use Alt+Slash very effectively.  I have custom key mappings, but I see it bound to the Main Menu &gt; Code &gt; Completion &gt; Cyclic Expand Word.</p>
<p>Give that a try.</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		<ul class="children">

	<li class="comment byuser comment-author-admin bypostauthor odd alt depth-2" id="comment-2345">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/c7ebe753fecbe3a066839f8377c19b06?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn">Andrew</cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2345">June 15, 2013 at 11:40 am</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>Thanks, I&#8217;ve never used this feature! Apparently it&#8217;s mapped to Option + forward-slash, which works for me. It appears to complete text in the current file. What would be even greater is if I had the option to complete text in any open files, or across all project symbols or something.</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		<ul class="children">

	<li class="comment even depth-3" id="comment-2353">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/e102232a821d9e0b6e8600ef6fea7fae?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn">John Florian</cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2353">June 17, 2013 at 4:14 am</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>There&#8217;s also Alt (or Option) + Shift + Slash for the reverse complement.  I&#8217;m not aware of any way to complete from any open file &#8230; or anything more global for that matter, though I too have wanted this.</p>
<p>What I want more than anything right now is a working reformatter for comments and doc strings.  I&#8217;d want it mapped to &#8216;gq&#8217; like vim.  At one time I would have never believed anything to replace vim for editing code, but PyCharm&#8217;s knowledge of the code gives it serious advantage.  However, I still rely on vim when more than a few lines of formatting need some work.</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		<ul class="children">

	<li class="comment byuser comment-author-admin bypostauthor odd alt depth-4" id="comment-2358">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/c7ebe753fecbe3a066839f8377c19b06?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn">Andrew</cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2358">June 22, 2013 at 4:56 am</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>I wanted `gq` to work so badly that I wrote a plugin. It works with PyCharm and should work with any other Intellij IDE:</p>
<p><a href="http://plugins.jetbrains.com/plugin/7234" onclick="javascript:_gaq.push(['_trackEvent','outbound-comment','http://plugins.jetbrains.com']);" rel="nofollow">http://plugins.jetbrains.com/plugin/7234</a></p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

	<li class="comment even thread-even depth-1" id="comment-2343">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/5b2b185c814bb25f2f95a1152e58f033?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn"><a href="http://roryokane.com" onclick="javascript:_gaq.push(['_trackEvent','outbound-commentauthor','http://roryokane.com']);" rel='external nofollow' class='url'>Rory O’Kane</a></cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2343">June 15, 2013 at 10:31 am</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>I notice that your blog’s stylesheet displays h1 and h2 headers with the same styles – they both have 42px height. This makes your review a bit harder to read than if h2s were smaller than h1s. It would be easier to skim your review if the “What it Feels Like” and “Downsides” h2 were smaller than the feature name h1s.</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		<ul class="children">

	<li class="comment byuser comment-author-admin bypostauthor odd alt depth-2" id="comment-2344">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/c7ebe753fecbe3a066839f8377c19b06?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn">Andrew</cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2344">June 15, 2013 at 11:38 am</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>Good point. Fixed!</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

	<li class="comment even thread-odd thread-alt depth-1" id="comment-2347">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/c622ca73254e6dc7bb974cd4ef33626f?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn">Kenneth M.</cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2347">June 15, 2013 at 3:21 pm</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>Great article. </p>
<p>I&#8217;ve been trying to integrate PyCharm (and Jetbrains products in general) with the VIM keybindings. I have used the IDEA VIM  plugin but was never quite satisfied with my keymappings. Too often I found myself disabling VI Mode (the toggle for which I have bound to my unused windows key) to use the hotkeys for the special PyCharm features which is burned into my muscle memory at this point.  Is there anyway you could share what key bindings you have setup? I would be interested in comparing notes.</p>
<p>Thanks!</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		</li><!-- #comment-## -->

	<li class="comment odd alt thread-even depth-1" id="comment-2349">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/7e2800fc2bdd70c96b98965f7fdd8949?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn"><a href="http://thepoliticalprogrammer.net" onclick="javascript:_gaq.push(['_trackEvent','outbound-commentauthor','http://thepoliticalprogrammer.net']);" rel='external nofollow' class='url'>Travis beatty</a></cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2349">June 16, 2013 at 7:55 am</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>Hi,</p>
<p>I really liked your review.  I&#8217;m a dedicated vim user, and a huge python developer.  I really feel like I should give pycharm a chance.  I&#8217;ve been thinking about it for the past week, actually.</p>
<p>I think this post has made me dive into the switch&#8211; right now.</p>
<p>I have to admit, I was missing information on virtualenv/pip support.  I was really hoping you&#8217;d cover that.  The few times I&#8217;ve tried to play with pycharm, I&#8217;ve always gotten lost.  It&#8217;s hard to come up with a workflow involving them.  If you could share, that&#8217;d be awesome.</p>
<p>Other than that, what do you do to keep yourself from going back?  Every time I&#8217;ve tried I would feel, &#8220;I can just do this easier in vim,&#8221; and switch back.  It probably stems from a lack of knowledge of pycharm and its features.  Is there any resource you used?  Or just due diligence?</p>
<p>Thanks,</p>
<p>Travis</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		<ul class="children">

	<li class="comment byuser comment-author-admin bypostauthor even depth-2" id="comment-2357">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/c7ebe753fecbe3a066839f8377c19b06?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn">Andrew</cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2357">June 21, 2013 at 9:28 pm</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>I&#8217;ll try to either add something about virtualenv and pip integration to this review or write up a &#8220;getting started with PyCharm&#8221; type of post that includes it. There seems to be enough interest.</p>
<p>I think I overlooked virtualenv and pip integration because those features are somewhat passive in my workflow. </p>
<p>The main thing I notice about virtualenv integration is that when I add a Python interpreter, PyCharm detects that it&#8217;s part of a virtualenv and indexes the symbols of the environment&#8217;s site-packages (and I&#8217;m sure it does more than that, but that&#8217;s the most obvious thing).</p>
<p>Pip integration involves PyCharm checking that a new package used in the project is in requirements.txt and offering to add it if not, and checking if all of the packages in requirements.txt are installed and offering to install them if not. The process of installing packages from requirements.txt automatically works fine most of the time, but I&#8217;ve had it fail occasionally when installing packages with complicated dependencies or compile steps, like numpy/scipy.</p>
<p>To answer your question about going back to Vim, I switched to Vim and Sublime Text 2 several times after first starting to use PyCharm. Mostly after getting frustrated about keybindings or upset that feature X didn&#8217;t quite match what I had in Vim. But PyCharm has its own gravity, just like Vim and ST 2 do, and in my case, over time, the features I found most useful and couldn&#8217;t reproduce in other editors outweighed the ones in other editors that I couldn&#8217;t reproduce in PyCharm.</p>
<p>One thing I found recently that would probably help new people using PyCharm is an interactive menu like the one in Sublime Text 2, that shows you all available menu/keyboard commands with the keyboard shortcut listed next to them. It&#8217;s Command-Shift-A on Mac and Control-Shift-A on Windows.</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

	<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2354">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/7a33caaeef73cdd12aed36477018d781?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn">Alison T</cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2354">June 17, 2013 at 7:14 am</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>Great review!  I&#8217;ve been using PyCharm and other JetBrains products for quite a while and I learned about a few features I never noticed before.  Like opening the &#8216;breadcrumb-style&#8217; navigation bar via keyboard shortcut, I always thought that thing was useless before.. now it is awesome! =)</p>
<p>One of my favorite things about JetBrains IDE&#8217;s is that you get a consistently good experience in any supported language, with minimal setup.  I work on/maintain projects in Python, Ruby, Java, C#, not to mention javascript/coffeescript/html/less/scss/markdown, etc..   With Vim/Emacs/Sublime it is a time-consuming task just to get a good setup for a single language, it would be a full time job trying to maintain a nice vim setup for all of the above!</p>
<p>FYI PyCharm runs great on Linux and has much better font rendering than OSX.. once you install infinality freetype library and use the patched OpenJDK, that is.   Out of the box using the Sun JDK  on Linux the font rendering is hideous and completely unusable.</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		<ul class="children">

	<li class="comment byuser comment-author-admin bypostauthor even depth-2" id="comment-2359">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://0.gravatar.com/avatar/c7ebe753fecbe3a066839f8377c19b06?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn">Andrew</cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2359">June 22, 2013 at 5:01 am</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>Glad I could show you some new features! </p>
<p>The problem I had on Linux was that fonts looked terrible &#8212; apparently because Swing on Linux just looks bad? I don&#8217;t know. I tried every workaround/flag/package I could find on forums and then gave up. Having to spend so much precious time on something mundane like fonts is why I stopped using Linux in the first place.</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

	<li class="comment odd alt thread-even depth-1" id="comment-2550">

		
		<div class="comment-header">
			<div class="comment-author vcard">
				<img alt='' src='http://1.gravatar.com/avatar/b99cf9079538fd7c79b3e78657c783f4?s=48&amp;d=&amp;r=PG' class='avatar avatar-48 photo' height='48' width='48'/>				<cite class="fn">YONI REVAH</cite> <span class="says">says:</span>		 	</div><!-- end .comment-author -->

			<div class="comment-meta commentmetadata">
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2550">February 8, 2014 at 11:56 am</a>
							</div><!-- end .comment-meta -->
		</div>

		<div class="comment-content">
			
			<p>As a new programmer, I&#8217;ve been on the fence about whether or not I should be using a full blown IDE because I&#8217;m afraid to get too comfortable and miss out on things like VIM or emacs, which people swear by.</p>
<p>If you ever find the time to expand on the VIM plug-in section, I would be grateful. What should someone starting out with VIM inside of an IDE know beforehand?</p>
		</div><!-- end .comment-content -->

		<div class="reply">
					</div>

		</li><!-- #comment-## -->
			</ol>
			<div class="navigation">
				<div class="alignleft"></div>
				<div class="alignright"></div>
			</div>
		</div><!--end #comments-->
				<div id="pings">
			<h3>Trackbacks</h3>			<ol class="ping-list">
						<li class="pingback even thread-even depth-1" id="comment-2340">
				<div id="div-comment-2340" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href="http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/" onclick="javascript:_gaq.push(['_trackEvent','outbound-commentauthor','http://blog.jetbrains.com']);" rel='external nofollow' class='url'>Vim as a Python IDE, or Python IDE as Vim | JetBrains PyCharm Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/comment-page-1/#comment-2340">
			June 14, 2013 at 5:40 am</a>		</div>

		<p>[...] text editors and tools for Python and Web development, in his amazingly comprehensive review One Year Later: An Epic Review of PyCharm 2.7 from a Vim User’s Perspective. We strongly recommend reading it if you haven’t [...]</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
			</ol>
		</div><!-- end #pings -->
						</div><!-- end #content -->
		<div id="sidebar" class="sidebar widget-area">
<div id="text-10" class="widget widget_text"><div class="widget-wrap">			<div class="textwidget"><a href="http://twitter.com/abrookins" onclick="javascript:_gaq.push(['_trackEvent','outbound-widget','http://twitter.com']);" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @wpbeginner</a>
<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></div>
		</div></div>
<div id="toc-widget-2" class="widget toc_widget"><div class="widget-wrap"><h4 class="widgettitle">Table of Contents</h4>
<ul class="toc_widget_list no_bullets"><li><a href="#Code_Completion">Code Completion</a></li><li><a href="#Code_Navigation">Code Navigation</a></li><li><a href="#Vim_Emulation_with_IdeaVim">Vim Emulation with IdeaVim</a></li><li><a href="#Running_Tests">Running Tests</a></li><li><a href="#Debugging">Debugging</a></li><li><a href="#Code_Generation">Code Generation</a></li><li><a href="#Error_Detection_and_Resolution">Error Detection and Resolution</a></li><li><a href="#Refactoring">Refactoring</a></li><li><a href="#Pip_and_Virtualenv_Integration">Pip and Virtualenv Integration</a></li><li><a href="#Keyboard_Shortcuts">Keyboard Shortcuts</a></li><li><a href="#Tab_Split_and_Window_Management">Tab, Split and Window Management</a></li><li><a href="#Jumping_to_Open_and_Recent_Files">Jumping to Open and Recent Files</a></li><li><a href="#Jumping_to_Files_on_Disk">Jumping to Files on Disk</a></li><li><a href="#Reformatting_Code">Reformatting Code</a></li><li><a href="#The_Terminal">The Terminal</a></li><li><a href="#Color_Schemes">Color Schemes</a></li><li><a href="#Editing_Backing_Up_and_Restoring_Configuration">Editing, Backing Up and Restoring Configuration</a></li><li><a href="#Snippets">Snippets</a></li><li><a href="#Running_Arbitrary_Code">Running Arbitrary Code</a></li><li><a href="#Opening_PyCharm_from_the_Command_Line">Opening PyCharm from the Command Line</a></li><li><a href="#Using_Plugins">Using Plugins</a></li><li><a href="#Creating_Plugins">Creating Plugins</a></li></ul></div></div>
<!-- Wordpress Popular Posts Plugin v2.3.7 [W] [all] [views] [regular] -->
<div id="wpp-3" class="widget popular-posts"><div class="widget-wrap">
<h4 class="widgettitle">Popular</h4>
<ul class="wpp-list">
<li><a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/" title="An Epic Review of PyCharm 3 from a Vim User&#039;s Perspective" class="wpp-post-title" target="_self">An Epic Review of PyCharm 3 from a Vim User&#039;s Perspective</a> <span class="post-stats"></span></li>
<li><a href="http://andrewbrookins.com/tech/make-sublime-text-2-more-like-vim-wrap-code-goto-last-edit-and-more/" title="Make Sublime Text 2 More like Vim: Wrap Code, Go To Last Edit, Jump Back, and More" class="wpp-post-title" target="_self">Make Sublime Text 2 More like Vim: Wrap Code, Go To Last Edit, Jump Back, and More</a> <span class="post-stats"></span></li>
<li><a href="http://andrewbrookins.com/python/using-ipython-notebook-with-django/" title="Using IPython Notebook with Django" class="wpp-post-title" target="_self">Using IPython Notebook with Django</a> <span class="post-stats"></span></li>
<li><a href="http://andrewbrookins.com/tech/instant-django-dev-environments-with-tmux-tmuxinator-and-virtualenvwrapper/" title="Instant Django Dev Environments with Tmux, Tmuxinator, and Virtualenvwrapper" class="wpp-post-title" target="_self">Instant Django Dev Environments with Tmux, Tmuxinator, and Virtualenvwrapper</a> <span class="post-stats"></span></li>
<li><a href="http://andrewbrookins.com/tech/set-the-path-to-an-imagefield-in-django-manually/" title="Set an ImageField path in Django manually" class="wpp-post-title" target="_self">Set an ImageField path in Django manually</a> <span class="post-stats"></span></li>
<li><a href="http://andrewbrookins.com/programming/four-lessons-i-learned-programming-muds-as-a-teenager/" title="Four Things I Learned about Software Engineering from Programming MUDs as a Teenager" class="wpp-post-title" target="_self">Four Things I Learned about Software Engineering from Programming MUDs as a Teenager</a> <span class="post-stats"></span></li>
<li><a href="http://andrewbrookins.com/tech/golang-get-directory-of-the-current-file/" title="Go: How to Get the Directory of the Current File" class="wpp-post-title" target="_self">Go: How to Get the Directory of the Current File</a> <span class="post-stats"></span></li>
<li><a href="http://andrewbrookins.com/tech/even-better-gnu-screen/" title="Even Better GNU Screen" class="wpp-post-title" target="_self">Even Better GNU Screen</a> <span class="post-stats"></span></li>
<li><a href="http://andrewbrookins.com/tech/build-an-in-memory-proximity-search-web-service-with-python-scipy-and-heroku/" title="Build an In-Memory Proximity Search Web Service with Python, SciPy and Heroku" class="wpp-post-title" target="_self">Build an In-Memory Proximity Search Web Service with Python, SciPy and Heroku</a> <span class="post-stats"></span></li>
<li><a href="http://andrewbrookins.com/tech/slow-scrolling-in-vim-and-macvim-on-os-x-increase-key-repeat-settings/" title="How to Fix Slow Scrolling in Vim and MacVim on OS X" class="wpp-post-title" target="_self">How to Fix Slow Scrolling in Vim and MacVim on OS X</a> <span class="post-stats"></span></li>

</ul>
</div></div>

<!-- End Wordpress Popular Posts Plugin v2.3.7 -->
		<div id="recent-posts-3" class="widget widget_recent_entries"><div class="widget-wrap">		<h4 class="widgettitle">Recent</h4>
		<ul>
					<li>
				<a href="http://andrewbrookins.com/games/horror-in-darkmoon-vale-a-pathfinder-game-session-3-recap/">&#8220;Horror in Darkmoon Vale,&#8221; a Pathfinder Game &#8212; Session 3 Recap</a>
						</li>
					<li>
				<a href="http://andrewbrookins.com/games/horror-in-darkmoon-vale-a-pathfinder-game-session-2-recap/">“Horror in Darkmoon Vale,” a Pathfinder Game — Session 2 Recap</a>
						</li>
					<li>
				<a href="http://andrewbrookins.com/games/horror-in-darkmoon-vale-a-pathfinder-game-session-1-recap/">&#8220;Horror in Darkmoon Vale,&#8221; a Pathfinder Game &#8212; Session 1 Recap</a>
						</li>
					<li>
				<a href="http://andrewbrookins.com/tech/one-year-later-an-epic-review-of-pycharm-2-7-from-a-vim-users-perspective/">An Epic Review of PyCharm 3 from a Vim User&#8217;s Perspective</a>
						</li>
					<li>
				<a href="http://andrewbrookins.com/tech/porting-a-geographic-nearest-neighbor-python-web-service-to-go/">Porting a Geographic Nearest-Neighbor Python Web Service to Go</a>
						</li>
				</ul>
		</div></div>
<div id="text-13" class="widget widget_text"><div class="widget-wrap">			<div class="textwidget"><iframe src="http://rcm-na.amazon-adsystem.com/e/cm?t=andrewbrookin-20&o=1&p=8&l=as1&asins=B00FYS7OSY&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
<br>
<iframe src="http://rcm-na.amazon-adsystem.com/e/cm?t=andrewbrookin-20&o=1&p=8&l=as1&asins=1932394443&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
<br>
<iframe src="http://rcm-na.amazon-adsystem.com/e/cm?t=andrewbrookin-20&o=1&p=8&l=as1&asins=1934356980&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
<br>
<iframe src="http://rcm-na.amazon-adsystem.com/e/cm?t=andrewbrookin-20&o=1&p=8&l=as1&asins=1849510504&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></div>
		</div></div>
</div>
	</div><!-- end #content-sidebar-wrap -->
	</div><!-- end .wrap --></div><!-- end #inner --><div id="footer" class="footer"><div class="wrap"><div class="gototop"><p><a href="#wrap" rel="nofollow">Return to top of page</a></p></div><div class="creds"><p>Copyright &#x000A9; 2014 &#x000B7; <a href="http://www.studiopress.com/themes/balance" title="Balance Theme">Balance Theme</a> on <a href="http://www.studiopress.com/" title="Genesis Framework">Genesis Framework</a> &#x000B7; <a href="http://wordpress.org/" title="WordPress">WordPress</a> &#x000B7; <a href="http://andrewbrookins.com/wp-login.php">Log in</a></p></div></div><!-- end .wrap --></div><!-- end #footer -->
</div><!-- end #wrap -->
<script type='text/javascript'>//<![CDATA[
var tocplus={"visibility_show":"show","visibility_hide":"hide","width":"Auto"};
//]]></script>
<script type="text/javascript" src="http://d26g26mszp4v2i.cloudfront.net/wp-content/cache/minify/000000/hcnRDYAgDAXAhaxPRwLTIgYK4cH-uoGflzsxQywqzeRqPtUnpZdF2Pi4HUjqykyUHPEQVX2Bq-uwzPvv9zASXw.js.gzip"></script>
</body>
</html>

<!-- Performance optimized by W3 Total Cache. Learn more: http://www.w3-edge.com/wordpress-plugins/

Minified using apc
Page Caching using apc
Database Caching 6/22 queries in 0.006 seconds using apc
Object Caching 1833/1911 objects using apc
Content Delivery Network via Amazon Web Services: CloudFront: d26g26mszp4v2i.cloudfront.net

 Served from: andrewbrookins.com @ 2014-06-30 04:38:35 by W3 Total Cache -->