<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<title>Eli Bendersky&#039;s website  &raquo; Python internals: adding a new statement to Python</title>

<meta name="generator" content="WordPress" /> <!-- leave this for stats -->

<link rel="stylesheet" href="http://eli.thegreenplace.net/wp-content/themes/elitheme/style.css" type="text/css" media="screen" />
<link rel="alternate" type="application/rss+xml" title="Eli Bendersky&#039;s website RSS Feed" href="http://eli.thegreenplace.net/feed/" />
<link rel="pingback" href="http://eli.thegreenplace.net/xmlrpc.php" />

<style type="text/css" media="screen">
/*	To accomodate differing install paths of WordPress, images are referred only here,
	and not in the wp-layout.css file. If you prefer to use only CSS for colors and what
	not, then go right ahead and delete the following lines, and the image files. */
		
	body { background: url("http://eli.thegreenplace.net/wp-content/themes/elitheme/images/kubrickbgcolor.jpg"); }	
	#page { background: url("http://eli.thegreenplace.net/wp-content/themes/elitheme/images/kubrickbgwide.jpg") repeat-y top; border: none; } 
	#header { background: url("http://eli.thegreenplace.net/wp-content/themes/elitheme/images/kubrickheader.jpg") no-repeat bottom center; }
	#footer { background: url("http://eli.thegreenplace.net/wp-content/themes/elitheme/images/kubrickfooter.jpg") no-repeat bottom; border: none; }

    #headerimg { background: url('http://eli.thegreenplace.net/wp-content/themes/elitheme/images/personalheader.gif') no-repeat top;}
</style>

<link rel="alternate" type="application/rss+xml" title="Eli Bendersky&#039;s website &raquo; Python internals: adding a new statement to Python Comments Feed" href="http://eli.thegreenplace.net/2010/06/30/python-internals-adding-a-new-statement-to-python/feed/" />
<link rel='stylesheet' id='wp-quicklatex-format-css'  href='http://eli.thegreenplace.net/wp-content/plugins/wp-quicklatex/css/quicklatex-format.css?ver=3.4.2' type='text/css' media='all' />
<script type='text/javascript' src='http://eli.thegreenplace.net/wp-includes/js/tw-sack.js?ver=1.6.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var AjaxForceCommentPreviewVars = {"emptyString":"A preview will appear here","url":"http:\/\/eli.thegreenplace.net\/wp-content\/plugins\/ajax-force-comment-preview\/ajax-force-comment-preview.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://eli.thegreenplace.net/wp-content/plugins/ajax-force-comment-preview/ajax-force-comment-preview.js?ver=2.01704676677'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://eli.thegreenplace.net/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://eli.thegreenplace.net/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='AES encryption of files in Python with PyCrypto' href='http://eli.thegreenplace.net/2010/06/25/aes-encryption-of-files-in-python-with-pycrypto/' />
<link rel='next' title='Summary of reading: May &#8211; June 2010' href='http://eli.thegreenplace.net/2010/07/08/summary-of-reading-may-june-2010/' />
<meta name="generator" content="WordPress 3.4.2" />
<link rel='canonical' href='http://eli.thegreenplace.net/2010/06/30/python-internals-adding-a-new-statement-to-python/' />
<link rel='shortlink' href='http://eli.thegreenplace.net/?p=2231' />

	<!-- Google Ajax Search -->

	
	<link href="http://www.google.com/uds/css/gsearch.css" type="text/css" rel="stylesheet"/>
	<style>	
	
	/* Width */
	.gsc-control {
	  	width: 190px;
		overflow: hidden
	}
	.gs-result .gs-title,
	.gs-result .gs-title * {
		font-size: em;
	  	color: #;
	}
	.gsc-results .gsc-trailing-more-results,
	.gsc-results .gsc-trailing-more-results * {
	  	color: #;
	}
	.gs-result a.gs-visibleUrl,
	.gs-result .gs-visibleUrl {
	  	color: #;
	}
	.gs-result a.gs-clusterUrl,
	.gs-result .gs-clusterUrl {
	  	color: #;
	}
	.gsc-resultsbox-visible {
		display: table;
		width: 100%;
		overflow: hidden
	}
	</style>


	<style>
	img.gsc-branding-img {
	display: none;
	}
	td.gsc-branding-text div.gsc-branding-text {
	display: none;
	}	
	</style>

		
	<script src='http://www.google.com/uds/api?file=uds.js&amp;v=1.0&key=ABQIAAAASJLkfzhbrk2er4Fet8xQ8RTEuR52sBrLGuwoSTDIWMPE_c3JyBS_mfdA9ofPFAiibXYIkxl8dPjKeA' type='text/javascript'></script>
	<!-- Google AjaxSearch Plugin for WordPress initialization -->
	<script type='text/javascript'> 




		function OnLoad()
		{
			
			var searchControl = new GSearchControl();
			searchControl .setLinkTarget(GSearch.LINK_TARGET_SELF); 
			var webSearch = new GwebSearch();   
			webSearch.setSiteRestriction("http://eli.thegreenplace.net");
			webSearch.setUserDefinedLabel("Results");
			webSearch.setUserDefinedClassSuffix("webSearch");
											var options = new GsearcherOptions();
			options.setExpandMode(GSearchControl.EXPAND_MODE_OPEN);
			searchControl.addSearcher(webSearch, options);
											

			var drawOptions = new GdrawOptions();
			drawOptions.setDrawMode(GSearchControl.DRAW_MODE_LINEAR);
			searchControl.draw(document.getElementById("searchcontrol"),drawOptions);
		}
		GSearch.setOnLoadCallback(OnLoad);

	</script>
	<!-- Google Maps Plugin for WordPress (end) -->

                <script type='text/javascript' src='http://eli.thegreenplace.net/wp-content/plugins/stupid-captcha/jquery.js.php' ></script>
        <script type='text/javascript' src='http://eli.thegreenplace.net/wp-content/plugins/stupid-captcha/stupid-captcha.js.php' ></script></head>
<body>
<div id="page">


<div id="header">
	<a href="http://eli.thegreenplace.net/"><img src="http://eli.thegreenplace.net/wp-content/themes/elitheme/images/personalheader.gif"></a>
<!--	<div id="headerimg">
		<h1><a href="http://eli.thegreenplace.net/">Eli Bendersky&#039;s website</a></h1>
		<div class="description">Eli Bendersky&#039;s personal website</div>
	</div>-->
</div>
<hr />

	<div id="content" class="widecolumn">
				
  	
		<div class="navigation">
			<div class="alignleft"><b><a href="http://eli.thegreenplace.net/archives/">&lt;&lt;&lt;</a> 
            Back to blog <a href="http://eli.thegreenplace.net/archives/">Archives</a></b></div>
            <br/>
		</div>
		<div class="post" id="post-2231">
			<h2><a href="http://eli.thegreenplace.net/2010/06/30/python-internals-adding-a-new-statement-to-python/" rel="bookmark" title="Permanent Link: Python internals: adding a new statement to Python">Python internals: adding a new statement to Python</a></h2>
			<small>June 30th, 2010 at 7:18 pm <!-- by eliben --></small>
			
			<div class="entry">
				<p>This article is an attempt to better understand how the front-end of Python works. Just reading documentation and source code may be a bit boring, so I&#8217;m taking a hands-on approach here: I&#8217;m going to add an <tt class="docutils literal"><span class="pre">until</span></tt> statement to Python.</p>
<p>All the coding for this article was done against the cutting-edge Py3k branch in the <a class="reference external" href="http://code.python.org/hg/branches/py3k/">Python Mercurial repository mirror</a>.</p>
<div class="section" id="the-until-statement">
<h3>The <tt class="docutils literal"><span class="pre">until</span></tt> statement</h3>
<p>Some languages, like Ruby, have an <tt class="docutils literal"><span class="pre">until</span></tt> statement, which is the complement to <tt class="docutils literal"><span class="pre">while</span></tt> (<tt class="docutils literal"><span class="pre">until</span> <span class="pre">num</span> <span class="pre">==</span> <span class="pre">0</span></tt> is equivalent to <tt class="docutils literal"><span class="pre">while</span> <span class="pre">num</span> <span class="pre">!=</span> <span class="pre">0</span></tt>). In Ruby, I can write:</p>
<div class="highlight">
<pre>num = <span style="color: #007f7f">3</span>
<span style="color: #00007f; font-weight: bold">until</span> num == <span style="color: #007f7f">0</span> <span style="color: #00007f; font-weight: bold">do</span>
  <span style="color: #00007f">puts</span> num
  num -= <span style="color: #007f7f">1</span>
<span style="color: #00007f; font-weight: bold">end</span>
</pre>
</div>
<p>And it will print:</p>
<div class="highlight">
<pre>3
2
1
</pre>
</div>
<p>So, I want to add a similar capability to Python. That is, being able to write:</p>
<div class="highlight">
<pre>num = <span style="color: #007f7f">3</span>
until num == <span style="color: #007f7f">0</span>:
  <span style="color: #00007f; font-weight: bold">print</span>(num)
  num -= <span style="color: #007f7f">1</span>
</pre>
</div>
</div>
<div class="section" id="a-language-advocacy-digression">
<h3>A language-advocacy digression</h3>
<p>This article doesn&#8217;t attempt to suggest the addition of an <tt class="docutils literal"><span class="pre">until</span></tt> statement to Python. Although I think such a statement would make some code clearer, and this article displays how easy it is to add, I completely respect Python&#8217;s philosophy of minimalism. All I&#8217;m trying to do here, really, is gain some insight into the inner workings of Python.</p>
</div>
<div class="section" id="modifying-the-grammar">
<h3>Modifying the grammar</h3>
<p>Python uses a custom parser generator named <tt class="docutils literal"><span class="pre">pgen</span></tt>. This is a LL(1) parser that converts Python source code into a parse tree. The input to the parser generator is the file <tt class="docutils literal"><span class="pre">Grammar/Grammar</span></tt> <a class="footnote-reference" href="#id4" id="id1">[1]</a>. This is a simple text file that specifies the grammar of Python.</p>
<p>Two modifications have to be made to the grammar file. The first is to add a definition for the <tt class="docutils literal"><span class="pre">until</span></tt> statement. I found where the <tt class="docutils literal"><span class="pre">while</span></tt> statement was defined (<tt class="docutils literal"><span class="pre">while_stmt</span></tt>), and added <tt class="docutils literal"><span class="pre">until_stmt</span></tt> below <a class="footnote-reference" href="#id5" id="id2">[2]</a>:</p>
<div class="highlight">
<pre>compound_stmt: if_stmt | while_stmt | until_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated
if_stmt: &#39;if&#39; test &#39;:&#39; suite (&#39;elif&#39; test &#39;:&#39; suite)* [&#39;else&#39; &#39;:&#39; suite]
while_stmt: &#39;while&#39; test &#39;:&#39; suite [&#39;else&#39; &#39;:&#39; suite]
until_stmt: &#39;until&#39; test &#39;:&#39; suite
</pre>
</div>
<p>Note that I&#8217;ve decided to exclude the <tt class="docutils literal"><span class="pre">else</span></tt> clause from my definition of <tt class="docutils literal"><span class="pre">until</span></tt>, just to make it a little bit different (and because frankly I dislike the <tt class="docutils literal"><span class="pre">else</span></tt> clause of loops and don&#8217;t think it fits well with the Zen of Python).</p>
<p>The second change is to modify the rule for <tt class="docutils literal"><span class="pre">compound_stmt</span></tt> to include <tt class="docutils literal"><span class="pre">until_stmt</span></tt>, as you can see in the snippet above. It&#8217;s right after <tt class="docutils literal"><span class="pre">while_stmt</span></tt>, again.</p>
<p>When you run <tt class="docutils literal"><span class="pre">make</span></tt> after modifying <tt class="docutils literal"><span class="pre">Grammar/Grammar</span></tt>, notice that the <tt class="docutils literal"><span class="pre">pgen</span></tt> program is run to re-generate <tt class="docutils literal"><span class="pre">Include/graminit.h</span></tt> and <tt class="docutils literal"><span class="pre">Python/graminit.c</span></tt>, and then several files get re-compiled.</p>
</div>
<div class="section" id="modifying-the-ast-generation-code">
<h3>Modifying the AST generation code</h3>
<p>After the Python parser has created a parse tree, this tree is converted into an AST, since ASTs are <a class="reference external" href="http://eli.thegreenplace.net/2009/02/16/abstract-vs-concrete-syntax-trees/">much simpler to work with</a> in subsequent stages of the compilation process.</p>
<p>So, we&#8217;re going to visit <tt class="docutils literal"><span class="pre">Parser/Python.asdl</span></tt> which defines the structure of Python&#8217;s ASTs and add an AST node for our new <tt class="docutils literal"><span class="pre">until</span></tt> statement, again right below the <tt class="docutils literal"><span class="pre">while</span></tt>:</p>
<div class="highlight">
<pre>| While(expr test, stmt* body, stmt* orelse)
| Until(expr test, stmt* body)
</pre>
</div>
<p>If you now run <tt class="docutils literal"><span class="pre">make</span></tt>, notice that before compiling a bunch of files, <tt class="docutils literal"><span class="pre">Parser/asdl_c.py</span></tt> is run to generate C code from the AST definition file. This (like <tt class="docutils literal"><span class="pre">Grammar/Grammar</span></tt>) is another example of the Python source-code using a mini-language (in other words, a DSL) to simplify programming. Also note that since <tt class="docutils literal"><span class="pre">Parser/asdl_c.py</span></tt> is a Python script, this is a kind of <a class="reference external" href="http://en.wikipedia.org/wiki/Bootstrapping_%28compilers%29">bootstrapping</a> &#8211; to build Python from scratch, Python already has to be available.</p>
<p>While <tt class="docutils literal"><span class="pre">Parser/asdl_c.py</span></tt> generated the code to manage our newly defined AST node (into the files <tt class="docutils literal"><span class="pre">Include/Python-ast.h</span></tt> and <tt class="docutils literal"><span class="pre">Python/Python-ast.c</span></tt>), we still have to write the code that converts a relevant parse-tree node into it by hand. This is done in the file <tt class="docutils literal"><span class="pre">Python/ast.c</span></tt>. There, a function named <tt class="docutils literal"><span class="pre">ast_for_stmt</span></tt> converts parse tree nodes for statements into AST nodes. Again, guided by our old friend <tt class="docutils literal"><span class="pre">while</span></tt>, we jump right into the big <tt class="docutils literal"><span class="pre">switch</span></tt> for handling compound statements and add a clause for <tt class="docutils literal"><span class="pre">until_stmt</span></tt>:</p>
<div class="highlight">
<pre><span style="color: #00007f; font-weight: bold">case</span> while_stmt:
    <span style="color: #00007f; font-weight: bold">return</span> ast_for_while_stmt(c, ch);
<span style="color: #00007f; font-weight: bold">case</span> until_stmt:
    <span style="color: #00007f; font-weight: bold">return</span> ast_for_until_stmt(c, ch);
</pre>
</div>
<p>Now we should implement <tt class="docutils literal"><span class="pre">ast_for_until_stmt</span></tt>. Here it is:</p>
<div class="highlight">
<pre><span style="color: #00007f; font-weight: bold">static</span> stmt_ty
<span style="color: #00007f">ast_for_until_stmt</span>(<span style="color: #00007f; font-weight: bold">struct</span> compiling *c, <span style="color: #00007f; font-weight: bold">const</span> node *n)
{
    <span style="color: #007f00">/* until_stmt: &#39;until&#39; test &#39;:&#39; suite */</span>
    REQ(n, until_stmt);

    <span style="color: #00007f; font-weight: bold">if</span> (NCH(n) == <span style="color: #007f7f">4</span>) {
        expr_ty expression;
        asdl_seq *suite_seq;

        expression = ast_for_expr(c, CHILD(n, <span style="color: #007f7f">1</span>));
        <span style="color: #00007f; font-weight: bold">if</span> (!expression)
            <span style="color: #00007f; font-weight: bold">return</span> <span style="color: #00007f">NULL</span>;
        suite_seq = ast_for_suite(c, CHILD(n, <span style="color: #007f7f">3</span>));
        <span style="color: #00007f; font-weight: bold">if</span> (!suite_seq)
            <span style="color: #00007f; font-weight: bold">return</span> <span style="color: #00007f">NULL</span>;
        <span style="color: #00007f; font-weight: bold">return</span> Until(expression, suite_seq, LINENO(n), n-&gt;n_col_offset, c-&gt;c_arena);
    }

    PyErr_Format(PyExc_SystemError,
                 <span style="color: #7f007f">&quot;wrong number of tokens for &#39;until&#39; statement: %d&quot;</span>,
                 NCH(n));
    <span style="color: #00007f; font-weight: bold">return</span> <span style="color: #00007f">NULL</span>;
}
</pre>
</div>
<p>Again, this was coded while closely looking at the equivalent <tt class="docutils literal"><span class="pre">ast_for_while_stmt</span></tt>, with the difference that for <tt class="docutils literal"><span class="pre">until</span></tt> I&#8217;ve decided not to support the <tt class="docutils literal"><span class="pre">else</span></tt> clause. As expected, the AST is created recursively, using other AST creating functions like <tt class="docutils literal"><span class="pre">ast_for_expr</span></tt> for the condition expression and <tt class="docutils literal"><span class="pre">ast_for_suite</span></tt> for the body of the <tt class="docutils literal"><span class="pre">until</span></tt> statement. Finally, a new node named <tt class="docutils literal"><span class="pre">Until</span></tt> is returned.</p>
<p>Note that we access the parse-tree node <tt class="docutils literal"><span class="pre">n</span></tt> using some macros like <tt class="docutils literal"><span class="pre">NCH</span></tt> and <tt class="docutils literal"><span class="pre">CHILD</span></tt>. These are worth understanding &#8211; their code is in <tt class="docutils literal"><span class="pre">Include/node.h</span></tt>.</p>
</div>
<div class="section" id="digression-ast-composition">
<h3>Digression: AST composition</h3>
<p>I chose to create a new type of AST for the <tt class="docutils literal"><span class="pre">until</span></tt> statement, but actually this isn&#8217;t necessary. I could&#8217;ve saved some work and implemented the new functionality using composition of existing AST nodes, since:</p>
<div class="highlight">
<pre>until condition:
   <span style="color: #007f00"># do stuff</span>
</pre>
</div>
<p>Is functionally equivalent to:</p>
<div class="highlight">
<pre><span style="color: #00007f; font-weight: bold">while</span> <span style="color: #0000aa">not</span> condition:
  <span style="color: #007f00"># do stuff</span>
</pre>
</div>
<p>Instead of creating the <tt class="docutils literal"><span class="pre">Until</span></tt> node in <tt class="docutils literal"><span class="pre">ast_for_until_stmt</span></tt>, I could have created a <tt class="docutils literal"><span class="pre">Not</span></tt> node with an <tt class="docutils literal"><span class="pre">While</span></tt> node as a child. Since the AST compiler already knows how to handle these nodes, the next steps of the process could be skipped.</p>
</div>
<div class="section" id="compiling-asts-into-bytecode">
<h3>Compiling ASTs into bytecode</h3>
<p>The next step is compiling the AST into Python bytecode. The compilation has an intermediate result which is a CFG (Control Flow Graph), but since the same code handles it I will ignore this detail for now and leave it for another article.</p>
<p>The code we will look at next is <tt class="docutils literal"><span class="pre">Python/compile.c</span></tt>. Following the lead of <tt class="docutils literal"><span class="pre">while</span></tt>, we find the function <tt class="docutils literal"><span class="pre">compiler_visit_stmt</span></tt>, which is responsible for compiling statements into bytecode. We add a clause for <tt class="docutils literal"><span class="pre">Until</span></tt>:</p>
<div class="highlight">
<pre><span style="color: #00007f; font-weight: bold">case</span> While_kind:
    <span style="color: #00007f; font-weight: bold">return</span> compiler_while(c, s);
<span style="color: #00007f; font-weight: bold">case</span> Until_kind:
    <span style="color: #00007f; font-weight: bold">return</span> compiler_until(c, s);
</pre>
</div>
<p>If you wonder what <tt class="docutils literal"><span class="pre">Until_kind</span></tt> is, it&#8217;s a constant (actually a value of the <tt class="docutils literal"><span class="pre">_stmt_kind</span></tt> enumeration) automatically generated from the AST definition file into <tt class="docutils literal"><span class="pre">Include/Python-ast.h</span></tt>. Anyway, we call <tt class="docutils literal"><span class="pre">compiler_until</span></tt> which, of course, still doesn&#8217;t exist. I&#8217;ll get to it an a moment.</p>
<p>If you&#8217;re curious like me, you&#8217;ll notice that <tt class="docutils literal"><span class="pre">compiler_visit_stmt</span></tt> is peculiar. No amount of <tt class="docutils literal"><span class="pre">grep</span></tt>-ping the source tree reveals where it is called. When this is the case, only one option remains &#8211; C macro-fu. Indeed, a short investigation leads us to the <tt class="docutils literal"><span class="pre">VISIT</span></tt> macro defined in <tt class="docutils literal"><span class="pre">Python/compile.c</span></tt>:</p>
<div class="highlight">
<pre><span style="color: #007f00">#define VISIT(C, TYPE, V) {\</span>
<span style="color: #007f00">    if (!compiler_visit_ ## TYPE((C), (V))) \</span>
<span style="color: #007f00">        return 0; \</span>
</pre>
</div>
<p>It&#8217;s used to invoke <tt class="docutils literal"><span class="pre">compiler_visit_stmt</span></tt> in <tt class="docutils literal"><span class="pre">compiler_body</span></tt>. Back to our business, however&#8230;</p>
<p>As promised, here&#8217;s <tt class="docutils literal"><span class="pre">compiler_until</span></tt>:</p>
<div class="highlight">
<pre><span style="color: #00007f; font-weight: bold">static</span> <span style="color: #00007f; font-weight: bold">int</span>
<span style="color: #00007f">compiler_until</span>(<span style="color: #00007f; font-weight: bold">struct</span> compiler *c, stmt_ty s)
{
    basicblock *loop, *end, *anchor = <span style="color: #00007f">NULL</span>;
    <span style="color: #00007f; font-weight: bold">int</span> constant = expr_constant(s-&gt;v.Until.test);

    <span style="color: #00007f; font-weight: bold">if</span> (constant == <span style="color: #007f7f">1</span>) {
        <span style="color: #00007f; font-weight: bold">return</span> <span style="color: #007f7f">1</span>;
    }
    loop = compiler_new_block(c);
    end = compiler_new_block(c);
    <span style="color: #00007f; font-weight: bold">if</span> (constant == -<span style="color: #007f7f">1</span>) {
        anchor = compiler_new_block(c);
        <span style="color: #00007f; font-weight: bold">if</span> (anchor == <span style="color: #00007f">NULL</span>)
            <span style="color: #00007f; font-weight: bold">return</span> <span style="color: #007f7f">0</span>;
    }
    <span style="color: #00007f; font-weight: bold">if</span> (loop == <span style="color: #00007f">NULL</span> || end == <span style="color: #00007f">NULL</span>)
        <span style="color: #00007f; font-weight: bold">return</span> <span style="color: #007f7f">0</span>;

    ADDOP_JREL(c, SETUP_LOOP, end);
    compiler_use_next_block(c, loop);
    <span style="color: #00007f; font-weight: bold">if</span> (!compiler_push_fblock(c, LOOP, loop))
        <span style="color: #00007f; font-weight: bold">return</span> <span style="color: #007f7f">0</span>;
    <span style="color: #00007f; font-weight: bold">if</span> (constant == -<span style="color: #007f7f">1</span>) {
        VISIT(c, expr, s-&gt;v.Until.test);
        ADDOP_JABS(c, POP_JUMP_IF_TRUE, anchor);
    }
    VISIT_SEQ(c, stmt, s-&gt;v.Until.body);
    ADDOP_JABS(c, JUMP_ABSOLUTE, loop);

    <span style="color: #00007f; font-weight: bold">if</span> (constant == -<span style="color: #007f7f">1</span>) {
        compiler_use_next_block(c, anchor);
        ADDOP(c, POP_BLOCK);
    }
    compiler_pop_fblock(c, LOOP, loop);
    compiler_use_next_block(c, end);

    <span style="color: #00007f; font-weight: bold">return</span> <span style="color: #007f7f">1</span>;
}
</pre>
</div>
<p>I have a confession to make: this code wasn&#8217;t written based on a deep understanding of Python bytecode. Like the rest of the article, it was done in imitation of the kin <tt class="docutils literal"><span class="pre">compiler_while</span></tt> function. By reading it carefully, however, keeping in mind that the Python VM is stack-based, and glancing into the documentation of the <tt class="docutils literal"><span class="pre">dis</span></tt> module, which has <a class="reference external" href="http://docs.python.org/py3k/library/dis.html">a list of Python bytecodes</a> with descriptions, it&#8217;s possible to understand what&#8217;s going on.</p>
</div>
<div class="section" id="that-s-it-we-re-done-aren-t-we">
<h3>That&#8217;s it, we&#8217;re done&#8230; Aren&#8217;t we?</h3>
<p>After making all the changes and running <tt class="docutils literal"><span class="pre">make</span></tt>, we can run the newly compiled Python and try our new <tt class="docutils literal"><span class="pre">until</span></tt> statement:</p>
<div class="highlight">
<pre>&gt;&gt;&gt; until num == <span style="color: #007f7f">0</span>:
...   <span style="color: #00007f; font-weight: bold">print</span>(num)
...   num -= <span style="color: #007f7f">1</span>
...
<span style="color: #007f7f">3</span>
<span style="color: #007f7f">2</span>
<span style="color: #007f7f">1</span>
</pre>
</div>
<p>Voila, it works! Let&#8217;s see the bytecode created for the new statement by using the <tt class="docutils literal"><span class="pre">dis</span></tt> module as follows:</p>
<div class="highlight">
<pre><span style="color: #00007f; font-weight: bold">import</span> <span style="color: #00007f">dis</span>

<span style="color: #00007f; font-weight: bold">def</span> <span style="color: #00007f">myfoo</span>(num):
    until num == <span style="color: #007f7f">0</span>:
        <span style="color: #00007f; font-weight: bold">print</span>(num)
        num -= <span style="color: #007f7f">1</span>

dis.dis(myfoo)
</pre>
</div>
<p>Here&#8217;s the result:</p>
<div class="highlight">
<pre>4           0 SETUP_LOOP              36 (to 39)
      &gt;&gt;    3 LOAD_FAST                0 (num)
            6 LOAD_CONST               1 (0)
            9 COMPARE_OP               2 (==)
           12 POP_JUMP_IF_TRUE        38

5          15 LOAD_NAME                0 (print)
           18 LOAD_FAST                0 (num)
           21 CALL_FUNCTION            1
           24 POP_TOP

6          25 LOAD_FAST                0 (num)
           28 LOAD_CONST               2 (1)
           31 INPLACE_SUBTRACT
           32 STORE_FAST               0 (num)
           35 JUMP_ABSOLUTE            3
      &gt;&gt;   38 POP_BLOCK
      &gt;&gt;   39 LOAD_CONST               0 (None)
           42 RETURN_VALUE
</pre>
</div>
<p>The most interesting operation is number 12: if the condition is true, we jump to after the loop. This is correct semantics for <tt class="docutils literal"><span class="pre">until</span></tt>. If the jump isn&#8217;t executed, the loop body keeps running until it jumps back to the condition at operation 35.</p>
<p>Feeling good about my change, I then tried running the function (executing <tt class="docutils literal"><span class="pre">myfoo(3)</span></tt>) instead of showing its bytecode. The result was less than encouraging:</p>
<div class="highlight">
<pre>Traceback (most recent call last):
  File &quot;zy.py&quot;, line 9, in &lt;module&gt;
    myfoo(3)
  File &quot;zy.py&quot;, line 5, in myfoo
    print(num)
SystemError: no locals when loading &#39;print&#39;
</pre>
</div>
<p>Whoa&#8230; this can&#8217;t be good. So what went wrong?</p>
</div>
<div class="section" id="the-case-of-the-missing-symbol-table">
<h3>The case of the missing symbol table</h3>
<p>One of the steps the Python compiler performs when compiling the AST is create a symbol table for the code it compiles. The call to <tt class="docutils literal"><span class="pre">PySymtable_Build</span></tt> in <tt class="docutils literal"><span class="pre">PyAST_Compile</span></tt> calls into the symbol table module (<tt class="docutils literal"><span class="pre">Python/symtable.c</span></tt>), which walks the AST in a manner similar to the code generation functions. Having a symbol table for each scope helps the compiler figure out some key information, such as which variables are global and which are local to a scope.</p>
<p>To fix the problem, we have to modify the <tt class="docutils literal"><span class="pre">symtable_visit_stmt</span></tt> function in <tt class="docutils literal"><span class="pre">Python/symtable.c</span></tt>, adding code for handling <tt class="docutils literal"><span class="pre">until</span></tt> statements, after the similar code for <tt class="docutils literal"><span class="pre">while</span></tt> statements <a class="footnote-reference" href="#id6" id="id3">[3]</a>:</p>
<div class="highlight">
<pre><span style="color: #00007f; font-weight: bold">case</span> While_kind:
    VISIT(st, expr, s-&gt;v.While.test);
    VISIT_SEQ(st, stmt, s-&gt;v.While.body);
    <span style="color: #00007f; font-weight: bold">if</span> (s-&gt;v.While.orelse)
        VISIT_SEQ(st, stmt, s-&gt;v.While.orelse);
    <span style="color: #00007f; font-weight: bold">break</span>;
<span style="color: #00007f; font-weight: bold">case</span> Until_kind:
    VISIT(st, expr, s-&gt;v.Until.test);
    VISIT_SEQ(st, stmt, s-&gt;v.Until.body);
    <span style="color: #00007f; font-weight: bold">break</span>;
</pre>
</div>
<p>And now we really are done. Compiling the source after this change makes the execution of <tt class="docutils literal"><span class="pre">myfoo(3)</span></tt> work as expected.</p>
</div>
<div class="section" id="conclusion">
<h3>Conclusion</h3>
<p>In this article I&#8217;ve demonstrated how to add a new statement to Python. Albeit requiring quite a bit of tinkering in the code of the Python compiler, the change wasn&#8217;t difficult to implement, because I used a similar and existing statement as a guideline.</p>
<p>The Python compiler is a sophisticated chunk of software, and I don&#8217;t claim being an expert in it. However, I am really interested in the internals of Python, and particularly its front-end. Therefore, I found this exercise a very useful companion to theoretical study of the compiler&#8217;s principles and source code. It will serve as a base for future articles that will get deeper into the compiler.</p>
</div>
<div class="section" id="references">
<h3>References</h3>
<p>I used a few excellent references for the construction of this article. Here they are, in no particular order:</p>
<ul class="simple">
<li><a class="reference external" href="http://www.python.org/dev/peps/pep-0339/">PEP 339: Design of the CPython compiler</a> &#8211; probably the most important and comprehensive piece of <em>official</em> documentation for the Python compiler. Being very short, it painfully displays the scarcity of good documentation of the internals of Python.</li>
<li>&quot;Python Compiler Internals&quot; &#8211; an article by Thomas Lee</li>
<li>&quot;Python: Design and Implementation&quot; &#8211; a presentation by Guido van Rossum</li>
<li>Python (2.5) Virtual Machine, A guided tour &#8211; a presentation by Peter Tröger</li>
</ul>
<div align="center" class="align-center"><img alt="http://eli.thegreenplace.net/wp-content/uploads/hline.jpg" class="align-center" src="http://eli.thegreenplace.net/wp-content/uploads/hline.jpg" style="width: 320px; height: 5px;" /></div>
<table class="docutils footnote" frame="void" id="id4" rules="none">
<colgroup>
<col class="label" />
<col /></colgroup>
<tbody valign="top">
<tr>
<td class="label"><a class="fn-backref" href="#id1">[1]</a></td>
<td>From here on, references to files in the Python source are given relatively to the root of the source tree, which is the directory where you run <tt class="docutils literal"><span class="pre">configure</span></tt> and <tt class="docutils literal"><span class="pre">make</span></tt> to build Python.</td>
</tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id5" rules="none">
<colgroup>
<col class="label" />
<col /></colgroup>
<tbody valign="top">
<tr>
<td class="label"><a class="fn-backref" href="#id2">[2]</a></td>
<td>This demonstrates a common technique I use when modifying source code I&#8217;m not familiar with: <em>work by similarity</em>. This principle won&#8217;t solve all your problems, but it can definitely ease the process. Since everything that has to be done for <tt class="docutils literal"><span class="pre">while</span></tt> also has to be done for <tt class="docutils literal"><span class="pre">until</span></tt>, it serves as a pretty good guideline.</td>
</tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id6" rules="none">
<colgroup>
<col class="label" />
<col /></colgroup>
<tbody valign="top">
<tr>
<td class="label"><a class="fn-backref" href="#id3">[3]</a></td>
<td>By the way, without this code there&#8217;s a compiler warning for <tt class="docutils literal"><span class="pre">Python/symtable.c</span></tt>. The compiler notices that the <tt class="docutils literal"><span class="pre">Until_kind</span></tt> enumeration value isn&#8217;t handled in the switch statement of <tt class="docutils literal"><span class="pre">symtable_visit_stmt</span></tt> and complains. It&#8217;s always important to check for compiler warnings!</td>
</tr>
</tbody>
</table>
</div>
<p>Related posts:</p><ol>
<li><a href='http://eli.thegreenplace.net/2009/11/28/python-internals-working-with-python-asts/' rel='bookmark' title='Python internals: Working with Python ASTs'>Python internals: Working with Python ASTs</a></li>
<li><a href='http://eli.thegreenplace.net/2012/02/03/adventures-in-parsing-c-asts-for-switch-statements/' rel='bookmark' title='Adventures in parsing C: ASTs for switch statements'>Adventures in parsing C: ASTs for switch statements</a></li>
<li><a href='http://eli.thegreenplace.net/2010/09/18/python-internals-symbol-tables-part-1/' rel='bookmark' title='Python internals: Symbol tables, part 1'>Python internals: Symbol tables, part 1</a></li>
<li><a href='http://eli.thegreenplace.net/2012/03/23/python-internals-how-callables-work/' rel='bookmark' title='Python internals: how callables work'>Python internals: how callables work</a></li>
<li><a href='http://eli.thegreenplace.net/2010/09/20/python-internals-symbol-tables-part-2/' rel='bookmark' title='Python internals: Symbol tables, part 2'>Python internals: Symbol tables, part 2</a></li>
</ol>	
					
				<p class="postmetadata alt">
					<small>
						This entry was posted
						on Wednesday, June 30th, 2010 at 19:18						and is filed under <a href="http://eli.thegreenplace.net/category/articles/" title="View all posts in Articles" rel="category tag">Articles</a>, <a href="http://eli.thegreenplace.net/category/programming/python/" title="View all posts in Python" rel="category tag">Python</a>, <a href="http://eli.thegreenplace.net/category/programming/python/python-internals/" title="View all posts in Python internals" rel="category tag">Python internals</a>.
						You can follow any responses to this entry through the <a href='http://eli.thegreenplace.net/2010/06/30/python-internals-adding-a-new-statement-to-python/feed/'>RSS 2.0</a> feed. 
						
													You can skip to the end and leave a response. Pinging is currently not allowed.
			
												
					</small>
				</p>
	
			</div>
		</div>
		
	
<!-- You can start editing here. -->


	<h3 id="comments">37 Responses to &#8220;Python internals: adding a new statement to Python&#8221;</h3> 

	<ol class="commentlist">

	
		<li class="alt" id="comment-291569">
			<cite><a href='http://www.protocolostomy.com' rel='external nofollow'>Brian K. Jones</a><a href='http://www.protocolostomy.com' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/73cc2773e1aab4cf163c61d4ec9d6eba?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291569" title="">June 30th, 2010 at 20:34</a> </small>

			<p>Fantastic. Well done. I hope more people with experience in these kinds of things will use this post as a template for writing more posts that expose more of the Python internals. Maybe by the end of the year I&#8217;ll actually feel confident about becoming a contributor myself! </p>
<p>Thanks for this.</p>

		</li>

	
	
		<li class="" id="comment-291573">
			<cite><a href='http://yorksamerica.blogspot.com/' rel='external nofollow'>Steve Holden</a><a href='http://yorksamerica.blogspot.com/' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/2c69ccb9eb83c7ef2ba155a850df68a9?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291573" title="">June 30th, 2010 at 21:04</a> </small>

			<p>This is an excellent piece of work, Eli, and I hope you will consent to its becoming a part of the official Python documentation (along with other similarly worthy things you may write). As Brian has already indicated it&#8217;s this kind of low-level practical detail that helps people realise you don&#8217;t need to be a &#8220;software superman&#8221; to help make Python better (and I appreciate your acknowledgment that an &#8220;until&#8221; statement would be anti-pythonic).</p>
<p>Now if you could find a suitable syntax for the loop-and-a-half <a href="http://www.cs.duke.edu/~ola/patterns/plopd/loops.html#loop-and-a-half" rel="nofollow">http://www.cs.duke.edu/~ola/patterns/plopd/loops.html#loop-and-a-half</a> that *would* be worth implementing!</p>

		</li>

	
	
		<li class="alt" id="comment-291582">
			<cite>eliben<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/fc761ccaf6c0d7d977e2959f9bfebd06?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291582" title="">June 30th, 2010 at 21:13</a> </small>

			<p>@Brian,</p>
<p>Glad you like it, thanks for the feedback.</p>
<p>@Steve,</p>
<p>Of course I consent &#8211; any idea where in the documentation such material could be incorporated?</p>
<p>By the way, that&#8217;s a great link on loop patterns &#8211; I&#8217;m adding it to my to-read list <img src='http://eli.thegreenplace.net/wp-includes/images/smilies/icon_smile.gif' alt=':-)' class='wp-smiley' /> </p>

		</li>

	
	
		<li class="" id="comment-291600">
			<cite><a href='http://jackdied.blogspot.com/' rel='external nofollow'>Jack Diederich</a><a href='http://jackdied.blogspot.com/' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/21749c9e4dedf766d051b815cd4a3b71?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291600" title="">June 30th, 2010 at 21:58</a> </small>

			<p>PEP 306: How to Change Python&#8217;s Grammar<br />
<a href="http://python.org/dev/peps/pep-0306/" rel="nofollow">http://python.org/dev/peps/pep-0306/</a></p>
<p>It is usually out of date, but still handy.</p>

		</li>

	
	
		<li class="alt" id="comment-291601">
			<cite><a href='http://aroberge.blogspot.com' rel='external nofollow'>André Roberge</a><a href='http://aroberge.blogspot.com' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/ca465da45735c9efed28478928fa9fbe?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291601" title="">June 30th, 2010 at 22:02</a> </small>

			<p>This is one of the most interesting and informative posts I have read in a long time.  Well done.</p>

		</li>

	
	
		<li class="" id="comment-291665">
			<cite>Yerko<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/06b756cd5b39b18bf0e39deee56f681e?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291665" title="">July 1st, 2010 at 02:48</a> </small>

			<p>This is against the Zen of Python<br />
&#8220;There should be one&#8211; and preferably ONLY ONE &#8211;obvious way to do it.&#8221;<br />
while not &#8230;  is ok, and &#8220;until&#8221; stament is redundant</p>
<p>ruby sucks, so dont try to copy that xD</p>
<p>despite that, good work <img src='http://eli.thegreenplace.net/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>

		</li>

	
	
		<li class="alt" id="comment-291708">
			<cite><a href='http://www.vmmenon.org' rel='external nofollow'>Vinay</a><a href='http://www.vmmenon.org' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/2dadc896382e29d25ad75c0e8f91e52b?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291708" title="">July 1st, 2010 at 07:27</a> </small>

			<p>Fantastic !!</p>

		</li>

	
	
		<li class="" id="comment-291719">
			<cite>joeuser<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/74800555ffe4c9e090a01a6f34aa26dd?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291719" title="">July 1st, 2010 at 08:21</a> </small>

			<p>Just a short question, is this specific to Python 3, or does it work with any version ?<br />
(did they make changes to the scanner/parser/etc &#8211; combo ?)</p>

		</li>

	
	
		<li class="alt" id="comment-291726">
			<cite>RDRush<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/39c72569abace3705cfaab61cf594d0b?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291726" title="">July 1st, 2010 at 08:41</a> </small>

			<p>You are a very sick individual &#8212; good job!</p>
<p>I have been slightly touched by the grammar of Ruby and have always been attracted to Python. This article is an articulation that has been missing in my existence with these language sets for some time. I had actually thought about how excellent a language would be that encapsulated the essence of both and here you go&#8230;</p>
<p>Thanks for your time and effort &#8212; you really helped bury a question that I, as well as many others, have had lingering for some time due to our ignorance to these topics.</p>
<p>Compiler development is a serious endeavor and one you atomized quite efficiently, especially where byte code is concerned.</p>
<p>Do-while; if-else, OOP/OOD style where &#8216;until&#8217; is interpreter style giving Python the best of both worlds. Use the interpreted for straight through and climb into objects as needed in sidebar fashion. This type of development is very inspiring&#8230;</p>

		</li>

	
	
		<li class="" id="comment-291727">
			<cite><a href='http://hcalves.posterous.com' rel='external nofollow'>Henrique</a><a href='http://hcalves.posterous.com' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/667bd007bac994a1441386ac4d2beb2b?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291727" title="">July 1st, 2010 at 08:44</a> </small>

			<p>Interesting, not something I would take time to try doing. Gives some insight on how the grammar is defined and how VM works.</p>
<p>Now, what about you trying do the same (bend the grammar), but this time from Python itself, in runtime. Is that possible? If so, how far can you stretch it? <img src='http://eli.thegreenplace.net/wp-includes/images/smilies/icon_wink.gif' alt=';)' class='wp-smiley' /> </p>

		</li>

	
	
		<li class="alt" id="comment-291735">
			<cite>Oz<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/c88d06e54e6906b74c4ff584cc83de43?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291735" title="">July 1st, 2010 at 09:39</a> </small>

			<p>Excellent and interesting article. Thank you.</p>
<p>Similar article about Common Lisp would be short:</p>
<div class="backtick"><pre><code>(defmacro until (condition &amp;body body)
  &#96;(loop until ,condition do (progn ,@body)))</code></pre></div>
<p>Or more low-level:</p>
<div class="backtick"><pre><code>(defmacro until (condition &amp;body body)
  (let ((start (gensym))
        (end (gensym)))
    &#96;(tagbody
        ,start
        (if ,condition
            (go ,end)
            (progn ,@body (go ,start)))
        ,end)))</code></pre></div>
<p>And now there is:</p>
<div class="backtick"><pre><code>(until condition
  ;; do stuff
  )</code></pre></div>

		</li>

	
	
		<li class="" id="comment-291749">
			<cite>JSC42<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/eaf462efad6ba42f25c4e0a65d1662bf?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291749" title="">July 1st, 2010 at 11:12</a> </small>

			<p>Back in the late 1970s, I wrote an n+1/2 loop construct (c.f. Steve Holden&#8217;s link to a loop-and-a-half construct) for a rationalised front-end preprocessor for a BASIC interpretter. In those days, BASICs didn&#8217;t have any loops except for FOR. The syntax that I used was:<br />
<code class="backtick">LOOP<br />
   {stmt block}<br />
[ EXITIF {condition}<br />
   {stmt block}<br />
] &#46;&#46;&#46;<br />
ENDLOOP</code><br />
Note: you can have multiple EXITIF<br />
This could emulate all common types of loop<br />
e.g. (using BASIC syntax)<br />
<code class="backtick">FOR cv = start TO end STEP step<br />
   {stmt block}<br />
NEXT</code><br />
would become<br />
<code class="backtick">cv = start<br />
LOOP<br />
EXITIF cv &gt; end<br />
   {stmt block}<br />
ENDLOOP</code></p>
<p>a &#8216;while&#8217; loop (not in the target language) would be<br />
<code class="backtick">LOOP<br />
EXITIF NOT condition<br />
   {stmt block}<br />
ENDLOOP</code><br />
(I later added an EXITIFNOT variant)</p>
<p>an &#8216;until&#8217; loop (not in the target language) would be<br />
<code class="backtick">LOOP<br />
EXITIF condition<br />
   {stmt block}<br />
ENDLOOP</code></p>
<p>a &#8216;do-while&#8217; loop (execute at least once) would be<br />
<code class="backtick">LOOP<br />
   {stmt block}<br />
EXITIFNOT {condition}<br />
ENDLOOP</code></p>
<p>The reason that I started on n+1/2 loops was because I was working on the PASCAL P-code compiler which used the following constructs in many places (I have forgotten PASCAL syntax but the following is close enough):<br />
<code class="backtick">do<br />
   {stmt block 1};<br />
   test = {condition};<br />
   if test<br />
   then<br />
      {stmt block 2}<br />
until test</code><br />
which uses an intermediate value for the termination condition and checks it twice. Using &#8216;my&#8217; syntax, this would be<br />
<code class="backtick">LOOP<br />
   {stmt block 1}<br />
EXITIFNOT {condition}<br />
   {stmt block 2}<br />
ENDLOOP</code></p>
<p>When I started paid work in 1980, I was writing in Fortran IV (another unstructured language), so I wrote a rationaliser for that as well using the same syntax.</p>

		</li>

	
	
		<li class="alt" id="comment-291751">
			<cite>JSC42<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/eaf462efad6ba42f25c4e0a65d1662bf?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291751" title="">July 1st, 2010 at 11:15</a> </small>

			<p>OOPS error in my post</p>
<div class="backtick"><pre><code>FOR cv = start TO end STEP step
{stmt block}
NEXT</code></pre></div>
<p>should become<br />
<code class="backtick">cv = start<br />
LOOP<br />
EXITIF cv &gt; end<br />
{stmt block}<br />
cv = cv + step<br />
ENDLOOP</code></p>

		</li>

	
	
		<li class="" id="comment-291763">
			<cite>Tiklu Ganguly<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/8c453a9432a10e5238e2446000e12ea8?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291763" title="">July 1st, 2010 at 12:34</a> </small>

			<p>Fantastic post. Will be trying this at home today <img src='http://eli.thegreenplace.net/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>

		</li>

	
	
		<li class="alt" id="comment-291789">
			<cite>eliben<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/fc761ccaf6c0d7d977e2959f9bfebd06?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291789" title="">July 1st, 2010 at 16:58</a> </small>

			<p>@Yerko &#038; RDRush,</p>
<p>Just to point out once again &#8211; I&#8217;m not really proposing adding <code class="backtick">until</code> to Python. This is just an exercise, and <code class="backtick">until</code> is the first thing that sprang to mind.</p>

		</li>

	
	
		<li class="" id="comment-291811">
			<cite><a href='http://www.algorithm.co.il/blogs/' rel='external nofollow'>lorg</a><a href='http://www.algorithm.co.il/blogs/' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/401a03ddfea9690af543101521b3745f?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291811" title="">July 1st, 2010 at 18:09</a> </small>

			<p>Excellent article!<br />
I especially like how it can be used as a future reference &#8220;howto&#8221; document for adding statements.</p>
<p>Keep up the good work!</p>

		</li>

	
	
		<li class="alt" id="comment-291848">
			<cite><a href='http://regebro.wordpress.com' rel='external nofollow'>Lennart Regebro</a><a href='http://regebro.wordpress.com' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291848" title="">July 1st, 2010 at 22:12</a> </small>

			<p>Minimalism is good, but the amount of times I need an until loop, and end up with the <code class="backtick">while True:</code> hack is not insignificant. I really wish Python would have an &#8220;loop and a half&#8221; statement, it&#8217;s IMO the major misfeature of Python. And I propose that &#8220;until&#8221; is an excellent name and syntax for that statement. <img src='http://eli.thegreenplace.net/wp-includes/images/smilies/icon_smile.gif' alt=':-)' class='wp-smiley' /> </p>

		</li>

	
	
		<li class="" id="comment-291897">
			<cite><a href='http://jackdied.blogspot.com/' rel='external nofollow'>Jack Diederich</a><a href='http://jackdied.blogspot.com/' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/21749c9e4dedf766d051b815cd4a3b71?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-291897" title="">July 2nd, 2010 at 04:24</a> </small>

			<p>@joeuser Most patches to 3.x grammar/bytecode loop will apply cleanly to 2.x.  The big changes to Python&#8217;s AST (Abstract Syntax Tree) and going fully 64-bit happened for the 2.5 release. Python 3.x is a fork of that.  I had to rewrite my class decorator patch for 2.5 and I was finally allowed to check it in for 2.6 (yay!).</p>
<p>Of course if you are dealing with str/unicode the differences between 2.x and 3.x can be large.  This doesn&#8217;t impact the grammar/bytecode much but it does effect many modules.</p>

		</li>

	
	
		<li class="alt" id="comment-292030">
			<cite>namerequired<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/01073078daccb6993d3a9b3915cfd24b?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-292030" title="">July 2nd, 2010 at 14:54</a> </small>

			<p>until is ultimately confusing</p>
<p>if you want an inversed do&#8230;while inverse the abort condition. not the statement.</p>

		</li>

	
	
		<li class="" id="comment-292081">
			<cite><a href='http://yorksamerica.blogspot.com/' rel='external nofollow'>Steve Holden</a><a href='http://yorksamerica.blogspot.com/' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/2c69ccb9eb83c7ef2ba155a850df68a9?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-292081" title="">July 2nd, 2010 at 19:00</a> </small>

			<p>I have just suggested on python-dev that it be put under python.org/dev/ somewhere. I think that&#8217;s where it really belongs &#8211; I have a larger concept of &#8220;docs&#8221; than some, I guess &#8211; didn&#8217;t mean docs.python.org. Sorry. Let&#8217;s see what the devs say.</p>

		</li>

	
	
		<li class="alt" id="comment-292083">
			<cite>Nick Coghlan<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/f3ba3ecffd20251d73749afbfa636786?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-292083" title="">July 2nd, 2010 at 19:10</a> </small>

			<p>I was going to mention PEP 306 as well, but Jack beat me to it.</p>
<p>@Lennart: if you can find a solution to PEP 315 that is genuinely superior to the fully general loops already provided by &#8220;while True:&#8221; you will likely find plenty of supporters. Perceptions differ as to how much of a hack people consider the current solution to be though, so be prepared for an argument if you volunteer to take another crack at it <img src='http://eli.thegreenplace.net/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>

		</li>

	
	
		<li class="" id="comment-292110">
			<cite>Mark Dickinson<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/c49652c88a43a35bbf0095abfdae3515?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-292110" title="">July 2nd, 2010 at 20:31</a> </small>

			<p>Very nice.  Don&#8217;t forget to update the parser module too, though!  (Though it&#8217;s not clear if anyone cares about the parser module any more;  AST is much nicer to work with.)</p>

		</li>

	
	
		<li class="alt" id="comment-292347">
			<cite><a href='http://regebro.wordpress.com' rel='external nofollow'>Lennart Regebro</a><a href='http://regebro.wordpress.com' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-292347" title="">July 3rd, 2010 at 12:38</a> </small>

			<p>@Nick Coghlan: Well, in my opinion, I *have* found a solution that is genuinely superior. Un &#8220;until&#8221; statement, which always runs the block once before the test. <img src='http://eli.thegreenplace.net/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' />  If that is not superior than &#8220;while True:&#8221; then why even have an expression in the while statement? You can replace<br />
<code class="backtick">while foo == bar:<br />
   do_something()</code><br />
with<br />
<code class="backtick">while True:<br />
   if foo != bar:<br />
     break<br />
   do_something()</code><br />
as well. Is that superior?</p>

		</li>

	
	
		<li class="" id="comment-464773">
			<cite><a href='http://abafei.blogspot.com' rel='external nofollow'>Abafei Software</a><a href='http://abafei.blogspot.com' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/fc91ff52337edf0d292c09b80ddbe76a?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-464773" title="">March 28th, 2011 at 08:09</a> </small>

			<p>Yasher Koach! Very fascinating read.</p>

		</li>

	
	
		<li class="alt" id="comment-464778">
			<cite><a href='http://abafei.blogspot.com' rel='external nofollow'>Abafei Software</a><a href='http://abafei.blogspot.com' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/fc91ff52337edf0d292c09b80ddbe76a?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-464778" title="">March 28th, 2011 at 08:13</a> </small>

			<p>@Henrique See <a href="http://code.activestate.com/recipes/576944-the-goto-decorator/" rel="nofollow">http://code.activestate.com/recipes/576944-the-goto-decorator/</a><br />
There a real <code class="backtick">goto</code> statement is emulated in pure Python.</p>

		</li>

	
	
		<li class="" id="comment-853193">
			<cite>Karthikeyan<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/720efbaca473a26cce7bf616cd0f354d?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-853193" title="">March 11th, 2012 at 21:41</a> </small>

			<p>Hi Eli,</p>
<p>    Thanks for the excellent article. I tried to follow the same procedure to build Python from source on Windows. Things worked out of the box without much changes.</p>
<p>However, I would like to point out a small change.</p>
<p>Inside the body of the following function,</p>
<p>static int<br />
compiler_until(struct compiler *c, stmt_ty s)</p>
<p>the second line is currently<br />
int constant = expr_constant(s-&gt;v.Until.test);</p>
<p>it must instead be<br />
int constant = expr_constant(c, s-&gt;v.Until.test); # this function needs the reference to the compiler as well</p>
<p>I&#8217;ve been following your blog all along and I am always delighted by your efforts to explain even the most intricate technical details.</p>
<p>Thanks a lot for sharing your experiences and Keep up the good work !!</p>

		</li>

	
	
		<li class="alt" id="comment-853790">
			<cite>eliben<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/fc761ccaf6c0d7d977e2959f9bfebd06?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-853790" title="">March 12th, 2012 at 07:47</a> </small>

			<p><b>Karthikeyan</b>,</p>
<p>Thanks for the correction.</p>

		</li>

	
	
		<li class="" id="comment-854596">
			<cite><a href='http://tomlee.co' rel='external nofollow'>Tom Lee</a><a href='http://tomlee.co' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/5988e631877b50c930f560cf0e6c8cd0?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-854596" title="">March 12th, 2012 at 22:07</a> </small>

			<p>Cheers for the attribution, Eli! Here&#8217;s a link to my original paper on the topic from an earlier Australian OSDC in case folks are interested:</p>
<p><a href="http://tomlee.co/wp-content/uploads/2008/12/python-language-internals.pdf" rel="nofollow">http://tomlee.co/wp-content/uploads/2008/12/python-language-internals.pdf</a></p>

		</li>

	
	
		<li class="alt" id="comment-902872">
			<cite><a href='http://--' rel='external nofollow'>Heli</a><a href='http://--' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/f2cc1bdaad81936ae973bf59c5fa70b9?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-902872" title="">May 19th, 2012 at 20:49</a> </small>

			<p>Hello this is a nice article, im from mexico and i need to translate some of the native statements of python  to spanish for a project at school. Im trying this method but fails &#8220;SystemError: invalid node 339 for PyAST_FromNode&#8221;, i don&#8217;t know if is there an easy way to do this, can you please help me??</p>

		</li>

	
	
		<li class="" id="comment-903008">
			<cite>eliben<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/fc761ccaf6c0d7d977e2959f9bfebd06?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-903008" title="">May 20th, 2012 at 03:14</a> </small>

			<p><b>Heli</b>,</p>
<p>There&#8217;s no &#8220;easy&#8221; way to do this without modifying the Python lexer &#038; parser. However, keep in mind that you probably don&#8217;t need to go as deep as this article went. Just change the lexer &#038; parser to recognize &#8220;mientras&#8221; instead of &#8220;while&#8221;, but keep all the rest the same (i.e. the node internally can still be &#8220;while&#8221; for CPython).</p>

		</li>

	
	
		<li class="alt" id="comment-946189">
			<cite><a href='http://EverET.org/' rel='external nofollow'>ET</a><a href='http://EverET.org/' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/dc6cf2e27adfc07241d7c534feb73375?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-946189" title="">July 20th, 2012 at 05:01</a> </small>

			<p>Fantastic!!!!! CPython is so cool~</p>

		</li>

	
	
		<li class="" id="comment-956667">
			<cite><a href='http://www.ibaiyang.org' rel='external nofollow'>baiyang</a><a href='http://www.ibaiyang.org' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/8e131f71d6e0abad66a475d51a696f0f?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-956667" title="">July 31st, 2012 at 09:38</a> </small>

			<p>It helps me look at insight of python. It&#8217;s very interesting. I hope you can write some articles about how to improve the speed of python, some tips.</p>

		</li>

	
	
		<li class="alt" id="comment-1069660">
			<cite>Adithya<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/46d912ecbeb082ae05d80270b7a69cad?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-1069660" title="">January 24th, 2013 at 06:32</a> </small>

			<p>Hi Eli,</p>
<p>Excellent article. I&#8217;m facing an issue with this implementation though. The &#8216;until&#8217; statement works fine in the global scope, but it gives an invalid syntax error when put inside a function. Do you know why that happens?</p>

		</li>

	
	
		<li class="" id="comment-1109259">
			<cite><a href='http://tomlee.co' rel='external nofollow'>Tom Lee</a><a href='http://tomlee.co' rel='external nofollow'><img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/a6b9e70ccc06e5cdf3b1224ff3980b9b?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-1109259" title="">March 15th, 2013 at 21:26</a> </small>

			<p>Hey Adithya,</p>
<p>The syntax error when you put this stuff inside a function relates to the (easy-to-overlook!) fact that you also need to make a change to the symtable pass.</p>
<p>See the symtable_visit_* functions in Python/symtable.c &#8212; specifically, symtable_visit_stmt &amp; the <code class="backtick">While_kind</code> case clause. Once you track that down, you should be able to figure out what you need to do in symtable.c for <code class="backtick">Until_kind</code>. <img src='http://eli.thegreenplace.net/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>
<p>(Or feel free to ping me &amp; I can elaborate, if Eli doesn&#8217;t beat me to it.)</p>
<p>Cheers,<br />
Tom</p>

		</li>

	
	
		<li class="alt" id="comment-1241314">
			<cite>skateboy<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/5312bc0abef71b26f32fccf6b08cf114?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-1241314" title="">September 26th, 2013 at 02:11</a> </small>

			<p>Very interesting article.<br />
However,I have tried several times &#8220;make&#8221; with </p>
<p>①&#8221;default&#8221; branch(which is 3k and committed at 16/09/2013) changeset: 85732:6b747ad4a99a<br />
②&#8221;2.7&#8243; branchchangeset:   85733:3d46ef0c62c5</p>
<p>but &#8220;NameError: name &#8216;until&#8217; is not defined&#8221; appears every time.<br />
Am I missing anything? </p>
<p>I intentionally change Grammer/Grammer to exclude &#8220;else&#8221; from while(like while_stmt: &#8216;while&#8217; test &#8216;:&#8217; suite) but I still could use while ~~ else ~~ after &#8220;make&#8221;.However,if I convert &#8220;while&#8221; and &#8220;until&#8221;,then &#8220;make&#8221; won&#8217;t make it.</p>

		</li>

	
	
		<li class="" id="comment-1241475">
			<cite>eliben<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/fc761ccaf6c0d7d977e2959f9bfebd06?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-1241475" title="">September 26th, 2013 at 05:44</a> </small>

			<p>@skateboy,</p>
<p>Note what section &#8220;A language-advocacy digression&#8221; says &#8211; I didn&#8217;t really add this to upstream Python; these changes were just made locally for the sake of the article.</p>

		</li>

	
	
		<li class="alt" id="comment-1242226">
			<cite>skateboy<img style='float: left; margin-right: 10px; border: none; display:inline;' src='http://www.gravatar.com/avatar/5312bc0abef71b26f32fccf6b08cf114?rating=X&amp;default=identicon' alt='No Gravatar' width=40 height=40/></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-1242226" title="">September 27th, 2013 at 03:46</a> </small>

			<p>@eliben,<br />
No,I totally understand your concept of this unique article.</p>
<p>I meant that I tried to follow your article and added sentences in Grammer/Grammer,Python/ast.c..etc accordingly,and &#8220;make&#8221;,and executed generated &#8220;./python&#8221;,but the interactive console said that &#8220;&#8216;until&#8217; is not defined&#8221;.</p>
<p>Maybe I have to do some more works in newer python&#8217;s?<br />
But referring to the official doc,it seems that above procedure is enough for adding statement as it does not change the token structures.  <a href="http://docs.python.org/devguide/grammar.html" rel="nofollow">http://docs.python.org/devguide/grammar.html</a></p>

		</li>

	
	
	</ol>

 


<h3 id="respond">Leave a Reply</h3>


<form action="http://eli.thegreenplace.net/wp-comments-post.php" method="post" id="commentform">


<p><input type="text" name="author" id="author" value="" size="22" tabindex="1" />
<label for="author"><small>Name (required)</small></label></p>

<p><input type="text" name="email" id="email" value="" size="22" tabindex="2" />
<label for="email"><small>Mail (will not be published) (required)</small></label></p>

<p><input type="text" name="url" id="url" value="" size="22" tabindex="3" />
<label for="url"><small>Website</small></label></p>


        <!--<span>Write the number 4 here (required)</span><br/>-->
    <p><input type="text" name="stupid-captcha" value="" tabindex="4"/> 
    <label for="stupid-captcha"><small>Write the number 4 here (required)</small></label></p>

<p><small>To post code with preserved formatting, enclose it in `backticks` (even multiple lines) </small></p>

<p><textarea name="comment" id="comment" cols="100%" rows="10" tabindex="5"></textarea></p>

<p><input name="submit" type="submit" id="submit" tabindex="5" value="Submit Comment" />
<input type="hidden" name="comment_post_ID" value="2231" />
</p>
<input name="afcp-preview" type="button" id="afcp-preview" tabindex="6" value="Preview" /><div id="ajax-force-comment-preview"></div><noscript><p><strong>Currently you have JavaScript disabled. In order to post comments, please make sure JavaScript is enabled, and reload the page.</strong></p></noscript><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="9f765331df" /></p>
</form>




	
		
	</div>

<hr />
<div id="footer">
	<p>
		Eli Bendersky&#039;s website is powered by 
		<a href="http://wordpress.org/">WordPress</a>
		<br /><a href="http://eli.thegreenplace.net/feed/">Entries (RSS)</a>
		and <a href="http://eli.thegreenplace.net/comments/feed/">Comments (RSS)</a>.
<!--	<br/><br/>
	Ads:
    <a href="http://www.behindthecounter.com/newegg-promo-code/">Newegg Promo Code</a>
-->
	</p>
</div>
</div>

<!-- Gorgeous design by Michael Heilemann - http://binarybonsai.com/kubrick/ -->

		</body>
</html>
