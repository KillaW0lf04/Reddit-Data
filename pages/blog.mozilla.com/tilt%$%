<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>  Tilt</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<meta name="keywords" content=" " /> <!-- enter a string of keywords that relate to your website inside the " " -->
<meta name="author" content=" " /><!-- enter your name inside the " "  -->
<meta name="description" content=" " /> <!-- enter site description inside the " "  -->
<link rel="stylesheet" href="http://blog.mozilla.org/tilt/wp-content/themes/gathering/style.css" type="text/css" media="screen" />
<link rel="alternate" type="application/rss+xml" title="Tilt RSS Feed" href="http://blog.mozilla.org/tilt/feed/" />
<link rel="pingback" href="http://blog.mozilla.org/tilt/xmlrpc.php" />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://blog.mozilla.org/tilt/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://blog.mozilla.org/tilt/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
            <script type="text/javascript">
            var _gaq = _gaq || [];
            _gaq.push(['_setAccount', 'UA-36116321-4']);
            _gaq.push(['_trackPageview']);

            (function() {
                var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
            })();
            </script>	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
</head>
<body>
<div id="outercontainer">
<div id="container">
<div id="header">
<h1><a href="http://blog.mozilla.org/tilt">Tilt</a></h1>
<h3>Just another Blog.mozilla.com site</h3>
</div>
<div id="menu">
<div id="menumain">
<ul>
</ul>
</div>
</div>
<div id="main" class="hfeed">
<div class="hentry post" id="post-291">
<div class="entry-content">
<h2 class="entry-title"><a href="http://blog.mozilla.org/tilt/2011/10/31/developer-oriented-features-and-experiments/" rel="bookmark" title="Permanent Link to Developer-oriented features and experiments">Developer-oriented features and experiments</a></h2>	
<p class="entry-date"><abbr class="published" title="2011-10-31T08:10:57">10.31.11 - 08:33am</abbr></p>
<p><em><strong>Tilt</strong> is a Firefox addon that lets you visualize any web page in 3D. A new update is available, coming with more developer-oriented features. Try the <a href="#availableasanaddon">addon</a>.</em></p>
<p><iframe width="500" height="375" src="http://www.youtube.com/embed/_7eG_PONHRw?feature=oembed" frameborder="0" allowfullscreen></iframe></p>
<p>Since the <a href="http://hacks.mozilla.org/2011/07/tilt-visualize-your-web-page-in-3d/">first alpha version of Tilt was announced</a> (a Firefox extension focused on creating a 3D visualization of a webpage), a lot of work has been done to add a great number of developer-oriented features. These focus on debugging the structure of a webpage, inspecting styling and attributes for each node and seamlessly refreshing the visualization when the DOM structure changes or after contents of document are repainted.</p>
<h2>Solve nesting problems</h2>
<p>Tilt is useful when searching problems in the HTML structure (like finding unclosed DIV elements for example) by providing the extra third dimension, layering each node based on nesting in the DOM tree. Stacks of elements visually represent branches in the DOM, and each node can be inspected for the inner HTML contents, its computed CSS style and the attributes.</p>
<p>Clicking anywhere on the visualization highlights a color-coded rectangle surrounding the corresponding node. Double click shows up the source preview for that node. Tilt also tries to show the most relevant information when needed (one is most likely to inspect the attributes of an input, button or image element, for example, but can easily switch between HTML, CSS and attributes view at any time).</p>
<p><a href="http://hacks.mozilla.org/wp-content/uploads/2011/10/tilt3d2.png"><img class="aligncenter size-full wp-image-9911" src="http://hacks.mozilla.org/wp-content/uploads/2011/10/tilt3d2.png" alt="" width="500" height="312" /></a></p>
<h2>Minidom map</h2>
<p>The “minidom” is a tree view representation showing a minimalistic snapshot of the document object model. Each node is assigned a color associated by tag name (blue for div, green for span etc.) and represented as a strip, along with visual markers for the id and/or class if available. Each one of these strips also has a width relative to the type, id and class name length for the respective element, and the corresponding 3D stack in the visualization has color-coded margins. The coloring for individual elements is easily changeable using the color picker near to the minidom legend.</p>
<p>Clicking a strip in the tree view (or directly a stack on the 3D document visualization mesh) also highlights the node with a colored quad. This behavior is a good way to relate with the Style Inspector, and a more unified interaction between Tilt and other Developer Tools is planned in the future. All of these additions make it easier to analyze the bounds of each node, along with the HTML, computed CSS and attributes.</p>
<h2>Realtime editing</h2>
<p>Because Tilt is able to detect when a webpage’s DOM structure changes or when a repaint is necessary, integration is seamless with existing Developer Tools. Using Tilt and Firebug or Style Editor at the same time is easy. One can enable or disable CSS properties, changing the style of a node, and the visualization changes accordingly.</p>
<p><iframe width="500" height="375" src="http://www.youtube.com/embed/ae1p5W20Ug8?feature=oembed" frameborder="0" allowfullscreen></iframe></p>
<p><em>To enable realtime updates for the 3D webpage, go to the Options menu and check “Refresh visualization”.</em></p>
<h2>Useful for learning</h2>
<p>Developer tools such as &#8220;view source&#8221; have always been used to help people learn about web development. The 3D view highlights the structure of a page better than a flat view, thus anyone can immediately understand the parent-child relationship between nodes in a webpage, their positioning and how the layout is influenced.</p>
<p>One use case for this is the Hackasaurus mashup. The <a href="http://hackasaurus.org/goggles/" target="_blank">X-Ray Goggles</a> is a nice and fun tool designed to make it easier to learn about the different document node types, the “building blocks” which create a webpage.</p>
<h2>Export</h2>
<p>A requested feature was the ability to export the visualization as a 3D mesh, to be used in games or other 3D editors. Tilt adds the ability to export to <em>.obj</em>, along with a material <em>.mtl</em> file and a <em>.png</em> texture (a screenshot of the entire webpage). The open <em>.obj</em> format ensures the fact that the mesh can be opened with almost any editor. Here’s a ray-traced rendering of <a href="http://hacks.mozilla.org/2011/07/tilt-visualize-your-web-page-in-3d/" target="_blank">hacks.mozilla.org</a> in <a href="http://www.blender.org/" target="_blank">Blender</a>:</p>
<p><a href="http://hacks.mozilla.org/wp-content/uploads/2011/10/tilt3d3.png"><img class="aligncenter size-full wp-image-9927" src="http://hacks.mozilla.org/wp-content/uploads/2011/10/tilt3d3.png" alt="" width="500" height="305" /></a></p>
<h2>Fun with experiments</h2>
<p>As soon as it was released, many people found clever and interesting alternative ways to interact with Tilt. One experiment was creating a 3D visualization of an image, by exporting chunks of pixels to a HTML representation. The result was a voxel-like representation, with node blocks and stacks instead of pixels. A simple <a href="http://tinyurl.com/Img2Tilt" target="_blank">Image2Tilt converter</a> was written in JavaScript, and you can try it directly in the browser.</p>
<p><iframe width="500" height="375" src="http://www.youtube.com/embed/7YXq4gylERE?feature=oembed" frameborder="0" allowfullscreen></iframe></p>
<p>Accelerometer support was another addition based on community request. This shows how easy it is to add functionality that wasn’t originally planned.</p>
<p><iframe width="500" height="281" src="http://www.youtube.com/embed/rbTLwVEfPn0?feature=oembed" frameborder="0" allowfullscreen></iframe></p>
<p>You can view the source code, fork it and also contribute to the addon with ideas or feature requests on Github, at <a href="https://github.com/victorporof/Tilt" target="_blank">github.com/victorporof/Tilt</a>.</p>
<h2><a name="availableasanaddon"></a>Available as an addon</h2>
<p>The latest version of <a href="https://github.com/victorporof/Tilt/raw/master/bin/Tilt.xpi" target="_blank">Tilt</a> can be found on <a href="https://github.com/victorporof/Tilt/raw/master/bin/Tilt.xpi" target="_blank">Github</a>, but you can also download Tilt as an <a href="https://addons.mozilla.org/en-US/firefox/addon/tilt/" target="_blank">addon from addons.mozilla.org</a>.</p>
<p>For compatibility, Tilt requires WebGL capabilities. Go to <a href="http://get.webgl.org/" target="_blank">get.webgl.org</a> to check availability and troubleshoot any issues. The current version works with Firefox 6.0 to latest <a href="http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-trunk/" target="_blank">10.0 Nightly releases</a> (latest Nightly builds now also support WebGL anti-aliasing, working great with Tilt).</p>
<p>To start Tilt, hit <em>Control+Shift+M</em> (or <em>Command+Shift+M</em> if you&#8217;re on Mac OS), or go to <strong>Web Developer -&gt; Tilt</strong>, available in the Firefox application menu (or the Tools menu on Mac OS). You can modify this hotkey (and other properties) from the Options menu after starting Tilt.</p>
<p>More information about Tilt, the development process and milestone updates can be found on <a href="http://blog.mozilla.org/tilt">blog.mozilla.org/tilt</a>.</p>
<h2>Future</h2>
<p>Tilt has become an active Developer Tools project, and an ongoing effort is made to integrate it with other existing tools like Style Inspector and Style Editor (<a href="https://github.com/neonux/StyleEditor" target="_blank">source code</a> and <a href="http://neonux.com/StyleEditor/builds/" target="_blank">latest builds</a>). As the 3D view of a webpage has proven to be useful for debugging, this main functionality will gradually become part of Firefox in future releases.</p>
<p class="entry-meta"> Category: <a href="http://blog.mozilla.org/tilt/category/progress/" title="View all posts in Progress" rel="category tag">Progress</a> | Tags: <a href="http://blog.mozilla.org/tilt/tag/3d/" rel="tag">3d</a>, <a href="http://blog.mozilla.org/tilt/tag/addon/" rel="tag">addon</a>, <a href="http://blog.mozilla.org/tilt/tag/dom/" rel="tag">dom</a>, <a href="http://blog.mozilla.org/tilt/tag/extension/" rel="tag">extension</a>, <a href="http://blog.mozilla.org/tilt/tag/firefox/" rel="tag">firefox</a>, <a href="http://blog.mozilla.org/tilt/tag/mozilla/" rel="tag">mozilla</a>, <a href="http://blog.mozilla.org/tilt/tag/tilt/" rel="tag">tilt</a>, <a href="http://blog.mozilla.org/tilt/tag/visualization/" rel="tag">visualization</a>, <a href="http://blog.mozilla.org/tilt/tag/webgl/" rel="tag">webgl</a> | <a href="http://blog.mozilla.org/tilt/2011/10/31/developer-oriented-features-and-experiments/#comments" title="Comment on Developer-oriented features and experiments">8 Comments &#187;</a></p>
</div>
</div>
<div class="hentry post" id="post-260">
<div class="entry-content">
<h2 class="entry-title"><a href="http://blog.mozilla.org/tilt/2011/09/01/version-0-82-released/" rel="bookmark" title="Permanent Link to Version 0.82 released">Version 0.82 released</a></h2>	
<p class="entry-date"><abbr class="published" title="2011-09-01T05:09:46">09.01.11 - 05:06am</abbr></p>
<p style="text-align: left;">Download: <a href="https://github.com/victorporof/Tilt/raw/master/bin/Tilt.xpi" target="_blank">Tilt.xpi</a><br />
August was a busy month. Tilt development was focused on finishing the user interface and adding an improved user experience. We also added more developer-oriented features and functionality.</p>
<p><a href="http://blog.mozilla.org/tilt/files/2011/08/1.png"><img class="size-full wp-image-261" title="Tilt, version 0.82" src="http://blog.mozilla.org/tilt/files/2011/08/1.png" alt="" width="573" height="379" /></a></p>
<p>The most interesting addition was the &#8220;minidom&#8221; — a tree view representation in the lower left, showing a minimalistic snapshot of the document object model of a webpage. Each node is assigned a color associated by tag name (blue for div, green for span etc.) and represented as a strip, along with visual markers for it’s id and/or class if available. Each one of these strips also has a width relative to the type, id and class name length for the respective element. The coloring for individual elements is easily changeable using a color picker.</p>
<p>Clicking a strip in the tree view (or directly a node on the 3D document visualization mesh) now also highlights the node with a colored quad. This behavior is a good way to relate with the Style Inspector, and a more unified interaction between them is planned in the future (along with other developer tools like Style Editor).</p>
<p>All of these additions make it easier to analyze the bounds of each node, along with the html, computed css and attributes (which are available in the popup panel editor).</p>
<p>A requested feature was the ability to export the visualization as a 3D mesh, to be used in games or other 3D editors. In version 0.82, Tilt adds the ability to export to .obj, along with a material .mtl file and a .png texture. The .obj open format ensures the fact that the mesh can be opened with almost any editor, from Blender to Maya. Here’s a ray-traced rendering of hacks.mozilla.org in Blender:</p>
<p><a href="http://blog.mozilla.org/tilt/files/2011/08/export.png"><img class="size-full wp-image-266" title="Blender rendering" src="http://blog.mozilla.org/tilt/files/2011/08/export.png" alt="" width="573" height="350" /></a></p>
<p>The exported .png can also be used to create full screenshots of webpages, as it saves the visible part of a document along with it’s “offscreen” elements.</p>
<p>The three months dedicated to developing Tilt in the Google Summer of Code timeframe have finished, but that doesn’t mean an ending for improving this extension. It’s worth mentioning that version 0.82 of Tilt is now waiting approval to be public in <a href="https://addons.mozilla.org/en-US/firefox/addon/tilt/" target="_blank">addons.mozilla.org</a> and a great thing to know that, already, even though Tilt isn’t public yet, there are already over 8,000 users.</p>
<p>Implementing more and more features is a sure thing in the near future. The nearest milestone (0.9) will add enhancements like: highlighting and scrolling a selected element in the “minidom”, making a selected strip center/zoom the node stack in the visualization, adding controls to move up/down the dom tree in the editor panel popup, and adding more functionality for the user interface. See all the <a href="https://github.com/victorporof/Tilt/wiki/TODO" target="_blank">TODOs</a> and the <a href="https://github.com/victorporof/Tilt/wiki/Requested-features" target="_blank">planned features </a>for more details. You can try some of these additions in the beta from the <a href="https://github.com/victorporof/Tilt/raw/r90/bin/Tilt.xpi" target="_blank">r90 branch on github</a>.</p>
<p class="entry-meta"> Category: <a href="http://blog.mozilla.org/tilt/category/progress/" title="View all posts in Progress" rel="category tag">Progress</a> | Tags: <a href="http://blog.mozilla.org/tilt/tag/addon/" rel="tag">addon</a>, <a href="http://blog.mozilla.org/tilt/tag/blender/" rel="tag">blender</a>, <a href="http://blog.mozilla.org/tilt/tag/export/" rel="tag">export</a>, <a href="http://blog.mozilla.org/tilt/tag/extension/" rel="tag">extension</a>, <a href="http://blog.mozilla.org/tilt/tag/firefox/" rel="tag">firefox</a>, <a href="http://blog.mozilla.org/tilt/tag/public/" rel="tag">public</a>, <a href="http://blog.mozilla.org/tilt/tag/release/" rel="tag">release</a>, <a href="http://blog.mozilla.org/tilt/tag/ui/" rel="tag">ui</a>, <a href="http://blog.mozilla.org/tilt/tag/visualization/" rel="tag">visualization</a>, <a href="http://blog.mozilla.org/tilt/tag/webgl/" rel="tag">webgl</a> | <a href="http://blog.mozilla.org/tilt/2011/09/01/version-0-82-released/#comments" title="Comment on Version 0.82 released">10 Comments &#187;</a></p>
</div>
</div>
<div class="hentry post" id="post-280">
<div class="entry-content">
<h2 class="entry-title"><a href="http://blog.mozilla.org/tilt/2011/08/26/hackasaurus-x-ray-goggles-mashup/" rel="bookmark" title="Permanent Link to Hackasaurus X-Ray Goggles Mashup">Hackasaurus X-Ray Goggles Mashup</a></h2>	
<p class="entry-date"><abbr class="published" title="2011-08-26T04:08:34">08.26.11 - 04:20pm</abbr></p>
<p>The <a href="http://hackasaurus.org/goggles/" target="_blank">X-Ray Goggles</a> is a nice and fun inspector tool, designed to make it easier to learn about the different document node types and “building blocks” which create a webpage, letting you “see inside the web”. To quote, “<a href="http://hackasaurus.org/" target="_blank">Hackasaurus</a> makes it easy to remix and change any web page like magic”.</p>
<p>This is a nice opportunity for Tilt and Goggles to work together and create an interesting mashup, having some gamification ideas in mind. The first game-like experience will be adding a Portal style transition between two webpages, to symbolize finishing a level and entering a new one.</p>
<p>Since Tilt was originally thought out to be more of a developer tool than a game-oriented extension, and new features designed to better integrate with Goggles don’t always make sense from a developer point of view, a new branch will be created especially for this mashup.</p>
<p>See the Hackasaurus <a href="http://hackasaurus.org/games/" target="_blank">games</a> and <a href="http://hackasaurus.org/blog/" target="_blank">blog</a> for more information.</p>
<p class="entry-meta"> Category: <a href="http://blog.mozilla.org/tilt/category/uncategorized/" title="View all posts in Uncategorized" rel="category tag">Uncategorized</a> | Tags: <a href="http://blog.mozilla.org/tilt/tag/extension/" rel="tag">extension</a>, <a href="http://blog.mozilla.org/tilt/tag/firefox/" rel="tag">firefox</a>, <a href="http://blog.mozilla.org/tilt/tag/hackasaurus/" rel="tag">hackasaurus</a>, <a href="http://blog.mozilla.org/tilt/tag/mashup/" rel="tag">mashup</a>, <a href="http://blog.mozilla.org/tilt/tag/mozilla/" rel="tag">mozilla</a>, <a href="http://blog.mozilla.org/tilt/tag/webgl/" rel="tag">webgl</a> | <span>Comments Off</span></p>
</div>
</div>
<div class="hentry post" id="post-235">
<div class="entry-content">
<h2 class="entry-title"><a href="http://blog.mozilla.org/tilt/2011/08/07/profiling-javascript-functions/" rel="bookmark" title="Permanent Link to Profiling Javascript functions">Profiling Javascript functions</a></h2>	
<p class="entry-date"><abbr class="published" title="2011-08-07T06:08:11">08.07.11 - 06:48pm</abbr></p>
<p>Tilt has reached a point in which profiling is mandatory. Execution time is virtually impossible to compute correctly in Javascript, but the bottlenecks can still be successfully spotted by counting the function calls and computing the total execution time. Moreover, intercepting function calls can be tricky, but easy once everything is handled properly. If a parent object and the function name are available, using closures we can retain the original function. The whole idea is to overwrite that function to handle before/during/after method calls, and, once this is done, we can record the number of calls, the total time necessary to execute a function and other useful information.</p>
<p style="text-align: center;"><a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/engine/core/Profiler.js"><img class="aligncenter size-full wp-image-236" title="Function overwriting" src="http://blog.mozilla.org/tilt/files/2011/08/funcover.png" alt="" width="567" height="259" /></a></p>
<p>A tricky issue can appear when an overwritten function needs to return a value. In this case, the afterCall still needs to be executed after the function returns. The try/finally clause does just this, it ensures the execution of the afterCall function even after the original function has returned a value.</p>
<p style="text-align: center;"><a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/engine/core/Profiler.js"><img class="aligncenter size-full wp-image-239" title="Before, during and after methods" src="http://blog.mozilla.org/tilt/files/2011/08/calls.png" alt="" width="569" height="706" /></a></p>
<p>Using an array of profiles, retaining information about all the functions, variables like longestTime or averageTime can easily be updated. Other issues may appear when handling the &#8220;this&#8221; object, which can differ from the function parent object. To fix this, the handy .call() hack does the trick.</p>
<p>Probably the most annoying hack needed to be done is passing parameters from the overwritten function to the original child function. Since most of the times the overwritten function has one or more arguments, simply passing the arguments property inside the function isn&#8217;t enough. We need to construct the parameters directly, separated by commas, just like a normal call would be executed. <del>Although discouraged, eval() works pretty well in this case</del>, and even with every possible function call profiled in Tilt, no performance drop was observed. Be careful though, and use this hack only with code you trust. <strong>Update</strong>: a much better way of handling this scenario is to just use <strong>method.apply(object, args);</strong> to handle passing parameters from one function to another. The code was updated to reflect this change. Never, ever use eval!</p>
<p>Once everything is finished, logging can be done by sorting all the recorded function calls, timing and other information by a key. With Tilt, the most useful data was received when sorting by the total time necessary for a function to be executed. However, this is easily changeable to suit other scenarios.</p>
<p><a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/engine/core/Profiler.js"><img class="aligncenter size-full wp-image-241" title="Logging" src="http://blog.mozilla.org/tilt/files/2011/08/logging.png" alt="" width="568" height="688" /></a></p>
<p>Because some functions inside objects can be duplicated when creating object via <em>var foo = new MyObject()</em>, that is, when they are declared inside the constructor function and not the object prototype, we need to check for duplicates and recalculate the number of calls, longest time, total time, average time for these situations. Replace the Tilt.Console.log call with your favorite logging method, like console.log or something similar.</p>
<p>Intercepting functions in an object is very easy. Inside the constructor function, call the intercept method:</p>
<p style="text-align: center;"><a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/engine/renderer/Renderer.js"><img class="aligncenter size-full wp-image-242" title="Usecase" src="http://blog.mozilla.org/tilt/files/2011/08/usecase.png" alt="" width="569" height="45" /></a></p>
<p>See the <a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/engine/renderer/Renderer.js" target="_blank">Tilt.Renderer</a> constructor for an example. Certain functions from an object can be specified to be logged, instead of all the child functions. If you&#8217;re not using objects, pass window as the parent object for specific named functions, in which case the call would be <em>intercept(null, &#8220;window&#8221;, &#8220;myFunc&#8221;)</em>. See the <a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/engine/core/Profiler.js#L53" target="_blank">intercept function documentation</a> from <a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/engine/core/Profiler.js" target="_blank">Tilt.Profiler</a> for more information.</p>
<p class="entry-meta"> Category: <a href="http://blog.mozilla.org/tilt/category/progress/" title="View all posts in Progress" rel="category tag">Progress</a> | Tags: <a href="http://blog.mozilla.org/tilt/tag/closures/" rel="tag">closures</a>, <a href="http://blog.mozilla.org/tilt/tag/functions/" rel="tag">functions</a>, <a href="http://blog.mozilla.org/tilt/tag/hack/" rel="tag">hack</a>, <a href="http://blog.mozilla.org/tilt/tag/javascript/" rel="tag">javascript</a>, <a href="http://blog.mozilla.org/tilt/tag/profiling/" rel="tag">profiling</a>, <a href="http://blog.mozilla.org/tilt/tag/tilt/" rel="tag">tilt</a> | <a href="http://blog.mozilla.org/tilt/2011/08/07/profiling-javascript-functions/#comments" title="Comment on Profiling Javascript functions">1 Comment &#187;</a></p>
</div>
</div>
<div class="hentry post" id="post-186">
<div class="entry-content">
<h2 class="entry-title"><a href="http://blog.mozilla.org/tilt/2011/07/27/progress/" rel="bookmark" title="Permanent Link to Progress">Progress</a></h2>	
<p class="entry-date"><abbr class="published" title="2011-07-27T07:07:39">07.27.11 - 07:30am</abbr></p>
<p>Tilt is getting closer and closer to a beta development stage, let&#8217;s see what&#8217;s been going on.</p>
<p style="text-align: center;"><a href="http://blog.mozilla.org/tilt/files/2011/07/tiltalpha.png"><img class="aligncenter size-large wp-image-187" title="Tilt alpha preview" src="http://blog.mozilla.org/tilt/files/2011/07/tiltalpha-1024x648.png" alt="" width="574" height="363" /></a></p>
<p>The most important added feature is the html preview window, currently using the Cloud9 source code editor Ace. Each time a node is double clicked, a popup panel shows up, displaying the formatted, syntax colored inner html for that particular node, along with the class and id if available. Since it would have been a tremendous work to implement a rich text edit box in WebGL, the easiest hack was to use an iframe containing a simple html document embedding the Ace editor.</p>
<p><a href="http://blog.mozilla.org/tilt/files/2011/07/acehtmleditor.png"><img class="aligncenter size-full wp-image-233" title="Ace" src="http://blog.mozilla.org/tilt/files/2011/07/acehtmleditor.png" alt="" width="567" height="681" /></a></p>
<p>This simple page is contained in an iframe defined in xul, inside a panel. On a double click event, all we needed to do was to get the iframe content document, access the &lt;pre&gt; editor element by id, set its inner html to the corresponding inner html of the selected node, then call a function to format and highlight the text. It&#8217;s really easy to implement such panels in Firefox, as &#8216;openPopup()&#8217; and &#8216;closePopup()&#8217; functions do all the heavy lifting.</p>
<p>The xul responsible with the iframe:</p>
<p><a href="http://blog.mozilla.org/tilt/files/2011/07/panel.png"><img class="aligncenter size-full wp-image-204" title="Panel" src="http://blog.mozilla.org/tilt/files/2011/07/panel.png" alt="" width="567" height="260" /></a></p>
<p>This isn&#8217;t, however, all the planned functionality for the html panel. A great and useful feature would be to actually edit and update the webpage rendering in real time as the code changes, and this is planned to be implemented in the following months. This behavior can lead to interesting functionality, and combining it with the Style Editor and Style Inspector would make a nice development/debugging environment. Thus, the next best move is to replace the Ace editor with the Orion Code Editor, actively developed in the devtools area.</p>
<p>To achieve this functionality, an optimized equivalent of canvas.drawWindow is needed, to minimize memory usage and seamlessly update the visualization as the DOM and style changes. A lot of progress has been done with <a title="#653656" href="https://bugzilla.mozilla.org/show_bug.cgi?id=653656" target="_blank">#653656</a>, and the first Javascript shim implementation is available. Once the specifications are consolidated and agreed upon, the MOZ_window_region_texture WebGL extension will be implemented in Tilt.</p>
<p>The way rendering webpages is done has changed quite a bit in the past months. The first experiments were focused on a more translucent visualization and now, all the nodes are rendered opaque. The community feedback has been great in both cases, so the best idea is to keep both rendering methods, and also adding customization functionality. The best way to achieve this is to implement a simple UI with sliders and other elements controlling hue, saturation, brightness, contrast and render mode (wireframe or opaque) for the visualization. Thus, transitioning between multiple ways of visualizing the webpage can be done seamlessly, and fine tuned values can be perfect for different goals.</p>
<p>The current GUI is a work in progress implementation in WebGL, as it would have been too much of a performance hit to implement simple sliders and buttons in XUL. The first mockups for the user interface have been finished:</p>
<p style="text-align: center;"><a href="http://blog.mozilla.org/tilt/files/2011/07/mockup.png"><img class="aligncenter size-large wp-image-208" title="Mockup" src="http://blog.mozilla.org/tilt/files/2011/07/mockup-1024x579.png" alt="" width="574" height="324" /></a></p>
<p style="text-align: left;">A couple of other things are planned for the user interface, the most important ones being:</p>
<ul>
<li>zoom and rotation sliders (+ auto rotation)</li>
<li>customizable thickness and spacing between nodes</li>
<li>preview pane in the lower right (showing the visible area of the webpage, like a map)</li>
<li>DOM tree structure in the lower left (along with a search field, go-to-node functionality)</li>
<li>reset, zoom in, zoom out buttons</li>
<li>menu in the upper right (including the export button)</li>
</ul>
<p>For now, the major focus is implementing all of the UI functionality, to make Tilt more useful and friendly for debuggers both from the HTML and CSS world. It&#8217;s been quite a tremendous effort to create a special UI library and event modules in WebGL, but now that most of the elements have been finished, implementing the actual UI should be the next step.</p>
<p>As a final note, Tilt has been released as an alpha preview last week on <a href="http://hacks.mozilla.org/2011/07/tilt-visualize-your-web-page-in-3d/" target="_blank">hacks.mozilla.org</a>, receiving a lot of feedback from the community. Most of the suggestions will make it into Tilt in the near future, the most interesting ones being:</p>
<ul>
<li>exporting the visualization to different formats (especially 3D models &#8211; COLLADA, .OBJ), feature which would add a lot of possibilities like importing into games; the visualization will also be exported to other WebGL supporting browsers</li>
<li>modifying and updating the 3D webpage mesh on the fly (as the webpage changes, exposing CSS transforms for each node), meaning that interactive movies, animations and even &#8220;DOM art&#8221; can be done using Tilt (see <a href="http://www.youtube.com/watch?v=ORu_Wg6lds8" target="_blank">this</a> video, creating a 3D Reddit logo).</li>
<li>adding a zoom control which isolates a DOM node and it&#8217;s children only</li>
<li>display useful information on the sides of the nodes too (also a color code to make the most common html elements appear clearly)</li>
<li>implement CSS editing functionality, along with the HTML editor panel</li>
<li>using head tracking from a webcam to modify the perspective of a webpage</li>
</ul>
<p>&nbsp;</p>
<p class="entry-meta"> Category: <a href="http://blog.mozilla.org/tilt/category/progress/" title="View all posts in Progress" rel="category tag">Progress</a> | Tags: <a href="http://blog.mozilla.org/tilt/tag/3d/" rel="tag">3d</a>, <a href="http://blog.mozilla.org/tilt/tag/dom/" rel="tag">dom</a>, <a href="http://blog.mozilla.org/tilt/tag/firefox/" rel="tag">firefox</a>, <a href="http://blog.mozilla.org/tilt/tag/mozilla/" rel="tag">mozilla</a>, <a href="http://blog.mozilla.org/tilt/tag/nodes/" rel="tag">nodes</a>, <a href="http://blog.mozilla.org/tilt/tag/tilt/" rel="tag">tilt</a>, <a href="http://blog.mozilla.org/tilt/tag/visualization/" rel="tag">visualization</a>, <a href="http://blog.mozilla.org/tilt/tag/webgl/" rel="tag">webgl</a>, <a href="http://blog.mozilla.org/tilt/tag/xul/" rel="tag">xul</a> | <span>Comments Off</span></p>
</div>
</div>
<div class="hentry post" id="post-110">
<div class="entry-content">
<h2 class="entry-title"><a href="http://blog.mozilla.org/tilt/2011/06/13/visualizing-the-dom-nodes-depth-and-coordinates/" rel="bookmark" title="Permanent Link to Visualizing the DOM nodes depth and coordinates">Visualizing the DOM nodes depth and coordinates</a></h2>	
<p class="entry-date"><abbr class="published" title="2011-06-13T09:06:43">06.13.11 - 09:01am</abbr></p>
<p>The most important part of Tilt was actually visualizing the DOM nodes depth and coordinates in 3D manner, by positioning them relative to parent offsets and sizing them based on the client width and height dimensions. This is exactly what&#8217;s been implemented in the past week, so let&#8217;s take a look.</p>
<p>This is an idea of the direction in which Tilt should evolve, as seen on the <a href="https://wiki.mozilla.org/Tilt_Project_Page" target="_blank">wiki page</a>:</p>
<p><a href="http://blog.mozilla.org/tilt/files/2011/06/Tilt.png"><img class="size-full wp-image-125  alignleft" title="Tilt mockup" src="http://blog.mozilla.org/tilt/files/2011/06/Tilt.png" alt="Tilt mockup" width="242" height="183" /></a>From the start, the general concept was that &#8220;Tilt allows a person to instantly see the relationship between various  parts of a web-page and their ancestors in a fun and graphical way&#8221;. As you can see, by layering the DOM nodes based on the depth as stacks, positioning and even texturing them accordingly makes a very interesting web-page inspector. These &#8220;layers could be built from DIVs, ULs or any containing node with  children&#8221; and also &#8220;elements with absolute position or floats&#8221;.</p>
<p>Therefore, two main challenges arise so let&#8217;s analyze each problem and find the solution.</p>
<ol>
<li>Acquiring the texture of the webpage</li>
<li>Traversing the DOM to create the visualization mesh</li>
</ol>
<p>To get the texture of the webpage, until a WebGL extension will be created to access the actual pixels and share memory with the renderer, a shim could be implemented in Javascript to simulate this behavior. This is easily done using the <a href="https://developer.mozilla.org/en/DOM/CanvasRenderingContext2D#drawWindow%28%29" target="_blank">canvas.drawWindow() method</a>, as explained in the &#8220;Drawing graphics with canvas&#8221; <a href="https://developer.mozilla.org/en/drawing_graphics_with_canvas" target="_blank">article on the MDC docs</a>. For security reasons, this API cannot currently be used by Web content. It is chrome only. Long story short, this is the implementation (for more code, see <a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/engine/utils/jTiltUtils.js" target="_blank">jTiltUtils.js</a> and <a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/engine/utils/jTiltExtensions.js" target="_blank">jTiltExtensions.js</a> on <a href="https://github.com/victorporof/Tilt" target="_blank">github</a>):</p>
<p><a href="http://blog.mozilla.org/tilt/files/2011/06/initDocumentImage.png"><img title="initDocumentImage()" src="http://blog.mozilla.org/tilt/files/2011/06/initDocumentImage.png" alt="" width="570" height="728" /></a></p>
<p>The second challenge was traversing a document object model and building the visualization mesh from it. This is done quite easily using a recursive function and harnessing the Javascript beauty of lambda functions. Starting from the top node, traverse each of the children and call a function:</p>
<p><a href="http://blog.mozilla.org/tilt/files/2011/06/traverse_recursive.png"><img class="aligncenter size-full wp-image-184" title="traverse_recursive()" src="http://blog.mozilla.org/tilt/files/2011/06/traverse_recursive.png" alt="" width="570" height="490" /></a></p>
<p style="text-align: left;">Quite elegant. Moreover, the get the coordinates (x, y, width and height) for each node, we make use of the offsetParent, offsetTop, offsetLeft and clientWidth &amp; clientHeight properties:</p>
<p style="text-align: left;"><a href="http://blog.mozilla.org/tilt/files/2011/06/getNodeCoordinates.png"><img class="aligncenter size-full wp-image-161" title="getNodeCoordinates()" src="http://blog.mozilla.org/tilt/files/2011/06/getNodeCoordinates.png" alt="" width="570" height="574" /></a></p>
<p style="text-align: left;">If you want to see more details on how the visualization mesh with each stack shape is build and how the texture coordinates are calculated, check out the<a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/jTiltVisualization.js" target="_blank"> jTiltVisualization.js</a> file. Here&#8217;s a quick look on how things look for now:</p>
<p style="text-align: left;"><a href="http://blog.mozilla.org/tilt/files/2011/06/initMesh.png"><img class="aligncenter size-full wp-image-163" title="Initializing the visualization mesh" src="http://blog.mozilla.org/tilt/files/2011/06/initMesh.png" alt="" width="570" height="675" /></a></p>
<p style="text-align: left;">Note that a single mesh is created! Drawing chunks of 3D models, each one with it&#8217;s own texture (for example) would be highly inefficient, thus some clever optimizations are done here. An entire object, built of triangles is computed, without duplicating any vertex or corner (by using index buffers), and a single texture is applied to the entire mesh, by computing the u, v coordinates relative to the width and height of the DOM texture.</p>
<p style="text-align: left;">The following videos are a proof of concept of visualizing the DOM nodes depth and coordinates. The only thing remaining to do now is make the extension usable, ergonomic and fun. But you can <a href="https://github.com/victorporof/Tilt/tree/master/bin" target="_blank">check it out now</a>!</p>
<p><object width="480" height="390"><param name="movie" value="http://www.youtube-nocookie.com/v/O3-nORN3ZYk?version=3&amp;hl=en_US&amp;hd=1" /><param name="allowFullScreen" value="true" /><param name="allowscriptaccess" value="always" /><embed type="application/x-shockwave-flash" width="480" height="390" src="http://www.youtube-nocookie.com/v/O3-nORN3ZYk?version=3&amp;hl=en_US&amp;hd=1" allowscriptaccess="always" allowfullscreen="true"></embed></object></p>
<p>Having fun with DOM nodes and effects, and applying the document texture:</p>
<p><object width="480" height="390"><param name="movie" value="http://www.youtube-nocookie.com/v/Z41I3cRgykk?version=3&amp;hl=en_US&amp;hd=1" /><param name="allowFullScreen" value="true" /><param name="allowscriptaccess" value="always" /><embed type="application/x-shockwave-flash" width="480" height="390" src="http://www.youtube-nocookie.com/v/Z41I3cRgykk?version=3&amp;hl=en_US&amp;hd=1" allowscriptaccess="always" allowfullscreen="true"></embed></object></p>
<p class="entry-meta"> Category: <a href="http://blog.mozilla.org/tilt/category/progress/" title="View all posts in Progress" rel="category tag">Progress</a> | Tags: <a href="http://blog.mozilla.org/tilt/tag/3d/" rel="tag">3d</a>, <a href="http://blog.mozilla.org/tilt/tag/coordinates/" rel="tag">coordinates</a>, <a href="http://blog.mozilla.org/tilt/tag/depth/" rel="tag">depth</a>, <a href="http://blog.mozilla.org/tilt/tag/dom/" rel="tag">dom</a>, <a href="http://blog.mozilla.org/tilt/tag/extension/" rel="tag">extension</a>, <a href="http://blog.mozilla.org/tilt/tag/firefox/" rel="tag">firefox</a>, <a href="http://blog.mozilla.org/tilt/tag/mozilla/" rel="tag">mozilla</a>, <a href="http://blog.mozilla.org/tilt/tag/nodes/" rel="tag">nodes</a>, <a href="http://blog.mozilla.org/tilt/tag/tilt/" rel="tag">tilt</a>, <a href="http://blog.mozilla.org/tilt/tag/webgl/" rel="tag">webgl</a> | <a href="http://blog.mozilla.org/tilt/2011/06/13/visualizing-the-dom-nodes-depth-and-coordinates/#comments" title="Comment on Visualizing the DOM nodes depth and coordinates">2 Comments &#187;</a></p>
</div>
</div>
<div class="hentry post" id="post-53">
<div class="entry-content">
<h2 class="entry-title"><a href="http://blog.mozilla.org/tilt/2011/06/08/tilt-at-summer-web-2011/" rel="bookmark" title="Permanent Link to Tilt at Summer Web 2011">Tilt at Summer Web 2011</a></h2>	
<p class="entry-date"><abbr class="published" title="2011-06-08T12:06:07">06.08.11 - 12:13pm</abbr></p>
<p style="text-align: left;">Summer Web 2011 is an event organized in conjunction to the first edition of the <a href="http://mozillalabs.com/conceptseries/2011/05/25/design-jam-iasi-1-romania-opens-the-jam-pot-as-part-of-summer-web-2011/" target="_blank">Design Jam</a> Iasi, &#8220;a two-day venue, during which people team up to discuss, share ideas and solve engaging UX challenges&#8221;. The event is non-profit and supported by the Mozilla Labs Concept Series. Find more information on the <a href="http://swapps.wordpress.com/" target="_blank">Summer Web blog</a>.</p>
<p style="text-align: left;">During this event, I&#8217;ve presented and explained the Tilt project to a wide audience of &#8220;neophytes, apprentices, and experts in Web technologies and HCI (Human-Computer Interaction)&#8221;, and received amazing feedback and interest from the community.</p>
<p style="text-align: left;">Most of the questions were regarding the schedule and deliverables, but one interesting aspect worth mentioning was about the actual rendering of the webpage itself and not the visualization (which is achieved using WebGL).</p>
<p style="text-align: left;">The main problem is grabbing the 2d rendering of a webpage, to calculate texture coordinates for each node in the DOM and applying the texture to stacks like in this <a href="https://wiki.mozilla.org/File:Tilt.png" target="_blank">draft concept of Tilt</a>. Actually, creating a new webpage renderer would be a very bad idea, so Tilt will take full advantage of the implemented <a href="https://developer.mozilla.org/en/Gecko" target="_blank">Gecko</a> engine, continuously under development at mozilla.org (&#8220;the open source browser engine designed to support open Internet standards such as <a rel="internal" href="https://developer.mozilla.org/en/HTML">HTML</a>, <a rel="internal" href="https://developer.mozilla.org/en/CSS">CSS</a>, the W3C <a rel="internal" href="https://developer.mozilla.org/en/DOM">DOM</a>, <a rel="internal" href="https://developer.mozilla.org/en/XML">XML</a>, <a rel="internal" href="https://developer.mozilla.org/en/JavaScript">JavaScript</a>, and others&#8221;).</p>
<p style="text-align: left;">Fetching the webpage texture will be done using a WebGL extension, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=653656" target="_blank">MOZ_dom_element_texture</a>, built in collaboration with <a href="http://twitter.com/neonux" target="_blank">Cedric Vivier</a> from Mozilla DevTools. This is an optimized equivalent of the canvas.drawWindow() function, and it would be used for rendering the DOM elements in WebGL texture. &#8220;The extension would be listed by getExtensions from privileged/chrome JavaScript only (similarly to canvas.drawWindow)&#8221;.</p>
<p style="text-align: left;">Take a look at the presentation:<strong style="display: block; margin: 12px 0 4px;"> </strong></p>
<div style="width:510px" id="__ss_8197466"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/victorporof/web3d-semantic-standards-webgl-hci" title="Web3D - Semantic standards, WebGL, HCI">Web3D &#8211; Semantic standards, WebGL, HCI</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/8197466" width="510" height="426" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/victorporof">Victor Porof</a> </div>
</p></div>
<p class="entry-meta"> Category: <a href="http://blog.mozilla.org/tilt/category/events/" title="View all posts in Events" rel="category tag">Events</a>, <a href="http://blog.mozilla.org/tilt/category/progress/" title="View all posts in Progress" rel="category tag">Progress</a> | Tags: <a href="http://blog.mozilla.org/tilt/tag/3d/" rel="tag">3d</a>, <a href="http://blog.mozilla.org/tilt/tag/design-jam/" rel="tag">design jam</a>, <a href="http://blog.mozilla.org/tilt/tag/extension/" rel="tag">extension</a>, <a href="http://blog.mozilla.org/tilt/tag/firefox/" rel="tag">firefox</a>, <a href="http://blog.mozilla.org/tilt/tag/mozilla/" rel="tag">mozilla</a>, <a href="http://blog.mozilla.org/tilt/tag/mozilla-labs/" rel="tag">mozilla labs</a>, <a href="http://blog.mozilla.org/tilt/tag/summer-web/" rel="tag">summer web</a>, <a href="http://blog.mozilla.org/tilt/tag/tilt/" rel="tag">tilt</a>, <a href="http://blog.mozilla.org/tilt/tag/visualization/" rel="tag">visualization</a> | <span>Comments Off</span></p>
</div>
</div>
<div class="hentry post" id="post-30">
<div class="entry-content">
<h2 class="entry-title"><a href="http://blog.mozilla.org/tilt/2011/06/06/first-implementation/" rel="bookmark" title="Permanent Link to First implementation">First implementation</a></h2>	
<p class="entry-date"><abbr class="published" title="2011-06-06T04:06:46">06.06.11 - 04:34pm</abbr></p>
<p>A lot has happened in the past few days, and interesting progress has been done with Tilt, both from a developer point of view, and from the community side. But first thing&#8217;s first: Tilt is an extension, there&#8217;s working code on <a href="https://github.com/victorporof/Tilt" target="_blank">https://github.com/victorporof/Tilt</a> (currently there are 19 followers and counting! lots for such a short period of time), so let&#8217;s see what it&#8217;s made of.</p>
<p><a href="http://blog.mozilla.org/tilt/files/2011/06/updated-project-structure.png"><img class="alignleft size-full wp-image-100" title="Project structure" src="http://blog.mozilla.org/tilt/files/2011/06/updated-project-structure.png" alt="Project structure" width="260" height="497" /></a>The project structure is quite standard and follows the <a href="https://developer.mozilla.org/en/XUL_School/The_Essentials_of_an_Extension" target="_blank">lines of any Firefox extension</a>, with an <a href="https://github.com/victorporof/Tilt/blob/master/src/install.rdf" target="_blank">install.rdf</a> file containing description about the project (id, name, description, homepage url etc.) and also the target application, which is currently set to a Firefox minimum version of 4.0 and maximum version 7.0a1. I will probably change these as Firefox 7 ships in about five weeks, and it&#8217;s a pretty good idea to support even Aurora and Minefield releases. Currently, Tilt is not bootstrapped (it needs a Firefox restart when installed), but I don&#8217;t see it as a problem right now. As the project advances, I will most likely use <a href="http://blog.mozilla.org/addons/2011/05/05/announcing-add-on-sdk-1-0b5/" target="_blank">Mozilla&#8217;s Addons SDK</a> to achieve this.</p>
<p style="text-align: left;">The <a href="https://github.com/victorporof/Tilt/blob/master/src/chrome.manifest" target="_blank">chrome.manifest</a> is composed of three sections: content, locale and skin. <a href="https://developer.mozilla.org/en/XUL_School/The_Essentials_of_an_Extension#The_chrome.manifest_File" target="_blank">MDN defines chrome</a> as: &#8220;the set of user interface elements of the application window  that are outside of a window&#8217;s content area. Toolbars, menu bars,  progress bars, and window title bars are all examples of elements that  are typically part of the chrome.&#8221; These files are all packaged in a JAR archive.</p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">From the top, the <a href="https://github.com/victorporof/Tilt/tree/master/src/chrome/content" target="_blank">content</a> contains mostly <a href="https://developer.mozilla.org/en/XUL" target="_blank">.xul</a> and .js files. The XUL holds the user interface and (view) and Javascript is responsible for the logic (controller) of the extension. For example, this extension will create an iframe overlaying the current browser parent node (and adding it to the stack), while this is done by accessing a menu under &#8220;Tools&#8221; -&gt; &#8220;Tilt&#8221; -&gt; &#8220;Initialize Tilt&#8221;.</p>
<p style="text-align: left;">Here is how the <a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/browserOverlay.xul" target="_blank">XUL currently looks like</a>, also: <a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/browserOverlay.js" target="_blank">what happens when initializing Tilt</a>. These two files (browserOverlay.js and browserOverlay.xul) are at the highest level of the extension content. Most of the other files represent the <a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/engine/jTiltEngine.js" target="_blank">engine</a> to render everything (I called it jTilt for now), some helper <a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/engine/jTiltDraw.js" target="_blank">draw</a> functions built on top of this engine, and the <a href="https://github.com/victorporof/Tilt/blob/master/src/chrome/content/engine/jTiltVisualization.js" target="_blank">visualization</a> logic. Other helpful libraries like <a href="http://code.google.com/p/glmatrix/" target="_blank">glMatrix</a> are used, providing great performance, so that everything is efficient to achieve smooth rendering.</p>
<p style="text-align: left;">An important requirement of any Firefox extension is <a href="https://developer.mozilla.org/en/XUL_School/The_Essentials_of_an_Extension#Locale" target="_blank">making it &#8220;localizable</a><a href="https://developer.mozilla.org/en/XUL_School/The_Essentials_of_an_Extension#Locale" target="_blank">&#8220;</a>, basically the <a href="https://github.com/victorporof/Tilt/tree/master/src/chrome/locale" target="_blank">locale</a> .dtd and .properties files containing all of the strings, messages and titles or captions of any view component. Thus, it&#8217;s easy to translate this extension in many different languages and making it scalable from this point of view.</p>
<p style="text-align: left;">The third and final part is the <a href="https://github.com/victorporof/Tilt/tree/master/src/chrome/skin" target="_blank">skin</a>, with .css files defining the look and other assets (.png, .jpg, images in general) used by the extension.</p>
<p style="text-align: left;">I&#8217;m currently using a TextMate development environment, but there&#8217;s also a Komodo Edit project file if you prefer it instead. There&#8217;s no &#8220;right&#8221; IDE for developing Firefox extensions, and any text editor you&#8217;re most comfortable with will do. Read <a href="https://developer.mozilla.org/en/XUL_School/Setting_Up_a_Development_Environment" target="_blank">this</a> for more information.</p>
<p style="text-align: left;">Currently, you can find the latest .xpi file in the <a href="https://github.com/victorporof/Tilt/tree/master/bin" target="_blank">bin folder</a>. Drag and drop it in your Firefox window to install it. Start it by accessing &#8220;Tools&#8221; -&gt; &#8220;Tilt&#8221; -&gt; &#8220;Initialize Tilt&#8221;, and you should see a rotating quad, tinted with a green color and a texture loaded from chrome:</p>
<div id="attachment_42" style="width: 588px" class="wp-caption aligncenter"><a href="http://blog.mozilla.org/tilt/files/2011/06/tilt-screenshot.png"><img class="size-full wp-image-42      " title="Tilt screenshot" src="http://blog.mozilla.org/tilt/files/2011/06/tilt-screenshot.png" alt="Tilt screenshot" width="578" height="334" /></a><p class="wp-caption-text">Tilt screenshot (6 Jun, 2011)</p></div>
<p style="text-align: left;">The Bugzilla page for this project is <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=659807" target="_blank">Implement Tilt: a WebGL-based 3D visualization of a Webpage</a>, I&#8217;ve received some quite useful feedback already. You might want to cc yourself there to receive updates on the development as soon as they appear. Of course, this blog has RSS, and I encourage you to subscribe to it.</p>
<p style="text-align: left;">A few other things worth mentioning are some bug pages on Bugzilla:</p>
<ul style="text-align: left;">
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=659282" target="_blank">gl.texImage2D() fails when loading images from a chrome URI instead of http</a></li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=653658" target="_blank">JavaScript implementation of WebGL MOZ_dom_element_texture extension</a> (which is most likely the next most important step in developing this extension, after adding a few test units)</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=653656" target="_blank">Write draft specification for MOZ_dom_element_texture WebGL extension</a> and</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=653657" target="_blank">Implement WebGL MOZ_dom_element_texture extension</a> (both of these last two being assigned to <a href="http://twitter.com/neonux" target="_blank">Cedric Vivier</a>, regarding creating a &#8220;WebGL-optimized equivalent to privileged canvas.drawWindow in order to render DOM elements into WebGL textures&#8221;)</li>
</ul>
<p class="entry-meta"> Category: <a href="http://blog.mozilla.org/tilt/category/progress/" title="View all posts in Progress" rel="category tag">Progress</a> | Tags: <a href="http://blog.mozilla.org/tilt/tag/3d/" rel="tag">3d</a>, <a href="http://blog.mozilla.org/tilt/tag/dom/" rel="tag">dom</a>, <a href="http://blog.mozilla.org/tilt/tag/extension/" rel="tag">extension</a>, <a href="http://blog.mozilla.org/tilt/tag/firefox/" rel="tag">firefox</a>, <a href="http://blog.mozilla.org/tilt/tag/implementation/" rel="tag">implementation</a>, <a href="http://blog.mozilla.org/tilt/tag/mozilla/" rel="tag">mozilla</a>, <a href="http://blog.mozilla.org/tilt/tag/tilt/" rel="tag">tilt</a>, <a href="http://blog.mozilla.org/tilt/tag/visualization/" rel="tag">visualization</a>, <a href="http://blog.mozilla.org/tilt/tag/webgl/" rel="tag">webgl</a>, <a href="http://blog.mozilla.org/tilt/tag/xul/" rel="tag">xul</a> | <span>Comments Off</span></p>
</div>
</div>
<div class="hentry post" id="post-1">
<div class="entry-content">
<h2 class="entry-title"><a href="http://blog.mozilla.org/tilt/2011/05/10/tilt-a-webgl-based-3d-visualization-of-a-webpage/" rel="bookmark" title="Permanent Link to Tilt: a WebGL-based 3D visualization of a Webpage">Tilt: a WebGL-based 3D visualization of a Webpage</a></h2>	
<p class="entry-date"><abbr class="published" title="2011-05-10T09:05:20">05.10.11 - 09:30pm</abbr></p>
<p style="text-align: left;">Tilt represents a new way of visualizing a web page. This tool creates a 3D representation of the document, with the purpose of displaying, understanding and easily analyzing the DOM. It will take advantage of the great tools Firefox has to offer, as it is an extension which contains a WebGL implementation, providing rich user-experience, fun interaction and useful information, while taking full advantage of 3D hardware acceleration, GLSL shaders and what OpenGL ES 2.0 has to offer.</p>
<p style="text-align: left;">The implementation consists of a Firefox extension containing a 3D representation  of a web page, as both a fun visualization tool and a  developer-friendly environment for debugging the document’s structure,  contents and nesting of the DOM tree. Various information besides the  actual contents will be displayed on request, regarding each node’s  type, class, id, and other attributes if available. The rendering will  be dynamic, in-browser, using WebGL and GLSL shaders.</p>
<p style="text-align: left;">This blog will be weekly updated with progress about the development. In the meantime, for more interesting stuff, see</p>
<ul style="text-align: left;">
<li><a href="http://www.google-melange.com/gsoc/proposal/review/google/gsoc2011/victorporof/1#" target="_blank">schedule and other information</a>, and also the</li>
<li><a href="https://wiki.mozilla.org/Tilt_Project_Page" target="_blank">wiki page at Mozilla</a></li>
</ul>
<p style="text-align: left;">The source code is available for <a href="https://github.com/victorporof/Tilt" target="_blank">download on github</a>. Check it out!</p>
<p class="entry-meta"> Category: <a href="http://blog.mozilla.org/tilt/category/progress/" title="View all posts in Progress" rel="category tag">Progress</a> | Tags: <a href="http://blog.mozilla.org/tilt/tag/3d/" rel="tag">3d</a>, <a href="http://blog.mozilla.org/tilt/tag/dom/" rel="tag">dom</a>, <a href="http://blog.mozilla.org/tilt/tag/extension/" rel="tag">extension</a>, <a href="http://blog.mozilla.org/tilt/tag/firefox/" rel="tag">firefox</a>, <a href="http://blog.mozilla.org/tilt/tag/mozilla/" rel="tag">mozilla</a>, <a href="http://blog.mozilla.org/tilt/tag/tilt/" rel="tag">tilt</a>, <a href="http://blog.mozilla.org/tilt/tag/visualization/" rel="tag">visualization</a>, <a href="http://blog.mozilla.org/tilt/tag/webgl/" rel="tag">webgl</a> | <a href="http://blog.mozilla.org/tilt/2011/05/10/tilt-a-webgl-based-3d-visualization-of-a-webpage/#comments" title="Comment on Tilt: a WebGL-based 3D visualization of a Webpage">1 Comment &#187;</a></p>
</div>
</div>
<!--The navigation.php was written by Chris Pearson for the Cutline Theme [http://cutline.tubetorial.com/], a great theme and worth a hard look   Please do not delete this message.  -->

<div class="navigation">
	<div class="previous"></div>
	<div class="next"></div>
</div>
<div class="clear"></div>

</div>
<div id="sidebar">
<!--begins sidebar widgets-->
<ul>
<!--and for every other page view-->

<li class="search-form">
	<!--create the searchfield-->
<form method="get" id="searchform" action="http://blog.mozilla.org/tilt/">
<div><input type="text" value="" name="s" id="s" size="18"  />
</div>
</form>
<!--searchform.php end-->
</li>

<li id="sidemenu">
<ul>
	<li class="cat-item cat-item-39"><a href="http://blog.mozilla.org/tilt/category/events/" title="View all posts filed under Events">Events</a>
</li>
	<li class="cat-item cat-item-9135"><a href="http://blog.mozilla.org/tilt/category/progress/" title="View all posts filed under Progress">Progress</a>
</li>
	<li class="cat-item cat-item-1"><a href="http://blog.mozilla.org/tilt/category/uncategorized/" title="View all posts filed under Uncategorized">Uncategorized</a>
</li>
</ul>
</li>

<li>
<h4>Recent Posts</h4>
	<ul class="posts">
		<li><a href='http://blog.mozilla.org/tilt/2011/10/31/developer-oriented-features-and-experiments/'>Developer-oriented features and experiments</a></li>
	<li><a href='http://blog.mozilla.org/tilt/2011/09/01/version-0-82-released/'>Version 0.82 released</a></li>
	<li><a href='http://blog.mozilla.org/tilt/2011/08/26/hackasaurus-x-ray-goggles-mashup/'>Hackasaurus X-Ray Goggles Mashup</a></li>
	<li><a href='http://blog.mozilla.org/tilt/2011/08/07/profiling-javascript-functions/'>Profiling Javascript functions</a></li>
	<li><a href='http://blog.mozilla.org/tilt/2011/07/27/progress/'>Progress</a></li>
	<li><a href='http://blog.mozilla.org/tilt/2011/06/13/visualizing-the-dom-nodes-depth-and-coordinates/'>Visualizing the DOM nodes depth and coordinates</a></li>
	<li><a href='http://blog.mozilla.org/tilt/2011/06/08/tilt-at-summer-web-2011/'>Tilt at Summer Web 2011</a></li>
	<li><a href='http://blog.mozilla.org/tilt/2011/06/06/first-implementation/'>First implementation</a></li>
	<li><a href='http://blog.mozilla.org/tilt/2011/05/10/tilt-a-webgl-based-3d-visualization-of-a-webpage/'>Tilt: a WebGL-based 3D visualization of a Webpage</a></li>
	</ul>
</li>


<li>
	<h4>Blogroll</h4>
	<ul>
	<li><a href="http://blogs.mozilla.com/devtools">Firefox Devtools</a></li>
<li><a href="http://antennasoft.net/robcee">~/robcee</a></li>
<li><a href="http://students.info.uaic.ro/~victor.porof/">~/victor.porof</a></li>
<li><a href="http://planet.mozilla.org/">Planet Mozilla</a></li>
	</ul>
</li>

<li>
<h4>Subscribe</h4>
	<ul class="subscribe">
	<li><a href="http://blog.mozilla.org/tilt/feed/" title="Subscribe to my Posts feed">Posts</a></li>
	<li><a href="http://blog.mozilla.org/tilt/comments/feed/" title="Subscribe to my Comments Feed">Comments</a></li>
	</ul>
</li>

<li>
<h4>Meta</h4>
	<ul>
		<li><a href="https://blog.mozilla.org/tilt/wp-login.php">Log in</a></li>
	<li><a href="http://validator.w3.org/check/referer" title="This page validates as XHTML 1.0 Transitional">Valid <abbr title="eXtensible HyperText Markup Language">XHTML</abbr></a></li>
	<li><a href="http://wordpress.org/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress</a></li>
		</ul>
</li>

<!--ends page sidebar-->
<!--ends sidebar widgets-->
</ul>
</div><div id="footer">
<div id="footerleft">
</div>
<div id="footerright">
</div>
<div class="flickr">
</div>
<div id="credits">
<p><a href="http://wordpress.com" title="Get down with the Cosmic Power of the Monkey God">wordpress</a> | design: <a title="derby web design" href="http://www.tristarwebdesign.co.uk/">tristar</a> | port: <a href="http://journal.barleyhut.com">a.m. griffin</a> | icons: <a href="http://iconkits.com">iconkits</a></p>
</div>
</div>
</div>
</div>
</body>
</html>