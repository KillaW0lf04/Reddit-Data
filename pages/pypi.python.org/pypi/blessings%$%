<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

  <html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
    <head>
      
      <meta content="text/html; charset=utf-8" http-equiv="content-type"/>
      <title>blessings 1.5.1 : Python Package Index</title>
      <meta content="terminal,tty,curses,ncurses,formatting,style,color,console"/>
      <meta content="A thin, practical wrapper around terminal coloring, styling, and positioning"/>
       <link rel="alternate" type="application/rss+xml" title="RSS: 40 latest updates" href="https://pypi.python.org/pypi?:action=rss"/>
       <link rel="alternate" type="application/rss+xml" title="RSS: 40 newest packages" href="https://pypi.python.org/pypi?:action=packages_rss"/>
       <link rel="stylesheet" media="screen" href="/static/styles/screen-switcher-default.css" type="text/css"/>
       <link media="screen" href="/static/styles/netscape4.css" type="text/css" rel="stylesheet"/>
       <link media="print" href="/static/styles/print.css" type="text/css" rel="stylesheet"/>
       <link media="screen" href="/static/styles/largestyles.css" type="text/css" rel="alternate stylesheet" title="large text"/>
       <link media="screen" href="/static/styles/defaultfonts.css" type="text/css" rel="alternate stylesheet" title="default fonts"/>
       <link rel="stylesheet" media="screen" href="/static/css/docutils.css" type="text/css"/>
       <link rel="stylesheet" media="screen" href="/static/css/pygments.css" type="text/css"/>

       <!-- allow pypi to override the standard pydotorg/docutils/etc. styles -->
       <link rel="stylesheet" href="/static/css/pypi.css" type="text/css"/>
       <link media="screen" rel="stylesheet" href="/static/css/pypi-screen.css" type="text/css"/>

       
 <meta name="keywords" content="terminal,tty,curses,ncurses,formatting,style,color,console"/>
 <meta name="description" content="A thin, practical wrapper around terminal coloring, styling, and positioning"/>
 <link rel="meta" title="DOAP" type="application/rdf+xml" href="/pypi?:action=doap&amp;name=blessings&amp;version=1.5.1"/>
 <style type="text/css">
  table.form th {white-space: pre;}
 </style>


       <style type="text/css">
       </style>
    </head>
    <body>
     

      <!--  Logo  -->
      <h1 id="logoheader">
       <a accesskey="1" href="http://www.python.org" id="logolink">
          <img src="/static/images/python-logo.png" alt="homepage" border="0" id="logo"/>
       </a>
      </h1>
      <!--  Skip to Navigation  -->
      <div class="skiptonav"><a accesskey="2" href="#left-hand-navigation"><img src="/static/images/trans.gif" alt="skip to navigation" border="0" id="skiptonav"/></a></div>
      <div class="skiptonav"><a accesskey="3" href="#content-body"><img src="/static/images/trans.gif" alt="skip to content" border="0" id="skiptocontent"/></a></div>
      <!--  Utility Menu  -->

      <div id="utility-menu">
        <!--  Search Box  -->
        <div id="searchbox">
          <form id="searchform" method="get" name="searchform" action="/pypi">
            <input type="hidden" name=":action" value="search"/>
            <div id="search">
              <input class="input-text" id="term" name="term" autofocus="autofocus"/>
              <input class="input-button" type="submit" name="submit" value="search" id="submit"/>
            </div>
          </form>
        </div>
<!-- XXX: reinstate this       <div id="screen-switcher"></div> -->
      </div>
      <div id="left-hand-navigation">

        <!--  Main Menu NEED LEVEL TWO HEADER AND FOOTER -->
        <div id="menu">
          <ul class="level-one">
            <li class="selected">
              <a class="selected" href="/pypi">Package Index</a>

              <ul class="level-two">

                
                  <li class=""><a class="" href="/pypi?%3Aaction=browse">Browse&nbsp;packages</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=submit_form">Package&nbsp;submission</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=list_classifiers">List&nbsp;trove&nbsp;classifiers</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=index">List&nbsp;packages</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=rss">RSS&nbsp;(latest&nbsp;40&nbsp;updates)</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=packages_rss">RSS&nbsp;(newest&nbsp;40&nbsp;packages)</a></li>
                
		<li><a href="/pypi?:action=browse&amp;c=533&amp;show=all">Python 3 Packages</a></li>
        <li><a href="http://wiki.python.org/moin/CheeseShopTutorial">PyPI Tutorial</a></li>
        <li><a href="/security">PyPI Security</a></li>
        <li><a href="http://sourceforge.net/tracker/?group_id=66150&amp;atid=513504">PyPI Support</a></li>
        <li><a href="https://bitbucket.org/pypa/pypi/issues">PyPI Bug Reports</a></li>
        <li><a href="http://www.python.org/sigs/distutils-sig/">PyPI Discussion</a></li>
        <li><a href="http://wiki.python.org/moin/CheeseShopDev">PyPI Developer Info</a></li>
       </ul>

            </li>




            <li class=""><a href="http://www.python.org/about" class="" title="About The Python Language">About</a>
            </li><li class=""><a href="http://www.python.org/news" class="" title="">News</a>
            </li><li class=""><a href="http://www.python.org/doc" class="" title="">Documentation</a>
            </li><li class=""><a href="http://www.python.org/download" title="">Download</a>


            </li><li class=""><a href="http://www.python.org/community" class="" title="">Community</a>
            </li><li class=""><a href="http://www.python.org/psf" class="" title="Python Software Foundation">Foundation</a>
            </li><li class=""><a href="http://www.python.org/dev" class="" title="Python Core Language Development">Core Development</a>
            </li><li class=""><a href="http://www.python.org/links" class="" title="">Links</a>
          </li>
          </ul>
        </div>

      </div>
      <div id="content-body">
        <div id="body-main">
          <div id="content">

            <div id="breadcrumb">
              <a href="/pypi">Package Index</a>
              
                <span class="breadcrumb-separator">&gt;</span>
                <a href="/pypi/blessings">blessings</a>
              
              
                <span class="breadcrumb-separator">&gt;</span>
                <a href="/pypi/blessings/1.5.1">1.5.1</a>
              

            </div>

            <div id="document-floating">

            <div id="document-navigation" style="overflow-y: auto; max-height: 15em; overflow-x: hidden;">
		
                  <h4>Not Logged In</h4>

                  <ul>
		    
                    <li><a href="/pypi?%3Aaction=login">Login</a></li>
                    <li><a href="/pypi?%3Aaction=register_form">Register</a></li>
                    <li><a href="/pypi?%3Aaction=forgotten_password_form">Lost Login?</a></li>
		    <li>Use <a href="/pypi?:action=openid">OpenID</a>
                      
                        <a style="border: none;" href="/pypi?:action=login&amp;provider=Google"><img width="16" height="16" src="https://www.google.com/favicon.ico" alt="Google" title="Google"/></a>
                      
                      
                        <a style="border: none;" href="/pypi?:action=login&amp;provider=myOpenID"><img width="16" height="16" src="https://www.myopenid.com/favicon.ico" alt="myOpenID" title="myOpenID"/></a>
                      
                      
                        <a style="border: none;" href="/pypi?:action=login&amp;provider=Launchpad"><img width="16" height="16" src="https://launchpad.net/@@/launchpad.png" alt="Launchpad" title="Launchpad"/></a>
                      
                    </li>
                  </ul>

		

		

                <div id="statusdiv">
                </div>
            </div>
        </div>
        


            <div class="section">
              <h1>blessings 1.5.1</h1>

              
<div id="download-button">
 
  <a class="button green" style="float:right;" href="https://pypi.python.org/packages/source/b/blessings/blessings-1.5.1.tar.gz">Download<br/>
    <span style="font-size: 75%">blessings-1.5.1.tar.gz</span>
  </a>
 
 
</div>

<p style="font-style: italic">A thin, practical wrapper around terminal coloring, styling, and positioning</p>

<p>
   <a href="http://pythonhosted.org//blessings">Package Documentation</a>
</p>






<p>Coding with Blessings looks like this...</p>
<pre class="literal-block">
from blessings import Terminal

t = Terminal()

print t.bold('Hi there!')
print t.bold_red_on_bright_green('It hurts my eyes!')

with t.location(0, t.height - 1):
    print 'This is at the bottom.'
</pre>
<p>Or, for byte-level control, you can drop down and play with raw terminal
capabilities:</p>
<pre class="literal-block">
print '{t.bold}All your {t.red}bold and red base{t.normal}'.format(t=t)
print t.wingo(2)
</pre>
<div class="section" id="the-pitch">
<h1>The Pitch</h1>
<p>Blessings lifts several of <a class="reference external" href="http://docs.python.org/library/curses.html">curses</a>' limiting assumptions, and it makes your
code pretty, too:</p>
<ul class="simple">
<li>Use styles, color, and maybe a little positioning without necessarily
clearing the whole
screen first.</li>
<li>Leave more than one screenful of scrollback in the buffer after your program
exits, like a well-behaved command-line app should.</li>
<li>Get rid of all those noisy, C-like calls to <tt class="docutils literal">tigetstr</tt> and <tt class="docutils literal">tparm</tt>, so
your code doesn't get crowded out by terminal bookkeeping.</li>
<li>Act intelligently when somebody redirects your output to a file, omitting the
terminal control codes the user doesn't want to see (optional).</li>
</ul>
<div class="section" id="before-and-after">
<h2>Before And After</h2>
<p>Without Blessings, this is how you'd print some underlined text at the bottom
of the screen:</p>
<pre class="literal-block">
from curses import tigetstr, setupterm, tparm
from fcntl import ioctl
from os import isatty
import struct
import sys
from termios import TIOCGWINSZ

# If we want to tolerate having our output piped to other commands or
# files without crashing, we need to do all this branching:
if hasattr(sys.stdout, 'fileno') and isatty(sys.stdout.fileno()):
    setupterm()
    sc = tigetstr('sc')
    cup = tigetstr('cup')
    rc = tigetstr('rc')
    underline = tigetstr('smul')
    normal = tigetstr('sgr0')
else:
    sc = cup = rc = underline = normal = ''
print sc  # Save cursor position.
if cup:
    # tigetnum('lines') doesn't always update promptly, hence this:
    height = struct.unpack('hhhh', ioctl(0, TIOCGWINSZ, '\000' * 8))[0]
    print tparm(cup, height - 1, 0)  # Move cursor to bottom.
print 'This is {under}underlined{normal}!'.format(under=underline,
                                                  normal=normal)
print rc  # Restore cursor position.
</pre>
<p>That was long and full of incomprehensible trash! Let's try it again, this time
with Blessings:</p>
<pre class="literal-block">
from blessings import Terminal

term = Terminal()
with term.location(0, term.height - 1):
    print 'This is', term.underline('pretty!')
</pre>
<p>Much better.</p>
</div>
</div>
<div class="section" id="what-it-provides">
<h1>What It Provides</h1>
<p>Blessings provides just one top-level object: <tt class="docutils literal">Terminal</tt>. Instantiating a
<tt class="docutils literal">Terminal</tt> figures out whether you're on a terminal at all and, if so, does
any necessary terminal setup. After that, you can proceed to ask it all sorts
of things about the terminal. Terminal terminal terminal.</p>
<div class="section" id="simple-formatting">
<h2>Simple Formatting</h2>
<p>Lots of handy formatting codes (&quot;capabilities&quot; in low-level parlance) are
available as attributes on a <tt class="docutils literal">Terminal</tt>. For example:</p>
<pre class="literal-block">
from blessings import Terminal

term = Terminal()
print 'I am ' + term.bold + 'bold' + term.normal + '!'
</pre>
<p>Though they are strings at heart, you can also use them as callable wrappers so
you don't have to say <tt class="docutils literal">normal</tt> afterward:</p>
<pre class="literal-block">
print 'I am', term.bold('bold') + '!'
</pre>
<p>Or, if you want fine-grained control while maintaining some semblance of
brevity, you can combine it with Python's string formatting, which makes
attributes easy to access:</p>
<pre class="literal-block">
print 'All your {t.red}base {t.underline}are belong to us{t.normal}'.format(t=term)
</pre>
<p>Simple capabilities of interest include...</p>
<ul class="simple">
<li><tt class="docutils literal">bold</tt></li>
<li><tt class="docutils literal">reverse</tt></li>
<li><tt class="docutils literal">underline</tt></li>
<li><tt class="docutils literal">no_underline</tt> (which turns off underlining)</li>
<li><tt class="docutils literal">blink</tt></li>
<li><tt class="docutils literal">normal</tt> (which turns off everything, even colors)</li>
</ul>
<p>Here are a few more which are less likely to work on all terminals:</p>
<ul class="simple">
<li><tt class="docutils literal">dim</tt></li>
<li><tt class="docutils literal">italic</tt> and <tt class="docutils literal">no_italic</tt></li>
<li><tt class="docutils literal">shadow</tt> and <tt class="docutils literal">no_shadow</tt></li>
<li><tt class="docutils literal">standout</tt> and <tt class="docutils literal">no_standout</tt></li>
<li><tt class="docutils literal">subscript</tt> and <tt class="docutils literal">no_subscript</tt></li>
<li><tt class="docutils literal">superscript</tt> and <tt class="docutils literal">no_superscript</tt></li>
<li><tt class="docutils literal">flash</tt> (which flashes the screen once)</li>
</ul>
<p>Note that, while the inverse of <tt class="docutils literal">underline</tt> is <tt class="docutils literal">no_underline</tt>, the only way
to turn off <tt class="docutils literal">bold</tt> or <tt class="docutils literal">reverse</tt> is <tt class="docutils literal">normal</tt>, which also cancels any
custom colors. This is because there's no portable way to tell the terminal to
undo certain pieces of formatting, even at the lowest level.</p>
<p>You might also notice that the above aren't the typical incomprehensible
terminfo capability names; we alias a few of the harder-to-remember ones for
readability. However, you aren't limited to these: you can reference any
string-returning capability listed on the <a class="reference external" href="http://www.manpagez.com/man/5/terminfo/">terminfo man page</a> by the name
under the &quot;Cap-name&quot; column: for example, <tt class="docutils literal">term.rum</tt>.</p>
</div>
<div class="section" id="color">
<h2>Color</h2>
<p>16 colors, both foreground and background, are available as easy-to-remember
attributes:</p>
<pre class="literal-block">
from blessings import Terminal

term = Terminal()
print term.red + term.on_green + 'Red on green? Ick!' + term.normal
print term.bright_red + term.on_bright_blue + 'This is even worse!' + term.normal
</pre>
<p>You can also call them as wrappers, which sets everything back to normal at the
end:</p>
<pre class="literal-block">
print term.red_on_green('Red on green? Ick!')
print term.yellow('I can barely see it.')
</pre>
<p>The available colors are...</p>
<ul class="simple">
<li><tt class="docutils literal">black</tt></li>
<li><tt class="docutils literal">red</tt></li>
<li><tt class="docutils literal">green</tt></li>
<li><tt class="docutils literal">yellow</tt></li>
<li><tt class="docutils literal">blue</tt></li>
<li><tt class="docutils literal">magenta</tt></li>
<li><tt class="docutils literal">cyan</tt></li>
<li><tt class="docutils literal">white</tt></li>
</ul>
<p>You can set the background color instead of the foreground by prepending
<tt class="docutils literal">on_</tt>, as in <tt class="docutils literal">on_blue</tt>. There is also a <tt class="docutils literal">bright</tt> version of each color:
for example, <tt class="docutils literal">on_bright_blue</tt>.</p>
<p>There is also a numerical interface to colors, which takes an integer from
0-15:</p>
<pre class="literal-block">
term.color(5) + 'Hello' + term.normal
term.on_color(3) + 'Hello' + term.normal

term.color(5)('Hello')
term.on_color(3)('Hello')
</pre>
<p>If some color is unsupported (for instance, if only the normal colors are
available, not the bright ones), trying to use it will, on most terminals, have
no effect: the foreground and background colors will stay as they were. You can
get fancy and do different things depending on the supported colors by checking
<a class="reference external" href="http://packages.python.org/blessings/#blessings.Terminal.number_of_colors">number_of_colors</a>.</p>
</div>
<div class="section" id="compound-formatting">
<h2>Compound Formatting</h2>
<p>If you want to do lots of crazy formatting all at once, you can just mash it
all together:</p>
<pre class="literal-block">
from blessings import Terminal

term = Terminal()
print term.bold_underline_green_on_yellow + 'Woo' + term.normal
</pre>
<p>Or you can use your newly coined attribute as a wrapper, which implicitly sets
everything back to normal afterward:</p>
<pre class="literal-block">
print term.bold_underline_green_on_yellow('Woo')
</pre>
<p>This compound notation comes in handy if you want to allow users to customize
the formatting of your app: just have them pass in a format specifier like
&quot;bold_green&quot; on the command line, and do a quick <tt class="docutils literal">getattr(term,
<span class="pre">that_option)('Your</span> text')</tt> when you do your formatting.</p>
<p>I'd be remiss if I didn't credit <a class="reference external" href="http://pypi.python.org/pypi/couleur">couleur</a>, where I probably got the idea for
all this mashing.</p>
</div>
<div class="section" id="moving-the-cursor">
<h2>Moving The Cursor</h2>
<p>When you want to move the cursor to output text at a specific spot, you have
a few choices.</p>
<div class="section" id="moving-temporarily">
<h3>Moving Temporarily</h3>
<p>Most often, you'll need to flit to a certain location, print something, and
then return: for example, when updating a progress bar at the bottom of the
screen. <tt class="docutils literal">Terminal</tt> provides a context manager for doing this concisely:</p>
<pre class="literal-block">
from blessings import Terminal

term = Terminal()
with term.location(0, term.height - 1):
    print 'Here is the bottom.'
print 'This is back where I came from.'
</pre>
<p>Parameters to <tt class="docutils literal">location()</tt> are <tt class="docutils literal">x</tt> and then <tt class="docutils literal">y</tt>, but you can also pass
just one of them, leaving the other alone. For example...</p>
<pre class="literal-block">
with term.location(y=10):
    print 'We changed just the row.'
</pre>
<p>If you're doing a series of <tt class="docutils literal">move</tt> calls (see below) and want to return the
cursor to its original position afterward, call <tt class="docutils literal">location()</tt> with no
arguments, and it will do only the position restoring:</p>
<pre class="literal-block">
with term.location():
    print term.move(1, 1) + 'Hi'
    print term.move(9, 9) + 'Mom'
</pre>
<p>Note that, since <tt class="docutils literal">location()</tt> uses the terminal's built-in
position-remembering machinery, you can't usefully nest multiple calls. Use
<tt class="docutils literal">location()</tt> at the outermost spot, and use simpler things like <tt class="docutils literal">move</tt>
inside.</p>
</div>
<div class="section" id="moving-permanently">
<h3>Moving Permanently</h3>
<p>If you just want to move and aren't worried about returning, do something like
this:</p>
<pre class="literal-block">
from blessings import Terminal

term = Terminal()
print term.move(10, 1) + 'Hi, mom!'
</pre>
<dl class="docutils">
<dt><tt class="docutils literal">move</tt></dt>
<dd>Position the cursor elsewhere. Parameters are y coordinate, then x
coordinate.</dd>
<dt><tt class="docutils literal">move_x</tt></dt>
<dd>Move the cursor to the given column.</dd>
<dt><tt class="docutils literal">move_y</tt></dt>
<dd>Move the cursor to the given row.</dd>
</dl>
<p>How does all this work? These are simply more terminal capabilities, wrapped to
give them nicer names. The added wrinkle--that they take parameters--is also
given a pleasant treatment: rather than making you dig up <tt class="docutils literal">tparm()</tt> all the
time, we simply make these capabilities into callable strings. You'd get the
raw capability strings if you were to just print them, but they're fully
parametrized if you pass params to them as if they were functions.</p>
<p>Consequently, you can also reference any other string-returning capability
listed on the <a class="reference external" href="http://www.manpagez.com/man/5/terminfo/">terminfo man page</a> by its name under the &quot;Cap-name&quot; column.</p>
</div>
<div class="section" id="one-notch-movement">
<h3>One-Notch Movement</h3>
<p>Finally, there are some parameterless movement capabilities that move the
cursor one character in various directions:</p>
<ul class="simple">
<li><tt class="docutils literal">move_left</tt></li>
<li><tt class="docutils literal">move_right</tt></li>
<li><tt class="docutils literal">move_up</tt></li>
<li><tt class="docutils literal">move_down</tt></li>
</ul>
<p>For example...</p>
<pre class="literal-block">
print term.move_up + 'Howdy!'
</pre>
</div>
</div>
<div class="section" id="height-and-width">
<h2>Height And Width</h2>
<p>It's simple to get the height and width of the terminal, in characters:</p>
<pre class="literal-block">
from blessings import Terminal

term = Terminal()
height = term.height
width = term.width
</pre>
<p>These are newly updated each time you ask for them, so they're safe to use from
SIGWINCH handlers.</p>
</div>
<div class="section" id="clearing-the-screen">
<h2>Clearing The Screen</h2>
<p>Blessings provides syntactic sugar over some screen-clearing capabilities:</p>
<dl class="docutils">
<dt><tt class="docutils literal">clear</tt></dt>
<dd>Clear the whole screen.</dd>
<dt><tt class="docutils literal">clear_eol</tt></dt>
<dd>Clear to the end of the line.</dd>
<dt><tt class="docutils literal">clear_bol</tt></dt>
<dd>Clear backward to the beginning of the line.</dd>
<dt><tt class="docutils literal">clear_eos</tt></dt>
<dd>Clear to the end of screen.</dd>
</dl>
</div>
<div class="section" id="full-screen-mode">
<h2>Full-Screen Mode</h2>
<p>Perhaps you have seen a full-screen program, such as an editor, restore the
exact previous state of the terminal upon exiting, including, for example, the
command-line prompt from which it was launched. Curses pretty much forces you
into this behavior, but Blessings makes it optional. If you want to do the
state-restoration thing, use these capabilities:</p>
<dl class="docutils">
<dt><tt class="docutils literal">enter_fullscreen</tt></dt>
<dd>Switch to the terminal mode where full-screen output is sanctioned. Print
this before you do any output.</dd>
<dt><tt class="docutils literal">exit_fullscreen</tt></dt>
<dd>Switch back to normal mode, restoring the exact state from before
<tt class="docutils literal">enter_fullscreen</tt> was used.</dd>
</dl>
<p>Using <tt class="docutils literal">exit_fullscreen</tt> will wipe away any trace of your program's output, so
reserve it for when you don't want to leave anything behind in the scrollback.</p>
<p>There's also a context manager you can use as a shortcut:</p>
<pre class="literal-block">
from blessings import Terminal

term = Terminal()
with term.fullscreen():
    # Print some stuff.
</pre>
<p>Besides brevity, another advantage is that it switches back to normal mode even
if an exception is raised in the <tt class="docutils literal">with</tt> block.</p>
</div>
<div class="section" id="pipe-savvy">
<h2>Pipe Savvy</h2>
<p>If your program isn't attached to a terminal, like if it's being piped to
another command or redirected to a file, all the capability attributes on
<tt class="docutils literal">Terminal</tt> will return empty strings. You'll get a nice-looking file without
any formatting codes gumming up the works.</p>
<p>If you want to override this--like if you anticipate your program being piped
through <tt class="docutils literal">less <span class="pre">-r</span></tt>, which handles terminal escapes just fine--pass
<tt class="docutils literal">force_styling=True</tt> to the <tt class="docutils literal">Terminal</tt> constructor.</p>
<p>In any case, there is an <tt class="docutils literal">is_a_tty</tt> attribute on <tt class="docutils literal">Terminal</tt> that lets you
see whether the attached stream seems to be a terminal. If it's false, you
might refrain from drawing progress bars and other frippery, since you're
apparently headed into a pipe:</p>
<pre class="literal-block">
from blessings import Terminal

term = Terminal()
if term.is_a_tty:
    with term.location(0, term.height - 1):
        print 'Progress: [=======&gt;   ]'
print term.bold('Important stuff')
</pre>
</div>
</div>
<div class="section" id="shopping-list">
<h1>Shopping List</h1>
<p>There are decades of legacy tied up in terminal interaction, so attention to
detail and behavior in edge cases make a difference. Here are some ways
Blessings has your back:</p>
<ul class="simple">
<li>Uses the terminfo database so it works with any terminal type</li>
<li>Provides up-to-the-moment terminal height and width, so you can respond to
terminal size changes (SIGWINCH signals). (Most other libraries query the
<tt class="docutils literal">COLUMNS</tt> and <tt class="docutils literal">LINES</tt> environment variables or the <tt class="docutils literal">cols</tt> or <tt class="docutils literal">lines</tt>
terminal capabilities, which don't update promptly, if at all.)</li>
<li>Avoids making a mess if the output gets piped to a non-terminal</li>
<li>Works great with standard Python string templating</li>
<li>Provides convenient access to all terminal capabilities, not just a sugared
few</li>
<li>Outputs to any file-like object, not just stdout</li>
<li>Keeps a minimum of internal state, so you can feel free to mix and match with
calls to curses or whatever other terminal libraries you like</li>
</ul>
<p>Blessings does not provide...</p>
<ul class="simple">
<li>Native color support on the Windows command prompt. However, it should work
when used in concert with <a class="reference external" href="http://pypi.python.org/pypi/colorama/0.2.4">colorama</a>.</li>
</ul>
</div>
<div class="section" id="bugs">
<h1>Bugs</h1>
<p>Bugs or suggestions? Visit the <a class="reference external" href="https://github.com/erikrose/blessings/issues/">issue tracker</a>.</p>
<img alt="https://secure.travis-ci.org/erikrose/blessings.png" src="https://secure.travis-ci.org/erikrose/blessings.png" />
</div>
<div class="section" id="license">
<h1>License</h1>
<p>Blessings is under the MIT License. See the LICENSE file.</p>
</div>
<div class="section" id="version-history">
<h1>Version History</h1>
<dl class="docutils">
<dt>1.5.1</dt>
<dd><ul class="first last simple">
<li>Clean up fabfile, removing the redundant <tt class="docutils literal">test</tt> command.</li>
<li>Add Travis support.</li>
<li>Make <tt class="docutils literal">python setup.py test</tt> work without spurious errors on 2.6.</li>
<li>Work around a tox parsing bug in its config file.</li>
<li>Make context managers clean up after themselves even if there's an
exception. (Vitja Makarov)</li>
<li>Parametrizing a capability no longer crashes when there is no tty. (Vitja
Makarov)</li>
</ul>
</dd>
<dt>1.5</dt>
<dd><ul class="first last simple">
<li>Add syntactic sugar and documentation for <tt class="docutils literal">enter_fullscreen</tt> and
<tt class="docutils literal">exit_fullscreen</tt>.</li>
<li>Add context managers <tt class="docutils literal">fullscreen()</tt> and <tt class="docutils literal">hidden_cursor()</tt>.</li>
<li>Now you can force a <tt class="docutils literal">Terminal</tt> never to emit styles by passing
<tt class="docutils literal">force_styling=None</tt>.</li>
</ul>
</dd>
<dt>1.4</dt>
<dd><ul class="first last simple">
<li>Add syntactic sugar for cursor visibility control and single-space-movement
capabilities.</li>
<li>Endorse the <tt class="docutils literal">location()</tt> idiom for restoring cursor position after a
series of manual movements.</li>
<li>Fix a bug in which <tt class="docutils literal">location()</tt> wouldn't do anything when passed zeroes.</li>
<li>Allow tests to be run with <tt class="docutils literal">python setup.py test</tt>.</li>
</ul>
</dd>
<dt>1.3</dt>
<dd><ul class="first last simple">
<li>Added <tt class="docutils literal">number_of_colors</tt>, which tells you how many colors the terminal
supports.</li>
<li>Made <tt class="docutils literal">color(n)</tt> and <tt class="docutils literal">on_color(n)</tt> callable to wrap a string, like the
named colors can. Also, make them both fall back to the <tt class="docutils literal">setf</tt> and
<tt class="docutils literal">setb</tt> capabilities (like the named colors do) if the ANSI <tt class="docutils literal">setaf</tt> and
<tt class="docutils literal">setab</tt> aren't available.</li>
<li>Allowed <tt class="docutils literal">color</tt> attr to act as an unparametrized string, not just a
callable.</li>
<li>Made <tt class="docutils literal">height</tt> and <tt class="docutils literal">width</tt> examine any passed-in stream before falling
back to stdout. (This rarely if ever affects actual behavior; it's mostly
philosophical.)</li>
<li>Made caching simpler and slightly more efficient.</li>
<li>Got rid of a reference cycle between Terminals and FormattingStrings.</li>
<li>Updated docs to reflect that terminal addressing (as in <tt class="docutils literal">location()</tt>) is
0-based.</li>
</ul>
</dd>
<dt>1.2</dt>
<dd><ul class="first last simple">
<li>Added support for Python 3! We need 3.2.3 or greater, because the curses
library couldn't decide whether to accept strs or bytes before that
(<a class="reference external" href="http://bugs.python.org/issue10570">http://bugs.python.org/issue10570</a>).</li>
<li>Everything that comes out of the library is now unicode. This lets us
support Python 3 without making a mess of the code, and Python 2 should
continue to work unless you were testing types (and badly). Please file a
bug if this causes trouble for you.</li>
<li>Changed to the MIT License for better world domination.</li>
<li>Added Sphinx docs.</li>
</ul>
</dd>
<dt>1.1</dt>
<dd><ul class="first last simple">
<li>Added nicely named attributes for colors.</li>
<li>Introduced compound formatting.</li>
<li>Added wrapper behavior for styling and colors.</li>
<li>Let you force capabilities to be non-empty, even if the output stream is
not a terminal.</li>
<li>Added the <tt class="docutils literal">is_a_tty</tt> attribute for telling whether the output stream is a
terminal.</li>
<li>Sugared the remaining interesting string capabilities.</li>
<li>Let <tt class="docutils literal">location()</tt> operate on just an x <em>or</em> y coordinate.</li>
</ul>
</dd>
<dt>1.0</dt>
<dd><ul class="first last simple">
<li>Extracted Blessings from nose-progressive, my <a class="reference external" href="http://pypi.python.org/pypi/nose-progressive/">progress-bar-having,
traceback-shortcutting, rootin', tootin' testrunner</a>. It provided the
tootin' functionality.</li>
</ul>
</dd>
</dl>
</div>


<a name="downloads">&nbsp;</a>
<table class="list" style="margin-bottom: 10px;">
<tr>
  <th>File</th>
  <th>Type</th>
  <th>Py Version</th>
  <th>Uploaded on</th>
  <th style="text-align: right;">Size</th>
</tr>

<tr class="odd">

    <td>
    <span style="white-space: nowrap;">
      <a href="https://pypi.python.org/packages/source/b/blessings/blessings-1.5.1.tar.gz#md5=fbbddbf20b1f9a13e3fa612b1e086fd8">blessings-1.5.1.tar.gz</a>
      (<a title="MD5 Digest" href="/pypi?:action=show_md5&amp;digest=fbbddbf20b1f9a13e3fa612b1e086fd8">md5</a>)
    </span>
    
        </td>
  <td style="white-space: nowrap;">
    Source
  </td>
  <td>
    
  </td>
  <td>2013-08-30</td>
  <td style="text-align: right;">18KB</td>

</tr>

<tr><td id="last" colspan="6"/></tr>
  </table>

<ul class="nodot">
  <li><strong>Downloads (All Versions):</strong></li>
  <li>
    <span>298</span> downloads in the last day
  </li>
  <li>
    <span>3391</span> downloads in the last week
  </li>
  <li>
    <span>15146</span> downloads in the last month
  </li>
</ul>



<ul class="nodot">
 <li>
  <strong>Author:</strong>
  <span>Erik Rose</span>
 </li>

 

 <li>
  <strong>Documentation:</strong>
  <a href="http://pythonhosted.org//blessings">blessings package documentation</a>
 </li>

<!-- The <th> elements below are a terrible terrible hack for setuptools -->
 <li>
  <strong>Home Page:</strong>
  <!-- <th>Home Page -->
  <a href="https://github.com/erikrose/blessings">https://github.com/erikrose/blessings</a>
 </li>


 

 


 <li>
  <strong>Keywords:</strong>
  <span>terminal,tty,curses,ncurses,formatting,style,color,console</span>
 </li>

 <li>
  <strong>License:</strong>
  
  
  <span>MIT</span>
  
 </li>

 

<!-- TODO: add link to products in follow dependencies... -->
 
 
 

 <li>
  <strong>Categories</strong>
  <ul class="nodot">
   <li>
    <a href="/pypi?:action=browse&amp;c=5">Development Status :: 5 - Production/Stable</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=8">Environment :: Console</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=11">Environment :: Console :: Curses</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=30">Intended Audience :: Developers</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=69">License :: OSI Approved :: MIT License</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=104">Natural Language :: English</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=160">Operating System :: POSIX</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=527">Programming Language :: Python :: 2</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=530">Programming Language :: Python :: 2.5</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=531">Programming Language :: Python :: 2.6</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=532">Programming Language :: Python :: 2.7</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=533">Programming Language :: Python :: 3</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=538">Programming Language :: Python :: 3.2</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=417">Topic :: Software Development :: Libraries</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=433">Topic :: Software Development :: User Interfaces</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=479">Topic :: Terminals</a>
   </li>
  </ul>
 </li>



 

 

 

 

 


 <li>
  <strong>Package Index Owner:</strong>
  <span>erikrose</span>
 </li>

 

 <li>
  <strong><a href="http://usefulinc.com/doap">DOAP</a> record:</strong>
  <a href="/pypi?:action=doap&amp;name=blessings&amp;version=1.5.1">blessings-1.5.1.xml</a>
 </li>

</ul>





            </div>


          </div>
          <div id="footer"><div id="credits">
            <a href="http://www.python.org/about/website">Website maintained by the Python community</a><br/>
            <a href="https://www.fastly.com/" title="Real-time CDN services provided by Fastly">Real-time CDN by Fastly</a> /
            <a href="http://developer.rackspace.com/" title="Server hosting by Rackspace Open Source support">hosting by Rackspace</a> /
            <a href="http://www.timparkin.co.uk/" title="Design by Tim Parkin, Yorkshire man, photographer and developer">design by Tim Parkin</a>
          </div>
          Copyright © 1990-2014, <a href="http://www.python.org/psf">Python Software Foundation</a><br/>
          <a href="http://www.python.org/about/legal">Legal Statements</a>

          </div>
        </div>
      </div>

      <script type="text/javascript">
        // <![CDATA[
            var _gauges = _gauges || [];
            (function() {
              var t   = document.createElement('script');
              t.type  = 'text/javascript';
              t.async = true;
              t.id    = 'gauges-tracker';
              t.setAttribute('data-site-id', '5255e08ef5a1f57520000004');
              t.src = '//secure.gaug.es/track.js';
              var s = document.getElementsByTagName('script')[0];
              s.parentNode.insertBefore(t, s);
            })();
        // ]]>
      </script>

      <script type="text/javascript" src="//statuspage-production.s3.amazonaws.com/se.js">
      </script>
      <script type="text/javascript">
        window.fetchStatusPage({
          pageId: '2p66nmmycsj3',
          // <![CDATA[
          successCallback: function(data) {
            if (data.incidents.length > 0) {
              var div = document.getElementById('statusdiv');
              var reports = "</br><h4 id='statusbox'>Status</h4>\n";
              var outage = 0;
              var maintenance = 0;
              for (i in data.incidents) {
                var incident = data.incidents[i];
                var message, status = incident.status;
                if (status === 'scheduled') {
                  message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' scheduled.</a></li>\n';
                  reports += message;
                  maintenance += 1;
                } else if (status === 'in_progress') {
                  message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' is currently in progress.' + '</a></li>\n';
                  reports += message;
                  maintenance += 1;
                } else if (status !== 'resolved' && status !== 'postmortem' && status !== 'completed') {
                  message = '<li><a href="' + incident.shortlink + '">' + incident.name + ': ' + incident.status + '</a></li>\n';
                  reports += message;
                  outage += 1;
                }
              }
              if (outage + maintenance === 0) {
                reports += "<li><a href='http://status.python.org'>Nothing to report</a></li>";
              }
              div.innerHTML=reports;
              if (outage > 0) {
                var statusbox = document.getElementById("statusbox");
                statusbox.style.background = '#FC234A';
              }
            }
          }
          // ]]>
        });
      </script>

    </body>
  </html>

