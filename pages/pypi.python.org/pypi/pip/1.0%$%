<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

  <html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
    <head>
      
      <meta content="text/html; charset=utf-8" http-equiv="content-type"/>
      <title>pip 1.0 : Python Package Index</title>
      <meta content="easy_install distutils setuptools egg virtualenv"/>
      <meta content="pip installs packages. Python packages. An easy_install replacement"/>
       <link rel="alternate" type="application/rss+xml" title="RSS: 40 latest updates" href="https://pypi.python.org/pypi?:action=rss"/>
       <link rel="alternate" type="application/rss+xml" title="RSS: 40 newest packages" href="https://pypi.python.org/pypi?:action=packages_rss"/>
       <link rel="stylesheet" media="screen" href="/static/styles/screen-switcher-default.css" type="text/css"/>
       <link media="screen" href="/static/styles/netscape4.css" type="text/css" rel="stylesheet"/>
       <link media="print" href="/static/styles/print.css" type="text/css" rel="stylesheet"/>
       <link media="screen" href="/static/styles/largestyles.css" type="text/css" rel="alternate stylesheet" title="large text"/>
       <link media="screen" href="/static/styles/defaultfonts.css" type="text/css" rel="alternate stylesheet" title="default fonts"/>
       <link rel="stylesheet" media="screen" href="/static/css/docutils.css" type="text/css"/>
       <link rel="stylesheet" media="screen" href="/static/css/pygments.css" type="text/css"/>

       <!-- allow pypi to override the standard pydotorg/docutils/etc. styles -->
       <link rel="stylesheet" href="/static/css/pypi.css" type="text/css"/>
       <link media="screen" rel="stylesheet" href="/static/css/pypi-screen.css" type="text/css"/>

       
 <meta name="keywords" content="easy_install distutils setuptools egg virtualenv"/>
 <meta name="description" content="pip installs packages. Python packages. An easy_install replacement"/>
 <link rel="meta" title="DOAP" type="application/rdf+xml" href="/pypi?:action=doap&amp;name=pip&amp;version=1.0"/>
 <style type="text/css">
  table.form th {white-space: pre;}
 </style>


       <style type="text/css">
       </style>
    </head>
    <body>
     

      <!--  Logo  -->
      <h1 id="logoheader">
       <a accesskey="1" href="http://www.python.org" id="logolink">
          <img src="/static/images/python-logo.png" alt="homepage" border="0" id="logo"/>
       </a>
      </h1>
      <!--  Skip to Navigation  -->
      <div class="skiptonav"><a accesskey="2" href="#left-hand-navigation"><img src="/static/images/trans.gif" alt="skip to navigation" border="0" id="skiptonav"/></a></div>
      <div class="skiptonav"><a accesskey="3" href="#content-body"><img src="/static/images/trans.gif" alt="skip to content" border="0" id="skiptocontent"/></a></div>
      <!--  Utility Menu  -->

      <div id="utility-menu">
        <!--  Search Box  -->
        <div id="searchbox">
          <form id="searchform" method="get" name="searchform" action="/pypi">
            <input type="hidden" name=":action" value="search"/>
            <div id="search">
              <input class="input-text" id="term" name="term" autofocus="autofocus"/>
              <input class="input-button" type="submit" name="submit" value="search" id="submit"/>
            </div>
          </form>
        </div>
<!-- XXX: reinstate this       <div id="screen-switcher"></div> -->
      </div>
      <div id="left-hand-navigation">

        <!--  Main Menu NEED LEVEL TWO HEADER AND FOOTER -->
        <div id="menu">
          <ul class="level-one">
            <li class="selected">
              <a class="selected" href="/pypi">Package Index</a>

              <ul class="level-two">

                
                  <li class=""><a class="" href="/pypi?%3Aaction=browse">Browse&nbsp;packages</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=submit_form">Package&nbsp;submission</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=list_classifiers">List&nbsp;trove&nbsp;classifiers</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=index">List&nbsp;packages</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=rss">RSS&nbsp;(latest&nbsp;40&nbsp;updates)</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=packages_rss">RSS&nbsp;(newest&nbsp;40&nbsp;packages)</a></li>
                
		<li><a href="/pypi?:action=browse&amp;c=533&amp;show=all">Python 3 Packages</a></li>
        <li><a href="http://wiki.python.org/moin/CheeseShopTutorial">PyPI Tutorial</a></li>
        <li><a href="/security">PyPI Security</a></li>
        <li><a href="http://sourceforge.net/tracker/?group_id=66150&amp;atid=513504">PyPI Support</a></li>
        <li><a href="https://bitbucket.org/pypa/pypi/issues">PyPI Bug Reports</a></li>
        <li><a href="http://www.python.org/sigs/distutils-sig/">PyPI Discussion</a></li>
        <li><a href="http://wiki.python.org/moin/CheeseShopDev">PyPI Developer Info</a></li>
       </ul>

            </li>




            <li class=""><a href="http://www.python.org/about" class="" title="About The Python Language">About</a>
            </li><li class=""><a href="http://www.python.org/news" class="" title="">News</a>
            </li><li class=""><a href="http://www.python.org/doc" class="" title="">Documentation</a>
            </li><li class=""><a href="http://www.python.org/download" title="">Download</a>


            </li><li class=""><a href="http://www.python.org/community" class="" title="">Community</a>
            </li><li class=""><a href="http://www.python.org/psf" class="" title="Python Software Foundation">Foundation</a>
            </li><li class=""><a href="http://www.python.org/dev" class="" title="Python Core Language Development">Core Development</a>
            </li><li class=""><a href="http://www.python.org/links" class="" title="">Links</a>
          </li>
          </ul>
        </div>

      </div>
      <div id="content-body">
        <div id="body-main">
          <div id="content">

            <div id="breadcrumb">
              <a href="/pypi">Package Index</a>
              
                <span class="breadcrumb-separator">&gt;</span>
                <a href="/pypi/pip">pip</a>
              
              
                <span class="breadcrumb-separator">&gt;</span>
                <a href="/pypi/pip/1.0">1.0</a>
              

            </div>

            <div id="document-floating">

            <div id="document-navigation" style="overflow-y: auto; max-height: 15em; overflow-x: hidden;">
		
                  <h4>Not Logged In</h4>

                  <ul>
		    
                    <li><a href="/pypi?%3Aaction=login">Login</a></li>
                    <li><a href="/pypi?%3Aaction=register_form">Register</a></li>
                    <li><a href="/pypi?%3Aaction=forgotten_password_form">Lost Login?</a></li>
		    <li>Use <a href="/pypi?:action=openid">OpenID</a>
                      
                        <a style="border: none;" href="/pypi?:action=login&amp;provider=Google"><img width="16" height="16" src="https://www.google.com/favicon.ico" alt="Google" title="Google"/></a>
                      
                      
                        <a style="border: none;" href="/pypi?:action=login&amp;provider=myOpenID"><img width="16" height="16" src="https://www.myopenid.com/favicon.ico" alt="myOpenID" title="myOpenID"/></a>
                      
                      
                        <a style="border: none;" href="/pypi?:action=login&amp;provider=Launchpad"><img width="16" height="16" src="https://launchpad.net/@@/launchpad.png" alt="Launchpad" title="Launchpad"/></a>
                      
                    </li>
                  </ul>

		

		

                <div id="statusdiv">
                </div>
            </div>
        </div>
        


            <div class="section">
              <h1>pip 1.0</h1>

              
<div id="download-button">
 
  <a class="button green" style="float:right;" href="https://pypi.python.org/packages/source/p/pip/pip-1.0.tar.gz">Download<br/>
    <span style="font-size: 75%">pip-1.0.tar.gz</span>
  </a>
 
 
</div>

<p style="font-style: italic">pip installs packages. Python packages. An easy_install replacement</p>



<p>
<strong>Latest Version: </strong><a title="Latest Version URL" href="https://pypi.python.org/pypi/pip/1.5.6">
<span>1.5.6</span>
</a>
</p>




<p>The main website for pip is <a class="reference external" href="http://www.pip-installer.org">www.pip-installer.org</a>.  You can also install
the <a class="reference external" href="https://github.com/pypa/pip/tarball/develop#egg=pip-dev">in-development version</a>
of pip with <tt class="docutils literal">easy_install <span class="pre">pip==dev</span></tt>.</p>
<div class="section" id="introduction">
<h1>Introduction</h1>
<p>pip installs packages.  Python packages.</p>
<p>If you use <a class="reference external" href="http://virtualenv.openplans.org">virtualenv</a> -- a tool
for installing libraries in a local and isolated manner -- you'll
automatically get a copy of pip.  Free bonus!</p>
<p>Once you have pip, you can use it like this:</p>
<pre class="literal-block">
$ pip install SomePackage
</pre>
<p>SomePackage is some package you'll find on <a class="reference external" href="http://pypi.python.org/pypi/">PyPI</a>.  This installs the package and all
its dependencies.</p>
<p>pip does other stuff too, with packages, but install is the biggest
one.  You can <tt class="docutils literal">pip uninstall</tt> too.</p>
<p>You can also install from a URL (that points to a tar or zip file),
install from some version control system (use URLs like
<tt class="docutils literal"><span class="pre">hg+http://domain/repo</span></tt> -- or prefix <tt class="docutils literal">git+</tt>, <tt class="docutils literal">svn+</tt> etc).  pip
knows a bunch of stuff about revisions and stuff, so if you need to do
things like install a very specific revision from a repository pip can
do that too.</p>
<p>If you've ever used <tt class="docutils literal">python setup.py develop</tt>, you can do something
like that with <tt class="docutils literal">pip install <span class="pre">-e</span> ./</tt> -- this works with packages that
use <tt class="docutils literal">distutils</tt> too (usually this only works with Setuptools
projects).</p>
<p>You can use <tt class="docutils literal">pip install <span class="pre">--upgrade</span> SomePackage</tt> to upgrade to a
newer version, or <tt class="docutils literal">pip install <span class="pre">SomePackage==1.0.4</span></tt> to install a very
specific version.</p>
</div>
<div class="section" id="pip-compared-to-easy-install">
<h1>Pip Compared To easy_install</h1>
<p>pip is a replacement for <a class="reference external" href="http://peak.telecommunity.com/DevCenter/EasyInstall">easy_install</a>.  It uses mostly the
same techniques for finding packages, so packages that were made
easy_installable should be pip-installable as well.</p>
<p>pip is meant to improve on easy_install.  Some of the improvements:</p>
<ul class="simple">
<li>All packages are downloaded before installation.  Partially-completed
installation doesn't occur as a result.</li>
<li>Care is taken to present useful output on the console.</li>
<li>The reasons for actions are kept track of.  For instance, if a package is
being installed, pip keeps track of why that package was required.</li>
<li>Error messages should be useful.</li>
<li>The code is relatively concise and cohesive, making it easier to use
programmatically.</li>
<li>Packages don't have to be installed as egg archives, they can be installed
flat (while keeping the egg metadata).</li>
<li>Native support for other version control systems (Git, Mercurial and Bazaar)</li>
<li>Uninstallation of packages.</li>
<li>Simple to define fixed sets of requirements and reliably reproduce a
set of packages.</li>
</ul>
<p>pip doesn't do everything that easy_install does. Specifically:</p>
<ul class="simple">
<li>It cannot install from eggs.  It only installs from source.  (In the
future it would be good if it could install binaries from Windows <tt class="docutils literal">.exe</tt>
or <tt class="docutils literal">.msi</tt> -- binary install on other platforms is not a priority.)</li>
<li>It doesn't understand Setuptools extras (like <tt class="docutils literal">package[test]</tt>).  This should
be added eventually.</li>
<li>It is incompatible with some packages that extensively customize distutils
or setuptools in their <tt class="docutils literal">setup.py</tt> files.</li>
</ul>
<p>pip is complementary with <a class="reference external" href="http://pypi.python.org/pypi/virtualenv">virtualenv</a>, and it is encouraged that you use
virtualenv to isolate your installation.</p>
</div>
<div class="section" id="community">
<h1>Community</h1>
<p>The homepage for pip is temporarily located <a class="reference external" href="http://pypi.python.org/pypi/pip">on PyPI</a> -- a more proper homepage will
follow.  Bugs can go on the <a class="reference external" href="https://github.com/pypa/pip/issues/">pip issue tracker</a>.  Discussion should happen on the
<a class="reference external" href="http://groups.google.com/group/python-virtualenv?hl=en">virtualenv email group</a>.</p>
</div>
<div class="section" id="uninstall">
<h1>Uninstall</h1>
<p>pip is able to uninstall most installed packages with <tt class="docutils literal">pip uninstall
<span class="pre">package-name</span></tt>.</p>
<p>Known exceptions include pure-distutils packages installed with
<tt class="docutils literal">python setup.py install</tt> (such packages leave behind no metadata allowing
determination of what files were installed), and script wrappers installed
by develop-installs (<tt class="docutils literal">python setup.py develop</tt>).</p>
<p>pip also performs an automatic uninstall of an old version of a package
before upgrading to a newer version, so outdated files (and egg-info data)
from conflicting versions aren't left hanging around to cause trouble. The
old version of the package is automatically restored if the new version
fails to download or install.</p>
</div>
<div class="section" id="requirements-files">
<span id="requirements-file"></span><h1>Requirements Files</h1>
<p>When installing software, and Python packages in particular, it's common that
you get a lot of libraries installed.  You just did <tt class="docutils literal">easy_install MyPackage</tt>
and you get a dozen packages.  Each of these packages has its own version.</p>
<p>Maybe you ran that installation and it works.  Great!  Will it keep working?
Did you have to provide special options to get it to find everything?  Did you
have to install a bunch of other optional pieces?  Most of all, will you be able
to do it again?  Requirements files give you a way to create an <em>environment</em>:
a <em>set</em> of packages that work together.</p>
<p>If you've ever tried to setup an application on a new system, or with slightly
updated pieces, and had it fail, pip requirements are for you.  If you
haven't had this problem then you will eventually, so pip requirements are
for you too -- requirements make explicit, repeatable installation of packages.</p>
<p>So what are requirements files?  They are very simple: lists of packages to
install.  Instead of running something like <tt class="docutils literal">pip MyApp</tt> and getting
whatever libraries come along, you can create a requirements file something like:</p>
<pre class="literal-block">
MyApp
Framework==0.9.4
Library&gt;=0.2
</pre>
<p>Then, regardless of what MyApp lists in <tt class="docutils literal">setup.py</tt>, you'll get a
specific version of Framework (0.9.4) and at least the 0.2 version of
Library.  (You might think you could list these specific versions in
MyApp's <tt class="docutils literal">setup.py</tt> -- but if you do that you'll have to edit MyApp
if you want to try a new version of Framework, or release a new
version of MyApp if you determine that Library 0.3 doesn't work with
your application.)  You can also add optional libraries and support
tools that MyApp doesn't strictly require, giving people a set of
recommended libraries.</p>
<p>You can also include &quot;editable&quot; packages -- packages that are checked out from
Subversion, Git, Mercurial and Bazaar.  These are just like using the <tt class="docutils literal"><span class="pre">-e</span></tt>
option to pip.  They look like:</p>
<pre class="literal-block">
-e svn+http://myrepo/svn/MyApp#egg=MyApp
</pre>
<p>You have to start the URL with <tt class="docutils literal">svn+</tt> (<tt class="docutils literal">git+</tt>, <tt class="docutils literal">hg+</tt> or <tt class="docutils literal">bzr+</tt>), and
you have to include <tt class="docutils literal">#egg=Package</tt> so pip knows what to expect at that URL.
You can also include <tt class="docutils literal">&#64;rev</tt> in the URL, e.g., <tt class="docutils literal">&#64;275</tt> to check out
revision 275.</p>
<p>Requirement files are mostly <em>flat</em>.  Maybe <tt class="docutils literal">MyApp</tt> requires
<tt class="docutils literal">Framework</tt>, and <tt class="docutils literal">Framework</tt> requires <tt class="docutils literal">Library</tt>.  I encourage
you to still list all these in a single requirement file; it is the
nature of Python programs that there are implicit bindings <em>directly</em>
between MyApp and Library.  For instance, Framework might expose one
of Library's objects, and so if Library is updated it might directly
break MyApp.  If that happens you can update the requirements file to
force an earlier version of Library, and you can do that without
having to re-release MyApp at all.</p>
<p>Read the <a class="reference external" href="http://pip.openplans.org/requirement-format.html">requirements file format</a> to
learn about other features.</p>
</div>
<div class="section" id="freezing-requirements">
<h1>Freezing Requirements</h1>
<p>So you have a working set of packages, and you want to be able to install them
elsewhere.  <a class="reference internal" href="#requirements-files">Requirements files</a> let you install exact versions, but it won't
tell you what all the exact versions are.</p>
<p>To create a new requirements file from a known working environment, use:</p>
<pre class="literal-block">
$ pip freeze &gt; stable-req.txt
</pre>
<p>This will write a listing of <em>all</em> installed libraries to <tt class="docutils literal"><span class="pre">stable-req.txt</span></tt>
with exact versions for every library.  You may want to edit the file down after
generating (e.g., to eliminate unnecessary libraries), but it'll give you a
stable starting point for constructing your requirements file.</p>
<p>You can also give it an existing requirements file, and it will use that as a
sort of template for the new file.  So if you do:</p>
<pre class="literal-block">
$ pip freeze -r devel-req.txt &gt; stable-req.txt
</pre>
<p>it will keep the packages listed in <tt class="docutils literal"><span class="pre">devel-req.txt</span></tt> in order and preserve
comments.</p>
</div>
<div class="section" id="bundles">
<h1>Bundles</h1>
<p>Another way to distribute a set of libraries is a bundle format (specific to
pip).  This format is not stable at this time (there simply hasn't been
any feedback, nor a great deal of thought).  A bundle file contains all the
source for your package, and you can have pip install them all together.
Once you have the bundle file further network access won't be necessary.  To
build a bundle file, do:</p>
<pre class="literal-block">
$ pip bundle MyApp.pybundle MyApp
</pre>
<p>(Using a <a class="reference internal" href="#requirements-file">requirements file</a> would be wise.)  Then someone else can get the
file <tt class="docutils literal">MyApp.pybundle</tt> and run:</p>
<pre class="literal-block">
$ pip install MyApp.pybundle
</pre>
<p>This is <em>not</em> a binary format.  This only packages source.  If you have binary
packages, then the person who installs the files will have to have a compiler,
any necessary headers installed, etc.  Binary packages are hard, this is
relatively easy.</p>
</div>
<div class="section" id="using-pip-with-virtualenv">
<h1>Using pip with virtualenv</h1>
<p>pip is most nutritious when used with <a class="reference external" href="http://pypi.python.org/pypi/virtualenv">virtualenv</a>.  One of the reasons pip
doesn't install &quot;multi-version&quot; eggs is that virtualenv removes much of the need
for it.  Because pip is installed by virtualenv, just use
<tt class="docutils literal">path/to/my/environment/bin/pip</tt> to install things into that
specific environment.</p>
<p>To tell pip to only run if there is a virtualenv currently activated,
and to bail if not, use:</p>
<pre class="literal-block">
export PIP_REQUIRE_VIRTUALENV=true
</pre>
<p>To tell pip to automatically use the currently active virtualenv:</p>
<pre class="literal-block">
export PIP_RESPECT_VIRTUALENV=true
</pre>
<p>Providing an environment with <tt class="docutils literal"><span class="pre">-E</span></tt> will be ignored.</p>
</div>
<div class="section" id="using-pip-with-virtualenvwrapper">
<h1>Using pip with virtualenvwrapper</h1>
<p>If you are using <a class="reference external" href="http://www.doughellmann.com/projects/virtualenvwrapper/">virtualenvwrapper</a>, you might
want pip to automatically create its virtualenvs in your
<tt class="docutils literal">$WORKON_HOME</tt>.</p>
<p>You can tell pip to do so by defining <tt class="docutils literal">PIP_VIRTUALENV_BASE</tt> in your
environment and setting it to the same value as that of
<tt class="docutils literal">$WORKON_HOME</tt>.</p>
<p>Do so by adding the line:</p>
<pre class="literal-block">
export PIP_VIRTUALENV_BASE=$WORKON_HOME
</pre>
<p>in your .bashrc under the line starting with <tt class="docutils literal">export WORKON_HOME</tt>.</p>
</div>
<div class="section" id="using-pip-with-buildout">
<h1>Using pip with buildout</h1>
<p>If you are using <a class="reference external" href="http://pypi.python.org/pypi/zc.buildout">zc.buildout</a> you should look at
<a class="reference external" href="http://pypi.python.org/pypi/gp.recipe.pip">gp.recipe.pip</a> as an
option to use pip and virtualenv in your buildouts.</p>
</div>
<div class="section" id="command-line-completion">
<h1>Command line completion</h1>
<p>pip comes with support for command line completion in bash and zsh and
allows you tab complete commands and options. To enable it you simply
need copy the required shell script to the your shell startup file
(e.g. <tt class="docutils literal">.profile</tt> or <tt class="docutils literal">.zprofile</tt>) by running the special <tt class="docutils literal">completion</tt>
command, e.g. for bash:</p>
<pre class="literal-block">
$ pip completion --bash &gt;&gt; ~/.profile
</pre>
<p>And for zsh:</p>
<pre class="literal-block">
$ pip completion --zsh &gt;&gt; ~/.zprofile
</pre>
<p>Alternatively, you can use the result of the <tt class="docutils literal">completion</tt> command
directly with the eval function of you shell, e.g. by adding:</p>
<pre class="literal-block">
eval &quot;`pip completion --bash`&quot;
</pre>
<p>to your startup file.</p>
</div>
<div class="section" id="searching-for-packages">
<h1>Searching for packages</h1>
<p>pip can search the <a class="reference external" href="http://pypi.python.org/pypi">Python Package Index</a> (PyPI)
for packages using the <tt class="docutils literal">pip search</tt> command. To search, run:</p>
<pre class="literal-block">
$ pip search &quot;query&quot;
</pre>
<p>The query will be used to search the names and summaries of all packages
indexed.</p>
<p>pip searches <a class="reference external" href="http://pypi.python.org/pypi">http://pypi.python.org/pypi</a> by default but alternative indexes
can be searched by using the <tt class="docutils literal"><span class="pre">--index</span></tt> flag.</p>
</div>
<div class="section" id="mirror-support">
<h1>Mirror support</h1>
<p>The <a class="reference external" href="http://pypi.python.org/mirrors">PyPI mirroring infrastructure</a> as
described in <a class="reference external" href="http://www.python.org/dev/peps/pep-0381/">PEP 381</a> can be
used by passing the <tt class="docutils literal"><span class="pre">--use-mirrors</span></tt> option to the install command.
Alternatively, you can use the other ways to configure pip, e.g.:</p>
<pre class="literal-block">
$ export PIP_USE_MIRRORS=true
</pre>
<p>If enabled, pip will automatically query the DNS entry of the mirror index URL
to find the list of mirrors to use. In case you want to override this list,
please use the <tt class="docutils literal"><span class="pre">--mirrors</span></tt> option of the install command, or add to your pip
configuration file:</p>
<pre class="literal-block">
[install]
use-mirrors = true
mirrors =
    http://d.pypi.python.org
    http://b.pypi.python.org
</pre>
<div class="section" id="news-changelog">
<h2>News / Changelog</h2>
</div>
</div>
<div class="section" id="id1">
<h1>1.0</h1>
<ul>
<li><p class="first">Added Python 3 support! Huge thanks to Vinay Sajip, Vitaly Babiy, Kelsey
Hightower, and Alex Gronholm, among others.</p>
</li>
<li><p class="first">Download progress only shown on a real TTY. Thanks Alex Morega.</p>
</li>
<li><p class="first">Fixed finding of VCS binaries to not be fooled by same-named directories.
Thanks Alex Morega.</p>
</li>
<li><p class="first">Fixed uninstall of packages from system Python for users of Debian/Ubuntu
python-setuptools package (workaround until fixed in Debian and Ubuntu).</p>
</li>
<li><p class="first">Added <a class="reference external" href="https://github.com/pypa/pip/raw/master/contrib/get-pip.py">get-pip.py</a>
installer. Simple download and execute it, using the Python interpreter of
your choice:</p>
<pre class="literal-block">
$ curl -O https://github.com/pypa/pip/raw/master/contrib/get-pip.py
$ python get-pip.py
</pre>
<p>This may have to be run as root.</p>
<div class="note">
<p class="first admonition-title">Note</p>
<p class="last">Make sure you have <a class="reference external" href="http://pypi.python.org/pypi/distribute">distribute</a>
installed before using the installer!</p>
</div>
</li>
</ul>
</div>
<div class="section" id="id2">
<h1>0.8.3</h1>
<ul class="simple">
<li>Moved main repository to Github: <a class="reference external" href="https://github.com/pypa/pip">https://github.com/pypa/pip</a></li>
<li>Transferred primary maintenance from Ian to Jannis Leidel, Carl Meyer, Brian Rosner</li>
<li>Fixed issue #14 - No uninstall-on-upgrade with URL package. Thanks Oliver Tonnhofer</li>
<li>Fixed issue #163 - Egg name not properly resolved. Thanks Igor Sobreira</li>
<li>Fixed issue #178 - Non-alphabetical installation of requirements. Thanks Igor Sobreira</li>
<li>Fixed issue #199 - Documentation mentions --index instead of --index-url. Thanks Kelsey Hightower</li>
<li>Fixed issue #204 - rmtree undefined in mercurial.py. Thanks Kelsey Hightower</li>
<li>Fixed bug in Git vcs backend that would break during reinstallation.</li>
<li>Fixed bug in Mercurial vcs backend related to pip freeze and branch/tag resolution.</li>
<li>Fixed bug in version string parsing related to the suffix &quot;-dev&quot;.</li>
</ul>
</div>
<div class="section" id="id3">
<h1>0.8.2</h1>
<ul>
<li><p class="first">Avoid redundant unpacking of bundles (from pwaller)</p>
</li>
<li><p class="first">Fixed issue #32, #150, #161 - Fixed checking out the correct
tag/branch/commit when updating an editable Git requirement.</p>
</li>
<li><p class="first">Fixed issue #49 - Added ability to install version control requirements
without making them editable, e.g.:</p>
<pre class="literal-block">
pip install git+https://github.com/pypa/pip/
</pre>
</li>
<li><p class="first">Fixed issue #175 - Correctly locate build and source directory on Mac OS X.</p>
</li>
<li><p class="first">Added <tt class="docutils literal"><span class="pre">git+https://</span></tt> scheme to Git VCS backend.</p>
</li>
</ul>
</div>
<div class="section" id="id4">
<h1>0.8.1</h1>
<ul class="simple">
<li>Added global --user flag as shortcut for --install-option=&quot;--user&quot;. From
Ronny Pfannschmidt.</li>
<li>Added support for <a class="reference external" href="http://pypi.python.org/mirrors">PyPI mirrors</a> as
defined in <a class="reference external" href="http://www.python.org/dev/peps/pep-0381/">PEP 381</a>, from
Jannis Leidel.</li>
<li>Fixed issue #138 - Git revisions ignored. Thanks John-Scott Atlakson.</li>
<li>Fixed issue #95 - Initial editable install of github package from a tag fails. Thanks John-Scott Atlakson.</li>
<li>Fixed issue #107 - Can't install if a directory in cwd has the same name as the package you're installing.</li>
<li>Fixed issue #39 - --install-option=&quot;--prefix=~/.local&quot; ignored with -e.
Thanks Ronny Pfannschmidt and Wil Tan.</li>
</ul>
</div>
<div class="section" id="id6">
<h1>0.8</h1>
<ul class="simple">
<li>Track which <tt class="docutils literal">build/</tt> directories pip creates, never remove directories
it doesn't create.  From Hugo Lopes Tavares.</li>
<li>Pip now accepts <a class="reference external" href="file://">file://</a> index URLs. Thanks Dave Abrahams.</li>
<li>Various cleanup to make test-running more consistent and less fragile.
Thanks Dave Abrahams.</li>
<li>Real Windows support (with passing tests). Thanks Dave Abrahams.</li>
<li><tt class="docutils literal"><span class="pre">pip-2.7</span></tt> etc. scripts are created (Python-version specific scripts)</li>
<li><tt class="docutils literal"><span class="pre">contrib/build-standalone</span></tt> script creates a runnable <tt class="docutils literal">.zip</tt> form of
pip, from Jannis Leidel</li>
<li>Editable git repos are updated when reinstalled</li>
<li>Fix problem with <tt class="docutils literal"><span class="pre">--editable</span></tt> when multiple <tt class="docutils literal"><span class="pre">.egg-info/</span></tt> directories
are found.</li>
<li>A number of VCS-related fixes for <tt class="docutils literal">pip freeze</tt>, from Hugo Lopes Tavares.</li>
<li>Significant test framework changes, from Hugo Lopes Tavares.</li>
</ul>
</div>
<div class="section" id="id7">
<h1>0.7.2</h1>
<ul class="simple">
<li>Set zip_safe=False to avoid problems some people are encountering where
pip is installed as a zip file.</li>
</ul>
</div>
<div class="section" id="id8">
<h1>0.7.1</h1>
<ul class="simple">
<li>Fixed opening of logfile with no directory name. Thanks Alexandre Conrad.</li>
<li>Temporary files are consistently cleaned up, especially after
installing bundles, also from Alex Conrad.</li>
<li>Tests now require at least ScriptTest 1.0.3.</li>
</ul>
</div>
<div class="section" id="id9">
<h1>0.7</h1>
<ul class="simple">
<li>Fixed uninstallation on Windows</li>
<li>Added <tt class="docutils literal">pip search</tt> command.</li>
<li>Tab-complete names of installed distributions for <tt class="docutils literal">pip uninstall</tt>.</li>
<li>Support tab-completion when there is a global-option before the
subcommand.</li>
<li>Install header files in standard (scheme-default) location when installing
outside a virtualenv. Install them to a slightly more consistent
non-standard location inside a virtualenv (since the standard location is
a non-writable symlink to the global location).</li>
<li>pip now logs to a central location by default (instead of creating
<tt class="docutils literal"><span class="pre">pip-log.txt</span></tt> all over the place) and constantly overwrites the
file in question. On Unix and Mac OS X this is <tt class="docutils literal"><span class="pre">'$HOME/.pip/pip.log'</span></tt>
and on Windows it's <tt class="docutils literal"><span class="pre">'%HOME%\\pip\\pip.log'</span></tt>. You are still able to
override this location with the <tt class="docutils literal">$PIP_LOG_FILE</tt> environment variable.
For a complete (appended) logfile use the separate <tt class="docutils literal"><span class="pre">'--log'</span></tt> command line
option.</li>
<li>Fixed an issue with Git that left an editable packge as a checkout of a
remote branch, even if the default behaviour would have been fine, too.</li>
<li>Fixed installing from a Git tag with older versions of Git.</li>
<li>Expand &quot;~&quot; in logfile and download cache paths.</li>
<li>Speed up installing from Mercurial repositories by cloning without
updating the working copy multiple times.</li>
<li>Fixed installing directly from directories (e.g.
<tt class="docutils literal">pip install path/to/dir/</tt>).</li>
<li>Fixed installing editable packages with <tt class="docutils literal">svn+ssh</tt> URLs.</li>
<li>Don't print unwanted debug information when running the freeze command.</li>
<li>Create log file directory automatically. Thanks Alexandre Conrad.</li>
<li>Make test suite easier to run successfully. Thanks Dave Abrahams.</li>
<li>Fixed &quot;pip install .&quot; and &quot;pip install ..&quot;; better error for directory
without setup.py. Thanks Alexandre Conrad.</li>
<li>Support Debian/Ubuntu &quot;dist-packages&quot; in zip command. Thanks duckx.</li>
<li>Fix relative --src folder. Thanks Simon Cross.</li>
<li>Handle missing VCS with an error message. Thanks Alexandre Conrad.</li>
<li>Added --no-download option to install; pairs with --no-install to separate
download and installation into two steps. Thanks Simon Cross.</li>
<li>Fix uninstalling from requirements file containing -f, -i, or
--extra-index-url.</li>
<li>Leftover build directories are now removed. Thanks Alexandre Conrad.</li>
</ul>
</div>
<div class="section" id="id10">
<h1>0.6.3</h1>
<ul class="simple">
<li>Fixed import error on Windows with regard to the backwards compatibility
package</li>
</ul>
</div>
<div class="section" id="id11">
<h1>0.6.2</h1>
<ul class="simple">
<li>Fixed uninstall when /tmp is on a different filesystem.</li>
<li>Fixed uninstallation of distributions with namespace packages.</li>
</ul>
</div>
<div class="section" id="id12">
<h1>0.6.1</h1>
<ul class="simple">
<li>Added support for the <tt class="docutils literal">https</tt> and <tt class="docutils literal"><span class="pre">http-static</span></tt> schemes to the
Mercurial and <tt class="docutils literal">ftp</tt> scheme to the Bazaar backend.</li>
<li>Fixed uninstallation of scripts installed with easy_install.</li>
<li>Fixed an issue in the package finder that could result in an
infinite loop while looking for links.</li>
<li>Fixed issue with <tt class="docutils literal">pip bundle</tt> and local files (which weren't being
copied into the bundle), from Whit Morriss.</li>
</ul>
</div>
<div class="section" id="id13">
<h1>0.6</h1>
<ul class="simple">
<li>Add <tt class="docutils literal">pip uninstall</tt> and uninstall-before upgrade (from Carl
Meyer).</li>
<li>Extended configurability with config files and environment variables.</li>
<li>Allow packages to be upgraded, e.g., <tt class="docutils literal">pip install <span class="pre">Package==0.1</span></tt>
then <tt class="docutils literal">pip install <span class="pre">Package==0.2</span></tt>.</li>
<li>Allow installing/upgrading to Package==dev (fix &quot;Source version does not
match target version&quot; errors).</li>
<li>Added command and option completion for bash and zsh.</li>
<li>Extended integration with virtualenv by providing an option to
automatically use an active virtualenv and an option to warn if no active
virtualenv is found.</li>
<li>Fixed a bug with pip install --download and editable packages, where
directories were being set with 0000 permissions, now defaults to 755.</li>
<li>Fixed uninstallation of easy_installed console_scripts.</li>
<li>Fixed uninstallation on Mac OS X Framework layout installs</li>
<li>Fixed bug preventing uninstall of editables with source outside venv.</li>
<li>Creates download cache directory if not existing.</li>
</ul>
</div>
<div class="section" id="id14">
<h1>0.5.1</h1>
<ul class="simple">
<li>Fixed a couple little bugs, with git and with extensions.</li>
</ul>
</div>
<div class="section" id="id15">
<h1>0.5</h1>
<ul class="simple">
<li>Added ability to override the default log file name (<tt class="docutils literal"><span class="pre">pip-log.txt</span></tt>)
with the environmental variable <tt class="docutils literal">$PIP_LOG_FILE</tt>.</li>
<li>Made the freeze command print installed packages to stdout instead of
writing them to a file. Use simple redirection (e.g.
<tt class="docutils literal">pip freeze &gt; <span class="pre">stable-req.txt</span></tt>) to get a file with requirements.</li>
<li>Fixed problem with freezing editable packages from a Git repository.</li>
<li>Added support for base URLs using <tt class="docutils literal">&lt;base <span class="pre">href='...'&gt;</span></tt> when parsing
HTML pages.</li>
<li>Fixed installing of non-editable packages from version control systems.</li>
<li>Fixed issue with Bazaar's bzr+ssh scheme.</li>
<li>Added --download-dir option to the install command to retrieve package
archives. If given an editable package it will create an archive of it.</li>
<li>Added ability to pass local file and directory paths to <tt class="docutils literal"><span class="pre">--find-links</span></tt>,
e.g. <tt class="docutils literal"><span class="pre">--find-links=file:///path/to/my/private/archive</span></tt></li>
<li>Reduced the amount of console log messages when fetching a page to find a
distribution was problematic. The full messages can be found in pip-log.txt.</li>
<li>Added <tt class="docutils literal"><span class="pre">--no-deps</span></tt> option to install ignore package dependencies</li>
<li>Added <tt class="docutils literal"><span class="pre">--no-index</span></tt> option to ignore the package index (PyPI) temporarily</li>
<li>Fixed installing editable packages from Git branches.</li>
<li>Fixes freezing of editable packages from Mercurial repositories.</li>
<li>Fixed handling read-only attributes of build files, e.g. of Subversion and
Bazaar on Windows.</li>
<li>When downloading a file from a redirect, use the redirected
location's extension to guess the compression (happens specifically
when redirecting to a bitbucket.org tip.gz file).</li>
<li>Editable freeze URLs now always use revision hash/id rather than tip or
branch names which could move.</li>
<li>Fixed comparison of repo URLs so incidental differences such as
presence/absence of final slashes or quoted/unquoted special
characters don't trigger &quot;ignore/switch/wipe/backup&quot; choice.</li>
<li>Fixed handling of attempt to checkout editable install to a
non-empty, non-repo directory.</li>
</ul>
</div>
<div class="section" id="id16">
<h1>0.4</h1>
<ul class="simple">
<li>Make <tt class="docutils literal"><span class="pre">-e</span></tt> work better with local hg repositories</li>
<li>Construct PyPI URLs the exact way easy_install constructs URLs (you
might notice this if you use a custom index that is
slash-sensitive).</li>
<li>Improvements on Windows (from <a class="reference external" href="http://ionelmc.wordpress.com/">Ionel Maries Cristian</a>).</li>
<li>Fixed problem with not being able to install private git repositories.</li>
<li>Make <tt class="docutils literal">pip zip</tt> zip all its arguments, not just the first.</li>
<li>Fix some filename issues on Windows.</li>
<li>Allow the <tt class="docutils literal"><span class="pre">-i</span></tt> and <tt class="docutils literal"><span class="pre">--extra-index-url</span></tt> options in requirements
files.</li>
<li>Fix the way bundle components are unpacked and moved around, to make
bundles work.</li>
<li>Adds <tt class="docutils literal"><span class="pre">-s</span></tt> option to allow the access to the global site-packages if a
virtualenv is to be created.</li>
<li>Fixed support for Subversion 1.6.</li>
</ul>
</div>
<div class="section" id="id17">
<h1>0.3.1</h1>
<ul class="simple">
<li>Improved virtualenv restart and various path/cleanup problems on win32.</li>
<li>Fixed a regression with installing from svn repositories (when not
using <tt class="docutils literal"><span class="pre">-e</span></tt>).</li>
<li>Fixes when installing editable packages that put their source in a
subdirectory (like <tt class="docutils literal">src/</tt>).</li>
<li>Improve <tt class="docutils literal">pip <span class="pre">-h</span></tt></li>
</ul>
</div>
<div class="section" id="id18">
<h1>0.3</h1>
<ul class="simple">
<li>Added support for editable packages created from Git, Mercurial and Bazaar
repositories and ability to freeze them. Refactored support for version
control systems.</li>
<li>Do not use <tt class="docutils literal">sys.exit()</tt> from inside the code, instead use a
return.  This will make it easier to invoke programmatically.</li>
<li>Put the install record in <tt class="docutils literal"><span class="pre">Package.egg-info/installed-files.txt</span></tt>
(previously they went in
<tt class="docutils literal"><span class="pre">site-packages/install-record-Package.txt</span></tt>).</li>
<li>Fix a problem with <tt class="docutils literal">pip freeze</tt> not including <tt class="docutils literal"><span class="pre">-e</span> svn+</tt> when an
svn structure is peculiar.</li>
<li>Allow <tt class="docutils literal">pip <span class="pre">-E</span></tt> to work with a virtualenv that uses a different
version of Python than the parent environment.</li>
<li>Fixed Win32 virtualenv (<tt class="docutils literal"><span class="pre">-E</span></tt>) option.</li>
<li>Search the links passed in with <tt class="docutils literal"><span class="pre">-f</span></tt> for packages.</li>
<li>Detect zip files, even when the file doesn't have a <tt class="docutils literal">.zip</tt>
extension and it is served with the wrong Content-Type.</li>
<li>Installing editable from existing source now works, like <tt class="docutils literal">pip
install <span class="pre">-e</span> some/path/</tt> will install the package in <tt class="docutils literal">some/path/</tt>.
Most importantly, anything that package requires will also be
installed by pip.</li>
<li>Add a <tt class="docutils literal"><span class="pre">--path</span></tt> option to <tt class="docutils literal">pip un/zip</tt>, so you can avoid zipping
files that are outside of where you expect.</li>
<li>Add <tt class="docutils literal"><span class="pre">--simulate</span></tt> option to <tt class="docutils literal">pip zip</tt>.</li>
</ul>
</div>
<div class="section" id="id19">
<h1>0.2.1</h1>
<ul class="simple">
<li>Fixed small problem that prevented using <tt class="docutils literal">pip.py</tt> without actually
installing pip.</li>
<li>Fixed <tt class="docutils literal"><span class="pre">--upgrade</span></tt>, which would download and appear to install
upgraded packages, but actually just reinstall the existing package.</li>
<li>Fixed Windows problem with putting the install record in the right
place, and generating the <tt class="docutils literal">pip</tt> script with Setuptools.</li>
<li>Download links that include embedded spaces or other unsafe
characters (those characters get %-encoded).</li>
<li>Fixed use of URLs in requirement files, and problems with some blank
lines.</li>
<li>Turn some tar file errors into warnings.</li>
</ul>
</div>
<div class="section" id="id20">
<h1>0.2</h1>
<ul class="simple">
<li>Renamed to <tt class="docutils literal">pip</tt>, and to install you now do <tt class="docutils literal">pip install
PACKAGE</tt></li>
<li>Added command <tt class="docutils literal">pip zip PACKAGE</tt> and <tt class="docutils literal">pip unzip PACKAGE</tt>.  This
is particularly intended for Google App Engine to manage libraries
to stay under the 1000-file limit.</li>
<li>Some fixes to bundles, especially editable packages and when
creating a bundle using unnamed packages (like just an svn
repository without <tt class="docutils literal">#egg=Package</tt>).</li>
</ul>
</div>
<div class="section" id="id21">
<h1>0.1.4</h1>
<ul class="simple">
<li>Added an option <tt class="docutils literal"><span class="pre">--install-option</span></tt> to pass options to pass
arguments to <tt class="docutils literal">setup.py install</tt></li>
<li><tt class="docutils literal">.svn/</tt> directories are no longer included in bundles, as these
directories are specific to a version of svn -- if you build a
bundle on a system with svn 1.5, you can't use the checkout on a
system with svn 1.4.  Instead a file <tt class="docutils literal"><span class="pre">svn-checkout.txt</span></tt> is
included that notes the original location and revision, and the
command you can use to turn it back into an svn checkout.  (Probably
unpacking the bundle should, maybe optionally, recreate this
information -- but that is not currently implemented, and it would
require network access.)</li>
<li>Avoid ambiguities over project name case, where for instance
MyPackage and mypackage would be considered different packages.
This in particular caused problems on Macs, where <tt class="docutils literal">MyPackage/</tt> and
<tt class="docutils literal">mypackage/</tt> are the same directory.</li>
<li>Added support for an environmental variable
<tt class="docutils literal">$PIP_DOWNLOAD_CACHE</tt> which will cache package downloads, so
future installations won't require large downloads.  Network access
is still required, but just some downloads will be avoided when
using this.</li>
</ul>
</div>
<div class="section" id="id22">
<h1>0.1.3</h1>
<ul class="simple">
<li>Always use <tt class="docutils literal">svn checkout</tt> (not <tt class="docutils literal">export</tt>) so that
<tt class="docutils literal">tag_svn_revision</tt> settings give the revision of the package.</li>
<li>Don't update checkouts that came from <tt class="docutils literal">.pybundle</tt> files.</li>
</ul>
</div>
<div class="section" id="id23">
<h1>0.1.2</h1>
<ul class="simple">
<li>Improve error text when there are errors fetching HTML pages when
seeking packages.</li>
<li>Improve bundles: include empty directories, make them work with
editable packages.</li>
<li>If you use <tt class="docutils literal"><span class="pre">-E</span> env</tt> and the environment <tt class="docutils literal">env/</tt> doesn't exist, a
new virtual environment will be created.</li>
<li>Fix <tt class="docutils literal">dependency_links</tt> for finding packages.</li>
</ul>
</div>
<div class="section" id="id24">
<h1>0.1.1</h1>
<ul class="simple">
<li>Fixed a NameError exception when running pip outside of a
virtualenv environment.</li>
<li>Added HTTP proxy support (from Prabhu Ramachandran)</li>
<li>Fixed use of <tt class="docutils literal">hashlib.md5</tt> on python2.5+ (also from Prabhu
Ramachandran)</li>
</ul>
</div>
<div class="section" id="id25">
<h1>0.1</h1>
<ul class="simple">
<li>Initial release</li>
</ul>
</div>


<a name="downloads">&nbsp;</a>
<table class="list" style="margin-bottom: 10px;">
<tr>
  <th>File</th>
  <th>Type</th>
  <th>Py Version</th>
  <th>Uploaded on</th>
  <th style="text-align: right;">Size</th>
</tr>

<tr class="odd">

    <td>
    <span style="white-space: nowrap;">
      <a href="https://pypi.python.org/packages/source/p/pip/pip-1.0.tar.gz#md5=327fc4a03df189506966e15021730550">pip-1.0.tar.gz</a>
      (<a title="MD5 Digest" href="/pypi?:action=show_md5&amp;digest=327fc4a03df189506966e15021730550">md5</a>,
       <a title="PGP Signature" href="https://pypi.python.org/packages/source/p/pip/pip-1.0.tar.gz.asc">pgp</a>)
    </span>
    
        </td>
  <td style="white-space: nowrap;">
    Source
  </td>
  <td>
    
  </td>
  <td>2011-04-04</td>
  <td style="text-align: right;">97KB</td>

</tr>

<tr><td id="last" colspan="6"/></tr>
  </table>

<ul class="nodot">
  <li><strong>Downloads (All Versions):</strong></li>
  <li>
    <span>47485</span> downloads in the last day
  </li>
  <li>
    <span>373561</span> downloads in the last week
  </li>
  <li>
    <span>1375221</span> downloads in the last month
  </li>
</ul>



<ul class="nodot">
 <li>
  <strong>Author:</strong>
  <span>The pip developers</span>
 </li>

 

 

<!-- The <th> elements below are a terrible terrible hack for setuptools -->
 <li>
  <strong>Home Page:</strong>
  <!-- <th>Home Page -->
  <a href="http://www.pip-installer.org">http://www.pip-installer.org</a>
 </li>


 

 


 <li>
  <strong>Keywords:</strong>
  <span>easy_install distutils setuptools egg virtualenv</span>
 </li>

 <li>
  <strong>License:</strong>
  
  
  <span>MIT</span>
  
 </li>

 

<!-- TODO: add link to products in follow dependencies... -->
 
 
 

 <li>
  <strong>Categories</strong>
  <ul class="nodot">
   <li>
    <a href="/pypi?:action=browse&amp;c=5">Development Status :: 5 - Production/Stable</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=30">Intended Audience :: Developers</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=69">License :: OSI Approved :: MIT License</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=527">Programming Language :: Python :: 2</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=529">Programming Language :: Python :: 2.4</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=530">Programming Language :: Python :: 2.5</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=531">Programming Language :: Python :: 2.6</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=532">Programming Language :: Python :: 2.7</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=533">Programming Language :: Python :: 3</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=535">Programming Language :: Python :: 3.1</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=538">Programming Language :: Python :: 3.2</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=408">Topic :: Software Development :: Build Tools</a>
   </li>
  </ul>
 </li>



 

 

 

 

 


 <li>
  <strong>Package Index Owner:</strong>
  <span>ianb, jezdez, carljm, brosner, dstufft, qwcode</span>
 </li>

 

 <li>
  <strong><a href="http://usefulinc.com/doap">DOAP</a> record:</strong>
  <a href="/pypi?:action=doap&amp;name=pip&amp;version=1.0">pip-1.0.xml</a>
 </li>

</ul>





            </div>


          </div>
          <div id="footer"><div id="credits">
            <a href="http://www.python.org/about/website">Website maintained by the Python community</a><br/>
            <a href="https://www.fastly.com/" title="Real-time CDN services provided by Fastly">Real-time CDN by Fastly</a> /
            <a href="http://developer.rackspace.com/" title="Server hosting by Rackspace Open Source support">hosting by Rackspace</a> /
            <a href="http://www.timparkin.co.uk/" title="Design by Tim Parkin, Yorkshire man, photographer and developer">design by Tim Parkin</a>
          </div>
          Copyright © 1990-2014, <a href="http://www.python.org/psf">Python Software Foundation</a><br/>
          <a href="http://www.python.org/about/legal">Legal Statements</a>

          </div>
        </div>
      </div>

      <script type="text/javascript">
        // <![CDATA[
            var _gauges = _gauges || [];
            (function() {
              var t   = document.createElement('script');
              t.type  = 'text/javascript';
              t.async = true;
              t.id    = 'gauges-tracker';
              t.setAttribute('data-site-id', '5255e08ef5a1f57520000004');
              t.src = '//secure.gaug.es/track.js';
              var s = document.getElementsByTagName('script')[0];
              s.parentNode.insertBefore(t, s);
            })();
        // ]]>
      </script>

      <script type="text/javascript" src="//statuspage-production.s3.amazonaws.com/se.js">
      </script>
      <script type="text/javascript">
        window.fetchStatusPage({
          pageId: '2p66nmmycsj3',
          // <![CDATA[
          successCallback: function(data) {
            if (data.incidents.length > 0) {
              var div = document.getElementById('statusdiv');
              var reports = "</br><h4 id='statusbox'>Status</h4>\n";
              var outage = 0;
              var maintenance = 0;
              for (i in data.incidents) {
                var incident = data.incidents[i];
                var message, status = incident.status;
                if (status === 'scheduled') {
                  message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' scheduled.</a></li>\n';
                  reports += message;
                  maintenance += 1;
                } else if (status === 'in_progress') {
                  message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' is currently in progress.' + '</a></li>\n';
                  reports += message;
                  maintenance += 1;
                } else if (status !== 'resolved' && status !== 'postmortem' && status !== 'completed') {
                  message = '<li><a href="' + incident.shortlink + '">' + incident.name + ': ' + incident.status + '</a></li>\n';
                  reports += message;
                  outage += 1;
                }
              }
              if (outage + maintenance === 0) {
                reports += "<li><a href='http://status.python.org'>Nothing to report</a></li>";
              }
              div.innerHTML=reports;
              if (outage > 0) {
                var statusbox = document.getElementById("statusbox");
                statusbox.style.background = '#FC234A';
              }
            }
          }
          // ]]>
        });
      </script>

    </body>
  </html>

