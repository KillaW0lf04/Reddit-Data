<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

  <html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
    <head>
      
      <meta content="text/html; charset=utf-8" http-equiv="content-type"/>
      <title>pyfasta 0.5.2 : Python Package Index</title>
      <meta content="bioinformatics blast fasta"/>
      <meta content="fast, memory-efficient, pythonic (and command-line) access to fasta sequence files"/>
       <link rel="alternate" type="application/rss+xml" title="RSS: 40 latest updates" href="https://pypi.python.org/pypi?:action=rss"/>
       <link rel="alternate" type="application/rss+xml" title="RSS: 40 newest packages" href="https://pypi.python.org/pypi?:action=packages_rss"/>
       <link rel="stylesheet" media="screen" href="/static/styles/screen-switcher-default.css" type="text/css"/>
       <link media="screen" href="/static/styles/netscape4.css" type="text/css" rel="stylesheet"/>
       <link media="print" href="/static/styles/print.css" type="text/css" rel="stylesheet"/>
       <link media="screen" href="/static/styles/largestyles.css" type="text/css" rel="alternate stylesheet" title="large text"/>
       <link media="screen" href="/static/styles/defaultfonts.css" type="text/css" rel="alternate stylesheet" title="default fonts"/>
       <link rel="stylesheet" media="screen" href="/static/css/docutils.css" type="text/css"/>
       <link rel="stylesheet" media="screen" href="/static/css/pygments.css" type="text/css"/>

       <!-- allow pypi to override the standard pydotorg/docutils/etc. styles -->
       <link rel="stylesheet" href="/static/css/pypi.css" type="text/css"/>
       <link media="screen" rel="stylesheet" href="/static/css/pypi-screen.css" type="text/css"/>

       
 <meta name="keywords" content="bioinformatics blast fasta"/>
 <meta name="description" content="fast, memory-efficient, pythonic (and command-line) access to fasta sequence files"/>
 <link rel="meta" title="DOAP" type="application/rdf+xml" href="/pypi?:action=doap&amp;name=pyfasta&amp;version=0.5.2"/>
 <style type="text/css">
  table.form th {white-space: pre;}
 </style>


       <style type="text/css">
       </style>
    </head>
    <body>
     

      <!--  Logo  -->
      <h1 id="logoheader">
       <a accesskey="1" href="http://www.python.org" id="logolink">
          <img src="/static/images/python-logo.png" alt="homepage" border="0" id="logo"/>
       </a>
      </h1>
      <!--  Skip to Navigation  -->
      <div class="skiptonav"><a accesskey="2" href="#left-hand-navigation"><img src="/static/images/trans.gif" alt="skip to navigation" border="0" id="skiptonav"/></a></div>
      <div class="skiptonav"><a accesskey="3" href="#content-body"><img src="/static/images/trans.gif" alt="skip to content" border="0" id="skiptocontent"/></a></div>
      <!--  Utility Menu  -->

      <div id="utility-menu">
        <!--  Search Box  -->
        <div id="searchbox">
          <form id="searchform" method="get" name="searchform" action="/pypi">
            <input type="hidden" name=":action" value="search"/>
            <div id="search">
              <input class="input-text" id="term" name="term" autofocus="autofocus"/>
              <input class="input-button" type="submit" name="submit" value="search" id="submit"/>
            </div>
          </form>
        </div>
<!-- XXX: reinstate this       <div id="screen-switcher"></div> -->
      </div>
      <div id="left-hand-navigation">

        <!--  Main Menu NEED LEVEL TWO HEADER AND FOOTER -->
        <div id="menu">
          <ul class="level-one">
            <li class="selected">
              <a class="selected" href="/pypi">Package Index</a>

              <ul class="level-two">

                
                  <li class=""><a class="" href="/pypi?%3Aaction=browse">Browse&nbsp;packages</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=submit_form">Package&nbsp;submission</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=list_classifiers">List&nbsp;trove&nbsp;classifiers</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=index">List&nbsp;packages</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=rss">RSS&nbsp;(latest&nbsp;40&nbsp;updates)</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=packages_rss">RSS&nbsp;(newest&nbsp;40&nbsp;packages)</a></li>
                
		<li><a href="/pypi?:action=browse&amp;c=533&amp;show=all">Python 3 Packages</a></li>
        <li><a href="http://wiki.python.org/moin/CheeseShopTutorial">PyPI Tutorial</a></li>
        <li><a href="/security">PyPI Security</a></li>
        <li><a href="http://sourceforge.net/tracker/?group_id=66150&amp;atid=513504">PyPI Support</a></li>
        <li><a href="https://bitbucket.org/pypa/pypi/issues">PyPI Bug Reports</a></li>
        <li><a href="http://www.python.org/sigs/distutils-sig/">PyPI Discussion</a></li>
        <li><a href="http://wiki.python.org/moin/CheeseShopDev">PyPI Developer Info</a></li>
       </ul>

            </li>




            <li class=""><a href="http://www.python.org/about" class="" title="About The Python Language">About</a>
            </li><li class=""><a href="http://www.python.org/news" class="" title="">News</a>
            </li><li class=""><a href="http://www.python.org/doc" class="" title="">Documentation</a>
            </li><li class=""><a href="http://www.python.org/download" title="">Download</a>


            </li><li class=""><a href="http://www.python.org/community" class="" title="">Community</a>
            </li><li class=""><a href="http://www.python.org/psf" class="" title="Python Software Foundation">Foundation</a>
            </li><li class=""><a href="http://www.python.org/dev" class="" title="Python Core Language Development">Core Development</a>
            </li><li class=""><a href="http://www.python.org/links" class="" title="">Links</a>
          </li>
          </ul>
        </div>

      </div>
      <div id="content-body">
        <div id="body-main">
          <div id="content">

            <div id="breadcrumb">
              <a href="/pypi">Package Index</a>
              
                <span class="breadcrumb-separator">&gt;</span>
                <a href="/pypi/pyfasta">pyfasta</a>
              
              
                <span class="breadcrumb-separator">&gt;</span>
                <a href="/pypi/pyfasta/0.5.2">0.5.2</a>
              

            </div>

            <div id="document-floating">

            <div id="document-navigation" style="overflow-y: auto; max-height: 15em; overflow-x: hidden;">
		
                  <h4>Not Logged In</h4>

                  <ul>
		    
                    <li><a href="/pypi?%3Aaction=login">Login</a></li>
                    <li><a href="/pypi?%3Aaction=register_form">Register</a></li>
                    <li><a href="/pypi?%3Aaction=forgotten_password_form">Lost Login?</a></li>
		    <li>Use <a href="/pypi?:action=openid">OpenID</a>
                      
                        <a style="border: none;" href="/pypi?:action=login&amp;provider=Google"><img width="16" height="16" src="https://www.google.com/favicon.ico" alt="Google" title="Google"/></a>
                      
                      
                        <a style="border: none;" href="/pypi?:action=login&amp;provider=myOpenID"><img width="16" height="16" src="https://www.myopenid.com/favicon.ico" alt="myOpenID" title="myOpenID"/></a>
                      
                      
                        <a style="border: none;" href="/pypi?:action=login&amp;provider=Launchpad"><img width="16" height="16" src="https://launchpad.net/@@/launchpad.png" alt="Launchpad" title="Launchpad"/></a>
                      
                    </li>
                  </ul>

		

		

                <div id="statusdiv">
                </div>
            </div>
        </div>
        


            <div class="section">
              <h1>pyfasta 0.5.2</h1>

              
<div id="download-button">
 
  <a class="button green" style="float:right;" href="https://pypi.python.org/packages/source/p/pyfasta/pyfasta-0.5.2.tar.gz">Download<br/>
    <span style="font-size: 75%">pyfasta-0.5.2.tar.gz</span>
  </a>
 
 
</div>

<p style="font-style: italic">fast, memory-efficient, pythonic (and command-line) access to fasta sequence files</p>








<div class="contents topic" id="contents">
<p class="topic-title first">Contents</p>
<ul class="simple">
<li><a class="reference internal" href="#implementation" id="id16">Implementation</a></li>
<li><a class="reference internal" href="#usage" id="id17">Usage</a><ul>
<li><a class="reference internal" href="#slicing" id="id18">Slicing</a></li>
<li><a class="reference internal" href="#key-function" id="id19">Key Function</a></li>
</ul>
</li>
<li><a class="reference internal" href="#numpy" id="id20">Numpy</a></li>
<li><a class="reference internal" href="#backends-record-class" id="id21">Backends (Record class)</a></li>
<li><a class="reference internal" href="#flattening" id="id22">Flattening</a></li>
<li><a class="reference internal" href="#command-line-interface" id="id23">Command Line Interface</a></li>
<li><a class="reference internal" href="#cleanup" id="id24">cleanup</a></li>
<li><a class="reference internal" href="#testing" id="id25">Testing</a></li>
<li><a class="reference internal" href="#changes" id="id26">Changes</a><ul>
<li><a class="reference internal" href="#id1" id="id27">0.5.2</a></li>
<li><a class="reference internal" href="#id2" id="id28">0.5.0</a></li>
<li><a class="reference internal" href="#id3" id="id29">0.4.5</a></li>
<li><a class="reference internal" href="#id4" id="id30">0.4.4</a></li>
<li><a class="reference internal" href="#id5" id="id31">0.4.3</a></li>
<li><a class="reference internal" href="#id6" id="id32">0.4.2</a></li>
<li><a class="reference internal" href="#id7" id="id33">0.4.1</a></li>
<li><a class="reference internal" href="#id8" id="id34">0.4.0</a></li>
<li><a class="reference internal" href="#id9" id="id35">0.3.9</a></li>
<li><a class="reference internal" href="#id10" id="id36">0.3.8</a></li>
<li><a class="reference internal" href="#id11" id="id37">0.3.6/7</a></li>
<li><a class="reference internal" href="#id12" id="id38">0.3.5</a></li>
<li><a class="reference internal" href="#id13" id="id39">0.3.4</a></li>
<li><a class="reference internal" href="#id14" id="id40">0.3.3</a></li>
<li><a class="reference internal" href="#id15" id="id41">0.3.2</a></li>
</ul>
</li>
</ul>
</div>
<div class="section" id="implementation">
<h1><a class="toc-backref" href="#id16">Implementation</a></h1>
<p>Requires Python &gt;= 2.6. Stores a flattened version of the fasta file without
spaces or headers and uses either a mmap of numpy binary format or fseek/fread so the
<em>sequence data is never read into memory</em>. Saves a pickle (.gdx) of the start, stop
(for fseek/mmap) locations of each header in the fasta file for internal use.</p>
</div>
<div class="section" id="usage">
<h1><a class="toc-backref" href="#id17">Usage</a></h1>
<pre class="literal-block">
&gt;&gt;&gt; from pyfasta import Fasta

&gt;&gt;&gt; f = Fasta('tests/data/three_chrs.fasta')
&gt;&gt;&gt; sorted(f.keys())
['chr1', 'chr2', 'chr3']

&gt;&gt;&gt; f['chr1']
NpyFastaRecord(0..80)
</pre>
<div class="section" id="slicing">
<h2><a class="toc-backref" href="#id18">Slicing</a></h2>
<pre class="literal-block">
# get full the sequence:
&gt;&gt;&gt; a = str(f['chr1'])
&gt;&gt;&gt; b = f['chr1'][:]
&gt;&gt;&gt; a == b
True

&gt;&gt;&gt; f['chr1'][:10]
'ACTGACTGAC'

# get the 1st basepair in every codon (it's python yo)
&gt;&gt;&gt; f['chr1'][::3]
'AGTCAGTCAGTCAGTCAGTCAGTCAGT'

# can query by a 'feature' dictionary (note this is one based coordinates)
&gt;&gt;&gt; f.sequence({'chr': 'chr1', 'start': 2, 'stop': 9})
'CTGACTGA'

# same as:
&gt;&gt;&gt; f['chr1'][1:9]
'CTGACTGA'

# use python, zero based coords
&gt;&gt;&gt; f.sequence({'chr': 'chr1', 'start': 2, 'stop': 9}, one_based=False)
'TGACTGA'

# with reverse complement (automatic for - strand)
&gt;&gt;&gt; f.sequence({'chr': 'chr1', 'start': 2, 'stop': 9, 'strand': '-'})
'TCAGTCAG'
</pre>
</div>
<div class="section" id="key-function">
<h2><a class="toc-backref" href="#id19">Key Function</a></h2>
<p>Sometimes your fasta will have a long header like: &quot;AT1G51370.2 | Symbols:  | F-box family protein | chr1:19045615-19046748 FORWARD&quot; when you only want to key off: &quot;AT1G51370.2&quot;. In this case, specify the key_fn argument to the constructor:</p>
<pre class="literal-block">
&gt;&gt;&gt; fkey = Fasta('tests/data/key.fasta', key_fn=lambda key: key.split()[0])
&gt;&gt;&gt; sorted(fkey.keys())
['a', 'b', 'c']
</pre>
</div>
</div>
<div class="section" id="numpy">
<h1><a class="toc-backref" href="#id20">Numpy</a></h1>
<p>The default is to use a memmaped numpy array as the backend. In which case it's possible to
get back an array directly...</p>
<pre class="literal-block">
&gt;&gt;&gt; f['chr1'].as_string = False
&gt;&gt;&gt; f['chr1'][:10] # doctest: +NORMALIZE_WHITESPACE
memmap(['A', 'C', 'T', 'G', 'A', 'C', 'T', 'G', 'A', 'C'], dtype='|S1')

&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array(f['chr2'])
&gt;&gt;&gt; a.shape[0] == len(f['chr2'])
True

&gt;&gt;&gt; a[10:14] # doctest: +NORMALIZE_WHITESPACE
array(['A', 'A', 'A', 'A'], dtype='|S1')
</pre>
<p>mask a sub-sequence</p>
<pre class="literal-block">
&gt;&gt;&gt; a[11:13] = np.array('N', dtype='S1')
&gt;&gt;&gt; a[10:14].tostring()
'ANNA'
</pre>
</div>
<div class="section" id="backends-record-class">
<h1><a class="toc-backref" href="#id21">Backends (Record class)</a></h1>
<p>It's also possible to specify another record class as the underlying work-horse
for slicing and reading. Currently, there's just the default:</p>
<blockquote>
<ul class="simple">
<li>NpyFastaRecord which uses numpy memmap</li>
<li>FastaRecord, which uses using fseek/fread</li>
<li>MemoryRecord which reads everything into memory and must reparse the original
fasta every time.</li>
<li>TCRecord which is identical to NpyFastaRecord except that it saves the index
in a TokyoCabinet hash database, for cases when there are enough records that
loading the entire index from a pickle into memory is unwise. (NOTE: that the
sequence is not loaded into memory in either case).</li>
</ul>
</blockquote>
<p>It's possible to specify the class used with the <cite>record_class</cite> kwarg to the <cite>Fasta</cite>
constructor:</p>
<pre class="literal-block">
&gt;&gt;&gt; from pyfasta import FastaRecord # default is NpyFastaRecord
&gt;&gt;&gt; f = Fasta('tests/data/three_chrs.fasta', record_class=FastaRecord)
&gt;&gt;&gt; f['chr1']
FastaRecord('tests/data/three_chrs.fasta.flat', 0..80)
</pre>
<p>other than the repr, it should behave exactly like the Npy record class backend</p>
<p>it's possible to create your own using a sub-class of FastaRecord. see the source
in pyfasta/records.py for details.</p>
</div>
<div class="section" id="flattening">
<h1><a class="toc-backref" href="#id22">Flattening</a></h1>
<p>In order to efficiently access the sequence content, pyfasta saves a separate, flattened file with all newlines and headers removed from the sequence. In the case of large fasta files, one may not wish to save 2 copies of a 5GG+ file. In that case, it's possible to flatten the file &quot;inplace&quot;, keeping all the headers, and retaining the validity of the fasta file -- with the only change being that the new-lines are removed from each sequence. This can be specified via <cite>flatten_inplace</cite> = True</p>
<pre class="literal-block">
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.unlink('tests/data/three_chrs.fasta.gdx') # cleanup non-inplace idx
&gt;&gt;&gt; f = Fasta('tests/data/three_chrs.fasta', flatten_inplace=True)
&gt;&gt;&gt; f['chr1']  # note the difference in the output from above.
NpyFastaRecord(6..86)

# sequence from is same as when requested from non-flat file above.
&gt;&gt;&gt; f['chr1'][1:9]
'CTGACTGA'

# the flattened file is kept as a place holder without the sequence data.
&gt;&gt;&gt; open('tests/data/three_chrs.fasta.flat').read()
'&#64;flattened&#64;'
</pre>
</div>
<div class="section" id="command-line-interface">
<h1><a class="toc-backref" href="#id23">Command Line Interface</a></h1>
<p>there's also a command line interface to manipulate / view fasta files.
the <cite>pyfasta</cite> executable is installed via setuptools, running it will show
help text.</p>
<p>split a fasta file into 6 new files of relatively even size:</p>
<blockquote>
$ pyfasta <strong>split</strong> -n 6 original.fasta</blockquote>
<p>split the fasta file into one new file per header with &quot;%(seqid)s&quot; being filled into each filename.:</p>
<blockquote>
$ pyfasta <strong>split</strong> --header &quot;%(seqid)s.fasta&quot; original.fasta</blockquote>
<p>create 1 new fasta file with the sequence split into 10K-mers:</p>
<blockquote>
$ pyfasta <strong>split</strong> -n 1 -k 10000 original.fasta</blockquote>
<p>2 new fasta files with the sequence split into 10K-mers with 2K overlap:</p>
<blockquote>
$ pyfasta <strong>split</strong> -n 2 -k 10000 -o 2000 original.fasta</blockquote>
<p>show some info about the file (and show gc content):</p>
<blockquote>
$ pyfasta <strong>info</strong> --gc test/data/three_chrs.fasta</blockquote>
<p><strong>extract</strong> sequence from the file. use the header flag to make
a new fasta file. the args are a list of sequences to extract.</p>
<blockquote>
$ pyfasta <strong>extract</strong> --header --fasta test/data/three_chrs.fasta seqa seqb seqc</blockquote>
<p><strong>extract</strong> sequence from a file using a file containing the headers <em>not</em> wanted in the new file:</p>
<blockquote>
$ pyfasta extract --header --fasta input.fasta --exclude --file seqids_to_exclude.txt</blockquote>
<p><strong>extract</strong> sequence from a fasta file with complex keys where we only want to lookup based on the part before the space.</p>
<blockquote>
$ pyfasta extract --header --fasta input.with.keys.fasta --space --file seqids.txt</blockquote>
<p><strong>flatten</strong> a file inplace, for faster later use by pyfasta, and without creating another copy. (<a class="reference internal" href="#flattening">Flattening</a>)</p>
<blockquote>
$ pyfasta flatten input.fasta</blockquote>
</div>
<div class="section" id="cleanup">
<h1><a class="toc-backref" href="#id24">cleanup</a></h1>
<p>(though for real use these will remain for faster access)</p>
<pre class="literal-block">
&gt;&gt;&gt; os.unlink('tests/data/three_chrs.fasta.gdx')
&gt;&gt;&gt; os.unlink('tests/data/three_chrs.fasta.flat')
</pre>
</div>
<div class="section" id="testing">
<h1><a class="toc-backref" href="#id25">Testing</a></h1>
<p>there is currently &gt; 99% test coverage for the 2 modules and all included
record classes. to run the tests:</p>
<pre class="literal-block">
$ python setup.py nosetests
</pre>
</div>
<div class="section" id="changes">
<h1><a class="toc-backref" href="#id26">Changes</a></h1>
<div class="section" id="id1">
<h2><a class="toc-backref" href="#id27">0.5.2</a></h2>
<p>fix complement (&#64;mruffalo)</p>
</div>
<div class="section" id="id2">
<h2><a class="toc-backref" href="#id28">0.5.0</a></h2>
<p>python 3 compatibility thanks to mruffalo</p>
</div>
<div class="section" id="id3">
<h2><a class="toc-backref" href="#id29">0.4.5</a></h2>
<p>pyfasta split can handle &gt; 52 files. (thanks Devtulya)</p>
</div>
<div class="section" id="id4">
<h2><a class="toc-backref" href="#id30">0.4.4</a></h2>
<p>fix pyfasta extract</p>
</div>
<div class="section" id="id5">
<h2><a class="toc-backref" href="#id31">0.4.3</a></h2>
<p>Add 0 or 1-based intervals in sequence() thanks &#64;jamescasbon</p>
</div>
<div class="section" id="id6">
<h2><a class="toc-backref" href="#id32">0.4.2</a></h2>
<p>update for latest numpy (can't close memmap)</p>
</div>
<div class="section" id="id7">
<h2><a class="toc-backref" href="#id33">0.4.1</a></h2>
<p>check for duplicate headers.</p>
</div>
<div class="section" id="id8">
<h2><a class="toc-backref" href="#id34">0.4.0</a></h2>
<ul class="simple">
<li>add key_fn kwarg to constuctor</li>
</ul>
</div>
<div class="section" id="id9">
<h2><a class="toc-backref" href="#id35">0.3.9</a></h2>
<ul class="simple">
<li>only require 'r' (not r+) for memory map.</li>
</ul>
</div>
<div class="section" id="id10">
<h2><a class="toc-backref" href="#id36">0.3.8</a></h2>
<ul class="simple">
<li>clean up logic for mixing inplace/non-inplace flattened files.
if the inplace is available, it is always used.</li>
</ul>
</div>
<div class="section" id="id11">
<h2><a class="toc-backref" href="#id37">0.3.6/7</a></h2>
<ul class="simple">
<li>dont re-flatten the file every time!</li>
<li>allow spaces before and after the header in the orginal fasta.</li>
</ul>
</div>
<div class="section" id="id12">
<h2><a class="toc-backref" href="#id38">0.3.5</a></h2>
<ul class="simple">
<li>update docs in README.txt for new CLI stuff.</li>
<li>allow flattening inplace.</li>
<li>get rid of memmap (results in faster parsing).</li>
</ul>
</div>
<div class="section" id="id13">
<h2><a class="toc-backref" href="#id39">0.3.4</a></h2>
<ul class="simple">
<li>restore python2.5 compatiblity.</li>
<li>CLI: add ability to exclude sequence from extract</li>
<li>CLI: allow spliting based on header.</li>
</ul>
</div>
<div class="section" id="id14">
<h2><a class="toc-backref" href="#id40">0.3.3</a></h2>
<ul class="simple">
<li>include this file in the tar ball (thanks wen h.)</li>
</ul>
</div>
<div class="section" id="id15">
<h2><a class="toc-backref" href="#id41">0.3.2</a></h2>
<ul class="simple">
<li>separate out backends into records.py</li>
<li>use nosetests (python setup.py nosetests)</li>
<li>add a TCRecord backend for next-gen sequencing availabe if tc is (easy-)installed.</li>
<li>improve test coverage.</li>
</ul>
</div>
</div>


<a name="downloads">&nbsp;</a>
<table class="list" style="margin-bottom: 10px;">
<tr>
  <th>File</th>
  <th>Type</th>
  <th>Py Version</th>
  <th>Uploaded on</th>
  <th style="text-align: right;">Size</th>
</tr>

<tr class="odd">

    <td>
    <span style="white-space: nowrap;">
      <a href="https://pypi.python.org/packages/source/p/pyfasta/pyfasta-0.5.2.tar.gz#md5=bf61ab997dca329675c3eb2ee7cdfcf2">pyfasta-0.5.2.tar.gz</a>
      (<a title="MD5 Digest" href="/pypi?:action=show_md5&amp;digest=bf61ab997dca329675c3eb2ee7cdfcf2">md5</a>)
    </span>
    
        </td>
  <td style="white-space: nowrap;">
    Source
  </td>
  <td>
    
  </td>
  <td>2014-04-03</td>
  <td style="text-align: right;">18KB</td>

</tr>

<tr><td id="last" colspan="6"/></tr>
  </table>

<ul class="nodot">
  <li><strong>Downloads (All Versions):</strong></li>
  <li>
    <span>88</span> downloads in the last day
  </li>
  <li>
    <span>803</span> downloads in the last week
  </li>
  <li>
    <span>2413</span> downloads in the last month
  </li>
</ul>



<ul class="nodot">
 <li>
  <strong>Author:</strong>
  <span>brentp</span>
 </li>

 

 

<!-- The <th> elements below are a terrible terrible hack for setuptools -->
 <li>
  <strong>Home Page:</strong>
  <!-- <th>Home Page -->
  <a href="http://github.com/brentp/pyfasta/">http://github.com/brentp/pyfasta/</a>
 </li>


 

 


 <li>
  <strong>Keywords:</strong>
  <span>bioinformatics blast fasta</span>
 </li>

 <li>
  <strong>License:</strong>
  
  
  <span>MIT</span>
  
 </li>

 

<!-- TODO: add link to products in follow dependencies... -->
 
 
 

 <li>
  <strong>Categories</strong>
  <ul class="nodot">
   <li>
    <a href="/pypi?:action=browse&amp;c=388">Topic :: Scientific/Engineering :: Bio-Informatics</a>
   </li>
  </ul>
 </li>



 

 

 

 

 


 <li>
  <strong>Package Index Owner:</strong>
  <span>brentp</span>
 </li>

 

 <li>
  <strong><a href="http://usefulinc.com/doap">DOAP</a> record:</strong>
  <a href="/pypi?:action=doap&amp;name=pyfasta&amp;version=0.5.2">pyfasta-0.5.2.xml</a>
 </li>

</ul>





            </div>


          </div>
          <div id="footer"><div id="credits">
            <a href="http://www.python.org/about/website">Website maintained by the Python community</a><br/>
            <a href="https://www.fastly.com/" title="Real-time CDN services provided by Fastly">Real-time CDN by Fastly</a> /
            <a href="http://developer.rackspace.com/" title="Server hosting by Rackspace Open Source support">hosting by Rackspace</a> /
            <a href="http://www.timparkin.co.uk/" title="Design by Tim Parkin, Yorkshire man, photographer and developer">design by Tim Parkin</a>
          </div>
          Copyright © 1990-2014, <a href="http://www.python.org/psf">Python Software Foundation</a><br/>
          <a href="http://www.python.org/about/legal">Legal Statements</a>

          </div>
        </div>
      </div>

      <script type="text/javascript">
        // <![CDATA[
            var _gauges = _gauges || [];
            (function() {
              var t   = document.createElement('script');
              t.type  = 'text/javascript';
              t.async = true;
              t.id    = 'gauges-tracker';
              t.setAttribute('data-site-id', '5255e08ef5a1f57520000004');
              t.src = '//secure.gaug.es/track.js';
              var s = document.getElementsByTagName('script')[0];
              s.parentNode.insertBefore(t, s);
            })();
        // ]]>
      </script>

      <script type="text/javascript" src="//statuspage-production.s3.amazonaws.com/se.js">
      </script>
      <script type="text/javascript">
        window.fetchStatusPage({
          pageId: '2p66nmmycsj3',
          // <![CDATA[
          successCallback: function(data) {
            if (data.incidents.length > 0) {
              var div = document.getElementById('statusdiv');
              var reports = "</br><h4 id='statusbox'>Status</h4>\n";
              var outage = 0;
              var maintenance = 0;
              for (i in data.incidents) {
                var incident = data.incidents[i];
                var message, status = incident.status;
                if (status === 'scheduled') {
                  message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' scheduled.</a></li>\n';
                  reports += message;
                  maintenance += 1;
                } else if (status === 'in_progress') {
                  message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' is currently in progress.' + '</a></li>\n';
                  reports += message;
                  maintenance += 1;
                } else if (status !== 'resolved' && status !== 'postmortem' && status !== 'completed') {
                  message = '<li><a href="' + incident.shortlink + '">' + incident.name + ': ' + incident.status + '</a></li>\n';
                  reports += message;
                  outage += 1;
                }
              }
              if (outage + maintenance === 0) {
                reports += "<li><a href='http://status.python.org'>Nothing to report</a></li>";
              }
              div.innerHTML=reports;
              if (outage > 0) {
                var statusbox = document.getElementById("statusbox");
                statusbox.style.background = '#FC234A';
              }
            }
          }
          // ]]>
        });
      </script>

    </body>
  </html>

