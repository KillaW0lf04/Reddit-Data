<!DOCTYPE html>
<!--[if lt IE 9]>
<html id="ie" lang="en-US">
<![endif]-->
<!--[if !(IE 6) | !(IE 7) | !(IE 8)  ]><!-->
<html lang="en-US">
<!--<![endif]-->
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<title>The Shortest Crashing C Program | llbit</title>
<link rel="icon" type="image/png" href="/image/favicon.png">
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="stylesheet" type="text/css" media="all" href="http://llbit.se/wp-content/themes/foghorn/style.css" />
<link rel="pingback" href="http://llbit.se/xmlrpc.php" />
<!--[if lt IE 9]>
<script src="http://llbit.se/wp-content/themes/foghorn/js/html5.js" type="text/javascript"></script>
<![endif]-->
<link rel="alternate" type="application/rss+xml" title="llbit &raquo; Feed" href="http://llbit.se/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="llbit &raquo; Comments Feed" href="http://llbit.se/?feed=comments-rss2" />
<link rel="alternate" type="application/rss+xml" title="llbit &raquo; The Shortest Crashing C Program Comments Feed" href="http://llbit.se/?feed=rss2&#038;p=1744" />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://llbit.se/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://llbit.se/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='Chunky Goals' href='http://llbit.se/?p=1749' />
<link rel='next' title='Faster Math' href='http://llbit.se/?p=1827' />
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://llbit.se/?p=1744' />
<link rel='shortlink' href='http://llbit.se/?p=1744' />
</head>

<body class="single single-post postid-1744 single-format-standard layout-2cr">
<div id="page" class="hfeed">
	<header id="branding" role="banner" class="clearfix">
			<hgroup>
				<h1 id="site-title"><span><a href="http://llbit.se/" title="llbit" rel="home">
				llbit				</a></span></h1>
                			</hgroup>

			<nav id="access" role="navigation">
				<h1 class="section-heading">Main menu</h1>
								<div class="skip-link screen-reader-text"><a href="#content" title="Skip to content">Skip to content</a></div>
								<div class="menu"><ul><li class="page_item page-item-2"><a href="http://llbit.se/?page_id=2">About Me</a></li><li class="page_item page-item-996"><a href="http://llbit.se/?page_id=996">Typefaces</a></li></ul></div>
			</nav><!-- #access -->
	</header><!-- #branding -->


	<div id="main" class="clearfix">
		<div id="primary">
            
			<div id="content" role="main">

				                
                	<div class="content-wrap clearfix">
						
<article id="post-1744" class="post-1744 post type-post status-publish format-standard hentry category-uncategorized clearfix">
	<header class="entry-header">
		<h1 class="entry-title">The Shortest Crashing C Program</h1>
		<div class="entry-meta">
			<span class="sep">Posted </span><a href="http://llbit.se/?p=1744" title="14:02" rel="bookmark"><time class="entry-date" datetime="2013-05-14T14:02:37+00:00" pubdate>2013-05-14</time></a>		</div><!-- .entry-meta -->
	</header><!-- .entry-header -->
	<div class="entry-content">
		<p>It might seem like a strange idea to want to write a small crashing C program, but in one of the courses that I&#8217;ve been teaching labs this is one of the tasks! It&#8217;s actually a very educational thing to do.</p>
<p>Usually students either try to dereference an invalid address, or divide by zero. Dividing by zero raises the <code>SIGFPE</code> signal (Floating Point Exception). Here is a small example program that crashes using divide-by-zero:</p>
<pre><code>int main()
{
    return 1/0;
}
</code></pre>
<p>We could remove the <code>return</code> keyword but <code>gcc</code> refuses to generate code for the statement when I do this, even with optimization disabled. We can shave off a few characters from the above by transforming the statement into an assignment:</p>
<pre><code>i;
int main()
{
    i=1/0;
}
</code></pre>
<p>Note that I have declared <code>i</code> without a type. This works in C89 because declarations have the implicit type <code>int</code>. In C99 and some other C variants this is an error. Let&#8217;s assume we&#8217;re writing C89 code, then we can even use implicit <code>int</code> for <code>main</code>:</p>
<pre><code>i;
main()
{
    i=1/0;
}
</code></pre>
<p>That&#8217;s pretty short &#8211; 16 characters if we don&#8217;t count redundant whitespace. However, we can do better!</p>
<p>When a C program is compiled, the compiler creates one or more object files with symbolic references to libraries and global objects (functions and variables). The object files are then linked &#8211; symbolic references replaced by addresses &#8211; to create an executable.</p>
<p>The compiler provides an entry point that calls <code>main</code> in one of the object files. Calling <code>main</code> means that we try to execute the instructions at the address stored at the location <code>main</code> was linked to.</p>
<p>Interestingly, the linker has no concept of the types of different objects &#8211; it only knows of their addresses. So, if we replace <code>main</code> by a regular global variable, the compiler will happily build the object file because it does not care what type of object <code>main</code> is, and the linker will happily link it because it is only concerned with the address of <code>main</code>.</p>
<p>So, consider this C program:</p>
<pre><code>int main=0;
</code></pre>
<p>This will compile to an executable that tries to call address 0, which is not an address that we have access to so we get the <code>SIGSEGV</code> signal (Segmentation Fault). <strong>Correction</strong> I was wrong about why this crashes. The program will try to execute main as if it were a function and this does not work because the compiler has placed it in the data segment, which is not executable. So it does actually not matter what the variable main is initialized to. (Thank you Zack for the correction!)</p>
<p>Now we&#8217;re very close to the smallest crashing C program. We can use the trick with implicit <code>int</code> to shorten it further.</p>
<pre><code>main=0;
</code></pre>
<p>Also, global variables in C are initialized to zero implicitly, so this is equivalent:</p>
<pre><code>main;
</code></pre>
<p>And there we have it, the shortest crashing C program!</p>
<h3>Update:</h3>
<p>Hacker News user femto <a href="https://news.ycombinator.com/item?id=5762262">pointed out</a> that it is possible to compile and link an empty file. I did not post this because <code>gcc</code> will refuse to compile and link the program &#8211; it requires compiling and linking separately.</p>
<p>Also, if we shall be pedantic I should point out that by &#8220;global&#8221; variable I of course mean &#8220;static&#8221; variable.</p>
        			</div><!-- .entry-content -->
    </article><!-- #post-1744 -->

<footer class="entry-meta">
		<div class="post-date"><span class="sep">Posted </span><time class="entry-date" datetime="2013-05-14T14:02:37+00:00" pubdate><span class="month">May </span><span class="day">14 <span class="sep">, </span></span><span class="year">2013</span></time></div>
                    <div class="categories">
                <span>Categorized:</span> <a href="http://llbit.se/?cat=1" title="View all posts in Uncategorized" rel="category">Uncategorized</a>            </div>
                </footer><!-- .entry-meta -->                    </div>

					
						<div id="comments">
	
	
			<h2 id="comments-title">
			15 comments on &ldquo;<span>The Shortest Crashing C Program</span>&rdquo;		</h2>

		
		<ol class="commentlist">
				<li class="comment even thread-even depth-1" id="li-comment-5537">
		<article id="comment-5537" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn">PowerPC user</cite> on <a href="http://llbit.se/?p=1744#comment-5537"><time pubdate datetime="2013-05-25T13:23:12+00:00">2013-05-25 at 13:23</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Dividing by zero does not crash a program on all platforms. For instance, on PowerPC (under Mac OS X, if that matters) the result is just zero, nothing terrible happens.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-5538">
		<article id="comment-5538" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn">Doug Landauer</cite> on <a href="http://llbit.se/?p=1744#comment-5538"><time pubdate datetime="2013-05-25T16:50:48+00:00">2013-05-25 at 16:50</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>When I interviewed to work at IBM/Rational, on Purify (around 2003 or so), one of the interview questions was to write an example crashing C program.  (They were looking for array out of bounds accesses, or uninitialized pointer dereferences, etc.)  My answer was &#8220;int main;&#8221;</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-5539">
		<article id="comment-5539" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn"><a href='http://dobots.nl' rel='external nofollow' class='url'>Anne van Rossum</a></cite> on <a href="http://llbit.se/?p=1744#comment-5539"><time pubdate datetime="2013-05-25T17:07:36+00:00">2013-05-25 at 17:07</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Recursion it won&#8217;t like either. Although it&#8217;s not as short as yours:</p>
<p>main() { main(); }</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-5540">
		<article id="comment-5540" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn">Daniel Pratt</cite> on <a href="http://llbit.se/?p=1744#comment-5540"><time pubdate datetime="2013-05-25T18:36:12+00:00">2013-05-25 at 18:36</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>If dividing by zero yields zero as a result, that&#8217;s pretty terrible, in my opinion.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-5541">
		<article id="comment-5541" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn">Rev. Zak Zennii</cite> on <a href="http://llbit.se/?p=1744#comment-5541"><time pubdate datetime="2013-05-26T04:10:31+00:00">2013-05-26 at 04:10</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Actually, I thought that the PowerPC processor, when dividing by zero, returned the special float value &#8216;NaN&#8217; (Not a number).</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-5543">
		<article id="comment-5543" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn"><a href='http://fkraiem.org/' rel='external nofollow' class='url'>Firas Kraiem</a></cite> on <a href="http://llbit.se/?p=1744#comment-5543"><time pubdate datetime="2013-05-26T18:13:22+00:00">2013-05-26 at 18:13</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Define &#8220;C&#8221;? This program is not standard C, so the fact that it compiles at all is an idiosyncracy of the compiler, not a feature of the C language. This post should accurately be titled &#8220;The Smallest Crashing Program Which Compiles in GCC&#8221;.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment byuser comment-author-admin bypostauthor even thread-even depth-1" id="li-comment-5548">
		<article id="comment-5548" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn"><a href='http://llbit.se/' rel='external nofollow' class='url'>Jesper Öqvist</a></cite> on <a href="http://llbit.se/?p=1744#comment-5548"><time pubdate datetime="2013-05-27T09:39:39+00:00">2013-05-27 at 09:39</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>@Firas Define &#8220;standard C&#8221;.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-5564">
		<article id="comment-5564" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn">mm0zct</cite> on <a href="http://llbit.se/?p=1744#comment-5564"><time pubdate datetime="2013-05-28T02:32:19+00:00">2013-05-28 at 02:32</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>The trick of making an int of name main (and implicitly assigning it zero) will not work on platforms without no-execute protection, for example the embedded system I&#8217;m working on would happily jump to main and try and execute the 32bit opcode 0&#215;00000000 which you have placed there, which is a jump to self instruction in this particular ISA. This means the program would just get stuck in a busy loop not doing anything, but it&#8217;s not crashed.</p>
<p>One crash I find interesting is to perform INT_MIN/-1</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-5567">
		<article id="comment-5567" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn">tommy tom</cite> on <a href="http://llbit.se/?p=1744#comment-5567"><time pubdate datetime="2013-05-28T03:54:03+00:00">2013-05-28 at 03:54</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>i tried this on Intel Mac OS X, and i get an interesting &#8220;Bus error&#8221; but not a serious crash, i guess.<br />
given:<br />
int main() {<br />
    return 1/0;<br />
}</p>
<p>With clang (Apple LLVM version 4.2 (clang-425.0.27) (based on LLVM 3.2svn)) i get:<br />
$  clang crash.c; ./crash; echo $?<br />
crash.c:2:13: warning: division by zero is undefined [-Wdivision-by-zero]<br />
    return 1/0;<br />
            ^~<br />
1 warning generated.<br />
Bus error: 10<br />
138</p>
<p>And with gcc (gcc version 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)) i get:<br />
$  gcc crash.c; ./crash; echo $?<br />
crash.c: In function ‘main’:<br />
crash.c:2: warning: division by zero<br />
Bus error: 10<br />
138</p>
<p>Still, thanks for sharing the info about automatic assignment as &#8216;int&#8217; if not declared.  Interesting idea!</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-5575">
		<article id="comment-5575" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn"><a href='http://weather.jorick.us/weather.php' rel='external nofollow' class='url'>Ricky Bennett</a></cite> on <a href="http://llbit.se/?p=1744#comment-5575"><time pubdate datetime="2013-05-28T14:50:14+00:00">2013-05-28 at 14:50</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Division by zero on an ARM Cortex processor won&#8217;t crash unless the DIV_0_TRP flag is set in the interrupt controller.  If not set, a division by zero returns zero.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-5579">
		<article id="comment-5579" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn">nickels</cite> on <a href="http://llbit.se/?p=1744#comment-5579"><time pubdate datetime="2013-05-28T15:52:27+00:00">2013-05-28 at 15:52</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>int main(int argc, char *argv[]) {<br />
  *((int*)0) = 1;<br />
}</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-5599">
		<article id="comment-5599" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn">ChadF</cite> on <a href="http://llbit.se/?p=1744#comment-5599"><time pubdate datetime="2013-05-30T00:41:04+00:00">2013-05-30 at 00:41</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Compiler options and runtime may vary, but how about:</p>
<p>Empty foo.c and..</p>
<p>% gcc foo.c -o foo -Wl,&#8211;unresolved-symbols=ignore-in-object-files</p>
<p>% ./foo<br />
fatal process exception: page fault, fault VA = 0&#215;0<br />
Segmentation fault</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-5625">
		<article id="comment-5625" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn">Don</cite> on <a href="http://llbit.se/?p=1744#comment-5625"><time pubdate datetime="2013-05-31T19:45:41+00:00">2013-05-31 at 19:45</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>&#8220;Dividing by zero does not crash a program on all platforms. For instance, on PowerPC (under Mac OS X, if that matters) the result is just zero, nothing terrible happens.&#8221;</p>
<p>I always thought a wrong answer, esp one exceptionally wrong (isn&#8217;t 1/0 &gt; infinity?  At least that&#8217;s what I&#8217;ve been told), would be a big deal.  I guess in the Mac world that&#8217;s only a problem when it&#8217;s an Intel or MS inaccuracy. :)</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-5630">
		<article id="comment-5630" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn">theldoria</cite> on <a href="http://llbit.se/?p=1744#comment-5630"><time pubdate datetime="2013-06-01T09:00:07+00:00">2013-06-01 at 09:00</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>@Don: Nothing can be grater than infinity and 1/0 is simply undefined. You can say that lim(1/x) for x going to 0 from positive side goes to infinity. And please note that lim(1/x) for x going to 0 from negative side goes to negative infinity. So you get different answers for limit depending on the side you come from.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-6407">
		<article id="comment-6407" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<cite class="fn">EpicEraser</cite> on <a href="http://llbit.se/?p=1744#comment-6407"><time pubdate datetime="2013-08-29T16:04:03+00:00">2013-08-29 at 16:04</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>@theldoria: Also note that positive and negative infinity are no valid integers (both mathematically and in C), although they are, by definition (IEEE 754), valid floats (in C).<br />
Therefore, even if the result was equal to infinity (we could define it to be), it would still not work.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
		</ol>

		
	
									<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/?p=1744#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://llbit.se/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																			<p class="comment-notes">Your email address will not be published. Required fields are marked <span class="required">*</span></p>							<p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" /></p>
												<p class="comment-form-comment"><label for="comment">Comment</label> <textarea id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea></p>						<p class="form-allowed-tags">You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes:  <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></p>						<p class="form-submit">
							<input name="submit" type="submit" id="submit" value="Post Comment" />
							<input type='hidden' name='comment_post_ID' value='1744' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
						</p>
						<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="05753214b0" /></p><script type='text/javascript' src='http://llbit.se/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://llbit.se/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://llbit.se/wp-content/plugins/akismet/_inc/form.js?ver=3.0.0'></script>
<p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="166"/></p>					</form>
							</div><!-- #respond -->
			
</div><!-- #comments -->
				                
			</div><!-- #content -->
		</div><!-- #primary -->

		<div id="secondary" class="widget-area" role="complementary">
			<aside id="pages-2" class="widget widget_pages"><h1 class="widget-title">Pages</h1>		<ul>
			<li class="page_item page-item-2"><a href="http://llbit.se/?page_id=2">About Me</a></li>
<li class="page_item page-item-996"><a href="http://llbit.se/?page_id=996">Typefaces</a></li>
		</ul>
		</aside><aside id="linkcat-2" class="widget widget_links"><h1 class="widget-title">Links</h1>
	<ul class='xoxo blogroll'>
<li><a href="https://github.com/llbit/chunky">Chunky on GitHub</a></li>
<li><a href="http://www.reddit.com/r/chunky">Chunky on Reddit</a></li>
<li><a href="http://chunky.llbit.se">Chunky Wiki</a></li>

	</ul>
</aside>
<aside id="archives-2" class="widget widget_archive"><h1 class="widget-title">Archives</h1>		<ul>
	<li><a href='http://llbit.se/?m=201405'>May 2014</a></li>
	<li><a href='http://llbit.se/?m=201404'>April 2014</a></li>
	<li><a href='http://llbit.se/?m=201403'>March 2014</a></li>
	<li><a href='http://llbit.se/?m=201401'>January 2014</a></li>
	<li><a href='http://llbit.se/?m=201312'>December 2013</a></li>
	<li><a href='http://llbit.se/?m=201311'>November 2013</a></li>
	<li><a href='http://llbit.se/?m=201309'>September 2013</a></li>
	<li><a href='http://llbit.se/?m=201308'>August 2013</a></li>
	<li><a href='http://llbit.se/?m=201307'>July 2013</a></li>
	<li><a href='http://llbit.se/?m=201306'>June 2013</a></li>
	<li><a href='http://llbit.se/?m=201305'>May 2013</a></li>
	<li><a href='http://llbit.se/?m=201304'>April 2013</a></li>
	<li><a href='http://llbit.se/?m=201303'>March 2013</a></li>
	<li><a href='http://llbit.se/?m=201302'>February 2013</a></li>
	<li><a href='http://llbit.se/?m=201301'>January 2013</a></li>
	<li><a href='http://llbit.se/?m=201212'>December 2012</a></li>
	<li><a href='http://llbit.se/?m=201211'>November 2012</a></li>
	<li><a href='http://llbit.se/?m=201210'>October 2012</a></li>
	<li><a href='http://llbit.se/?m=201208'>August 2012</a></li>
	<li><a href='http://llbit.se/?m=201207'>July 2012</a></li>
	<li><a href='http://llbit.se/?m=201206'>June 2012</a></li>
	<li><a href='http://llbit.se/?m=201205'>May 2012</a></li>
	<li><a href='http://llbit.se/?m=201204'>April 2012</a></li>
	<li><a href='http://llbit.se/?m=200912'>December 2009</a></li>
	<li><a href='http://llbit.se/?m=200801'>January 2008</a></li>
		</ul>
</aside>		</div><!-- #secondary .widget-area -->

	</div><!-- #main -->

	<footer id="colophon" role="contentinfo">
            <div id="site-generator">
            	Powered by <a href="http://www.wordpress.org" title="Semantic Personal Publishing Platform" rel="generator">WordPress</a>
                and <a href="http://wptheming.com/foghorn/" title="Download the Foghorn Theme" rel="generator">Foghorn</a>
                			</div>
	</footer><!-- #colophon -->
</div><!-- #page -->


<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-23230220-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
	
</body>
</html>
