<!DOCTYPE html>
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en-US"> <![endif]-->
<!--[if IE 7]> <html class="no-js ie7 oldie" lang="en-US"> <![endif]-->
<!--[if IE 8]> <html class="no-js ie8 oldie" lang="en-US"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en-US"> <!--<![endif]-->
<head>
	<meta charset="UTF-8" />
	<title>Strange Loops: Ken Thompson and the Self-referencing C Compiler &#8211; Good Math, Bad Math</title>
		<!--[if IE]><![endif]-->
		<meta property="fb:admins" content="10200068" />
			<meta property="og:title" content="Strange Loops: Ken Thompson and the Self-referencing C Compiler"/>
		<meta property="og:type" content="article"/>
				<meta property="og:image" content="" />
		<meta property="og:url" content="http://scienceblogs.com/goodmath/2007/04/15/strange-loops-dennis-ritchie-a/" />
		<meta property="og:description" content="I&#8217;m currently reading &#8220;I am a Strange Loop&#8221; by Douglas Hofstadter. I&#8217;ll be posting a review of it after I finish it. A &#8220;strange loop&#8221; is Hofstadter&#8217;s term for a G&#246;del-esque self-referential cycle. A strange loop doesn&#8217;t have to involve G&#246;del style problems &#8211; any self-referential cycle is a strange loop. Reading this book reminded&#8230;" />
		<meta property="og:site_name" content="Good Math, Bad Math" />
		<meta name="pinterest" content="nopin" />

	
<!-- Development by Crowd Favorite - http://crowdfavorite.com/ -->
<link rel="alternate" type="application/rss+xml" title="Good Math, Bad Math &raquo; Feed" href="http://scienceblogs.com/goodmath/feed/" />
<link rel="alternate" type="application/rss+xml" title="Good Math, Bad Math &raquo; Comments Feed" href="http://scienceblogs.com/goodmath/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Good Math, Bad Math &raquo; Strange Loops: Ken Thompson and the Self-referencing C Compiler Comments Feed" href="http://scienceblogs.com/goodmath/2007/04/15/strange-loops-dennis-ritchie-a/feed/" />
<style type="text/css" media="screen">.cfpg-gallery img { display: none; }</style>
<noscript><style type="text/css" media="screen">.cfpg-gallery img { display: inline-block; }</style></noscript>
<link rel='stylesheet' id='ngssb-base-css'  href='http://scienceblogs.com/goodmath/wp-content/themes/ngs-science-blogs/ngs-science-blogs-base/css/css.php?f=cfb-base+master+ngs-utility+sb-base&#038;ver=1.4.3.4' type='text/css' media='screen' />
<link rel='stylesheet' id='ngs-scienceblogs-css'  href='http://scienceblogs.com/goodmath/wp-content/themes/ngs-science-blogs/ngs-science-blogs-individual/style.css?ver=1.4.3.4' type='text/css' media='screen' />
<!--[if lte IE 7]>
<link rel='stylesheet' id='ngs-ie7-css'  href='http://scienceblogs.com/goodmath/wp-content/themes/ngs-science-blogs/ngs-science-blogs-base/css/lte-ie7.css?ver=1.4.3.4' type='text/css' media='screen' />
<![endif]-->
<!--[if lte IE 6]>
<link rel='stylesheet' id='ngs-ie6-css'  href='http://scienceblogs.com/goodmath/wp-content/themes/ngs-science-blogs/ngs-science-blogs-base/css/lte-ie6.css?ver=1.4.3.4' type='text/css' media='screen' />
<![endif]-->
<script type='text/javascript' src='http://scienceblogs.com/goodmath/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://scienceblogs.com/goodmath/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://scienceblogs.com/goodmath/wp-content/themes/ngs-science-blogs/ngs-science-blogs-base/js/jquery-placeholder/jquery.placeholder.js?ver=1.4.3.4'></script>
<script type='text/javascript' src='http://scienceblogs.com/goodmath/wp-content/themes/ngs-science-blogs/ngs-science-blogs-base/js/master.js?ver=1.4.3.4'></script>
<script type="text/javascript">
	jQuery(function ($) {
		var widget = $(".widget-ngs-collapsible");
		if (widget.length < 1) { return; };
		widget.find(".widget-title").click(function () {
			var widget = $(this).parent(),
				content = widget.find(".textwidget"),
				isVisible = content.is(":visible"),
				f = isVisible ? "slideUp" : "slideDown",
				c = isVisible ? "removeClass" : "addClass";
			widget[c]("widget-ngs-collapsible-open");
			content[f]("fast");
		});
	});
</script><link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://scienceblogs.com/goodmath/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://scienceblogs.com/goodmath/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='Dr. Egnor reaches a new low' href='http://scienceblogs.com/goodmath/2007/04/14/dr-egnor-reaches-a-new-low-1/' />
<link rel='next' title='Back to &pi;-Calculus: a better introduction' href='http://scienceblogs.com/goodmath/2007/04/16/back-to-calculus-a-better-intr-1/' />
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://scienceblogs.com/goodmath/2007/04/15/strange-loops-dennis-ritchie-a/' />
<link rel='shortlink' href='http://scienceblogs.com/goodmath/?p=384' />
<link rel="icon" type="image/x-icon" href="http://scienceblogs.com/goodmath/wp-content/themes/ngs-science-blogs/ngs-science-blogs-base/img/sbfavicon.ico" />
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
<!--
	generated 1 seconds ago
	generated in 0.436 seconds
	served from batcache in 0.003 seconds
	expires in 599 seconds
-->
</head>
<body class="single single-post postid-384 single-format-standard science-blogs">
	<div id="body">
				
				<!--<div id="navigation_tophat_container"> 			
			<div class="vcard" id="header_logo"> 
				<h2 class="org"><a href="http://www.nationalgeographic.com" class="url fn hiddenText" id="intl_link_headerboard_logo">National Geographic Society</a><span class="partner-text">In partnership with</span></h2> 
				<p class="adr hidden"> 
					<span class="street-address">P.O. Box 98199</span><br/> 
					<span class="locality">Washington</span>, <abbr title="District of Columbia" class="region">DC</abbr> <span class="postal_code">20090-8199</span><br/> 
					<span class="tel hidden">800-647-5463</span> 
				</p> 
				<p class="geo hidden">Lat/Lon:
					<span class="latitude">38.90531943278526</span>,
					<span class="longitude">-77.0376992225647</span> 
				</p> 
			</div><!-- #header_logo -->	
		<!-- </div><!-- #navigation_tophat_container -->
		
		<div class="header-wrapper">
		
			<!-- HEADER ADVERTISEMENT --> 
			<div id="headerboard" class="clearfix"> 
				<div class="leaderboard advertisement sb-ad">
					<h3 class="hidden">Advertisement</h3>
					<!-- advertising --> 					
					
<div class="ad-728x90">
	<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
	<!-- SB Leaderboard -->
	<ins class="adsbygoogle"
	     style="display:inline-block;width:728px;height:90px"
	     data-ad-client="ca-pub-5976931228913298"
	     data-ad-slot="7961815744"></ins>
	<script>
	(adsbygoogle = window.adsbygoogle || []).push({});
	</script>
</div>				</div><!-- .leaderboard .advertisement -->
			</div><!-- #headerboard -->
		
		
		<div id="header">
			<a href="http://scienceblogs.com/"><h1>Science Blogs</h1></a>
			<div class="go-to-blog">
				<form action="" method="" id="blog-nav">
					<label for="blog-list">Go to</label>
					<select id="blog-list">
			<option value="0">Select Blog...</option>

			<option value="http://scienceblogs.com/">ScienceBlogs Home</option>
			<optgroup label="ScienceBlogs"><option value="http://scienceblogs.com/aardvarchaeology/">Aardvarchaeology</option><option value="http://scienceblogs.com/aetiology/">Aetiology</option><option value="http://scienceblogs.com/illconsidered/">A Few Things Ill Considered</option><option value="http://scienceblogs.com/brookhaven/">Brookhaven Bits &amp; Bytes</option><option value="http://scienceblogs.com/builtonfacts/">Built on Facts</option><option value="http://scienceblogs.com/casaubonsbook/">Casaubon&#039;s Book</option><option value="http://scienceblogs.com/classm/">Class M</option><option value="http://scienceblogs.com/commonknowledge/">Common Knowledge</option><option value="http://scienceblogs.com/confessions/">Confessions of a Science Librarian</option><option value="http://scienceblogs.com/deanscorner/">Dean&#039;s Corner</option><option value="http://scienceblogs.com/deltoid/">Deltoid</option><option value="http://scienceblogs.com/denialism/">denialism blog</option><option value="http://scienceblogs.com/developingintelligence/">Developing Intelligence</option><option value="http://scienceblogs.com/digitalbio/">Discovering Biology in a Digital World</option><option value="http://scienceblogs.com/catdynamics/">Dynamics of Cats</option><option value="http://scienceblogs.com/effectmeasure/">Effect Measure</option><option value="http://scienceblogs.com/erv/">erv</option><option value="http://scienceblogs.com/evolutionblog/">EvolutionBlog</option><option value="http://scienceblogs.com/evolution/">Evolution for Everyone</option><option value="http://scienceblogs.com/gregladen/">Greg Laden&#039;s Blog</option><option value="http://scienceblogs.com/SETI/">Life at the SETI Institute</option><option value="http://scienceblogs.com/lifelines/">Life Lines</option><option value="http://scienceblogs.com/esof2014/">Live from ESOF 2014</option><option value="http://scienceblogs.com/omnibrain/">Omni Brain</option><option value="http://scienceblogs.com/seed/">Page 3.14</option><option value="http://scienceblogs.com/pharyngula/">Pharyngula</option><option value="http://scienceblogs.com/insolence/">Respectful Insolence</option><option value="http://scienceblogs.com/sciencepunk/">SciencePunk</option><option value="http://scienceblogs.com/significantfigures/">Significant Figures by Peter Gleick</option><option value="http://scienceblogs.com/startswithabang/">Starts With A Bang</option><option value="http://scienceblogs.com/stoat/">Stoat</option><option value="http://scienceblogs.com/corpuscallosum/">The Corpus Callosum</option><option value="http://scienceblogs.com/thepumphandle/">The Pump Handle</option><option value="http://scienceblogs.com/weizmann/">The Weizmann Wave</option><option value="http://scienceblogs.com/tfk/">Thoughts from Kansas</option><option value="http://scienceblogs.com/principles/">Uncertain Principles</option><option value="http://scienceblogs.com/universe/">Universe</option><option value="http://scienceblogs.com/usasciencefestival/">USA Science and Engineering Festival: The Blog</option><option value="http://scienceblogs.com/worldsfair/">World&#039;s Fair</option><option value="http://scienceblogs.com/zooillogix/">Zooillogix</option></optgroup><optgroup label="Archives"><option value="http://scienceblogs.com/worldsciencefestival/">2010 World Science Festival Blog</option><option value="http://scienceblogs.com/clock/">A Blog Around The Clock</option><option value="http://scienceblogs.com/ethicsandscience/">Adventures in Ethics and Science</option><option value="http://scienceblogs.com/agoodpoop/">A Good Poop</option><option value="http://scienceblogs.com/stressrelated/">All of My Faults Are Stress Related</option><option value="http://scienceblogs.com/angrytoxicologist/">Angry Toxicologist</option><option value="http://scienceblogs.com/appliedstatistics/">Applied Statistics</option><option value="http://scienceblogs.com/art_of_science_learning/">Art of Science Learning</option><option value="http://scienceblogs.com/voteforscience/">A Vote For Science</option><option value="http://scienceblogs.com/basicconcepts/">Basic Concepts in Science</option><option value="http://scienceblogs.com/bioephemera/">bioephemera</option><option value="http://scienceblogs.com/bloggingtheorigin/">Blogging the Origin</option><option value="http://scienceblogs.com/chaoticutopia/">Chaotic Utopia</option><option value="http://scienceblogs.com/christinaslisrant/">Christina&apos;s LIS Rant</option><option value="http://scienceblogs.com/cognitivedaily/">Cognitive Daily</option><option value="http://scienceblogs.com/culturedish/">Culture Dish</option><option value="http://scienceblogs.com/deepseanews/">Deep Sea News</option><option value="http://scienceblogs.com/dispatches/">Dispatches from the Creation Wars</option><option value="http://scienceblogs.com/dotphysics/">Dot Physics</option><option value="http://scienceblogs.com/bushwells/">Dr. Joan Bushwell&apos;s Chimpanzee Refuge</option><option value="http://scienceblogs.com/eruptions/">Eruptions</option><option value="http://scienceblogs.com/evolgen/">evolgen</option><option value="http://scienceblogs.com/evolvingthoughts/">Evolving Thoughts</option><option value="http://scienceblogs.com/framing-science/">Framing Science</option><option value="http://scienceblogs.com/interactions/">Galactic Interactions</option><option value="http://scienceblogs.com/gnxp/">Gene Expression</option><option value="http://scienceblogs.com/geneticfuture/">Genetic Future</option><option value="http://scienceblogs.com/goodmath/">Good Math, Bad Math</option><option value="http://scienceblogs.com/greengabbro/">Green Gabbro</option><option value="http://scienceblogs.com/guiltyplanet/">Guilty Planet</option><option value="http://scienceblogs.com/integrityofscience/">Integrity of Science</option><option value="http://scienceblogs.com/intelisef/">Intel ISEF</option><option value="http://scienceblogs.com/laelaps/">Laelaps</option><option value="http://scienceblogs.com/grrlscientist/">Living the Scientific Life (Scientist, Interrupted)</option><option value="http://scienceblogs.com/mikethemadbiologist/">Mike the Mad Biologist</option><option value="http://scienceblogs.com/mixingmemory/">Mixing Memory</option><option value="http://scienceblogs.com/moleculeoftheday/">Molecule of the Day</option><option value="http://scienceblogs.com/myrmecos/">Myrmecos</option><option value="http://scienceblogs.com/neuronculture/">Neuron Culture</option><option value="http://scienceblogs.com/neurontic/">Neurontic</option><option value="http://scienceblogs.com/neurophilosophy/">Neurophilosophy</option><option value="http://scienceblogs.com/neurotopia/">Neurotopia</option><option value="http://scienceblogs.com/notrocketscience/">Not Exactly Rocket Science</option><option value="http://scienceblogs.com/obesitypanacea/">Obesity Panacea</option><option value="http://scienceblogs.com/observations/">Observations of a Nerd</option><option value="http://scienceblogs.com/twominds/">Of Two Minds</option><option value="http://scienceblogs.com/isisthescientist/">On Becoming a Domestic and Laboratory Goddess</option><option value="http://scienceblogs.com/oscillator/">Oscillator</option><option value="http://scienceblogs.com/photosynthesis/">Photo Synthesis</option><option value="http://scienceblogs.com/purepedantry/">Pure Pedantry</option><option value="http://scienceblogs.com/retrospectacle/">Retrospectacle: A Neuroscience Blog</option><option value="http://scienceblogs.com/revminds/">Revolutionary Minds Think Tank</option><option value="http://scienceblogs.com/sciencesociety/">Science + Society</option><option value="http://scienceblogs.com/sunclipse/">Science After Sunclipse</option><option value="http://scienceblogs.com/scienceisculture/">Science is Culture</option><option value="http://scienceblogs.com/scienceonline/">ScienceOnline 2010: The Blog</option><option value="http://scienceblogs.com/sciencetolife/">Science To Life</option><option value="http://scienceblogs.com/sciencewoman/">Sciencewomen</option><option value="http://scienceblogs.com/seedmoma/">Seed/MoMA Salon</option><option value="http://scienceblogs.com/seejanecompute/">See Jane Compute</option><option value="http://scienceblogs.com/shiftingbaselines/">Shifting Baselines</option><option value="http://scienceblogs.com/signout/">Signout</option><option value="http://scienceblogs.com/speakeasyscience/">Speakeasy Science</option><option value="http://scienceblogs.com/speakingscience/">Speaking Science 2.0</option><option value="http://scienceblogs.com/strangerfruit/">Stranger Fruit</option><option value="http://scienceblogs.com/superbug/">Superbug</option><option value="http://scienceblogs.com/terrasig/">Terra Sigillata</option><option value="http://scienceblogs.com/tetrapodzoology/">Tetrapod Zoology</option><option value="http://scienceblogs.com/challenge/">The Blogger SAT Challenge</option><option value="http://scienceblogs.com/bookoftrogool/">The Book of Trogool</option><option value="http://scienceblogs.com/thecheerfuloncologist/">The Cheerful Oncologist</option><option value="http://scienceblogs.com/drcharlesHIDDEN/">The Examining Room of Dr. Charles</option><option value="http://scienceblogs.com/cortex/">The Frontal Cortex</option><option value="http://scienceblogs.com/intersection/">The Intersection</option><option value="http://scienceblogs.com/islandofdoubt/">The Island of Doubt</option><option value="http://scienceblogs.com/loom/">The Loom</option><option value="http://scienceblogs.com/primatediaries/">The Primate Diaries</option><option value="http://scienceblogs.com/pontiff/">The Quantum Pontiff</option><option value="http://scienceblogs.com/authority/">The Questionable Authority</option><option value="http://scienceblogs.com/rightfulplace/">The Rightful Place Project</option><option value="http://scienceblogs.com/bookclub/">The ScienceBlogs Book Club</option><option value="http://scienceblogs.com/scientificactivist/">The Scientific Activist</option><option value="http://scienceblogs.com/thescian/">The Scientific Indian</option><option value="http://scienceblogs.com/thoughtfulanimal/">The Thoughtful Animal</option><option value="http://scienceblogs.com/voltagegate/">The Voltage Gate</option><option value="http://scienceblogs.com/thusspakezuska/">Thus Spake Zuska</option><option value="http://scienceblogs.com/tomorrowstable/">Tomorrow&#039;s Table</option><option value="http://scienceblogs.com/transcript/">Transcription and Translation</option><option value="http://scienceblogs.com/waltatrandom/">Walt at Random</option><option value="http://scienceblogs.com/webeasties/">We Beasties</option><option value="http://scienceblogs.com/whitecoatunderground/">White Coat Underground</option></optgroup></select>
	<script type="text/javascript">
	/* <![CDATA[ */
		var ngssbBLDropdown = document.getElementById("blog-list");
		function ngssbBLChange() {
				location.href = ngssbBLDropdown.options[ngssbBLDropdown.selectedIndex].value;
		}
		ngssbBLDropdown.onchange = ngssbBLChange;
	/* ]]> */
	</script>				</form>
			</div>

			<form role="search" method="get" id="header_search" action="http://scienceblogs.com/">
				<h2 class="hidden">Search National Geographic</h2> 
				<!-- google search parameters --> 
				<div class="field"> 
					<label for="header_search_input">Search <span class="hidden">nationalgeographic.com</span></label> 
					<input type="text" value="" name="s" id="s">
					<button type="submit" id="header_search_submit" class="hiddenText">Submit</button> 
				</div> 
			</form><!-- #header_search -->
			<div class="main-nav-wrapper">
				<ul id="navigation_mainB" class="nav">
					<li id="nav-item1"><a href="/last-24-hours">Last 24 Hrs</a></li><li id="nav-item2"><a href="http://scienceblogs.com/channel/life-science/">Life Science</a></li><li id="nav-item3"><a href="http://scienceblogs.com/channel/physical-science/">Physical Science</a></li><li id="nav-item4"><a href="http://scienceblogs.com/channel/environment/">Environment</a></li><li id="nav-item5"><a href="http://scienceblogs.com/channel/humanities/">Humanities</a></li><li id="nav-item6"><a href="http://scienceblogs.com/channel/education/">Education</a></li><li id="nav-item7"><a href="http://scienceblogs.com/channel/politics/">Politics</a></li><li id="nav-item8"><a href="http://scienceblogs.com/channel/medicine/">Medicine</a></li><li id="nav-item9"><a href="http://scienceblogs.com/channel/brain-and-behavior/">Brain &amp; Behavior</a></li><li id="nav-item10"><a href="http://scienceblogs.com/channel/technology/">Technology</a></li><li id="nav-item11"><a href="http://scienceblogs.com/channel/information-science/">Information Science</a></li><li class="last"  id="nav-item12"><a href="http://scienceblogs.com/channel/jobs/">Jobs</a></li>				</ul>
			</div><!--/main-nav-wrapper-->
		</div><!--/header-->
	</div><!--/header-wrapper-->
<div id="main">
	<div class="str-inside clearfix">		
		<div id="content">
			<h1 class="blog-title"><a href="http://scienceblogs.com/goodmath/">Good Math, Bad Math</a></h1><div id="post-384" class="post-384 post type-post status-publish format-standard hentry category-goodmath post-full clearfix">
	<div class="header">
	<h1 class="title entry-title"><a rel="bookmark" href="http://scienceblogs.com/goodmath/2007/04/15/strange-loops-dennis-ritchie-a/">Strange Loops: Ken Thompson and the Self-referencing C Compiler</a></h1>
	<div class="byline vcard author">
		
		<img alt='' src='http://1.gravatar.com/avatar/d91cbc789ef67801e927e627a583b5a4?s=58&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D58&amp;r=G' class='avatar avatar-58 photo' height='58' width='58' />Posted by <span class="fn"><a href="http://scienceblogs.com/goodmath/author/goodmath/" title="Posts by Mark C. Chu-Carroll">Mark C. Chu-Carroll</a></span> on <abbr class="published" title="2007-04-15T12:34:21+00:00">April 15, 2007</abbr> 	</div><!--/byline-->
</div><!--/header-->


<div class="box-share">
	<div class="comments">
		<a href="http://scienceblogs.com/goodmath/2007/04/15/strange-loops-dennis-ritchie-a/#comments" rev="post-384" class="to-comments" title="Comment on Strange Loops: Ken Thompson and the Self-referencing C Compiler">(44)</a>	</div>
	<div class="addthis_toolbox addthis_default_style" addthis:url="http://scienceblogs.com/goodmath/2007/04/15/strange-loops-dennis-ritchie-a/" addthis:title="Strange Loops: Ken Thompson and the Self-referencing C Compiler">
		<a class="addthis_button_facebook_like" fb:like:layout="button_count" style="opacity:1;"></a>
		<a class="addthis_button_tweet" tw:via="Scienceblogs"></a>
		<a class="addthis_button_google_plusone" g:plusone:size="medium"></a>
		<a class="addthis_button_email"></a>
		<a class="addthis_button_expanded"><span></span>More &raquo;</a>
	</div>
</div>	<div class="main">
		<div class="content entry-content">
			<p> I&#8217;m currently reading &#8220;I am a Strange Loop&#8221; by Douglas Hofstadter. I&#8217;ll be posting a review of it after I finish it. A &#8220;strange loop&#8221; is Hofstadter&#8217;s term for a G&ouml;del-esque self-referential cycle. A strange loop doesn&#8217;t have to involve G&ouml;del style problems &#8211; any self-referential cycle is a strange loop.</p>
<p> Reading this book reminded me of my favorite strange-loop story. It&#8217;s actually<br />
	a story about software security, and the kinds of stunts you can play with<br />
	software if you&#8217;re clever and subtle. It&#8217;s the story of the Unix C compiler, and the virtually invisible back-door security hole inserted into it by Ken Thompson &#8211; a story he told <a href="http://www.acm.org/classics/sep95/">in his Turing award lecture.</a>.</p>
<p><em>(Idiot that I am, I originally said it was Dennis Ritchie who did this&#8230; Leave it to me to link to the original lecture, and not notice that I got the author wrong!)</em></p>
<p><span id="more-384"></span></p>
<p> In Unix systems, there&#8217;s a program named &#8220;<code>login</code>&#8220;. <code>login</code> is the code that takes your username and password, verifies that the password you gave is the correct one for the username you gave, and if so, logs you in to the system.</p>
<p> For debugging purposes, Thompson put a back-door into &#8220;login&#8221;. The way he did it was by modifying the C compiler. He took the code pattern for password verification, and embedded it into the C compiler, so that when it saw that pattern, it would actually generate code<br />
that accepted either the correct password for the username, <em>or</em> Thompson&#8217;s special debugging password. In pseudo-Python:</p>
<pre>
  def compile(code):
    if (looksLikeLoginCode(code)):
      generateLoginWithBackDoor()
    else:
      compileNormally(code)
</pre>
<p> With that in the C compiler, any time that anyone compiles <code>login</code>,<br />
the code generated by the compiler will include Ritchie&#8217;s back door.</p>
<p> Now comes the really clever part. Obviously, if anyone saw code like what&#8217;s in that<br />
example, they&#8217;d throw a fit. That&#8217;s insanely insecure, and any manager who saw that would immediately demand that it be removed. So, how can you keep the back door, but get rid of the danger of someone noticing it in the source code for the C compiler? You hack the C compiler itself:</p>
<pre>
  def compile(code):
    if (looksLikeLoginCode(code)):
      generateLoginWithBackDoor(code)
    elif (looksLikeCompilerCode(code)):
      generateCompilerWithBackDoorDetection(code)
    else:
      compileNormally(code)
</pre>
<p> What happens here is that you modify the C compiler code so that <em>when it compiles itelf</em>, it inserts the back-door code. So now when the C compiler compiles <code>login</code>, it will insert the back door code; <em>and</em> when it compiles<br />
the C compiler, it will insert the code that <em>inserts the code into both login and the C compiler</em>.</p>
<p> Now, you compile the C compiler with itself &#8211; getting a C compiler that includes the back-door generation code explicitly. Then you <em>delete</em> the back-door code from the C compiler source. <em>But it&#8217;s in the binary</em>. So when you use that binary to produce a new version of the compiler from the source, <em>it will insert the back-door code into<br />
the new version</em>. </p>
<p> So you&#8217;ve now got a C compiler that inserts back-door code when it compiles itself &#8211; and that code appears <em>nowhere in the source code of the compiler</em>. It <em>did</em> exist in the code at one point &#8211; but then it got deleted. But because the C compiler is written in C, and always compiled <em>with itself</em>, that means thats each successive new version of the C compiler will pass along the back-door &#8211; and it will continue to appear in both <code>login</code> and in the C compiler, without any trace in the source code of either.</p>
<p><img src="http://scienceblogs.com/goodmath/wp-content/blogs.dir/476/files/2012/04/i-e926838ab8c00bd374a08ccb3130133f-compiler-loop.jpg" alt="i-e926838ab8c00bd374a08ccb3130133f-compiler-loop.jpg" />	</p>
<p> I&#8217;ve tried to illustrate this with the diagram to the right. The arrows with solid heads are inputs to a compiler; the lines with hollow heads are outputs from the compiler. The solid lines are the original compilation paths: the C compiler source code (without back-door) gets compiled by the C compiler, generating a new (backdoor-free) C-compiler executable; the login source code gets compiled by the C compiler, generating a new login executable without any back door; and the C compiler <em>with backdoor code</em> generates a new C compiler executable with the back door.</p>
<p> Now the tricky part. The dotted lines are what happens after you compile the C compiler <em>with the back-door code included</em>. In thofse paths, code is getting compiled by the C compiler with the back-door. When you compile the login source code with the new C compiler, you get a new login executable which contains back-door code that wasn&#8217;t in the source; and when you compiler the C compiler source code with the back-door C compiler, it will generate <em>a C compiler executable with the back-door code included</em>.</p>
<p> So you&#8217;ve got a loop now: the C compiler will recognize the logic source and insert a back door into it; and using self-reference, the C-compiler will recognize <em>itself</em>, and insert the back door into any versions of itself. </p>
		</div>
	</div>
	<div class="footer">
	
<div class="box-share">
	<div class="comments">
		<a href="http://scienceblogs.com/goodmath/2007/04/15/strange-loops-dennis-ritchie-a/#comments" rev="post-384" class="to-comments" title="Comment on Strange Loops: Ken Thompson and the Self-referencing C Compiler">(44)</a>	</div>
	<div class="addthis_toolbox addthis_default_style" addthis:url="http://scienceblogs.com/goodmath/2007/04/15/strange-loops-dennis-ritchie-a/" addthis:title="Strange Loops: Ken Thompson and the Self-referencing C Compiler">
		<a class="addthis_button_facebook_like" fb:like:layout="button_count" style="opacity:1;"></a>
		<a class="addthis_button_tweet" tw:via="Scienceblogs"></a>
		<a class="addthis_button_google_plusone" g:plusone:size="medium"></a>
		<a class="addthis_button_email"></a>
		<a class="addthis_button_expanded"><span></span>More &raquo;</a>
	</div>
</div>	</div>
</div><!-- .excerpt --><div id="comments"><h2 class="section-title">Comments</h2><ol class="reply-list">
<li class="li-comment" id="li-comment-8376">
	<div class="div-comment" id="div-comment-8376">
<div id="comment-8376" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8376" title="comment permalink">#1</a></span>
		<span class="fn">Jim Hefferon</span>
		<img alt='' src='http://1.gravatar.com/avatar/3d2517c0d5e82d736a1c45cd32af91bf?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 15, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Ken Thompson, not DR.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8377">
	<div class="div-comment" id="div-comment-8377">
<div id="comment-8377" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8377" title="comment permalink">#2</a></span>
		<span class="fn"><a href='http://mollishka.blogspot.com' rel='external nofollow' class='url'>mollishka</a></span>
		<img alt='' src='http://1.gravatar.com/avatar/fe85969a80744c643ca9f938dccd47c2?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 15, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>You&#8217;ve missed a close-italics tag somewhere.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8378">
	<div class="div-comment" id="div-comment-8378">
<div id="comment-8378" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8378" title="comment permalink">#3</a></span>
		<span class="fn">Flaky</span>
		<img alt='' src='http://1.gravatar.com/avatar/372959c3d2ca68d8c558447e39de5565?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 15, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>This article nicely shows the fact that computing security is founded in the very basic building blocks of computer systems.<br />
Should people write independent and minimal compilers in C (or even assembly) for compiling compilers to prevent the scenario in the article? Or how do we make sure that this sort of thing isn&#8217;t likely to happen in large scale in real life?</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8380">
	<div class="div-comment" id="div-comment-8380">
<div id="comment-8380" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8380" title="comment permalink">#4</a></span>
		<span class="fn"><a href='http://magicdragon.com' rel='external nofollow' class='url'>Jonathan Vos Post</a></span>
		<img alt='' src='http://0.gravatar.com/avatar/21a6212c283de5eac85f434f1e89a9ba?s=50&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 15, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>There&#8217;s an analogy to the von Neumann-Ulam solution to the abstract problem of self-reproduction without infinite regress.  See it?</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8381">
	<div class="div-comment" id="div-comment-8381">
<div id="comment-8381" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8381" title="comment permalink">#5</a></span>
		<span class="fn">Anonymous</span>
		<img alt='' src='http://1.gravatar.com/avatar/520ae96cb41a21046399f5c04dc53268?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 15, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>This article, <a href="http://www.acsa-admin.org/2005/abstracts/47.html" rel="nofollow">http://www.acsa-admin.org/2005/abstracts/47.html</a>, describes a way to counter the attack described by Ken Thompson. Of course, you still need either a fully trusted compiler, or two malicious compilers which produce different backdoors.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8383">
	<div class="div-comment" id="div-comment-8383">
<div id="comment-8383" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8383" title="comment permalink">#6</a></span>
		<span class="fn">manuelg</span>
		<img alt='' src='http://1.gravatar.com/avatar/bf5fe50babb73ab42a86f5ab43dc56b9?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 15, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>> I first read of the possibility of such a Trojan horse in an Air Force critique &#8230; of the security of an early implementation of Multics.</p>
<p>This is the most amazing line in the article.  Truly the old masters had a deep and subtle understanding of all these issues.</p>
<p>Some anonymous reviewer tipped Thompson off to this fundamental, beautiful security &#8220;hack&#8221;.</p>
<p>I wish we knew more about this anonymous reviewer.</p>
<p>Unrelated, but similarly amazing to me, is how modern a design VMS possessed in 1980.  Virtualization and completely plug-and-play security.  We are barely catching up.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8384">
	<div class="div-comment" id="div-comment-8384">
<div id="comment-8384" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8384" title="comment permalink">#7</a></span>
		<span class="fn"><a href='http://magicdragon.com' rel='external nofollow' class='url'>Jonathan Vos Post</a></span>
		<img alt='' src='http://0.gravatar.com/avatar/21a6212c283de5eac85f434f1e89a9ba?s=50&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 15, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>&#8220;&#8230; the security of an early implementation of Multics&#8230; &#8221;</p>
<p>The security of Multics was famously bad. The idiot in charge of this parlayed his uselessness by becoming the dark horse candidate of a graduate department Chairmanship in Computer Science.  The outgoing Chairman, who insulted all the faculty by calling them children, in a pre-emptive strike on the fact that he was younger than them, and constantly boasting about his textbook royalties, and was busy with wholesale plagiarism, stepped aside.  </p>
<p>All the candidates were polarized in selection, with many strong supports and many strong oppositions.  The luke-warm Multics dude was nobody&#8217;s first choice, but had no strong opposition, so he became chairman.</p>
<p>His textbook was riddled with errors, and applied to a different mainframe than the department had. Half the students in his Operating Systems class dropped out, citing textbook and the professor&#8217;s attitude.</p>
<p>He fired the seasoned veteran grad student who was his T.A., and was there to teach him the departmental culture and interface with students.</p>
<p>The firing was overturned by a blue-ribbon panel that included a federal mediator.</p>
<p>The chairman, annoyed, lashed out at grad students.  He refused to let the dyslexic student (paper work proved it) take PhD qualifying exam as he took all other exams, with his wife reading him the written questions.  He kicked out the grad student from France, as he didn&#8217;t like French universities.  He alienated the student from Cambridge University. He insisted on several qualified people being denied PhDs.  A third of the faculty left the university, to go somepl=ce saner.  Anywhere.</p>
<p>And to this day, since the faculty ousted him from Chairmanship with a Vote of No Confidence, he boasts about what a genius he was in designing the security of Multics.</p>
<p>I&#8217;ve mentioned no names here.  But I&#8217;d swear any of this under oath.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8386">
	<div class="div-comment" id="div-comment-8386">
<div id="comment-8386" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8386" title="comment permalink">#8</a></span>
		<span class="fn"><a href='http://snowplow.org/martin' rel='external nofollow' class='url'>Anonymous</a></span>
		<img alt='' src='http://0.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=50' class='avatar avatar-50 photo avatar-default' height='50' width='50' />		
		<div></div>
		April 15, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>One of the nice things about that Turing lecture is that he starts it with a brief discussion of quines (though he doesn&#8217;t use that word); if you&#8217;ve never thought about them before, thinking about them and writing one or two is a useful exercise in getting your head around what&#8217;s going on technically in the rest of the talk.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8388">
	<div class="div-comment" id="div-comment-8388">
<div id="comment-8388" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8388" title="comment permalink">#9</a></span>
		<span class="fn">VJB</span>
		<img alt='' src='http://0.gravatar.com/avatar/4bf7d7a83599be102cd6da8f3e25f766?s=50&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 15, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Ineffably sneaky. No wonder I gave up my subscription to &#8216;Computer Design&#8217; in the late 70&#8242;s. Wouldn&#8217;t trust anything that can&#8217;t run on a 4040.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8389">
	<div class="div-comment" id="div-comment-8389">
<div id="comment-8389" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8389" title="comment permalink">#10</a></span>
		<span class="fn">John</span>
		<img alt='' src='http://0.gravatar.com/avatar/222d4a98af5a882e7d781c2ed45a2fde?s=50&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 15, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Don&#8217;t worry, I&#8217;m sure we could run this on a 4040. (You can fit a C compiler into 64K, right?)</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8391">
	<div class="div-comment" id="div-comment-8391">
<div id="comment-8391" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8391" title="comment permalink">#11</a></span>
		<span class="fn"><a href='http://www.jessemerriman.com/' rel='external nofollow' class='url'>Jesse Merriman</a></span>
		<img alt='' src='http://1.gravatar.com/avatar/1ef1fa873fe533b5059325f3ef8ed2a9?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 15, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>There&#8217;s still a Ritchie reference left at the end of the paragraph after the first pseudo-Python block.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8392">
	<div class="div-comment" id="div-comment-8392">
<div id="comment-8392" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8392" title="comment permalink">#12</a></span>
		<span class="fn">Susan B.</span>
		<img alt='' src='http://1.gravatar.com/avatar/7620b05ad3d477447917de2076ee5712?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 15, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Just have to say, Douglas Hofstadter is my hero, along with John H. Conway!</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8394">
	<div class="div-comment" id="div-comment-8394">
<div id="comment-8394" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8394" title="comment permalink">#13</a></span>
		<span class="fn">Jon L</span>
		<img alt='' src='http://0.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=50' class='avatar avatar-50 photo avatar-default' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>I agree with you Susan B. They are great at writing about math in an entertaining way. </p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8395">
	<div class="div-comment" id="div-comment-8395">
<div id="comment-8395" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8395" title="comment permalink">#14</a></span>
		<span class="fn"><a href='http://www.grandlakelinks.com' rel='external nofollow' class='url'>BillBSET</a></span>
		<img alt='' src='http://1.gravatar.com/avatar/f7c2e12a888558c441b995838be8eaa6?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>verify the binary size expected for the complier.<br />
as with any security or hack,, make the verify ck a secret.</p>
<p>When Assembly Language was King,,<br />
The hack was to remove bytes and replace them with yours.<br />
The Security was to inspect for the changes and output them<br />
disassembled.</p>
<p>Never ask a security question that you do not already know the answer to.</p>
<p>Just a thought in passing,, </p>
<p>.,.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8396">
	<div class="div-comment" id="div-comment-8396">
<div id="comment-8396" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8396" title="comment permalink">#15</a></span>
		<span class="fn"><a href='http://tmp.i.am' rel='external nofollow' class='url'>scruzia</a></span>
		<img alt='' src='http://0.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=50' class='avatar avatar-50 photo avatar-default' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Comment #4, referring to David A. Wheeler&#8217;s paper &#8220;Countering Trusting Trust through Diverse Double-Compiling&#8221;, didn&#8217;t separate the URL from its comma.  So here&#8217;s that URL on its own:  <a href="http://www.acsa-admin.org/2005/abstracts/47.html" rel="nofollow">http://www.acsa-admin.org/2005/abstracts/47.html</a> .  There was a discussion of Wheeler&#8217;s paper at Lambda the Ultimate:  <a href="http://lambda-the-ultimate.org/node/1184" rel="nofollow">http://lambda-the-ultimate.org/node/1184</a> about a year and a half ago.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8398">
	<div class="div-comment" id="div-comment-8398">
<div id="comment-8398" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8398" title="comment permalink">#16</a></span>
		<span class="fn"><a href='http://www.site5.com' rel='external nofollow' class='url'>Matt</a></span>
		<img alt='' src='http://0.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=50' class='avatar avatar-50 photo avatar-default' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Small typo:  &#8220;So you&#8217;ve got a loop now: the C compiler will recognize the __logic__ source and insert a back door into it;&#8221;</p>
<p>Should be &#8220;login&#8221; I assume.  Great post, by the way!</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8399">
	<div class="div-comment" id="div-comment-8399">
<div id="comment-8399" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8399" title="comment permalink">#17</a></span>
		<span class="fn"><a href='http://www.stephengeorge.org' rel='external nofollow' class='url'>Stephen George</a></span>
		<img alt='' src='http://1.gravatar.com/avatar/f90e9f87ac97b3ad8de663d4a7128ba9?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>I have compiled GNU-Linux from scratch. IE only source code. (see <a href="http://www.linuxfromscratch.org" rel="nofollow">http://www.linuxfromscratch.org</a>) When you compile the compiler you then use the compiled compiler to compile the compiler and then you check to make sure they are the same. ie</p>
<p>Compile compiles compile(1)<br />
compile(1) compiles compile(2)<br />
you then diff compile(1) and compile(2)<br />
and if they are the same you use<br />
compile(2) to compile compile(3)<br />
and then diff them to make sure they are the same.</p>
<p>So this backdoor would not work &#8230;.<br />
Unless you put a hack in diff &#8230;..</p>
<p>Incidently this is done automatically via make<br />
in GCC.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8400">
	<div class="div-comment" id="div-comment-8400">
<div id="comment-8400" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8400" title="comment permalink">#18</a></span>
		<span class="fn">Ørjan Johansen</span>
		<img alt='' src='http://1.gravatar.com/avatar/fd5e12d6cf774ece154265633921d840?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Stephen George:  Sorry, diff will not work.  The original compile already contains the backdoor, and compile(1) is identical to it, as are all the following versions since they have identical source.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8403">
	<div class="div-comment" id="div-comment-8403">
<div id="comment-8403" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8403" title="comment permalink">#19</a></span>
		<span class="fn"><a href='http://wockets.org' rel='external nofollow' class='url'>Nerull</a></span>
		<img alt='' src='http://1.gravatar.com/avatar/36d5c734445a5cdfddc5c0f2a89fe7b4?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>You would not compromise the GCC source code, but the distro you use to bootstrap Linux-from-scratch.</p>
<p>compile contains the backdoor, and builds it into compile(1). compile(1) now also contains the backdoor, and compiles it into compile(2). The compiler check would pass, with no hacking of the gcc source required. Every program, including login, is now compiled with the compromised GCC.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8404">
	<div class="div-comment" id="div-comment-8404">
<div id="comment-8404" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8404" title="comment permalink">#20</a></span>
		<span class="fn"><a href='http://www.jerith.za.net' rel='external nofollow' class='url'>jerith</a></span>
		<img alt='' src='http://1.gravatar.com/avatar/b7842ee0df3b024a6cad55bbe09c0d08?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Stephen: This doesn&#8217;t help if your original compiler contains the backdoor.  Both subsequent compilers would contain the same backdoor and thus be the same.</p>
<p>Unless you trust the original compiler, you can&#8217;t be sure.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8405">
	<div class="div-comment" id="div-comment-8405">
<div id="comment-8405" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8405" title="comment permalink">#21</a></span>
		<span class="fn">Chris Marshall</span>
		<img alt='' src='http://1.gravatar.com/avatar/53f156260277cd1250c65483ffa17ce2?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>One way to defeat this attack is to write a program that takes a C program as input, obfuscates it (permuting source file, variable, and function names, inserting sequences of instructions that are guaranteed to have no effect on the function they are inserted into, but which the  compiler would not be able to optimize away, &#8230;).  Run the source for your compiler through the obfuscator, compile it with the back-doored-compiler binary (which doesn&#8217;t recognize the source as the source for the compiler anymore) and you obtain a non-back-doored (albeit perhaps inefficient due to the nonsense sequences of instructions inserted by the obfuscator) compiler binary, which you can now use to recompile your compiler source once again to obtain a non-back-doored, efficient compiler binary.</p>
<p>Now, if the attacker knows exactly how your program obfuscator works, she could rewrite the compiler source detector to take it&#8217;s obfuscation into account and still insert the back door.  I am guessing it is easier to write an obfuscator than a detector, however, so the attacker will have a much harder time pulling this off than a defender would have defeating it.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8407">
	<div class="div-comment" id="div-comment-8407">
<div id="comment-8407" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8407" title="comment permalink">#22</a></span>
		<span class="fn"><a href='http://www.stephengeorge.org' rel='external nofollow' class='url'>Stephen George</a></span>
		<img alt='' src='http://0.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=50' class='avatar avatar-50 photo avatar-default' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Wow You guys are completely right.<br />
I am not saying wow because of the back door.</p>
<p>I am saying wow because I said something stupid and no one was rude to me.</p>
<p>Now that is really something</p>
<p>Thanks guys.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8408">
	<div class="div-comment" id="div-comment-8408">
<div id="comment-8408" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8408" title="comment permalink">#23</a></span>
		<span class="fn"><a href='http://www.lomont.org' rel='external nofollow' class='url'>Chris Lomont</a></span>
		<img alt='' src='http://1.gravatar.com/avatar/55d66d588d8f8763a2870d71641b4ef9?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Chris Marshall-<br />
Code obfuscation would not work if the transform is not done on a simple text matching, but is done at a transform level internal to compiler structures. For example, the original code might be set up so that it transforms to a very special parse tree, and that tree is what triggers if backdoor. It is not hard to do this, and as long as the code semantics (not syntax) match the tree, the backdoor can be inserted.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8410">
	<div class="div-comment" id="div-comment-8410">
<div id="comment-8410" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8410" title="comment permalink">#24</a></span>
		<span class="fn">KeithB</span>
		<img alt='' src='http://1.gravatar.com/avatar/3e06e6943b3c48a3fe03adb079e15595?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Mark:<br />
What did you think of Godel, Escher Bach?</p>
<p>I am assuming you read it! 8^)</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8413">
	<div class="div-comment" id="div-comment-8413">
<div id="comment-8413" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8413" title="comment permalink">#25</a></span>
		<span class="fn">Michael Chermside</span>
		<img alt='' src='http://1.gravatar.com/avatar/3c2ce5e843cef58cf546b403c6233597?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Chris Marshall writes that the back-doored-compiler could operate on parse trees, thus defeating the obfuscator. I disagree. I actually think Chris Marshall&#8217;s solution is brilliant (and far more realistic than the usual solution of using a different compiler). The obfuscator need not simply alter variable names&#8230; it can introduce odd behavior the compiler is not clever enough to resolve. For instance, replacing &#8220;for i := 1 to list.length()&#8221; with &#8220;for i := 1 to list.length + new list(2,0,45).sort.first()&#8221; would only be defeated by a back-doored-compiler that can sort lists at compile time. If the compiler is that smart, then I can beat it by introducing spurious values using prime factorization of large numbers.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8414">
	<div class="div-comment" id="div-comment-8414">
<div id="comment-8414" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8414" title="comment permalink">#26</a></span>
		<span class="fn">Mark C. Chu-Carroll</span>
		<img alt='' src='http://1.gravatar.com/avatar/d91cbc789ef67801e927e627a583b5a4?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>KeithB:</p>
<p>GEB is my personal favorite non-fiction book. It&#8217;s pure gold, all the way through. That&#8217;s why I&#8217;m reviewing &#8220;I am a Strange Loop&#8221;: when I heard that Hoftstadter had written a sequel, I immediately wrote to the publisher, and asked for a review copy. I was delighted when they sent me one. </p>
<p>As I said, I&#8217;ll post the review here as soon as I finish it. So far, I think it&#8217;s excellent, but not up there with GEB.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8415">
	<div class="div-comment" id="div-comment-8415">
<div id="comment-8415" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8415" title="comment permalink">#27</a></span>
		<span class="fn">Chris Marshall</span>
		<img alt='' src='http://1.gravatar.com/avatar/53f156260277cd1250c65483ffa17ce2?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Michael:</p>
<p>Your idea of using prime factorization of large numbers is a neat way of pointing out how hard the compiler&#8217;s detection algorithm can be made to work by an obfuscator.</p>
<p>In the ACM paper, Thompson ominously wonders how far down such a trojan might be placed (I think he goes so far to muse about the microcode for a CPU).  I think the further down you try to place such a trojan, the easier it would be to fool it through obfuscation.</p>
<p>If a compiler with access to the libraries of a modern operating system can&#8217;t defeat an obfuscation algorithm, what chance does a less complex computing level like microcode have?</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8417">
	<div class="div-comment" id="div-comment-8417">
<div id="comment-8417" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8417" title="comment permalink">#28</a></span>
		<span class="fn">Dan D.</span>
		<img alt='' src='http://0.gravatar.com/avatar/c900372c26e1fc4688dd058a3c910976?s=50&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Assuming it&#8217;s only the C compiler and nothing lower-level that has the backdoor, one could get around it by writing a C compiler in Pascal, B, Smalltalk, or something else that compiles to machine code without using C as an interpreter or intermediary, preferably something whose compiler was not written in C, though I imagine that a level of indirection would be enough to throw off the backdoor-inserting code; after all, the backdoor code recognizes <em>C</em> compiler sources; presumably it wouldn&#8217;t recognize Pascal compiler sources. So compile your Pascal compiler, write a C compiler in Pascal, and then any C compiler compiled with THAT compiler should be safe. </p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8418">
	<div class="div-comment" id="div-comment-8418">
<div id="comment-8418" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8418" title="comment permalink">#29</a></span>
		<span class="fn">Anthony Sorace</span>
		<img alt='' src='http://1.gravatar.com/avatar/5b7cbe64e8ff9e79997e2168152fc71e?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Michael:<br />You&#8217;re correct that there are more complicated obfuscation techniques that could likely thwart this particular kind of back door, but Chris&#8217; point &#8211; that simple variable renaming (and likely other things like loop unrolling) &#8211; wouldn&#8217;t do it if the back door was implemented on a parse tree. move it after optimization and it gets even harder (although you may have to implement one back door for each optimization level/option, perhaps).</p>
<p>Dan:<br />The language the original compiler is written in isn&#8217;t really relevant. The first-level hack (hiding the login translation hack in the C compiler binary) would be implemented by your Pascal/Smalltalk/whatever program and then that binary would still produce corrupted versions of the login program. Also, no reason why it couldn&#8217;t <i>also</i> implement the first-order hack on C source.<br />The point you&#8217;re almost getting to, I think, is that this is pretty code-dependent, but that comes back to the first posted work-around: use multiple, independent compilers. Now if only everyone would stop using those stupid gcc-only language extensions&#8230; <img src="http://scienceblogs.com/goodmath/wp-includes/images/smilies/icon_wink.gif" alt=";-)" class="wp-smiley" /> </p>
<p>Personally, I thought the best part of Thompson&#8217;s speech was the way he introduced what he&#8217;d done: this wasn&#8217;t a nefarious capability added for the purpose of being malicious or giving cool talks, it was just the extension of an inherent capability with lots of important uses elsewhere.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8419">
	<div class="div-comment" id="div-comment-8419">
<div id="comment-8419" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8419" title="comment permalink">#30</a></span>
		<span class="fn">Chris Marshall</span>
		<img alt='' src='http://1.gravatar.com/avatar/53f156260277cd1250c65483ffa17ce2?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Anthony:</p>
<p>I understood the parse tree point when I wrote my original post, which is why I talked about inserting sequences of instructions (that don&#8217;t change the result of the function they occur in) that the compiler could not to optimize away.  File, variable, and function renaming would not be sufficient, but it would be necessary (lest you leave a specially named varaible in place that the compiler detector happened to be keying off of).</p>
<p>Regarding the multiple compiler/language approach, I think you can thwart a more powerful adversary with the same level of effort put into obfuscation than you could by writing more cross compilers.  It is much harder to write compilers than obfuscators.</p>
<p>Chris Marshall</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8431">
	<div class="div-comment" id="div-comment-8431">
<div id="comment-8431" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8431" title="comment permalink">#31</a></span>
		<span class="fn"><a href='http://don.geddis.org/' rel='external nofollow' class='url'>Don Geddis</a></span>
		<img alt='' src='http://0.gravatar.com/avatar/45da4d7c6fa428cff0f4557dca7009d1?s=50&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Mark,</p>
<p>You&#8217;ve written your summary as though Ken Thompson actually did the hack he wrote about.</p>
<blockquote><p>
For debugging purposes, Thompson put a back-door into &#8220;login&#8221;. The way he did it was by modifying the C compiler.
</p></blockquote>
<p>But it was just a thought experiment.  He never actually put a backdoor in &#8220;login&#8221;, much less the double-trojan in the C compiler.</p>
<p>&#8211; Don</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8432">
	<div class="div-comment" id="div-comment-8432">
<div id="comment-8432" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8432" title="comment permalink">#32</a></span>
		<span class="fn"><a href='http://don.geddis.org/' rel='external nofollow' class='url'>Don Geddis</a></span>
		<img alt='' src='http://0.gravatar.com/avatar/45da4d7c6fa428cff0f4557dca7009d1?s=50&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 16, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>OK, nevermind, I take it back.  Reading the ACM lecture more carefully, I see that Thompson apparently is claiming that he actually installed the trojan C compiler at a real site, as a proof of concept if nothing else.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8468">
	<div class="div-comment" id="div-comment-8468">
<div id="comment-8468" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8468" title="comment permalink">#33</a></span>
		<span class="fn">Rob Mowery</span>
		<img alt='' src='http://0.gravatar.com/avatar/81f3d2062c81fa8fd66ab23c6098c525?s=50&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 17, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>This also shows that while Internet security has become a big topic in the last 10 years &#8211; that the core systems and core internet have been around since late 1960&#8242;s.  Considering there have been upgrades, etc. over the last 30-40 years, one would assume that backdoors from the 1960&#8242;s-1980&#8242;s were all found and removed. But suppose this is not the case or suppose many systems &#8211; even if OS and hardware were upgraded had core aspects of the system that were replicated and contain &#8220;hidden wonders&#8221; and &#8220;backdoors&#8221;. So how secure would all the telephone switching systems (early on built on Unix), banking systems, etc really be today &#8211; supposing that there are many hidden backdoors or maybe dormant agents lying around?  Everyone seems to be looking at the present security holes &#8211; this is the first time I have seen someone look back in computing history to point out that trojans, viruses, and backdoors existed long before commercial internet. Great post and great research Mark!</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8469">
	<div class="div-comment" id="div-comment-8469">
<div id="comment-8469" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8469" title="comment permalink">#34</a></span>
		<span class="fn">Nate Cook</span>
		<img alt='' src='http://1.gravatar.com/avatar/5f463dd4e7af28b64ad8f0e032ee82dc?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 17, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>Wow &#8211; fascinating!</p>
<p>Is this a case for a compiler written in an interpreted language like Python rather than C? (Probably horrendously slow, I imagine.) That way you could inspect the code that was being used to compile directly&#8230;</p>
<p>Or would that not help, as the interpreter itself could be comprised?</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8478">
	<div class="div-comment" id="div-comment-8478">
<div id="comment-8478" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8478" title="comment permalink">#35</a></span>
		<span class="fn">Justin</span>
		<img alt='' src='http://0.gravatar.com/avatar/04605e9182338c7957491ba88079685d?s=50&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 17, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>I can&#8217;t believe you used &#8220;pseudo-Python&#8221; in an article about C.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8684">
	<div class="div-comment" id="div-comment-8684">
<div id="comment-8684" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8684" title="comment permalink">#36</a></span>
		<span class="fn">itchy</span>
		<img alt='' src='http://0.gravatar.com/avatar/816ea82940e924e10465d98860779429?s=50&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 24, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>When I was in college, my mother brought home &#8212; from a used book store &#8212; Metamagical Themas. I loved that collection and went on to get GEB. Since then, I&#8217;ve eagerly anticipated all of Hofstadter&#8217;s books. I&#8217;m halfway through the current one, and I like it, but it doesn&#8217;t yet have the magic of some of his others.</p>
<p>Despite its less scientific bent, Le Ton Beau de Marot remains my favorite. I even penned my own poem based on the title work as a marriage proposal to my wife.</p>
<p>I have great respect for Dennett, Dawkins, etc., but Hofstadter has a charm that is very personal.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8755">
	<div class="div-comment" id="div-comment-8755">
<div id="comment-8755" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8755" title="comment permalink">#37</a></span>
		<span class="fn"><a href='http://magicdragon.com' rel='external nofollow' class='url'>Jonathan Vos Post</a></span>
		<img alt='' src='http://0.gravatar.com/avatar/21a6212c283de5eac85f434f1e89a9ba?s=50&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 28, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>There&#8217;s a new review of &#8220;I Am a Strange Loop&#8221; at americanscientist.org that begins:</p>
<p>Self Assembly<br />
Margaret A. Boden</p>
<p>I Am a Strange Loop. Douglas R. Hofstader. xxiii + 384 pp. Basic Books, 2007. $26.95.</p>
<p>Douglas Hofstadter suffers from the grave disadvantage of having written a masterpiece as a young man: the utterly unique Gödel, Escher, Bach: An Eternal Golden Braid. This exhilarating intellectual and rhetorical extravaganza, published in 1979, was focused on the new ways of studying life and minds that were being offered by cognitive science. The book spanned mathematical logic, artificial intelligence, artificial life, psychology, neuroscience and the philosophy of mind. Along the way, it provided deep insights into mathematics, music and creativity&#8211;plus countless deliciously outrageous puns. Despite the puns, it was translated many times and became a cult book worldwide.</p>
<p>[truncated]</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-8756">
	<div class="div-comment" id="div-comment-8756">
<div id="comment-8756" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-8756" title="comment permalink">#38</a></span>
		<span class="fn"><a href='http://magicdragon.com' rel='external nofollow' class='url'>Jonathan Vos Post</a></span>
		<img alt='' src='http://0.gravatar.com/avatar/21a6212c283de5eac85f434f1e89a9ba?s=50&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		April 28, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>By the way, today, 28 April 2007, is the 101st birthday of Kurt Gödel. This comment refers to itself.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-10153">
	<div class="div-comment" id="div-comment-10153">
<div id="comment-10153" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-10153" title="comment permalink">#39</a></span>
		<span class="fn">|333173|3|_||3</span>
		<img alt='' src='http://1.gravatar.com/avatar/9e5f29d4f87b29406ec125906a977791?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		June 13, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>THe article is not about C as such, it merely uses C as the example. Since psudo-python is clear to anyone who reads it, even  non-computer scientists, it is a good choice.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-10154">
	<div class="div-comment" id="div-comment-10154">
<div id="comment-10154" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-10154" title="comment permalink">#40</a></span>
		<span class="fn">AJS</span>
		<img alt='' src='http://0.gravatar.com/avatar/2f52b8b400e1df39f3a9b1447e18d198?s=50&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		June 13, 2007		<span class="report"></span>
			</div>
	<div class="content">
		<p>The solution to the &#8220;compromised C compiler&#8221; problem is to write your own partial C interpreter in assembly language.  (I say &#8220;partial&#8221; because it only needs to be able to understand enough of the language to interpret the compiler source code and it doesn&#8217;t matter how long it takes to do its job as long as it finishes eventually.)  You then feed your compiler source code to the interpreter.  Now the combination is behaving as a compiler <em>but it&#8217;s only doing what the source code says it will do</em>.  You&#8217;re sure of this because you wrote the interpreter  (so you trust it)  and you read the source code of the compiler and didn&#8217;t find anything nasty in it.</p>
<p>Now you&#8217;re not using a compromised compiler to compile the compiler, so the compiler you compile on the compiler running interpretatively  (which you will then use to compile the login command)  is clean.  (Only the compromised compiler, which you would have had to use to compile the compiler if you had never written your interpreter, will put the extra code into any compiler that it compiles.)</p>
<p>Or is it?  Because all modern Intel and AMD 80&#215;86-type processors are actually using a RISC processor internally, which runs a hard-coded program to emulate 80&#215;86 instructions.  So there&#8217;s no way to be <em>really</em> sure that, say, an instruction such as ADC AL,BL is <em>only</em> adding BL + C to AL and not doing something else on the sidelines &#8230;..  You&#8217;d have to build your own processor from discrete components to be <em>really</em> sure.  Although, taken right to the extreme, you can&#8217;t even prove Ohm&#8217;s Law is true &#8230;..  every single voltmeter and ammeter ever made already relies on it.</p>
<p>This, incidentally, is why I would <strong>never</strong> use a compiler where the Source Code was not made available for viewing &#8212; or anything compiled with it.  It&#8217;s still a lot <em>easier</em> to tamper with than something like GCC, which is available for all to view.</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-16736">
	<div class="div-comment" id="div-comment-16736">
<div id="comment-16736" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-16736" title="comment permalink">#41</a></span>
		<span class="fn"><a href='http://www.sourcingmap.com/bottle-opener-c-1158_1776.html' rel='external nofollow' class='url'>cornner</a></span>
		<img alt='' src='http://1.gravatar.com/avatar/f7334a019c3e0f76d05ca21f3b7e93cf?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		July 14, 2008		<span class="report"></span>
			</div>
	<div class="content">
		<p>I can&#8217;t believe you used &#8220;pseudo-Python&#8221; in an article about C.<a href="http://www.sourcingmap.com/bottle-opener-c-1158_1776.html" rel="nofollow">http://www.sourcingmap.com/bottle-opener-c-1158_1776.html</a></p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-17683">
	<div class="div-comment" id="div-comment-17683">
<div id="comment-17683" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-17683" title="comment permalink">#42</a></span>
		<span class="fn"><a href='http://project343.blogspot.com/' rel='external nofollow' class='url'>Declan Malone</a></span>
		<img alt='' src='http://0.gravatar.com/avatar/26fbc52809ad41733e6e9df962d8d5f9?s=50&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		October 5, 2008		<span class="report"></span>
			</div>
	<div class="content">
		<p>There is a relatively straight-forward way of getting back to having a clean compiler again, even if your current compiler is compromised: pass the source code through an obfuscator before compiling it. Provided the ken-hacked compiler&#8217;s context-sensitive checks are based purely on lexical checks, it will no longer be able to self-recognise and so it won&#8217;t be able to insert the malicious patch into your new code. This new compiler can be used to recompile the original sources (which can be assumed to be and/or checked to be free of backdoors). If the resulting compiler is different from the one you were originally using, then you know that something wicked had been going on (assuming, reasonably, that a compiler is purely deterministic and should always produce the same output for a given input).</p>
<p>Unfortunately, this method isn&#8217;t foolproof. &#8220;Ken&#8221; (convenient name for the attacker) could come up with an anti-anti-ken compiler hack. If he knows how your obfuscator works then he can get around it in some way (either undo the obfuscation before parsing, or self-identify on some attributes that are invariant under your obfuscation, eg, shift from lexical recognition to recognition of patterns in the intermediate code representation). Dr. Fred Cohen (the man who popularised the term &#8220;computer virus&#8221;) has written about the impossibility (in general) of recognising viral code in setups like this. In practice, however, even a simple anti-ken hack like this will defeat practically any naive implementation of the Ken hack. Given how abstruse the attack is in the first place, and how unlikely it is to appear in the wild (given that there are easier attack vectors available to exploit), I don&#8217;t really see how an arms race between Ken, anti-Ken, anti-anti-Ken and so on would develop.</p>
<p>Another, parallel method of detecting/defeating the Ken hack is simply to build your compiler program using a different machine and/or compiler. As with the obfuscation method, you can use your temporary (clean) compiler to recompile the original sources leaving you with a binary that can be compared directly with the original (suspect) binary. A combination of the two provides defense in depth, and should be sufficient for even the most paranoid. Those people can then get back to worrying about their linker, kernel, communications links, etc <img src="http://scienceblogs.com/goodmath/wp-includes/images/smilies/icon_wink.gif" alt=";-)" class="wp-smiley" />  (or, for the truly paranoid, a self-aware &#8220;Kuang&#8221; class of virus).</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-23758">
	<div class="div-comment" id="div-comment-23758">
<div id="comment-23758" class="comment even thread-even depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-23758" title="comment permalink">#43</a></span>
		<span class="fn">kakaz</span>
		<img alt='' src='http://1.gravatar.com/avatar/d06822aba22b3d77fd4c417588111d9b?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		January 21, 2010		<span class="report"></span>
			</div>
	<div class="content">
		<p>Do You realize that what You obtain is kind of monad? This diagrams may be joined one by one to produce new compilers with bacdors and new login with bacdors as they product. Probably there is method to check if this kind of monadic composition may be found and resolved&#8230;</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->

<li class="li-comment" id="li-comment-24117">
	<div class="div-comment" id="div-comment-24117">
<div id="comment-24117" class="comment odd alt thread-odd thread-alt depth-1 reply">
	<div class="header">
		<span class="comment-link"><a href="#comment-24117" title="comment permalink">#44</a></span>
		<span class="fn"><a href='http://ankitjain.info/' rel='external nofollow' class='url'>Ankit Jain</a></span>
		<img alt='' src='http://1.gravatar.com/avatar/56790c3bee2fd6cd119d34cc9a7545ac?s=50&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D50&amp;r=G' class='avatar avatar-50 photo' height='50' width='50' />		
		<div></div>
		February 5, 2010		<span class="report"></span>
			</div>
	<div class="content">
		<p>mark,<br />
the link u mentioned does not exist now. i found a copy of the same at <a href="http://cm.bell-labs.com/who/ken/trust.html" rel="nofollow">http://cm.bell-labs.com/who/ken/trust.html</a></p>
<p>Btw, good explanation. i came to know a few new things.</p>
<p>- ankit</p>
	</div>
</div><!--/comment-->	</div>
</li><!-- #comment-## -->
</ol></div><!--/comments-->		</div><!--/content-->
		<div id="sidebar">
			<div class="sb-ad"></div><div id="search-2" class="widget clearfix widget_search">
	<h2 class="widget-title">Search This Blog</h2>
	<form role="search" method="get" id="searchform" action="http://scienceblogs.com/goodmath/">
		<div>
			<label class="screen-reader-text" for="s">Search for:</label>
			<input type="text" value="" name="s" id="s">
			<input type="submit" id="searchsubmit" value="Search">
		</div>
	</form>
</div>
<div id="ngs_subscribe-2" class="widget clearfix widget-ngs-subscribe">
	<h2 class="widget-title">Subscribe</h2>
	<span class="accessibility">Subscribe via:</span>
	<ul class="nav">
		<li>
			<a class="imr imr-rss" href="http://scienceblogs.com/goodmath/feed/">RSS2</a>
		</li>
		<li>
			<a class="imr imr-atom" href="http://scienceblogs.com/goodmath/feed/atom/">Atom</a>
		</li>
		<li class="help">
			Subscribe via a feed reader		</li>
	</ul>
</div>

<div class="sb-sponsor"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- SB Rectangle -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:250px"
     data-ad-client="ca-pub-5976931228913298"
     data-ad-slot="3392015346"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
<div class="widget">
	<h2 class="widget-title">No Widgets Yet!</h2>
	<p>It looks like you haven&rsquo;t added any widgets to this sidebar yet. To customize this sidebar, go <a href="http://scienceblogs.com/goodmath/wp-admin/widgets.php">add some</a>!</p>
</div>		</div><!--/sidebar-->
	</div><!--/str-inside-->
</div><!--/main-->

	<hr class="hidden" />
	<div class="footer-wrapper">
		<div id="footer">
			<ul class="footer-links">
						</ul>
 			<div class="copyright">&copy; 2006-2014 ScienceBlogs LLC. ScienceBlogs is a registered trademark of ScienceBlogs LLC. All rights reserved.</div>
                </div><!--/footer-->
        </div><!--/footer-wrapper-->
</div><!--/body-->
<script type='text/javascript' src='http://s7.addthis.com/js/250/addthis_widget.js?ver=1.4.3.4#pubid=ng-dmg'></script>
<script type='text/javascript' src='http://scienceblogs.com/goodmath/wp-content/themes/ngs-science-blogs/ngs-science-blogs-base/functions/cf-slideshow-gallery/js/jquery-galleria/src/jquery.galleria.min.js?ver=0.2'></script>
<script type='text/javascript' src='http://scienceblogs.com/goodmath/wp-content/themes/ngs-science-blogs/ngs-science-blogs-base/js/galleria-nat-geo/galleria.nat-geo.js?ver=0.2'></script>
  <script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-163469-3']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>

<!-- Begin comScore Tag -->
<script>
  var _comscore = _comscore || [];
  _comscore.push({ c1: "2", c2: "3005368" });
  (function() {
    var s = document.createElement("script"), el = document.getElementsByTagName("script")[0]; s.async = true;
    s.src = (document.location.protocol == "https:" ? "https://sb" : "http://b") + ".scorecardresearch.com/beacon.js";
    el.parentNode.insertBefore(s, el);
  })();
</script>
<noscript>
  <img src="http://b.scorecardresearch.com/p?c1=2&c2=3005368&cv=2.0&cj=1" />
</noscript>
<!-- End comScore Tag -->

</body>
</html>