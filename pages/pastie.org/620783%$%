<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head id="head"><script type="text/javascript">var NREUMQ=NREUMQ||[];NREUMQ.push(["mark","firstbyte",new Date().getTime()]);</script>
<title>#620783 - Pastie</title>
<link href="/assets/application-af81f0022fd3022ee714585ed12834b8.css" media="screen" rel="stylesheet" type="text/css"/>
<script type="text/javascript">
    (function() {
      var config = {
        kitId: 'cag5cie',
        scriptTimeout: 3000
      };
      var h=document.getElementsByTagName("html")[0];h.className+=" wf-loading";var t=setTimeout(function(){h.className=h.className.replace(/( |^)wf-loading( |$)/g,"");h.className+=" wf-inactive"},config.scriptTimeout);var tk=document.createElement("script");tk.src='//use.typekit.net/'+config.kitId+'.js';tk.type="text/javascript";tk.async="true";tk.onload=tk.onreadystatechange=function(){var a=this.readyState;if(a&&a!="complete"&&a!="loaded")return;clearTimeout(t);try{Typekit.load(config)}catch(b){}};var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(tk,s)
    })();
  </script>
<script src="/assets/application-940b7c5af7150b9b50cbe92fb69802b1.js" type="text/javascript"></script>
<link rel="icon" type="image/gif" href="/images/pastie.png">
<link rel="SHORTCUT ICON" type="image/gif" href="/images/pastie.png">
</head>
<body id="show" class="">
<div id="header">
<div class="body">
<span class="blog">
<a href="http://savenatenow.com">Nate's Story</a>
<span class="pipe">|</span>
<a href="http://twitter.com/pastieorg">@pastieorg</a>
<span class="pipe">|</span>
<a href="http://status.pastie.org/">status</a>
<span class="pipe">|</span>
<a href="http://runningblind.com/">Running Blind</a>
</span>
<div class="welcome">
<a href="/">This is Pastie</a>.
</div>
<ul id="nav">
 
 
<li class=""><a href="/pastes/new">Share</a></li>
<li class='active'>
<a href="/pastes">Browse</a>
</li>
<li><a href="/tools/">Tools</a></li>
<li><a href="/help/">Help</a></li>
<li><a href="/about/">About</a></li>
</ul>
<div style="clear:both"></div>
</div>
</div>
 
<div id="container">
<div id="content">
<div class="headers"><div class="metadata">
<div style="float:right; margin-right:-10px; margin-left:20px; margin-top:1px">
<img src="/images/full_screen.png" id="fullscreen"/>
</div>
<div style="float:right;" class="links">
<div class="tool" style="xdisplay:none">
<a href="/pastes/620783/reply"><img alt="Document@2x" height="24" src="/images/symbolicons/black/document@2x.png" title="Copy and Repaste" width="24"/></a>
<label>Repaste</label>
</div>
<span class="pipe">|</span>
<div class="tool">
<a href="#" onclick="Paste.embed(); return false;"><img alt="Chain_link@2x" height="24" src="/images/symbolicons/black/chain_link@2x.png" title="Embed this paste in a web page" width="24"/></a>
<label>Embed</label>
</div>
<span class="pipe">|</span>
<div class="tool">
<a href="/pastes/620783/download"><img alt="Arrow_down@2x" height="24" src="/images/symbolicons/black/arrow_down@2x.png" title="Download"/></a>
<label>Download</label>
</div>
<span class="pipe">|</span>
<div class="tool">
<a href="http://pastie.org/pastes/620783/text" title="View the raw source of this pastie"><img alt="Spiral_paper@2x" height="24" src="/images/symbolicons/black/spiral_paper@2x.png" width="24"/></a>
<label>Raw</label>
</div>
</div>
<div style="float:right; margin-right:50px">
 
 
<div class="sizer">
<span class="smaller">A</span>
<span class="small">A</span>
<span class="large">A</span>
</div>
 
</div>
<p>
Python
&nbsp;
<label class="date">
<span class="typo_date" title="Thu, 17 Sep 2009 15:18:45 GMT" id='paste_date'>September 17, 2009<br/> 3:18PM EDT</span>
</label>
<script language="javascript">
  	e=$('#paste_date');
  	e.html(get_local_time_for_date(e[0].title));
  </script>
&nbsp;&nbsp;&nbsp;
<a class="abuse" href="/pastes/620783/abuse">Report abuse</a>
</p>
</div>
<div class="fontoptions" style="display:none">
<select id="ffont">
<option>...detecting fonts...</option>
</select>
<select id="fsize">
<option>Sizes</option>
</select>
<select id="ftheme">
<option value="themes/clean">Clean (Pastie)</option>
<option value="themes/all_hallows_eve">All Hallow&#x27;s Eve</option>
<option value="themes/blackboard">Blackboard</option>
<option value="themes/brilliance_black">Brilliance Black</option>
<option value="themes/cobalt">Cobalt</option>
<option value="themes/expreso_libre">Espresso Libre</option>
<option value="themes/idle">IDLE</option>
<option value="themes/mac_classic">Mac Classic</option>
<option value="themes/magicwb_amiga">MagicWB (Amiga)</option>
<option value="themes/pastels_on_dark">Pastels on Dark</option>
<option value="themes/slate">Slate</option>
<option value="themes/slush_and_poppies">Slush and Poppies</option>
<option value="themes/sunburst">Sunburst</option>
<option value="themes/sunburst_josh">Sunburst (Josh)</option>
<option value="themes/twilight">Twilight</option>
<option value="themes/vibrant_ink">Vibrant Ink</option>
</select>
&nbsp;
<button>Done</button>
</div>
</div>
<div class="body">
<script>
$(document).ready(function() {Theme.enable()})
</script>
 
 
 
<p class="smallutils" id="wrapoptions" style="display:none;">
<a href="http://pastie.org/620783/wrap">Wrap text</a>
</p>
<div class="allcode">
<table cellpadding="0" cellspacing="0" border="0">
<tr>
<td>
<pre class="textmate-source-numbers">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
</pre>
</td>
<td>
<pre class="textmate-source"><pre class="sunburst"><span class='comment comment_line comment_line_number-sign comment_line_number-sign_python'>#!/usr/bin/env python</span>

<span class='string string_quoted string_quoted_single string_quoted_single_block string_quoted_single_block_python'>'''</span>
<span class="String">$ python omegler.py nickname hostname \#channel</span>
<span class="String"></span>
<span class="String">&lt;you&gt; omegler next!</span>
<span class="String">&lt;omegler&gt; -- connected to 1 of 1201</span>
<span class="String">&lt;omegler&gt; hai! a/s/l plz</span>
<span class="String">&lt;you&gt; omegler 19/f/internetz</span>
<span class="String">&lt;omegler&gt; omg h0tz i am waring no clothes</span>
<span class="String">&lt;you&gt; omegler stop!</span>
<span class="String">&lt;omegler&gt; -- disconnected</span>
<span class="String"></span>
<span class="String">Remember, victim is unaware they are talking to a group.</span>
<span class="String">'''</span>

<span class='keyword keyword_control keyword_control_import keyword_control_import_python'>import</span> cgi
<span class='keyword keyword_control keyword_control_import keyword_control_import_python'>import</span> sys
<span class='keyword keyword_control keyword_control_import keyword_control_import_python'>import</span> time
<span class='keyword keyword_control keyword_control_import keyword_control_import_python'>import</span> urllib

<span class='keyword keyword_control keyword_control_import keyword_control_import_from keyword_control_import_from_python'>from</span> functools <span class='keyword keyword_control keyword_control_import keyword_control_import_python'>import</span> partial

<span class='keyword keyword_control keyword_control_import keyword_control_import_python'>import</span> simplejson

<span class='keyword keyword_control keyword_control_import keyword_control_import_from keyword_control_import_from_python'>from</span> twisted.internet <span class='keyword keyword_control keyword_control_import keyword_control_import_python'>import</span> defer
<span class='keyword keyword_control keyword_control_import keyword_control_import_from keyword_control_import_from_python'>from</span> twisted.internet <span class='keyword keyword_control keyword_control_import keyword_control_import_python'>import</span> protocol
<span class='keyword keyword_control keyword_control_import keyword_control_import_from keyword_control_import_from_python'>from</span> twisted.internet <span class='keyword keyword_control keyword_control_import keyword_control_import_python'>import</span> reactor
<span class='keyword keyword_control keyword_control_import keyword_control_import_from keyword_control_import_from_python'>from</span> twisted.python <span class='keyword keyword_control keyword_control_import keyword_control_import_python'>import</span> log
<span class='keyword keyword_control keyword_control_import keyword_control_import_from keyword_control_import_from_python'>from</span> twisted.web <span class='keyword keyword_control keyword_control_import keyword_control_import_python'>import</span> client <span class='keyword keyword_other keyword_other_python'>as</span> web_client
<span class='keyword keyword_control keyword_control_import keyword_control_import_from keyword_control_import_from_python'>from</span> twisted.words.protocols <span class='keyword keyword_control keyword_control_import keyword_control_import_python'>import</span> irc


<span class='meta meta_class meta_class_old-style meta_class_old-style_python'><span class='storage storage_type storage_type_class storage_type_class_python'>class</span> <span class='entity entity_name entity_name_type entity_name_type_class entity_name_type_class_python'>OmegleClient</span>:</span>
    HEADERS <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='meta meta_structure meta_structure_dictionary meta_structure_dictionary_python'>{<span class='meta meta_structure meta_structure_dictionary meta_structure_dictionary_key meta_structure_dictionary_key_python'>
        <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'Content-type'</span></span>: <span class='meta meta_structure meta_structure_dictionary meta_structure_dictionary_value meta_structure_dictionary_value_python'><span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'application/x-www-form-urlencoded'</span>
</span>    }</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>_post</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>endpoint</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>timeout</span><span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span><span class='constant constant_numeric constant_numeric_integer constant_numeric_integer_decimal constant_numeric_integer_decimal_python'>10</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>method</span><span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span><span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'POST'</span>, **<span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>kwargs</span></span>):</span>
        <span class='keyword keyword_control keyword_control_flow keyword_control_flow_python'>if</span> <span class='variable variable_language variable_language_python'>self</span>.id:
            <span class='meta meta_item-access meta_item-access_python'>kwargs[<span class='meta meta_item-access meta_item-access_arguments meta_item-access_arguments_python'><span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'id'</span></span>]</span> <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='meta meta_function-call meta_function-call_python'><span class='support support_type support_type_python'>str</span>(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='variable variable_language variable_language_python'>self</span>.id</span>)</span>
        payload <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='meta meta_function-call meta_function-call_python'>urllib.urlencode(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'>kwargs</span>)</span>
        d <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='meta meta_function-call meta_function-call_python'>web_client.getPage(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'http://omegle.com/<span class='constant constant_other constant_other_placeholder constant_other_placeholder_python'>%s</span>'</span> <span class='keyword keyword_operator keyword_operator_arithmetic keyword_operator_arithmetic_python'>%</span> endpoint,
                               <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>headers</span><span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span><span class='variable variable_language variable_language_python'>self</span>.HEADERS,
                               <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>method</span><span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span>method,
                               <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>postdata</span><span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span>payload,
                               <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>timeout</span><span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span>timeout</span>)</span>
        <span class='keyword keyword_control keyword_control_flow keyword_control_flow_python'>return</span> d

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'><span class='support support_function support_function_magic support_function_magic_python'>__init__</span></span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>target</span></span>):</span>
        <span class='variable variable_language variable_language_python'>self</span>.id <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='constant constant_language constant_language_python'>None</span>
        <span class='variable variable_language variable_language_python'>self</span>.target <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> target
        <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.countAgain(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>countAgain</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span></span>):</span>
        <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>._post(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'count'</span>,<span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>method</span><span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span><span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'GET'</span></span>)</span>.<span class='meta meta_function-call meta_function-call_python'>addCallback(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='variable variable_language variable_language_python'>self</span>._updateCount</span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>_updateCount</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>result</span></span>):</span>
        <span class='variable variable_language variable_language_python'>self</span>.count <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='meta meta_function-call meta_function-call_python'><span class='support support_type support_type_python'>int</span>(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'>result, <span class='constant constant_numeric constant_numeric_integer constant_numeric_integer_decimal constant_numeric_integer_decimal_python'>10</span></span>)</span>
        <span class='meta meta_function-call meta_function-call_python'>reactor.callLater(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='constant constant_numeric constant_numeric_integer constant_numeric_integer_decimal constant_numeric_integer_decimal_python'>30</span>, <span class='variable variable_language variable_language_python'>self</span>.countAgain</span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>disconnect</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span></span>):</span>
        <span class='keyword keyword_control keyword_control_flow keyword_control_flow_python'>if</span> <span class='variable variable_language variable_language_python'>self</span>.id:
            d <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>._post(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'disconnect'</span></span>)</span>
            <span class='variable variable_language variable_language_python'>self</span>.id <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='constant constant_language constant_language_python'>None</span>
            <span class='meta meta_function-call meta_function-call_python'>d.addCallback(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='meta meta_function meta_function_inline meta_function_inline_python'><span class='storage storage_type storage_type_function storage_type_function_inline storage_type_function_inline_python'>lambda</span> <span class='meta meta_function meta_function_inline meta_function_inline_parameters meta_function_inline_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>result</span></span>:</span> <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.target.onDisconnect(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span></span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>connect</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span></span>):</span>
        <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.disconnect(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span>
        d <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>._post(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'start'</span></span>)</span>
        <span class='meta meta_function-call meta_function-call_python'>d.addCallbacks(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='variable variable_language variable_language_python'>self</span>._connected, <span class='variable variable_language variable_language_python'>self</span>._fail</span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>_fail</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>why</span></span>):</span>
        <span class='keyword keyword_other keyword_other_python'>print</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'fail:'</span>, why

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>_connected</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>result</span></span>):</span>
        <span class='keyword keyword_other keyword_other_python'>print</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'connected:'</span>, result
        <span class='variable variable_language variable_language_python'>self</span>.id <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='meta meta_function-call meta_function-call_python'>simplejson.loads(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'>result</span>)</span>
        <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>._startRecv(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span>
        <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.target.onConnect(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>_startRecv</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span></span>):</span>
        <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>._post(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'events'</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>timeout</span><span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span><span class='constant constant_numeric constant_numeric_integer constant_numeric_integer_decimal constant_numeric_integer_decimal_python'>10000</span></span>)</span>.<span class='meta meta_function-call meta_function-call_python'>addCallbacks(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='variable variable_language variable_language_python'>self</span>._recvDone, <span class='variable variable_language variable_language_python'>self</span>._fail</span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>_recvDone</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>result</span></span>):</span>
        lst <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='meta meta_function-call meta_function-call_python'>simplejson.loads(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'>result</span>)</span>
        <span class='keyword keyword_control keyword_control_flow keyword_control_flow_python'>if</span> <span class='keyword keyword_operator keyword_operator_logical keyword_operator_logical_python'>not</span> lst:
            <span class='keyword keyword_other keyword_other_python'>print</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'recvDone: got empty lst:'</span>, lst, result
            <span class='keyword keyword_other keyword_other_python'>print</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'therefore diconnectery'</span>
            <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.disconnect(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span>
            <span class='keyword keyword_control keyword_control_flow keyword_control_flow_python'>return</span>
        <span class='keyword keyword_other keyword_other_python'>assert</span> <span class='meta meta_function-call meta_function-call_python'><span class='support support_function support_function_builtin support_function_builtin_python'>isinstance</span>(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'>lst, <span class='support support_type support_type_python'>list</span></span>)</span>

        <span class='keyword keyword_control keyword_control_flow keyword_control_flow_python'>for</span> meh <span class='keyword keyword_operator keyword_operator_logical keyword_operator_logical_python'>in</span> lst:
            smeg <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='meta meta_function-call meta_function-call_python'>meh.pop(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='constant constant_numeric constant_numeric_integer constant_numeric_integer_decimal constant_numeric_integer_decimal_python'>0</span></span>)</span>
            <span class='keyword keyword_control keyword_control_flow keyword_control_flow_python'>if</span> smeg <span class='keyword keyword_operator keyword_operator_comparison keyword_operator_comparison_python'>==</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'gotMessage'</span>:
                <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.target.onGotMessage(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='meta meta_item-access meta_item-access_python'>meh[<span class='meta meta_item-access meta_item-access_arguments meta_item-access_arguments_python'><span class='constant constant_numeric constant_numeric_integer constant_numeric_integer_decimal constant_numeric_integer_decimal_python'>0</span></span>]</span></span>)</span>
            <span class='keyword keyword_control keyword_control_flow keyword_control_flow_python'>elif</span> smeg <span class='keyword keyword_operator keyword_operator_comparison keyword_operator_comparison_python'>==</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'typing'</span>:
                <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.target.onTyping(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span>

        <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>._startRecv(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>send</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>msg</span></span>):</span>
        <span class='keyword keyword_control keyword_control_flow keyword_control_flow_python'>return</span> <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>._post(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'send'</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>msg</span><span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span>msg</span>)</span>


<span class='meta meta_class meta_class_python'><span class='storage storage_type storage_type_class storage_type_class_python'>class</span> <span class='entity entity_name entity_name_type entity_name_type_class entity_name_type_class_python'>OmegleBot</span>(<span class='meta meta_class meta_class_inheritance meta_class_inheritance_python'><span class='entity entity_other entity_other_inherited-class entity_other_inherited-class_python'>irc.IRCClient</span></span>):</span>
<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'><span class='support support_function support_function_magic support_function_magic_python'>__init__</span></span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, *<span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>args</span>, **<span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>kwargs</span></span>):</span>
        <span class='variable variable_language variable_language_python'>self</span>.client <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='meta meta_function-call meta_function-call_python'>OmegleClient(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='variable variable_language variable_language_python'>self</span></span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>connectionMade</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span></span>):</span>
        <span class='variable variable_language variable_language_python'>self</span>.nickname <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='variable variable_language variable_language_python'>self</span>.factory.nick
        <span class='meta meta_function-call meta_function-call_python'>irc.IRCClient.connectionMade(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='variable variable_language variable_language_python'>self</span></span>)</span>
        <span class='keyword keyword_other keyword_other_python'>print</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'connection made; joining'</span>, <span class='variable variable_language variable_language_python'>self</span>.factory.channel
        <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.join(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='variable variable_language variable_language_python'>self</span>.factory.channel</span>)</span>
        <span class='meta meta_function-call meta_function-call_python'>reactor.callLater(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='constant constant_numeric constant_numeric_integer constant_numeric_integer_decimal constant_numeric_integer_decimal_python'>5</span>, <span class='meta meta_function-call meta_function-call_python'>partial(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='variable variable_language variable_language_python'>self</span>.join, <span class='variable variable_language variable_language_python'>self</span>.factory.channel</span>)</span></span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>connectionLost</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>reason</span></span>):</span>
        <span class='meta meta_function-call meta_function-call_python'>irc.IRCClient.connectionLost(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='variable variable_language variable_language_python'>self</span>, reason</span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>onConnect</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span></span>):</span>
        <span class='keyword keyword_other keyword_other_python'>print</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'onconnect'</span>
        <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.act(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'connected to 1 of '</span> <span class='keyword keyword_operator keyword_operator_arithmetic keyword_operator_arithmetic_python'>+</span> <span class='meta meta_function-call meta_function-call_python'><span class='support support_type support_type_python'>str</span>(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='variable variable_language variable_language_python'>self</span>.client.count</span>)</span></span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>onDisconnect</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span></span>):</span>
        <span class='keyword keyword_other keyword_other_python'>print</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'ondisco'</span>
        <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.act(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'disconnected'</span></span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>onGotMessage</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>msg</span></span>):</span>
        <span class='keyword keyword_other keyword_other_python'>print</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'ongotm'</span>
        <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.msg(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='variable variable_language variable_language_python'>self</span>.factory.channel, <span class='meta meta_function-call meta_function-call_python'>msg.encode(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'utf-8'</span></span>)</span></span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>act</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>blah</span></span>):</span>
        <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.msg(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='variable variable_language variable_language_python'>self</span>.factory.channel, <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'-- '</span> <span class='keyword keyword_operator keyword_operator_arithmetic keyword_operator_arithmetic_python'>+</span> blah</span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>onTyping</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span></span>):</span>
        <span class='keyword keyword_other keyword_other_python'>print</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'typing'</span>
        <span class='comment comment_line comment_line_number-sign comment_line_number-sign_python'>#self.act('typing')</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>doCommand</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>command</span></span>):</span>
        <span class='keyword keyword_control keyword_control_flow keyword_control_flow_python'>if</span> <span class='meta meta_function-call meta_function-call_python'>command.lower(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span> <span class='keyword keyword_operator keyword_operator_logical keyword_operator_logical_python'>in</span> (<span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'next!'</span>,):
            <span class='keyword keyword_other keyword_other_python'>print</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'next!'</span>
            <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.client.connect(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span>
        <span class='keyword keyword_control keyword_control_flow keyword_control_flow_python'>elif</span> <span class='meta meta_function-call meta_function-call_python'>command.lower(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span> <span class='keyword keyword_operator keyword_operator_logical keyword_operator_logical_python'>in</span> (<span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'stop!'</span>,):
            <span class='keyword keyword_other keyword_other_python'>print</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'stop!'</span>
            <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.client.disconnect(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span>
        <span class='keyword keyword_control keyword_control_flow keyword_control_flow_python'>else</span>:
            <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.client.send(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'>command</span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>privmsg</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>user</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>channel</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>msg</span></span>):</span>
        <span class='keyword keyword_other keyword_other_python'>print</span> user, channel, msg, <span class='variable variable_language variable_language_python'>self</span>.factory.nick
        <span class='keyword keyword_control keyword_control_flow keyword_control_flow_python'>if</span> <span class='meta meta_function-call meta_function-call_python'>msg.startswith(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='variable variable_language variable_language_python'>self</span>.factory.nick <span class='keyword keyword_operator keyword_operator_arithmetic keyword_operator_arithmetic_python'>+</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>' '</span></span>)</span>:
            cmd <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='meta meta_item-access meta_item-access_python'>msg[<span class='meta meta_item-access meta_item-access_arguments meta_item-access_arguments_python'><span class='meta meta_function-call meta_function-call_python'><span class='support support_function support_function_builtin support_function_builtin_python'>len</span>(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='variable variable_language variable_language_python'>self</span>.factory.nick</span>)</span><span class='keyword keyword_operator keyword_operator_arithmetic keyword_operator_arithmetic_python'>+</span><span class='constant constant_numeric constant_numeric_integer constant_numeric_integer_decimal constant_numeric_integer_decimal_python'>1</span>:</span>]</span>
            <span class='keyword keyword_other keyword_other_python'>print</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'processing'</span>, cmd
            <span class='meta meta_function-call meta_function-call_python'><span class='variable variable_language variable_language_python'>self</span>.doCommand(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'><span class='meta meta_function-call meta_function-call_python'>cmd.strip(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span></span>)</span>

<span class='meta meta_class meta_class_python'><span class='storage storage_type storage_type_class storage_type_class_python'>class</span> <span class='entity entity_name entity_name_type entity_name_type_class entity_name_type_class_python'>OmegleBotFactory</span>(<span class='meta meta_class meta_class_inheritance meta_class_inheritance_python'><span class='entity entity_other entity_other_inherited-class entity_other_inherited-class_python'>protocol.ClientFactory</span></span>):</span>
    protocol <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> OmegleBot

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'><span class='support support_function support_function_magic support_function_magic_python'>__init__</span></span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>nick</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>channel</span></span>):</span>
        <span class='variable variable_language variable_language_python'>self</span>.nick <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> nick
        <span class='variable variable_language variable_language_python'>self</span>.channel <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> channel

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>clientConnectionLost</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>connector</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>reason</span></span>):</span>
        <span class='meta meta_function-call meta_function-call_python'>connector.connect(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span>

<span class='meta meta_function meta_function_python'>    <span class='storage storage_type storage_type_function storage_type_function_python'>def</span> <span class='entity entity_name entity_name_function entity_name_function_python'>clientConnectionFailed</span>(<span class='meta meta_function meta_function_parameters meta_function_parameters_python'><span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>self</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>connector</span>, <span class='variable variable_parameter variable_parameter_function variable_parameter_function_python'>reason</span></span>):</span>
        <span class='meta meta_function-call meta_function-call_python'>reactor.stop(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span>

<span class='keyword keyword_control keyword_control_flow keyword_control_flow_python'>if</span> <span class='support support_variable support_variable_magic support_variable_magic_python'>__name__</span> <span class='keyword keyword_operator keyword_operator_comparison keyword_operator_comparison_python'>==</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'__main__'</span>:
    <span class='meta meta_function-call meta_function-call_python'>log.startLogging(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'>sys.stdout</span>)</span>
    nick, host, channel <span class='keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_python'>=</span> <span class='meta meta_item-access meta_item-access_python'>sys.argv[<span class='meta meta_item-access meta_item-access_arguments meta_item-access_arguments_python'><span class='constant constant_numeric constant_numeric_integer constant_numeric_integer_decimal constant_numeric_integer_decimal_python'>1</span>:<span class='constant constant_numeric constant_numeric_integer constant_numeric_integer_decimal constant_numeric_integer_decimal_python'>4</span></span>]</span>
    <span class='keyword keyword_other keyword_other_python'>assert</span> <span class='meta meta_item-access meta_item-access_python'>channel[<span class='meta meta_item-access meta_item-access_arguments meta_item-access_arguments_python'>:<span class='constant constant_numeric constant_numeric_integer constant_numeric_integer_decimal constant_numeric_integer_decimal_python'>1</span></span>]</span> <span class='keyword keyword_operator keyword_operator_logical keyword_operator_logical_python'>in</span> <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'#&amp;'</span>, <span class='string string_quoted string_quoted_single string_quoted_single_single-line string_quoted_single_single-line_python'>'Channel must include prefix, e.g. #'</span> 
    <span class='meta meta_function-call meta_function-call_python'>reactor.connectTCP(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'>host, <span class='constant constant_numeric constant_numeric_integer constant_numeric_integer_decimal constant_numeric_integer_decimal_python'>6667</span>, <span class='meta meta_function-call meta_function-call_python'>OmegleBotFactory(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'>nick, channel</span>)</span></span>)</span>
    <span class='meta meta_function-call meta_function-call_python'>reactor.run(<span class='meta meta_function-call meta_function-call_arguments meta_function-call_arguments_python'></span>)</span>
</pre></pre>
</td>
</tr>
</table>
</div>
<div style="text-align:right">
<label>
4926 characters / 175 lines
</label>
</div>
<div class="clear"></div>
</div>  
</div>  
<div id="right">
<p id="embed" style="display:none">
<label>Embed Code</label><br/>
<textarea onclick="this.select();" size="35" rows="3" style="width:200px">
<script src='http://pastie.org/620783.js'>
</script>
</textarea>
</p>
 
 
 
 
<div class="ads" style="display:block !important;">
<label>Advertising from <a href="http://carbonads.net/">Carbon</a>:</label>
<div id="carbonads-container" style="display:block !important;">
<div class="carbonad" style="display:block !important;">
<div id="azcarbon" style="display:block !important;">
</div>
<script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://carbonads-2037067561.us-east-1.elb.amazonaws.com/z/982/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script>
</div>
</div>
<br style="clear:left"/>
</div>
</div>
<div class="clear">&nbsp;</div>
<div id="footer">
<p class="disclaim">
<strong>
All your pastes are belong to us.
</strong>
<br/>
<a href="/legal/">Legal</a>
</p>
<p class="credit">
Created by <br/>
<a href="http://runningblind.com/">Josh Goebel</a>
</p>
<p class="credit2">
Monitored by<br/>
 
<a href="http://www.newrelic.com/?utm_source=PAST&amp;utm_medium=text&amp;utm_content=monitoredby&amp;utm_campaign=RPM&amp;utm_term=0&amp;mpc=TA-PAST-RPM-EN-0-monitored-0">
New Relic</a>
</p>
<br style="clear:both;"/>
</div>  
</div>  
<script type="text/javascript">if (!NREUMQ.f) { NREUMQ.f=function() {
NREUMQ.push(["load",new Date().getTime()]);
var e=document.createElement("script");
e.type="text/javascript";
e.src=(("http:"===document.location.protocol)?"http:":"https:") + "//" +
  "js-agent.newrelic.com/nr-100.js";
document.body.appendChild(e);
if(NREUMQ.a)NREUMQ.a();
};
NREUMQ.a=window.onload;window.onload=NREUMQ.f;
};
NREUMQ.push(["nrfj","beacon-5.newrelic.com","4f1b2792f0",10734,"Jw4PQUVeXVxXRR8TUBcVBEYYQllfRQ==",0,60,new Date().getTime(),"","","","",""]);</script></body>
</html>
