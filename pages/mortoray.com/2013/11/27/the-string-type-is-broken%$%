<!DOCTYPE html>
<!--[if IE 7]>
<html id="ie7" lang="en">
<![endif]-->
<!--[if IE 8]>
<html id="ie8" lang="en">
<![endif]-->
<!--[if !(IE 7) & !(IE 8)]><!-->
<html lang="en">
<!--<![endif]-->
<!--
	generated in 1.685 seconds
	234654 bytes batcached for 300 seconds
-->
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<title>The string type is broken | Musing Mortoray</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="pingback" href="http://mortoray.com/xmlrpc.php" />
<!--[if lt IE 9]>
<script src="http://s0.wp.com/wp-content/themes/pub/chateau/js/html5.js?m=1315596887g" type="text/javascript"></script>
<![endif]-->
<meta name="google-site-verification" content="Q8sWvJVz_P6OLtH0DNMcJuvEJFo7eHzidfvfqzFSZME" />
		<script src='//r-login.wordpress.com/remote-login.php?action=js&amp;host=mortoray.com&amp;id=11292855&amp;t=1404132081&amp;back=http%3A%2F%2Fmortoray.com%2F2013%2F11%2F27%2Fthe-string-type-is-broken%2F' type="text/javascript"></script>
		<script type="text/javascript">
		/* <![CDATA[ */
			if ( 'function' === typeof WPRemoteLogin ) {
				document.cookie = "wordpress_test_cookie=test; path=/";
				if ( document.cookie.match( /(;|^)\s*wordpress_test_cookie\=/ ) ) {
					WPRemoteLogin();
				}
			}
		/* ]]> */
		</script>
		<link rel="alternate" type="application/rss+xml" title="Musing Mortoray &raquo; Feed" href="http://mortoray.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Musing Mortoray &raquo; Comments Feed" href="http://mortoray.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Musing Mortoray &raquo; The string type is&nbsp;broken Comments Feed" href="http://mortoray.com/2013/11/27/the-string-type-is-broken/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
function addLoadEvent(func){var oldonload=window.onload;if(typeof window.onload!='function'){window.onload=func;}else{window.onload=function(){oldonload();func();}}}
/* ]]> */
</script>
<link rel='stylesheet' id='all-css-0' href='http://s1.wp.com/_static/??-eJyNktFuwyAMRX9ozM0WTXuZ9i0EXEJrMAJH0f5+0GxrtmqoT9joHvtiDGtShqNgFAiLSrQ4HwuQP2OBE0rS5qwu2aMp5QF28onYXQF2Di0voo5MxCus3jqUPrRyttoWcMSTphvtzk9G0oJWJS7yJ+thhjPW+5C0NEVA6zUShirrYSG9fFMtnOsMbtvIXOsUSMsEZq529AJFPgjvEfpoNrFaU220IR4ii69U+Ql6Jh2yIjZaPMdfiTqS9rk/zfYNNXRQVbu0B7Vhb6WhzDo3+Ovsu4yYt0ddw/9GNI93rMK2WOXi3DHbjHWFGvAe3obxMA7D0+vh+fQJTv0R6A==' type='text/css' media='all' />
<link rel='stylesheet' id='print-css-0' href='http://s0.wp.com/wp-content/mu-plugins/global-print/global-print.css?m=1387483371g' type='text/css' media='print' />
<script type='text/javascript'>
/* <![CDATA[ */
var LoggedOutFollow = {"invalid_email":"Your subscription did not succeed, please try again with a valid email address."};
/* ]]> */
</script>
<script type='text/javascript' src='http://s1.wp.com/_static/??-eJyFj90OwiAMhV9IZFs08cb4LNvoSBEoUpDo08sSNTpNdtW/7/S0sgQxkk/gkzQsHQ1oQWSG2OvaE+gn2hreyMqhH21WwDNoLhni7RlWAeFQxz7B1qF/wR+ugTg5YK6Wf6bfVuivCGUVM5BCP55FBMb7z9bBkhbBZo2eZc01KMpJTGQtFVlQaUhLjctvRQRbn1FivntRVdXJHdtd0+wPbdd05gFmiIRF'></script>
<link rel='stylesheet' id='all-css-0' href='http://s2.wp.com/wp-content/mu-plugins/highlander-comments/style.css?m=1377793621g' type='text/css' media='all' />
<!--[if lt IE 8]>
<link rel='stylesheet' id='highlander-comments-ie7-css'  href='http://s2.wp.com/wp-content/mu-plugins/highlander-comments/style-ie7.css?m=1351637563g&#038;ver=20110606' type='text/css' media='all' />
<![endif]-->
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://mortoray.wordpress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://mortoray.wordpress.com/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='Bridging __VA_ARGS__ to C++ variadic&nbsp;templates' href='http://mortoray.com/2013/11/01/bridging-__va_args__-to-c-variadic-templates/' />
<link rel='next' title='Is exception safe code truly&nbsp;possible?' href='http://mortoray.com/2013/12/05/is-exception-safe-code-truly-possible/' />
<meta name="generator" content="WordPress.com" />
<link rel='canonical' href='http://mortoray.com/2013/11/27/the-string-type-is-broken/' />
<link rel='shortlink' href='http://wp.me/pLnMP-to' />
<link rel="alternate" type="application/json+oembed" href="https://public-api.wordpress.com/oembed/1.0/?format=json&amp;url=http%3A%2F%2Fmortoray.com%2F2013%2F11%2F27%2Fthe-string-type-is-broken%2F&amp;for=wpcom-auto-discovery" /><link rel="alternate" type="application/xml+oembed" href="https://public-api.wordpress.com/oembed/1.0/?format=xml&amp;url=http%3A%2F%2Fmortoray.com%2F2013%2F11%2F27%2Fthe-string-type-is-broken%2F&amp;for=wpcom-auto-discovery" />
<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="article" />
<meta property="og:title" content="The string type is broken" />
<meta property="og:url" content="http://mortoray.com/2013/11/27/the-string-type-is-broken/" />
<meta property="og:description" content="My previous article, &quot;We don&#039;t need a string type&quot;, caused a bit of stir. Though the feedback is mixed, there is a common theme of a string being a useful feature. After doing a bit more research I..." />
<meta property="article:published_time" content="2013-11-27T05:21:14+00:00" />
<meta property="article:modified_time" content="2013-11-27T05:21:14+00:00" />
<meta property="article:author" content="https://www.facebook.com/profile.php?id=789102607" />
<meta property="og:site_name" content="Musing Mortoray" />
<meta property="og:image" content="http://0.gravatar.com/blavatar/0320f006b561b121759b081fe16899eb?s=200" />
<meta name="twitter:site" content="@edaqa" />
<meta name="twitter:image" content="http://0.gravatar.com/blavatar/0320f006b561b121759b081fe16899eb?s=240" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:creator" content="@edaqa" />
<meta property="article:publisher" content="https://www.facebook.com/WordPresscom" />
<link rel="shortcut icon" type="image/x-icon" href="http://1.gravatar.com/blavatar/9ebee341349abbbf49a9686856073671?s=16" sizes="16x16" />
<link rel="icon" type="image/x-icon" href="http://1.gravatar.com/blavatar/9ebee341349abbbf49a9686856073671?s=16" sizes="16x16" />
<link rel="apple-touch-icon-precomposed" href="http://0.gravatar.com/blavatar/0320f006b561b121759b081fe16899eb?s=114" />
<link rel='openid.server' href='http://mortoray.wordpress.com/?openidserver=1' />
<link rel='openid.delegate' href='http://mortoray.wordpress.com/' />
<link rel="search" type="application/opensearchdescription+xml" href="http://mortoray.com/osd.xml" title="Musing Mortoray" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com" />
	<style>
		#page {
			border-color: #eb6c09;
		}
		#main-title #site-title a:hover,
		.post-title h1,
		.post-title h1 a,
		.post-extras .post-edit-link,
		.post-entry a,
		.post-entry .more-link:hover,
		#author-description a,
		.more-posts .page-title em,
		#more-posts-inner a:hover,
		#comments li a:hover,
		.comment-text p a,
		.comment-text .reply-link a:hover,
		#comments li.byuser .comment-author,
		#comments #respond h3,
		.sidebar-widget a:active,
		#calendar_wrap table td a,
		#nav-below a:active,
		#error404 a:hover,
		#menu .current-menu-item > a,
		#menu .current_page_item > a,
		#comment-nav-above a,
		#comment-nav-below a,
		.comment-text table a {
			color: #eb6c09;
		}
	</style>
<style type="text/css">
.widget_twitter li {
	word-wrap: break-word;
}
</style>
<meta name="application-name" content="Musing Mortoray" /><meta name="msapplication-window" content="width=device-width;height=device-height" /><meta name="msapplication-tooltip" content="On Programming and Language Design" /><meta name="msapplication-task" content="name=Subscribe;action-uri=http://mortoray.com/feed/;icon-uri=http://1.gravatar.com/blavatar/9ebee341349abbbf49a9686856073671?s=16" /><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="title" content="The string type is&nbsp;broken | Musing Mortoray on WordPress.com" />
<meta name="description" content="My previous article, &quot;We don&#039;t need a string type&quot;, caused a bit of stir. Though the feedback is mixed, there is a common theme of a string being a useful feature. After doing a bit more research I can determine only one thing: most current string types are broken! Many of us believe our strings&hellip;" />
		<style type="text/css">
					#site-title a,
			#site-description {
				color: #603b00 !important;
			}
			</style>
	
<script type="text/javascript">
var wpcom_ads = { bid: 11292855, pt: 'permalink', wa: 1, colorscheme: 'light', domain: 'mortoray.com', url: 'http://mortoray.com', gid: '', };
</script>

		<script type="text/javascript" src="http://partner.googleadservices.com/gampad/google_service.js"></script>
		<script type="text/javascript">
			GS_googleAddAdSenseService("ca-pub-3443918307802676");
			GS_googleEnableAllServices();
		</script>
		<script type="text/javascript" src="http://c.amazon-adsystem.com/aax2/amzn_ads.js"></script>
		<script type="text/javascript">
			try {
				amznads.getAds("3033");
			} catch(e) { /* ignore */ }
		</script>
		<script type="text/javascript">
		var amznKeys = amznads.getKeys();
		if (typeof amznKeys != "undefined" && amznKeys != "") { for (var i =0; i < amznKeys.length; i++) { var key = amznKeys[i]; GA_googleAddAttr("amzn", key);} }
		document.close();
		</script>
		<script type="text/javascript">
		GA_googleAddAttr( 'WordAds', '1' );
GA_googleAddAttr( 'BlogId', '11292855' );
GA_googleAddAttr( 'Domain', 'mortoray.com' );
GA_googleAddAttr( 'PageURL', 'http://mortoray.com/2013/11/27/the-string-type-is-broken/' );
GA_googleAddAttr( 'WordAds-MI', '1' );
GA_googleAddAttr( 'AdSafe', '1' );
GA_googleAddAttr( 'NoNetFill', '0' );
GA_googleAddAttr( 'Partner', 'AOL' );
GA_googleAddAttr( 'LangId', '1' );
GA_googleAddAttr( 'MarkupVer', '2' );
GA_googleAddAttr( 'Autotag', 'tips' );
GA_googleAddAttr( 'Tag', 'programming' )
GA_googleAddAttr( 'Tag', 'c' )
GA_googleAddAttr( 'Tag', 'java' )
GA_googleAddAttr( 'Tag', 'javascript' )
GA_googleAddAttr( 'Tag', 'perl' )
GA_googleAddAttr( 'Tag', 'programming' )
GA_googleAddAttr( 'theme_bg', 'ffffff' );
GA_googleAddAttr( 'theme_border', 'dddddd' );
GA_googleAddAttr( 'theme_text', '333333' );
GA_googleAddAttr( 'theme_link', '990000' );
GA_googleAddAttr( 'theme_url', '990000' );

		</script>
		<script type="text/javascript">
			GA_googleAddSlot('ca-pub-3443918307802676', 'Wordads_MIS_Mrec_Below_adsafe');

		</script>
		<script type="text/javascript">
			GA_googleFetchAds();
		</script>
		<script type="text/javascript">
		jQuery( window ).load( function() {
			jQuery( "a.wpadvert-about" ).text( "About these ads" );
		} );
		</script>
		<script type="text/javascript">
		var wpcom_adclk_hovering = false;
		var wpcom_adclk_recorded = false;
		var wpcom_adclk_theme = "Chateau";
		var wpcom_adclk_slot = "belowpost";
		var wpcom_adclk_network = ( typeof wpcom_adclk_network === "undefined" ) ? "" : wpcom_adclk_network ;

		jQuery(document).ready( function() {
			function wpcom_adclk_hover_yes() { wpcom_adclk_hovering = true; }
			function wpcom_adclk_hover_no() { wpcom_adclk_hovering = false; }
			jQuery(".wpa").click(wpcom_adclk_click);
			jQuery(".wpa iframe").hover( wpcom_adclk_hover_yes, wpcom_adclk_hover_no );
			jQuery(".wpa object").hover( wpcom_adclk_hover_yes, wpcom_adclk_hover_no );

			jQuery(window).blur( function() {
				if ( wpcom_adclk_hovering ) { wpcom_adclk_click(); }
			});
		});

		function wpcom_adclk_impression() {
			var stat_gif = document.location.protocol + "//stats.wordpress.com/g.gif?v=wpcom-no-pv";
			stat_gif += "&x_ads_imp_theme=" + wpcom_adclk_theme;
			stat_gif += "&x_ads_imp_placement="+wpcom_adclk_slot;
			stat_gif += "&x_ads_imp_network=" + wpcom_adclk_network;
			stat_gif += "&x_ads_imp_theme_network="+wpcom_adclk_theme+"_"+wpcom_adclk_network;
			new Image().src = stat_gif + "&baba=" + Math.random();
			return true;
		}

		function wpcom_adclk_click() {
			if (wpcom_adclk_recorded) { return true; } // no double counting
			var stat_gif = document.location.protocol + "//stats.wordpress.com/g.gif?v=wpcom-no-pv";
			stat_gif += "&x_ads_click_theme=" + wpcom_adclk_theme;
			stat_gif += "&x_ads_click_placement="+wpcom_adclk_slot;
			stat_gif += "&x_ads_click_network=" + wpcom_adclk_network;
			stat_gif += "&x_ads_click_theme_network="+wpcom_adclk_theme+"_"+wpcom_adclk_network;

			new Image().src = stat_gif + "&baba=" + Math.random();
			wpcom_adclk_recorded = true;
			var now=new Date(); var end=now.getTime()+250;
			while(true){now=new Date();if(now.getTime()>end){break;}}
			return true;
		}
		</script><style type="text/css" id="syntaxhighlighteranchor"></style>
		<link rel="stylesheet" id="custom-css-css" type="text/css" href="http://mortoray.com/?custom-css=1&#038;csblog=LnMP&#038;cscache=6&#038;csrev=15" />
		<script type="text/javascript">
	window.google_analytics_uacct = "UA-52447-2";
</script>

<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-52447-2']);
	_gaq.push(['_setDomainName', 'none']);
	_gaq.push(['_setAllowLinker', true]);
	_gaq.push(['_initData']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
	})();
</script>
</head>

<body class="single single-post postid-1822 single-format-standard mp6 typekit-enabled two-column sidebar-content highlander-enabled highlander-light">
<div id="page" class="hfeed">
		<div id="page-inner">
		<header id="branding" role="banner">
			<nav id="menu" role="navigation">
							</nav><!-- end #menu -->

			<div id="main-title">
				<hgroup>
					<h1 id="site-title"><a href="http://mortoray.com/" title="Musing Mortoray" rel="home">Musing Mortoray</a></h1>
												<h2 id="site-description">~ On Programming and Language Design</h2>
									</hgroup>
			</div><!-- end #main-title -->

							<div id="search">
					
<form method="get" action="http://mortoray.com//" >
	<div>
		<label for="s" class="assistive-text">Search:</label>
		<input type="text" value="Search&hellip;" name="s" id="s" onfocus="this.value=''" />
		<input type="submit" name="search" value="Go" />
	</div>
</form>				</div><!-- end #search -->
			
			<div id="main-image">
							<a href="http://mortoray.com/">
													<img src="http://mortoray.files.wordpress.com/2013/10/wizard2.jpg" width="960" height="259" alt="Musing Mortoray" title="Musing Mortoray" />
									</a>
						</div><!-- end #main-image -->
		</header><!-- #branding -->
		<div id="main" class="clear-fix">

	<div id="primary">
		<div id="content" class="clear-fix">

		
			<article id="post-1822" class="post-1822 post type-post status-publish format-standard hentry category-programming tag-c tag-java tag-javascript tag-perl tag-programming">
	<header class="post-title">
				<h1>The string type is&nbsp;broken</h1>			<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/" class="post-permalink">		<p class="post-date">
			<strong>27</strong>
			<em>Wednesday</em>
			<span>Nov 2013</span>
		</p>
	</a>
	<div class="post-info clear-fix">
		<p>
			Posted <span class="by-author"> by <span class="author vcard"><a class="url fn n" href="http://mortoray.com/author/mortoray/" title="View all posts by mortoray" rel="author">mortoray</a></span></span> in <a href="http://mortoray.com/category/programming/" rel="category tag">Programming</a>		</p>
		<p class="post-com-count">
			<strong>&asymp; <a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comments" title="Comment on The string type is&nbsp;broken">119 Comments</a></strong>
		</p>
	</div><!-- end .post-info -->
	</header><!-- end .post-title -->

	<div class="post-content clear-fix">
			<div class="post-extras">
				<p><strong>Tags</strong></p><p><a href="http://mortoray.com/tag/c/" rel="tag">c++</a>, <a href="http://mortoray.com/tag/java/" rel="tag">java</a>, <a href="http://mortoray.com/tag/javascript/" rel="tag">javascript</a>, <a href="http://mortoray.com/tag/perl/" rel="tag">perl</a>, <a href="http://mortoray.com/tag/programming/" rel="tag">Programming</a></p>	</div><!-- end .post-extras -->

		<div class="post-entry">
			<p>My previous article, &#8220;<a title="We don’t need a string type" href="/2013/08/13/we-dont-need-a-string-type/">We don&#8217;t need a string type</a>&#8220;, caused a bit of stir. Though the feedback is mixed, there is a common theme of a string being a useful feature. After doing a bit more research I can determine only one thing: most current string types are broken!</p>
<p>Many of us believe our strings are capable of more than what they actually do. We rely on their functionality without actually checking that its valid. This can easily lead to programs which do not work correctly, particularly with respect to internationalization. In most cases it seems we would be better off without a string type.</p>
<h3>Evaluate</h3>
<p>I looked at how strings behave in a few basic situations. I&#8217;ll go over each situation, giving the expected result and some of the actual results. I considered showing a matrix with the results, but since all the tested languages behave so poorly it didn&#8217;t seem useful.</p>
<p><span style="text-decoration:underline;"><strong>noël</strong></span></p>
<p>Using the text &#8220;noël&#8221; with a decomposed Unicode string &#8220;noe\u0308l&#8221;, I checked the following:</p>
<p>1. Does it print correctly? Yes, most languages are capable of doing this. Though the ideone.com interface seems to break the output (so be careful with testing).</p>
<p>2. What is the reverse? &#8220;lëon&#8221;, correct? Mostly this fails. The most common result is &#8220;l̈eon&#8221; (the dieresis is on the &#8216;l&#8217; instead of the &#8216;e&#8217;). This is what happens without a string class, by just reversing an array of code points.</p>
<p>3. What are the first three characters? Mostly the answer here is &#8220;noe&#8221;, as opposed to the desired &#8220;noë&#8221;. This could easily lead into a big discussion about what a character is, but I assume most people would not be happy with the current result. This is again indicative of a string type which merely treats the data as an array of code points.</p>
<p>4. What is the length? The common answer is 5. And yet again, this indicates our string types are merely arrays of characters and not truly handling the text.</p>
<p>For all of these questions, try to consider what should happen if you were editing this text in your favourite word processor or text editor. I generally expect that the &#8216;ë&#8217; character is handled as a single entity. I don&#8217;t expect backspace/delete to just remove part of the letter. I expect copying the first three letters to include the accent.</p>
<p><span style="text-decoration:underline;"><strong>😸😾</strong></span></p>
<p>It was a bit weird to find out that Unicode has cats in it (I hope you have a font which shows them &#8212; if not, the title of this section is a happy cat and a sad cat, part of the Unicode emoticon set). These characters were chosen since they are outside of the BMP (basic multilingual plane). This spells trouble for languages using UTF-16 encodings (Java, C#, JavaScript).</p>
<p>1. Length? Python unicode correctly reports 2. Those UTF-16 languages tend to report 4: the characters require surrogate pairs.</p>
<p>2. Substring after the first character? Python unicode correctly reports the sad cat &#8220;😾&#8221;. The UTF-16 languages produce invalid strings with a half-surrogate followed by the sad cat.</p>
<p>3. Reverse? Python unicode gets the correct reverse of &#8220;😾😸&#8221;. The UTF-16 languages produce invalid strings. With C# I think I uncovered a defect in ideone. It doesn&#8217;t even show the invalid string and instead shows no output at all for the entire program! [<a href="http://ideone.com/iKoz3p">ideone defect</a>]</p>
<p>Languages using an encoding agnostic library, like C++, Perl, and normal Python 2 strings, fail here as well. They ignore any encoding and assume the string is an array of 1-byte code points. Python 3 adopted unicode as the default string type, thus fixing some problems. It appears that Perl also has a &#8216;utf8&#8242; mode which fixes problems for these cats, but not for the &#8220;noël&#8221; string.</p>
<p><span style="text-decoration:underline;"><strong>baﬄe</strong></span></p>
<p>This string contains a ligature character, the &#8220;ffl&#8221; part is a single unicode code point. They exist mainly for compatibility, but they are a good test for case conversion.</p>
<p>1. What is the uppercase? I did not find any language which doesn&#8217;t print &#8220;BAﬄE&#8221;. Notice the ligature remains lowercase. The expected answer is of course &#8220;BAFFLE&#8221;.</p>
<p>Unicode has a special class of case conversion: this single ligature code point is actually converted to three code points. By not following these additional rules, a language uppercase function produces an interesting result: a string converted to uppercase still has lowercase characters in it.</p>
<p><span style="text-decoration:underline;"><strong>noël again</strong></span></p>
<p>A final check I did was to compare two logically equivalent strings with different composition forms. Here &#8220;noël&#8221; is using the precomposed &#8220;ë&#8221; character.</p>
<p>1. Is precomposed == decomposed? The answer is no in all tests. However, several languages do offer Unicode normalization libraries. In those languages the normal form of the strings does compare equal. JavaScript does not have such a library, which is really tragic because it&#8217;s primarily a UI language, exactly where&#8217;d you want proper unicode functionality.</p>
<p>It&#8217;s tempting to argue that normalization and lexical analysis is not part of the basic string type. But these seem like fundamental operations one would want to do with text. If they aren&#8217;t included, what exactly is the purpose of the string type?</p>
<h3>It&#8217;s broken</h3>
<p>I encourage you to run such tests in your favourite language. If you are doing work with international text it is vital that you understand what your &#8216;string&#8217; type is actually doing. Once you&#8217;ve run this you should reconsider what your &#8220;string&#8221; type is actually doing for you. In my opinion they&#8217;re all broken.</p>
<p>I admit the correct answer is not always clear. Text processing is a difficult topic, and at the very minimum we&#8217;d have to cover grapheme clusters (some string classes expose functionality relating to this, and Perl even has a GCString class). This is beyond the scope of this article, but very relevant for a good string type.</p>
<p>The point I made in my previous article becomes more poignant. I&#8217;d rather have an array of characters than a broken string class. I don&#8217;t put any false expectations on an array of characters: the results it produces for the above tests are very logical. Indeed, an array of unicode characters performs better on these tests than many of the specialized string classes.</p>
		<div class="wpcnt">
		<div class="wpa">

			<a class="wpa-about" href="http://en.wordpress.com/about-these-ads/" rel="nofollow">About these ads</a>

			<div class="u"><script type='text/javascript'>
			GA_googleFillSlot("Wordads_MIS_Mrec_Below_adsafe");

			</script></div>

		</div>
		</div><div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><div class="sd-content"><ul><li class="share-reddit"><a rel="nofollow" class="share-reddit sd-button share-icon" href="http://mortoray.com/2013/11/27/the-string-type-is-broken/?share=reddit" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-twitter"><a rel="nofollow" class="share-twitter sd-button share-icon" href="http://mortoray.com/2013/11/27/the-string-type-is-broken/?share=twitter" title="Click to share on Twitter" id="sharing-twitter-1822"><span>Twitter</span></a></li><li class="share-email"><a rel="nofollow" class="share-email sd-button share-icon" href="http://mortoray.com/2013/11/27/the-string-type-is-broken/?share=email" title="Click to email this to a friend"><span>Email</span></a></li><li><a href="#" class="sharing-anchor sd-button share-more"><span>More</span></a></li><li class="share-end"></li></ul><div class="sharing-hidden"><div class="inner" style="display: none;"><ul><li class="share-facebook"><a rel="nofollow" class="share-facebook sd-button share-icon" href="http://mortoray.com/2013/11/27/the-string-type-is-broken/?share=facebook" title="Share on Facebook" id="sharing-facebook-1822"><span>Facebook</span></a></li><li class="share-pocket"><a rel="nofollow" class="share-pocket sd-button share-icon" href="http://mortoray.com/2013/11/27/the-string-type-is-broken/?share=pocket" title="Click to share on Pocket"><span>Pocket</span></a></li><li class="share-end"></li><li class="share-linkedin"><a rel="nofollow" class="share-linkedin sd-button share-icon" href="http://mortoray.com/2013/11/27/the-string-type-is-broken/?share=linkedin" title="Click to share on LinkedIn" id="sharing-linkedin-1822"><span>LinkedIn</span></a></li><li class="share-digg"><a rel="nofollow" class="share-digg sd-button share-icon" href="http://mortoray.com/2013/11/27/the-string-type-is-broken/?share=digg" title="Click to Digg this post"><span>Digg</span></a></li><li class="share-end"></li><li class="share-tumblr"><a rel="nofollow" class="share-tumblr sd-button share-icon" href="http://mortoray.com/2013/11/27/the-string-type-is-broken/?share=tumblr" title="Click to share on Tumblr"><span>Tumblr</span></a></li><li class="share-stumbleupon"><a rel="nofollow" class="share-stumbleupon sd-button share-icon" href="http://mortoray.com/2013/11/27/the-string-type-is-broken/?share=stumbleupon" title="Click to share on StumbleUpon"><span>StumbleUpon</span></a></li><li class="share-end"></li><li class="share-google-plus-1"><a rel="nofollow" class="share-google-plus-1 sd-button share-icon" href="http://mortoray.com/2013/11/27/the-string-type-is-broken/?share=google-plus-1" title="Click to share on Google+" id="sharing-google-1822"><span>Google</span></a></li><li class="share-end"></li></ul></div></div></div></div></div><div class='sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded' id='like-post-wrapper-11292855-1822-53b15af1f3eb5' data-src='//widgets.wp.com/likes/#blog_id=11292855&amp;post_id=1822&amp;origin=mortoray.wordpress.com&amp;obj_id=11292855-1822-53b15af1f3eb5' data-name='like-post-frame-11292855-1822-53b15af1f3eb5'><h3 class='sd-title'>Like this:</h3><div class='likes-widget-placeholder post-likes-widget-placeholder' style='height:55px'><span class='button'><span>Like</span></span> <span class="loading">Loading...</span></div><span class='sd-text-color'></span><a class='sd-link-color'></a></div>
<div id='jp-relatedposts' class='jp-relatedposts' >
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
</div></div>					</div><!-- end .post-entry -->
	</div><!-- end .post-content -->

	</article><!-- #post-1822 -->
			<nav id="nav-below" class="clear-fix">
				<h1 class="assistive-text">Post navigation</h1>
				<span class="nav-previous"><a href="http://mortoray.com/2013/11/01/bridging-__va_args__-to-c-variadic-templates/" rel="prev">&larr; Previous post</a></span>
				<span class="nav-next"><a href="http://mortoray.com/2013/12/05/is-exception-safe-code-truly-possible/" rel="next">Next post &rarr;</a></span>
			</nav><!-- #nav-below -->

			<div id="comments">
	
	
			<h3 id="comments-title">
			<span>119</span> thoughts on &ldquo;The string type is&nbsp;broken&rdquo;		</h3>

		
		<ol class="commentlist">
			
			<li class="comment byuser comment-author-masterbuzzsaw even thread-even depth-1 parent highlander-comment" id="comment-5840">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e4868b6d3075a52e98423a0ef0d8e111?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>masterbuzzsaw</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5840"><time pubdate datetime="2013-11-27T08:31:53+00:00">2013-11-27 at 08:31</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Excellent post. I tried to make this point in my comments on your prior post. I really think that strings should be anything but a dumb array of values. Again, strings (in my perfect little world) should be UTF-8 and immutable with logical operations available to it (such as properly reversing the glyph series rather than stupidly reversing the byte sequence). The &#8216;char&#8217; type should be a 32-bit value representing an exact code point.</p>
<p>Yes, I was indeed shocked when I originally learned that the C# string had no safety against surrogate pairs. Like wow&#8230; This is partially why I hate the mass adoption of UTF-16 (Java, C#, Qt, etc.). It&#8217;s an excuse to revert to lazy array tactics while supporting a decent set of unicode characters.</p>
<p>Hopefully, I get a working prototype of my dream language out before 2047.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5840#respond' onclick='return addComment.moveForm("comment-5840", "5840", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor odd alt depth-2 highlander-comment" id="comment-5841">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5841"><time pubdate datetime="2013-11-27T09:34:33+00:00">2013-11-27 at 09:34</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I hope this article clarifies my last post a bit as well. I see the value the in having a proper string type, but I have yet to see a proper string type. If I had to choose between any current string type and an array of characters, I&#8217;d just choose the array.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 parent highlander-comment" id="comment-5860">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/404fabbcb3e36bac8da7d1904d260ec0?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Christophe Meessen</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5860"><time pubdate datetime="2013-11-27T15:33:58+00:00">2013-11-27 at 15:33</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>How could a 32bit char represent composed unicode chars ? My feeling is that this isn&#8217;t good enough yet.<br />
It looks like we need a good string c library that all languages could reuse.<br />
The question would than be, is this possible wth unicode and the composed characters ?<br />
I disagree on the concluion that we don&#8217;t need any. To me this article demonstrates that we need one and there is some road to go until we have it right.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment byuser comment-author-mortoray bypostauthor odd alt depth-2 highlander-comment" id="comment-5940">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5940"><time pubdate datetime="2013-11-28T07:21:51+00:00">2013-11-28 at 07:21</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>We don&#8217;t need a string type as they are implemented now. We do need a string type which properly handles Unicode. Since nothing comes close enough at the moment I am uncertain what the interface to a string would actually look like. Some people need code points, some need grapheme clusters, others actually need encoded bytes.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-5906">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/cac0f0d004914baa59ba4fbb171373e0?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://gravatar.com/yanetut' rel='external nofollow' class='url'>Ricky</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5906"><time pubdate datetime="2013-11-27T21:49:03+00:00">2013-11-27 at 21:49</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Go (golang.org) has byte arrays, code point arrays (UTF-32) and strings of  UTF-8.  They all work.<br />
Go is finishing a normalization library now:<br />
<a href="http://blog.golang.org/normalization" rel="nofollow">http://blog.golang.org/normalization</a><br />
A recent article on that blog discusses Go strings in general, answering the questions explicitly about what the string class does and does not do.</p>
<p>No need to wait for 2047.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5980">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/ef94608409198b7474b92b6ad32373fb?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://dlang.org/' rel='external nofollow' class='url'>Gary Willoughby</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5980"><time pubdate datetime="2013-11-29T12:59:03+00:00">2013-11-29 at 12:59</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Take a look at the D programming language. <a href="http://dlang.org/" rel="nofollow">http://dlang.org/</a></p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-5988">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f80d783a24c44533b3a36e9ce058f2cd?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://allanwegan.de' rel='external nofollow' class='url'>Allan Wegan</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5988"><time pubdate datetime="2013-11-29T16:37:34+00:00">2013-11-29 at 16:37</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>&gt; Some people need code points, some need grapheme clusters, others actually need encoded bytes.</p>
<p>Most people actually need both (but not all of them already know that *g*)!<br />
The simplest approach would be to wrap a code point string with a grapheme cluster iterator and then build upon that to provide more complex functionality like regular expression matching and other iterators.<br />
The iterator approach is a natural choice for splitting grapheme clusters when using the Unicode default algorithms for boundary detection because that algorithm works on a two code points wide sliding window moving from start to end.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-6074">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/225c486ea3742fa8aa3a20bb2df83a69?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Lee</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6074"><time pubdate datetime="2013-12-05T15:42:48+00:00">2013-12-05 at 15:42</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Look into Plan 9&#8242;s UTF8 support. &#8220;Strings&#8221; are actually linked lists of Runes (a glyph). It&#8217;s a pretty neat approach.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment even thread-odd thread-alt depth-1 parent highlander-comment" id="comment-5843">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/181c0c8970fb5e1fac627371a0a06c5f?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Will</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5843"><time pubdate datetime="2013-11-27T13:45:15+00:00">2013-11-27 at 13:45</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Objective-C&#8217;s NSString type does correctly upper-case baﬄe into BAFFLE.</p>
<p>   NSString* str = @&#8221;baﬄe&#8221;;<br />
   NSString* upr = [str uppercaseString];</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5843#respond' onclick='return addComment.moveForm("comment-5843", "5843", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor odd alt depth-2 highlander-comment" id="comment-5847">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5847"><time pubdate datetime="2013-11-27T14:04:58+00:00">2013-11-27 at 14:04</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Excellent, there is hope.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-5862">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/669a4c13a144c18ba2b638916559bc2e?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>rl</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5862"><time pubdate datetime="2013-11-27T15:45:41+00:00">2013-11-27 at 15:45</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I don&#8217;t suppose lowercaseString turns BAFFLE back into baﬄe so that lower(upper(baﬄe)) == baﬄe. It&#8217;s a problem of natural languages: they are irregular.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5880">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e164876f30b5aa511b02c6241b5315da?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://benedictcohen.co.uk' rel='external nofollow' class='url'>Benedict Cohen</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5880"><time pubdate datetime="2013-11-27T17:28:25+00:00">2013-11-27 at 17:28</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>NSString passes all the tests providing the string returned from precomposedStringWithCanonicalMapping is used.</p>
<p>NSString *subject = [@"noe\u0308l" precomposedStringWithCanonicalMapping];<br />
NSLog(@&#8221;%@&#8221;, subject); //noël<br />
//NSLog(@&#8221;%@&#8221;, [subject reveresedString]); //No reverse string method<br />
NSLog(@&#8221;%@&#8221;, [subject substringWithRange:NSMakeRange(0,3)]); //noë<br />
NSLog(@&#8221;%@&#8221;, @([subject length])); //4</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-5881">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://i2.wp.com/pbs.twimg.com/profile_images/75525533/orc__blizzard_x-mas_like__-_colored_normal.png?resize=32%2C32' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://twitter.com/bloodyalbatross' rel='external nofollow' class='url'>Mathias Panzenböck (@bloodyalbatross)</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5881"><time pubdate datetime="2013-11-27T17:35:52+00:00">2013-11-27 at 17:35</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>So does Python 3 (at least 3.4 beta):</p>
<p>$ python3<br />
Python 3.3.0+ (3.3:ad0af795c345, Jan 19 2013, 02:39:16)<br />
[GCC 4.6.3 20120306 (Red Hat 4.6.3-2)] on linux<br />
Type &#8220;help&#8221;, &#8220;copyright&#8221;, &#8220;credits&#8221; or &#8220;license&#8221; for more information.<br />
&gt;&gt;&gt; &#8220;baﬄe&#8221;.upper()<br />
&#8216;BAFFLE&#8217;<br />
&gt;&gt;&gt;</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5907">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f0123fdcfde793f05a9ba8b6bc36857a?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://gravatar.com/eythian' rel='external nofollow' class='url'>eythian</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5907"><time pubdate datetime="2013-11-27T21:53:39+00:00">2013-11-27 at 21:53</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Same with Perl:</p>
<p>perl -Mutf8 -e &#8216;print uc(&#8220;baﬄe&#8221;)&#8217;<br />
BAFFLE</p>
<p>using the utf8 module allows it to understand that its source is in UTF8, and is something that should be turned on in most cases I think. It doesn&#8217;t help with some of the other cases, e.g. reversing noël still fails quite badly.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-5967">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/86a2bb2847709382ffc1ad0efe4e3d43?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Muerte</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5967"><time pubdate datetime="2013-11-28T19:43:54+00:00">2013-11-28 at 19:43</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Mathias&gt; This change was introduced in Python 3.3: <a href="http://bugs.python.org/issue12736" rel="nofollow">http://bugs.python.org/issue12736</a></p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment odd alt thread-even depth-1 parent highlander-comment" id="comment-5844">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f0a4a3bf7da8ec8c0311423f4cec15b4?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Sik</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5844"><time pubdate datetime="2013-11-27T13:48:46+00:00">2013-11-27 at 13:48</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>This actually shows even more issues. Even though it&#8217;s true that normalization can help get rid of many of them, there are still some important ones that can&#8217;t be dealt in that way at all.</p>
<p>1) Some characters can combine with others and can&#8217;t be canonicalized into a single one. In some cases you can even literally stockpile multiple characters into one, and a program is expected to be able to handle that despite being an arbitrary amount of codepoints. This effectively makes even UTF-32 a variable-length format.</p>
<p>2) Characters alone aren&#8217;t enough, stuff like the locale also affects operations. The most well-known example is probably the Turkish I issue, where uppercase and lowercase have to change how they work because the characters are different than they would be usually. The worst part? In a real application, you may need the locale to be applied not at a string level, but at a *character* level (somebody may decide to write a portion of the text in a different language, for example).</p>
<p>3) Related to the above, but characters may also be affected by the surrounding ones in the same way. Not sure to what extent though, maybe it&#8217;s just for rendering.</p>
<p>4) What do you do if the string isn&#8217;t normalized? One could attempt to enforce normalization, but then that could be considered a loss of data, right? We don&#8217;t want data to get modified unless we&#8217;re actively changing it.</p>
<p>I&#8217;m not even sure there&#8217;s anything programming languages can do about this, not without making it overly complicated. Sounds like in the end it may be easier for programs to just handle raw bytes on their own, because they&#8217;ll still need to be aware of many implementation details anyway.</p>
<p>I imagine #1 could be solved by having a character to be a collection of codepoints and then a string to be a collection of characters (and this may warrant a dedicated string type as the naive way to do it would be a disaster handling system resources), but #2 requires more data than that, and the rest are heavily tied to the program logic.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5844#respond' onclick='return addComment.moveForm("comment-5844", "5844", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor even depth-2 highlander-comment" id="comment-5851">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5851"><time pubdate datetime="2013-11-27T14:09:47+00:00">2013-11-27 at 14:09</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>For point 1, Unicode has this arbitrary limitation that no more than 32 code points may comprise a single running combination sequence. With that in mind all we need is a UTF-1024 encoding! ;)</p>
<p>All your points are valid. I think this points towards not having a string type in a language. I like the idea of just having an array of code points. It makes it clearer what to expect and allows a library to decide what exactly a string is. This is espeically true since, as you say, much of the string operations are locale dependent &#8212; and not the locale of the computer, but of the user (very important distinction for web applications).</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5897">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f64914b68ff9076e46156c07c96e890f?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://flamingdangerzone.com' rel='external nofollow' class='url'>Martinho Fernandes</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5897"><time pubdate datetime="2013-11-27T20:27:29+00:00">2013-11-27 at 20:27</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Where is this arbitrary limitation? As far as I recall, there is no such limitation in general. Are you perhaps talking about the Stream-Safe Text Format (<a href="http://unicode.org/reports/tr15/#Stream_Safe_Text_Format" rel="nofollow">http://unicode.org/reports/tr15/#Stream_Safe_Text_Format</a>)? That&#8217;s only one optional specification an implementation can choose to adhere to. It even says &#8220;Such extremely long sequences of combining marks are not illegal, even though for all practical purposes they are not meaningful. &#8221; after mentioning an example with 10000 umlauts.</p>
<p>Still regarding normalisation&#8230; Unfortunately, the standard normalisation forms are buggy, and under the current stability policy, cannot be fixed. One example of this that I know is U+387 GREEK ANO TELEIA, which wrongly decomposes canonically (!) into U+00B7 MIDDLE DOT (the Greek name even means literally &#8220;upper dot&#8221;). This means that some processes may choose to avoid normalisation, because, even the canonical forms risk losing important information.</p>
<p>All that said, nice post. I was thinking of writing something in the same vein some time ago, but now I don&#8217;t need to :P</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment byuser comment-author-mortoray bypostauthor even depth-2 highlander-comment" id="comment-5898">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5898"><time pubdate datetime="2013-11-27T20:52:26+00:00">2013-11-27 at 20:52</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I can no longer find the 32-code point limit, though I&#8217;m positive I saw it (I&#8217;ve read virtually all the unicode docs recently). It even mentions that 32 is enough for any possible linguistic situation.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5912">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f64914b68ff9076e46156c07c96e890f?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://gravatar.com/cloudshaker' rel='external nofollow' class='url'>Martinho Fernandes</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5912"><time pubdate datetime="2013-11-27T22:49:14+00:00">2013-11-27 at 22:49</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>It&#8217;s right there in the Stream-Safe Text Format: &#8220;The value of 30 is chosen to be significantly beyond what is required for any linguistic or technical usage. While it would have been feasible to chose a smaller number, this value provides a very wide margin, yet is well within the buffer size limits of practical implementations.&#8221;</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment byuser comment-author-cloudshaker even depth-2 highlander-comment" id="comment-5914">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f64914b68ff9076e46156c07c96e890f?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Martinho Fernandes</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5914"><time pubdate datetime="2013-11-27T22:52:02+00:00">2013-11-27 at 22:52</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Also note that the SSTF doesn&#8217;t really limit a grapheme cluster to 32 code points. It only limits a running sequence of non-starters to 30, but one can produce sequences of arbitrary length in SSTF by introducing CGJs.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5943">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f0a4a3bf7da8ec8c0311423f4cec15b4?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Sik</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5943"><time pubdate datetime="2013-11-28T08:14:03+00:00">2013-11-28 at 08:14</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>One thing I was thikning on that would work with a dedicated string type is storing each codepoint as three bytes. The maximum codepoint allowed is U+10FFFD (thank surrogates for this), so only 21 bits are needed. Since three bytes have 24 bits, that means 3 bits to spare for other stuff.</p>
<p>I imagine then that multiple codepoints combining into a single character could be solved by using one of the bits (e.g. to signal it combines with the previous character), while multiple characters combining into a single grapheme could be solved by using another bit in the same way (and there&#8217;s still a bit more to spare). Granted, the compiler or the type would have to handle this under the hood, but it&#8217;s doable, and somebody programming in the language shouldn&#8217;t care. This still won&#8217;t solve locale issues (that probably jumps into library territory), but it will solve the issue about what makes a character, etc.</p>
<p>I guess there may be performance issues as well, but honestly, if you&#8217;re in a performance critical situation you&#8217;ll probably want to avoid touching strings whenever you can in the first place.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-5952">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/66140b71009bde0dcf0d30996325498f?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='https://twitter.com/gerotakke' rel='external nofollow' class='url'>Gero Takke</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5952"><time pubdate datetime="2013-11-28T12:56:30+00:00">2013-11-28 at 12:56</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Great comment. Handling lowercase and uppercase transformations seems almost impossible to do correctly. Even with locale aware strings/substrings, it would need to be based on a dictionary in my native tongue (German, de_DE). Example: uppercase(&#8220;das maß&#8221;) = &#8220;DAS MASS&#8221;. lowercase(&#8220;DIE MASSE&#8221;) = &#8220;die masse&#8221;. I can&#8217;t think of an example, but I&#8217;m pretty sure there are words that are the same in uppercase but transform differently into lowercase based on the context.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5981">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f80d783a24c44533b3a36e9ce058f2cd?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://allanwegan.de' rel='external nofollow' class='url'>Allan Wegan</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5981"><time pubdate datetime="2013-11-29T13:00:53+00:00">2013-11-29 at 13:00</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>The Unicode standard defines, that &#8220;ß&#8221; does not change when mapping to upper, title, or lower case. Therefore semantic meaning does not change when case mangling &#8220;Maße&#8221; or &#8220;Masse&#8221;. A good solution to that problem, i think.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-5982">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/66140b71009bde0dcf0d30996325498f?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://gravatar.com/gerotakke' rel='external nofollow' class='url'>Gero Takke</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5982"><time pubdate datetime="2013-11-29T13:24:13+00:00">2013-11-29 at 13:24</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Thanks Allan, I didn&#8217;t know that. Although I don&#8217;t think it&#8217;s a good solution, it certainly solves the problem. Also, good choice of problematic words – to think I was so close! :-)</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5989">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f80d783a24c44533b3a36e9ce058f2cd?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://allanwegan.de' rel='external nofollow' class='url'>Allan Wegan</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5989"><time pubdate datetime="2013-11-29T17:47:22+00:00">2013-11-29 at 17:47</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>What would be the alternative? Lowercase &#8220;ß&#8221; could map to an uppercase &#8220;ss&#8221; ligature (&#8220;Ss&#8221; ligature for titlecase). But that would either introduce a ligature into NFKC or degrade an NFKC string to NFC form! The (Unicode) universe would shatter if things like that would be allowed to happen!<br />
The right solution would be to define the &#8220;ß&#8221; as what it really is: A ligature. It would be mapped to &#8220;s&#8221; + &#8220;z&#8221; in NFKC.<br />
That would be the right thing to do in the analogue world too. But there may be other opinions&#8230;</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment even thread-odd thread-alt depth-1 highlander-comment" id="comment-5848">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e2c70a8f8eca2225b3c784c2e249d0bb?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Mah</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5848"><time pubdate datetime="2013-11-27T14:06:00+00:00">2013-11-27 at 14:06</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>It&#8217;s not even matter of &#8220;international&#8221; text. Even English-centric website may need to deal with ligatures, emoji and names and addresses with non-ASCII characters.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5848#respond' onclick='return addComment.moveForm("comment-5848", "5848", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt thread-even depth-1 parent highlander-comment" id="comment-5849">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/970ae66511246012d6144e39520c9a60?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>rabbit</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5849"><time pubdate datetime="2013-11-27T14:08:17+00:00">2013-11-27 at 14:08</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>perl -C -e &#8216;use utf8; print uc &#8220;baﬄe&#8221;&#8216;<br />
BAFFLE</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5849#respond' onclick='return addComment.moveForm("comment-5849", "5849", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor even depth-2 highlander-comment" id="comment-5852">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5852"><time pubdate datetime="2013-11-27T14:12:52+00:00">2013-11-27 at 14:12</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Excellent, perl utf8 does proper case handling of ligatures.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5854">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://i2.wp.com/pbs.twimg.com/profile_images/878334284/dotan_normal.jpg?resize=32%2C32' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://twitter.com/dotandimet' rel='external nofollow' class='url'>Dotan Dimet (@dotandimet)</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5854"><time pubdate datetime="2013-11-27T14:29:01+00:00">2013-11-27 at 14:29</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>perl -CA -E &#8216;say uc shift &#8216; baﬄe</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment even thread-odd thread-alt depth-1 parent highlander-comment" id="comment-5850">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://i0.wp.com/lh5.googleusercontent.com/-da3-Or_O2ug/AAAAAAAAAAI/AAAAAAAACGo/rWE-Yjt-CKM/photo.jpg?resize=32%2C32' class='avatar avatar-32' height='32' width='32' />						<span><a href='https://plus.google.com/118409280670885811411' rel='external nofollow' class='url'>Peter McArthur</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5850"><time pubdate datetime="2013-11-27T14:08:42+00:00">2013-11-27 at 14:08</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Are you sure that the &#8220;ffl ligature&#8221; thing is a bug? I don&#8217;t know what the Unicode standard says, but my first thought was, &#8220;The ligature is just for historical compatibility purposes. You should have normalised the string before you manipulated it.&#8221;</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5850#respond' onclick='return addComment.moveForm("comment-5850", "5850", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor odd alt depth-2 highlander-comment" id="comment-5853">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5853"><time pubdate datetime="2013-11-27T14:13:52+00:00">2013-11-27 at 14:13</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>The standard has special case tables which specify the uppercase of ligatures and other character sequences.</p>
<p><a href="ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt" rel="nofollow">ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt</a></p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment even thread-even depth-1 parent highlander-comment" id="comment-5855">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e61d768dae9ffc129a9673ef09abdabe?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Sven Neuhaus</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5855"><time pubdate datetime="2013-11-27T14:34:47+00:00">2013-11-27 at 14:34</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>You need to brush up your perl utf8 skills a little,<br />
3) also works correctly with perl:</p>
<p>perl -e &#8216;use utf8; binmode(STDOUT, &#8220;:utf8&#8243;); print scalar reverse &#8220;😸😾&#8221;;&#8217;</p>
<p>Output:<br />
😾😸</p>
<p>I think you&#8217;ve proven the point that a language should have proper UTF8 support for strings (something that perl excels at).</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5855#respond' onclick='return addComment.moveForm("comment-5855", "5855", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor odd alt depth-2 highlander-comment" id="comment-5856">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5856"><time pubdate datetime="2013-11-27T14:40:22+00:00">2013-11-27 at 14:40</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I did say that in utf8 mode perl works for this scenario (my test case works). You have to be sure to enable the utf8 mode, it is not the default. It still fails with the noël scenarios though.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment byuser comment-author-casatigianluca even depth-2 highlander-comment" id="comment-5893">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e8b1967a7daac7e79352cd9447567e09?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>casatigianluca</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5893"><time pubdate datetime="2013-11-27T19:27:11+00:00">2013-11-27 at 19:27</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>@mortoray: you should include the code you used to get your points.</p>
<p>Perl is a good language for strings and in particular utf8, see <a href="http://dheeb.files.wordpress.com/2011/07/gbu.pdf" rel="nofollow">http://dheeb.files.wordpress.com/2011/07/gbu.pdf</a></p>
<p>Anyway, I started this gist that anybody can run and improve. </p>
<p><a href="https://gist.github.com/fibo/7679509" rel="nofollow">https://gist.github.com/fibo/7679509</a></p>
<p>Perl works pretty good, dude !</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment odd alt thread-odd thread-alt depth-1 parent highlander-comment" id="comment-5857">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/50cb4981bbaa51b1713269a29f78d826?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://donatstudios.com' rel='external nofollow' class='url'>Jesse Donat</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5857"><time pubdate datetime="2013-11-27T15:07:20+00:00">2013-11-27 at 15:07</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I&#8217;m relatively certain that JavaScript operates using UTF-7, not 16</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5857#respond' onclick='return addComment.moveForm("comment-5857", "5857", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor even depth-2 highlander-comment" id="comment-5858">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5858"><time pubdate datetime="2013-11-27T15:09:08+00:00">2013-11-27 at 15:09</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>The Unicode FAQ said UTF-16 for Java. It uses to be UCS-2 I believe (prior to its deprecation) <a href="http://www.unicode.org/faq/utf_bom.html" rel="nofollow">http://www.unicode.org/faq/utf_bom.html</a></p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5866">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/fc481a38895d17eb7244478e84da578e?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>originalcruzr</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5866"><time pubdate datetime="2013-11-27T15:57:39+00:00">2013-11-27 at 15:57</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Nope, ECMAScript (aka &#8216;JavaScript&#8217;) works on 16 bit strings:</p>
<p>&#8220;A String value is a member of the String type. Each integer value in the sequence usually represents a single 16-bit unit of UTF-16 text. However, ECMAScript does not place any restrictions or requirements on the values except that they must be 16-bit unsigned integers.&#8221;</p>
<p><a href="http://www.ecma-international.org/ecma-262/5.1/#sec-4.3.16" rel="nofollow">http://www.ecma-international.org/ecma-262/5.1/#sec-4.3.16</a></p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-5868">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/fc481a38895d17eb7244478e84da578e?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>originalcruzr</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5868"><time pubdate datetime="2013-11-27T16:11:27+00:00">2013-11-27 at 16:11</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>&#8220;A String value is a member of the String type. Each integer value in the sequence usually represents a single 16-bit unit of UTF-16 text. However, ECMAScript does not place any restrictions or requirements on the values except that they must be 16-bit unsigned integers.&#8221;</p>
<p><a href="http://www.ecma-international.org/ecma-262/5.1/#sec-4.3.16" rel="nofollow">http://www.ecma-international.org/ecma-262/5.1/#sec-4.3.16</a></p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5879">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mathiasbynens.be/' rel='external nofollow' class='url'>Mathias</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5879"><time pubdate datetime="2013-11-27T17:06:14+00:00">2013-11-27 at 17:06</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>As others pointed out, JavaScript does use <a href="http://mathiasbynens.be/notes/javascript-encoding" rel="nofollow">something similar to UTF-16/UCS-2</a>. Here’s a blog post on the many issues this causes: <a href="http://mathiasbynens.be/notes/javascript-unicode" rel="nofollow"><strong>JavaScript has a Unicode problem</strong></a>. Some of these problems are briefly mentioned in the above post, too.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment even thread-even depth-1 highlander-comment" id="comment-5861">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f59238e5e5c66e2de7e284431f63e020?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Mario</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5861"><time pubdate datetime="2013-11-27T15:41:55+00:00">2013-11-27 at 15:41</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>python3 -c &#8220;print(&#8216;baﬄe&#8217;.upper())&#8221;<br />
BAFFLE</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5861#respond' onclick='return addComment.moveForm("comment-5861", "5861", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt thread-odd thread-alt depth-1 parent highlander-comment" id="comment-5863">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/7cbe926f05ec8320928d9435378a7f5a?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>No Name</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5863"><time pubdate datetime="2013-11-27T15:50:17+00:00">2013-11-27 at 15:50</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Did you look at C++ std::wstring?</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5863#respond' onclick='return addComment.moveForm("comment-5863", "5863", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor even depth-2 highlander-comment" id="comment-5872">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5872"><time pubdate datetime="2013-11-27T16:48:52+00:00">2013-11-27 at 16:48</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I think this might be platform dependent, 16bit or 32bit. It would perform a bit better since it can encode the cats without problem.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5920">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/b2ef00cd1457bcdc46f506983384f57e?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://gravatar.com/leetnightshade' rel='external nofollow' class='url'>leetNightshade</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5920"><time pubdate datetime="2013-11-28T02:08:38+00:00">2013-11-28 at 02:08</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>As mortoray said, it&#8217;s platform dependent.  On Windows a wchar is 16 bit, on anything else it&#8217;s typically 32bit.  Besides, wstring doesn&#8217;t solve the problem as it&#8217;s just a storage container, it knows nothing about the contents of the string, so doesn&#8217;t help you with unicode characters.  If you&#8217;re working with UTF-32 you&#8217;re golden, for anything else it doesn&#8217;t help.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment even thread-even depth-1 parent highlander-comment" id="comment-5864">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/bb8753fce5a983b5319a2c1e5ff6b422?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>foo</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5864"><time pubdate datetime="2013-11-27T15:54:22+00:00">2013-11-27 at 15:54</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>&#8220;I’d rather have an array of characters than a broken string class.&#8221;</p>
<p>False dichotomy. I&#8217;d rather have a working string class than either&#8230;</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5864#respond' onclick='return addComment.moveForm("comment-5864", "5864", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-wyrdsmythe odd alt depth-2 highlander-comment" id="comment-8270">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/fe0da1ca8ba569811f1805fd4bab9f1e?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://logosconcarne.wordpress.com' rel='external nofollow' class='url'>Wyrd Smythe</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-8270"><time pubdate datetime="2014-04-15T01:10:29+00:00">2014-04-15 at 01:10</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I second that motion&#8230;</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment even thread-odd thread-alt depth-1 highlander-comment" id="comment-5865">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/3986b36fd1dbb8120d3025de8a63ab96?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Michal</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5865"><time pubdate datetime="2013-11-27T15:56:44+00:00">2013-11-27 at 15:56</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Haskell seems to perform well in the ﬄ-test:<br />
&gt; Data.Text.toUpper &#8220;baﬄe&#8221;<br />
&#8220;BAFFLE&#8221;</p>
<p>Unfortunately not so for the &#8220;noël&#8221; test.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5865#respond' onclick='return addComment.moveForm("comment-5865", "5865", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt thread-even depth-1 parent highlander-comment" id="comment-5867">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://i1.wp.com/lh6.googleusercontent.com/-BoNeMbF5Z18/AAAAAAAAAAI/AAAAAAAAAAA/oHvFQir_c1M/photo.jpg?resize=32%2C32' class='avatar avatar-32' height='32' width='32' />						<span><a href='https://plus.google.com/106973938747032357570' rel='external nofollow' class='url'>John Nicholas</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5867"><time pubdate datetime="2013-11-27T15:59:10+00:00">2013-11-27 at 15:59</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>i cannot find a font that displays the cats!</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5867#respond' onclick='return addComment.moveForm("comment-5867", "5867", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor even depth-2 highlander-comment" id="comment-5874">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5874"><time pubdate datetime="2013-11-27T16:50:09+00:00">2013-11-27 at 16:50</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I&#8217;m sure it&#8217;s a soon-to-be-essential character glyph. :)</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5915">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://i1.wp.com/lh6.googleusercontent.com/-BoNeMbF5Z18/AAAAAAAAAAI/AAAAAAAAAAA/oHvFQir_c1M/photo.jpg?resize=32%2C32' class='avatar avatar-32' height='32' width='32' />						<span><a href='https://plus.google.com/106973938747032357570' rel='external nofollow' class='url'>John Nicholas</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5915"><time pubdate datetime="2013-11-28T01:07:28+00:00">2013-11-28 at 01:07</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>and then i get home and my linux box is fine with it.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment even thread-odd thread-alt depth-1 parent highlander-comment" id="comment-5869">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/cb8e56cbd549d34a90251ae82e294be3?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Jonas</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5869"><time pubdate datetime="2013-11-27T16:19:34+00:00">2013-11-27 at 16:19</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Haskell&#8217;s `Text` type appears to do the right thing.<br />
<a href="http://i.imgur.com/TAO72qb.png" rel="nofollow">http://i.imgur.com/TAO72qb.png</a></p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5869#respond' onclick='return addComment.moveForm("comment-5869", "5869", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor odd alt depth-2 highlander-comment" id="comment-5875">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5875"><time pubdate datetime="2013-11-27T16:50:38+00:00">2013-11-27 at 16:50</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Very nice.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-5918">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/efe98f3e2e5d53e7e209ae0b11dd6370?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://gravatar.com/axman6' rel='external nofollow' class='url'>axman6</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5918"><time pubdate datetime="2013-11-28T01:32:34+00:00">2013-11-28 at 01:32</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Just to be sure, is the Text string “noël” created using the “noël” form with the composed e or the “noe\u0308l” form with the two separate code points. The developers of Text have done an amazing job making it as complete as possible, but I wouldn&#8217;t blame them if things like this slipped through.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment byuser comment-author-axman6 odd alt depth-2 highlander-comment" id="comment-5921">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/efe98f3e2e5d53e7e209ae0b11dd6370?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://axman6.wordpress.com/' rel='external nofollow' class='url'>axman6</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5921"><time pubdate datetime="2013-11-28T02:08:55+00:00">2013-11-28 at 02:08</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Is the &#8220;noël&#8221; using the precomposed or decomposed &#8220;noe\u0308l&#8221; form? It looks like the former, which is pretty easy to get right. Can you try it again with the dieresis as a separate code point?</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-5950">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/554b1db472deb661d004d042718e7237?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Jonathan</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5950"><time pubdate datetime="2013-11-28T12:44:10+00:00">2013-11-28 at 12:44</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Nice! How do you get ghci to show Unicode characters and not just printing them on the format &#8220;\205&#8243;? I have googled and didn&#8217;t manage to solve it. (I have the character set encoding set to UTF-8 in Terminal.app.)</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment odd alt thread-even depth-1 parent highlander-comment" id="comment-5870">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://i0.wp.com/lh6.googleusercontent.com/-gkmNAGC_qV4/AAAAAAAAAAI/AAAAAAAADUg/78O4dRgmVqo/photo.jpg?resize=32%2C32' class='avatar avatar-32' height='32' width='32' />						<span><a href='https://plus.google.com/+JonasElfstrom' rel='external nofollow' class='url'>Jonas Elfström</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5870"><time pubdate datetime="2013-11-27T16:40:17+00:00">2013-11-27 at 16:40</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Ruby almost makes it. It fails to upcase ﬄ and the precomposed == decomposed.</p>
<p><a href="https://gist.github.com/jonelf/7676612" rel="nofollow">https://gist.github.com/jonelf/7676612</a></p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5870#respond' onclick='return addComment.moveForm("comment-5870", "5870", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor even depth-2 highlander-comment" id="comment-5876">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5876"><time pubdate datetime="2013-11-27T16:51:29+00:00">2013-11-27 at 16:51</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Are you sure the ë is not the precomposed character in your string?</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5889">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://i0.wp.com/lh6.googleusercontent.com/-gkmNAGC_qV4/AAAAAAAAAAI/AAAAAAAADUg/78O4dRgmVqo/photo.jpg?resize=32%2C32' class='avatar avatar-32' height='32' width='32' />						<span><a href='https://plus.google.com/+JonasElfstrom' rel='external nofollow' class='url'>Jonas Elfström</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5889"><time pubdate datetime="2013-11-27T19:02:32+00:00">2013-11-27 at 19:02</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I made a mistake, it was precomposed. Ruby knows nothing about the decomposed form. It&#8217;s good with cats though.</p>
<p>Updated the gist.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment even thread-odd thread-alt depth-1 parent highlander-comment" id="comment-5871">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/8dc203b16554e29b254d838f703413e8?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Daniel</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5871"><time pubdate datetime="2013-11-27T16:44:34+00:00">2013-11-27 at 16:44</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>What about getting the first three characters of &#8220;baﬄe&#8221;? Is &#8220;baf&#8221; the correct answer?</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5871#respond' onclick='return addComment.moveForm("comment-5871", "5871", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor odd alt depth-2 highlander-comment" id="comment-5877">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5877"><time pubdate datetime="2013-11-27T16:52:20+00:00">2013-11-27 at 16:52</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>That&#8217;s a good question. I suspect &#8220;baf&#8221; is the correct answer, and I wonder if there is any library that does it. I suspect if you normalize it first (since the ffl would disappear I think).</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 parent highlander-comment" id="comment-6025">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f80d783a24c44533b3a36e9ce058f2cd?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://allanwegan.de' rel='external nofollow' class='url'>Allan Wegan</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6025"><time pubdate datetime="2013-12-02T13:50:58+00:00">2013-12-02 at 13:50</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>&gt; I suspect if you normalize it first (since the ffl would disappear I think).</p>
<p>The ligarture disappears in NFK[CD] but not in NF[CD]. Whether normalization to NFK[CD] is a good idea depends (as always) on the situation.<br />
For visual grapheme cluster counting, one would convert the entire text to NFKC.<br />
For getting teaser text from an article i would not a normalization step and let a ligature count as just one grapheme cluster even if it may  resemble three of them logically. I assume, that articles are stored in NFC (the nondestructive normalization form with smallest memory footprint).</p>
<p>The Unicode standard does not treat ligatures as containing more than one grapheme cluster for that normalization forms that permits them. So &#8220;eﬄab&#8221; is the correct result of reversing &#8220;baﬄe&#8221; and &#8220;baﬄe&#8221;[2] has to return &#8220;ﬄ&#8221; even when working on the grapheme cluster level!</p>
<p>There may or may not be a need for another grapheme cluster definition that permits splitting of ligatures in NF[CD]. A straight forward way to implement a reverse function adhering to that special definition would NFKC each Unicode grapheme cluster on the fly. When that results in multiple Unicode grapheme clusters, that are used &#8211; else the original is preserved (so that &#8220;ℕ&#8221; does not become &#8220;N&#8221;).<br />
The real problem is to find a good name for that special interpretation of a grapheme cluster&#8230;</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment byuser comment-author-mortoray bypostauthor odd alt depth-2 highlander-comment" id="comment-6026">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6026"><time pubdate datetime="2013-12-02T14:05:11+00:00">2013-12-02 at 14:05</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>It bothers me that even if one implements proper unicode grapheme cluster rules the ligature would not reverse as intended. </p>
<p>I don&#8217;t actually care about reversal, but I take it as an indicator that a reverse iterator is possible. If I were a user and had an &#8220;ﬄ&#8221; in my text I&#8217;d assume I could backspace individual characters. Though honestly, if I&#8217;m editting the document I&#8217;d suspect the ligatures to all be removed. They are no longer required for proper rendering.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-6061">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f80d783a24c44533b3a36e9ce058f2cd?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://allanwegan.de' rel='external nofollow' class='url'>Allan Wegan</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6061"><time pubdate datetime="2013-12-04T19:11:46+00:00">2013-12-04 at 19:11</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Yes, backspacing of single characters of a ligature (NFKCing the ligature on the fly) would be the right way to do it.</p>
<p>Ligatures surely are legitimate typographic features. But i think about their inclusion into the standard as an errer regardless. Technically, a ligature is a single grapheme cluster and therefore the standard is formally right in treating it as such. But for text processing almost always treating ligatures as multiple units is what is needed.<br />
Doing it &#8220;right&#8221; withoput dropping ligatures altogether (not possible due to stability rules anyway) would mean to add a set of combining versions of the latin letters and: Either extend the NF[CD]-mapping of the legacy ligatures to convert them to the new combining code points (likely not possible due to stability rules too). Or add another normal form that extends NF[CD] to add that mapping.</p>
<p>But the ligature problem is also one, that even most people using the affected scripts on a daily basis will never see in the wild. One mostly stumbles over it in Unicode test suites (*eg*) and old literature where ligatures most often get converted to single letters by the OCR process.</p>
<p>Finally, ignoring the split-in-ligature problem could be the best &#8220;solution&#8221;&#8230;</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment byuser comment-author-wyrdsmythe odd alt depth-2 highlander-comment" id="comment-8271">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/fe0da1ca8ba569811f1805fd4bab9f1e?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://logosconcarne.wordpress.com' rel='external nofollow' class='url'>Wyrd Smythe</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-8271"><time pubdate datetime="2014-04-15T01:22:16+00:00">2014-04-15 at 01:22</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Perhaps it&#8217;s years of working in a print shop (specifically with typesetting), but I&#8217;m perfectly comfortable treating ligatures (such as &#8216;ﬄ&#8217;) as distinct, single characters.  In fact, I would be <em>displeased</em> at the presumption of software that treated that single character as three (&#8216;f&#8217;, &#8216;f&#8217; &amp; &#8216;l&#8217;).  I would not expect ligatures to be case-changed unless there were very clear rules about their case.</p>
<p>In the case of &#8220;Baﬄe&#8221;, I would expect a character count of four, I would expect to cursor and backspace the &#8216;ﬄ&#8217; as a single unit. I would expect the first three characters to be &#8220;Baﬄ&#8221;, the last two to be &#8220;ﬄe&#8221;, and I would expect the reverse to be &#8220;lﬄaB&#8221;.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment even thread-even depth-1 parent highlander-comment" id="comment-5873">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/8f37e211f0d764f3ebd1c6219f6fdb80?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Anderkent</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5873"><time pubdate datetime="2013-11-27T16:50:03+00:00">2013-11-27 at 16:50</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Baffle seems to work in java:</p>
<p>user=&gt; (count &#8220;baﬄe&#8221;)<br />
4<br />
user=&gt; (.toUpperCase &#8220;baﬄe&#8221;)<br />
&#8220;BAFFLE&#8221;</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5873#respond' onclick='return addComment.moveForm("comment-5873", "5873", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5884">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/ae0cd5bd5a84d1b18445f40f4961d02c?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Name</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5884"><time pubdate datetime="2013-11-27T17:44:38+00:00">2013-11-27 at 17:44</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>OT: just wanted to try this in Java too and used a clojure REPL for that, too.</p>
<p>I take all this String business as a bottomless pit of sorrow since reading this: <a href="http://www.joelonsoftware.com/articles/Unicode.html" rel="nofollow">http://www.joelonsoftware.com/articles/Unicode.html</a> and try to keep stuff which has to handle with this at the very bare minimum.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment even thread-odd thread-alt depth-1 highlander-comment" id="comment-5878">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/8aa1fa491b70c1b46f5069eed7b4c571?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://gravatar.com/bavarious' rel='external nofollow' class='url'>bavariousious</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5878"><time pubdate datetime="2013-11-27T17:03:23+00:00">2013-11-27 at 17:03</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I’ve run some tests with Objective-C and NSString as implemented by Apple: <a href="https://twitter.com/bavarious/status/405697721279188992/photo/1/large" rel="nofollow">https://twitter.com/bavarious/status/405697721279188992/photo/1/large</a></p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5878#respond' onclick='return addComment.moveForm("comment-5878", "5878", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt thread-even depth-1 highlander-comment" id="comment-5882">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://i2.wp.com/pbs.twimg.com/profile_images/75525533/orc__blizzard_x-mas_like__-_colored_normal.png?resize=32%2C32' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://twitter.com/bloodyalbatross' rel='external nofollow' class='url'>Mathias Panzenböck (@bloodyalbatross)</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5882"><time pubdate datetime="2013-11-27T17:41:45+00:00">2013-11-27 at 17:41</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>While JavaScript (in browsers) has no way to normalize precomposed/decomposed strings, it has standard methods to correctly compare them:<br />
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare</a><br />
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator</a></p>
<p>E.g.:</p>
<p>    var decomp=&#8221;noël&#8221;;<br />
    var precomp=&#8221;noël&#8221;;<br />
    console.log(decomp.split(&#8220;&#8221;));<br />
    console.log(precomp.split(&#8220;&#8221;));<br />
    console.log(decomp.localeCompare(precomp));</p>
<p>Prints:<br />
    ["n", "o", "e", "̈", "l"]<br />
    ["n", "o", "ë", "l"]<br />
    0</p>
<p>Browser support for this varies. The Intl.Collator interface is currently only supported Chrome (maybe also in Opera? Idk).</p>
<p>Note: In Chrome when comparing (e.g. sorting) a lot of strings String.prototype.localeCompare is much slower than using a pre-allocated Intl.Collator instance (because internally localeCompare creates a new collator for each call). Using Intl.Collator reduced startup time of my <a href="http://greattuneplayer.jit.su/" rel="nofollow">http://greattuneplayer.jit.su/</a> immensely. Also node.js currently has no support for Intl.*. It probably will be a compile time option for 0.12.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5882#respond' onclick='return addComment.moveForm("comment-5882", "5882", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even thread-odd thread-alt depth-1 parent highlander-comment" id="comment-5883">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f2f5d400f965dd627fc8636d59b266b1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://wirespeed.tumblr.com/' rel='external nofollow' class='url'>dlandgren</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5883"><time pubdate datetime="2013-11-27T17:44:35+00:00">2013-11-27 at 17:44</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>All this works in Perl. Yes, you do have to use the following pragmas</p>
<p>use utf8;<br />
use open qw( :encoding(UTF-8) :std );</p>
<p>But if you are working in UTF all the time, there are plenty of ways to the effects take place automatically and not have to bother.</p>
<p>Just for kicks:</p>
<p>use strict;<br />
use utf8;<br />
use open qw( :encoding(UTF-8) :std );</p>
<p>use charnames qw( :full :short );</p>
<p>my $word = &#8220;no\N{LATIN SMALL LETTER E WITH DIAERESIS}l&#8221;;<br />
my $combine = &#8220;noe\N{COMBINING DIAERESIS}l&#8221;;</p>
<p>print uc $word;<br />
print uc $combine;<br />
print $word eq $combine ? &#8216;same&#8217; : &#8216;different&#8217;;</p>
<p>use Unicode::Normalize;<br />
print NFD($word) eq NFD($combine) ? &#8216;same&#8217; : &#8216;different&#8217;;</p>
<p># prints:<br />
NOËL<br />
NOËL<br />
different<br />
same</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5883#respond' onclick='return addComment.moveForm("comment-5883", "5883", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-dlandgren odd alt depth-2 highlander-comment" id="comment-5885">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f2f5d400f965dd627fc8636d59b266b1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>dlandgren</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5885"><time pubdate datetime="2013-11-27T17:50:05+00:00">2013-11-27 at 17:50</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Hmmm, cutting and pasting from my terminal dropped the umlaut from the second NOËL&#8230; either that or wordpress&#8217;s funky text editor messed up. Here&#8217;s the same thing: <a href="https://gist.github.com/dland/7677920" rel="nofollow">https://gist.github.com/dland/7677920</a></p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment byuser comment-author-yanetut even depth-2 highlander-comment" id="comment-5970">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/cac0f0d004914baa59ba4fbb171373e0?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>yanetut</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5970"><time pubdate datetime="2013-11-29T00:46:49+00:00">2013-11-29 at 00:46</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>There&#8217;s a nice rant about unicode in Perl at <a href="http://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default/6163129#6163129" rel="nofollow">http://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default/6163129#6163129</a></p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment odd alt thread-even depth-1 highlander-comment" id="comment-5886">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f41d2e47de862fc9d0d3296a15aa5868?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Shugyousha</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5886"><time pubdate datetime="2013-11-27T18:11:44+00:00">2013-11-27 at 18:11</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Good timing!</p>
<p>I did not test it but the Go language blog just mentioned a text normalization package that hopefully deals with these isuses:</p>
<p> <a href="http://blog.golang.org/normalization" rel="nofollow">http://blog.golang.org/normalization</a></p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5886#respond' onclick='return addComment.moveForm("comment-5886", "5886", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even thread-odd thread-alt depth-1 highlander-comment" id="comment-5888">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/fb514f9b8188fd20a0d85d8e02e86b4a?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Mitchell Mebane</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5888"><time pubdate datetime="2013-11-27T18:43:35+00:00">2013-11-27 at 18:43</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I&#8217;m just going to leave this here: <a href="http://stackoverflow.com/a/6163129" rel="nofollow">http://stackoverflow.com/a/6163129</a></p>
<p>Some of it&#8217;s Perl-specific, some not, but it&#8217;s a good read in addition to Joel Spolsky&#8217;s Unicode rant linked in one of the other comments.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5888#respond' onclick='return addComment.moveForm("comment-5888", "5888", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt thread-even depth-1 parent highlander-comment" id="comment-5892">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/d717e1bb39fe56630b8964fcda114560?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://gravatar.com/cthuloo' rel='external nofollow' class='url'>cthuloo</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5892"><time pubdate datetime="2013-11-27T19:13:00+00:00">2013-11-27 at 19:13</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Perl can solve the noël scenarios flawlessly if you first normalize the string:</p>
<p>use 5.010; #enables &#8216;say&#8217; among other features<br />
use utf8; #enables utf8 in identifiers and literals<br />
use Unicode::Normalize &#8216;normalize&#8217;;<br />
binmode STDOUT, &#8216;:utf8&#8242;;   # will convert unicode chars into utf8 bytes when writing<br />
my $str = &#8220;noe\x{308}l&#8221;;      # not the same literal as &#8220;noël&#8221;, which has 4 unicode code points</p>
<p>$str = normalize(&#8216;FCC&#8217;, $str);   # after this, all noël scenarios work as expected</p>
<p>say length($str); #4<br />
say scalar reverse $str; # lëon<br />
say substr($str, 0, 3); #noë</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5892#respond' onclick='return addComment.moveForm("comment-5892", "5892", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor even depth-2 highlander-comment" id="comment-5894">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5894"><time pubdate datetime="2013-11-27T19:30:40+00:00">2013-11-27 at 19:30</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>That&#8217;s probably a special case. Try it with a form where there is no precomposed character.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-5895">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/aaeabd769bae1bf82fd4b8882fed6653?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>John Imrie</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5895"><time pubdate datetime="2013-11-27T19:40:59+00:00">2013-11-27 at 19:40</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Perl strings are stored as code points which is why the noël problem exists however there is a Unicode::GCString module which creates Unicode::GCString objects that do the right thing and even report the correct length. If you can&#8217;t get at that module this code does the correct reverse.</p>
<p> $reversed = join(&#8220;&#8221;, reverse $str =~ /\X/g);</p>
<p>The underlying problem hear is at what level are you working. Perl let&#8217;s you work at the code point level. The noël problem is at the next level above, the Grapheme Cluster level. This is the level that the  Unicode::GCString level works at.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5895#respond' onclick='return addComment.moveForm("comment-5895", "5895", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
			<li class="comment pingback">
				<div class="comment-text">
					<p>Pingback: <a href='http://eteeselink.wordpress.com/2013/11/27/strings-are-fine-how-about-your-code/' rel='external nofollow' class='url'>Strings are fine. How about your code? | BufferedConsciousnessStream</a></p>
					<p class="edit-comment"></p>
				</div>
			</li><!-- #comment-## -->

			<li class="comment even thread-even depth-1 highlander-comment" id="comment-5903">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/ec936e6c940cd6b2abb0b0e2f76e6ef6?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://gravatar.com/kopimismo' rel='external nofollow' class='url'>desiderantes</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5903"><time pubdate datetime="2013-11-27T21:15:29+00:00">2013-11-27 at 21:15</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I&#8217;ll leve this here for the Mono and JS proponents in the GNOME camp</p>
<p><a href="https://wiki.gnome.org/Projects/Vala/StringSample" rel="nofollow">https://wiki.gnome.org/Projects/Vala/StringSample</a></p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5903#respond' onclick='return addComment.moveForm("comment-5903", "5903", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment byuser comment-author-yanetut odd alt thread-odd thread-alt depth-1 parent highlander-comment" id="comment-5908">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/cac0f0d004914baa59ba4fbb171373e0?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>yanetut</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5908"><time pubdate datetime="2013-11-27T21:54:12+00:00">2013-11-27 at 21:54</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Go (golang.org) has byte arrays, code point arrays (UTF-32) and strings of UTF-8. They all work.<br />
    Go is finishing a normalization library now:<br />
    <a href="http://blog.golang.org/normalization" rel="nofollow">http://blog.golang.org/normalization</a><br />
    A recent article on that blog discusses Go strings in general, answering the questions explicitly about what the string class does and does not do.</p>
<p>    No need to wait for 2047.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5908#respond' onclick='return addComment.moveForm("comment-5908", "5908", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-yanetut even depth-2 parent highlander-comment" id="comment-5971">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/cac0f0d004914baa59ba4fbb171373e0?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>yanetut</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5971"><time pubdate datetime="2013-11-29T01:24:10+00:00">2013-11-29 at 01:24</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I experimented with Golang and used the libraries provided for utf8 and normalizing.  If you normalize the string explicitly then reversing noël or café works correctly.  Otherwise not.  In utf8 I can also enter these words already normalized, and of course that works even without normalizing.</p>
<p>Golang cannot, so far as I can tell, change the case of the ligature in baﬄe, and the reverse comes out as looking like efflab.  If you know what I mean.</p>
<p>Golang is very nice to the cats and does the right things.</p>
<p>Only programmers reverse strings.  And then only in interviews.  The more important tests are case-changing, splitting, joining, searching, regular expression matching, and serializing-deserializing.</p>
<p>It may be necessary to reverse &#8216;Characters&#8217; in Unicode processing.  When writing out Right-to-Left text, such as Hebrew and Arabic, some character pairs sometimes need to be interchanged: Parenthesis (), and {}, , [].  The opening brace is the }, you see.</p>
<p>I personally think that ligatures are among the pathological cases in Unicode, and it may not be practical to handle them correctly by default.</p>
<p>On the other hand, the pathological cases may be the members of the Unicode consortium.  These maniacs have *animals* in the so-called alphabet. Code point 1F47D is the face of an unhappy space alien.</p>
<p>Again, I point out there&#8217;s a nice rant on Unicode and Perl at: <a href="http://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default/6163129#6163129" rel="nofollow">http://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default/6163129#6163129</a>.  It&#8217;s harder than it looks, it says.</p>
<p>Any modern language needs Unicode string types, or classes, or libraries, or some combination thereof, so it can get most or all of the hard things right.  Golang has byte arrays, immutable strings which are always encoded in utf8 by law, and arrays of utf32 integers, called runes.  Conversion between them is trivial.  And libraries take care of all the rest except ligatures.  This is technically a bug.  There&#8217;s also a library to convert to and from utf16.  And the library to normalize.</p>
<p>Golang is very popular in China, so I conclude that all the source code is in utf8 must be good for the whole planet.  That is, all the worlds software accepts utf8.</p>
<p>It can be hard to tell the difference between bugs in displaying text and in processing text.  If I carefully insert Hebrew into my text editor, and verify in code the sequence of the characters by running the program, the editor nevertheless shows them in the wrong order.  Most will.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment byuser comment-author-mortoray bypostauthor odd alt depth-2 highlander-comment" id="comment-5975">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5975"><time pubdate datetime="2013-11-29T05:47:34+00:00">2013-11-29 at 05:47</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I agree that reverse is not a usual thing to do with text. However, it is an indication of how text is being handled, and how things like substring and truncation will be handled.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment byuser comment-author-renatoathaydes even thread-even depth-1 parent highlander-comment" id="comment-5911">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>renatoathaydes</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5911"><time pubdate datetime="2013-11-27T22:36:17+00:00">2013-11-27 at 22:36</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I compared some JVM languages based on this blog post – Java, Scala, Groovy and Ceylon…. guess which one handled the problems posed here best!!</p>
<p>    <a href="https://sites.google.com/a/athaydes.com/renato-athaydes/posts/strangestringissuesinjvmlanguages" rel="nofollow">https://sites.google.com/a/athaydes.com/renato-athaydes/posts/strangestringissuesinjvmlanguages</a></p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5911#respond' onclick='return addComment.moveForm("comment-5911", "5911", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor odd alt depth-2 highlander-comment" id="comment-5913">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5913"><time pubdate datetime="2013-11-27T22:49:55+00:00">2013-11-27 at 22:49</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Thank you for the nice tests of the JVM languages. I&#8217;m surprised the results are so different for each JVM language.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 parent highlander-comment" id="comment-5916">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://i2.wp.com/pbs.twimg.com/profile_images/2441696534/bmgb5drjkeglb63nu9kh_normal.jpeg?resize=32%2C32' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://twitter.com/jroper' rel='external nofollow' class='url'>James Roper (@jroper)</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5916"><time pubdate datetime="2013-11-28T01:29:37+00:00">2013-11-28 at 01:29</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>And you didn&#8217;t even mention the Turkish i issue &#8211; where Unicode itself causes major problems with case insensitive protocols like HTTP and HTML.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment byuser comment-author-mortoray bypostauthor odd alt depth-2 highlander-comment" id="comment-5939">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5939"><time pubdate datetime="2013-11-28T07:17:48+00:00">2013-11-28 at 07:17</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I was tempted to use this issue. I certainly do in other discussions I have. I then favoured text which might appeal more to an English audience. I think programmers using non-Latin derived languages already understand the problems.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-5932">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/efa204c17a0cbb81cc1bc339c491ec76?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://javarevisited.blogspot.in' rel='external nofollow' class='url'>Rohit</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5932"><time pubdate datetime="2013-11-28T05:02:47+00:00">2013-11-28 at 05:02</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Surprised to see Ceylon 1.0.0 on top, expecting Java there, given it&#8217;s maturity.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5933">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/a0d651c0a89027edf84a5065addec450?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>stephen</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5933"><time pubdate datetime="2013-11-28T05:27:09+00:00">2013-11-28 at 05:27</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>renatoathaydes, it looks like some of your tests aren&#8217;t using the version of &#8220;baffle&#8221; where the ffl is a single ligature.  Using the Unicode escaped version, &#8220;ba\ufb04e&#8221;, I get the following from Java 7u45:</p>
<p>***     baﬄe<br />
length  4<br />
reverse eﬄab<br />
tail    aﬄe<br />
3 chars baﬄ<br />
upper   BAFFLE</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment even thread-odd thread-alt depth-1 parent highlander-comment" id="comment-5917">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://i0.wp.com/lh5.googleusercontent.com/-da3-Or_O2ug/AAAAAAAAAAI/AAAAAAAACGo/rWE-Yjt-CKM/photo.jpg?resize=32%2C32' class='avatar avatar-32' height='32' width='32' />						<span><a href='https://plus.google.com/118409280670885811411' rel='external nofollow' class='url'>Peter McArthur</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5917"><time pubdate datetime="2013-11-28T01:30:26+00:00">2013-11-28 at 01:30</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I&#8217;ve just tested &#8216;baffle&#8217; with Python 3.3.3 in a Japanese locale, and it works fine for me.</p>
<p>&gt;&gt;&gt; &#8216;ba\ufb04e&#8217;<br />
&#8216;baﬄe&#8217;<br />
&gt;&gt;&gt; &#8216;ba\ufb04e&#8217;.upper()<br />
&#8216;BAFFLE&#8217;</p>
<p>Maybe you need to upgrade to the latest version of Python, or check your locale settings?</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5917#respond' onclick='return addComment.moveForm("comment-5917", "5917", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5955">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f80d783a24c44533b3a36e9ce058f2cd?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://allanwegan.de' rel='external nofollow' class='url'>Allan Wegan</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5955"><time pubdate datetime="2013-11-28T13:50:37+00:00">2013-11-28 at 13:50</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Mangling of &#8220;baﬄe&#8221; to upper or title case even works in Python 3.2.5 . So it does not even has to be the latest version.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-5956">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f80d783a24c44533b3a36e9ce058f2cd?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://allanwegan.de' rel='external nofollow' class='url'>Allan Wegan</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5956"><time pubdate datetime="2013-11-28T13:52:30+00:00">2013-11-28 at 13:52</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Doh &#8211; i meant Python 3.3.2. ;)<br />
In 3.2.5 it does not work.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment odd alt thread-even depth-1 parent highlander-comment" id="comment-5922">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/22ca530c1db575f0a62b68c1900d8399?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://gravatar.com/robertglees0n' rel='external nofollow' class='url'>robertglees0n</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5922"><time pubdate datetime="2013-11-28T03:07:53+00:00">2013-11-28 at 03:07</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>did you look at Ruby 1.9&#8242;s implementation of different encodings? it&#8217;s not perfect but it does treat a string as a sequence of characters and not a sequence of bytes. </p>
<p>it also supports many encodings(129+) in addition to a &#8220;byte encoding&#8221; that is the dumb string everyone might be familiar with. i&#8217;m sure there may be cases surrounding capitalization of unicode characters not being applied properly but overall you can be safe in the assumption methods who operate on a string are sequential characters and not bytes.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5922#respond' onclick='return addComment.moveForm("comment-5922", "5922", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment even depth-2 highlander-comment" id="comment-5945">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://i0.wp.com/lh6.googleusercontent.com/-gkmNAGC_qV4/AAAAAAAAAAI/AAAAAAAADUg/78O4dRgmVqo/photo.jpg?resize=32%2C32' class='avatar avatar-32' height='32' width='32' />						<span><a href='https://plus.google.com/+JonasElfstrom' rel='external nofollow' class='url'>Jonas Elfström</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5945"><time pubdate datetime="2013-11-28T09:35:47+00:00">2013-11-28 at 09:35</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I tried out the examples in Ruby 2.0. It didn&#8217;t do all that well.<br />
<a href="https://gist.github.com/jonelf/7676612" rel="nofollow">https://gist.github.com/jonelf/7676612</a></p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-5923">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/d44487550f4438a6052a51a094cad59f?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://www.perl.org' rel='external nofollow' class='url'>Tom Christiansen</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5923"><time pubdate datetime="2013-11-28T03:13:04+00:00">2013-11-28 at 03:13</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Don’t see any major problem with Perl: remember that \X represents a grapheme cluster:</p>
<p>$ echo noël | perl -CS  -nle &#8216;print reverse /\X/g&#8217;<br />
lëon</p>
<p>Which works no matter the normalization:</p>
<p>$ echo noël | nfd | perl -CS -nle &#8216;print reverse /\X/g&#8217;<br />
lëon</p>
<p>$ echo noël | nfc | perl -CS  -nle &#8216;print reverse /\X/g&#8217;<br />
lëon</p>
<p>There does exist a Uniocde::GCString module that allows you to do substr, index, length, etc operations on grapheme clusters instead of on individual code points.  Basically, it turns a string into a sequence of grapheme clusters instead of a sequence of code points.  But for simple enough stuff, you can just use \X.  </p>
<p>$ echo ñôël | nfc | perl -CS -nle &#8216;print scalar( () = /\X/g)&#8217;<br />
4<br />
$ echo ñôël | nfd | perl -CS -nle &#8216;print scalar( () = /\X/g)&#8217;<br />
4<br />
$ echo ñôël | nfc | perl -CS -nle &#8216;print length&#8217;<br />
4<br />
$ echo ñôël | nfd | perl -CS -nle &#8216;print length&#8217;<br />
7</p>
<p>So don’t do this:</p>
<p>$ echo ñôël | nfd | perl -CS -nle &#8216;print scalar reverse&#8217;<br />
l̈êõn</p>
<p>Do this:</p>
<p>$ echo ñôël | nfd | perl -CS -nle &#8216;print reverse /\X/g&#8217;<br />
lëôñ</p>
<p>It’s up to you whether you want to deal with code points or which grapheme clusters.  Once you learn the difference, it’s pretty easy.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5923#respond' onclick='return addComment.moveForm("comment-5923", "5923", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even thread-even depth-1 parent highlander-comment" id="comment-5925">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f80d783a24c44533b3a36e9ce058f2cd?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://allanwegan.de' rel='external nofollow' class='url'>Allan Wegan</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5925"><time pubdate datetime="2013-11-28T03:52:04+00:00">2013-11-28 at 03:52</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>The underlying problem is, that most string classes just deal with code points instead of grapheme clusters. At the code point level there is no way to get reversion or slicing right. Respecting grapheme cluster boundaries is key here.<br />
In case of ligature code points it gets worse: They would have tobe treated decomposed for most operations but returned as given when returning a sequence fully containing all decomposed code points in original order. In most use cases one would just NFKC them away of course.</p>
<p>But in a lot of cases, grapheme clusters are just not enough. The common teaser text truncation problem needs to deal with words (falling back to grapheme clusters) at least and should prefer to truncate on a sentence boundary instead. What i really need is a multilevel string class.<br />
One of the functionalities i would really like to see implemented in such a class: Truncating a text to a maximum length of grapheme clusters, code points or even bytes (it would need to know the target encoding for that one) preferring to break on a sentence boundary falling back to word and grapheme clusters.<br />
Of course i implemented that function already like most of us did. But manipulating text is just so essential an ability, that almost every language should start to provide it properly in its standard library today. That stuff is easy to do wrong and i failed a lot at it. I wished for not having to reinvent that wheel again and again as i changed languages in the past.<br />
And think aubout the children (new coders) too!..</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5925#respond' onclick='return addComment.moveForm("comment-5925", "5925", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment odd alt depth-2 highlander-comment" id="comment-5948">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/aaeabd769bae1bf82fd4b8882fed6653?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>John Imrie</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5948"><time pubdate datetime="2013-11-28T11:48:56+00:00">2013-11-28 at 11:48</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>&#8220;But in a lot of cases, grapheme clusters are just not enough. The common teaser text truncation problem needs to deal with words (falling back to grapheme clusters) at least and should prefer to truncate on a sentence boundary instead.&#8221;</p>
<p>The problem with that is that word boundaries and sentence boundaries are dependent on locale and most locale code thinks that the locale of the machine not the user matters. So without knowing the locale of the user you can get into big problems segmenting words, lines, and sentences.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-5953">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f80d783a24c44533b3a36e9ce058f2cd?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://allanwegan.de' rel='external nofollow' class='url'>Allan Wegan</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5953"><time pubdate datetime="2013-11-28T13:22:16+00:00">2013-11-28 at 13:22</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>In this case its the language, the article is written in and not the locale of the writer&#8217;s, visitor&#8217;s or local machine.</p>
<p>Of course the principle is the same as when formatting timestamps: It depends on i18n-specific parameters. One could feed the needed parameters to the function dealing with splitting text. Someone writes that article and of course, that one knows wich language the article is written in. The code could ask for that meta information on creation of an article.</p>
<p>But even if parameters are unknown &#8211; lets just fallback to the default behaviour defined in the Unicode standard (yes, it contains boundary detection for grapheme clusters, words and sentences). Would still be better to split after abbrevations sometimes instead of splitting inside words almost always (in case of senetence granularity).</p>
<p>The need for meta data is not a show stopper. We most often have that meta data. Either all texts are known to be in the same known language. Or code point counting would reveal the used script and (for a lot of texts) even the used language quite easily.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-5927">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/da2d02eeefb0d363d87a0bda92991f91?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='https://duncan-bayne.github.com/' rel='external nofollow' class='url'>Duncan Bayne</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5927"><time pubdate datetime="2013-11-28T04:05:05+00:00">2013-11-28 at 04:05</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I&#8217;d have hoped Common Lisp would fare well here, but SBCL (1.1.11 on 64-bit Linux Mint 15) is pretty broken.  My results:</p>
<p>string: noël<br />
reversed: l̈eon<br />
first 3 chars: noe<br />
length: 5</p>
<p>string: 😸😾<br />
reversed: 😾😸<br />
first 1 char: 😸<br />
length: 2</p>
<p>string: baﬄe<br />
upcase: BAﬄE</p>
<p>string: noël<br />
equals precomposed: NIL</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5927#respond' onclick='return addComment.moveForm("comment-5927", "5927", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even thread-even depth-1 parent highlander-comment" id="comment-5936">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/16d45c03c7e437b3715dfba4aea40a8e?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://gravatar.com/rviswanadha' rel='external nofollow' class='url'>Ram Viswanadha</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5936"><time pubdate datetime="2013-11-28T06:40:22+00:00">2013-11-28 at 06:40</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I am baffled such misunderstanding still exists in 2013. I would like to quote Joel Spolsky from 2003 &#8211; &#8220;So I have an announcement to make: if you are a programmer working in 2003 and you don&#8217;t know the basics of characters, character sets, encodings, and Unicode, and I catch you, I&#8217;m going to punish you by making you peel onions for 6 months in a submarine. I swear I will.&#8221; <a href="http://www.joelonsoftware.com/articles/Unicode.html" rel="nofollow">http://www.joelonsoftware.com/articles/Unicode.html</a><br />
It is not that hard. Learn Unicode and use ICU and all will be good.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5936#respond' onclick='return addComment.moveForm("comment-5936", "5936", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor odd alt depth-2 highlander-comment" id="comment-5941">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5941"><time pubdate datetime="2013-11-28T07:25:22+00:00">2013-11-28 at 07:25</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>My desire is that a language, by default, should be correctly doing the basic string operations. Even I generally assume my string classes are working correctly and other than on a UI/template system, wouldn&#8217;t likely go out of my way to add unicode support. No, if proper text handling is not the default then we&#8217;ll forever have programs which don&#8217;t do it correctly.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment even thread-odd thread-alt depth-1 highlander-comment" id="comment-5942">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/77bfae11a6e64f5e8dba6236fbc65bbc?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Michael Pyne</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5942"><time pubdate datetime="2013-11-28T07:34:53+00:00">2013-11-28 at 07:34</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>C++ works, but via ICU or some other similar utility library.</p>
<p>I tested Qt (which itself uses ICU) and although the raw QString itself had middling success, that&#8217;s because it uses code points, not graphemes, and UTF-16 (w/ surrogates when necessary to exceed the BMP). So initially the substring and reversing examples didn&#8217;t work for either noël or the cats, but the source strings all displayed and baﬄe properly decomposed when uppercased (into BAFFLE).</p>
<p>Of course QString doesn&#8217;t have a .toReversed() function so whichever way you go you have to code your own (I used std::reverse).</p>
<p>Qt does provide a class, QTextBoundaryFinder, to split a QString into boundaries (word, line, but also grapheme clusters). By using this class it&#8217;s possible to correctly handle all reversing, substring, and length calculation requirements (including the non-BMP cats).</p>
<p>The one thing I was disappointed with was the locale comparison. I already knew Qt supported normalizing QString to the defined Unicode normal forms, but the Qt I tested (4.8.6) doesn&#8217;t account for normalization differences in its QString::localeAwareCompare. You have to manually normalize both strings to the same normal form for that to work.</p>
<p>But with that in mind it was all relatively straightforward, but you do have to understand that Unicode has combining characters and plan accordingly. ;)</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5942#respond' onclick='return addComment.moveForm("comment-5942", "5942", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt thread-even depth-1 parent highlander-comment" id="comment-5946">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/872cc412d069c8bbd31074bdc2500086?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://kornai.com' rel='external nofollow' class='url'>Andras Kornai</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5946"><time pubdate datetime="2013-11-28T10:21:42+00:00">2013-11-28 at 10:21</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>You have to be a standards lawyer to worry about latin ligature cases like ffl. At the same time there are widely used scripts (e.g. Arabic and practically all the Devanagari-based scripts of India) where ligatures are a core issue, any people here with experience building websites, word processors, and in general general things that require significant text interaction in such languages?</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5946#respond' onclick='return addComment.moveForm("comment-5946", "5946", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment even depth-2 highlander-comment" id="comment-5954">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f80d783a24c44533b3a36e9ce058f2cd?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://allanwegan.de' rel='external nofollow' class='url'>Allan Wegan</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5954"><time pubdate datetime="2013-11-28T13:36:40+00:00">2013-11-28 at 13:36</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Ligatures are completely legal typographic element. Yes, proper support for asian scripts is more important of course.</p>
<p>But failing at case-mangling for ligatures is still a bug that should be fixed. It will not affect comparison because one would use NFKC for that. Casemangling failures look ugly and undermine user&#8217;s confidence in the application, site, or even the organisation providing them. For the user it just feels buggy &#8211; even if functionality is not affected.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-5949">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/2e8c9bda08fde339f0dc2110d9ddd5c9?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://twitter.com/mithaldu' rel='external nofollow' class='url'>Christian Walde (@mithaldu)</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5949"><time pubdate datetime="2013-11-28T12:41:07+00:00">2013-11-28 at 12:41</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I&#8217;d recommend you add the example from the lower row here to your post:</p>
<p><a href="http://unicode.org/reports/tr15/images/UAX15-NormFig6.jpg" rel="nofollow">http://unicode.org/reports/tr15/images/UAX15-NormFig6.jpg</a></p>
<p>Reason being that noël can be normalized, while dot/s/dot cannot be normalized in a way that retains the actual content, yet still results in a string of length one; in any language; due to the way Unicode itself works.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5949#respond' onclick='return addComment.moveForm("comment-5949", "5949", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even thread-even depth-1 highlander-comment" id="comment-5961">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://i1.wp.com/pbs.twimg.com/profile_images/3154810920/6fa8b487c63c1c437b3d8acc1526d353_normal.jpeg?resize=32%2C32' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://twitter.com/jcape' rel='external nofollow' class='url'>James Cape (@jcape)</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5961"><time pubdate datetime="2013-11-28T16:17:19+00:00">2013-11-28 at 16:17</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I think a root cause of a lot of this is simple taxonomy. When someone says &#8220;I want a string class,&#8221; they are bringing a lot of mental baggage about what a &#8220;string class&#8221; should look like along with them&#8230; most obviously the string-of-bytes idea.</p>
<p>If they called it UnsafeText, those who are writing these classes would have a clearer understanding of what qualifies as &#8220;done&#8221;.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5961#respond' onclick='return addComment.moveForm("comment-5961", "5961", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt thread-odd thread-alt depth-1 parent highlander-comment" id="comment-5979">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/ef94608409198b7474b92b6ad32373fb?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://dlang.org/' rel='external nofollow' class='url'>Gary Willoughby</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5979"><time pubdate datetime="2013-11-29T12:58:05+00:00">2013-11-29 at 12:58</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Interesting article which has gained attention of the D language developers. Even though D handles unicode quite nicely there is still room for improvement and this post has stirred thing up a little.</p>
<p><a href="http://forum.dlang.org/thread/nieoqqmidngwoqwnktih@forum.dlang.org" rel="nofollow">http://forum.dlang.org/thread/nieoqqmidngwoqwnktih@forum.dlang.org</a><br />
<a href="https://github.com/JakobOvrum/phobos/commit/5a948c01aedf7fea84a49498ccf6a49d0dc3f0dd" rel="nofollow">https://github.com/JakobOvrum/phobos/commit/5a948c01aedf7fea84a49498ccf6a49d0dc3f0dd</a></p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5979#respond' onclick='return addComment.moveForm("comment-5979", "5979", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor even depth-2 highlander-comment" id="comment-5984">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5984"><time pubdate datetime="2013-11-29T14:08:35+00:00">2013-11-29 at 14:08</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Excellent. I&#8217;m glad to see a positive effect from this. It also gives me another reference for the Leaf language.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment odd alt thread-even depth-1 highlander-comment" id="comment-5987">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://i1.wp.com/pbs.twimg.com/profile_images/378800000418251428/ffae2445c9880398987778d017de48bc_normal.png?resize=32%2C32' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://twitter.com/drkrab' rel='external nofollow' class='url'>Kresten Krab Thorup (@drkrab)</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-5987"><time pubdate datetime="2013-11-29T15:50:54+00:00">2013-11-29 at 15:50</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>In elixir this works out of the box <a href="https://github.com/elixir-lang/elixir/commit/c093e378d849baceb81b0bc7f373ccc6c8b1c141" rel="nofollow">https://github.com/elixir-lang/elixir/commit/c093e378d849baceb81b0bc7f373ccc6c8b1c141</a>, except for the &#8220;precomposed == decomposed&#8221; case.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=5987#respond' onclick='return addComment.moveForm("comment-5987", "5987", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even thread-odd thread-alt depth-1 parent highlander-comment" id="comment-6010">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/0a969d240f3770d67242df0150d85880?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span>Karl Williamson</span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6010"><time pubdate datetime="2013-12-01T07:00:46+00:00">2013-12-01 at 07:00</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I think that people may be conflating two different modes of Unicode operation.  One mode is &#8216;use utf8&#8242; and that tells Perl that the program itself is to be interpreted as being encode in UTF-8.  The other is &#8216;use feature &#8220;unicode_strings&#8221;, which is off by default for backwards compatibility.  However, it is enabled if one does any of a number of things, including using a -E on the command line instead of a -e.</p>
<p>But my main point is that the hardest part to get right is not something you tested.  It is case insensitive matching in regular expressions.  Around 10% of Unicode folding definitions are to multiple characters.  And not just from ligatures.  The most common is LATIN SMALL LETTER SHARP S which is supposed to match the sequence &#8216;ss&#8217; case-insensitively.  Perl now works for these:<br />
perl -E &#8216;say &#8220;\N{LATIN SMALL LETTER SHARP S}s&#8221; =~ /^sss$/i;&#8217;<br />
perl -E &#8216;say &#8220;s\N{LATIN SMALL LETTER SHARP S}&#8221; =~ /^sss$/i;&#8217;<br />
perl -E &#8216;say &#8220;sss&#8221; =~ /^\N{LATIN SMALL LETTER SHARP S}s$/i;&#8217;<br />
perl -E &#8216;say &#8220;sss&#8221; =~ /^s\N{LATIN SMALL LETTER SHARP S}$/i;&#8217;</p>
<p>But not for things like this:<br />
perl -E &#8216;say &#8220;\N{LATIN SMALL LETTER SHARP S}s&#8221; =~ /^[st][st][st]$/i;&#8217;</p>
<p>The reason is that the bracketed character classes form &#8220;silos&#8221; whose boundaries can&#8217;t be matched across.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=6010#respond' onclick='return addComment.moveForm("comment-6010", "6010", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor odd alt depth-2 highlander-comment" id="comment-6011">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6011"><time pubdate datetime="2013-12-01T07:09:57+00:00">2013-12-01 at 07:09</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I think I&#8217;m actually going to make a more complete test suite. I see all sorts of places where a language might have troubles dealing with unicode. Regexes is of course one of those big areas.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment even depth-2 highlander-comment" id="comment-6015">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f80d783a24c44533b3a36e9ce058f2cd?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://allanwegan.de' rel='external nofollow' class='url'>Allan Wegan</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6015"><time pubdate datetime="2013-12-01T20:37:58+00:00">2013-12-01 at 20:37</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Whether &#8220;ß&#8221; should additionally match &#8220;s&#8221;, &#8220;ss&#8221;, both or none depends on the situation. There is just not one size that fits all when it comes to matching.<br />
Each behaviour is wrong in one situation or the other. Same applies to case folding. There are two modes of case folding defined in the Unicode standard. The simple one, used by most implementations, does not alter string lengths when folding and does not change &#8220;ß&#8221;.<br />
Not trying to be too smart by default is a sane approach. There are situations were &#8220;Maße&#8221; and &#8220;Masse&#8221; should not both casefold to &#8220;MASSE&#8221;. The path chosen by Perl &#8211; to support a specific use case _partially_in_a_likely_surprising_way_ is obviously plain wrong and the result of too much complexity added to a once harmless library over time.</p>
<p>For regular expression matching, currently common options just don&#8217;t do it. Users need to be able to choose the normal form (none, NFC, NFD, NFKC, NFKD) and case mapping (none, simple or extended and lower or upper) mode to apply on the string to match against before doing the matching. And in a lot of cases, normalization and case folding are not enough. Then additional problem-specific mangling is needed. Sequence like toNFKD + removeCodePointsContainedInSomeGeneralCategories + simpleFoldToLower + NFC + replaceSomeGraphemeSequences are part of my life since i changed from ISO-8859-1 to Unicode.</p>
<p>The case insensitivity modifier in regular expression matching implementations has become misleading at best through creation of the Unicode standard (it was perfectly nonambiguous before)!<br />
It is a legacy option to be used when matching artificial languages only.<br />
Regular expression libraries still work. But text that needs to be mangled for matching, needs to be mangled before calling the regexp library.</p>
<p>Ambiguousity has crept into other base libraries too. Case mangling functions in a lot of languages are not documented enough to indicate the algorithm used. Most often it seems as if someone took code from the pre-Unicode era and just extended it to support the algorithm from Unicode, that looked most sane to use for the implementing developer&#8217;s current needs.<br />
As there are two case mangling standards in Unicode (one reversible and non-length-changing and another one), any sane implementation would let the user choose between them. And as the Unicode standard documents keep on saying over and over again, that one may want to implement additional or even more complex mappings for handling some language better, extensibility would be key in proper libraries. Base libraries should, for example as parameter to a case fold function, allow the developer to provide an additional mapping table to respect in favor of the built in ones. I also never saw an implemented option to select the Unicode standard&#8217;s version to adhere to&#8230;</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment odd alt thread-even depth-1 parent highlander-comment" id="comment-6017">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/d44487550f4438a6052a51a094cad59f?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://www.perl.org' rel='external nofollow' class='url'>Tom Christiansen</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6017"><time pubdate datetime="2013-12-01T22:14:07+00:00">2013-12-01 at 22:14</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>In response to the statement that “Base libraries should, for example as parameter to a case fold function, allow the developer to provide an additional mapping table to respect in favor of the built in ones,” I can provide two examples.</p>
<p>The first is in the Go language’s strings package, along with string-mapping functions like ToUpper, ToLower, and ToTitle, they also provide versions of those functions whose names end in &#8220;Special&#8221; (such as ToUpperSpecial) and which take an extra argument specifying the special casing rules to be given precedence.  Originally this was to handle the &#8220;Turkish I&#8221; problem, and I do not know if any other rulesets have appeared.</p>
<p><a href="http://golang.org/pkg/strings/" rel="nofollow">http://golang.org/pkg/strings/</a></p>
<p>The do provide an EqualFold() function, but that is specifically defined to work only on the SimpleFold() (that is, 1:1 rune-to-rune) versions, not the possibly multi-codepoint mappings of the fancier case-mapping rules.  You’ll find no “full” case-mapping functions in their unicode package:</p>
<p><a href="http://golang.org/pkg/unicode/" rel="nofollow">http://golang.org/pkg/unicode/</a></p>
<p>The other example is Perl&#8217;s Unicode::Casing module, which allows you to override the case-mapping functions and their string-interpolation escapes within a lexical scope.  For example:</p>
<p> use Unicode::Casing (<br />
    uc        =&gt; \&amp;my_uc,<br />
    lc        =&gt; \&amp;my_lc,<br />
    ucfirst   =&gt; \&amp;my_ucfirst,<br />
    lcfirst   =&gt; \&amp;my_lcfirst,<br />
    fc        =&gt; \&amp;my_fc,<br />
 ); </p>
<p>You can read about it more here:</p>
<p><a href="http://search.cpan.org/~khw/Unicode-Casing-0.12/lib/Unicode/Casing.pm" rel="nofollow">http://search.cpan.org/~khw/Unicode-Casing-0.12/lib/Unicode/Casing.pm</a></p>
<p>To no great surprise, the provided example is for a turkish_lc() function.</p>
<p>All that aside, I agree that trying to get all the odd border cases right on full case-insensitive matching is a vexing problem with no perfect solution.  It is a great deal easier if you first do the folding yourself on the string and then supplying case-folded forms to the matcher than it is to try to make the matching Engine figure everything out.  However, this has its own pitfalls, not to mention space requirements.  And you cannot turn it on or off in one part of the match compared with another part. This is a real problem when trying to assemble larger match strings out of smaller ones, where different rules apply.</p>
<p>For text searching, this probably also involves reducing to NFKC before folding, or doing a Unicode-Collation-Algorithm match, which is quite expensive.  </p>
<p>And even so, you won’t get everything you need.  If you look very closely at Adobe Acrobat’s search function, it is indeed doing all that and more, allowing U+0027 APOSTROPHE to match U+2019 RIGHT SINGLE QUOTATION MARK, or even breaking up lexical ligatures.  This clearly involves more logic than mere normalization and folding, but if you are searching real text, you always have to do more than just apply the simple words.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=6017#respond' onclick='return addComment.moveForm("comment-6017", "6017", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment even depth-2 highlander-comment" id="comment-6022">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f80d783a24c44533b3a36e9ce058f2cd?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://allanwegan.de' rel='external nofollow' class='url'>Allan Wegan</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6022"><time pubdate datetime="2013-12-02T12:48:40+00:00">2013-12-02 at 12:48</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Runic script does not even has lower and upper case. :P<br />
Nice to read, that there is progress in &#8220;fresh&#8221; languages. Looks like Golang does some things better.</p>
<p>I also stumbled over that strange (maybe turkish) &#8220;İ&#8221; and &#8220;ı&#8221;. For matching i almost always want to mangle that to regular &#8220;I&#8221; or &#8220;i&#8221;. I also would want a lot more mappings for other languages even to the point where &#8220;Cheng&#8221; would match &#8220;程&#8221;. But a turkish searcher would possibly not want to get results with &#8220;i&#8221; when searching for &#8220;ı&#8221; (though i do not know for sure).</p>
<p>Breaking up ligatures is what NFKC is really good at (it also converts mirrored latin and other &#8220;decorated&#8221; stuff to its plain version). Punctuation i mostly just drop before matching. I know, that it may matter in a lot of cases and therefore understand why Adobe chose to mangle it less destructively.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
			<li class="comment pingback">
				<div class="comment-text">
					<p>Pingback: <a href='http://gear11.com/2013/12/reducing-the-perils-of-string-encoding/' rel='external nofollow' class='url'>Reducing the perils of string encoding | Gear 11</a></p>
					<p class="edit-comment"></p>
				</div>
			</li><!-- #comment-## -->

			<li class="comment odd alt thread-odd thread-alt depth-1 parent highlander-comment" id="comment-6057">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/80033fa50a0c9839fee8a5d387d6f15d?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://colibriofservice.de' rel='external nofollow' class='url'>Tom</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6057"><time pubdate datetime="2013-12-04T16:28:16+00:00">2013-12-04 at 16:28</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Funnily enough, my screenreader (macintalk) will not read out paragraph that contain non-bmp characters, not just skip them like Cyrillic or such. There is so much broken there.</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=6057#respond' onclick='return addComment.moveForm("comment-6057", "6057", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor even depth-2 highlander-comment" id="comment-6059">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6059"><time pubdate datetime="2013-12-04T17:25:43+00:00">2013-12-04 at 17:25</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>I wonder how a screen reader is supposed to pronounce 😸?</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt depth-2 highlander-comment" id="comment-6064">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/f80d783a24c44533b3a36e9ce058f2cd?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://allanwegan.de' rel='external nofollow' class='url'>Allan Wegan</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6064"><time pubdate datetime="2013-12-04T19:24:27+00:00">2013-12-04 at 19:24</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>It should ponounce &#8220;😸&#8221; like &#8220;emoticon of a smiling cat face&#8221; translated into the user&#8217;s language. At least is should fall back to the name given by the Unicode standard like in &#8220;Symbol: GRINNING CAT FACE WITH SMILING EYES&#8221;.</p>
<p>The worst case for a screenreader is to not pronouncing it at all. Even &#8220;unknown symbol&#8221; would be better than nothing.</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

			<li class="comment even thread-even depth-1 highlander-comment" id="comment-6065">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://1.gravatar.com/avatar/4a1f42a59e40446158ce872818a963a3?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='https://www.mirbsd.org/mksh.htm' rel='external nofollow' class='url'>mirabilos</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6065"><time pubdate datetime="2013-12-04T20:27:37+00:00">2013-12-04 at 20:27</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>One minor nitpick: noël with precomposed ë is<br />
four characters, four columns, four glyphs, five UTF-8 octets;<br />
noël with decomposed ë is<br />
five characters, four columns, four glyphs, six UTF-8 octets.</p>
<p>I assume you mean “gimme the number of glyphs”; a character<br />
is a UCS-4 codepoint (important for languages or environments<br />
whose wide character type is 16 bits), a glyph can have more<br />
of those (e.g. combining or annotations).</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=6065#respond' onclick='return addComment.moveForm("comment-6065", "6065", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->

			<li class="comment odd alt thread-odd thread-alt depth-1 parent highlander-comment" id="comment-6077">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://0.gravatar.com/avatar/c63c20b62d03b98d9fb684c782b667ac?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://gravatar.com/ndmitry' rel='external nofollow' class='url'>weiss</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6077"><time pubdate datetime="2013-12-05T17:39:34+00:00">2013-12-05 at 17:39</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>// js<br />
&#8216;baﬄe&#8217;.toUpperCase();<br />
-&gt; &#8220;BAFFLE&#8221;</p>
										<p class="reply-link"><a class='comment-reply-link' href='/2013/11/27/the-string-type-is-broken/?replytocom=6077#respond' onclick='return addComment.moveForm("comment-6077", "6077", "respond", "1822")'>Reply</a></p>
					<p class="edit-comment"></p>
				</div>
		<ul class="children">

			<li class="comment byuser comment-author-mortoray bypostauthor even depth-2 highlander-comment" id="comment-6078">

				<div class="comment-heading clear-fix">
					<p class="comment-author">
						<img alt='' src='http://2.gravatar.com/avatar/e6ce612702a34f9bcebee2f34139c3f1?s=32&#038;d=identicon&#038;r=PG' class='avatar avatar-32' height='32' width='32' />						<span><a href='http://mortoray.wordpress.com' rel='external nofollow' class='url'>mortoray</a></span> <em>said:</em>					</p>
					<p class="comment-date">
						<a href="http://mortoray.com/2013/11/27/the-string-type-is-broken/#comment-6078"><time pubdate datetime="2013-12-05T17:50:38+00:00">2013-12-05 at 17:50</time></a>					</p>
				</div>
				<div class="comment-text">
					<p>Which JS compiler?</p>
										<p class="reply-link"></p>
					<p class="edit-comment"></p>
				</div>
		</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		</ol>

		
	
									<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2013/11/27/the-string-type-is-broken/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://mortoray.com/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																										


												<input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="fa7dc6d475" /><input type="hidden" name="_wp_http_referer" value="/2013/11/27/the-string-type-is-broken/" />
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest" />

<div class="comment-form-field comment-textarea">
	<label for="comment">Enter your comment here...</label>
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..."></textarea></div>
</div>

<div id="comment-form-identity">

	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" title="Guest">
					<span></span>
				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" title="WordPress.com">
					<span></span>
				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" title="Twitter">
					<span></span>
				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" title="Facebook">
					<span></span>
				</a>
			</li>
			<li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=PG" alt="Gravatar" width="25" class="no-grav" />
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value="" /></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value="" /></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="text" value="" /></div>
				</div>
			</div>
	
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="http://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png?m=1391188133g" alt="WordPress.com Logo" width="25" class="no-grav" />
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="" />
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="" />
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="" />
				<p class="comment-form-posting-as pa-wordpress"><strong></strong> You are commenting using your WordPress.com account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=PG" alt="Twitter picture" width="25" class="no-grav" />
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="" />
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="" />
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="" />
				<p class="comment-form-posting-as pa-twitter"><strong></strong> You are commenting using your Twitter account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=PG" alt="Facebook photo" width="25" class="no-grav" />
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="" />
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="" />
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="" />
				<p class="comment-form-posting-as pa-facebook"><strong></strong> You are commenting using your Facebook account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>

	<div id="comment-form-googleplus" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=PG" alt="Google+ photo" width="25" class="no-grav" />
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="googleplus_avatar" id="googleplus-avatar" class="comment-meta-googleplus" value="" />
				<input type="hidden" name="googleplus_user_id" id="googleplus-user_id" class="comment-meta-googleplus" value="" />
				<input type="hidden" name="googleplus_access_token" id="googleplus-access_token" class="comment-meta-googleplus" value="" />
				<p class="comment-form-posting-as pa-googleplus"><strong></strong> You are commenting using your Google+ account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'googleplus' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

	
</div>

<script type="text/javascript">
var highlander_expando_javascript = function(){
	var input = document.createElement( 'input' ),
	    comment = jQuery( '#comment' );

	if ( 'placeholder' in input ) {
		comment.attr( 'placeholder', jQuery( '.comment-textarea label' ).remove().text() );
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	jQuery( '#comment-form-identity' ).hide();
	jQuery( '#comment-form-subscribe' ).hide();
	jQuery( '#commentform .form-submit' ).hide();

	comment.css( { 'height':'10px' } ).one( 'focus', function() {
		var timer = setInterval( HighlanderComments.resizeCallback, 10 )
		jQuery( this ).animate( { 'height': HighlanderComments.initialHeight } ).delay( 100 ).queue( function(n) { clearInterval( timer ); HighlanderComments.resizeCallback(); n(); } );
		jQuery( '#comment-form-identity' ).slideDown();
		jQuery( '#comment-form-subscribe' ).slideDown();
		jQuery( '#commentform .form-submit' ).slideDown();
	});
}
jQuery(document).ready( highlander_expando_javascript );
</script>

<div id="comment-form-subscribe">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;" tabindex="6"/> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of follow-up comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;" tabindex="7"/> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog"  style="display: inline;">Notify me of new posts via email.</label></p></div>

												<p class="form-submit">
							<input name="submit" type="submit" id="comment-submit" value="Post Comment" />
							<input type='hidden' name='comment_post_ID' value='1822' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
						</p>
						<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="a03197a288" /></p>
<input type="hidden" name="genseq" value="1404132083" />
<p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="57"/></p>					</form>
							</div><!-- #respond -->
			<div style="clear: both"></div>
</div><!-- #comments -->
		
		</div><!-- end #content -->
	</div><!-- end #primary -->

	
	<div id="secondary" class="widget-area" role="complementary">
		
		<aside id="nav_menu-3" class="sidebar-widget widget_nav_menu"><div class="menu-main-menu-container"><ul id="menu-main-menu" class="menu"><li id="menu-item-1649" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1649"><a href="http://mortoray.com/leaf/">Leaf</a></li>
<li id="menu-item-1650" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1650"><a href="http://mortoray.com/defective-cpp/">Defective C++</a></li>
<li id="menu-item-1651" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1651"><a href="http://mortoray.com/ideal-language/">Ideal Language</a></li>
<li id="menu-item-1652" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1652"><a href="http://mortoray.com/about/">About Edaqa</a></li>
</ul></div></aside><aside id="twitter-3" class="sidebar-widget widget_twitter"><h1 class="widget-title"><a href='http://twitter.com/edaqa'>Latest Tweets</a></h1><ul class='tweets'>
			<li>
				Should exports be automatically transitive? : leaflang <a href="http://bit.ly/1kXRCbb"> bit.ly/1kXRCbb</a> 				<a href="http://twitter.com/edaqa/statuses/480304024731004928" class="timesince">1&nbsp;week&nbsp;ago</a>
			</li>

			
			<li>
				Global/static functions — Leaf <a href="http://bit.ly/1xybgV7"> bit.ly/1xybgV7</a> 				<a href="http://twitter.com/edaqa/statuses/476033403431968769" class="timesince">2&nbsp;weeks&nbsp;ago</a>
			</li>

			
			<li>
				I&#039;m looking for gameplay testers for a new mobile game, please contact me if interested  <a href="http://bit.ly/1lZ0dhH"> bit.ly/1lZ0dhH</a> 				<a href="http://twitter.com/edaqa/statuses/469113870205067264" class="timesince">1&nbsp;month&nbsp;ago</a>
			</li>

			</ul><a href="http://twitter.com/edaqa"  class='twitter-follow-button' data-show-count='false' data-link-color='#990000' data-text-color='#333333'>Follow @edaqa</a></aside><aside id="blog_subscription-2" class="sidebar-widget widget_blog_subscription"><h1 class="widget-title"><label for="subscribe-field">Follow Blog via Email</label></h1>
				<form action="https://subscribe.wordpress.com" method="post" accept-charset="utf-8" id="subscribe-blog">
											<p>Enter your email address to follow this blog and receive notifications of new posts by email.</p>
						<p><input type="text" name="email" style="width: 95%; padding: 1px 2px" value="" id="subscribe-field"/></p>
					
					<p>
						<input type="hidden" name="action" value="subscribe"/>
						<input type="hidden" name="blog_id" value="11292855"/>
						<input type="hidden" name="source" value="http://mortoray.com/2013/11/27/the-string-type-is-broken/"/>
						<input type="hidden" name="sub-type" value="widget"/>
						<input type="hidden" name="redirect_fragment" value="blog_subscription-2" />
						<input type="hidden" id="_wpnonce" name="_wpnonce" value="afad2b9d8c" />						<input type="submit" value="Follow" />
					</p>
				</form>
			
</aside>		<aside id="recent-posts-2" class="sidebar-widget widget_recent_entries">		<h1 class="widget-title">Recent Posts</h1>		<ul>
					<li>
				<a href="http://mortoray.com/2014/05/29/wait-free-queueing-and-ultra-low-latency-logging/">Wait-free queueing and ultra-low latency&nbsp;logging</a>
						</li>
					<li>
				<a href="http://mortoray.com/2014/04/16/the-uninitialized-variable-anathema-non-deterministic-c/">The uninitialized variable anathema: non-deterministic C++</a>
						</li>
					<li>
				<a href="http://mortoray.com/2014/04/09/allowing-unlimited-access-with-cors/">Allowing unlimited access with&nbsp;CORS</a>
						</li>
					<li>
				<a href="http://mortoray.com/2014/03/31/stop-signing-crappy-contracts/">Stop signing crappy&nbsp;contracts</a>
						</li>
					<li>
				<a href="http://mortoray.com/2014/03/25/the-infernal-loop-iterator/">The Infernal Loop&nbsp;Iterator</a>
						</li>
					<li>
				<a href="http://mortoray.com/2014/03/17/strings-and-text-are-not-the-same/">Strings and Text are not the&nbsp;same</a>
						</li>
					<li>
				<a href="http://mortoray.com/2014/03/07/too-big-too-care-how-twitter-inadvertently-revoked-my-developer-access/">Too big too care: How Twitter inadvertently revoked my developer&nbsp;access</a>
						</li>
					<li>
				<a href="http://mortoray.com/2014/03/04/http-streaming-of-command-output-in-python-flask/">HTTP streaming of command output in Python&nbsp;Flask</a>
						</li>
					<li>
				<a href="http://mortoray.com/2014/02/21/the-dangers-of-oauthsocial-login/">The dangers of OAuth/Social&nbsp;Login</a>
						</li>
					<li>
				<a href="http://mortoray.com/2014/02/10/simulating-the-way-to-victory-bloons-td-battles/">Simulating the way to victory: Bloons TD&nbsp;Battles</a>
						</li>
					<li>
				<a href="http://mortoray.com/2014/01/31/improving-css-positioning-with-position-anchor/">Improving CSS Positioning with&nbsp;position-anchor</a>
						</li>
					<li>
				<a href="http://mortoray.com/2014/01/21/painlessly-add-a-virtual-to-a-large-class-structure/">Painlessly add a virtual to a large class&nbsp;structure</a>
						</li>
				</ul>
		</aside><aside id="archives-3" class="sidebar-widget widget_archive"><h1 class="widget-title">Archives</h1>		<select name="archive-dropdown" onchange='document.location.href=this.options[this.selectedIndex].value;'>
			<option value="">Select Month</option>

				<option value='http://mortoray.com/2014/05/'> May 2014 &nbsp;(1)</option>
	<option value='http://mortoray.com/2014/04/'> April 2014 &nbsp;(2)</option>
	<option value='http://mortoray.com/2014/03/'> March 2014 &nbsp;(5)</option>
	<option value='http://mortoray.com/2014/02/'> February 2014 &nbsp;(2)</option>
	<option value='http://mortoray.com/2014/01/'> January 2014 &nbsp;(3)</option>
	<option value='http://mortoray.com/2013/12/'> December 2013 &nbsp;(1)</option>
	<option value='http://mortoray.com/2013/11/'> November 2013 &nbsp;(2)</option>
	<option value='http://mortoray.com/2013/10/'> October 2013 &nbsp;(1)</option>
	<option value='http://mortoray.com/2013/09/'> September 2013 &nbsp;(1)</option>
	<option value='http://mortoray.com/2013/08/'> August 2013 &nbsp;(2)</option>
	<option value='http://mortoray.com/2013/07/'> July 2013 &nbsp;(4)</option>
	<option value='http://mortoray.com/2013/06/'> June 2013 &nbsp;(4)</option>
	<option value='http://mortoray.com/2013/05/'> May 2013 &nbsp;(2)</option>
	<option value='http://mortoray.com/2013/04/'> April 2013 &nbsp;(1)</option>
	<option value='http://mortoray.com/2013/03/'> March 2013 &nbsp;(3)</option>
	<option value='http://mortoray.com/2013/02/'> February 2013 &nbsp;(3)</option>
	<option value='http://mortoray.com/2013/01/'> January 2013 &nbsp;(2)</option>
	<option value='http://mortoray.com/2012/12/'> December 2012 &nbsp;(2)</option>
	<option value='http://mortoray.com/2012/10/'> October 2012 &nbsp;(1)</option>
	<option value='http://mortoray.com/2012/09/'> September 2012 &nbsp;(2)</option>
	<option value='http://mortoray.com/2012/08/'> August 2012 &nbsp;(3)</option>
	<option value='http://mortoray.com/2012/07/'> July 2012 &nbsp;(5)</option>
	<option value='http://mortoray.com/2012/06/'> June 2012 &nbsp;(3)</option>
	<option value='http://mortoray.com/2012/05/'> May 2012 &nbsp;(1)</option>
	<option value='http://mortoray.com/2012/04/'> April 2012 &nbsp;(1)</option>
	<option value='http://mortoray.com/2012/03/'> March 2012 &nbsp;(1)</option>
	<option value='http://mortoray.com/2012/02/'> February 2012 &nbsp;(2)</option>
	<option value='http://mortoray.com/2012/01/'> January 2012 &nbsp;(3)</option>
	<option value='http://mortoray.com/2011/12/'> December 2011 &nbsp;(1)</option>
	<option value='http://mortoray.com/2011/11/'> November 2011 &nbsp;(2)</option>
	<option value='http://mortoray.com/2011/10/'> October 2011 &nbsp;(3)</option>
	<option value='http://mortoray.com/2011/08/'> August 2011 &nbsp;(3)</option>
	<option value='http://mortoray.com/2011/07/'> July 2011 &nbsp;(1)</option>
	<option value='http://mortoray.com/2011/03/'> March 2011 &nbsp;(4)</option>
	<option value='http://mortoray.com/2010/11/'> November 2010 &nbsp;(2)</option>
	<option value='http://mortoray.com/2010/10/'> October 2010 &nbsp;(3)</option>
	<option value='http://mortoray.com/2010/07/'> July 2010 &nbsp;(1)</option>
	<option value='http://mortoray.com/2010/06/'> June 2010 &nbsp;(2)</option>
	<option value='http://mortoray.com/2010/04/'> April 2010 &nbsp;(1)</option>
	<option value='http://mortoray.com/2010/02/'> February 2010 &nbsp;(1)</option>
	<option value='http://mortoray.com/2010/01/'> January 2010 &nbsp;(2)</option>
		</select>
</aside><aside id="rss_links-3" class="sidebar-widget widget_rss_links"><p class="size-small"><a class="feed-image-link" href="http://mortoray.com/feed/" title="Subscribe to Posts"><img src="http://mortoray.com/i/rss/orange-small.png" alt="RSS Feed" /></a>&nbsp;<a href="http://mortoray.com/feed/" title="Subscribe to Posts">RSS - Posts</a></p>
</aside>
	</div><!-- #secondary .widget-area -->


		</div><!-- end #main -->
	</div><!-- end #page-inner -->

	<footer id="colophon" role="contentinfo">
		<div id="footer">
			<div id="footer-inner">
				<div id="footer-inner-inner">
					
				</div><!-- end #footer-inner-inner -->
			</div><!-- end #footer-inner -->
		</div>
		<div id="copyright">
			<div id="copyright-inner">
					<div id="copyright-inner-inner">
					<p>
						<a href="http://wordpress.com/?ref=footer_blog">Blog at WordPress.com</a>.
		<a href="http://theme.wordpress.com/credits/mortoray.com/" title="Learn about customizing this theme with the Custom Design upgrade">Customized Chateau Theme</a>.					</p>
				</div><!-- end #copyright-inner-inner -->
			</div><!-- end #copyright-inner -->
		</div><!-- end #copyright -->
	</footer><!-- end #footer -->

	<script type='text/javascript' src='//0.gravatar.com/js/gprofiles.js?ver=201427x'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://s2.wp.com/wp-content/mu-plugins/gravatar-hovercards/wpgroho.js?m=1380573781g'></script>

	<script>
		//initialize and attach hovercards to all gravatars
		jQuery( document ).ready( function( $ ) {
			if ( typeof Gravatar.init !== "function" ) {
				return;
			}			

			Gravatar.profile_cb = function( hash, id ) {
				WPGroHo.syncProfileData( hash, id );
			};
			Gravatar.my_hash = WPGroHo.my_hash;
			Gravatar.init( 'body', '#wp-admin-bar-my-account' );
		});
	</script>

		<div style="display:none">
	<div class="grofile-hash-map-e4868b6d3075a52e98423a0ef0d8e111">
	</div>
	<div class="grofile-hash-map-e6ce612702a34f9bcebee2f34139c3f1">
	</div>
	<div class="grofile-hash-map-404fabbcb3e36bac8da7d1904d260ec0">
	</div>
	<div class="grofile-hash-map-cac0f0d004914baa59ba4fbb171373e0">
	</div>
	<div class="grofile-hash-map-ef94608409198b7474b92b6ad32373fb">
	</div>
	<div class="grofile-hash-map-f80d783a24c44533b3a36e9ce058f2cd">
	</div>
	<div class="grofile-hash-map-225c486ea3742fa8aa3a20bb2df83a69">
	</div>
	<div class="grofile-hash-map-181c0c8970fb5e1fac627371a0a06c5f">
	</div>
	<div class="grofile-hash-map-669a4c13a144c18ba2b638916559bc2e">
	</div>
	<div class="grofile-hash-map-e164876f30b5aa511b02c6241b5315da">
	</div>
	<div class="grofile-hash-map-7cb5f5081957968399ac7c35191090bc">
	</div>
	<div class="grofile-hash-map-f0123fdcfde793f05a9ba8b6bc36857a">
	</div>
	<div class="grofile-hash-map-86a2bb2847709382ffc1ad0efe4e3d43">
	</div>
	<div class="grofile-hash-map-f0a4a3bf7da8ec8c0311423f4cec15b4">
	</div>
	<div class="grofile-hash-map-f64914b68ff9076e46156c07c96e890f">
	</div>
	<div class="grofile-hash-map-f64914b68ff9076e46156c07c96e890f">
	</div>
	<div class="grofile-hash-map-66140b71009bde0dcf0d30996325498f">
	</div>
	<div class="grofile-hash-map-e2c70a8f8eca2225b3c784c2e249d0bb">
	</div>
	<div class="grofile-hash-map-970ae66511246012d6144e39520c9a60">
	</div>
	<div class="grofile-hash-map-0d84e8d31fd3b983f05b35f88ddbad4c">
	</div>
	<div class="grofile-hash-map-6b4a02a1798e1b5ad5f57c4a057343e3">
	</div>
	<div class="grofile-hash-map-e61d768dae9ffc129a9673ef09abdabe">
	</div>
	<div class="grofile-hash-map-e8b1967a7daac7e79352cd9447567e09">
	</div>
	<div class="grofile-hash-map-50cb4981bbaa51b1713269a29f78d826">
	</div>
	<div class="grofile-hash-map-fc481a38895d17eb7244478e84da578e">
	</div>
	<div class="grofile-hash-map-24e08a9ea84deb17ae121074d0f17125">
	</div>
	<div class="grofile-hash-map-f59238e5e5c66e2de7e284431f63e020">
	</div>
	<div class="grofile-hash-map-7cbe926f05ec8320928d9435378a7f5a">
	</div>
	<div class="grofile-hash-map-b2ef00cd1457bcdc46f506983384f57e">
	</div>
	<div class="grofile-hash-map-bb8753fce5a983b5319a2c1e5ff6b422">
	</div>
	<div class="grofile-hash-map-fe0da1ca8ba569811f1805fd4bab9f1e">
	</div>
	<div class="grofile-hash-map-3986b36fd1dbb8120d3025de8a63ab96">
	</div>
	<div class="grofile-hash-map-09829c4360391ff7a7352ce966f2b99b">
	</div>
	<div class="grofile-hash-map-cb8e56cbd549d34a90251ae82e294be3">
	</div>
	<div class="grofile-hash-map-efe98f3e2e5d53e7e209ae0b11dd6370">
	</div>
	<div class="grofile-hash-map-efe98f3e2e5d53e7e209ae0b11dd6370">
	</div>
	<div class="grofile-hash-map-554b1db472deb661d004d042718e7237">
	</div>
	<div class="grofile-hash-map-9e36aeb20f1b4a763043d3ce4942b454">
	</div>
	<div class="grofile-hash-map-8dc203b16554e29b254d838f703413e8">
	</div>
	<div class="grofile-hash-map-8f37e211f0d764f3ebd1c6219f6fdb80">
	</div>
	<div class="grofile-hash-map-ae0cd5bd5a84d1b18445f40f4961d02c">
	</div>
	<div class="grofile-hash-map-8aa1fa491b70c1b46f5069eed7b4c571">
	</div>
	<div class="grofile-hash-map-f2f5d400f965dd627fc8636d59b266b1">
	</div>
	<div class="grofile-hash-map-f2f5d400f965dd627fc8636d59b266b1">
	</div>
	<div class="grofile-hash-map-cac0f0d004914baa59ba4fbb171373e0">
	</div>
	<div class="grofile-hash-map-f41d2e47de862fc9d0d3296a15aa5868">
	</div>
	<div class="grofile-hash-map-fb514f9b8188fd20a0d85d8e02e86b4a">
	</div>
	<div class="grofile-hash-map-d717e1bb39fe56630b8964fcda114560">
	</div>
	<div class="grofile-hash-map-aaeabd769bae1bf82fd4b8882fed6653">
	</div>
	<div class="grofile-hash-map-ec936e6c940cd6b2abb0b0e2f76e6ef6">
	</div>
	<div class="grofile-hash-map-a1254dabbec32d7cbc502dfd2fd0438d">
	</div>
	<div class="grofile-hash-map-94943af61a1a220603e762de77e846a1">
	</div>
	<div class="grofile-hash-map-efa204c17a0cbb81cc1bc339c491ec76">
	</div>
	<div class="grofile-hash-map-a0d651c0a89027edf84a5065addec450">
	</div>
	<div class="grofile-hash-map-22ca530c1db575f0a62b68c1900d8399">
	</div>
	<div class="grofile-hash-map-d44487550f4438a6052a51a094cad59f">
	</div>
	<div class="grofile-hash-map-da2d02eeefb0d363d87a0bda92991f91">
	</div>
	<div class="grofile-hash-map-16d45c03c7e437b3715dfba4aea40a8e">
	</div>
	<div class="grofile-hash-map-77bfae11a6e64f5e8dba6236fbc65bbc">
	</div>
	<div class="grofile-hash-map-872cc412d069c8bbd31074bdc2500086">
	</div>
	<div class="grofile-hash-map-2e8c9bda08fde339f0dc2110d9ddd5c9">
	</div>
	<div class="grofile-hash-map-f1f6e1a2e42dca51303b7fe7d3a59354">
	</div>
	<div class="grofile-hash-map-01a38cef95d79b9b4e5a93aba352b62e">
	</div>
	<div class="grofile-hash-map-0a969d240f3770d67242df0150d85880">
	</div>
	<div class="grofile-hash-map-80033fa50a0c9839fee8a5d387d6f15d">
	</div>
	<div class="grofile-hash-map-4a1f42a59e40446158ce872818a963a3">
	</div>
	<div class="grofile-hash-map-c63c20b62d03b98d9fb684c782b667ac">
	</div>
	</div>
<script type='text/javascript'>
/* <![CDATA[ */
var HighlanderComments = {"loggingInText":"Logging In\u2026","submittingText":"Posting Comment\u2026","postCommentText":"Post Comment","connectingToText":"Connecting to %s","commentingAsText":"%1$s: You are commenting using your %2$s account.","logoutText":"Log Out","loginText":"Log In","connectURL":"http:\/\/mortoray.wordpress.com\/public.api\/connect\/?action=request","logoutURL":"https:\/\/mortoray.wordpress.com\/wp-login.php?action=logout&_wpnonce=a7abb165c8","homeURL":"http:\/\/mortoray.com\/","postID":"1822","gravDefault":"identicon","enterACommentError":"Please enter a comment","enterEmailError":"Please enter your email address here","invalidEmailError":"Invalid email address","enterAuthorError":"Please enter your name here","gravatarFromEmail":"This picture will show whenever you leave a comment. Click to customize it.","logInToExternalAccount":"Log in to use details from one of these accounts.","change":"Change","changeAccount":"Change Account","comment_registration":"","userIsLoggedIn":"","isJetpack":"0"};
/* ]]> */
</script>
<script type='text/javascript' src='http://s1.wp.com/_static/??/wp-content/js/jquery/jquery.autoresize.js,/wp-content/mu-plugins/highlander-comments/script.js?m=1403644162j'></script>

	<div id="bit" class="loggedout-follow-normal">
		<a class="bsub" href="javascript:void(0)"><span id='bsub-text'>Follow</span></a>
		<div id="bitsubscribe">

					<h3><label for="loggedout-follow-field">Follow &ldquo;Musing Mortoray&rdquo;</label></h3>

			<form action="https://subscribe.wordpress.com" method="post" accept-charset="utf-8" id="loggedout-follow">
			<p>Get every new post delivered to your Inbox.</p>

			<p id="loggedout-follow-error" style="display: none;"></p>

						<p class="bit-follow-count">Join 243 other followers</p>
			<p><input type="email" name="email" value="Enter your email address" onfocus='this.value=(this.value=="Enter your email address") ? "" : this.value;' onblur='this.value=(this.value=="") ? "Enter email address" : this.value;'  id="loggedout-follow-field"/></p>

			<input type="hidden" name="action" value="subscribe"/>
			<input type="hidden" name="blog_id" value="11292855"/>
			<input type="hidden" name="source" value="http://mortoray.com/2013/11/27/the-string-type-is-broken/"/>
			<input type="hidden" name="sub-type" value="loggedout-follow"/>

			<input type="hidden" id="_wpnonce" name="_wpnonce" value="afad2b9d8c" /><input type="hidden" name="_wp_http_referer" value="/2013/11/27/the-string-type-is-broken/" />
			<p id='bsub-subscribe-button'><input type="submit" value="Sign me up" /></p>
			</form>
					<div id='bsub-credit'><a href="http://wordpress.com/signup/?ref=lof">Powered by WordPress.com</a></div>
		</div><!-- #bitsubscribe -->
	</div><!-- #bit -->
		<script type="text/javascript">
		(function() {
			var a, s = document.getElementsByTagName("script")[0];
			a = document.createElement("script");
			a.type = "text/javascript";
			a.async = true;
			a.src = "http://www.luminate.com/widget/syndicated/137fe395802/";
			s.parentNode.insertBefore(a, s);
		})();
		</script>
	<script type="text/javascript">
		WPCOM_sharing_counts = {"http:\/\/mortoray.com\/2013\/11\/27\/the-string-type-is-broken\/":1822}	</script>
		<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-twitter' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
				return false;
			});
		});
		</script>
			<div id="sharing_email" style="display: none;">
		<form action="/2013/11/27/the-string-type-is-broken/" method="post">
			<label for="target_email">Send to Email Address</label>
			<input type="email" name="target_email" id="target_email" value="" />

			
				<label for="source_name">Your Name</label>
				<input type="text" name="source_name" id="source_name" value="" />

				<label for="source_email">Your Email Address</label>
				<input type="email" name="source_email" id="source_email" value="" />

			
			<div class="recaptcha" id="sharing_recaptcha"></div><input type="hidden" name="recaptcha_public_key" id="recaptcha_public_key" value="6LcYW8MSAAAAADBAuEH9yaPcF7lWh11Iq62ZKtoo" />
			<img style="float: right; display: none" class="loading" src="http://s2.wp.com/wp-content/mu-plugins/post-flair/sharing/images/loading.gif?m=1315610318g" alt="loading" width="16" height="16" />
			<input type="submit" value="Send Email" class="sharing_send" />
			<a href="#cancel" class="sharing_cancel">Cancel</a>

			<div class="errors errors-1" style="display: none;">
				Post was not sent - check your email addresses!			</div>

			<div class="errors errors-2" style="display: none;">
				Email check failed, please try again			</div>

			<div class="errors errors-3" style="display: none;">
				Sorry, your blog cannot share posts by email.			</div>
		</form>
	</div>
		<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-facebook' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-pocket' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcompocket', 'menubar=1,resizable=1,width=450,height=450' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-linkedin' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomlinkedin', 'menubar=1,resizable=1,width=580,height=450' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-tumblr' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomtumblr', 'menubar=1,resizable=1,width=450,height=450' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-google-plus-1' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomgoogle-plus-1', 'menubar=1,resizable=1,width=480,height=550' );
				return false;
			});
		});
		</script>
				<iframe src='http://widgets.wp.com/likes/master.html?ver=20140528#ver=20140528&amp;mp6=1' scrolling='no' id='likes-master' name='likes-master' style='display:none;'></iframe>
		<div id='likes-other-gravatars'><div class="likes-text"><span>%d</span> bloggers like this:</div><ul class="wpl-avatars sd-like-gravatars"></ul></div>
		<script type="text/javascript">
		//<![CDATA[
			var jetpackLikesWidgetQueue = [];
			var jetpackLikesWidgetBatch = [];
			var jetpackLikesMasterReady = false;

			function JetpackLikespostMessage( message, target ) {
				if ( "string" === typeof message ){
					try{
						message = JSON.parse( message );
					}
					catch(e) {
						return;
					}
				}

				pm( {
					target: target,
					type: 'likesMessage',
					data: message,
					origin: '*'
				} );
			}

			function JetpackLikesBatchHandler() {
				var requests = [];
				jQuery( 'div.jetpack-likes-widget-unloaded' ).each( function( i ) {
					if ( jetpackLikesWidgetBatch.indexOf( this.id ) > -1 )
						return;
					jetpackLikesWidgetBatch.push( this.id );
					var regex = /like-(post|comment)-wrapper-(\d+)-(\d+)-(\w+)/;
					var match = regex.exec( this.id );
					if ( ! match || match.length != 5 )
						return;

					var info = {
						blog_id: match[2],
						width:   this.width
					};

					if ( 'post' == match[1] ) {
						info.post_id = match[3];
					} else if ( 'comment' == match[1] ) {
						info.comment_id = match[3];
					}

					info.obj_id = match[4];

					requests.push( info );
				});

				if ( requests.length > 0 ) {
					JetpackLikespostMessage( { event: 'initialBatch', requests: requests }, window.frames['likes-master'] );
				}
			}

			function JetpackLikesMessageListener( event ) {
				if ( "undefined" == typeof event.event )
					return;

				if ( 'masterReady' == event.event ) {
					jQuery( document ).ready( function() {
						jetpackLikesMasterReady = true;

						var stylesData = {
								event: 'injectStyles'
						};

						if ( jQuery( 'iframe.admin-bar-likes-widget' ).length > 0 ) {
							JetpackLikespostMessage( { event: 'adminBarEnabled' }, window.frames[ 'likes-master' ] );

							stylesData.adminBarStyles = {
								background: jQuery( '#wpadminbar .quicklinks li#wp-admin-bar-wpl-like > a' ).css( 'background' ),
								isRtl: ( 'rtl' == jQuery( '#wpadminbar' ).css( 'direction' ) )
							};
						}

						if ( !window.addEventListener )
							jQuery( '#wp-admin-bar-admin-bar-likes-widget' ).hide();

						stylesData.textStyles = {
							color: jQuery( '.sd-text-color').css( 'color' ),
							fontFamily: jQuery( '.sd-text-color' ).css( 'font-family' ),
							fontSize: jQuery( '.sd-text-color' ).css( 'font-size' ),
							direction: jQuery( '.sd-text-color' ).css( 'direction' ),
							fontWeight: jQuery( '.sd-text-color' ).css( 'font-weight' ),
							fontStyle: jQuery( '.sd-text-color' ).css( 'font-style' ),
							textDecoration: jQuery( '.sd-text-color' ).css('text-decoration')
						};

						stylesData.linkStyles = {
							color: jQuery( '.sd-link-color' ).css('color'),
							fontFamily: jQuery( '.sd-link-color' ).css('font-family'),
							fontSize: jQuery( '.sd-link-color' ).css('font-size'),
							textDecoration: jQuery( '.sd-link-color' ).css('text-decoration'),
							fontWeight: jQuery( '.sd-link-color' ).css( 'font-weight' ),
							fontStyle: jQuery( '.sd-link-color' ).css( 'font-style' )
						};

						JetpackLikespostMessage( stylesData, window.frames[ 'likes-master' ] );

						JetpackLikesBatchHandler();

						jQuery( document ).on( 'inview', 'div.jetpack-likes-widget-unloaded', function() {
							jetpackLikesWidgetQueue.push( this.id );
						});
					});
				}

				if ( 'showLikeWidget' == event.event ) {
					jQuery( '#' + event.id + ' .post-likes-widget-placeholder'  ).fadeOut( 'fast', function() {
						jQuery( '#' + event.id + ' .post-likes-widget' ).fadeIn( 'fast', function() {
							JetpackLikespostMessage( { event: 'likeWidgetDisplayed', blog_id: event.blog_id, post_id: event.post_id, obj_id: event.obj_id }, window.frames['likes-master'] );
						});
					});
				}

				if ( 'clickReblogFlair' == event.event ) {
					wpcom_reblog.toggle_reblog_box_flair( event.obj_id );
				}

				if ( 'showOtherGravatars' == event.event ) {
					var $container = jQuery( '#likes-other-gravatars' );
					var $list = $container.find( 'ul' );

					$container.hide();
					$list.html( '' );

					$container.find( '.likes-text span' ).text( event.total );

					jQuery.each( event.likers, function( i, liker ) {
						$list.append( '<li class="' + liker.css_class + '"><a href="' + liker.profile_URL + '" class="wpl-liker" rel="nofollow" target="_parent"><img src="' + liker.avatar_URL + '" alt="' + liker.name + '" width="30" height="30" style="padding-right: 3px;" /></a></li>');
					} );

					var offset = jQuery( "[name='" + event.parent + "']" ).offset();

					$container.css( 'left', offset.left + event.position.left - 10 + 'px' );
					$container.css( 'top', offset.top + event.position.top - 33 + 'px' );

					var rowLength = Math.floor( event.width / 37 );
					var height = ( Math.ceil( event.likers.length / rowLength ) * 37 ) + 13;
					if ( height > 204 ) {
						height = 204;
					}

					$container.css( 'height', height + 'px' );
					$container.css( 'width', rowLength * 37 - 7 + 'px' );

					$list.css( 'width', rowLength * 37 + 'px' );

					$container.fadeIn( 'slow' );

					var scrollbarWidth = $list[0].offsetWidth - $list[0].clientWidth;
					if ( scrollbarWidth > 0 ) {
						$container.width( $container.width() + scrollbarWidth );
						$list.width( $list.width() + scrollbarWidth );
					}
				}
			}

			pm.bind( 'likesMessage', function(e) { JetpackLikesMessageListener(e); } );

			jQuery( document ).click( function( e ) {
				var $container = jQuery( '#likes-other-gravatars' );

				if ( $container.has( e.target ).length === 0 ) {
					$container.fadeOut( 'slow' );
				}
			});

			function JetpackLikesWidgetQueueHandler() {
				var wrapperID;
				if ( ! jetpackLikesMasterReady ) {
					setTimeout( JetpackLikesWidgetQueueHandler, 500 );
					return;
				}

				if ( jetpackLikesWidgetQueue.length > 0 ) {
					// We may have a widget that needs creating now
					var found = false;
					while( jetpackLikesWidgetQueue.length > 0 ) {
						// Grab the first member of the queue that isn't already loading.
						wrapperID = jetpackLikesWidgetQueue.splice( 0, 1 )[0];
						if ( jQuery( '#' + wrapperID ).hasClass( 'jetpack-likes-widget-unloaded' ) ) {
							found = true;
							break;
						}
					}
					if ( ! found ) {
						setTimeout( JetpackLikesWidgetQueueHandler, 500 );
						return;
					}
				} else if ( jQuery( 'div.jetpack-likes-widget-unloaded' ).length > 0 ) {
					// Grab any unloaded widgets for a batch request
					JetpackLikesBatchHandler();

					// Get the next unloaded widget
					wrapperID = jQuery( 'div.jetpack-likes-widget-unloaded' ).first()[0].id;
					if ( ! wrapperID ) {
						// Everything is currently loaded
						setTimeout( JetpackLikesWidgetQueueHandler, 500 );
						return;
					}
				}

				if ( 'undefined' === typeof wrapperID ) {
					setTimeout( JetpackLikesWidgetQueueHandler, 500 );
					return;
				}

				var $wrapper = jQuery( '#' + wrapperID );
				$wrapper.find( 'iframe' ).remove();

				if ( $wrapper.hasClass( 'slim-likes-widget' ) ) {
					$wrapper.find( '.post-likes-widget-placeholder' ).after( "<iframe class='post-likes-widget jetpack-likes-widget' name='" + $wrapper.data( 'name' ) + "' height='22px' width='68px' frameBorder='0' scrolling='no' src='" + $wrapper.data( 'src' ) + "'></iframe>" );
				} else {
					$wrapper.find( '.post-likes-widget-placeholder' ).after( "<iframe class='post-likes-widget jetpack-likes-widget' name='" + $wrapper.data( 'name' ) + "' height='55px' width='100%' frameBorder='0' src='" + $wrapper.data( 'src' ) + "'></iframe>" );
				}

				$wrapper.removeClass( 'jetpack-likes-widget-unloaded' ).addClass( 'jetpack-likes-widget-loading' );

				$wrapper.find( 'iframe' ).load( function( e ) {
					var $iframe = jQuery( e.target );
					$wrapper.removeClass( 'jetpack-likes-widget-loading' ).addClass( 'jetpack-likes-widget-loaded' );

					JetpackLikespostMessage( { event: 'loadLikeWidget', name: $iframe.attr( 'name' ), width: $iframe.width() }, window.frames[ 'likes-master' ] );

					if ( $wrapper.hasClass( 'slim-likes-widget' ) ) {
						$wrapper.find( 'iframe' ).Jetpack( 'resizeable' );
					}
				});
				setTimeout( JetpackLikesWidgetQueueHandler, 250 );
			}
			JetpackLikesWidgetQueueHandler();
		//]]>
		</script>
<script type='text/javascript' src='http://platform.twitter.com/widgets.js?ver=20111117'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var recaptcha_options = {"lang":"en"};
/* ]]> */
</script>
<script type='text/javascript' src='http://s0.wp.com/_static/??-eJx9jEEOwiAQRS8kTJsmRhbGoxhCaR1kBsJA1duLC7au/uK99+GVlUtcPVcIAqs/0Pn81kFO0BGyi2318mMuEXVNFZ/jRxPykEZPTeXYdmQB+0QhX9WiJ7j3E9hSoT9+TlLVFi0WkIctyPvYHt3oOi/GmNlM50v4AgRVQGc='></script>
<script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script>	<script type="text/javascript">
	var skimlinks_pub_id = "725X584219"
	var skimlinks_sitename = "mortoray.wordpress.com";
	</script>
	<script type="text/javascript" src="http://s.skimresources.com/js/725X1342.skimlinks.js"></script><script src="http://s.stats.wordpress.com/w.js?21" type="text/javascript"></script>
<script type="text/javascript">
st_go({'blog':'11292855','v':'wpcom','tz':'2','user_id':'0','post':'1822','subd':'mortoray'});
ex_go({'crypt':'UE5tW3cvZGQ9MH5ucz1rL21iUFg5b2JueV0/TS4tRlQ4X2hiNFRMRTMrQV1iWGEwTXdyJmFCUnMwMFYuaXRBRHIlTTNJJlJjRTVZWzgtVj9VUTJtflY5TFdjeWdTQl9WXS5OWnBMc1AxNDhsSmEmMUhDMGE0aFlnYkI/KywlUlJtU3JMRiZ3N3VbamtJMHg9Smd+dHVNS0RbRVU/Kz9mOVJOW3ZENGRRRk02QTBRdzJ6PVEwT0hWQmZUb2RmYSZUQXArfl1qL0RLJmRReXVZZitwXzRKZ0R4VTdtTTNnV3VNS0lSTTl+Z1d6RzRWemF3cThoVkRaSn42blM5SytxfDRnVzlISXlfaUFtaWpL'});
addLoadEvent(function(){linktracker_init('11292855',1822);});
	</script>
<noscript><img src="http://stats.wordpress.com/b.gif?v=noscript" style="height:0px;width:0px;overflow:hidden" alt="" /></noscript>
<script>
if ( 'object' === typeof wpcom_mobile_user_agent_info ) {

	wpcom_mobile_user_agent_info.init();
	var mobileStatsQueryString = "";
	
	if( false !== wpcom_mobile_user_agent_info.matchedPlatformName )
		mobileStatsQueryString += "&x_" + 'mobile_platforms' + '=' + wpcom_mobile_user_agent_info.matchedPlatformName;
	
	if( false !== wpcom_mobile_user_agent_info.matchedUserAgentName )
		mobileStatsQueryString += "&x_" + 'mobile_devices' + '=' + wpcom_mobile_user_agent_info.matchedUserAgentName;
	
	if( wpcom_mobile_user_agent_info.isIPad() )
		mobileStatsQueryString += "&x_" + 'ipad_views' + '=' + 'views';

	if( "" != mobileStatsQueryString ) {
		new Image().src = document.location.protocol + '//stats.wordpress.com/g.gif?v=wpcom-no-pv' + mobileStatsQueryString + '&baba=' + Math.random();
	}
	
}
</script></div><!-- end #page -->
</body>
</html>