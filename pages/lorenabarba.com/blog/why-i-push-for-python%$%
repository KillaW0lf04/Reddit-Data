<!DOCTYPE html>

<html lang="en-US">

<head>

	<meta charset="UTF-8">
	
	
	<title>  Why I push for Python :: Lorena A. Barba Group</title>
	
	
	<meta name="description" content="My colleagues are puzzled by my relentless push of Python as the language to teach programming to our undergraduates. They look at me funny, each time that the subject comes up and I can't help vehemently insisting Python!">
	
		
	<meta name="google-site-verification" content="8PPHDYZB2AN7YK0p6zl6oRt3jqpzw5Hn049efhqTVTM" />
	
	<meta name="author" content="Spruce Interactive">
	<meta name="Copyright" content="&copy;2014 Lorena A. Barba Group">
   
	<meta name="viewport" content="initial-scale = 1.0,maximum-scale = 1.0,width=device-width" />
	
	<!-- Favicon -->
	<link rel="shortcut icon" href="/favicon.png">
    
    <!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    
    <!-- Typekit -->
<script type="text/javascript" src="//use.typekit.net/uvt5wkw.js"></script>
<script type="text/javascript">try{Typekit.load();}catch(e){}</script>
	
	<!-- Load CSS reset and default theme file -->
	<link rel="stylesheet" type="text/css" href="http://lorenabarba.com/wp-content/themes/spruce-theme/style.css">
	

	<link href="http://lorenabarba.com/wp-content/themes/spruce-theme/webfonts/ss-social.css" rel="stylesheet" />	
	<link href="http://lorenabarba.com/wp-content/themes/spruce-theme/webfonts/ss-symbolicons-block.css" rel="stylesheet" />
	<link href="http://lorenabarba.com/wp-content/themes/spruce-theme/webfonts/ss-standard.css" rel="stylesheet" />
	
	<!-- Load LESS file with the main site styles -->
	<link rel="stylesheet/less" type="text/css" href="http://lorenabarba.com/wp-content/themes/spruce-theme/style.less">
	<script src="http://lorenabarba.com/wp-content/themes/spruce-theme/js/less.min.js" type="text/javascript"></script> 
	
	<link rel="pingback" href="http://lorenabarba.com/xmlrpc.php" />
	

	
	<link rel="alternate" type="application/rss+xml" title="Lorena A. Barba Group &raquo; Feed" href="http://lorenabarba.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Lorena A. Barba Group &raquo; Comments Feed" href="http://lorenabarba.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Lorena A. Barba Group &raquo; Why I push for Python Comments Feed" href="http://lorenabarba.com/blog/why-i-push-for-python/feed/" />
<script type='text/javascript' src='http://lorenabarba.com/wp-includes/js/comment-reply.min.js?ver=3.5.2'></script>
<script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=3.5.2'></script>
<script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.3/jquery-ui.js?ver=3.5.2'></script>
<link rel='prev' title='Reproducible Research, Uncertainty Quantification and Verification &amp; Validation' href='http://lorenabarba.com/figshare/reproducible-research-uncertainty-quantification-and-verification-validation/' />
<link rel='next' title='Two group members graduated!' href='http://lorenabarba.com/gallery/two-group-members-graduated/' />
<link rel='canonical' href='http://lorenabarba.com/blog/why-i-push-for-python/' />
<link rel='shortlink' href='http://lorenabarba.com/?p=1358' />
</head>

<body class="single single-post postid-1358 single-format-standard">
	
	<div id="page-wrap">
	
		<header>
   			
            <h1 id="logo" onClick="location.href='/'"><span>Lorena A.</span> Barba group</h1>

        	<nav>
            	<ul>
                	<li><a title="Homepage Grid" class="ss-icon" href="http://lorenabarba.com">grid</a></li>
                    <li><a title="RSS" class="ss-icon" href="http://lorenabarba.com/feed/rss/">rss</a></li>
                    <li><a title="Twitter" class="ss-icon ss-social" href="http://twitter.com/#!/lorenaabarba" target="_blank">twitter</a></li>
					<li class="search-block">
					<form action="http://lorenabarba.com" id="searchform" method="get">
						<div>
							<input type="search" id="s" name="s" value="" />
							<button class="ss-icon ss-symbolicons-block">Search</button>
						
						</div>
					</form>
					</li>
            	</ul>
                
            </nav>
			
		</header>        

	
				<article class="post-1358 post type-post status-publish format-standard hentry category-blog tag-engineering-education tag-matlab tag-python" id="post-1358">
			
			<h1>Why I push for Python</h1>
			
				<img width="600" height="700" src="http://lorenabarba.com/wp-content/uploads/2014/05/keep-calm-and-code-python_BW.png" class="attachment-large wp-post-image" alt="keep-calm-and-code-python_BW" />                <time pubdate class="updated"> Posted on 05.12.2014</time>
				
				<p>My colleagues are puzzled by my relentless push of Python as the language to teach programming to our undergraduates. They look at me funny, each time that the subject comes up and I can't help vehemently insisting "Python!"</p>
<p>It's natural to be skeptical of someone championing a programming language; we've all seen the language wars rage foolishly in other contexts—surely it's just a matter of preference? And many of my colleagues prefer Matlab, although some others insist that our undergraduates need to learn C. Does it matter?</p>
<p>Let me articulate my reasons to continue to advocate for Python. First, let's agree on the context of this discussion: I'm talking about a programming language to teach undergraduate students of engineering the computational skills that will make them more successful, both as students and as future STEM professionals.</p>
<p>Most entering freshmen have no programming experience whatsoever. Unfortunately, computer science is all but absent from the school curriculum: in 2011, only 5% of high-schools in the US were certified to teach the computer science AP course and only 0.6% of all AP tests taken were in CS [1].</p>
<p>I'm talking about teaching complete novices their first baby steps of programming, and rather swiftly bringing them to a level of skill where they can use computing in their other courses: to analyze data for those lab reports, to learn linear algebra, to solve problems in particle mechanics, problems involving differential equations, maybe even to write a program to control a robot. And by the way, these students are busy and have a social life and cannot abide courses that seem like a waste of time. Let's also make it fun, then, can we?</p>
<h2>A programming language for beginners</h2>
<p>What is a programming language? All computers really understand is machine language: instructions operating on binary bits. Programming languages are made for humans. Their goal is to allow humans to express what they want the computer to execute for them, in a way that other humans can understand.</p>
<p>Compare these two programs … which is more human-readable?</p>
<p>First, in C++:</p>
<p style="padding-left: 30px;"><code>#include &lt;iostream.h&gt;<br />
void main()<br />
{<br />
cout &lt;&lt; "Hello world" &lt;&lt; endl;<br />
}<br />
</code></p>
<p>Now, in Python (v.2.7):</p>
<p style="padding-left: 30px;"><code>print "Hello world"</code></p>
<p>This simplest of code examples is used in the book <em>"How to think like a computer scientist"</em> [2] to explain why Python is good for teaching beginners. In the C++ version, there are too many elements (<code>#include, void, main</code>) that will be confusing for students. Explaining them takes time, can be intimidating for beginners, and serves no purpose in helping students get computing. Jeff Elkner explains in the preface to <em>"How to think…"</em> that the C++ version of the book had 13 paragraphs explaining the "Hello world" program, while the Python version had only two. The 11-paragraph difference dealt not with programming concepts, but with details of C++ syntax. Beginner programmers will just get frustrated by obscure syntax.</p>
<p>Quoting Elkner again…</p>
<blockquote><p>Using Python has improved the effectiveness of our computer science program for all students … More students leave the course with the ability to create meaningful programs and with the positive attitude toward the experience of programming that this engenders.</p></blockquote>
<h2>From anecdote to data</h2>
<p>Analyzing 30 programs written in Java and 30 written in Python by novice programmers (in Finland, aged 16–19), Mannila et al. (2006) studied the errors found in them to identify those that could be attributed to the language. The students in both groups had the same teacher and studied the same contents in the same environment; only the language changed.</p>
<p>The study categorized errors as relating to understanding (logic) or arising from features of the language (syntax). Four criteria were also applied to the programs as a whole: execution, satisfying specs, error handling, and structure.</p>
<p>Of all the syntax errors found, only two appeared in Python programs while 19 were found in the Java programs (missing brackets or semicolons, uninitialized variables, etc.). And the logic errors were also significantly fewer in the Python programs, compared to Java (17 to 40). Also, more Python programs ran correctly and satisfied the specifications, and more included error checking/handling, compared to the Java programs.</p>
<p>A second part of the Mannila et al. study looked at how the students who learned with Python transitioned to a second language in a later course. Critics of Python as a first language often claim that being too simple, it makes students run into problems when having to use a more advanced language later on. But after both analyzing the programs and interviewing the students, Mannilla et al. concluded that students experienced no problems in the transition. (In particular, they had no problem adapting to static typing after having learned to code in Python.)</p>
<p>In conclusion, this study showed that students make fewer syntax and logic errors when learning in Python (compared to Java), and there are no pitfalls when transitioning to a second language. Python makes it easier to focus on giving students a solid ground on computational thinking.</p>
<h2>Bonus reasons for Python</h2>
<p>Watch the first 5 minutes of this hands-on introduction to Python for beginners, by Jessica McKellar (Director of the Python Software Foundation), to hear several reasons for learning Python:</p>
<p><iframe width="500" height="375" src="http://www.youtube.com/embed/rkx5_MRAV3A?feature=oembed" frameborder="0" allowfullscreen></iframe></p>
<p>Quoting Jessica …</p>
<ol>
<li>Python is a versatile language: you can analyze data, build websites (*), maintain servers, make art or music.</li>
<li>Employers love Python: people will want to hire you.</li>
<li>Python is a great teaching language … a lot of educational institutions are switching to Python, e.g., MIT</li>
<li>It reads very much like English (it has low syntactic overhead)</li>
<li>It is very easy to get useful work done quickly in Python</li>
<li>You can do data analysis and graphing with Matplotlib (even 3D animations)</li>
<li>You can write games on Python (using PyGame)</li>
</ol>
<p>(*) Websites are build on a Python framework called Django. Examples: Instagram, Firefox, Pinterest, even YouTube!</p>
<blockquote><p>Continue watching the video from about 8:20 to learn a bit of Python right now! You can type along with Jessica and try the code right on your browser by going to <a href="https://www.pythonanywhere.com/try-ipython/" target="_blank">PythonAnywhere.com</a></p></blockquote>
<h2>Why is it so hard to learn to program?</h2>
<p>The well-known computer-science educator <a href="http://www.cc.gatech.edu/home/guzdial/" target="_blank">Mark Guzdial</a> addressed just this question (Guzdial, 2010). There are many reports of high failure rates in introductory programming courses (worldwide). Why do students find it so hard?</p>
<p>Studying how people use a natural language to describe a task to another human gives clues. In such descriptions, people don’t define iterations, they instead put into words set operations; they are not explicit about loops terminating; people use constraints, event-driven tasks and imperative programming, but they never talk about objects. And when these natural-language instructions are given to other participants, they have no problem following them. Processing a set of data until it's finished is natural, but incrementing an index is not.</p>
<p>How is this related to Python? It so happens that the language's core looping idioms can often replace index manipulation, making it more like plain English. The following examples were given by Raymond Hettinger (core Python developer) in <a href="http://youtu.be/OSGv2VnC0go" target="_blank">a keynote in 2013</a>. To get the square of the numbers from 0 to 5, you might write Python code like this:</p>
<p style="padding-left: 30px;"><code>for i in [0, 1, 2, 3, 4, 5]:</code></p>
<p style="padding-left: 60px;"><code>print i**2</code></p>
<p>But the convenient function <code>range()</code> makes it easy to iterate over longer lists.</p>
<p style="padding-left: 30px;"><code>for i in range(6):</code></p>
<p style="padding-left: 60px;"><code>print i**2</code></p>
<p>This has the disadvantage of creating the list in memory (not good if the list is very big). So in Python 2.7, a better way is with the <code>xrange()</code> function (which in Python 3 dropped the x):</p>
<p style="padding-left: 30px;"><code>for i in xrange(6):</code></p>
<p style="padding-left: 60px;"><code>print i**2</code></p>
<p>Now, suppose you want to print the colors in a list like this:</p>
<p style="padding-left: 30px;"><code>colors = ['red', 'green', 'blue', 'yellow']</code></p>
<p>You might write this to loop over all the colors:</p>
<p style="padding-left: 30px;"><code>for i in range(len(colors)):</code></p>
<p style="padding-left: 60px;"><code>print colors[i]</code></p>
<p>But Python let's you do this instead, which looks more natural, and like Raymond says, more beautiful:</p>
<p style="padding-left: 30px;"><code>for color in colors:</code></p>
<p style="padding-left: 60px;"><code>print color</code></p>
<p>In summary, Python is a lot more like English than other programming languages, and reduces the cognitive load in learning to think computationally.</p>
<h2>What about Matlab?</h2>
<p>I used Matlab for years and I understand why many of my colleagues use it heavily. For many of them, it's awfully hard to imagine their workflow without Matlab. But there are reasons to at least think about switching, and I will let others speak for me here.</p>
<p>Luis Pedro Coelho is a computational biologist at EMBL. In <a href="http://metarabbit.wordpress.com/2013/10/18/why-python-is-better-than-matlab-for-scientific-software/" target="_blank">"Why Python is Better than Matlab for Scientific Software,"</a> (Oct.'13) he offers these reasons:</p>
<ul>
<li>Python has caught up with Matlab and is in the process of overtaking it.</li>
<li>Python is a real programming language</li>
<li>Python can easily interface with other languages</li>
<li>With Python, you can have a full open-source stack</li>
<li>Matlab Licensing issues are a pain. And expensive.</li>
</ul>
<p>&nbsp;</p>
<p>In "<a href="http://cyrille.rossant.net/why-using-python-for-scientific-computing/" target="_blank">Why use Python for scientific computing"</a> (July'13), Cyrille Rossant, a neuroscience researcher at University College London, offers similar reasons:</p>
<ul>
<li>Python is free and open source, whereas Matlab is a closed-source commercial product.</li>
<li>The Python language is just far better that Matlab’s awkward language.</li>
<li>Python integrates better with other languages (e.g. C/C++).</li>
<li>Python includes natively an impressive number of general-purpose or more specialized libraries, and yet more external libraries are being developed by Python enthusiasts.</li>
<li>And, of course, nearly anything that is possible in Matlab is possible in Python, whereas the converse is not true.</li>
</ul>
<p>&nbsp;</p>
<p>Almar Klein, a developer and scientist in the Netherlands, has more concrete objections to Matlab in the long <a href="http://www.pyzo.org/python_vs_matlab.html" target="_blank">"Python vs. Matlab"</a> essay:</p>
<p>"… the most fundamental problem with Matlab is its commercial nature</p>
<ul>
<li>Matlab is expensive.</li>
<li>The algorithms are proprietary</li>
<li>It makes portability more difficult.</li>
</ul>
<p>And cites these other issues:</p>
<ul>
<li>Matlab has bad string manipulation</li>
<li>Indexing: Python indexing goes as it does in C … starting from 0 + Python indexing is done using brackets, so you can see the difference between an indexing operation and a function call.</li>
</ul>
<p>&nbsp;</p>
<p>A trio of additional issues brought up by Hoyt Koepke of University of Washington can be extracted from his <a href="http://www.stat.washington.edu/%7Ehoytak/blog/whypython.html " target="_blank">"10 Reasons Python Rocks for Research,"</a> as follows:</p>
<ul>
<li>becoming better at MATLAB leads to skill at quick-and-dirty scripting, but becoming better at Python leads to genuine programming skill.</li>
<li>when calling functions, Python allows named arguments – this universally promotes clarity and reduces stupid bookkeeping bugs, particularly with functions requiring more than one or two arguments;</li>
<li>with MATLAB, globally available functions are put in separate files, discouraging the use of smaller functions and – in practice – often promotes cut-and-paste programming, the bane of debugging.</li>
</ul>
<h4>And there's more, if you still need more convincing:</h4>
<ul>
<li><a href="http://stevetjoa.com/305/" target="_blank">I used Matlab. Now I use Python</a>, Steve Tjoa</li>
<li><a href="http://abandonmatlab.wordpress.com" target="_blank">Abandon MATLAB blog</a></li>
<li><a href="http://phillipmfeldman.org/Python/Advantages_of_Python_Over_Matlab.html" target="_blank">Eight Advantages of Python Over Matlab</a>, Dr. Phillip M. Feldman</li>
</ul>
<p>&nbsp;</p>
<h3>References</h3>
<ol>
<li>"A National Talent Strategy. Ideas for securing US competitiveness and economic growth," Microsoft white paper, p. 13 (2012) // <a href="https://www.microsoft.com/en-us/news/download/presskits/citizenship/msnts.pdf" target="_blank">PDF</a> // See also: <a href="http://www.exploringcs.org/resources/cs-statistics" target="_blank">CS Education Statistics</a>,</li>
<li>"How to think like a computer scientist. Learning with Python," Allen Downey, Jeff Elkner and Chris Meyers. Green Tea press, 2002 // <a href="http://www.greenteapress.com/thinkpython/thinkCSpy/index.html" target="_blank">Free book</a></li>
<li><!--?xml version="1.0" encoding="UTF-8" standalone="no"?--> Mannilla, L. et al., "What about a simple language? Analyzing the difficulties in learning to program," Computer Science Education, vol. 16(3): 211–227 (2006)</li>
<li><!--?xml version="1.0" encoding="UTF-8" standalone="no"?--> Guzdial, M. (2010). Why is it so hard to learn to program? In Andy Oram and Greg Wilson, editors, Making Software: What Really Works and Why We Believe It, Chapter 7, pp. 111–124. O’Reilly Media, 2010.</li>
</ol>
			
					
				<div id="comments">
<div id="disqus_thread">
                    <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-176">
        <div id="dsq-comment-header-176" class="dsq-comment-header">
            <cite id="dsq-cite-176">
                <span id="dsq-author-user-176">Eric Wilson</span>
            </cite>
        </div>
        <div id="dsq-comment-body-176" class="dsq-comment-body">
            <div id="dsq-comment-message-176" class="dsq-comment-message"><p>Jessica's second point "Employers love Python: people will want to hire you." seems a stretch to me. I'm sure there are more Python jobs than some languages, but not nearly the market as Java &amp; C#.</p>
<p>This is from a Java developer that would love the opportunity to do Python for money.</p>
</div>
        </div>

    <ul class='children'>
    <li class="comment odd alt depth-2" id="dsq-comment-177">
        <div id="dsq-comment-header-177" class="dsq-comment-header">
            <cite id="dsq-cite-177">
http://lorenabarba.com/                <span id="dsq-author-user-177">Lorena A. Barba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-177" class="dsq-comment-body">
            <div id="dsq-comment-message-177" class="dsq-comment-message"><p>Thanks for leaving a comment!</p>
<p>In the tutorial, she's talking to complete beginners who are not likely to become full-time developers, so I think the point here applies to professionals of other fields (or artists) having programming skills, in addition to their field-centric skills.</p>
<p>In my world, I extrapolate the statement to engineering students, where Python is probably more marketable with employers than Matlab. Python is used in industry, whereas Matlab is mostly used in universities.</p>
</div>
        </div>

    <ul class='children'>
    <li class="comment even depth-3" id="dsq-comment-178">
        <div id="dsq-comment-header-178" class="dsq-comment-header">
            <cite id="dsq-cite-178">
                <span id="dsq-author-user-178">Eric Wilson</span>
            </cite>
        </div>
        <div id="dsq-comment-body-178" class="dsq-comment-body">
            <div id="dsq-comment-message-178" class="dsq-comment-message"><p>OK, that makes sense. All the best in your fight against C &amp; Matlab</p>
</div>
        </div>

    </li>
    <li class="comment odd alt depth-3" id="dsq-comment-191">
        <div id="dsq-comment-header-191" class="dsq-comment-header">
            <cite id="dsq-cite-191">
http://biosport.ucdavis.edu/lab-members/jason-moore                <span id="dsq-author-user-191">Jason K. Moore</span>
            </cite>
        </div>
        <div id="dsq-comment-body-191" class="dsq-comment-body">
            <div id="dsq-comment-message-191" class="dsq-comment-message"><p>Coming from an engineering prof, I would have expected you to say that Matlab is mostly used in industry, yet you said Python is. Do you have something that backs up that claim with respect to engineering industry?</p>
</div>
        </div>

    <ul class='children'>
    <li class="comment even depth-4" id="dsq-comment-193">
        <div id="dsq-comment-header-193" class="dsq-comment-header">
            <cite id="dsq-cite-193">
http://lorenabarba.com/                <span id="dsq-author-user-193">Lorena A. Barba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-193" class="dsq-comment-body">
            <div id="dsq-comment-message-193" class="dsq-comment-message"><p>I don't have data, sorry. What I said (and it was hearsay) was not specific to _engineering_ industry, but industry in general—and I was thinking of the popularity metrics of programming languages, where Python has been on the rise.<br />
As far as I know, Matlab is used a lot in a subset of industry (e.g., automotive) where the killer app is Simulink.</p>
</div>
        </div>

    </li>
</ul>
</li>
</ul>
</li>
    <li class="comment odd alt depth-2" id="dsq-comment-182">
        <div id="dsq-comment-header-182" class="dsq-comment-header">
            <cite id="dsq-cite-182">
                <span id="dsq-author-user-182">dbg</span>
            </cite>
        </div>
        <div id="dsq-comment-body-182" class="dsq-comment-body">
            <div id="dsq-comment-message-182" class="dsq-comment-message"><p>Java and C# are prominently used by large corporate enterprise IT organizations for developing internal business software. There's a pretty steady job market writing that kind of software but its hardly comprehensive. There are a large number of domains where Python is a more common/preferred language. Scientific computing, data analysis and statistics, and server-side web development are the first three that come to mind. That's not to say you can't write good software in those domains with Java or C#. Just that Python is more common. </p>
<p>Even in the context of enterprise business software, Python is still incredibly useful and desirable to employers. Its one of the most common scripting languages used as "glue code" for managing infrastructure. Most of the enterprise software I've worked on is a mixed system actually. The main application (or applications) might be written in Java, and a dev in this domain certainly should be very comfortable working in Java, but its really important to be familiar with a lot of different technologies.</p>
</div>
        </div>

    <ul class='children'>
    <li class="comment even depth-3" id="dsq-comment-183">
        <div id="dsq-comment-header-183" class="dsq-comment-header">
            <cite id="dsq-cite-183">
                <span id="dsq-author-user-183">Eric Wilson</span>
            </cite>
        </div>
        <div id="dsq-comment-body-183" class="dsq-comment-body">
            <div id="dsq-comment-message-183" class="dsq-comment-message"><p>While it is true that Java is the only choice in the large corporate world, I have worked at several small companies that use Java for building web applications. In fact, my experience is that for web development, there are way more Java jobs than Python in web development. (About 10x for an Indeed.com search in my area, and that may be understated because many of the Python listings are jobs where Ruby/Python/Perl are thrown in there for good measure.)</p>
<p>Scientific computing is certainly a strength of Python, but those jobs are extremely rare. Despite having a PhD in math, I can't find any leads on a scientific computing job.</p>
<p>As for glue code, yes, of course. I wasn't suggesting that one can't use Python effectively in many jobs, I was speaking to the idea of people wanting to hire you because you know Python. Maybe I'm talking to the wrong recruiters, but I can't find anyone that cares that I can write Python pretty well.</p>
</div>
        </div>

    <ul class='children'>
    <li class="comment odd alt depth-4" id="dsq-comment-206">
        <div id="dsq-comment-header-206" class="dsq-comment-header">
            <cite id="dsq-cite-206">
                <span id="dsq-author-user-206">Wolf</span>
            </cite>
        </div>
        <div id="dsq-comment-body-206" class="dsq-comment-body">
            <div id="dsq-comment-message-206" class="dsq-comment-message"><p>I suspect there are more Java and C# jobs as well, but I think most of these jobs are of the somewhat boring, enterprise kinds of software development.</p>
<p>I know a friend of mine uses Python in a hospital to automatize many parts of the workflows. Jessica points out some nice examples of Python used in practice as well.</p>
<p>So for job security, sure: learn Java and C#. But for the more interesting jobs, it's advisable to learn other languages which seem to be more appropriate for certain niches.</p>
</div>
        </div>

    <ul class='children'>
    <li class="comment even depth-5" id="dsq-comment-207">
        <div id="dsq-comment-header-207" class="dsq-comment-header">
            <cite id="dsq-cite-207">
                <span id="dsq-author-user-207">Eric Wilson</span>
            </cite>
        </div>
        <div id="dsq-comment-body-207" class="dsq-comment-body">
            <div id="dsq-comment-message-207" class="dsq-comment-message"><p>"But for the more interesting jobs, it's advisable to learn other languages which seem to be more appropriate for certain niches."</p>
<p>That's how I used to think. But I have an interesting Java job now, and I can't find _any_ Python jobs, interesting or otherwise.</p>
<p>Of course it's advisable to learn other languages in any case. I am skeptical of any experienced Java dev that doesn't know and use any other language. But in my experience that is unrelated to "Employers love Python: people will want to hire you."</p>
</div>
        </div>

    </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
    <li class="comment odd alt depth-2" id="dsq-comment-219">
        <div id="dsq-comment-header-219" class="dsq-comment-header">
            <cite id="dsq-cite-219">
http://alfredessa.com                <span id="dsq-author-user-219">Alfred Essa</span>
            </cite>
        </div>
        <div id="dsq-comment-body-219" class="dsq-comment-body">
            <div id="dsq-comment-message-219" class="dsq-comment-message"><p>I lead a team of data scientists, researchers, and developers. Our primary languages are Python and R. Python's ecosystem has amazing momentum with innovations such as iPython, iPython notebook, and Pandas. My team is also responsible for product development in learning analytics. For front-end development we gravitate towards frameworks such as Ember.js and D3 (also Java Script) for data visualizations. With the spike in demand for Analytics I believe Python is emerging as the Queen of programming languages in Data Science.</p>
</div>
        </div>

    </li>
</ul>
</li>
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-179">
        <div id="dsq-comment-header-179" class="dsq-comment-header">
            <cite id="dsq-cite-179">
                <span id="dsq-author-user-179">indranil sinharoy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-179" class="dsq-comment-body">
            <div id="dsq-comment-message-179" class="dsq-comment-message"><p>Nice post! I wasn't aware of the argument that one of the reasons that make Python easier to learn is because its structure is more like a written/spoken language for communication, specifically English. In my own case, I had stayed away from Python as I felt it to be too verbose and felt that I would have to type a lot to do simple things. However, that has changed now, and I have been using Python for the last 2 years. I have also realized the beauty in the language, which is really very elegant and expressive. Just like English (or any other language for written/spoken communication), code written in Python can evoke emotions and feelings. I had never experienced such a thing in C, C++, Matlab or LabVIEW (of course among them there are some that are easier than other). I have also experienced first hand (what many others have already talked about) that ideas translate into code more easily in Python. </p>
<p>On a different note, it would be very interesting to know about the basic/ general workflow people in science have adopted around the Python ecosystem. I am not talking about the use of specialized packages. Like how people mix both IPython notebook and Sphinx for literate programming. How they use different Python tools from the start of a project or a research idea, to publication and sharing, etc.</p>
</div>
        </div>

    <ul class='children'>
    <li class="comment odd alt depth-2" id="dsq-comment-187">
        <div id="dsq-comment-header-187" class="dsq-comment-header">
            <cite id="dsq-cite-187">
http://lorenabarba.com/                <span id="dsq-author-user-187">Lorena A. Barba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-187" class="dsq-comment-body">
            <div id="dsq-comment-message-187" class="dsq-comment-message"><p>Python can evoke emotions and feelings? Never thought of that! </p>
<p>Made me Google for poetry and Python, and I found that there are a few out there; like this:<br />
<a href="http://lifeandcode.tumblr.com/post/20836414092/romantic-love-poem-in-python" rel="nofollow">http://lifeandcode.tumblr.com/post/20836414092/romantic-love-poem-in-python</a><br />
 <img src='http://lorenabarba.com/wp-includes/images/smilies/icon_smile.gif' alt=':-)' class='wp-smiley' /> </p>
<p>For a nice talk describing an end-to-end workflow (raw data, analysis, plotting, publishing), check out this presentation at SciPy2013:<br />
<a href="http://youtu.be/Y-XFNg0QS14" rel="nofollow">http://youtu.be/Y-XFNg0QS14</a></p>
<p>Thanks for leaving a comment.</p>
</div>
        </div>

    </li>
</ul>
</li>
    <li class="comment even thread-even depth-1" id="dsq-comment-180">
        <div id="dsq-comment-header-180" class="dsq-comment-header">
            <cite id="dsq-cite-180">
                <span id="dsq-author-user-180">Misguided Hindus</span>
            </cite>
        </div>
        <div id="dsq-comment-body-180" class="dsq-comment-body">
            <div id="dsq-comment-message-180" class="dsq-comment-message"><p>PYTHON!</p>
</div>
        </div>

    </li>
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-181">
        <div id="dsq-comment-header-181" class="dsq-comment-header">
            <cite id="dsq-cite-181">
                <span id="dsq-author-user-181">Titus Brown</span>
            </cite>
        </div>
        <div id="dsq-comment-body-181" class="dsq-comment-body">
            <div id="dsq-comment-message-181" class="dsq-comment-message"><p>Lorena, you might also be interested in this paper: <a href="http://dl.acm.org/citation.cfm?id=1734437" rel="nofollow">http://dl.acm.org/citation.cfm?id=1734437</a>.  In summary, my colleagues Bill Punch and Rich Enbody showed that there was no difference in later CS learning if Python was taught before C++.</p>
</div>
        </div>

    <ul class='children'>
    <li class="comment even depth-2" id="dsq-comment-184">
        <div id="dsq-comment-header-184" class="dsq-comment-header">
            <cite id="dsq-cite-184">
                <span id="dsq-author-user-184">Spaceship goes fast</span>
            </cite>
        </div>
        <div id="dsq-comment-body-184" class="dsq-comment-body">
            <div id="dsq-comment-message-184" class="dsq-comment-message"><p>Hey! I took CSE 231 at MSU with Punch. Now I code in python all day every day. Imagine that.</p>
</div>
        </div>

    </li>
    <li class="comment odd alt depth-2" id="dsq-comment-186">
        <div id="dsq-comment-header-186" class="dsq-comment-header">
            <cite id="dsq-cite-186">
http://lorenabarba.com/                <span id="dsq-author-user-186">Lorena A. Barba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-186" class="dsq-comment-body">
            <div id="dsq-comment-message-186" class="dsq-comment-message"><p>Thanks Titus! ... both for leaving a comment and for the link. I had not seen this paper. Its starting point is also an important one: "one semester of C++ does not provide students with [a useful] problem-solving tool." (I suppose the same thing can be said of bare C.) Yet most non-majors have only one course in programming. This is precisely what concerns me: how do you develop computing skills in non-CS majors so they can be more successful in their studies and careers? </p>
<p>My personal opinion is that a better way than the one-semester freshman "intro to programming" course is to embed computing throughout the curriculum, across several courses—engineering math, linear algebra, differential equations, mechanics, heat transfer, fluid mechanics, dynamics and vibration ... all these courses could embed computing as part of their problem-solving approaches.</p>
<p>The paper you mentioned could be particularly useful for my ongoing conversation with colleagues of the robotics branch of MechEng. They tell me that "all our students need C" because they will program microprocessors. I say that learning basic computing skills with Python will prepare them well for algorithmic problem-solving skills, and they'll be ready to learn a second language (and it's a subset of students, not the whole cohort, that go into robotics). But so far I'm not winning that argument.</p>
</div>
        </div>

    <ul class='children'>
    <li class="comment even depth-3" id="dsq-comment-200">
        <div id="dsq-comment-header-200" class="dsq-comment-header">
            <cite id="dsq-cite-200">
                <span id="dsq-author-user-200">RestfullBull</span>
            </cite>
        </div>
        <div id="dsq-comment-body-200" class="dsq-comment-body">
            <div id="dsq-comment-message-200" class="dsq-comment-message"><p>There's <a href="http://pyrorobotics.com/" rel="nofollow">http://pyrorobotics.com/</a>  which is python for robotics. Might help you in that argument.</p>
<p>And there's micropython , python on a microcontroller. Not a replacement for c , but can work in some robotics projects, according to author. </p>
</div>
        </div>

    </li>
</ul>
</li>
</ul>
</li>
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-185">
        <div id="dsq-comment-header-185" class="dsq-comment-header">
            <cite id="dsq-cite-185">
                <span id="dsq-author-user-185">Fangohr</span>
            </cite>
        </div>
        <div id="dsq-comment-body-185" class="dsq-comment-body">
            <div id="dsq-comment-message-185" class="dsq-comment-message"><p>Thanks Lorena for a very interesting post, full of insight, pragmatic and effective approaches to teaching programming to students who are not computer scientists. </p>
<p>I'd like to mention (my own) little report on this from 2004 which looks specifically at C, Matlab and Python as (first) programming languages introduced to engineers at university, which is based on my previous efforts to teach those three languages to engineering students. At the time - that's 10 years ago - the Python eco-system was not as well developed, but the key points for Python were the same: we need to pick a language to teach principles of programming, and we might as well choose one that makes this as easy as possible. By teaching the principles, we enable the students to learn additional languages as and when required during their lifelong learning in their various career paths. Python can do the job of introducing these principles. It so happens that Python in practice goes beyond that by often providing already all the computational/processing/analysis/visualisation power and tools that is required for many tasks in a science and engineering career, and this is increasingly more so as scientific libraries improve and tools like the IPython Notebook become available.</p>
<p>For completeness, the journal URL for "A Comparison of C, MATLAB, and Python as Teaching Languages in Engineering", Lecture Notes in Computer Science Volume 3039, 2004, pp 1210-1217, is <a href="http://link.springer.com/chapter/10.1007%2F978-3-540-25944-2_157" rel="nofollow">http://link.springer.com/chapter/10.1007%2F978-3-540-25944-2_157</a> and a free post-print is available from <a href="http://eprints.soton.ac.uk/22811/" rel="nofollow">http://eprints.soton.ac.uk/22811/</a></p>
</div>
        </div>

    <ul class='children'>
    <li class="comment even depth-2" id="dsq-comment-194">
        <div id="dsq-comment-header-194" class="dsq-comment-header">
            <cite id="dsq-cite-194">
http://lorenabarba.com/                <span id="dsq-author-user-194">Lorena A. Barba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-194" class="dsq-comment-body">
            <div id="dsq-comment-message-194" class="dsq-comment-message"><p>Hans, thanks for your comment and for the link. I just read your paper from 2004. It aligns so well with the other materials that I've been reading! As discussed in the paper by Mannilla et al. (2006), beginner programmers make a lot of (frustrating) mistakes with C, like you also observed —incorrect scope for loops or other blocks, syntax errors including braces and semicolons, type errors—. I would have liked to see some metrics in your paper (how many students, did you count errors in a given assignment, etc.)</p>
<p>You also put your finger on a considerable disadvantage of the Matlab programming style: only one function per file. I remember when I was using Matlab heavily several years ago, and I was doing a *lot* of copy-and-paste. This gets horrendous as your code base grows.</p>
<p>To think that you wrote this 10 years ago ... at a time when the Python ecosystem was wimpy in comparison. Now we have greatly improved Matplotlib and other stuff like pandas and so on.</p>
</div>
        </div>

    </li>
</ul>
</li>
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-188">
        <div id="dsq-comment-header-188" class="dsq-comment-header">
            <cite id="dsq-cite-188">
                <span id="dsq-author-user-188">Snakus Oilus</span>
            </cite>
        </div>
        <div id="dsq-comment-body-188" class="dsq-comment-body">
            <div id="dsq-comment-message-188" class="dsq-comment-message"><p>Doesn't the fact that indexing starts with 0 instead of 1 in Python negate your core argument that "programming languages are made for humans, not computers"? In the real world, do you seriously count things starting from 0? MATLAB's indexing is far more amenable to the way humans think.</p>
<p>MATLAB 1 - Python 0.</p>
</div>
        </div>

    <ul class='children'>
    <li class="comment even depth-2" id="dsq-comment-189">
        <div id="dsq-comment-header-189" class="dsq-comment-header">
            <cite id="dsq-cite-189">
http://lorenabarba.com/                <span id="dsq-author-user-189">Lorena A. Barba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-189" class="dsq-comment-body">
            <div id="dsq-comment-message-189" class="dsq-comment-message"><p>Yes, the number system starts at zero. In mathematics, all the equations and formulas that involve indexing start from zero. Polynomials, Taylor series, Fourier series, linear bases, iterative approximation methods, and many other mathematical expressions and methods all have a zeroth-order term.<br />
Mathematics starts at zero, and the real world too. You may think that you count from one, but in fact zero is always in your counting system: it means there's nothing in your counting set.</p>
</div>
        </div>

    <ul class='children'>
    <li class="comment odd alt depth-3" id="dsq-comment-190">
        <div id="dsq-comment-header-190" class="dsq-comment-header">
            <cite id="dsq-cite-190">
http://biosport.ucdavis.edu/lab-members/jason-moore                <span id="dsq-author-user-190">Jason K. Moore</span>
            </cite>
        </div>
        <div id="dsq-comment-body-190" class="dsq-comment-body">
            <div id="dsq-comment-message-190" class="dsq-comment-message"><p>It doesn't matter which index you start with, it only really matters how you design your language for slicing and such. Ondrej Certik has a nice explanation of that here: <a href="http://www.fortran90.org/src/faq.html#what-is-the-most-natural-starting-index-for-numbering" rel="nofollow">http://www.fortran90.org/src/faq.html#what-is-the-most-natural-starting-index-for-numbering</a></p>
</div>
        </div>

    <ul class='children'>
    <li class="comment even depth-4" id="dsq-comment-192">
        <div id="dsq-comment-header-192" class="dsq-comment-header">
            <cite id="dsq-cite-192">
http://lorenabarba.com/                <span id="dsq-author-user-192">Lorena A. Barba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-192" class="dsq-comment-body">
            <div id="dsq-comment-message-192" class="dsq-comment-message"><p>The original commenter, Snakus Oilus, was doubtful that numbering from 0 is more natural, and alluded to counting. Because of that allusion, in my reply I referred to how it's natural in mathematics to start with zero. </p>
<p>But you bring us back to the more relevant issue: what matters for computer programming. In this case, E. W. Dijkstra explains why numbering should start at zero in this brief note posted on his website:<br />
<a href="http://www.cs.utexas.edu/~EWD/transcriptions/EWD08xx/EWD831.html" rel="nofollow">http://www.cs.utexas.edu/~EWD/transcriptions/EWD08xx/EWD831.html</a></p>
<p>I couldn't possibly improve on that.</p>
</div>
        </div>

    </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-195">
        <div id="dsq-comment-header-195" class="dsq-comment-header">
            <cite id="dsq-cite-195">
                <span id="dsq-author-user-195">Juanlu001</span>
            </cite>
        </div>
        <div id="dsq-comment-body-195" class="dsq-comment-body">
            <div id="dsq-comment-message-195" class="dsq-comment-message"><p>Thanks for the wonderful post, full of references and interesting information! The points you raise are exactly those which we're trying to make in my own University - in fact, we developed our own #aeropython in Spain not many months ago, as you noticed <img src='http://lorenabarba.com/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>
<p>While you are pushing Python "from the top", we're doing the same "from the bottom" - we'll see if we success in showing our classmates the advantages of Python and then make our professors consider alternatives to the well-established, commercial products. Many people were lacking solid programming abilities and they found this language an awesome tool.</p>
<p>Muchas gracias por compartir todo esto, ¡un saludo lleno de admiración desde el otro lado del océano!</p>
</div>
        </div>

    <ul class='children'>
    <li class="comment even depth-2" id="dsq-comment-203">
        <div id="dsq-comment-header-203" class="dsq-comment-header">
            <cite id="dsq-cite-203">
http://lorenabarba.com/                <span id="dsq-author-user-203">Lorena A. Barba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-203" class="dsq-comment-body">
            <div id="dsq-comment-message-203" class="dsq-comment-message"><p>Gracias a ti por el apoyo!</p>
</div>
        </div>

    </li>
</ul>
</li>
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-197">
        <div id="dsq-comment-header-197" class="dsq-comment-header">
            <cite id="dsq-cite-197">
                <span id="dsq-author-user-197">Jack Poulson</span>
            </cite>
        </div>
        <div id="dsq-comment-body-197" class="dsq-comment-body">
            <div id="dsq-comment-message-197" class="dsq-comment-message"><p>Hi Lorena, </p>
<p>I was pleasantly surprised to see this pop up on HN! </p>
<p>Perhaps this is in support of your point, but there are three errors in your C++ hello world that will prevent compilation:<br />
1)  should be<br />
2) "main" should return an integer status<br />
3) "cout" and "end" are members of the "std" namespace, so they either need to be prefixed with "std::" or pulled in with a "using" statement.</p>
<p>On the other hand, in defense of C++, foreach statements are possible as of C++11 and have fairly nice syntax when combined with 'auto'.</p>
</div>
        </div>

    <ul class='children'>
    <li class="comment even depth-2" id="dsq-comment-202">
        <div id="dsq-comment-header-202" class="dsq-comment-header">
            <cite id="dsq-cite-202">
http://lorenabarba.com/                <span id="dsq-author-user-202">Lorena A. Barba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-202" class="dsq-comment-body">
            <div id="dsq-comment-message-202" class="dsq-comment-message"><p>Hi Jack!</p>
<p>Thanks for leaving a comment and for pointing out errors … it totally supports my argument that errors could crop up in a simple example like that. The example is straight from the preface of "How to think …"<br />
<a href="http://www.greenteapress.com/thinkpython/thinkCSpy/html/preface.html" rel="nofollow">http://www.greenteapress.com/thinkpython/thinkCSpy/html/preface.html</a></p>
</div>
        </div>

    </li>
</ul>
</li>
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-198">
        <div id="dsq-comment-header-198" class="dsq-comment-header">
            <cite id="dsq-cite-198">
                <span id="dsq-author-user-198">Rob</span>
            </cite>
        </div>
        <div id="dsq-comment-body-198" class="dsq-comment-body">
            <div id="dsq-comment-message-198" class="dsq-comment-message"><p>According to <a href="http://jakevdp.github.io/blog/2014/05/09/why-python-is-slow/" rel="nofollow">http://jakevdp.github.io/blog/2014/05/09/why-python-is-slow/</a> raw Python is probably not an adequate replacement for Matlab, just based on speed alone on account of its dynamic features. I'm not arguing it couldn't be used, as you can easily bolster Python's number crunching with NumPy or the like, but even then I've heard that Matlab is faster for more involved math (probably on account of higher function call overhead and the fact that things have to move back through Python just to go into NumPy).<br />
I have personal experience in Python's speed affecting usability; I wrote a little app to query a Google API in Python and 150 queries took 2:30. All fine when you have time to burn, but I'd rather not sit around and wait. My Python solution wasn't great, as I couldn't use map and asyncio wasn't available then, so I ported it to Node.js. Suddenly, 150 queries finished in 45 seconds. Not only that, but the SQLite bindings were nicer and I could indeed use map to do my dirty work in a nicer looking way. So for my little project, it was easier to use another language.</p>
<p>Also, Python is not fantastic as a teaching language (in my humble opinion, as everyone's computer language "reasons for being better" often are) because although it is interpreted and comes with a comfortable REPL and thus better at teaching the basic concepts of programming, Java is better at teaching Object-Oriented Programming. While I can't say OOP is the end-all and be-all of programming paradigms, it is often instrumental in helping mitigate code copy-and-pasting (and otherwise DRY code), as well as showing programmers how to use statically-typed programming languages. I've found that people who've started with dynamic languages have a harder time adjusting to static languages ("do I really have to type int every time I want to make a number? man, Python was smart enough to do it for me, why can't I just use that?") compared to vice versa ("wait, all I have to do is type `var`? that's cool, but how do I know what's supposed to be in there?"). Again, statically-typed langauges may not be everyone's cup of tea, but they're often useful when working with large code projects and IDEs that understand them.</p>
<p>However, Python is better than Lua (sans LuaJIT) in terms of raw game programming, I'll say that immediately. Love2D is great for all it can do, but Lua is really just often way too slow. Why does my space-age machine struggle to maintain sixty frames per second with only 1000 objects on screen? Cause Lua can't pump out enough data at a high enough rate. Python can do that and much more. But considering a game written in C or C++, Lua is usually the better pick as strictly a scripting language, because of its really puny dependencies and the ease of use in creating bindings to Lua call-out. Plus, no one really wants to bundle an entire 30MB Python installer with their application when they can just statically compile in a tiny Lua interpreter.</p>
<p>PS: "colors = ['red', 'green', 'blue', 'yellow'}" should end with a square end bracket <img src='http://lorenabarba.com/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>
</div>
        </div>

    <ul class='children'>
    <li class="comment even depth-2" id="dsq-comment-199">
        <div id="dsq-comment-header-199" class="dsq-comment-header">
            <cite id="dsq-cite-199">
                <span id="dsq-author-user-199">RestfullBull</span>
            </cite>
        </div>
        <div id="dsq-comment-body-199" class="dsq-comment-body">
            <div id="dsq-comment-message-199" class="dsq-comment-message"><p>If you want to compete with matlab, you compare it to python +numpy which is quite fast for math.</p>
</div>
        </div>

    <ul class='children'>
    <li class="comment odd alt depth-3" id="dsq-comment-201">
        <div id="dsq-comment-header-201" class="dsq-comment-header">
            <cite id="dsq-cite-201">
                <span id="dsq-author-user-201">Rob</span>
            </cite>
        </div>
        <div id="dsq-comment-body-201" class="dsq-comment-body">
            <div id="dsq-comment-message-201" class="dsq-comment-message"><p>Right, exactly; but "flat" Matlab (that is, Matlab with few looping constructs) has been shown to me to be faster than Python+NumPy for intensive calculations. If you want something comfortable and easy to prototype in, Python can be your best friend. But after a little while, you may find yourself outgrowing Python and moving to a domain-specific language. Sometimes you never quite need to make the jump, and that's normal; but I maintain that there's a reason that Matlab exists.</p>
</div>
        </div>

    </li>
</ul>
</li>
</ul>
</li>
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-204">
        <div id="dsq-comment-header-204" class="dsq-comment-header">
            <cite id="dsq-cite-204">
http://lorenabarba.com/                <span id="dsq-author-user-204">Lorena A. Barba</span>
            </cite>
        </div>
        <div id="dsq-comment-body-204" class="dsq-comment-body">
            <div id="dsq-comment-message-204" class="dsq-comment-message"><p>This post inspired animated debate over at Hacker News:<br />
<a href="https://news.ycombinator.com/item?id=7760870" rel="nofollow">https://news.ycombinator.com/item?id=7760870</a></p>
<p>The professional bias of HN readers shows, however, as most assumed that the post was about computer science majors—maybe without reading it—rather than engineering majors. (I sensed other bias, too, when the author of the post is referred to as "he," but that's beside the point.) Even in the case of CS majors, though, I know that the success story of Havey Mudd is in part ascribed to switching the intro class to Python …<br />
<a href="http://www.highlandnews.net/business/article_0c6ff937-5d34-5516-920d-0637bdb120ba.html?mode=jqm" rel="nofollow">http://www.highlandnews.net/business/article_0c6ff937-5d34-5516-920d-0637bdb120ba.html?mode=jqm</a><br />
<a href="https://twitter.com/Hackbright/status/385433850467205122" rel="nofollow">https://twitter.com/Hackbright/status/385433850467205122</a><br />
<a href="https://twitter.com/ghc/status/385433147136950273" rel="nofollow">https://twitter.com/ghc/status/385433147136950273</a></p>
</div>
        </div>

    </li>
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-205">
        <div id="dsq-comment-header-205" class="dsq-comment-header">
            <cite id="dsq-cite-205">
                <span id="dsq-author-user-205">manejandodatos</span>
            </cite>
        </div>
        <div id="dsq-comment-body-205" class="dsq-comment-body">
            <div id="dsq-comment-message-205" class="dsq-comment-message"><p>#manejandodatos I should have learnt Python before - <a href="http://www.manejandodatos.es/2013/11/learnt-python" rel="nofollow">http://www.manejandodatos.es/2013/11/learnt-python</a></p>
</div>
        </div>

    </li>
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-208">
        <div id="dsq-comment-header-208" class="dsq-comment-header">
            <cite id="dsq-cite-208">
http://williammora.com/                <span id="dsq-author-user-208">William Mora</span>
            </cite>
        </div>
        <div id="dsq-comment-body-208" class="dsq-comment-body">
            <div id="dsq-comment-message-208" class="dsq-comment-message"><p>Nice post. After reading this article I feel like coding some Python <img src='http://lorenabarba.com/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>
</div>
        </div>

    </li>
            </ul>


        </div>

    </div>

<script type="text/javascript">
/* <![CDATA[ */
    var disqus_url = 'http://lorenabarba.com/blog/why-i-push-for-python/';
    var disqus_identifier = '1358 http://lorenabarba.com/?p=1358';
    var disqus_container_id = 'disqus_thread';
    var disqus_domain = 'disqus.com';
    var disqus_shortname = 'lorenaabarbagroup';
    var disqus_title = "Why I push for Python";
        var disqus_config = function () {
        var config = this; // Access to the config object
        config.language = '';

        /*
           All currently supported events:
            * preData — fires just before we request for initial data
            * preInit - fires after we get initial data but before we load any dependencies
            * onInit  - fires when all dependencies are resolved but before dtpl template is rendered
            * afterRender - fires when template is rendered but before we show it
            * onReady - everything is done
         */

        config.callbacks.preData.push(function() {
            // clear out the container (its filled for SEO/legacy purposes)
            document.getElementById(disqus_container_id).innerHTML = '';
        });
                config.callbacks.onReady.push(function() {
            // sync comments in the background so we don't block the page
            var script = document.createElement('script');
            script.async = true;
            script.src = '?cf_action=sync_comments&post_id=1358';

            var firstScript = document.getElementsByTagName( "script" )[0];
            firstScript.parentNode.insertBefore(script, firstScript);
        });
                    };
/* ]]> */
</script>

<script type="text/javascript">
/* <![CDATA[ */
    var DsqLocal = {
        'trackbacks': [
        ],
        'trackback_url': "http:\/\/lorenabarba.com\/blog\/why-i-push-for-python\/trackback\/"    };
/* ]]> */
</script>

<script type="text/javascript">
/* <![CDATA[ */
(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.' + 'disqus.com' + '/embed.js?pname=wordpress&pver=2.74';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
/* ]]> */
</script>
</div>	
				
		</article>
				
<aside>
	<!-- List Child Pages -->
	<h4>Navigation</h4>
	<ul>
		<li class="page_item page-item-139"><a href="http://lorenabarba.com/research/">Research</a></li>
<li class="page_item page-item-143"><a href="http://lorenabarba.com/people/">People</a></li>
<li class="page_item page-item-145"><a href="http://lorenabarba.com/events/">Events</a>
<ul class='children'>
	<li class="page_item page-item-789"><a href="http://lorenabarba.com/events/2008-2010/">2008–2010</a></li>
	<li class="page_item page-item-323"><a href="http://lorenabarba.com/events/2011-2012/">2011–2012</a></li>
	<li class="page_item page-item-900"><a href="http://lorenabarba.com/events/2013-2/">2013–2014</a></li>
</ul>
</li>
<li class="page_item page-item-141"><a href="http://lorenabarba.com/code/">Code</a></li>
<li class="page_item page-item-137"><a href="http://lorenabarba.com/publications/">Publications</a>
<ul class='children'>
	<li class="page_item page-item-304"><a href="http://lorenabarba.com/publications/2003-2005/">2003–2005</a></li>
	<li class="page_item page-item-286"><a href="http://lorenabarba.com/publications/2006-2008/">2006–2008</a></li>
	<li class="page_item page-item-290"><a href="http://lorenabarba.com/publications/2009-2010/">2009–2010</a></li>
	<li class="page_item page-item-298"><a href="http://lorenabarba.com/publications/2011-2/">2011</a></li>
	<li class="page_item page-item-300"><a href="http://lorenabarba.com/publications/2012-2/">2012</a></li>
	<li class="page_item page-item-302"><a href="http://lorenabarba.com/publications/2013-2/">2013</a></li>
	<li class="page_item page-item-1256"><a href="http://lorenabarba.com/publications/2014-2/">2014</a></li>
</ul>
</li>
	</ul>

	<div id="tags">Tags: <a href="http://lorenabarba.com/tag/engineering-education/" rel="tag">engineering education</a>, <a href="http://lorenabarba.com/tag/matlab/" rel="tag">matlab</a>, <a href="http://lorenabarba.com/tag/python/" rel="tag">python</a></div>
	
	<div id="category">Category: <a href="/blog" class="blog">blog</a></div>	
		
	<h4>Read It</h4>
	<!-- Readability Functions -->
	<script type="text/javascript">(function() {var s = document.getElementsByTagName("script")[0],rdb = document.createElement("script"); rdb.type = "text/javascript"; rdb.async = true; rdb.src = document.location.protocol + "//www.readability.com/embed.js"; s.parentNode.insertBefore(rdb, s); })();</script> 
	<script src="http://du3itj18e4z0b.cloudfront.net/3ec91d/js/embed/embed-buttons.js" type="text/javascript"></script>
	<div id="readabilityContainer" style="background-color: transparent; margin-top:19px;" class="vertical">            
		<a id="readNow" href="#" class="embed-button embed-button-left" onclick="rdbEmbedButtons.sendRead();" title="Read this Article with Readability"><span class="ss-icon ss-symbolicons-block">redirect</span>Read Now</a><br />
		<a id="readLater" href="#" class="embed-button embed-button-right" onclick="return rdbEmbedButtons.sendSave();" title="Save this Article with Readability"><span class="ss-icon ss-symbolicons-block">redirect</span>Read Later</a><br />                
		<a class="embed-button embed-button-right" id="sendToKindle" href="#" onclick="return rdbEmbedButtons.sendSendToKindle();" title="Send this Article to your Kindle Device with Readability" style="display: block; " data-clicked="0"><span class="ss-icon ss-symbolicons-block">redirect</span>Send to Kindle</a>            
	</div>
	<!-- End of Readability Functions -->
	
	<!-- AddThis Button BEGIN -->
	<div class="addthis_toolbox addthis_default_style ">
		<h4>Share it</h4>
		<a class="addthis_button_preferred_1"></a>
		<a class="addthis_button_preferred_2"></a>
		<a class="addthis_button_preferred_3"></a>
		<a class="addthis_button_preferred_4"></a>
		<a class="addthis_button_compact"></a>
		<a class="addthis_counter addthis_bubble_style"></a>
	</div>
	<script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4dfb69853a5ddad6"></script>
	<!-- AddThis Button END -->

<h4>License</h4>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</a>

</aside></div>

<footer id="footer" class="source-org vcard copyright">
	<ul>
		<li>&copy;2014<a href="http://lorenabarba.com"> Lorena A. Barba Group</a> Design and development by <a href="http://spruce.it" target="_blank">Spruce Interactive</a></li>
		<li><span>/</span><a href="mailto:labarba@email.gwu.edu" target="_blank" title="Send a Message">Contact</a> </li>
		<li><span>/</span><a href="http://twitter.com/lorenaabarba" target="_blank" title="Follow Lorena Barba on Twitter">@LorenaABarba</a>  </li>
	</ul>
</footer>

<!-- Generated in 1.865 seconds. Made 11 queries to database and 26 cached queries. Memory used - 15.65MB -->
<!-- Cached by DB Cache Reloaded Fix -->

<script src="http://lorenabarba.com/wp-content/themes/spruce-theme/js/jquery.masonry.min.js"></script>
<script src="http://lorenabarba.com/wp-content/themes/spruce-theme/js/jquery.infinitescroll.min.js"></script>
<script src="http://lorenabarba.com/wp-content/themes/spruce-theme/js/functions.js"></script>

<script type="text/javascript">
 var _gaq = _gaq || [];
 _gaq.push(['_setAccount', 'UA-776166-4']);
 _gaq.push(['_trackPageview']);

 (function() {
   var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
   ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
   var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
 })();
</script>
	
</body>
</html><!-- hyper cache: bd1beb670fde07324121b02ab79bac1f 14-06-30 03:31:03 -->