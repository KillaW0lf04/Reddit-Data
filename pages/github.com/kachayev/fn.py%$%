




<!DOCTYPE html>
<html class="   ">
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http://ogp.me/ns/object# article: http://ogp.me/ns/article# profile: http://ogp.me/ns/profile#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    
    
    <title>kachayev/fn.py Â· GitHub</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub" />
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub" />
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png" />
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png" />
    <meta property="fb:app_id" content="1401488693436528"/>

      <meta content="@github" name="twitter:site" /><meta content="summary" name="twitter:card" /><meta content="kachayev/fn.py" name="twitter:title" /><meta content="fn.py - Functional programming in Python: implementation of missing features to enjoy FP" name="twitter:description" /><meta content="https://avatars1.githubusercontent.com/u/485647?s=400" name="twitter:image:src" />
<meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="https://avatars1.githubusercontent.com/u/485647?s=400" property="og:image" /><meta content="kachayev/fn.py" property="og:title" /><meta content="https://github.com/kachayev/fn.py" property="og:url" /><meta content="fn.py - Functional programming in Python: implementation of missing features to enjoy FP" property="og:description" />

    <link rel="assets" href="https://assets-cdn.github.com/">
    <link rel="conduit-xhr" href="https://ghconduit.com:25035">
    

    <meta name="msapplication-TileImage" content="/windows-tile.png" />
    <meta name="msapplication-TileColor" content="#ffffff" />
    <meta name="selected-link" value="repo_source" data-pjax-transient />
      <meta name="google-analytics" content="UA-3769691-2">

    <meta content="collector.githubapp.com" name="octolytics-host" /><meta content="collector-cdn.github.com" name="octolytics-script-host" /><meta content="github" name="octolytics-app-id" /><meta content="1FDCC814:1CCE:1AC2066:53B15AFE" name="octolytics-dimension-request_id" />
    

    
    
    <link rel="icon" type="image/x-icon" href="https://assets-cdn.github.com/favicon.ico" />


    <meta content="authenticity_token" name="csrf-param" />
<meta content="sjgztr1lH948zrY3EvdKqu5iZ5MBQqrQli91BXGchKz4OVhWIOk01O4Byr7/XmWAuHFTYS1lh3E9zRrGihoyUw==" name="csrf-token" />

    <link href="https://assets-cdn.github.com/assets/github-bbf4e7b5ed0367744288dcb496d8dcb1b048f4a2.css" media="all" rel="stylesheet" type="text/css" />
    <link href="https://assets-cdn.github.com/assets/github2-830b6eccd2ef85b203e66317cf87f0e48fa5f878.css" media="all" rel="stylesheet" type="text/css" />
    


    <meta http-equiv="x-pjax-version" content="0b77784be2b2385480f4dba2d7968d09">

      
  <meta name="description" content="fn.py - Functional programming in Python: implementation of missing features to enjoy FP" />


  <meta content="485647" name="octolytics-dimension-user_id" /><meta content="kachayev" name="octolytics-dimension-user_login" /><meta content="7589332" name="octolytics-dimension-repository_id" /><meta content="kachayev/fn.py" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="7589332" name="octolytics-dimension-repository_network_root_id" /><meta content="kachayev/fn.py" name="octolytics-dimension-repository_network_root_nwo" />
  <link href="https://github.com/kachayev/fn.py/commits/master.atom" rel="alternate" title="Recent Commits to fn.py:master" type="application/atom+xml" />

  </head>


  <body class="logged_out  env-production  vis-public">
    <a href="#start-of-content" tabindex="1" class="accessibility-aid js-skip-to-content">Skip to content</a>
    <div class="wrapper">
      
      
      
      


      
      <div class="header header-logged-out">
  <div class="container clearfix">

    <a class="header-logo-wordmark" href="https://github.com/">
      <span class="mega-octicon octicon-logo-github"></span>
    </a>

    <div class="header-actions">
        <a class="button primary" href="/join">Sign up</a>
      <a class="button signin" href="/login?return_to=%2Fkachayev%2Ffn.py">Sign in</a>
    </div>

    <div class="command-bar js-command-bar  in-repository">

      <ul class="top-nav">
          <li class="explore"><a href="/explore">Explore</a></li>
          <li class="features"><a href="/features">Features</a></li>
          <li class="enterprise"><a href="https://enterprise.github.com/">Enterprise</a></li>
          <li class="blog"><a href="/blog">Blog</a></li>
      </ul>
        <form accept-charset="UTF-8" action="/search" class="command-bar-form" id="top_search_form" method="get">

<div class="commandbar">
  <span class="message"></span>
  <input type="text" data-hotkey="s, /" name="q" id="js-command-bar-field" placeholder="Search or type a command" tabindex="1" autocapitalize="off"
    
    
      data-repo="kachayev/fn.py"
      data-branch="master"
      data-sha="bd74b5f11c9c6d1fda37f6528bf98e627832f0d5"
  >
  <div class="display hidden"></div>
</div>

    <input type="hidden" name="nwo" value="kachayev/fn.py" />

    <div class="select-menu js-menu-container js-select-menu search-context-select-menu">
      <span class="minibutton select-menu-button js-menu-target" role="button" aria-haspopup="true">
        <span class="js-select-button">This repository</span>
      </span>

      <div class="select-menu-modal-holder js-menu-content js-navigation-container" aria-hidden="true">
        <div class="select-menu-modal">

          <div class="select-menu-item js-navigation-item js-this-repository-navigation-item selected">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" class="js-search-this-repository" name="search_target" value="repository" checked="checked" />
            <div class="select-menu-item-text js-select-button-text">This repository</div>
          </div> <!-- /.select-menu-item -->

          <div class="select-menu-item js-navigation-item js-all-repositories-navigation-item">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" name="search_target" value="global" />
            <div class="select-menu-item-text js-select-button-text">All repositories</div>
          </div> <!-- /.select-menu-item -->

        </div>
      </div>
    </div>

  <span class="help tooltipped tooltipped-s" aria-label="Show command bar help">
    <span class="octicon octicon-question"></span>
  </span>


  <input type="hidden" name="ref" value="cmdform">

</form>
    </div>

  </div>
</div>



      <div id="start-of-content" class="accessibility-aid"></div>
          <div class="site" itemscope itemtype="http://schema.org/WebPage">
    <div id="js-flash-container">
      
    </div>
    <div class="pagehead repohead instapaper_ignore readability-menu">
      <div class="container">
        

<ul class="pagehead-actions">


  <li>
      <a href="/login?return_to=%2Fkachayev%2Ffn.py"
    class="minibutton with-count star-button tooltipped tooltipped-n"
    aria-label="You must be signed in to star a repository" rel="nofollow">
    <span class="octicon octicon-star"></span>
    Star
  </a>

    <a class="social-count js-social-count" href="/kachayev/fn.py/stargazers">
      1,095
    </a>

  </li>

    <li>
      <a href="/login?return_to=%2Fkachayev%2Ffn.py"
        class="minibutton with-count js-toggler-target fork-button tooltipped tooltipped-n"
        aria-label="You must be signed in to fork a repository" rel="nofollow">
        <span class="octicon octicon-repo-forked"></span>
        Fork
      </a>
      <a href="/kachayev/fn.py/network" class="social-count">
        63
      </a>
    </li>
</ul>

        <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public">
          <span class="repo-label"><span>public</span></span>
          <span class="mega-octicon octicon-repo"></span>
          <span class="author"><a href="/kachayev" class="url fn" itemprop="url" rel="author"><span itemprop="title">kachayev</span></a></span><!--
       --><span class="path-divider">/</span><!--
       --><strong><a href="/kachayev/fn.py" class="js-current-repository js-repo-home-link">fn.py</a></strong>

          <span class="page-context-loader">
            <img alt="" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
          </span>

        </h1>
      </div><!-- /.container -->
    </div><!-- /.repohead -->

    <div class="container">
      <div class="repository-with-sidebar repo-container new-discussion-timeline js-new-discussion-timeline with-full-navigation ">
        <div class="repository-sidebar clearfix">
            

<div class="sunken-menu vertical-right repo-nav js-repo-nav js-repository-container-pjax js-octicon-loaders">
  <div class="sunken-menu-contents">
    <ul class="sunken-menu-group">
      <li class="tooltipped tooltipped-w" aria-label="Code">
        <a href="/kachayev/fn.py" aria-label="Code" class="selected js-selected-navigation-item sunken-menu-item" data-hotkey="g c" data-pjax="true" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches /kachayev/fn.py">
          <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

        <li class="tooltipped tooltipped-w" aria-label="Issues">
          <a href="/kachayev/fn.py/issues" aria-label="Issues" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g i" data-selected-links="repo_issues /kachayev/fn.py/issues">
            <span class="octicon octicon-issue-opened"></span> <span class="full-word">Issues</span>
            <span class='counter'>17</span>
            <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>

      <li class="tooltipped tooltipped-w" aria-label="Pull Requests">
        <a href="/kachayev/fn.py/pulls" aria-label="Pull Requests" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g p" data-selected-links="repo_pulls /kachayev/fn.py/pulls">
            <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull Requests</span>
            <span class='counter'>5</span>
            <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>


    </ul>
    <div class="sunken-menu-separator"></div>
    <ul class="sunken-menu-group">

      <li class="tooltipped tooltipped-w" aria-label="Pulse">
        <a href="/kachayev/fn.py/pulse" aria-label="Pulse" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="pulse /kachayev/fn.py/pulse">
          <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped tooltipped-w" aria-label="Graphs">
        <a href="/kachayev/fn.py/graphs" aria-label="Graphs" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="repo_graphs repo_contributors /kachayev/fn.py/graphs">
          <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped tooltipped-w" aria-label="Network">
        <a href="/kachayev/fn.py/network" aria-label="Network" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-selected-links="repo_network /kachayev/fn.py/network">
          <span class="octicon octicon-repo-forked"></span> <span class="full-word">Network</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>
    </ul>


  </div>
</div>

              <div class="only-with-full-nav">
                

  

<div class="clone-url open"
  data-protocol-type="http"
  data-url="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone">
  <h3><strong>HTTPS</strong> clone URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="https://github.com/kachayev/fn.py.git" readonly="readonly">
    <span class="url-box-clippy">
    <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="https://github.com/kachayev/fn.py.git" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  

<div class="clone-url "
  data-protocol-type="subversion"
  data-url="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone">
  <h3><strong>Subversion</strong> checkout URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="https://github.com/kachayev/fn.py" readonly="readonly">
    <span class="url-box-clippy">
    <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="https://github.com/kachayev/fn.py" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>


<p class="clone-options">You can clone with
      <a href="#" class="js-clone-selector" data-protocol="http">HTTPS</a>
      or <a href="#" class="js-clone-selector" data-protocol="subversion">Subversion</a>.
  <a href="https://help.github.com/articles/which-remote-url-should-i-use" class="help tooltipped tooltipped-n" aria-label="Get help on which URL is right for you.">
    <span class="octicon octicon-question"></span>
  </a>
</p>



                <a href="/kachayev/fn.py/archive/master.zip"
                   class="minibutton sidebar-button"
                   aria-label="Download kachayev/fn.py as a zip file"
                   title="Download kachayev/fn.py as a zip file"
                   rel="nofollow">
                  <span class="octicon octicon-cloud-download"></span>
                  Download ZIP
                </a>
              </div>
        </div><!-- /.repository-sidebar -->

        <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>
          

<span id="js-show-full-navigation"></span>

<div class="repository-meta js-details-container ">
    <div class="repository-description js-details-show">
      <p>Functional programming in Python: implementation of missing features to enjoy FP</p>
    </div>



</div>

<div class="capped-box overall-summary ">

  <div class="stats-switcher-viewport js-stats-switcher-viewport">
    <div class="stats-switcher-wrapper">
    <ul class="numbers-summary">
      <li class="commits">
        <a data-pjax href="/kachayev/fn.py/commits/master">
            <span class="num">
              <span class="octicon octicon-history"></span>
              193
            </span>
            commits
        </a>
      </li>
      <li>
        <a data-pjax href="/kachayev/fn.py/branches">
          <span class="num">
            <span class="octicon octicon-git-branch"></span>
            2
          </span>
          branches
        </a>
      </li>

      <li>
        <a data-pjax href="/kachayev/fn.py/releases">
          <span class="num">
            <span class="octicon octicon-tag"></span>
            0
          </span>
          releases
        </a>
      </li>

      <li>
        
  <a href="/kachayev/fn.py/graphs/contributors">
    <span class="num">
      <span class="octicon octicon-organization"></span>
      9
    </span>
    contributors
  </a>
      </li>
    </ul>

      <div class="repository-lang-stats">
        <ol class="repository-lang-stats-numbers">
          <li>
              <a href="/kachayev/fn.py/search?l=python">
                <span class="color-block language-color" style="background-color:#3581ba;"></span>
                <span class="lang">Python</span>
                <span class="percent">100%</span>
              </a>
          </li>
        </ol>
      </div>
    </div>
  </div>

</div>

  <div class="tooltipped tooltipped-s" aria-label="Show language statistics">
    <a href="#"
     class="repository-lang-stats-graph js-toggle-lang-stats"
     style="background-color:#3581ba">
  <span class="language-color" style="width:100%; background-color:#3581ba;" itemprop="keywords">Python</span>
    </a>
  </div>



<div class="file-navigation in-mid-page">
  <a href="/kachayev/fn.py/find/master"
        class="js-show-file-finder minibutton empty-icon tooltipped tooltipped-s right"
        data-pjax
        data-hotkey="t"
        aria-label="Quickly jump between files">
    <span class="octicon octicon-list-unordered"></span>
  </a>
    <a href="/kachayev/fn.py/compare" aria-label="Compare, review, create a pull request" class="minibutton compact primary tooltipped tooltipped-s" aria-label="Compare &amp; review" data-pjax>
      <span class="octicon octicon-git-compare"></span>
    </a>

  

<div class="select-menu js-menu-container js-select-menu" >
  <span class="minibutton select-menu-button js-menu-target css-truncate" data-hotkey="w"
    data-master-branch="master"
    data-ref="master"
    title="master"
    role="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
    <span class="octicon octicon-git-branch"></span>
    <i>branch:</i>
    <span class="js-select-button css-truncate-target">master</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax aria-hidden="true">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-x js-menu-close"></span>
      </div> <!-- /.select-menu-header -->

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" class="js-select-menu-tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" class="js-select-menu-tab">Tags</a>
            </li>
          </ul>
        </div><!-- /.select-menu-tabs -->
      </div><!-- /.select-menu-filters -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/kachayev/fn.py/tree/gh-pages"
                 data-name="gh-pages"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="gh-pages">gh-pages</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item selected">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/kachayev/fn.py/tree/master"
                 data-name="master"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="master">master</a>
            </div> <!-- /.select-menu-item -->
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

    </div> <!-- /.select-menu-modal -->
  </div> <!-- /.select-menu-modal-holder -->
</div> <!-- /.select-menu -->



  <div class="breadcrumb"><span class='repo-root js-repo-root'><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/kachayev/fn.py" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">fn.py</span></a></span></span><span class="separator"> / </span><form action="/login?return_to=%2Fkachayev%2Ffn.py" aria-label="Sign in to make or propose changes" class="js-new-blob-form tooltipped tooltipped-e new-file-link" method="post"><span aria-label="Sign in to make or propose changes" class="js-new-blob-submit octicon octicon-plus" data-test-id="create-new-git-file" role="button"></span></form></div>
</div>




  
  <div class="commit commit-tease js-details-container" >
    <p class="commit-title ">
        <a href="/kachayev/fn.py/commit/dc5c57345dc05398c0b0a1a12c479a986b970995" class="message" data-pjax="true" title="Update README file with basic information about deque usage">Update README file with basic information about deque usage</a>
        
    </p>
    <div class="commit-meta">
      <button aria-label="Copy SHA" class="js-zeroclipboard zeroclipboard-link" data-clipboard-text="dc5c57345dc05398c0b0a1a12c479a986b970995" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
      <a href="/kachayev/fn.py/commit/dc5c57345dc05398c0b0a1a12c479a986b970995" class="sha-block" data-pjax>latest commit <span class="sha">dc5c57345d</span></a>

      <div class="authorship">
        <img alt="Alexey Kachayev" class="gravatar js-avatar" data-user="485647" height="20" src="https://avatars2.githubusercontent.com/u/485647?s=140" width="20" />
        <span class="author-name"><a href="/kachayev" rel="author">kachayev</a></span>
        authored <time class="updated" datetime="2014-02-27T12:37:52+01:00" is="relative-time">February 27, 2014</time>

      </div>
    </div>
  </div>

  <div class="file-wrap">
    <table class="files" data-pjax>

      
<tbody class=""
  data-url="/kachayev/fn.py/file-list/master"
  data-deferred-content-error="Failed to load latest commit information.">

    <tr>
      <td class="icon">
        <span class="octicon octicon-file-directory"></span>
        <img alt="" class="spinner" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
      </td>
      <td class="content">
        <span class="css-truncate css-truncate-target"><a href="/kachayev/fn.py/tree/master/fn" class="js-directory-link" id="4d9d6c17eeae2754c9b49171261b93bd-846e8836a52f680e75fdb272abfd684edac03f8b" title="fn">fn</a></span>
      </td>
      <td class="message">
        <span class="css-truncate css-truncate-target ">
          <a href="/kachayev/fn.py/commit/88048b08745eae46b7a2cc2ecb9db6cde52f2b42" class="message" data-pjax="true" title="Implement Deque based on FingerTree data structure">Implement Deque based on FingerTree data structure</a>
        </span>
      </td>
      <td class="age">
        <span class="css-truncate css-truncate-target"><time datetime="2014-02-27T11:34:40Z" is="time-ago">February 27, 2014</time></span>
      </td>
    </tr>
    <tr>
      <td class="icon">
        <span class="octicon octicon-file-text"></span>
        <img alt="" class="spinner" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
      </td>
      <td class="content">
        <span class="css-truncate css-truncate-target"><a href="/kachayev/fn.py/blob/master/.travis.yml" class="js-directory-link" id="354f30a63fb0907d4ad57269548329e3-390a126e90d4b94f8fa60b031b5aef24e64f7d15" title=".travis.yml">.travis.yml</a></span>
      </td>
      <td class="message">
        <span class="css-truncate css-truncate-target ">
          <a href="/kachayev/fn.py/commit/de19d22dc50d1bdcc871f762f1bacc649deb35b3" class="message" data-pjax="true" title="Add travis.yml to test build with different python versions">Add travis.yml to test build with different python versions</a>
        </span>
      </td>
      <td class="age">
        <span class="css-truncate css-truncate-target"><time datetime="2013-01-22T17:30:29Z" is="time-ago">January 22, 2013</time></span>
      </td>
    </tr>
    <tr>
      <td class="icon">
        <span class="octicon octicon-file-text"></span>
        <img alt="" class="spinner" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
      </td>
      <td class="content">
        <span class="css-truncate css-truncate-target"><a href="/kachayev/fn.py/blob/master/HISTORY.rst" class="js-directory-link" id="d9ae695c8119e58c2ec435b6deae2d53-9a0d7bb8d070ed41d7ee8a03c6d617ecf3a2b9d5" title="HISTORY.rst">HISTORY.rst</a></span>
      </td>
      <td class="message">
        <span class="css-truncate css-truncate-target ">
          <a href="/kachayev/fn.py/commit/f52dc99e374e31f98b74f3b2425a5c09431fc900" class="message" data-pjax="true" title="First implementation for unfold operator">First implementation for unfold operator</a>
        </span>
      </td>
      <td class="age">
        <span class="css-truncate css-truncate-target"><time datetime="2013-04-06T08:59:27Z" is="time-ago">April 06, 2013</time></span>
      </td>
    </tr>
    <tr>
      <td class="icon">
        <span class="octicon octicon-file-text"></span>
        <img alt="" class="spinner" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
      </td>
      <td class="content">
        <span class="css-truncate css-truncate-target"><a href="/kachayev/fn.py/blob/master/LICENSE" class="js-directory-link" id="9879d6db96fd29134fc802214163b95a-c5b9cc24d139c4667e6c98841098a2b7b692662a" title="LICENSE">LICENSE</a></span>
      </td>
      <td class="message">
        <span class="css-truncate css-truncate-target ">
          <a href="/kachayev/fn.py/commit/05b17db8eb12678ab990e63a14263b6f6e8a3eb7" class="message" data-pjax="true" title="Add apache license">Add apache license</a>
        </span>
      </td>
      <td class="age">
        <span class="css-truncate css-truncate-target"><time datetime="2013-01-14T09:31:39Z" is="time-ago">January 14, 2013</time></span>
      </td>
    </tr>
    <tr>
      <td class="icon">
        <span class="octicon octicon-file-text"></span>
        <img alt="" class="spinner" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
      </td>
      <td class="content">
        <span class="css-truncate css-truncate-target"><a href="/kachayev/fn.py/blob/master/MANIFEST.in" class="js-directory-link" id="97c91a104c431d0c365565d3ac03ac13-36482f56d3dea3636c00e818ba7f39388492b3d0" title="MANIFEST.in">MANIFEST.in</a></span>
      </td>
      <td class="message">
        <span class="css-truncate css-truncate-target ">
          <a href="/kachayev/fn.py/commit/fec1ef1013dfa4181a2a66052f28ebd68fae1cc6" class="message" data-pjax="true" title="issue #1">issue</a> <a href="https://github.com/kachayev/fn.py/issues/1" class="issue-link" title="Rewrite README and HISTORY with RST to show on PyPI">#1</a>
        </span>
      </td>
      <td class="age">
        <span class="css-truncate css-truncate-target"><time datetime="2013-01-18T16:54:06Z" is="time-ago">January 18, 2013</time></span>
      </td>
    </tr>
    <tr>
      <td class="icon">
        <span class="octicon octicon-file-text"></span>
        <img alt="" class="spinner" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
      </td>
      <td class="content">
        <span class="css-truncate css-truncate-target"><a href="/kachayev/fn.py/blob/master/README.rst" class="js-directory-link" id="88b99bb28683bd5b7e3a204826ead112-1b00e30c440e2b757f9653514deb351eb7d771ac" title="README.rst">README.rst</a></span>
      </td>
      <td class="message">
        <span class="css-truncate css-truncate-target ">
          <a href="/kachayev/fn.py/commit/dc5c57345dc05398c0b0a1a12c479a986b970995" class="message" data-pjax="true" title="Update README file with basic information about deque usage">Update README file with basic information about deque usage</a>
        </span>
      </td>
      <td class="age">
        <span class="css-truncate css-truncate-target"><time datetime="2014-02-27T11:37:52Z" is="time-ago">February 27, 2014</time></span>
      </td>
    </tr>
    <tr>
      <td class="icon">
        <span class="octicon octicon-file-text"></span>
        <img alt="" class="spinner" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
      </td>
      <td class="content">
        <span class="css-truncate css-truncate-target"><a href="/kachayev/fn.py/blob/master/setup.py" class="js-directory-link" id="2eeaed663bd0d25b7e608891384b7298-9a79730ad933ad0960e0e84821165833ac8925f6" title="setup.py">setup.py</a></span>
      </td>
      <td class="message">
        <span class="css-truncate css-truncate-target ">
          <a href="/kachayev/fn.py/commit/fec1ef1013dfa4181a2a66052f28ebd68fae1cc6" class="message" data-pjax="true" title="issue #1">issue</a> <a href="https://github.com/kachayev/fn.py/issues/1" class="issue-link" title="Rewrite README and HISTORY with RST to show on PyPI">#1</a>
        </span>
      </td>
      <td class="age">
        <span class="css-truncate css-truncate-target"><time datetime="2013-01-18T16:54:06Z" is="time-ago">January 18, 2013</time></span>
      </td>
    </tr>
    <tr>
      <td class="icon">
        <span class="octicon octicon-file-text"></span>
        <img alt="" class="spinner" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
      </td>
      <td class="content">
        <span class="css-truncate css-truncate-target"><a href="/kachayev/fn.py/blob/master/tests.py" class="js-directory-link" id="f4bc68ff01eef7bed2f3a64cad7d37ca-35295fd21bf882ecd752de0dc00b3bf8ce2af5a7" title="tests.py">tests.py</a></span>
      </td>
      <td class="message">
        <span class="css-truncate css-truncate-target ">
          <a href="/kachayev/fn.py/commit/88048b08745eae46b7a2cc2ecb9db6cde52f2b42" class="message" data-pjax="true" title="Implement Deque based on FingerTree data structure">Implement Deque based on FingerTree data structure</a>
        </span>
      </td>
      <td class="age">
        <span class="css-truncate css-truncate-target"><time datetime="2014-02-27T11:34:40Z" is="time-ago">February 27, 2014</time></span>
      </td>
    </tr>
</tbody>

    </table>
  </div>


  <div id="readme" class="clearfix announce instapaper_body rst">
    <span class="name">
      <span class="octicon octicon-book"></span>
      README.rst
    </span>

    <article class="markdown-body entry-content" itemprop="mainContentOfPage"><h1>
<a name="user-content-fnpy-enjoy-fp-in-python" class="anchor" href="#fnpy-enjoy-fp-in-python" aria-hidden="true"><span class="octicon octicon-link"></span></a>Fn.py: enjoy FP in Python</h1>
<p>Despite the fact that Python is not pure-functional programming
language, it's multi-paradigm PL and it gives you enough freedom to take
credits from functional programming approach. There are theoretical and
practical advantages to the functional style:</p>
<ul>
<li>Formal provability</li>
<li>Modularity</li>
<li>Composability</li>
<li>Ease of debugging and testing</li>
</ul><p><tt>Fn.py</tt> library provides you with missing "batteries" to get maximum
from functional approach even in mostly-imperative program.</p>
<p>More about functional approach from my Pycon UA 2012 talks: <a href="http://kachayev.github.com/talks/uapycon2012/index.html">Functional
Programming with
Python</a>.</p>
<h2>
<a name="user-content-scala-style-lambdas-definition" class="anchor" href="#scala-style-lambdas-definition" aria-hidden="true"><span class="octicon octicon-link"></span></a>Scala-style lambdas definition</h2>
<div class="highlight highlight-python"><pre>
<span class="kn">from</span> <span class="nn">fn</span> <span class="kn">import</span> <span class="n">_</span>
<span class="kn">from</span> <span class="nn">fn.op</span> <span class="kn">import</span> <span class="n">zipwith</span>
<span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">repeat</span>

<span class="k">assert</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">_</span> <span class="o">*</span> <span class="mi">2</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)))</span> <span class="o">==</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span>
<span class="k">assert</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="n">_</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">,</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">]))</span> <span class="o">==</span> <span class="p">[</span><span class="mi">9</span><span class="p">]</span>
<span class="k">assert</span> <span class="nb">list</span><span class="p">(</span><span class="n">zipwith</span><span class="p">(</span><span class="n">_</span> <span class="o">+</span> <span class="n">_</span><span class="p">)([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="n">repeat</span><span class="p">(</span><span class="mi">10</span><span class="p">)))</span> <span class="o">==</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">]</span>
</pre></div>
<p>More examples of using <tt>_</tt> you can find in <a href="https://github.com/kachayev/fn.py/blob/master/tests.py">test
cases</a>
declaration (attributes resolving, method calling, slicing).</p>
<p><strong>Attention!</strong> If you work in interactive python shell, your should remember that <tt>_</tt> means "latest output" and you'll get unpredictable results. In this case, you can do something like <tt>from fn import _ as X</tt> (and then write functions like <tt>X * 2</tt>).</p>
<p>If you are not sure, what your function is going to do, you can print it:</p>
<div class="highlight highlight-python"><pre>
<span class="kn">from</span> <span class="nn">fn</span> <span class="kn">import</span> <span class="n">_</span>

<span class="k">print</span> <span class="p">(</span><span class="n">_</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="c"># "(x1) =&gt; (x1 + 2)"</span>
<span class="k">print</span> <span class="p">(</span><span class="n">_</span> <span class="o">+</span> <span class="n">_</span> <span class="o">*</span> <span class="n">_</span><span class="p">)</span> <span class="c"># "(x1, x2, x3) =&gt; (x1 + (x2 * x3))"</span>
</pre></div>
<p><tt>_</tt> will fail with <tt>ArityError</tt> (<tt>TypeError</tt> subclass) on inaccurate number of passed arguments. This is one more restrictions to ensure that you did everything right:</p>
<div class="highlight highlight-python"><pre>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">fn</span> <span class="kn">import</span> <span class="n">_</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="n">_</span> <span class="o">+</span> <span class="n">_</span><span class="p">)(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">"&lt;stdin&gt;"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
  <span class="n">File</span> <span class="s">"fn/underscore.py"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">82</span><span class="p">,</span> <span class="ow">in</span> <span class="n">__call__</span>
    <span class="k">raise</span> <span class="n">ArityError</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_arity</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">args</span><span class="p">))</span>
<span class="n">fn</span><span class="o">.</span><span class="n">underscore</span><span class="o">.</span><span class="n">ArityError</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span> <span class="o">+</span> <span class="n">_</span><span class="p">)</span> <span class="n">expected</span> <span class="mi">2</span> <span class="n">arguments</span><span class="p">,</span> <span class="n">got</span> <span class="mi">1</span>
</pre></div>
<h2>
<a name="user-content-persistent-data-structures" class="anchor" href="#persistent-data-structures" aria-hidden="true"><span class="octicon octicon-link"></span></a>Persistent data structures</h2>
<p><strong>Attention:</strong> Persistent data structures are under active development.</p>
<p>Persistent data structure is a data structure that always preserves the previous version of itself when it is modified (more formal information on <a href="http://goo.gl/8VveOH">Wikipedia</a>). Each operation with such data structure yields a new updated structure instead of in-place modification (all previous versions are potentially available or GC-ed when possible).</p>
<p>Lets take a quick look:</p>
<div class="highlight highlight-python"><pre>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">fn.immutable</span> <span class="kn">import</span> <span class="n">SkewHeap</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">SkewHeap</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">s1</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s2</span>
<span class="o">&lt;</span><span class="n">fn</span><span class="o">.</span><span class="n">immutable</span><span class="o">.</span><span class="n">heap</span><span class="o">.</span><span class="n">SkewHeap</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x10b14c050</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">s2</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s3</span>
<span class="o">&lt;</span><span class="n">fn</span><span class="o">.</span><span class="n">immutable</span><span class="o">.</span><span class="n">heap</span><span class="o">.</span><span class="n">SkewHeap</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x10b14c158</span><span class="o">&gt;</span> <span class="c"># &lt;-- other object</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s3</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
<span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">fn</span><span class="o">.</span><span class="n">immutable</span><span class="o">.</span><span class="n">heap</span><span class="o">.</span><span class="n">SkewHeap</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x10b14c050</span><span class="o">&gt;</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s3</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span> <span class="c"># &lt;-- s3 isn't changed</span>
<span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">fn</span><span class="o">.</span><span class="n">immutable</span><span class="o">.</span><span class="n">heap</span><span class="o">.</span><span class="n">SkewHeap</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x10b11c052</span><span class="o">&gt;</span><span class="p">)</span>
</pre></div>
<p>If you think I'm totally crazy and it will work despairingly slow, just give it 5 minutes. Relax, take a deep breath and read about few techniques that make persistent data structures fast and efficient: <a href="http://en.wikipedia.org/wiki/Persistent_data_structure#Examples_of_persistent_data_structures">structural sharing</a> and <a href="http://en.wikipedia.org/wiki/Persistent_data_structure#Path_Copying">path copying</a>.</p>
<p>To see how it works in "pictures", you can check great slides from Zach Allaun's talk (StrangeLoop 2013): <a href="http://goo.gl/Cp1Qsq">"Functional Vectors, Maps And Sets In Julia"</a>.</p>
<p>And, if you are brave enough, go and read:</p>
<ul>
<li>Chris Okasaki, "Purely Functional Data Structures" (<a href="http://goo.gl/c7ptkk">Amazon</a>)</li>
<li>Fethi Rabhi and Guy Lapalme, "Algorithms: A Functional Programming Approach" (<a href="http://goo.gl/00BxTO">Amazon</a>)</li>
</ul><p>Available immutable data structures in <tt>fn.immutable</tt> module:</p>
<ul>
<li>
<tt>LinkedList</tt>: most "obvious" persistent data structure, used as building block for other list-based structures (stack, queue)</li>
<li>
<tt>Stack</tt>: wraps linked list implementation with well-known pop/push API</li>
<li>
<tt>Queue</tt>: uses two linked lists and lazy copy to provide O(1) enqueue and dequeue operations</li>
<li>
<tt>Deque</tt> (in progress): <a href="http://goo.gl/vVTzx3">"Confluently Persistent Deques via Data
Structural Bootstrapping"</a>
</li>
<li>
<tt>Deque</tt> based on <tt>FingerTree</tt> data structure (see more information below)</li>
<li>
<tt>Vector</tt>: O(log32(n)) access to elements by index (which is near-O(1) for reasonable vector size), implementation is based on <tt>BitmappedTrie</tt>, almost drop-in replacement for built-in Python <tt>list</tt>
</li>
<li>
<tt>SkewHeap</tt>: self-adjusting heap implemented as a binary tree with specific branching model, uses heap merge as basic operation, more information - <a href="http://goo.gl/R1PZME">"Self-adjusting heaps"</a>
</li>
<li>
<tt>PairingHeap</tt>: <a href="http://goo.gl/aiVtPH">"The Pairing-Heap: A New Form of Self-Adjusting Heap"</a>
</li>
<li>
<tt>Dict</tt> (in progress): persistent hash map implementation based on <tt>BitmappedTrie</tt>
</li>
<li>
<tt>FingerTree</tt> (in progress): <a href="http://goo.gl/Bzo0df">"Finger Trees: A Simple General-purpose Data Structure"</a>
</li>
</ul><p>Use appropriate doc strings to get more information about each data structure as well as sample code.</p>
<p>To get more clear vision of how persistent heaps work (<tt>SkewHeap</tt> and <tt>PairingHeap</tt>), you can look at slides from my talk <a href="http://goo.gl/VMgdG2">"Union-based heaps"</a> (with analyzed data structures definitions in Python and Haskell).</p>
<p><strong>Note.</strong> Most functional languages use persistent data structures as basic building blocks, well-known examples are Clojure, Haskell and Scala. Clojure community puts much effort to popularize programming based on the idea of data immutability. There are few amazing talk given by Rich Hickey (creator of Clojure), you can check them to find answers on both questions "How?" and "Why?":</p>
<ul>
<li><a href="http://goo.gl/137UG5">"The Value of Values"</a></li>
<li><a href="http://goo.gl/M3vZ7E">"Persistent Data Structures and Managed References"</a></li>
</ul><h2>
<a name="user-content-streams-and-infinite-sequences-declaration" class="anchor" href="#streams-and-infinite-sequences-declaration" aria-hidden="true"><span class="octicon octicon-link"></span></a>Streams and infinite sequences declaration</h2>
<p>Lazy-evaluated Scala-style streams. Basic idea: evaluate each new
element "on demand" and share calculated elements between all created
iterators. <tt>Stream</tt> object supports <tt>&lt;&lt;</tt> operator that means pushing
new elements when it's necessary.</p>
<p>Simplest cases:</p>
<div class="highlight highlight-python"><pre>
<span class="kn">from</span> <span class="nn">fn</span> <span class="kn">import</span> <span class="n">Stream</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">Stream</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="k">assert</span> <span class="nb">list</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="k">assert</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span>
<span class="k">assert</span> <span class="nb">list</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">])</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">Stream</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="nb">range</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="k">assert</span> <span class="nb">list</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">gen</span><span class="p">():</span>
    <span class="k">yield</span> <span class="mi">1</span>
    <span class="k">yield</span> <span class="mi">2</span>
    <span class="k">yield</span> <span class="mi">3</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">Stream</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">gen</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="k">assert</span> <span class="nb">list</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
</pre></div>
<p>Lazy-evaluated stream is useful for infinite sequences, i.e. fibonacci
sequence can be calculated as:</p>
<div class="highlight highlight-python"><pre>
<span class="kn">from</span> <span class="nn">fn</span> <span class="kn">import</span> <span class="n">Stream</span>
<span class="kn">from</span> <span class="nn">fn.iters</span> <span class="kn">import</span> <span class="n">take</span><span class="p">,</span> <span class="n">drop</span><span class="p">,</span> <span class="nb">map</span>
<span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">add</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">Stream</span><span class="p">()</span>
<span class="n">fib</span> <span class="o">=</span> <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="nb">map</span><span class="p">(</span><span class="n">add</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">drop</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">f</span><span class="p">))</span>

<span class="k">assert</span> <span class="nb">list</span><span class="p">(</span><span class="n">take</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">fib</span><span class="p">))</span> <span class="o">==</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mi">34</span><span class="p">]</span>
<span class="k">assert</span> <span class="n">fib</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">==</span> <span class="mi">6765</span>
<span class="k">assert</span> <span class="nb">list</span><span class="p">(</span><span class="n">fib</span><span class="p">[</span><span class="mi">30</span><span class="p">:</span><span class="mi">35</span><span class="p">])</span> <span class="o">==</span> <span class="p">[</span><span class="mi">832040</span><span class="p">,</span><span class="mi">1346269</span><span class="p">,</span><span class="mi">2178309</span><span class="p">,</span><span class="mi">3524578</span><span class="p">,</span><span class="mi">5702887</span><span class="p">]</span>
</pre></div>
<h2>
<a name="user-content-trampolines-decorator" class="anchor" href="#trampolines-decorator" aria-hidden="true"><span class="octicon octicon-link"></span></a>Trampolines decorator</h2>
<p><tt>fn.recur.tco</tt> is a workaround for dealing with TCO without heavy stack utilization. Let's start from simple example of recursive factorial calculation:</p>
<div class="highlight highlight-python"><pre>
<span class="k">def</span> <span class="nf">fact</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">fact</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</pre></div>
<p>This variant works, but it's really ugly. Why? It will utilize memory too heavy cause of recursive storing all previous values to calculate final result. If you will execute this function with big <tt>n</tt> (more then <tt>sys.getrecursionlimit()</tt>) CPython will fail with</p>
<div class="highlight highlight-python"><pre>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">sys</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">fact</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">getrecursionlimit</span><span class="p">()</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
<span class="o">...</span> <span class="n">many</span> <span class="n">many</span> <span class="n">lines</span> <span class="n">of</span> <span class="n">stacktrace</span> <span class="o">...</span>
<span class="ne">RuntimeError</span><span class="p">:</span> <span class="n">maximum</span> <span class="n">recursion</span> <span class="n">depth</span> <span class="n">exceeded</span>
</pre></div>
<p>Which is good, cause it prevents you from terrible mistakes in your code.</p>
<p>How can we optimize this solution? Answer is simple, lets transform function to use tail call:</p>
<div class="highlight highlight-python"><pre>
<span class="k">def</span> <span class="nf">fact</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="n">acc</span>
    <span class="k">return</span> <span class="n">fact</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">acc</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</pre></div>
<p>Why this variant is better? Cause you don't need to remember previous values to calculate final result. More about <a href="http://en.wikipedia.org/wiki/Tail_call">tail call optimization</a> on Wikipedia. But... Python interpreter will execute this function the same way as previous one, so you won't win anything.</p>
<p><tt>fn.recur.tco</tt> gives you mechanism to write "optimized a bit" tail call recursion (using "trampoline" approach):</p>
<div class="highlight highlight-python"><pre>
<span class="kn">from</span> <span class="nn">fn</span> <span class="kn">import</span> <span class="n">recur</span>

<span class="nd">@recur.tco</span>
<span class="k">def</span> <span class="nf">fact</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span><span class="p">,</span> <span class="n">acc</span>
    <span class="k">return</span> <span class="bp">True</span><span class="p">,</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">acc</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</pre></div>
<p><tt>@recur.tco</tt> is a decorator that execute your function in <tt>while</tt> loop and check output:</p>
<ul>
<li>
<tt>(False, result)</tt> means that we finished</li>
<li>
<tt>(True, args, kwargs)</tt> means that we need to call function again with other arguments</li>
<li>
<tt>(func, args, kwargs)</tt> to switch function to be executed inside while loop</li>
</ul><p>The last variant is really useful, when you need to switch callable inside evaluation loop. Good example for such situation is recursive detection if given number is odd or even:</p>
<div class="highlight highlight-python"><pre>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">fn</span> <span class="kn">import</span> <span class="n">recur</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nd">@recur.tco</span>
<span class="o">...</span> <span class="k">def</span> <span class="nf">even</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
<span class="o">...</span>     <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">True</span>
<span class="o">...</span>     <span class="k">return</span> <span class="n">odd</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,)</span>
<span class="o">...</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nd">@recur.tco</span>
<span class="o">...</span> <span class="k">def</span> <span class="nf">odd</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
<span class="o">...</span>     <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span>
<span class="o">...</span>     <span class="k">return</span> <span class="n">even</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,)</span>
<span class="o">...</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">even</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span>
<span class="bp">True</span>
</pre></div>
<p><strong>Attention:</strong> be careful with mutable/immutable data structures processing.</p>
<h2>
<a name="user-content-itertools-recipes" class="anchor" href="#itertools-recipes" aria-hidden="true"><span class="octicon octicon-link"></span></a>Itertools recipes</h2>
<p><tt>fn.uniform</tt> provides you with "unification"
of lazy functionality for few functions to work the same way in Python
2+/3+:</p>
<ul>
<li>
<tt>map</tt> (returns <tt>itertools.imap</tt> in Python 2+)</li>
<li>
<tt>filter</tt> (returns <tt>itertools.ifilter</tt> in Python 2+)</li>
<li>
<tt>reduce</tt> (returns <tt>functools.reduce</tt> in Python 3+)</li>
<li>
<tt>zip</tt> (returns <tt>itertools.izip</tt> in Python 2+)</li>
<li>
<tt>range</tt> (returns <tt>xrange</tt> in Python 2+)</li>
<li>
<tt>filterfalse</tt> (returns <tt>itertools.ifilterfalse</tt> in Python 2+)</li>
<li>
<tt>zip_longest</tt> (returns <tt>itertools.izip_longest</tt> in Python 2+)</li>
<li>
<tt>accumulate</tt> (backported to Python &lt; 3.3)</li>
</ul><p><tt>fn.iters</tt> is high-level recipes to work with iterators. Most
of them taken from <a href="http://docs.python.org/2.7/library/itertools.html#itertools.product">Python
docs</a>
and adopted to work both with Python 2+/3+. Such recipes as <tt>drop</tt>,
<tt>takelast</tt>, <tt>droplast</tt>, <tt>splitat</tt>, <tt>splitby</tt> I have already
submitted as <a href="http://bugs.python.org/issue16774">docs patch</a> which is
review status just now.</p>
<ul>
<li>
<tt>take</tt>, <tt>drop</tt>
</li>
<li>
<tt>takelast</tt>, <tt>droplast</tt>
</li>
<li>
<tt>head</tt> (alias: <tt>first</tt>), <tt>tail</tt> (alias: <tt>rest</tt>)</li>
<li>
<tt>second</tt>, <tt>ffirst</tt>
</li>
<li>
<tt>compact</tt>, <tt>reject</tt>
</li>
<li><tt>iterate</tt></li>
<li><tt>consume</tt></li>
<li><tt>nth</tt></li>
<li>
<tt>padnone</tt>, <tt>ncycles</tt>
</li>
<li><tt>repeatfunc</tt></li>
<li>
<tt>grouper</tt>, <tt>powerset</tt>, <tt>pairwise</tt>
</li>
<li><tt>roundrobin</tt></li>
<li>
<tt>partition</tt>, <tt>splitat</tt>, <tt>splitby</tt>
</li>
<li><tt>flatten</tt></li>
<li><tt>iter_except</tt></li>
</ul><p>More information about use cases you can find in docstrings for each
function in <a href="https://github.com/kachayev/fn.py/blob/master/fn/iters.py">source
code</a> and
in <a href="https://github.com/kachayev/fn.py/blob/master/tests.py">test
cases</a>.</p>
<h2>
<a name="user-content-high-level-operations-with-functions" class="anchor" href="#high-level-operations-with-functions" aria-hidden="true"><span class="octicon octicon-link"></span></a>High-level operations with functions</h2>
<p><tt>fn.F</tt> is a useful function wrapper to provide easy-to-use partial
application and functions composition.</p>
<div class="highlight highlight-python"><pre>
<span class="kn">from</span> <span class="nn">fn</span> <span class="kn">import</span> <span class="n">F</span><span class="p">,</span> <span class="n">_</span>
<span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">add</span><span class="p">,</span> <span class="n">mul</span>

<span class="c"># F(f, *args) means partial application</span>
<span class="c"># same as functools.partial but returns fn.F instance</span>
<span class="k">assert</span> <span class="n">F</span><span class="p">(</span><span class="n">add</span><span class="p">,</span> <span class="mi">1</span><span class="p">)(</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">11</span>

<span class="c"># F &lt;&lt; F means functions composition,</span>
<span class="c"># so (F(f) &lt;&lt; g)(x) == f(g(x))</span>
<span class="n">f</span> <span class="o">=</span> <span class="n">F</span><span class="p">(</span><span class="n">add</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">F</span><span class="p">(</span><span class="n">mul</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="k">assert</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]))</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">201</span><span class="p">]</span>
<span class="k">assert</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">F</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="nb">str</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">_</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">_</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)))</span> <span class="o">==</span> <span class="p">[</span><span class="s">"1"</span><span class="p">,</span> <span class="s">"4"</span><span class="p">,</span> <span class="s">"9"</span><span class="p">]</span>
</pre></div>
<p>It also give you move readable in many cases "pipe" notation to deal with functions composition:</p>
<div class="highlight highlight-python"><pre>
<span class="kn">from</span> <span class="nn">fn</span> <span class="kn">import</span> <span class="n">F</span><span class="p">,</span> <span class="n">_</span>
<span class="kn">from</span> <span class="nn">fn.iters</span> <span class="kn">import</span> <span class="nb">filter</span><span class="p">,</span> <span class="nb">range</span>

<span class="n">func</span> <span class="o">=</span> <span class="n">F</span><span class="p">()</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="nb">filter</span><span class="p">,</span> <span class="n">_</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="nb">sum</span>
<span class="k">assert</span> <span class="n">func</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="o">==</span> <span class="mi">15</span>
</pre></div>
<p>You can find more examples for compositions usage in <tt>fn._</tt>
implementation <a href="https://github.com/kachayev/fn.py/blob/master/fn/underscore.py">source
code</a>.</p>
<p><tt>fn.op.apply</tt> executes given function with given positional arguments
in list (or any other iterable). <tt>fn.op.flip</tt> returns you function
that will reverse arguments order before apply.</p>
<div class="highlight highlight-python"><pre>
<span class="kn">from</span> <span class="nn">fn.op</span> <span class="kn">import</span> <span class="nb">apply</span><span class="p">,</span> <span class="n">flip</span>
<span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">add</span><span class="p">,</span> <span class="n">sub</span>

<span class="k">assert</span> <span class="nb">apply</span><span class="p">(</span><span class="n">add</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span> <span class="o">==</span> <span class="mi">3</span>
<span class="k">assert</span> <span class="n">flip</span><span class="p">(</span><span class="n">sub</span><span class="p">)(</span><span class="mi">20</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">10</span>
<span class="k">assert</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">apply</span><span class="p">,</span> <span class="p">[</span><span class="n">add</span><span class="p">,</span> <span class="n">mul</span><span class="p">],</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">)]))</span> <span class="o">==</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">200</span><span class="p">]</span>
</pre></div>
<p><tt>fn.op.foldl</tt> and <tt>fn.op.foldr</tt> are folding operators. Each accepts function with arity 2 and returns function that can be used to reduce iterable to scalar: from left-to-right and from right-to-left in case of <tt>foldl</tt> and <tt>foldr</tt> respectively.</p>
<div class="highlight highlight-python"><pre>
<span class="kn">from</span> <span class="nn">fn</span> <span class="kn">import</span> <span class="n">op</span><span class="p">,</span> <span class="n">_</span>

<span class="n">folder</span> <span class="o">=</span> <span class="n">op</span><span class="o">.</span><span class="n">foldr</span><span class="p">(</span><span class="n">_</span> <span class="o">*</span> <span class="n">_</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="k">assert</span> <span class="mi">6</span> <span class="o">==</span> <span class="n">op</span><span class="o">.</span><span class="n">foldl</span><span class="p">(</span><span class="n">_</span> <span class="o">+</span> <span class="n">_</span><span class="p">)([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="k">assert</span> <span class="mi">6</span> <span class="o">==</span> <span class="n">folder</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
</pre></div>
<p>Use case specific for right-side folding is:</p>
<div class="highlight highlight-python"><pre>
<span class="kn">from</span> <span class="nn">fn.op</span> <span class="kn">import</span> <span class="n">foldr</span><span class="p">,</span> <span class="n">call</span>

<span class="k">assert</span> <span class="mi">100</span> <span class="o">==</span> <span class="n">foldr</span><span class="p">(</span><span class="n">call</span><span class="p">,</span> <span class="mi">0</span> <span class="p">)([</span><span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">s</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">k</span><span class="p">:</span> <span class="n">k</span><span class="o">+</span><span class="mi">10</span><span class="p">])</span>
<span class="k">assert</span> <span class="mi">400</span> <span class="o">==</span> <span class="n">foldr</span><span class="p">(</span><span class="n">call</span><span class="p">,</span> <span class="mi">10</span><span class="p">)([</span><span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">s</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">k</span><span class="p">:</span> <span class="n">k</span><span class="o">+</span><span class="mi">10</span><span class="p">])</span>
</pre></div>
<h2>
<a name="user-content-functional-style-for-error-handling" class="anchor" href="#functional-style-for-error-handling" aria-hidden="true"><span class="octicon octicon-link"></span></a>Functional style for error-handling</h2>
<p><tt>fn.monad.Option</tt> represents optional values, each instance of <tt>Option</tt> can be either instance of <tt>Full</tt> or <tt>Empty</tt>. It provides you with simple way to write long computation sequences and get rid of many <tt>if/else</tt> blocks. See usage examples below.</p>
<p>Assume that you have <tt>Request</tt> class that gives you parameter value by its name. To get uppercase notation for non-empty striped value:</p>
<div class="highlight highlight-python"><pre>
<span class="k">class</span> <span class="nc">Request</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">parameter</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">Request</span><span class="p">(</span><span class="n">testing</span><span class="o">=</span><span class="s">"Fixed"</span><span class="p">,</span> <span class="n">empty</span><span class="o">=</span><span class="s">"   "</span><span class="p">)</span>
<span class="n">param</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">parameter</span><span class="p">(</span><span class="s">"testing"</span><span class="p">)</span>
<span class="k">if</span> <span class="n">param</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">fixed</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">param</span> <span class="o">=</span> <span class="n">param</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">param</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">fixed</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">fixed</span> <span class="o">=</span> <span class="n">param</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span>
</pre></div>
<p>Hmm, looks ugly.. Update code with <tt>fn.monad.Option</tt>:</p>
<div class="highlight highlight-python"><pre>
<span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">methodcaller</span>
<span class="kn">from</span> <span class="nn">fn.monad</span> <span class="kn">import</span> <span class="n">optionable</span>

<span class="k">class</span> <span class="nc">Request</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
    <span class="nd">@optionable</span>
    <span class="k">def</span> <span class="nf">parameter</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">Request</span><span class="p">(</span><span class="n">testing</span><span class="o">=</span><span class="s">"Fixed"</span><span class="p">,</span> <span class="n">empty</span><span class="o">=</span><span class="s">"   "</span><span class="p">)</span>
<span class="n">fixed</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">parameter</span><span class="p">(</span><span class="s">"testing"</span><span class="p">)</span>
         <span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">methodcaller</span><span class="p">(</span><span class="s">"strip"</span><span class="p">))</span>
         <span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="nb">len</span><span class="p">)</span>
         <span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">methodcaller</span><span class="p">(</span><span class="s">"upper"</span><span class="p">))</span>
         <span class="o">.</span><span class="n">get_or</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
</pre></div>
<p><tt>fn.monad.Option.or_call</tt> is good method for trying several variant to end computation. I.e. use have <tt>Request</tt> class with optional attributes <tt>type</tt>, <tt>mimetype</tt>, <tt>url</tt>. You need to evaluate "request type" using at least one attribute:</p>
<div class="highlight highlight-python"><pre>
<span class="kn">from</span> <span class="nn">fn.monad</span> <span class="kn">import</span> <span class="n">Option</span>

<span class="n">request</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="s">"face.png"</span><span class="p">,</span> <span class="n">mimetype</span><span class="o">=</span><span class="s">"PNG"</span><span class="p">)</span>
<span class="n">tp</span> <span class="o">=</span> <span class="n">Option</span> \
        <span class="o">.</span><span class="n">from_value</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">"type"</span><span class="p">,</span> <span class="bp">None</span><span class="p">))</span> \ <span class="c"># check "type" key first</span>
        <span class="o">.</span><span class="n">or_call</span><span class="p">(</span><span class="n">from_mimetype</span><span class="p">,</span> <span class="n">request</span><span class="p">)</span> \ <span class="c"># or.. check "mimetype" key</span>
        <span class="o">.</span><span class="n">or_call</span><span class="p">(</span><span class="n">from_extension</span><span class="p">,</span> <span class="n">request</span><span class="p">)</span> \ <span class="c"># or... get "url" and check extension</span>
        <span class="o">.</span><span class="n">get_or</span><span class="p">(</span><span class="s">"application/undefined"</span><span class="p">)</span>
</pre></div>
<h2>
<a name="user-content-installation" class="anchor" href="#installation" aria-hidden="true"><span class="octicon octicon-link"></span></a>Installation</h2>
<p>To install <tt>fn.py</tt>, simply:</p>
<div class="highlight highlight-console"><pre>
<span class="gp">$</span> pip install fn
</pre></div>
<p>Or, if you absolutely must:</p>
<div class="highlight highlight-console"><pre>
<span class="gp">$</span> easy_install fn
</pre></div>
<p>You can also build library from source</p>
<div class="highlight highlight-console"><pre>
<span class="gp">$</span> git clone https://github.com/kachayev/fn.py.git
<span class="gp">$</span> <span class="nb">cd </span>fn.py
<span class="gp">$</span> python setup.py install
</pre></div>
<h2>
<a name="user-content-work-in-progress" class="anchor" href="#work-in-progress" aria-hidden="true"><span class="octicon octicon-link"></span></a>Work in progress</h2>
<p>"Roadmap":</p>
<ul>
<li>
<tt>fn.monad.Either</tt> to deal with error logging</li>
<li>C-accelerator for most modules</li>
</ul><p>Ideas to think about:</p>
<ul>
<li>Curried function builder to simplify
<tt>lambda arg1: lambda arg2: ...</tt>
</li>
<li>Scala-style for-yield loop to simplify long map/filter blocks</li>
</ul><h2>
<a name="user-content-contribute" class="anchor" href="#contribute" aria-hidden="true"><span class="octicon octicon-link"></span></a>Contribute</h2>
<ol>
<li>Check for open issues or open a fresh issue to start a discussion
around a feature idea or a bug.</li>
<li>Fork the repository on Github to start making your changes to the
master branch (or branch off of it).</li>
<li>Write a test which shows that the bug was fixed or that the feature
works as expected.</li>
</ol><h2>
<a name="user-content-how-to-find-me" class="anchor" href="#how-to-find-me" aria-hidden="true"><span class="octicon octicon-link"></span></a>How to find me</h2>
<ul>
<li>Twitter: <a href="https://twitter.com/kachayev">@kachayev</a>
</li>
<li>Email: kachayev &lt;at&gt; gmail.com</li>
</ul></article>
  </div>


        </div>

      </div><!-- /.repo-container -->
      <div class="modal-backdrop"></div>
    </div><!-- /.container -->
  </div><!-- /.site -->


    </div><!-- /.wrapper -->

      <div class="container">
  <div class="site-footer">
    <ul class="site-footer-links right">
      <li><a href="https://status.github.com/">Status</a></li>
      <li><a href="http://developer.github.com">API</a></li>
      <li><a href="http://training.github.com">Training</a></li>
      <li><a href="http://shop.github.com">Shop</a></li>
      <li><a href="/blog">Blog</a></li>
      <li><a href="/about">About</a></li>

    </ul>

    <a href="/">
      <span class="mega-octicon octicon-mark-github" title="GitHub"></span>
    </a>

    <ul class="site-footer-links">
      <li>&copy; 2014 <span title="0.05029s from github-fe131-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="/site/terms">Terms</a></li>
        <li><a href="/site/privacy">Privacy</a></li>
        <li><a href="/security">Security</a></li>
        <li><a href="/contact">Contact</a></li>
    </ul>
  </div><!-- /.site-footer -->
</div><!-- /.container -->


    <div class="fullscreen-overlay js-fullscreen-overlay" id="fullscreen_overlay">
  <div class="fullscreen-container js-fullscreen-container">
    <div class="textarea-wrap">
      <textarea name="fullscreen-contents" id="fullscreen-contents" class="fullscreen-contents js-fullscreen-contents" placeholder="" data-suggester="fullscreen_suggester"></textarea>
    </div>
  </div>
  <div class="fullscreen-sidebar">
    <a href="#" class="exit-fullscreen js-exit-fullscreen tooltipped tooltipped-w" aria-label="Exit Zen Mode">
      <span class="mega-octicon octicon-screen-normal"></span>
    </a>
    <a href="#" class="theme-switcher js-theme-switcher tooltipped tooltipped-w"
      aria-label="Switch themes">
      <span class="octicon octicon-color-mode"></span>
    </a>
  </div>
</div>



    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <a href="#" class="octicon octicon-x close js-ajax-error-dismiss" aria-label="Dismiss error"></a>
      Something went wrong with that request. Please try again.
    </div>


      <script crossorigin="anonymous" src="https://assets-cdn.github.com/assets/frameworks-90c3c3197777a26c93f4c80872dac101732fcb00.js" type="text/javascript"></script>
      <script async="async" crossorigin="anonymous" src="https://assets-cdn.github.com/assets/github-0f06d0f46fe7bcfbf31f2380f23aec15ba21b8ec.js" type="text/javascript"></script>
      
      
        <script async src="https://www.google-analytics.com/analytics.js"></script>
  </body>
</html>

