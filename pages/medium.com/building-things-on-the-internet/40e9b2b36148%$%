<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" user-scalable="no"><title>Parallelism in one line — Medium</title><link rel="canonical" href="https://medium.com/@thechriskiehl/parallelism-in-one-line-40e9b2b36148"><meta name="title" content="Parallelism in one line"><meta name="description" content="A Better Model for Day to Day Threading Tasks"><meta property="og:site_name" content="Medium"><meta property="og:title" content="Parallelism in one line"><meta property="og:url" content="https://medium.com/@thechriskiehl/parallelism-in-one-line-40e9b2b36148"><meta property="og:image" content="https://d262ilb51hltx0.cloudfront.net/max/800/1*wpwXOtljNqtI0jb1J15AxA.jpeg"><meta property="fb:app_id" content="542599432471018"><meta property="og:description" content="A Better Model for Day to Day Threading Tasks"><meta name="twitter:site" content="@Medium"><link rel="publisher" href="https://plus.google.com/103654360130207659246"><link rel="author" href="https://medium.com/@thechriskiehl"><meta property="og:type" content="article"><meta name="twitter:card" content="summary_large_image"><meta property="article:publisher" content="https://www.facebook.com/medium"><meta property="article:author" content="https://medium.com/@thechriskiehl"><meta property="article:published_time" content="2013-12-29T23:12:00.159Z"><meta name="twitter:creator" content="@thechriskiehl"><meta name="twitter:app:name:iphone" content="Medium"><meta name="twitter:app:id:iphone" content="828256236"><meta name="twitter:app:url:iphone" content="medium:/p/40e9b2b36148"><meta property="al:ios:app_name" content="Medium"><meta property="al:ios:app_store_id" content="828256236"><meta property="al:ios:url" content="medium:/p/40e9b2b36148"><meta property="al:web:url" content="https://medium.com/@thechriskiehl/parallelism-in-one-line-40e9b2b36148"><script>if (window.top !== window.self) window.top.location = window.self.location.href;var OB_startTime = new Date().getTime(); var OB_fontLoaded = 0; var OB_loadErrors = []; function _onerror(e) { OB_loadErrors.push(e) }; if (document.addEventListener) document.addEventListener('error', _onerror, true); else if (document.attachEvent) document.attachEvent('onerror', _onerror); function _asyncScript(u) {var d = document, f = d.getElementsByTagName('script')[0], s = d.createElement('script'); s.type = 'text/javascript'; s.async = true; s.src = u; f.parentNode.insertBefore(s, f);}function _asyncStyles(u) {var d = document, f = d.getElementsByTagName('script')[0], s = d.createElement('link'); s.rel = 'stylesheet'; s.href = u; f.parentNode.insertBefore(s, f);}(function() {var config = {kitId: "dta5koc", scriptTimeout: 3000, active: function(){window.requestAnimationFrame && window.requestAnimationFrame(function(){OB_fontLoaded = new Date().getTime(); window._onWebfontLoad&&window._onWebfontLoad();})}, inactive: function(){window._onWebfontError&&window._onWebfontError()}};var h=document.getElementsByTagName("html")[0];h.className+=" wf-loading";var t=setTimeout(function(){h.className=h.className.replace(/( |^)wf-loading( |$)/g,"");h.className+=" wf-inactive";window._onWebfontError&&window._onWebfontError()},config.scriptTimeout);var tk=document.createElement("script");tk.src='//use.typekit.net/'+config.kitId+'.js';tk.type="text/javascript";tk.async="true";tk.onload=tk.onreadystatechange=function(){var a=this.readyState;if(a&&a!="complete"&&a!="loaded")return;clearTimeout(t);try{Typekit.load(config)}catch(b){}};var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(tk,s)})();var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-24232453-2']); _gaq.push(['_trackPageview']); _asyncScript(('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js');var _kmq = _kmq || []; var _kmk = _kmk || '965ccfe7459a74a1209b1412b24fe962252de6b3'; _asyncScript('//i.kissmetrics.com/i.js'); _asyncScript('//doug1izaerwt3.cloudfront.net/' + _kmk + '.1.js');</script><script>_asyncStyles('https:\/\/dnqgz544uhbo8.cloudfront.net\/_\/fp\/css\/main-sprites.bHy56f2tBKxt4HZt-XIMwA.css')</script><link rel="stylesheet" href="https://dnqgz544uhbo8.cloudfront.net/_/fp/css/main-base.-Rg75F0rXZL1fT-7lqTHMQ.css"><!--[if lt IE 9]><script charset="UTF-8" src="https://dnqgz544uhbo8.cloudfront.net/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js"></script><![endif]--><link rel="apple-touch-icon-precomposed" sizes="152x152" href="/apple-touch-icon-precomposed-152.png"><link rel="apple-touch-icon-precomposed" sizes="120x120" href="/apple-touch-icon-precomposed-120.png"><link rel="apple-touch-icon-precomposed" sizes="76x76" href="/apple-touch-icon-precomposed-76.png"><link rel="apple-touch-icon-precomposed" href="/apple-touch-icon-precomposed.png"></head><body itemscope itemtype="http://schema.org/Article" class="template-flex-article os- js-loading "><nav class="siteNav" tabindex="-1"><div class="siteNav-scrollableContainer"><ul class="siteNavList"><li class="siteNavList-item navigable-list-item siteNavList-item--home"><a class="siteNavList-button" title="Go home" href="/" tabindex="-1" ><span class="icon icon--logoM"></span>Home</a><a class="siteNavList-button--secondary" title="Search Medium" href="/search" tabindex="-1"><span class="icon icon--search"><span class="u-screenReaderText">search</span></span></a></li><li class="siteNavList-item navigable-list-item"><a class="siteNavList-button" title="Collections" href="/collections" tabindex="-1"><span class="icon icon--collections"></span>Collections</a></li><li class="siteNavList-item navigable-list-item"><a class="button button--light button--primary siteNavList-button--centered" title="Sign in to Medium" data-action="sign-in-prompt" href="/m/signin" tabindex="-1">Sign in or create an account</a></li></ul></div></nav><div class="siteNav-overlay"></div><div class="site-main" id="container"><div class="butterBar butterBar--error"></div><div class="surface"><div id="prerendered" class="screenContent"><div class="metabar u-clearfix metabar--light metabar--top metabar--postArticle"><div class="metabar-bar"></div><div class="metabar-block u-alignLeft"><button class="siteNav-logo" data-action="open-nav"><span class="icon icon--logoM"><span class="u-screenReaderText">Medium site navigation</span></span><div class="siteNav-activityFlag"></div></button><span class="postMetaInline postMetaInline--authorDateline"><a href="/@thechriskiehl" class="avatar avatar--iconWithName avatar--inline link link--secondary" title="Go to the profile of Chris" ><img src="https://d262ilb51hltx0.cloudfront.net/fit/c/64/64/0*eNyuMM6QCQPGhcjx.png" class="avatar-image avatar-image--iconWithName" title="Chris"><span class="avatar-span avatar-span--iconWithName">Chris</span></a><span class="postMetaInline-date" data-tooltip="Updated Jan 27"> on <time class="post-date">Dec 29, 2013</time><span></span></div><div class="metabar-block u-alignRight"><div><div class="voteWidget"></div><div class="metabar-text">6 min</div><div class="button-set"></div></div></div></div><div class="logo-container"></div><div class="editorSidebar"><ul class="tabs"><li class="tabs-item tabs-item--info is-active"><button class="button button--chromeless" title="Info" data-action="show-tab" data-action-value="info">Info</button></li><li class="tabs-item tabs-item--history"><button class="button button--chromeless" title="History" data-action="show-tab" data-action-value="history">History</button></li><li class="tabs-item tabs-item--cancel"><button class="button" title="Exit edit mode, discarding changes" data-action="cancel">Cancel</button></li><li class="tabs-item tabs-item--publishChanges"><button class="button button--primary button--publish" title="Publish" data-action="publish">Publish changes</button></li></ul><div class="editorSidebar-content"><div class="postMetaBlock"><div class="postMetaBlock-title"></div><div class="postMetaBlock-subtitle"></div><div class="postMetaBlock-draftLink u-hide"><p class="postMetaBlock-label">Share this link to get feedback</p><input class="textInput textInput--chromeless u-fillWidth js-draftUrl"></div><div class="postMetaBlock-submitDraft"></div></div><div class="postHistory"></div></div></div><article class="postArticle  is-languageTier1" data-allow-notes="true"><div class="postField postField--image imagePicker postField--fullImage imagePicker-layout--fill" data-url="https://d262ilb51hltx0.cloudfront.net/fit/t/1200/960/gradv/29/81/55/1*wpwXOtljNqtI0jb1J15AxA.jpeg" data-image-id="1*wpwXOtljNqtI0jb1J15AxA.jpeg" data-width="1000" data-height="1500" data-image-style="full"><div class="storyCover" data-load-img=".postHeaderImage--cover"><div class="imagePicker-targetClone"></div><div class="imagePicker-target storyCover-image" style="background-image: url(https://d262ilb51hltx0.cloudfront.net/fit/t/1200/960/gradv/29/81/55/1*wpwXOtljNqtI0jb1J15AxA.jpeg);"></div><div class="postPreview u-foreground postPreview--withImage postPreview--unfiltered"><div class="postPreview-content layoutSingleColumn u-alignMiddle u-fillHeight"><div class="u-alignBlock u-fillWidth"><div class="postPreview-description">Next in trending</div><h3 class="postPreview-title">Parallelism in one line</h3><h4 class="postPreview-subtitle">A Better Model for Day to Day Threading Tasks</h4><ul class="postItemMeta"><li class="postItemMeta-item"><span class="postItemMeta-avatar postItem-author"><a href="/@thechriskiehl" class="avatar avatar--iconWithName avatar--inline" title="Go to the profile of Chris" ><img src="https://d262ilb51hltx0.cloudfront.net/fit/c/64/64/0*eNyuMM6QCQPGhcjx.png" class="avatar-image avatar-image--iconWithName" title="Chris"><span class="avatar-span avatar-span--iconWithName">Chris</span></a></span></li><li class="postItemMeta-item"><span class="readingTime">6 min read</span></li></ul></div></div></div><div class="u-tableRow u-fill"><div class="imagePicker-content storyCover-content"><div data-scroll="post-cover" ><div class="postContent layoutSingleColumn"><header class="postHeader postHeader--notesSource"><h1 itemprop="name" name="title" class="postTitle">Parallelism in one line</h1><h2 name="subtitle" class="postField postField--subtitle">A Better Model for Day to Day Threading Tasks</h2></header></div></div></div></div><span class="storyCover-arrow" data-action="scroll-to-post-start" data-scroll="post-arrow"></span></div></div><section class="postWrapper postWrapper--full"><div class="postWrapper-inner"><div class="postContent"><div class="postContent-inner"><div class="notesSource"><div class="postField postField--body is-newEnterBehavior"><section name="81e7" class=" section--first"><div class="section-divider layoutSingleColumn"><hr class="section-divider"></div><div class="section-content"><div class="section-inner layoutSingleColumn"><p name="66bf" class="post-p paragraph--first"><a id="66bf"></a>Python has a terrible rep when it comes to its parallel processing capabilities. Ignoring the standard arguments about its threads and the GIL (which are mostly valid), the real problem I see with parallelism in Python isn&#39;t a technical one, but a pedagogical one. The common tutorials surrounding Threading and Multiprocessing in Python, while generally excellent, are pretty “heavy.” They start in the intense stuff, and stop before they get to the really good, day-to-day useful parts.</p><h3 name="35a3" class="post-h3"><a id="35a3"></a>Traditional Example</h3><p name="52ee" class="post-p"><a id="52ee"></a>A quick survey of the top DDG results for “Python threading tutorial” shows that just about every single one of them gives the same Class + Queue based example.</p><p name="bd16" class="post-p"><a id="bd16"></a><em class="post-pEm">The de-facto, intro to threading/multiprocessing, producer/Consumer example code:</em></p><figure name="9352" class="post-figure"><a id="9352"></a><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 918px;"><div class="aspect-ratio-fill" style="padding-bottom: 131.1%;"></div><img data-image-id="1*ZwRvSeMWp30HonAefgOKGg.png" data-width="737" data-height="966" data-action="zoom" data-action-value="1*ZwRvSeMWp30HonAefgOKGg.png" src="https://d262ilb51hltx0.cloudfront.net/max/800/1*ZwRvSeMWp30HonAefgOKGg.png"></div><figcaption class="imageCaption">Image, because Medium still kind of sucks for posting large code sections. Text is available <a target="_blank" href="https://github.com/chriskiehl/Blog/tree/master/40e9b2b36148" class="post-anchor post-figureAnchor" rel="nofollow">here</a></figcaption></figure><p name="a1d7" class="post-p"><a id="a1d7"></a>Mmm.. Smell those Java roots.</p><p name="2cff" class="post-p"><a id="2cff"></a>Now, I don’t want to give the impression that I think the Producer / Consumer way of handling threading/multiprocessing is wrong — because it’s definitely not. In fact it is perfect for many kinds of problems. However, what I <em class="post-pEm">do</em> think is that it’s not the most useful for day-to-day scripting.</p><h3 name="196f" class="post-h3"><a id="196f"></a>The Problems (as I see them)</h3><p name="f25b" class="post-p"><a id="f25b"></a>For one, you need a boiler-plate class in order to do anything useful. Secondly, you’ll need to maintain a Queue through which you can pipe objects, and to top if all off, you’ll need methods on both ends of the pipe in order to do the actual work (likely involving another queue if you want to communicate two ways or store results).</p><p name="963a" class="post-p"><a id="963a"></a><strong class="post-pStrong">More workers, more problems.</strong></p><p name="a31e" class="post-p"><a id="a31e"></a>From here, next thing you’d likely do is make a pool of those worker classes in order to start squeezing some speed out of your Python. Below is a variation of the example code given in the excellent <a target="_blank" href="http://www.ibm.com/developerworks/aix/library/au-threadingpython/" class="post-anchor post-pAnchor" rel="nofollow">IBM tutorial</a> on threading. It’s a very common scenario in which you spread the task of retrieving web pages across multiple threads.</p><figure name="190e" class="post-figure"><a id="190e"></a><div class="aspectRatioPlaceholder is-locked" style="max-width: 699px; max-height: 891px;"><div class="aspect-ratio-fill" style="padding-bottom: 127.49999999999999%;"></div><img data-image-id="1*UT2EaMTcAFTwKqnLOzuj8Q.png" data-width="699" data-height="891" src="https://d262ilb51hltx0.cloudfront.net/max/800/1*UT2EaMTcAFTwKqnLOzuj8Q.png"></div><figcaption class="imageCaption">Seriously, Medium. Fix your code support. <a target="_blank" href="https://github.com/chriskiehl/Blog/tree/master/40e9b2b36148" class="post-anchor post-figureAnchor" rel="nofollow">Code is Here.</a></figcaption></figure><p name="b1bf" class="post-p"><a id="b1bf"></a>Works like a charm, but look at all that code! Now we&#39;ve got setup methods, lists of threads to keep track of, and worst of all, if you’re anywhere as dead-lock prone as I am, a bunch of join statements to issue. And It only gets more complex from here!</p><p name="7b73" class="post-p paragraph--last"><a id="7b73"></a>What’s been accomplished so far? A whole lotta nothin. Just about everything in the above code is pure plumbing. It’s boiler-plate-y, It’s error prone (Hell, I even forgot to call <em class="post-pEm">task_done() </em>on the queue object while writing this (I’m too lazy to take fix it and take another screenshot)), and it’s a lot of work for little payoff. Luckily, there’s a much better way.</p></div></div></section><section name="e689" class=" section--last"><div class="section-divider layoutSingleColumn"><hr class="section-divider"></div><div class="section-content"><div class="section-inner layoutSingleColumn"><h2 name="0c37" class="post-h2 paragraph--first"><a id="0c37"></a>Introducing: Map</h2><p name="7511" class="post-p"><a id="7511"></a>Map is a cool little function, and the key to easily injecting parallelism into your Python code. For those unfamiliar, map is something lifted from functional languages like Lisp. It is a function which <em class="post-pEm">maps </em>another function over a sequence. e.g.</p><pre name="9fb8" class="post-pre"><a id="9fb8"></a>urls = [&#39;<a target="_blank" href="http://www.yahoo.com%27/" class="post-anchor post-preAnchor" rel="nofollow">http://www.yahoo.com&#39;</a>, &#39;<a target="_blank" href="http://www.reddit.com%27/" class="post-anchor post-preAnchor" rel="nofollow">http://www.reddit.com&#39;</a>]<br>results = map(urllib2.urlopen, urls)</pre><p name="b58a" class="post-p"><a id="b58a"></a>This applies the method <em class="post-pEm">urlopen, </em>on each item in the passed in sequence and stores all of the results in a list. It is more or less equivalent to</p><pre name="c38c" class="post-pre"><a id="c38c"></a>results = []<br>for url in urls: <br>    results.append(urllib2.urlopen(url))</pre><p name="67ab" class="post-p"><a id="67ab"></a>Map handles the iteration over the sequence for us, applies the function, and stores all of the results in a handy list at the end.</p><p name="305c" class="post-p"><a id="305c"></a>Why does this matter? Because with the right libraries, map makes running things in parallel completely trivial!</p><figure name="3b95" class="post-figure"><a id="3b95"></a><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 400px;"><div class="aspect-ratio-fill" style="padding-bottom: 57.099999999999994%;"></div><img data-image-id="1*N3mYNo_FI_1Fa698A_Wf2Q.png" data-width="700" data-height="400" src="https://d262ilb51hltx0.cloudfront.net/max/800/1*N3mYNo_FI_1Fa698A_Wf2Q.png"></div></figure><p name="37d6" class="post-p"><a id="37d6"></a>Parallel versions of the map function are provided by two libraries: <em class="post-pEm">multiprocessing</em><strong class="post-pStrong">, </strong>and also its little known, but equally fantastic step child: <em class="post-pEm">multiprocessing.dummy</em>.</p><p name="8d65" class="post-p"><a id="8d65"></a><em class="post-pEm">Digression:</em> What’s that? Never heard of the threading clone of multiprocessing library called dummy? I hadn&#39;t either until very recently. It has all of <em class="post-pEm">ONE</em><strong class="post-pStrong"> </strong>sentence devoted to it in the multiprocessing documentation page. And that sentence pretty much boils down to “Oh yeah, and this thing exists.” It’s tragically undersold, I tell you!</p><p name="8b5e" class="post-p"><a id="8b5e"></a>Dummy is an exact clone of the multiprocessing module. The only difference is that, whereas multiprocessing works with processes, the dummy module uses threads (which come with all the usual Python limitations). So anything that applies to one, applies to the other. It makes it extremely easy to hop back and forth between the two. Which is especially great for exploratory programming when you’re not quite sure if some framework call is IO or CPU bound.</p><h3 name="4a45" class="post-h3"><a id="4a45"></a>Getting Started</h3><p name="ea1b" class="post-p"><a id="ea1b"></a>To access the parallel versions of the map functions the first thing you need to do is import the modules that contain them:</p><pre name="dfc5" class="post-pre"><a id="dfc5"></a>from multiprocessing import Pool<br>from multiprocessing.dummy import Pool as ThreadPool </pre><p name="856a" class="post-p"><a id="856a"></a>and instantiate their Pool objects in the code:</p><pre name="5b05" class="post-pre"><a id="5b05"></a>pool = ThreadPool() </pre><p name="5684" class="post-p"><a id="5684"></a>This single statement handles everything we did in the seven line <em class="post-pEm">build_worker_pool</em> function from example2.py. Namely, It creates a bunch of available workers, starts them up so that they’re ready to do some work, and stores all of them in variable so that they’re easily accessed.</p><p name="2a7e" class="post-p"><a id="2a7e"></a>The pool objects take a few parameters, but for now, the only one worth noting is the first one: <em class="post-pEm">processes. </em>This sets the number of workers in the pool. If you leave it blank, it will default to the number of Cores in your machine.</p><p name="6923" class="post-p"><a id="6923"></a>In the general case, if you’re using the multiprocessing pool for CPU bound tasks, more cores equals more speed (I say that with <em class="post-pEm">a lot</em> of caveats). However, when threading and dealing with network bound stuff, things seem to vary wildly, so it’s a good idea to experiment with the exact size of the pool.</p><pre name="662a" class="post-pre"><a id="662a"></a>pool = ThreadPool(4) # Sets the pool size to 4</pre><p name="5d76" class="post-p"><a id="5d76"></a>If you run too many threads, you’ll waste more time switching between then than doing useful work, so it’s always good to play around a little bit until you find the sweet spot for the task at hand.</p><p name="70ce" class="post-p"><a id="70ce"></a>So, now with the pool objects created, and simple parallelism at our fingertips, let’s rewrite the url opener from example2.py!</p><figure name="f7fe" class="post-figure"><a id="f7fe"></a><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 513px;"><div class="aspect-ratio-fill" style="padding-bottom: 73.3%;"></div><img data-image-id="1*ow6Idq9Gf3ZahA6SDrM36w.png" data-width="700" data-height="513" src="https://d262ilb51hltx0.cloudfront.net/max/800/1*ow6Idq9Gf3ZahA6SDrM36w.png"></div></figure><p name="8eb7" class="post-p"><a id="8eb7"></a>Look at that! The code that actually does work is all of 4 lines. 3 of which are simple bookkeeping ones. The <em class="post-pEm">map</em> call handles everything our previous 40 line example did with ease! For funzies, I timed both approaches as well as different pool sizes.</p><figure name="a590" class="post-figure"><a id="a590"></a><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 382px;"><div class="aspect-ratio-fill" style="padding-bottom: 54.6%;"></div><img data-image-id="1*zcFxYbBKTxUdmVNS_rgrQg.png" data-width="700" data-height="382" src="https://d262ilb51hltx0.cloudfront.net/max/800/1*zcFxYbBKTxUdmVNS_rgrQg.png"></div></figure><h3 name="0d81" class="post-h3"><a id="0d81"></a>Results:</h3><figure name="8f2f" class="post-figure"><a id="8f2f"></a><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 215px;"><div class="aspect-ratio-fill" style="padding-bottom: 30.7%;"></div><img data-image-id="1*nPNN9J-DgNTyPe5MzJh5rA.png" data-width="700" data-height="215" src="https://d262ilb51hltx0.cloudfront.net/max/800/1*nPNN9J-DgNTyPe5MzJh5rA.png"></div></figure><p name="5f6c" class="post-p"><a id="5f6c"></a>Pretty awesome! And also shows why it’s good to play around a bit with the pool size. Any pool size greater than 9 quickly lead to diminishing returns on my machine.</p><h2 name="ef6d" class="post-h2"><a id="ef6d"></a>Real World Example 2:</h2><p name="8ab5" class="post-p"><a id="8ab5"></a>Thumbnailing thousands of images</p><p name="f68c" class="post-p"><a id="f68c"></a>Let’s now do something CPU bound! A pretty common task for me at work is manipulating massive image folders. One of those transformations is creating thumbnails. It is ripe for being run in parallel.</p><p name="c838" class="post-p"><a id="c838"></a><strong class="post-pStrong">The basic single process setup</strong></p><figure name="a1fa" class="post-figure"><a id="a1fa"></a><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 465px;"><div class="aspect-ratio-fill" style="padding-bottom: 66.4%;"></div><img data-image-id="1*2lX7z_CeXtjPEb7O2bZLmg.png" data-width="700" data-height="465" src="https://d262ilb51hltx0.cloudfront.net/max/800/1*2lX7z_CeXtjPEb7O2bZLmg.png"></div></figure><p name="57f0" class="post-p"><a id="57f0"></a>A little hacked together for example, but in essence, a folder is passed into the program, from that it grabs all of the images in the folder, then finally creates the thumbnails and saves them to their own directory.</p><p name="6997" class="post-p"><a id="6997"></a>On my machine, this took 27.9 seconds to process ~6000 images.</p><p name="bc38" class="post-p"><a id="bc38"></a>If we replace the <em class="post-pEm">for</em> loop with a parallel map call:</p><figure name="d876" class="post-figure"><a id="d876"></a><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 465px;"><div class="aspect-ratio-fill" style="padding-bottom: 66.4%;"></div><img data-image-id="1*5tDK9MoLNVB9TS3M1d24dw.png" data-width="700" data-height="465" src="https://d262ilb51hltx0.cloudfront.net/max/800/1*5tDK9MoLNVB9TS3M1d24dw.png"></div></figure><p name="be04" class="post-p"><a id="be04"></a><strong class="post-pStrong">5.6</strong> <strong class="post-pStrong">seconds</strong>!</p><p name="2a9b" class="post-p"><a id="2a9b"></a>That’s a pretty massive speedup for only changing a few lines of code. The production version of this is even faster by splitting cpu and io tasks into their own respective processes and threads — which is usually a recipe for deadlocked code. However, due to the explicit nature of map, and the lack of manual thread management, it feels remarkably easy to mix and match the two in a way that is clean, reliable, and easy to debug.</p><p name="3116" class="post-p paragraph--last"><a id="3116"></a>So there it is. Parallelism in (almost) one line.</p></div></div></section></div></div><div class="postFooter-actions supplementalPostContent layoutSingleColumn"><div class="button-set"><button class="button button--large button--toggle button--primary button--suffix recommendButton u-noUserSelect "data-action="sign-in-prompt"data-requires-token="true"data-popover-type="sign-in"data-redirect="/_/vote/p/40e9b2b36148"data-popover="Sign in to recommend" data-popover-position="bottom" data-popover-signin-type="recommend"title="Recommend this post"><span class="icon icon--heart"></span><span class="button-label recommendButton-label" data-suffix="ed">Recommend</span></button><div class="postfooter-secondaryActions"><a class="button button--chromeless" title="Share this post on Twitter" data-action="share-on-twitter" data-action-value="40e9b2b36148"><i class="icon icon--twitter"></i></a><a class="button button--chromeless" title="Share this post on Facebook" data-action="share-on-facebook" data-action-value="40e9b2b36148"><i class="icon icon--facebook"></i></a></div></div></div><div class="postFollowUps supplementalPostContent layoutSingleColumn"></div><div class="postFooter-cards supplementalPostContent layoutSingleColumn"><div ><h4 class="cards-heading">Written by</h4><ul class="cards"><li class="card card-user"><div class="card-imageWrapper "><a href="/@thechriskiehl" class="avatar avatar--medium" title="Go to the profile of Chris" ><img src="https://d262ilb51hltx0.cloudfront.net/fit/c/160/160/0*eNyuMM6QCQPGhcjx.png" class="avatar-image avatar-image--medium" title="Chris"></a></div><div class="card-content"><h3 class="card-name"><a href="/@thechriskiehl" data-id="d4c86f3064ef" title="Go to the profile of Chris" rel="author" class="link link--primary">Chris</a></h3><div class="button-set"><button class="button button--small button--follow button--toggle button--suffix button--primary u-noUserSelect "data-action="sign-in-prompt"data-requires-token="true"data-popover-type="sign-in"data-redirect="/_/subscribe/user/d4c86f3064ef"data-popover="Sign in to follow this user" data-popover-position="bottom" data-popover-signin-type=""><span class="button-label follow-label" data-suffix="ing">Follow</span></button></div></div></li></ul></div></div></div></div></div></section><footer class="post-footer supplementalPostContent"></footer></article></div></div></div><div class="loadingBar"></div><script>// <![CDATA[
var GLOBALS = {"addImageAnimationImg":"https://dnqgz544uhbo8.cloudfront.net/_/fp/img/add-image-educational-animation.o-7vvwjxzuGedJM_NpO6Eg.gif","baseUrl":"https://medium.com","bestOfFirstSlug":"may-2013","bestOfLatestSlug":"may-2014","buildLabel":"9753-661f447","contributeSoonUrl":"//medium.com/help-center/3b131d33f3fc","currentUser":{"userId":"lo_e46baaa3696f","id":"lo_e46baaa3696f"},"promoStartWritingBackgroundImage":"https://dnqgz544uhbo8.cloudfront.net/_/fp/img/logged-out-home/camping.vhSr1NbYxkuV0oTUO0-dIA.jpeg","promoStartWritingHomeImage":"https://dnqgz544uhbo8.cloudfront.net/_/fp/img/logged-out-home/post-screenshots.IbMd8HVjZpiqvXLFOQAozQ.png","defaultPreviewImage":"https://dnqgz544uhbo8.cloudfront.net/_/fp/img/default-preview-image.IsBK38jFAJBlWifMLO4z9g.png","defaultUserImage":"https://dnqgz544uhbo8.cloudfront.net/_/fp/img/default-avatar.dmbNkD5D-u45r44go_cf0g.png","deviceWidth":1200,"deviceWidthImageBucket":1200,"devicePixelRatio":1,"embedded":{"value":{"id":"40e9b2b36148","versionId":"1380e13bf73","creatorId":"d4c86f3064ef","creator":{"userId":"d4c86f3064ef","name":"Chris","username":"thechriskiehl","createdAt":1379439983778,"lastPostCreatedAt":1398903776939,"imageId":"0*eNyuMM6QCQPGhcjx.png","backgroundImageId":"","bio":"","virtuals":{"bioHTML":""},"twitterScreenName":"thechriskiehl","type":"User"},"homeCollectionId":"","intendedCollectionId":"","title":"Parallelism in one line","detectedLanguage":"en","latestVersion":"1380e13bf73","latestPublishedVersion":"1380e13bf73","isPublished":true,"hasUnpublishedEdits":false,"latestRev":-1,"createdAt":1387159932754,"updatedAt":1390781527394,"acceptedAt":0,"firstPublishedAt":1388358720159,"latestPublishedAt":1390781527394,"isRead":false,"vote":false,"experimentalCss":"","displayAuthor":"","content":{"subtitle":"A Better Model for Day to Day Threading Tasks","caption":"","bodyModel":{"paragraphs":[{"name":"66bf","type":1,"text":"Python has a terrible rep when it comes to its parallel processing capabilities. Ignoring the standard arguments about its threads and the GIL (which are mostly valid), the real problem I see with parallelism in Python isn't a technical one, but a pedagogical one. The common tutorials surrounding Threading and Multiprocessing in Python, while generally excellent, are pretty “heavy.” They start in the intense stuff, and stop before they get to the really good, day-to-day useful parts.","markups":[],"hasDropCap":false},{"name":"35a3","type":3,"text":"Traditional Example","markups":[],"hasDropCap":false},{"name":"52ee","type":1,"text":"A quick survey of the top DDG results for “Python threading tutorial” shows that just about every single one of them gives the same Class + Queue based example.","markups":[],"hasDropCap":false},{"name":"bd16","type":1,"text":"The de-facto, intro to threading/multiprocessing, producer/Consumer example code:","markups":[{"type":2,"start":0,"end":81}],"hasDropCap":false},{"name":"9352","type":4,"text":"Image, because Medium still kind of sucks for posting large code sections. Text is available here","markups":[{"type":3,"start":93,"end":97,"href":"https://github.com/chriskiehl/Blog/tree/master/40e9b2b36148","title":"","rel":""}],"layout":1,"metadata":{"id":"1*ZwRvSeMWp30HonAefgOKGg.png","originalWidth":737,"originalHeight":966},"hasDropCap":false},{"name":"a1d7","type":1,"text":"Mmm.. Smell those Java roots.","markups":[],"hasDropCap":false},{"name":"2cff","type":1,"text":"Now, I don’t want to give the impression that I think the Producer / Consumer way of handling threading/multiprocessing is wrong — because it’s definitely not. In fact it is perfect for many kinds of problems. However, what I do think is that it’s not the most useful for day-to-day scripting.","markups":[{"type":2,"start":226,"end":228}],"hasDropCap":false},{"name":"196f","type":3,"text":"The Problems (as I see them)","markups":[],"hasDropCap":false},{"name":"f25b","type":1,"text":"For one, you need a boiler-plate class in order to do anything useful. Secondly, you’ll need to maintain a Queue through which you can pipe objects, and to top if all off, you’ll need methods on both ends of the pipe in order to do the actual work (likely involving another queue if you want to communicate two ways or store results).","markups":[],"hasDropCap":false},{"name":"963a","type":1,"text":"More workers, more problems.","markups":[{"type":1,"start":0,"end":28}],"hasDropCap":false},{"name":"a31e","type":1,"text":"From here, next thing you’d likely do is make a pool of those worker classes in order to start squeezing some speed out of your Python. Below is a variation of the example code given in the excellent IBM tutorial on threading. It’s a very common scenario in which you spread the task of retrieving web pages across multiple threads.","markups":[{"type":3,"start":200,"end":212,"href":"http://www.ibm.com/developerworks/aix/library/au-threadingpython/","title":"","rel":""}],"hasDropCap":false},{"name":"190e","type":4,"text":"Seriously, Medium. Fix your code support. Code is Here.","markups":[{"type":3,"start":42,"end":55,"href":"https://github.com/chriskiehl/Blog/tree/master/40e9b2b36148","title":"","rel":""}],"layout":1,"metadata":{"id":"1*UT2EaMTcAFTwKqnLOzuj8Q.png","originalWidth":699,"originalHeight":891},"hasDropCap":false},{"name":"b1bf","type":1,"text":"Works like a charm, but look at all that code! Now we've got setup methods, lists of threads to keep track of, and worst of all, if you’re anywhere as dead-lock prone as I am, a bunch of join statements to issue. And It only gets more complex from here!","markups":[],"hasDropCap":false},{"name":"7b73","type":1,"text":"What’s been accomplished so far? A whole lotta nothin. Just about everything in the above code is pure plumbing. It’s boiler-plate-y, It’s error prone (Hell, I even forgot to call task_done() on the queue object while writing this (I’m too lazy to take fix it and take another screenshot)), and it’s a lot of work for little payoff. Luckily, there’s a much better way.","markups":[{"type":2,"start":180,"end":192}],"hasDropCap":false},{"name":"0c37","type":2,"text":"Introducing: Map","markups":[],"hasDropCap":false},{"name":"7511","type":1,"text":"Map is a cool little function, and the key to easily injecting parallelism into your Python code. For those unfamiliar, map is something lifted from functional languages like Lisp. It is a function which maps another function over a sequence. e.g.","markups":[{"type":2,"start":204,"end":209}],"hasDropCap":false},{"name":"9fb8","type":8,"text":"urls = ['http://www.yahoo.com', 'http://www.reddit.com']\nresults = map(urllib2.urlopen, urls)","markups":[{"type":3,"start":9,"end":30,"href":"http://www.yahoo.com%27/","title":"","rel":"nofollow"},{"type":3,"start":33,"end":55,"href":"http://www.reddit.com%27/","title":"","rel":"nofollow"}],"hasDropCap":false},{"name":"b58a","type":1,"text":"This applies the method urlopen, on each item in the passed in sequence and stores all of the results in a list. It is more or less equivalent to","markups":[{"type":2,"start":24,"end":33}],"hasDropCap":false},{"name":"c38c","type":8,"text":"results = []\nfor url in urls: \n    results.append(urllib2.urlopen(url))","markups":[],"hasDropCap":false},{"name":"67ab","type":1,"text":"Map handles the iteration over the sequence for us, applies the function, and stores all of the results in a handy list at the end.","markups":[],"hasDropCap":false},{"name":"305c","type":1,"text":"Why does this matter? Because with the right libraries, map makes running things in parallel completely trivial!","markups":[],"hasDropCap":false},{"name":"3b95","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*N3mYNo_FI_1Fa698A_Wf2Q.png","originalWidth":700,"originalHeight":400},"hasDropCap":false},{"name":"37d6","type":1,"text":"Parallel versions of the map function are provided by two libraries: multiprocessing, and also its little known, but equally fantastic step child: multiprocessing.dummy.","markups":[{"type":1,"start":84,"end":86},{"type":2,"start":69,"end":84},{"type":2,"start":147,"end":168}],"hasDropCap":false},{"name":"8d65","type":1,"text":"Digression: What’s that? Never heard of the threading clone of multiprocessing library called dummy? I hadn't either until very recently. It has all of ONE sentence devoted to it in the multiprocessing documentation page. And that sentence pretty much boils down to “Oh yeah, and this thing exists.” It’s tragically undersold, I tell you!","markups":[{"type":1,"start":155,"end":156},{"type":2,"start":0,"end":11},{"type":2,"start":152,"end":155}],"hasDropCap":false},{"name":"8b5e","type":1,"text":"Dummy is an exact clone of the multiprocessing module. The only difference is that, whereas multiprocessing works with processes, the dummy module uses threads (which come with all the usual Python limitations). So anything that applies to one, applies to the other. It makes it extremely easy to hop back and forth between the two. Which is especially great for exploratory programming when you’re not quite sure if some framework call is IO or CPU bound.","markups":[],"hasDropCap":false},{"name":"4a45","type":3,"text":"Getting Started","markups":[],"hasDropCap":false},{"name":"ea1b","type":1,"text":"To access the parallel versions of the map functions the first thing you need to do is import the modules that contain them:","markups":[],"hasDropCap":false},{"name":"dfc5","type":8,"text":"from multiprocessing import Pool\nfrom multiprocessing.dummy import Pool as ThreadPool ","markups":[],"hasDropCap":false},{"name":"856a","type":1,"text":"and instantiate their Pool objects in the code:","markups":[],"hasDropCap":false},{"name":"5b05","type":8,"text":"pool = ThreadPool() ","markups":[],"hasDropCap":false},{"name":"5684","type":1,"text":"This single statement handles everything we did in the seven line build_worker_pool function from example2.py. Namely, It creates a bunch of available workers, starts them up so that they’re ready to do some work, and stores all of them in variable so that they’re easily accessed.","markups":[{"type":2,"start":66,"end":83}],"hasDropCap":false},{"name":"2a7e","type":1,"text":"The pool objects take a few parameters, but for now, the only one worth noting is the first one: processes. This sets the number of workers in the pool. If you leave it blank, it will default to the number of Cores in your machine.","markups":[{"type":2,"start":97,"end":108}],"hasDropCap":false},{"name":"6923","type":1,"text":"In the general case, if you’re using the multiprocessing pool for CPU bound tasks, more cores equals more speed (I say that with a lot of caveats). However, when threading and dealing with network bound stuff, things seem to vary wildly, so it’s a good idea to experiment with the exact size of the pool.","markups":[{"type":2,"start":129,"end":134}],"hasDropCap":false},{"name":"662a","type":8,"text":"pool = ThreadPool(4) # Sets the pool size to 4","markups":[],"hasDropCap":false},{"name":"5d76","type":1,"text":"If you run too many threads, you’ll waste more time switching between then than doing useful work, so it’s always good to play around a little bit until you find the sweet spot for the task at hand.","markups":[],"hasDropCap":false},{"name":"70ce","type":1,"text":"So, now with the pool objects created, and simple parallelism at our fingertips, let’s rewrite the url opener from example2.py!","markups":[],"hasDropCap":false},{"name":"f7fe","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*ow6Idq9Gf3ZahA6SDrM36w.png","originalWidth":700,"originalHeight":513},"hasDropCap":false},{"name":"8eb7","type":1,"text":"Look at that! The code that actually does work is all of 4 lines. 3 of which are simple bookkeeping ones. The map call handles everything our previous 40 line example did with ease! For funzies, I timed both approaches as well as different pool sizes.","markups":[{"type":2,"start":110,"end":113}],"hasDropCap":false},{"name":"a590","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*zcFxYbBKTxUdmVNS_rgrQg.png","originalWidth":700,"originalHeight":382},"hasDropCap":false},{"name":"0d81","type":3,"text":"Results:","markups":[],"hasDropCap":false},{"name":"8f2f","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*nPNN9J-DgNTyPe5MzJh5rA.png","originalWidth":700,"originalHeight":215},"hasDropCap":false},{"name":"5f6c","type":1,"text":"Pretty awesome! And also shows why it’s good to play around a bit with the pool size. Any pool size greater than 9 quickly lead to diminishing returns on my machine.","markups":[],"hasDropCap":false},{"name":"ef6d","type":2,"text":"Real World Example 2:","markups":[],"hasDropCap":false},{"name":"8ab5","type":1,"text":"Thumbnailing thousands of images","markups":[],"hasDropCap":false},{"name":"f68c","type":1,"text":"Let’s now do something CPU bound! A pretty common task for me at work is manipulating massive image folders. One of those transformations is creating thumbnails. It is ripe for being run in parallel.","markups":[],"hasDropCap":false},{"name":"c838","type":1,"text":"The basic single process setup","markups":[{"type":1,"start":0,"end":30}],"hasDropCap":false},{"name":"a1fa","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*2lX7z_CeXtjPEb7O2bZLmg.png","originalWidth":700,"originalHeight":465},"hasDropCap":false},{"name":"57f0","type":1,"text":"A little hacked together for example, but in essence, a folder is passed into the program, from that it grabs all of the images in the folder, then finally creates the thumbnails and saves them to their own directory.","markups":[],"hasDropCap":false},{"name":"6997","type":1,"text":"On my machine, this took 27.9 seconds to process ~6000 images.","markups":[],"hasDropCap":false},{"name":"bc38","type":1,"text":"If we replace the for loop with a parallel map call:","markups":[{"type":2,"start":18,"end":21}],"hasDropCap":false},{"name":"d876","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*5tDK9MoLNVB9TS3M1d24dw.png","originalWidth":700,"originalHeight":465},"hasDropCap":false},{"name":"be04","type":1,"text":"5.6 seconds!","markups":[{"type":1,"start":0,"end":3},{"type":1,"start":4,"end":11}],"hasDropCap":false},{"name":"2a9b","type":1,"text":"That’s a pretty massive speedup for only changing a few lines of code. The production version of this is even faster by splitting cpu and io tasks into their own respective processes and threads — which is usually a recipe for deadlocked code. However, due to the explicit nature of map, and the lack of manual thread management, it feels remarkably easy to mix and match the two in a way that is clean, reliable, and easy to debug.","markups":[],"hasDropCap":false},{"name":"3116","type":1,"text":"So there it is. Parallelism in (almost) one line.","markups":[],"hasDropCap":false}],"sections":[{"name":"81e7","startIndex":0},{"name":"e689","startIndex":14}]},"image":{"imageId":"1*wpwXOtljNqtI0jb1J15AxA.jpeg","filter":"","backgroundSize":"full","originalWidth":1000,"originalHeight":1500,"strategy":"crop-fixed","height":0,"width":0}},"media":null,"virtuals":{"currentCollectionId":"","statusForCollection":"APPROVED","createdAtRelative":"7 months ago","updatedAtRelative":"5 months ago","acceptedAtRelative":"","createdAtEnglish":"December 16, 2013","updatedAtEnglish":"January 27, 2014","acceptedAtEnglish":"","firstPublishedAtEnglish":"December 29, 2013","latestPublishedAtEnglish":"January 27, 2014","allowNotes":true,"languageTier":1,"snippet":"A Better Model for Day to Day Threading Tasks","previewImage":{"imageId":"1*wpwXOtljNqtI0jb1J15AxA.jpeg","filter":"","backgroundSize":"full","originalWidth":1000,"originalHeight":1500,"strategy":"resample","height":0,"width":0},"wordCount":1246,"imageCount":9,"readingTime":5.901886792452831,"draftSnippet":"A Better Model for Day to Day Threading Tasks","subtitle":"A Better Model for Day to Day Threading Tasks","isOnReadingList":false,"postedIn":[{"collectionId":"6eeaf1c68f35","collection":{"id":"6eeaf1c68f35","name":"Python, haskell related stuff","slug":"python-haskell-related-stuff","tags":["PYTHON","HASKELL"],"creatorId":"b2bff8ac832e","responseTimeFuzzy":"","description":"languages that interest me","shortDescription":"languages that interest me","image":{"imageId":"1*nVBnB1DjRJXWmDD3aJRI5Q.jpeg","filter":"red","backgroundSize":"contain","originalWidth":500,"originalHeight":378,"strategy":"resample","height":0,"width":0},"metadata":{"postCount":2,"followerCount":8,"activeAt":1388778662314},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":true,"canRemove":true,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false},"isSubscribed":false},"layoutType":1,"logo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"type":"Collection"},"status":"APPROVED","posterId":"b2bff8ac832e"},{"collectionId":"735f5e8aec20","collection":{"id":"735f5e8aec20","name":"Building Things on the Internet","slug":"building-things-on-the-internet","tags":["WEB","WEB DESIGN","FRONTEND"],"creatorId":"df6de9e3b6a6","responseTimeFuzzy":"within a month","description":"Curated by @bkrall —Picks of the best posts about building things on the web.","shortDescription":"Curated by @bkrall —Picks of the best posts about building…","image":{"imageId":"1*qIF0EFUTeZiYBqzZo3Vg1g.jpeg","filter":"","backgroundSize":"contain","originalWidth":1920,"originalHeight":1280,"strategy":"resample","height":0,"width":0},"metadata":{"postCount":488,"followerCount":960,"activeAt":1402438219689},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":true,"canRemove":true,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false},"isSubscribed":false},"layoutType":1,"logo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"type":"Collection"},"status":"APPROVED","posterId":"df6de9e3b6a6"},{"collectionId":"842b36854f80","collection":{"id":"842b36854f80","name":"General Writing: Idea, Thinking, Opinion","slug":"philosophy-logic","tags":["WRITING","THINKING","IDEAS"],"creatorId":"10c138087717","responseTimeFuzzy":"within a week","description":"This is a collection for general writing, thinking, and opinions. [UPDATE] As a collection editor, I don’t have any permission to add your articles in the wild. Please submit your article and I will approve. Also, follow this collection, please.","shortDescription":"This is a collection for general writing, thinking, and…","image":{"imageId":"1*uXuJUuskIbGWdOOZMPVuNw.jpeg","filter":"","backgroundSize":"contain","originalWidth":1600,"originalHeight":1063,"strategy":"resample","height":0,"width":0},"metadata":{"postCount":5861,"followerCount":3482,"activeAt":1403967672982},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":true,"canRemove":true,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false},"isSubscribed":false},"layoutType":1,"logo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"type":"Collection"},"status":"APPROVED","posterId":"10c138087717"},{"collectionId":"ce01be82a5e1","collection":{"id":"ce01be82a5e1","name":"Python Programming Language","slug":"python-programming-language","tags":["PROGRAMMING"],"creatorId":"e385c9f57ec7","responseTimeFuzzy":"within a couple of weeks","description":"Python is a programming language that lets you work more quickly and integrate your systems more effectively.","shortDescription":"Python is a programming language that lets you work more…","image":{"imageId":"1*cfaUm64etujNO-wP_ahxfg.png","filter":"blue","backgroundSize":"contain","originalWidth":1400,"originalHeight":1120,"strategy":"resample","height":0,"width":0},"metadata":{"postCount":35,"followerCount":409,"activeAt":1402413452983},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":true,"canRemove":true,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false},"isSubscribed":false},"layoutType":1,"logo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"type":"Collection"},"status":"APPROVED","posterId":"e385c9f57ec7"}],"publishedInCount":4,"usersBySocialRecommends":[],"notesBySocialRecommends":[],"proposedAtRelative":"","latestPublishedAtAbbreviated":"Jan 27","firstPublishedAtAbbreviated":"Dec 29, 2013"},"coverless":false,"slug":"parallelism-in-one-line","type":"Post","_isPopulated":true},"collaborators":[],"mode":null,"references":{"User":{"d4c86f3064ef":{"userId":"d4c86f3064ef","name":"Chris","username":"thechriskiehl","createdAt":1379439983778,"lastPostCreatedAt":1398903776939,"imageId":"0*eNyuMM6QCQPGhcjx.png","backgroundImageId":"","bio":"","virtuals":{"bioHTML":""},"twitterScreenName":"thechriskiehl","type":"User"}},"Collection":{"6eeaf1c68f35":{"id":"6eeaf1c68f35","name":"Python, haskell related stuff","slug":"python-haskell-related-stuff","tags":["PYTHON","HASKELL"],"creatorId":"b2bff8ac832e","responseTimeFuzzy":"","description":"languages that interest me","shortDescription":"languages that interest me","image":{"imageId":"1*nVBnB1DjRJXWmDD3aJRI5Q.jpeg","filter":"red","backgroundSize":"contain","originalWidth":500,"originalHeight":378,"strategy":"resample","height":0,"width":0},"metadata":{"postCount":2,"followerCount":8,"activeAt":1388778662314},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":true,"canRemove":true,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false},"isSubscribed":false},"layoutType":1,"logo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"type":"Collection"},"735f5e8aec20":{"id":"735f5e8aec20","name":"Building Things on the Internet","slug":"building-things-on-the-internet","tags":["WEB","WEB DESIGN","FRONTEND"],"creatorId":"df6de9e3b6a6","responseTimeFuzzy":"within a month","description":"Curated by @bkrall —Picks of the best posts about building things on the web.","shortDescription":"Curated by @bkrall —Picks of the best posts about building…","image":{"imageId":"1*qIF0EFUTeZiYBqzZo3Vg1g.jpeg","filter":"","backgroundSize":"contain","originalWidth":1920,"originalHeight":1280,"strategy":"resample","height":0,"width":0},"metadata":{"postCount":488,"followerCount":960,"activeAt":1402438219689},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":true,"canRemove":true,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false},"isSubscribed":false},"layoutType":1,"logo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"type":"Collection"},"842b36854f80":{"id":"842b36854f80","name":"General Writing: Idea, Thinking, Opinion","slug":"philosophy-logic","tags":["WRITING","THINKING","IDEAS"],"creatorId":"10c138087717","responseTimeFuzzy":"within a week","description":"This is a collection for general writing, thinking, and opinions. [UPDATE] As a collection editor, I don’t have any permission to add your articles in the wild. Please submit your article and I will approve. Also, follow this collection, please.","shortDescription":"This is a collection for general writing, thinking, and…","image":{"imageId":"1*uXuJUuskIbGWdOOZMPVuNw.jpeg","filter":"","backgroundSize":"contain","originalWidth":1600,"originalHeight":1063,"strategy":"resample","height":0,"width":0},"metadata":{"postCount":5861,"followerCount":3482,"activeAt":1403967672982},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":true,"canRemove":true,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false},"isSubscribed":false},"layoutType":1,"logo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"type":"Collection"},"ce01be82a5e1":{"id":"ce01be82a5e1","name":"Python Programming Language","slug":"python-programming-language","tags":["PROGRAMMING"],"creatorId":"e385c9f57ec7","responseTimeFuzzy":"within a couple of weeks","description":"Python is a programming language that lets you work more quickly and integrate your systems more effectively.","shortDescription":"Python is a programming language that lets you work more…","image":{"imageId":"1*cfaUm64etujNO-wP_ahxfg.png","filter":"blue","backgroundSize":"contain","originalWidth":1400,"originalHeight":1120,"strategy":"resample","height":0,"width":0},"metadata":{"postCount":35,"followerCount":409,"activeAt":1402413452983},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":true,"canRemove":true,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false},"isSubscribed":false},"layoutType":1,"logo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"type":"Collection"}}}},"embedSupportUrl":"//medium.com/p/3eaed64aed8a/","facebookKey":"542599432471018","helpUrl":"https://medium.com/help-center/66f4ca0ede55","homeImageId":"1*4ncz3hLxmL8E_bUh-0z62w.jpeg","howToPostUrl":"//medium.com/about/5ab1de76e764","isAuthenticated":false,"isCurrentUserVerified":false,"currentUserHasUnverifiedEmail":false,"jobsUrl":"//medium.com/jobs","termsUrl":"//medium.com/policy/9db0094a1e0f","language":null,"miroUrl":"https://d262ilb51hltx0.cloudfront.net","moduleUrls":{"base":"https://dnqgz544uhbo8.cloudfront.net/_/fp/js/main-base.bundle.6GJ17tNOt8zKFUxyHJaw-w.js","notes":"https://dnqgz544uhbo8.cloudfront.net/_/fp/js/main-notes.bundle.sai25o6rIAAkua9sf8-7CA.js","posters":"https://dnqgz544uhbo8.cloudfront.net/_/fp/js/main-posters.bundle.mpOPc8BQ94RFuivMuquAyA.js","common-async":"https://dnqgz544uhbo8.cloudfront.net/_/fp/js/main-common-async.bundle.d2k4_PoZS7GwBKzor9tVCQ.js","stats":"https://dnqgz544uhbo8.cloudfront.net/_/fp/js/main-stats.bundle.VxB5g5ZXwWuWPrYJ8I_dSA.js","misc-screens":"https://dnqgz544uhbo8.cloudfront.net/_/fp/js/main-misc-screens.bundle._0vhBR8tE4BQttYxyarm3A.js"},"policyUrl":"//medium.com/policy","postColumnWidth":700,"privacyUrl":"//medium.com/policy/f03bf92035c9","loginFaqUrl":"//medium.com/@Medium/27a103f5b914","productName":"Medium","supportsEdit":false,"useragent":{"browser":"python requests","family":"","os":"","version":2.3,"supportsDesktopEdit":false,"supportsMobileEdit":false,"supportsInteract":false,"supportsView":true,"isMobile":false,"isTablet":false,"isNative":false,"supportsFileAPI":false,"supportsFullImageSections":false,"isTier1":false,"clientVersion":"","unknownParagraphsBad":false,"clientChannel":""},"variants":{"allow_outgoing_email":true,"policy_collection_slug":"policy","can_vote":true,"can_update_settings":true,"can_login_with_facebook":true,"can_update_collection_settings":true,"can_export_data":true,"enable_notes":true,"can_view_prl_homepage":true,"enable_collaboration":true,"allow_test_auth":"disallow","enable_image_layout":true,"show_promotional_homepage":true,"enable_authorship":true,"enable_followups_in_editor":true,"can_share_to_facebook":true,"can_connect_facebook":true,"filter_other_languages":true,"use_experimental_css":true,"use_prl_for_post_to_post_navigation":true,"enable_post_to_post_navigation":true,"can_view_unified_authentication_overlay":true,"has_prl_provider_collection_latest":true,"can_resume_from_last_read_location":true,"can_report_bad_posts":true,"enable_social_posts":true,"enable_gosocial_queries":true,"enable_arrow_plugin":true,"enable_collection_post_aggregation_from_score":true,"enable_see_subscribed_collections":true,"revision_history":true,"enable_embeds":true,"enable_embed_ui":true,"can_see_connections":true,"enable_recommend_notes":true,"enable_recommend_notes_composition":true,"logged_out_footer":"default","use_retina_images":true,"max_upload_size_mb":10,"use_full_width_images":true,"upload_multiple_files":true,"can_follow_users":true,"can_see_user_follower_count":true,"send_fewer_social_emails":true,"can_submit_drafts":true,"can_add_contributors":true,"enable_coverless_consumption_ios":true,"use_fixie_publishing_flow":true,"can_see_collection_grid":true,"enable_fixie_editors":true,"can_see_collection_stats":true,"smart_media_plugin2":true,"can_see_collections_for_user":true,"new_enter_behavior":true},"toolbarAnimationImg":"https://dnqgz544uhbo8.cloudfront.net/_/fp/img/toolbar-educational-animation.o-jfWHx_kxpuaHno0HGsLA.gif","welcomeUrl":"https://medium.com/about/9e53ca408c48","onboardingLandscapeFooterImage":"https://dnqgz544uhbo8.cloudfront.net/_/fp/img/logged-out-footer/landscape-bg.W4fnHJbJjHt0fgxh7ssrvQ.jpg","mediumTwitterScreenName":"medium"}
// ]]></script></body></html>