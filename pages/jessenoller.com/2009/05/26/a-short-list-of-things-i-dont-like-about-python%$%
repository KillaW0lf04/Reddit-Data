<!doctype html>
<!--[if lt IE 7]><html xmlns:og="http://opengraphprotocol.org/schema/" xmlns:fb="http://www.facebook.com/2008/fbml" itemscope itemtype="http://schema.org/Article" lang="en-US" class="ie ie6 lte9 lte8 lte7"><![endif]-->
<!--[if IE 7]><html xmlns:og="http://opengraphprotocol.org/schema/" xmlns:fb="http://www.facebook.com/2008/fbml" itemscope itemtype="http://schema.org/Article" lang="en-US" class="ie ie7 lte9 lte8 lte7"><![endif]-->
<!--[if IE 8]><html xmlns:og="http://opengraphprotocol.org/schema/" xmlns:fb="http://www.facebook.com/2008/fbml" itemscope itemtype="http://schema.org/Article" lang="en-US" class="ie ie8 lte9 lte8"><![endif]-->
<!--[if IE 9]><html xmlns:og="http://opengraphprotocol.org/schema/" xmlns:fb="http://www.facebook.com/2008/fbml" itemscope itemtype="http://schema.org/Article" lang="en-US" class="ie ie9 lte9"><![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html xmlns:og="http://opengraphprotocol.org/schema/" xmlns:fb="http://www.facebook.com/2008/fbml" itemscope itemtype="http://schema.org/Article" lang="en-US"><!--<![endif]-->

  <head>
    <meta name="viewport" content="width=device-width">
    <!-- This is Squarespace. --><!-- jessenoller -->
<base href="">
<meta charset="utf-8" />
<title>A short list of things I don't like about Python â€” jesse noller - a blog</title>
<link rel="canonical" href="http://jessenoller.com/blog/2009/05/26/a-short-list-of-things-i-dont-like-about-python"/>
<meta property="og:site_name" content="jesse noller - a blog"/>
<meta property="og:title" content="A short list of things I don't like about Python"/>
<meta itemprop="name" content="A short list of things I don't like about Python"/>
<meta property="og:url" content="http://jessenoller.com/blog/2009/05/26/a-short-list-of-things-i-dont-like-about-python"/>
<meta itemprop="url" content="http://jessenoller.com/blog/2009/05/26/a-short-list-of-things-i-dont-like-about-python"/>
<meta property="og:type" content="article"/>
<meta property="og:description" content="Yeah, I haven't posted in awhile - since pycon I've been sick off an on, 
working my butt off at the place which allows me to purchase ice cream for 
my kid, and so on. Busy busy. Not to mention, I've been suffering a slight 
case of burnout - long story.

That all being said, I think it was last week when I twittered a minor 
philosophical point which was picked up and ran with by pydanny. The little 
point I made was something like:

    I don't think it's unreasonable to be able to name at least 5 things
    you don't like/would change about something you love. Implementation
    details are fair game too

Now, before I delve into my personal list, I want to provide some context 
to this comment. It actually has some history, and it's not an original 
thought - I think Titus Brown started a meme around this last year. In his 
case, it was purely based around python.

    * Titus' Post
    * Daniel's Post
    * Brett's Post
    * Jacob's Post

In my case, I've long maintained that if you can not name things you would 
change, irk you or generally dislike about something (not just a language) 
you supposedly love, whether it be a tool, a language, an OS, etc - then it 
shows you have a certain lack of self-awareness or pragmatism (there is 
another word I'm grasping for here, but it escapes me).

Historically, I'll ask this in interview situations whether I'm speaking 
with someone who is a test engineer (name and explain 5 things you 
love/hate about automated testing?) a programmer (name and explain 5 things 
you love/hate about language $FOO) - generally speaking, this is great 
discussion fodder, and allows you to probe the thought process of the 
candidate.

For example, if someone says &quot;I hate Python's whitespace&quot; and they're 
interviewing for a Python coding position, I think it fair game to dig into 
that a bit and see if its rational, and ultimately ask the question: If you 
hate something so fundamental, why do you use it/why do you want to program 
in it for the foreseeable future?

In any case, I promised a few people I'd give them the shortlist of nits (I 
don't hate these things, I simply dislike them) I have with Python. It's 
important to remember that:

   1. I contribute work to python-core (see the multiprocessing module)
   2. I program in Python daily for work, and in my free time too.
   3. I participate (when I'm not on a self imposed exile) on the mailing
      lists and discussions (see Python-dev, etc.
   4. I too, am a strong believer in &quot;put up or shut up&quot;

Now, part of me is sad that I have to preface me being critical with a 
disclaimer like the above; but alas - some people, especially those on the 
internet, thrive on controversy and fail to read more than 5 or 6 words 
before posting some half-witted response, or worse yet, someone skims to 
the gripes I have, finds one they want to take me to task about and says 
&quot;SUBMIT A PATCH !!!11&quot;.

I do contribute back, so you can avoid telling me to submit a patch, ok?

That all being said, here's my list:

   1. Concurrency: This is actually a love/hate topic for me. Obviously,
      I'm the maintainer of the multiprocessing module, which sidesteps the
      GIL, but the GIL is still an irritant for me (given I do write a lot
      of threaded code). A lot of people are very familiar with the fact I
      am a proponent of threads and processes/IPC, as both serve different
      (yet overlapping) purposes. There is room for both. Hopefully
      unladen-swallow will be able to get rid of the GIL, and then we can
      all move on with our lives: So long as in killing it, we don't hose
      the ecosystem of C extensions.
          o Additionally, I would love to see a decent coroutine
            implementation included in the standard library, once PEP 380
            is done and in the bag, if you need justification, see David
            Beazley's coroutine talk. Again, while people might disagree
            with this, saying that coroutines/processes/threads all &quot;do the
            same thing&quot; and would violate &quot;TIOWTDI&quot; (There's Only One Way
            To Do It) I would strongly disagree with them. In the case of
            concurrency, different solutions fit different problems. We do
            not have a grand unified theory of concurrency within python.
          o Also in the concurrency vein, I would like to see a cross
            language messaging/serialization system/format eventually come
            in. Right now, we have pickle; most recently, JSON - and JSON
            might be the final answer in this regard, but something akin to
            protocol buffers has also piqued my interest. Given we have
            JSON, I'm not terribly hot on this one.
          o Finally, I'd like to see more of the java.util.concurrent
            abstractions migrated in. I mean, using python threads isn't
            hard, seriously, but more/better abstractions make things nicer
            for everyone.


   2. The Standard Library: This, again, is a love/hate thing - I love the
      standard library, and I will gladly argue with anyone who suggests
      getting rid of it. However, that said - I would like to see the
      entire thing get a much better documentation treatment, the docs
      while good, could be 1000x better, more clear/etc. I would also make
      every single module in there PEP 8 compliant. I know that sounds like
      a style-nazi thing, but if that's the style we're to use, I think the
      first thing to adhere to that is the standard lib.
          o It's also disorganized. While flat is better than nested, I'm
            sorry - but I think making it deeper and putting all the things
            like one another into the same namespaces does make sense.
          o I would also break out the stdlib from core. This idea was
            discussed at the python language summit, and I think almost
            everyone there was in agreement. The idea would be to separate
            out the stdlib into it's own path inside the repo, and other
            python implementations (such as Jython/etc) could use that copy
            as their copy of the stdlib modules. Anything which was CPython
            specific (such as multiprocessing) would stay with core/be
            marked as CPython only.
          o Taking this concept of breaking out the standard library a
            little further: I would begin to evolve it a little more
            quickly. There's a strong difference between changes to the
            language, and changes to the standard library. In the case of
            the former; it should evolve slowly, and carefully. In the case
            of the latter (the stdlib) I think it could - and possibly
            should, evolve more quickly. By evolve, I mean &quot;get cleaned up,
            have things removed/added&quot; more quickly. I do not, however,
            mean with less thought. There's obviously a lot of &quot;buts&quot; and
            other concerns with this idea, but it's just a thought. I think
            compartmentalizing this into python-core and python-stdlib
            meshes with how a lot of people think about things.


   3. The Docs: I touched on this in the stdlib one, but the standard
      library documentation, as well as rich examples for a lot of the core
      features are lacking. Many of them focus on syntax and not
      necessarily on use. For example, I would gladly integrate all of 
      Doug Hellmann's Python Module of the Week posts into the standard
      library documentation tomorrow, and wholesale if I could - his
      examples are much more rich than those we find in the current docs.
      Many people, including myself, have been working on making these
      better - in my case, I need to overhaul the multiprocessing docs when
      I have a chance.
          o Don't get me wrong - I actually appreciate the docs we have,
            they keep me sane, but they can be better, more clear and in
            some cases, more practical. One or two examples for usage just
            doesn't cut it.

          o update see: http://tosh.pl/gminick/gsoc/sphinx/


   4. Packaging: Ahhhhh! I'm not going to go too deep into this rabbit
      hole, especially given I know Tarek is hacking away at making python
      packaging a much better animal, but the entire
      setuptools/eggs/distutils/etc pile is well, frustrating. I just want
      a clean, standard way of packaging my packages, built into core, that
      doesn't force me into install into the global site-packages
      directory. Also, uninstall, dammit. I know setuptools and
      easy_install and eggs were designed to scratch an itch: and I do use
      easy_install, but the entire pile of things need to be made into a
      standard, implemented in core and we need to move on.
          o However, as I pointed out during the language summit - I don't
            think something like easy_install belongs in core, instead I
            think core should make what easy_install does (to a certain
            extent) easier and standard, so people can use whatever
            tools/scripts/etc they want. One ring to bind them!


   5. Linting: Ok, face it, if you're on a big enough team, you need to
      have a pre commit hook for your VCS that lints the code, and yacks if
      it doesn't conform. I would love for one to be built into the stdlib,
      but something like pylint is too big, pychecker is too simple, and I
      haven't used pyflakes recently enough to comment. There was a thread
      on python-ideas about this recently - and maybe Jeremy Hylton is
      right, and it doesn't belong in core, but if that's the case, we need
      to pick one to &quot;endorse&quot; on the python doc website. Maybe in a
      &quot;getting started with developing python&quot; document, which is linked in
      size 30 font, and links to a linter, maybe the pep8.py and
      reindent.py scripts, etc. It should be painfully obvious where to get
      and how to use these tools. Yeah, I know &quot;waaaaah why didn't they
      link to mine&quot; - well, because we liked this one over here more. QQ.
          o As it stands, I can not count the number of times I've been
            asked about linters and style checkers for python code. Maybe
            we make three packages: python-core, python-stdlib and
            python-tools.


   6. Optional Static Typing: This one doesn't make me feel like I'll make
      any friends, but I would love to have pre-runtime, static typing as
      an option to python - maybe as a --anal-types flag. Guido has 
      discussed (part 2) the difficulties of this before, so I don't think
      this will ever come (the closest we get to &quot;type safety&quot; is function
      annotations, which make me feel funny in sensitive places). The
      biggest reason I have for static typing of any flavor, is that I
      would prefer to have the ability to catch some errors prior to
      runtime. That's all. On a big enough team, all hacking on the same
      (massive) python code base, I've found you do want the ability to
      turn something like this on - it helps you with a (small) class of
      very annoying bugs.
          o I do love me the dynamic/late typing system of python, and I
            use it to my advantage as much as possible. So, I wouldn't
            trade the dynamism of Python for static types, it's just an nit
            I have. Of course, maybe something like interfaces (as Jacob
            points out in his list) might solve some of the issues I have
            (mainly bad people doing silly things). The rest of the stuff
            is why I write unit tests and actually run the damned code.
          o Yes, I know the drawbacks of something like this; I also don't
            have some sort of magic solution to be able to wave a wand and
            do this. Nor do I have a concrete proposal, otherwise you'd see
            an email on python-dev. Other people much smarter than me have
            pointed out the sheer enormity and numerous drawbacks to
            something like this. No, I don't expect magic fairy dusty to
            suddenly appear and just &quot;make this work&quot;.


   7. Standard Library Part II: Yeah, you might notice a lot of my gripes
      are around the stdlib - but in particular, I want to point out the
      state of XML handling in the standard library is about as clear as
      wearing glasses made of meat. Additionally, the
      httplib/urllib/urllib2 thing? Yeah. No.
          o While I'm harping on this stuff, get rid of the commands
            module, anything that is not in subprocess should be put there.
            Since I mentioned subprocess, needs more documentation also,
            non blocking asynchronous input/output/handling of subprocess
            data should be easy, and built in. There's a GSoC project 
            around this spinning up, so we'll see.

That all being said, would I trade python for something else? Not right 
now. Most of my nits are exactly that: nits, and most of all, they're not 
impossible to change or resolve (given enough time, and resources).

I can make a similar list for OS/X, Linux and other things I use day in and 
day out - hell, I can make one for myself (ask my wife about me griping 
about me sometime). I can probably make a list like this for every single 
thing I've written, tools, scripts, apps, etc.

Like I said, being aware of, and trying to overcome your own shortcomings 
is how we all improve. In the case of a language, you can't just keep 
adding things into a standard library and call it &quot;better&quot; - you have to 
take a constant look at what you've done to date with a critical eye, and 
ask yourself &quot;what can we do better&quot;."/>
<meta itemprop="description" content="Yeah, I haven't posted in awhile - since pycon I've been sick off an on, 
working my butt off at the place which allows me to purchase ice cream for 
my kid, and so on. Busy busy. Not to mention, I've been suffering a slight 
case of burnout - long story.

That all being said, I think it was last week when I twittered a minor 
philosophical point which was picked up and ran with by pydanny. The little 
point I made was something like:

    I don't think it's unreasonable to be able to name at least 5 things
    you don't like/would change about something you love. Implementation
    details are fair game too

Now, before I delve into my personal list, I want to provide some context 
to this comment. It actually has some history, and it's not an original 
thought - I think Titus Brown started a meme around this last year. In his 
case, it was purely based around python.

    * Titus' Post
    * Daniel's Post
    * Brett's Post
    * Jacob's Post

In my case, I've long maintained that if you can not name things you would 
change, irk you or generally dislike about something (not just a language) 
you supposedly love, whether it be a tool, a language, an OS, etc - then it 
shows you have a certain lack of self-awareness or pragmatism (there is 
another word I'm grasping for here, but it escapes me).

Historically, I'll ask this in interview situations whether I'm speaking 
with someone who is a test engineer (name and explain 5 things you 
love/hate about automated testing?) a programmer (name and explain 5 things 
you love/hate about language $FOO) - generally speaking, this is great 
discussion fodder, and allows you to probe the thought process of the 
candidate.

For example, if someone says &quot;I hate Python's whitespace&quot; and they're 
interviewing for a Python coding position, I think it fair game to dig into 
that a bit and see if its rational, and ultimately ask the question: If you 
hate something so fundamental, why do you use it/why do you want to program 
in it for the foreseeable future?

In any case, I promised a few people I'd give them the shortlist of nits (I 
don't hate these things, I simply dislike them) I have with Python. It's 
important to remember that:

   1. I contribute work to python-core (see the multiprocessing module)
   2. I program in Python daily for work, and in my free time too.
   3. I participate (when I'm not on a self imposed exile) on the mailing
      lists and discussions (see Python-dev, etc.
   4. I too, am a strong believer in &quot;put up or shut up&quot;

Now, part of me is sad that I have to preface me being critical with a 
disclaimer like the above; but alas - some people, especially those on the 
internet, thrive on controversy and fail to read more than 5 or 6 words 
before posting some half-witted response, or worse yet, someone skims to 
the gripes I have, finds one they want to take me to task about and says 
&quot;SUBMIT A PATCH !!!11&quot;.

I do contribute back, so you can avoid telling me to submit a patch, ok?

That all being said, here's my list:

   1. Concurrency: This is actually a love/hate topic for me. Obviously,
      I'm the maintainer of the multiprocessing module, which sidesteps the
      GIL, but the GIL is still an irritant for me (given I do write a lot
      of threaded code). A lot of people are very familiar with the fact I
      am a proponent of threads and processes/IPC, as both serve different
      (yet overlapping) purposes. There is room for both. Hopefully
      unladen-swallow will be able to get rid of the GIL, and then we can
      all move on with our lives: So long as in killing it, we don't hose
      the ecosystem of C extensions.
          o Additionally, I would love to see a decent coroutine
            implementation included in the standard library, once PEP 380
            is done and in the bag, if you need justification, see David
            Beazley's coroutine talk. Again, while people might disagree
            with this, saying that coroutines/processes/threads all &quot;do the
            same thing&quot; and would violate &quot;TIOWTDI&quot; (There's Only One Way
            To Do It) I would strongly disagree with them. In the case of
            concurrency, different solutions fit different problems. We do
            not have a grand unified theory of concurrency within python.
          o Also in the concurrency vein, I would like to see a cross
            language messaging/serialization system/format eventually come
            in. Right now, we have pickle; most recently, JSON - and JSON
            might be the final answer in this regard, but something akin to
            protocol buffers has also piqued my interest. Given we have
            JSON, I'm not terribly hot on this one.
          o Finally, I'd like to see more of the java.util.concurrent
            abstractions migrated in. I mean, using python threads isn't
            hard, seriously, but more/better abstractions make things nicer
            for everyone.


   2. The Standard Library: This, again, is a love/hate thing - I love the
      standard library, and I will gladly argue with anyone who suggests
      getting rid of it. However, that said - I would like to see the
      entire thing get a much better documentation treatment, the docs
      while good, could be 1000x better, more clear/etc. I would also make
      every single module in there PEP 8 compliant. I know that sounds like
      a style-nazi thing, but if that's the style we're to use, I think the
      first thing to adhere to that is the standard lib.
          o It's also disorganized. While flat is better than nested, I'm
            sorry - but I think making it deeper and putting all the things
            like one another into the same namespaces does make sense.
          o I would also break out the stdlib from core. This idea was
            discussed at the python language summit, and I think almost
            everyone there was in agreement. The idea would be to separate
            out the stdlib into it's own path inside the repo, and other
            python implementations (such as Jython/etc) could use that copy
            as their copy of the stdlib modules. Anything which was CPython
            specific (such as multiprocessing) would stay with core/be
            marked as CPython only.
          o Taking this concept of breaking out the standard library a
            little further: I would begin to evolve it a little more
            quickly. There's a strong difference between changes to the
            language, and changes to the standard library. In the case of
            the former; it should evolve slowly, and carefully. In the case
            of the latter (the stdlib) I think it could - and possibly
            should, evolve more quickly. By evolve, I mean &quot;get cleaned up,
            have things removed/added&quot; more quickly. I do not, however,
            mean with less thought. There's obviously a lot of &quot;buts&quot; and
            other concerns with this idea, but it's just a thought. I think
            compartmentalizing this into python-core and python-stdlib
            meshes with how a lot of people think about things.


   3. The Docs: I touched on this in the stdlib one, but the standard
      library documentation, as well as rich examples for a lot of the core
      features are lacking. Many of them focus on syntax and not
      necessarily on use. For example, I would gladly integrate all of 
      Doug Hellmann's Python Module of the Week posts into the standard
      library documentation tomorrow, and wholesale if I could - his
      examples are much more rich than those we find in the current docs.
      Many people, including myself, have been working on making these
      better - in my case, I need to overhaul the multiprocessing docs when
      I have a chance.
          o Don't get me wrong - I actually appreciate the docs we have,
            they keep me sane, but they can be better, more clear and in
            some cases, more practical. One or two examples for usage just
            doesn't cut it.

          o update see: http://tosh.pl/gminick/gsoc/sphinx/


   4. Packaging: Ahhhhh! I'm not going to go too deep into this rabbit
      hole, especially given I know Tarek is hacking away at making python
      packaging a much better animal, but the entire
      setuptools/eggs/distutils/etc pile is well, frustrating. I just want
      a clean, standard way of packaging my packages, built into core, that
      doesn't force me into install into the global site-packages
      directory. Also, uninstall, dammit. I know setuptools and
      easy_install and eggs were designed to scratch an itch: and I do use
      easy_install, but the entire pile of things need to be made into a
      standard, implemented in core and we need to move on.
          o However, as I pointed out during the language summit - I don't
            think something like easy_install belongs in core, instead I
            think core should make what easy_install does (to a certain
            extent) easier and standard, so people can use whatever
            tools/scripts/etc they want. One ring to bind them!


   5. Linting: Ok, face it, if you're on a big enough team, you need to
      have a pre commit hook for your VCS that lints the code, and yacks if
      it doesn't conform. I would love for one to be built into the stdlib,
      but something like pylint is too big, pychecker is too simple, and I
      haven't used pyflakes recently enough to comment. There was a thread
      on python-ideas about this recently - and maybe Jeremy Hylton is
      right, and it doesn't belong in core, but if that's the case, we need
      to pick one to &quot;endorse&quot; on the python doc website. Maybe in a
      &quot;getting started with developing python&quot; document, which is linked in
      size 30 font, and links to a linter, maybe the pep8.py and
      reindent.py scripts, etc. It should be painfully obvious where to get
      and how to use these tools. Yeah, I know &quot;waaaaah why didn't they
      link to mine&quot; - well, because we liked this one over here more. QQ.
          o As it stands, I can not count the number of times I've been
            asked about linters and style checkers for python code. Maybe
            we make three packages: python-core, python-stdlib and
            python-tools.


   6. Optional Static Typing: This one doesn't make me feel like I'll make
      any friends, but I would love to have pre-runtime, static typing as
      an option to python - maybe as a --anal-types flag. Guido has 
      discussed (part 2) the difficulties of this before, so I don't think
      this will ever come (the closest we get to &quot;type safety&quot; is function
      annotations, which make me feel funny in sensitive places). The
      biggest reason I have for static typing of any flavor, is that I
      would prefer to have the ability to catch some errors prior to
      runtime. That's all. On a big enough team, all hacking on the same
      (massive) python code base, I've found you do want the ability to
      turn something like this on - it helps you with a (small) class of
      very annoying bugs.
          o I do love me the dynamic/late typing system of python, and I
            use it to my advantage as much as possible. So, I wouldn't
            trade the dynamism of Python for static types, it's just an nit
            I have. Of course, maybe something like interfaces (as Jacob
            points out in his list) might solve some of the issues I have
            (mainly bad people doing silly things). The rest of the stuff
            is why I write unit tests and actually run the damned code.
          o Yes, I know the drawbacks of something like this; I also don't
            have some sort of magic solution to be able to wave a wand and
            do this. Nor do I have a concrete proposal, otherwise you'd see
            an email on python-dev. Other people much smarter than me have
            pointed out the sheer enormity and numerous drawbacks to
            something like this. No, I don't expect magic fairy dusty to
            suddenly appear and just &quot;make this work&quot;.


   7. Standard Library Part II: Yeah, you might notice a lot of my gripes
      are around the stdlib - but in particular, I want to point out the
      state of XML handling in the standard library is about as clear as
      wearing glasses made of meat. Additionally, the
      httplib/urllib/urllib2 thing? Yeah. No.
          o While I'm harping on this stuff, get rid of the commands
            module, anything that is not in subprocess should be put there.
            Since I mentioned subprocess, needs more documentation also,
            non blocking asynchronous input/output/handling of subprocess
            data should be easy, and built in. There's a GSoC project 
            around this spinning up, so we'll see.

That all being said, would I trade python for something else? Not right 
now. Most of my nits are exactly that: nits, and most of all, they're not 
impossible to change or resolve (given enough time, and resources).

I can make a similar list for OS/X, Linux and other things I use day in and 
day out - hell, I can make one for myself (ask my wife about me griping 
about me sometime). I can probably make a list like this for every single 
thing I've written, tools, scripts, apps, etc.

Like I said, being aware of, and trying to overcome your own shortcomings 
is how we all improve. In the case of a language, you can't just keep 
adding things into a standard library and call it &quot;better&quot; - you have to 
take a constant look at what you've done to date with a critical eye, and 
ask yourself &quot;what can we do better&quot;."/>
<meta property="og:image" content="http://static.squarespace.com/static/50b76babe4b05c3cd8bab78a/t/52f6d3c3e4b0b0787cdf2bf8/1391924533428/?format=1000w"/>
<meta itemprop="thumbnailUrl" content="http://static.squarespace.com/static/50b76babe4b05c3cd8bab78a/t/52f6d3c3e4b0b0787cdf2bf8/1391924533428/?format=1000w"/>
<meta itemprop="image" content="http://static.squarespace.com/static/50b76babe4b05c3cd8bab78a/t/52f6d3c3e4b0b0787cdf2bf8/1391924533428/?format=1000w"/>
<link rel="image_src" href="http://static.squarespace.com/static/50b76babe4b05c3cd8bab78a/t/52f6d3c3e4b0b0787cdf2bf8/1391924533428/?format=1000w" />
<script type="text/javascript">SQUARESPACE_ROLLUPS = {};</script><script>(function(rollups, name) { if (!rollups[name]) { rollups[name] = {}; } rollups[name].js = ["//static.squarespace.com/universal/scripts-compressed/common-93c5c153059aab4156c1738a9d35fd06-min.js"]; })(SQUARESPACE_ROLLUPS, 'squarespace-common');</script>
<script>(function(rollups, name) { if (!rollups[name]) { rollups[name] = {}; } rollups[name].js = ["//static.squarespace.com/universal/scripts-compressed/commerce-be8422523207105cd7adeb0b13288042-min.js"]; })(SQUARESPACE_ROLLUPS, 'squarespace-commerce');</script>
<script>(function(rollups, name) { if (!rollups[name]) { rollups[name] = {}; } rollups[name].css = ["//static.squarespace.com/universal/styles-compressed/commerce-039a299c3c54337f52b4e0e4064ce5ea-min.css"]; })(SQUARESPACE_ROLLUPS, 'squarespace-commerce');</script>
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico"/>
<link rel="alternate" type="application/rss+xml" title="RSS Feed" href="http://feeds.feedburner.com/Jessenollercom" />
<script type="text/javascript" data-sqs-type="dynamic-assets-loader">(function() {(function(a){try{if(window.top!=window&&window.top.Squarespace&&window.top.Squarespace.frameAvailable){window.top.Squarespace.frameAvailable(window,SQUARESPACE_ROLLUPS);return}}catch(d){}for(var c in a){if(a[c].js)for(var b=0;b<a[c].js.length;b++)document.write('<script type="text/javascript" src="'+a[c].js[b]+'">\x3c/script>');if(a[c].css)for(b=0;b<a[c].css.length;b++)document.write('<link rel="stylesheet" type="text/css" href="'+a[c].css[b]+'" />')}})(SQUARESPACE_ROLLUPS);
})();</script>
<script> Static.SQUARESPACE_CONTEXT = {"templateTweakable":true,"website":{"id":"50b76babe4b05c3cd8bab78a","identifier":"jessenoller","contentModifiedOn":1391924533428,"cloneable":false,"siteStatus":{},"language":"en-US","timeZone":"America/Monterrey","machineTimeZoneOffset":-18000000,"timeZoneOffset":-18000000,"timeZoneAbbr":"CDT","siteTitle":"jesse noller - a blog","siteTagLine":"python, programming, technology & stuff.","siteDescription":"<p>Python Programmer &amp; core developer, <a target=\"_blank\" href=\"http://www.python.org/psf/\">Python Software Foundation Director</a>. Chair of PyCon <a target=\"_blank\" href=\"http://us.pycon.org\">2012 &amp; 201</a><a target=\"_blank\" href=\"http://us.pycon.org\"><u>3</u></a>. Many other numerous Python community &amp; advocacy projects as well.&nbsp;Involved in Developer Experience, developer outreach &amp; marketing and OpenStack development.&nbsp;Proud father of two girls and husband, Principle Engineer/Developer Advocate at <a href=\"#\">Rackspace</a>.</p>","location":{"mapZoom":11.0,"mapLat":29.4241219,"mapLng":-98.49362819999999,"markerLat":29.4241219,"markerLng":-98.49362819999999,"addressTitle":"Where am I?","addressLine1":"","addressLine2":"San Antonio, Texas","addressCountry":"United States"},"logoImageId":"52f6d3c3e4b0b0787cdf2bf8","shareButtonOptions":{"2":true,"1":true,"6":true,"3":true},"logoImageUrl":"//static.squarespace.com/static/50b76babe4b05c3cd8bab78a/t/52f6d3c3e4b0b0787cdf2bf8/1391924533428/","authenticUrl":"http://jessenoller.com","baseUrl":"http://jessenoller.com","primaryDomain":"jessenoller.com","socialAccounts":[{"serviceId":2,"userId":"638520199","userName":"jessenoller","screenname":"Jesse Noller","addedOn":1354198256316,"profileUrl":"http://www.facebook.com/638520199","iconUrl":"http://graph.facebook.com/638520199/picture?type=square","metaData":{"service":"facebook"},"iconEnabled":true,"serviceName":"facebook"},{"serviceId":4,"userId":"14100497","userName":"jessenoller","screenname":"jessenoller","addedOn":1354198265104,"profileUrl":"https://twitter.com/jessenoller","iconUrl":"http://a0.twimg.com/profile_images/2290396043/tyd6sk9rxwjz4cabirqq_normal.jpeg","collectionId":"50b76cf9e4b05c3cd8baba61","iconEnabled":true,"serviceName":"twitter"},{"serviceId":5,"userId":"115662513673837016240","userName":"Jesse Noller","screenname":"Jesse Noller","addedOn":1354198277258,"profileUrl":"https://plus.google.com/115662513673837016240","iconUrl":"http://www.google.com/ig/c/photos/private/AIbEiAIAAABECLDpg9a-ppuu2QEiC3ZjYXJkX3Bob3RvKigzMjQyNjM0MWMyYzE1Y2QzZTFmOGMxMDRiMGZjMzA1YjFlYjE2YzgxMAEmc7H2wfuu5DHXRPg8s3DbQMWRdQ","iconEnabled":true,"serviceName":"google"},{"serviceId":10,"userId":"14993635","userName":"jessenoller","screenname":"jessenoller","addedOn":1354198318822,"profileUrl":"http://instagram.com/jessenoller","iconUrl":"http://images.instagram.com/profiles/profile_14993635_75sq_1323476427.jpg","collectionId":"50b76d2ee4b05c3cd8babaab","iconEnabled":true,"serviceName":"instagram"},{"serviceId":14,"userId":"gNDIXJa3VW","userName":"jessenoller","screenname":"Jesse Noller","addedOn":1354198347310,"profileUrl":"http://www.linkedin.com/in/jessenoller","iconUrl":"http://m3.licdn.com/mpr/mprx/0_9G8uJ82xPQmxBPxGZFPPJioxP_VjzvOGqQN1JiSauLaDoAdCsXK8B_JhgmsGnt0ac3Ct9k0zgCux","iconEnabled":true,"serviceName":"linkedin"},{"serviceId":20,"userId":"jnoller@gmail.com","screenname":"jnoller@gmail.com","addedOn":1354198361002,"profileUrl":"mailto:jnoller@gmail.com","iconEnabled":true,"serviceName":"email"}],"statsMigrated":true,"imageMetadataProcessingEnabled":false},"tzData":{"zones":[[-360,"Mexico","C%sT",null]],"rules":{"Mexico":[[2002,"max",null,"Apr","Sun>=1","2:00","1:00","D"],[2002,"max",null,"Oct","lastSun","2:00","0","S"]]}},"websiteCloneable":false,"isSystemPage":false,"collection":{"title":"Blog","id":"50b7714be4b0192bc2226c59","fullUrl":"/","publicCommentCount":1567},"subscribed":false,"appDomain":"squarespace.com","templateId":"4fdf4f21c4aad4a72790bd9b","rollups":{"squarespace-audio-player":{"css":"//static.squarespace.com/universal/styles-compressed/audio-player-63b580506e464538b6fe64025c4400bc-min.css","js":"//static.squarespace.com/universal/scripts-compressed/audio-player-8723aa8f2e4e6e8e2ad9a3c93e5b884c-min.js"},"squarespace-calendar-block-renderer":{"css":"//static.squarespace.com/universal/styles-compressed/calendar-block-renderer-d41d8cd98f00b204e9800998ecf8427e-min.css","js":"//static.squarespace.com/universal/scripts-compressed/calendar-block-renderer-41a90502ab215915ef8fadcb01f99b97-min.js"},"squarespace-comments":{"css":"//static.squarespace.com/universal/styles-compressed/comments-c91321e18f759192210e5dba55a7f6c3-min.css","js":"//static.squarespace.com/universal/scripts-compressed/comments-ab3466a3e7ab3c67bb768ba5c7be7e52-min.js"},"squarespace-dialog":{"css":"//static.squarespace.com/universal/styles-compressed/dialog-bc949ee4baa09d608bd4d3ccdef9625d-min.css","js":"//static.squarespace.com/universal/scripts-compressed/dialog-2a25cb98b6e99581f287610347c40188-min.js"},"squarespace-pinterest":{"css":"//static.squarespace.com/universal/styles-compressed/pinterest-d41d8cd98f00b204e9800998ecf8427e-min.css","js":"//static.squarespace.com/universal/scripts-compressed/pinterest-e2d1ba37ad07db5eeada67621609a0d0-min.js"}},"tweakJSON":{"aspect-ratio":"Auto","gallery-arrow-style":"Round Corners","gallery-aspect-ratio":"3:2 Standard","gallery-auto-crop":"true","gallery-autoplay":"false","gallery-design":"Slideshow","gallery-info-overlay":"Always Show","gallery-loop":"false","gallery-navigation":"Thumbnails","gallery-show-arrows":"true","gallery-transitions":"Fade","galleryArrowBackground":"rgba(34,34,34,1)","galleryArrowColor":"rgba(255,255,255,1)","galleryAutoplaySpeed":"3","galleryCircleColor":"rgba(255,255,255,1)","galleryInfoBackground":"rgba(0, 0, 0, .7)","galleryThumbnailSize":"100px","gridSize":"350px","gridSpacing":"20px","product-gallery-auto-crop":"true","product-image-auto-crop":"true"},"websiteSettings":{"id":"50b76babe4b05c3cd8bab78b","websiteId":"50b76babe4b05c3cd8bab78a","type":"Personal","subject":"Personal","subjects":[{"systemSubject":"other","otherSubject":"Personal"}],"country":"","state":"","markdownMode":true,"simpleLikingEnabled":true,"lastAgreedTermsOfService":2,"defaultPostFormat":"%y/%m/%d/%t","commentLikesAllowed":false,"commentAnonAllowed":false,"commentThreaded":false,"commentApprovalRequired":false,"commentAvatarsOn":false,"commentSortType":2,"commentFlagThreshold":0,"commentFlagsAllowed":false,"commentEnableByDefault":false,"commentDisableAfterDaysDefault":10,"disqusShortname":"pyjesse","notFoundPageId":"50b7714de4b0192bc2226d52","homepageTitleFormat":"%s","collectionTitleFormat":"%c \u2014 %s","itemTitleFormat":"%i \u2014 %s","commentsEnabled":true,"contactEmail":"jnoller@gmail.com","allowSquarespacePromotion":true,"storeSettings":{"returnPolicy":null,"termsOfService":null,"privacyPolicy":null,"expressCheckout":false,"useLightCart":false,"showNoteField":false,"currenciesSupported":["USD"],"defaultCurrency":"USD","selectedCurrency":"USD","measurementStandard":1,"showCustomCheckoutForm":false,"isLive":false,"stripeConnected":false,"storeState":3},"useEscapeKeyToLogin":true,"ssBadgeType":1,"ssBadgePosition":4,"ssBadgeVisibility":1,"ssBadgeDevices":1},"item":{"title":"A short list of things I don't like about Python","id":"50b77287e4b0192bc2227cc0","fullUrl":"/blog/2009/05/26/a-short-list-of-things-i-dont-like-about-python","publicCommentCount":62,"commentState":1,"recordType":1},"secureDomain":"https://jessenoller.squarespace.com"}; SquarespaceFonts.loadViaContext(); Squarespace.load(window); </script>

<script type="text/javascript" src="//use.typekit.net/ik/lVI3d2PCq1V2lZleCtY_z9-l-YW1LhsSg3JB8kxZPFMfe7IffFHN4UJLFRbh52jhWD93jRShjcBKZQsKw2mRwhFq5e4yjRStjsTi-cmDShm0dhUCZWJ0jhNlOYiaiko7ZWFDZAozdeU8SKoRdhXC-cmDShm0dhUCZWJ0SaBujW48Sagyjh90jhNlOfG0-cmDShm0dhUCZWJ0SaBujW48Sagyjh90jhNlJ6U3ScNt-AuyOAozicI7fbKnMsMMeMI6MKG4fHvgIMMjgfMfH6qJtKGbMg62JMJ7fbKHMsMMegw6MKG4fHGgIMMjIKMfH6qJKbIbMg64JMJ7fbKwMsMMegI6MKG4fHqgIMMjffMfH6qJn6IbMg6bJMJ7fbKOMsMMeMS6MKG4fHXgIMMjgKMfH6qJCMIbMg65JMJ7fbRRHyMMeMX6M6.js"></script>
<script type="text/javascript">try{Typekit.load();}catch(e){}</script>
<link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans+Condensed:300,300italic,700|Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic"/>
<!--[if gte IE 9]> <link rel="stylesheet" type="text/css" href="//static.squarespace.com/static/sitecss/50b76babe4b05c3cd8bab78a/12/4fdf4f21c4aad4a72790bd9b/50b76bace4b05c3cd8bab841/806/1391924533425/site.css?"/><![endif]-->
<!--[if lt IE 9]><script src="//static.squarespace.com/universal/scripts-thirdparty/html5/html5-shiv.js"></script><link rel="stylesheet" type="text/css" href="//static.squarespace.com/static/sitecss/50b76babe4b05c3cd8bab78a/12/4fdf4f21c4aad4a72790bd9b/50b76bace4b05c3cd8bab841/806/1391924533425/site.css?&noMedia=true"/><![endif]-->
<!--[if !IE]> --> <link rel="stylesheet" type="text/css" href="//static.squarespace.com/static/sitecss/50b76babe4b05c3cd8bab78a/12/4fdf4f21c4aad4a72790bd9b/50b76bace4b05c3cd8bab841/806/1391924533425/site.css?"/> <!-- <![endif]-->
<link href='http://google-code-prettify.googlecode.com/svn/trunk/src/prettify.css' type='text/css' rel='stylesheet'/>

<script src='http://google-code-prettify.googlecode.com/svn/trunk/src/prettify.js' type='text/javascript'></script><script type="text/javascript"> var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1971220-1']); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); </script><!-- End of Squarespace Headers -->
  </head>
  
  <body class="collection-type-blog view-item mobile-style-available collection-50b7714be4b0192bc2226c59 collection-layout-default border-style-solid show-social-icons social-icon-style-square  nav-position-fixed show-promoted-blocks show-author-name show-post-date  gallery-design-slideshow aspect-ratio-auto lightbox-style-dark gallery-navigation-thumbnails gallery-info-overlay-always-show gallery-aspect-ratio-32-standard gallery-arrow-style-round-corners gallery-transitions-fade gallery-show-arrows gallery-auto-crop   product-list-titles-under product-list-alignment-center product-item-size-11-square product-image-auto-crop product-gallery-size-11-square product-gallery-auto-crop show-product-price show-product-item-nav product-social-sharing   event-thumbnails event-thumbnail-size-32-standard event-date-label event-date-label-time event-excerpts event-list-date event-list-time event-list-address event-icalgcal-links      opentable-style-light newsletter-style-dark small-button-style-solid small-button-shape-square medium-button-style-solid medium-button-shape-square large-button-style-solid large-button-shape-square button-style-default button-corner-style-square native-currency-code-usd logged-out" id="item-50b77287e4b0192bc2227cc0">
    <div id="canvasWrapper">

      <div id="headerWrapper">
        <!-- ghost version of the nav. pushes header down the correct amount for the real fixed position version of the header -->
        <div id="navWrapperGhost">
          <div id="topNavGhost">
            
            
              <div id="sqs-header-social-ghost">
                <a href="http://www.facebook.com/638520199" target="_blank" class="social-facebook"></a><a href="https://twitter.com/jessenoller" target="_blank" class="social-twitter"></a><a href="https://plus.google.com/115662513673837016240" target="_blank" class="social-google"></a><a href="http://instagram.com/jessenoller" target="_blank" class="social-instagram"></a><a href="http://www.linkedin.com/in/jessenoller" target="_blank" class="social-linkedin"></a><a href="mailto:jnoller@gmail.com" target="_blank" class="social-email"></a>
              </div>
              <a href="#sqs-header-social-ghost" id="mobile-show-social-ghost"></a>
              
            
            <a href="#" class="sqs-search-ui-button search-button" boost_title="10">
            <!-- Below is for new search. Switch when live. -->
            <!-- <a href="/search" class="search-button" boost_title="10"> -->
              <span class="title">Search</span>
            </a>

            <div id="navGhost">

<nav class="main-nav dropdown-hover" id="mainNavigation">
  <ul>
  
    

      <li class="blog-collection active-link">

        

          
            <a href="/">Blog</a>
          

          

        

      </li>

    

      <li class="page-collection">

        

          
            <a href="/about/">About</a>
          

          

        

      </li>

    

      <li class="page-collection">

        

          
            <a href="/other-writing/">Other Writing</a>
          

          

        

      </li>

    

      <li class="page-collection">

        

          
            <a href="/favorite-posts/">Favorite Posts</a>
          

          

        

      </li>

    

      <li class="page-collection">

        

          
            <a href="/good-to-great-python-reads/">Good to Great Python reads</a>
          

          

        

      </li>

    

      <li class="page-collection">

        

          
            <a href="/python-software-foundation/">Python Software Foundation</a>
          

          

        

      </li>

    

      <li class="page-collection">

        

          
            <a href="/contact/">Contact</a>
          

          

        

      </li>

    
  
  </ul>
</nav>
            <a href="#closeNavGhost" id="mobile-close-nav-ghost">Close</a></div>
            <a href="#navGhost" id="mobile-show-nav-ghost">Menu</a>
          </div>
        </div>
        <!-- /ghost nav -->

        <!-- real/visible nav starts here -->
        <div id="navWrapper">
          <div id="topNav">
          
            
              <div id="sqs-header-social">
                <a href="http://www.facebook.com/638520199" target="_blank" class="social-facebook"></a><a href="https://twitter.com/jessenoller" target="_blank" class="social-twitter"></a><a href="https://plus.google.com/115662513673837016240" target="_blank" class="social-google"></a><a href="http://instagram.com/jessenoller" target="_blank" class="social-instagram"></a><a href="http://www.linkedin.com/in/jessenoller" target="_blank" class="social-linkedin"></a><a href="mailto:jnoller@gmail.com" target="_blank" class="social-email"></a>
              </div>
              <a href="#sqs-header-social" id="mobile-show-social"></a>
              
            
            <a href="#" class="sqs-search-ui-button search-button" boost_title="10">
            <!-- Below is for new search. Switch when live. -->
            <!-- <a href="/search" class="search-button" boost_title="10"> -->
              <span class="title">Search</span>
            </a>
            

  <div id="nav">
    <a href="#closeNav" id="mobile-close-nav">Close</a>

    <nav class="main-nav dropdown-hover" id="mainNavigation">
      <ul>
      
        

          <li class="blog-collection active-link">

            

              
                <a href="/">Blog</a>
              

              

            

          </li>

        

          <li class="page-collection">

            

              
                <a href="/about/">About</a>
              

              

            

          </li>

        

          <li class="page-collection">

            

              
                <a href="/other-writing/">Other Writing</a>
              

              

            

          </li>

        

          <li class="page-collection">

            

              
                <a href="/favorite-posts/">Favorite Posts</a>
              

              

            

          </li>

        

          <li class="page-collection">

            

              
                <a href="/good-to-great-python-reads/">Good to Great Python reads</a>
              

              

            

          </li>

        

          <li class="page-collection">

            

              
                <a href="/python-software-foundation/">Python Software Foundation</a>
              

              

            

          </li>

        

          <li class="page-collection">

            

              
                <a href="/contact/">Contact</a>
              

              

            

          </li>

        
      
      </ul>
    </nav>

  </div>

  
    <a href="#nav" id="mobile-show-nav">Menu</a>
  
          </div>
        </div>

    		<header id="header">
          <div id="logo" data-content-field="site-title">
          
            <h1 class="logo image">
              <a href="/">
                
                  <img src="//static.squarespace.com/static/50b76babe4b05c3cd8bab78a/t/52f6d3c3e4b0b0787cdf2bf8/1391924533428/?format=1500w" alt="jesse noller - a blog" />
                
              </a>
            </h1>
            
            <p class="logo-subtitle">python, programming, technology & stuff.</p>
            
          
          </div>
    		</header>
  		</div> <!-- /#headerWrapper -->

  		<div id="contentWrapper" role="main">
    		<section id="page">

          <!-- // CATEGORY NAV -->
          

          <article class="hentry category-programming category-python author-jesse post-type-text" id="article-50b77287e4b0192bc2227cc0" data-item-id="50b77287e4b0192bc2227cc0">

  <!--POST HEADER-->
  <header>
    <div class="date">
      <time class="published" datetime="2009-05-25">
        May 25, 2009
      </time>
    </div>
    
    <h1 class="entry-title">
      
        <a href="/blog/2009/05/26/a-short-list-of-things-i-dont-like-about-python">A short list of things I don't like about Python</a>
      
    </h1>
    
    <p class="author-categories"><span class="blog-author">by <a href="/?author=50b76e12e4b0cca10d7c421a">jesse</a></span><span class="categories"> in <a href="/?category=Programming" rel="tag">Programming</a>, <a href="/?category=Python" rel="tag">Python</a></span></p>
  </header>

  <hr class="short-line" />

  <div class="content-area">
    <!--SPECIAL CONTENT-->
    

    <!--POST BODY-->
    <div class="body entry-content">
      
    	<div class="sqs-layout sqs-grid-12 columns-12" data-layout-label="Post Body" data-type="item" id="item-50b77287e4b0192bc2227cc0"><div class="row sqs-row"><div class="col sqs-col-12 span-12"><div class="sqs-block html-block sqs-block-html" data-block-type="2" id="block-50b77287e4b0192bc2227cbf"><div class="sqs-block-content"><p><!--noadsense-->Yeah, I haven't posted in awhile - since pycon I've been sick off an on, working my butt off at the place which allows me to purchase ice cream for my kid, and so on. Busy busy. Not to mention, I've been suffering a slight case of burnout - long story.</p>
<p>That all being said, I think it was last week when I twittered a minor philosophical point which was picked up and ran with by <a href="http://pydanny.blogspot.com/2009/05/eight-things-i-dont-like-about-python.html" target="_blank">pydanny</a>. The little point I made was something like:</p>
<blockquote><p>I don't think it's unreasonable to be able to name at <b>least</b> 5 things you don't like/would change about something you love. Implementation details are fair game too</p></blockquote>
<p><img height="207" alt="stop-whining.jpg" align="right" width="155" src="http://static.squarespace.com/static/50b76babe4b05c3cd8bab78a/50b7714be4b0192bc2226c59/50b7714ce4b0192bc2226cad/1243298612000/?format=original" border="0" />
Now, before I delve into my personal list, I want to provide some context to this comment. It actually has some history, and it's not an original thought - I think <a href="http://ivory.idyll.org/blog/mar-07/five-things-I-hate-about-python" target="_blank">Titus Brown</a> started a meme around this last year. In his case, it was purely based around python.</p>
<ul>
<li> <a href="http://ivory.idyll.org/blog/mar-07/five-things-I-hate-about-python" target="_blank">Titus' Post</a>
<li> <a href="http://pydanny.blogspot.com/2009/05/eight-things-i-dont-like-about-python.html" target="_blank">Daniel's Post</a>
<li> <a href="http://sayspy.blogspot.com/2007/04/five-1-things-i-hate-about-python-and.html" target="_blank">Brett's Post</a>
<li> <a href="http://jacobian.org/writing/hate-python/" target="_blank">Jacob's Post</a>
</ul>
<p>In my case, I've long maintained that if you can not name things you would change, irk you or generally dislike about something (not just a language) you supposedly love, whether it be a tool, a language, an OS, etc - then it shows you have a certain lack of self-awareness or pragmatism (there is another word I'm grasping for here, but it escapes me).</p>
<p>Historically, I'll ask this in interview situations whether I'm speaking with someone who is a test engineer (name and explain 5 things you love/hate about automated testing?) a programmer (name and explain 5 things you love/hate about language $FOO) - generally speaking, this is great discussion fodder, and allows you to probe the thought process of the candidate.</p>
<p>For example, if someone says "I hate Python's whitespace" and they're interviewing for a Python coding position, I think it fair game to dig into that a bit and see if its rational, and ultimately ask the question: If you hate something so fundamental, why do you use it/why do you want to program in it for the foreseeable future?</p>
<p>In any case, I promised a few people I'd give them the shortlist of nits (I don't <b>hate</b> these things, I simply dislike them) I have with Python. It's important to remember that:</p>
<ol>
<li> I contribute work to python-core (see the multiprocessing module)
<li> I program in Python daily for work, and in my free time too.
<li> I participate (when I'm not on a self imposed exile) on the mailing lists and discussions (see Python-dev, etc.
<li> I too, am a strong believer in "put up or shut up"
</ol>
<p>Now, part of me is sad that I have to preface me being critical with a disclaimer like the above; but alas - some people, especially those on the internet, thrive on controversy and fail to read more than 5 or 6 words before posting some half-witted response, or worse yet, someone skims to the gripes I have, finds one they want to take me to task about and says "SUBMIT A PATCH !!!11". </p>
<p>I <b>do</b> contribute back, so you can avoid telling me to submit a patch, ok?</p>
<p>That all being said, here's my list:</p>
<ol>
<li> <b>Concurrency</b>: This is actually a love/hate topic for me. Obviously, I'm the maintainer of the multiprocessing module, which sidesteps the GIL, but the GIL is still an irritant for me (given I do write a lot of threaded code). A lot of people are very familiar with the fact I am a proponent of threads <b>and</b> processes/IPC, as both serve different (yet overlapping) purposes. There is room for both. Hopefully unladen-swallow will be able to get rid of the GIL, and then we can all move on with our lives: So long as in killing it, we don't hose the ecosystem of C extensions.
<ul>
<li>Additionally, I would love to see a decent coroutine implementation included in the standard library, once PEP 380 is done and in the bag, if you need justification, see David Beazley's coroutine talk. Again, while people might disagree with this, saying that coroutines/processes/threads all "do the same thing" and would violate "TIOWTDI"  (There's Only One Way To Do It) I would strongly disagree with them. In the case of concurrency, different solutions fit different problems. We do not have a grand unified theory of concurrency within python.
<li>Also in the concurrency vein, I would like to see a cross language messaging/serialization system/format eventually come in. Right now, we have pickle; most recently, JSON - and JSON might be the final answer in this regard, but something akin to protocol buffers has also piqued my interest. Given we have JSON, I'm not terribly hot on this one.
<li>Finally, I'd like to see more of the java.util.concurrent abstractions migrated in. I mean, using python threads isn't hard, seriously, but more/better abstractions make things nicer for everyone.
</ul>
<p><br></p>
<li> <b>The Standard Library</b>: This, again, is a love/hate thing - I <b>love</b> the standard library, and I will gladly argue with anyone who suggests getting rid of it. However, that said - I would like to see the entire thing get a much better documentation treatment, the docs while good, could be 1000x better, more clear/etc. I would also make every single module in there <b>PEP 8 compliant</b>. I know that sounds like a style-nazi thing, but if that's the style we're to use, I think the first thing to adhere to that <b>is</b> the standard lib.
<ul>
<li>It's also disorganized. While flat is better than nested, I'm sorry - but I think making it deeper and putting all the things like one another into the same namespaces does make sense.
<li>I would also break out the stdlib from core. This idea was discussed at the python language summit, and I think almost everyone there was in agreement. The idea would be to separate out the stdlib into it's own path inside the repo, and other python implementations (such as Jython/etc) could use that copy as their copy of the stdlib modules. Anything which was CPython specific (such as multiprocessing) would stay with core/be marked as CPython only.
<li>Taking this concept of breaking out the standard library a little further: I would begin to evolve it a little more quickly. There's a strong difference between changes to the language, and changes to the standard library. In the case of the former; it should evolve slowly, and carefully. In the case of the latter (the stdlib) I think it could - and possibly should, evolve more quickly. By evolve, I mean "get cleaned up, have things removed/added" more quickly. I do not, however, mean with less thought. There's obviously a lot of "buts" and other concerns with this idea, but it's just a thought. I think compartmentalizing this into python-core and python-stdlib meshes with how a lot of people think about things.</ul>
<p><br></p>
<li> <b>The Docs</b>: I touched on this in the stdlib one, but the standard library documentation, as well as rich examples for a lot of the core features are lacking. Many of them focus on syntax and not necessarily on <b>use</b>. For example, I would gladly integrate all of <a href="http://www.doughellmann.com/PyMOTW/" target="_blank">Doug Hellmann's Python Module of the Week</a> posts into the standard library documentation tomorrow, and wholesale if I could - his examples are much more rich than those we find in the current docs. <br>Many people, including myself, have been working on making these better - in my case, I need to overhaul the multiprocessing docs when I have a chance.
<ul>
<li>Don't get me wrong - I actually appreciate the docs we have, they keep me sane, but they can be better, more clear and in some cases, more practical. One or two examples for usage just doesn't cut it.</p>
<li><b>update</b> see: <a href="http://tosh.pl/gminick/gsoc/sphinx/" target="_blank">http://tosh.pl/gminick/gsoc/sphinx/</a>
</ul>
<p><br>
<img height="142" alt="cosmic-rex-excuse-me-wtf-r-u-doin.jpg" align="right" width="181" src="http://static.squarespace.com/static/50b76babe4b05c3cd8bab78a/50b7714be4b0192bc2226c59/50b7714ce4b0192bc2226cb0/1243299129000/?format=original" border="0" /></p>
<li> <b>Packaging</b>: Ahhhhh! I'm not going to go too deep into this rabbit hole, especially given I know <a href="http://tarekziade.wordpress.com/2009/05/10/distutils-state/" target="_blank">Tarek is hacking away </a>at making python packaging a much better animal, but the entire setuptools/eggs/distutils/etc pile is well, frustrating. I just want a clean, standard way of packaging my packages, built into core, that doesn't force me into install into the global site-packages directory. Also, uninstall, dammit. I <b>know</b> setuptools and easy_install and eggs were designed to scratch an itch: and I do use easy_install, but the entire pile of things need to be made into a standard, implemented in core and we need to move on.
<ul>
<li> However, as I pointed out during the language summit - I don't think something like easy_install belongs in core, instead I think core should make what easy_install <b>does</b> (to a certain extent) easier and standard, so people can use whatever tools/scripts/etc they want. One ring to bind them!</ul>
<p><br></p>
<li> <b>Linting</b>: Ok, face it, if you're on a big enough team, you need to have a pre commit hook for your VCS that lints the code, and yacks if it doesn't conform. I would <b>love</b> for one to be built into the stdlib, but something like pylint is too big, pychecker is too simple, and I haven't used pyflakes recently enough to comment. There was<a href="http://mail.python.org/pipermail/python-ideas/2009-May/004483.html" target="_blank"> a thread on python-ideas about this</a> recently - and maybe Jeremy Hylton is right, and it doesn't belong in core, but if that's the case, we need to pick one to "endorse" on the python doc website. Maybe in a "getting started with developing python" document, which is linked in size 30 font, and links to a linter, maybe the pep8.py and reindent.py scripts, etc. It should be painfully obvious where to get and how to use these tools. Yeah, I know "waaaaah why didn't they link to mine" - well, because we liked this one over here more. QQ.
<ul>
<li>As it stands, I can not count the number of times I've been asked about linters and style checkers for python code. Maybe we make three packages: python-core, python-stdlib and python-tools.</ul>
<p><br></p>
<li> <b>Optional Static Typing</b>: This one doesn't make me feel like I'll make any friends, but I would love to have pre-runtime, static typing as an option to python - maybe as a --anal-types flag. Guido has <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=85551" target="_blank">discussed</a> (<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=86641" target="_blank">part 2</a>) the difficulties of this before, so I don't think this will ever come (the closest we get to "type safety" is function annotations, which make me feel funny in sensitive places). The biggest reason I have for static typing of any flavor, is that I would prefer to have the ability to catch some errors prior to runtime. That's all. On a big enough team, all hacking on the same (massive) python code base, I've found you do want the ability to turn something like this on - it helps you with a (small) class of very annoying bugs.
<ul>
<li>I do love me the dynamic/late typing system of python, and I use it to my advantage as much as possible. So, I wouldn't trade the dynamism of Python for static types, it's just an nit I have. Of course, maybe something like interfaces (as Jacob points out in his list) might solve some of the issues I have (mainly bad people doing silly things). The rest of the stuff is why I write unit tests and actually run the damned code.
<li>Yes, I know the drawbacks of something like this; I also don't have some sort of magic solution to be able to wave a wand and do this. Nor do I have a concrete proposal, otherwise you'd see an email on python-dev. Other people much smarter than me have pointed out the sheer enormity and numerous drawbacks to something like this. No, I don't expect magic fairy dusty to suddenly appear and just "make this work".</ul>
<p><br></p>
<li> <b>Standard Library Part II</b>: Yeah, you might notice a lot of my gripes are around the stdlib - but in particular, I want to point out the state of XML handling in the standard library is about as clear as wearing glasses made of meat. Additionally, the httplib/urllib/urllib2 thing? Yeah. No.
<ul>
<li>While I'm harping on this stuff, get rid of the commands module, anything that is not in subprocess should be put there. Since I mentioned subprocess, <b>needs more documentation</b> also, non blocking asynchronous input/output/handling of subprocess data should be easy, and built in. There's a <a target="_blank" href="http://static.squarespace.com/static/50b76babe4b05c3cd8bab78a/50b7714be4b0192bc2226c59/50b772fde4b0192bc222822b/1354199805695/?format=original">GSoC project</a> around this <a href="http://mail.python.org/pipermail/python-dev/2009-May/089733.html" target="_blank">spinning up</a>, so we'll see.
</ul>
</ol>
<p>That all being said, would I trade python for something else? Not right now. Most of my nits are exactly that: nits, and most of all, they're not impossible to change or resolve (given enough time, and resources). </p>
<p>I can make a similar list for OS/X, Linux and other things I use day in and day out - hell, I can make one for myself (ask my wife about me griping about me sometime). I can probably make a list like this for every single thing I've written, tools, scripts, apps, etc. </p>
<p>Like I said, being aware of, and trying to overcome your own shortcomings is how we all improve. In the case of a language, you can't just keep adding things into a standard library and call it "better" - you have to take a constant look at what you've done to date with a critical eye, and ask yourself "what can we do better".</p></div></div></div></div></div>
      
      <div class="sqs-post-entry"></div>
    </div>
  </div>

  <!--POST FOOTER-->
    <footer>
      <div class="">
        <div class="comment-share-like">
          
          
            
              <a href="/blog/2009/05/26/a-short-list-of-things-i-dont-like-about-python#comments-50b77287e4b0192bc2227cc0" class="comment-link">
                62 Comments</a>
              
            
          
          
          <span class="squarespace-social-buttons inline-style" data-system-data-id="" data-asset-url="http://static.squarespace.com/static/50b76babe4b05c3cd8bab78a/50b7714be4b0192bc2226c59/50b77287e4b0192bc2227cc0/1243298622000/" data-record-type="1" data-full-url="/blog/2009/05/26/a-short-list-of-things-i-dont-like-about-python" data-title="A short list of things I don't like about Python"></span>

          <span class="sqs-simple-like" data-item-id="50b77287e4b0192bc2227cc0" data-like-count="0"><span class="like-icon"></span><span class="like-count"></span></span>

        </div>

        

      </div>
    </footer>

  <hr class="short-line" />

</article>


<!--PAGINATION-->

<nav class="pagination">
  <ul>
    <li class="previous"><a href="/blog/2009/07/17/trapped-in-python-package-send-food"><span class="fs1 arrow-prev" aria-hidden="true" data-icon="&#x0022;"></span>Previous Post<br /><span class="page-title">Trapped in python ...</span></a></li>
    <li class="next"><a href="/blog/2009/04/13/yaml-aint-markup-language-completely-different">Next Post<br /><span class="page-title">YAML ain't Markup ...</span><span class="fs1 arrow-next" aria-hidden="true" data-icon="&#x0021;"></span></a></li>
  </ul>
</nav>


<!-- COMMENTS -->

<section id="comments-50b76babe4b05c3cd8bab78a" class="comments-wrapper">
  <div class="squarespace-comments" id="disqus_thread"></div>
</section>

    		</section>
  		</div>

      <footer id="pageFooter">
        <div class="sqs-cart-dropzone"></div>
        <div class="sqs-layout sqs-grid-12 columns-12" data-layout-label="Footer Content" data-type="block-field" data-updated-on="1354245882140" id="footerBlock"><div class="row sqs-row"><div class="col sqs-col-12 span-12"><div class="sqs-block html-block sqs-block-html" data-block-type="2" id="block-5dfb622ffb3ab97eed56"><div class="sqs-block-content"><p class="text-align-center"><em>This work is licensed under a&nbsp;<a href="http://creativecommons.org/licenses/by-nc-nd/3.0/us/deed.en_US" data-link-type="external">Creative Commons Attribution-NonCommercial-NoDerivs 3.0 United States License</a>.</em></p></div></div></div></div></div>
        <script type="text/javascript" data-sqs-type="imageloader">(function() {var SQUARESPACE_SIZES=[1500,1E3,750,500,300,100],IMAGE_LOADING_CLASS="loading",ImageLoader=new function(){this.load=function(a,b){function c(a,b,c){var d=new Image;d.onload=b;d.onerror=c;d.src=a}a.getDOMNode&&(a=a.getDOMNode());var d=this._getDataFromNode(a,b),e=!(!d.dimensions||!d.dimensions.width||!d.dimensions.height),l=d.load+"";if("false"===l)return!1;var g=d.mode;if(e&&("fit"==g||"fill"==g)){g=a.parentNode;if(!g)return console.error("Not doing anything, parentNode not found."),!1;if(!this.refresh(a,
b,g))return!1}var n=this._intendToLoad(a,d);if("string"==typeof n&&"viewport"!==l){var m=this.getUrl(n,d),d=a.getAttribute("data-image-resolution");a.getAttribute("src")!==m&&this.isValidResolution(n,d)&&(a.onload=function(){a.className=a.className.replace(IMAGE_LOADING_CLASS," ").trim();a.setAttribute("data-image-resolution",n)},!a.getAttribute("src")&&-1===a.className.indexOf(IMAGE_LOADING_CLASS)&&(a.className+=(a.className?" ":"")+IMAGE_LOADING_CLASS),!a.getAttribute("src")&&e?a.setAttribute("src",
m):c(m,function(){e?a.setAttribute("src",m):(a.setAttribute("data-image-dimensions",this.width+"x"+this.height),ImageLoader.load(a,b))},function(){a.className=a.className.replace(IMAGE_LOADING_CLASS," ").trim();a.setAttribute("src",m)}));return!0}return n};this.refresh=function(a,b,c){a.getDOMNode&&(a=a.getDOMNode());c&&c.getDOMNode&&(c=c.getDOMNode());c=c||a.parentNode;if(!c)return console.error("Not doing anything, parentNode not found."),!1;var d=this._getDataFromNode(a,b),e=c.offsetWidth,l=c.offsetHeight;
b=d.mode;if("none"!=b){var g=d.dimensions.width,n=d.dimensions.height,m=g/n,q=e/l;if(d.fixedRatio)"fill"==b&&q>m||"fit"==b&&q<m?(h=100,k=100*(q/m),r=(100-k)*d.focalPoint.y,p=0):(h=100*(m/q),k=100,r=0,p=(100-h)*d.focalPoint.x),a.style.top=r+"%",a.style.left=p+"%",a.style.width=h+"%",a.style.height=k+"%";else{var f;"fill"===b?f=m>q?l/n:e/g:"fit"===b&&(f=m<q?l/n:e/g);!d.stretch&&("fit"==b&&1<f)&&(f=1);var h=Math.ceil(g*f),k=Math.ceil(n*f);if(0===h||0===k)return!1;var p,r;"fill"===b?(p=Math.min(Math.max(e/
2-h*d.focalPoint.x,e-h),0),r=Math.min(Math.max(l/2-k*d.focalPoint.y,l-k),0)):"fit"===b&&(f=d.fitAlignment,p=f.left?0:f.right?e-h:h<e?(e-h)/2:0,r=f.top?0:f.bottom?l-k:k<l?(l-k)/2:0,"inline"==this._getStyle(a,"display")&&(a.style.fontSize="0px"),this._resetAlt(a,function(){h-=a.offsetHeight-a.clientHeight;k-=a.offsetWidth-a.clientWidth}));a.style.top=Math.ceil(r)+"px";a.style.left=Math.ceil(p)+"px";a.style.width=Math.ceil(h)+"px";a.style.height=Math.ceil(k)+"px"}p=this._getStyle(c,"position");a.style.position=
"relative"==p?"absolute":"relative";if("fill"==b&&(b=this._getStyle(c,"overflow"),!b||"hidden"!=b))c.style.overflow="hidden";return!0}};this._intendToLoad=function(a,b){function c(c,d){"none"===b.mode&&(a.style.width=null,a.style.height=null);var e=parseFloat(a.getAttribute(c)),f=parseFloat(e);if(!f||isNaN(f))e=g._getStyle(a,c),f=parseFloat(e);if(!f||isNaN(f))e=g._getStyle(a,"max-"+c,"max"+(c.substr(0,1).toUpperCase()+c.substr(1))),f=parseFloat(e);if(0===d||e)switch(g._stringType(e)){case "percentage":d=
parseInt(e,10)/100*l["offset"+c.substr(0,1).toUpperCase()+c.substr(1)];break;case "number":d=parseInt(e,10)}!f&&(0!==d&&!a.getAttribute("src"))&&(d=0);return d}b=b||this._getDataFromNode(a);if(!b.source)return!1;var d=a.offsetWidth,e=a.offsetHeight,l=a.parentNode,g=this;this._resetAlt(a,function(){d=c("width",d);e=c("height",e)});0===d&&0===e?(d=b.dimensions.width,e=b.dimensions.height):0===d?d=this.getDimensionForValue("width",e,b):0===e&&(e=this.getDimensionForValue("height",d,b));"viewport"===
b.load&&(a.style.width=Math.floor(d)+"px",a.style.height=Math.floor(e)+"px");return this.getSquarespaceSize(d,e,b)};this._getDataFromNode=function(a,b){b=b||{};var c={focalPoint:{x:0.5,y:0.5},dimensions:{width:null,height:null},mode:"none",fitAlignment:{center:!0},load:"true",stretch:!0,fixedRatio:!1};if(b.focalPoint)c.focalPoint=b.focalPoint;else{var d=a.getAttribute("data-image-focal-point");if(d&&(d=d.split(","))&&2==d.length)c.focalPoint={x:parseFloat(d[0]),y:parseFloat(d[1])}}if(b.dimensions)c.dimensions=
b.dimensions;else if((d=a.getAttribute("data-image-dimensions"))&&(d=d.split("x"))&&2==d.length)c.dimensions={width:parseInt(d[0],10),height:parseInt(d[1],10)};b.mode?c.mode=b.mode:a.parentNode&&(d=a.parentNode.className,-1!==d.indexOf("content-fill")?c.mode="fill":-1!==d.indexOf("content-fit")&&(c.mode="fit"));if("fit"===c.mode&&a.parentNode&&(d=b.fitAlignment||a.getAttribute("data-alignment")||a.parentNode.getAttribute("data-alignment")))c.fitAlignment={top:-1!==d.indexOf("top"),left:-1!==d.indexOf("left"),
center:-1!==d.indexOf("center"),right:-1!==d.indexOf("right"),bottom:-1!==d.indexOf("bottom")};if(b.load)c.load=b.load;else if(d=a.getAttribute("data-load"))c.load=d;if("undefined"!==typeof b.stretch)c.stretch=b.stretch;else if(d=a.getAttribute("data-image-stretch"))c.stretch="true"===d?!0:!1;c.source=b.source?b.source:a.getAttribute("data-src");if(c.source&&(-1!==c.source.indexOf("squarespace.com")||-1!==c.source.indexOf("squarespace.net"))&&"http:"===c.source.substr(0,5)&&"https"===window.location.protocol.substr(0,
5))c.source=c.source.replace("http://","https://");if(b.fixedRatio)c.fixedRatio=b.fixedRatio;else if(d=a.getAttribute("data-fixed-ratio"))c.fixedRatio="true"==d;return c};this._stringType=function(a){return"string"===typeof a&&-1!==a.indexOf("%")?"percentage":isNaN(parseInt(a,10))?NaN:"number"};this._getStyle=function(a,b,c){var d;a.currentStyle?d=a.currentStyle[c||b]:window.getComputedStyle&&(d=document.defaultView.getComputedStyle(a,null).getPropertyValue(b));return d};this._isVisible=function(a){a=
a.getBoundingClientRect();return 0<=a.left&&0<=a.top||0<=a.bottom&&0<=a.right||0<=a.left&&0<=a.bottom||0<=a.right&&0<=a.top};this.getSquarespaceSize=function(a,b,c){a=Math.max(b/(c.dimensions.height/c.dimensions.width),a);"number"==typeof window.devicePixelRatio&&(a*=window.devicePixelRatio);for(b=1;b<SQUARESPACE_SIZES.length&&!(a>SQUARESPACE_SIZES[b]);b++);return SQUARESPACE_SIZES[b-1]+"w"};this.getDimensionForValue=function(a,b,c){var d=c.dimensions.width;c=c.dimensions.height;return"width"==a?
d/c*b:"height"==a?c/d*b:NaN};this.getUrl=function(a,b){var c=b.source;return a&&("/"==c[0]||-1!=c.indexOf("squarespace.com")||-1!=c.indexOf("squarespace.net"))?(-1===c.indexOf("format="+a)&&(c=c+(-1!==c.indexOf("?")?"&":"?")+"format="+a),window.Static&&(window.Static.IN_BACKEND&&-1===c.indexOf("storage=local"))&&(c+="&storage=local"),c):b.source};this.isValidResolution=function(a,b){a=parseInt(a,10);b=parseInt(b,10);return isNaN(a)||isNaN(b)?!0:a>b};this._resetAlt=function(a,b){var c=a.getAttribute("alt"),
d=c&&0<c.length&&!a.getAttribute("src");if(d){var e=a.style.display;a.removeAttribute("alt");a.style.display="none";a.offsetHeight+0;a.style.display=e}b.call(this);d&&a.setAttribute("alt",c)}};window.ImageLoader=ImageLoader;var siteCSSHandle,loopHandle,imagesTimer=50;function ancestorHasClass(a,b){return"undefined"!==typeof a.className&&-1!==a.className.indexOf(b)?!0:a.parentNode?ancestorHasClass(a.parentNode,b):!1}
var hasAttr=function(a,b){return a.hasAttribute?a.hasAttribute(b):!!a.attributes[b]},getAttr=function(a,b){return a.getAttribute?a.getAttribute(b):a.attributes[b]};function init(){var a=document.images;if(0<a.length)for(var b=0,c=a.length;b<c;b++)(hasAttr(a[b],"data-image")||hasAttr(a[b],"data-src"))&&"false"!==getAttr(a[b],"data-load")+""&&ImageLoader.load(a[b])}init();window.YUI&&YUI.add("squarespace-imageloader",function(a){});
})();</script>
<script>Squarespace.afterBodyLoad(Y);</script>
      </footer>

    </div> <!-- /#canvasWrapper -->

  

  </body>
</html>
