<!doctype html>
<html>
  <head>
    <title>charles leifer | Using python to generate awesome linux desktop themes</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel=stylesheet type=text/css href="/static/css/blog.min.css?ts=ab38732f" />
    <link rel=stylesheet type=text/css href="/static/css/style.css?ts=ab38732f" />
    <link rel=stylesheet type=text/css href="/static/css/hilite.css?ts=ab38732f" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="alternate" href="/blog/rss/" title="Atom feed" type="application/atom+xml" />
    
    <script src="/static/js/jquery-1.11.0.min.js" type="text/javascript"></script>
    <script src="/static/js/bootstrap.min.js"></script>
    
    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
    
    
      
      <script type="text/javascript">
        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-6418405-1']);
        _gaq.push(['_setDomainName', 'charlesleifer.com']);
        _gaq.push(['_trackPageview']);

        (function() {
          var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          
          ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
          var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();
      </script>
      
    
  </head>

  <body class="">
    <div class="navbar navbar-inverse navbar-static-top" role="navigation">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="/">>>> charlesleifer.com</a>
        </div>
        <div class="navbar-collapse collapse">
          <ul class="nav navbar-nav">
            <li><a href="/blog/">/blog</a></li>
            <li><a href="https://github.com/coleifer/">/code</a></li>
            <li><a href="/contact/">/contact</a></li>
            <li><a href="http://media.charlesleifer.com/blog/documents/resume.pdf">/resume</a></li>
            
          </ul>
          <form action="/blog/search/" class="navbar-form navbar-right" method="get" role="search">
            <div class="form-group">
              <input autocomplete="off" class="form-control input-xs" name="q" placeholder="Search" style="width: 140px;" type="text" value="">
            </div>
          </form>
        </div>
      </div>
    </div>

    <div class="container content">
      <div class="page-header">
        
        <h1>Using python to generate awesome linux desktop themes</h1>
        
      </div>

      

      
  
  <div class="post-info">
    
    August 22, 2013 10:56
    <span class="separator">/</span>
    <a href="#comments">5 comments</a>
    <span class="separator">/</span>
    
      <a href="/blog/tags/linux/">linux</a>
    
      <a href="/blog/tags/python/">python</a>
    
  </div>
  
  <p>I remember spending hours when I was younger cycling through the various awesome 
color themes on my 386, in the glory days of windows 3.1.  Remember hotdog stand?</p>
<p><a href="http://media.charlesleifer.com/blog/photos/hotdog-stand.png" title="Hotdog Stand"><img alt="Hotdog Stand" class="img-responsive" src="http://media.charlesleifer.com/blog/photos/thumbnails/hotdog-stand_800x800.png" /></a></p>
<p>Well, I haven't changed much.  I still enjoy making tweaks to the colors and
appearance of my desktop.  In this post I'll talk about a script I wrote that
makes it easy for me to modify all the various colors and configuration files
which control the appearance of my desktop.</p>
<p>Below is a screenshot of my current desktop setup.  I've made the windows transparent
so you can see the wallpaper.  The left-hand side shows the output of two scripts 
which show off my 16-color terminal colorscheme.  The right-hand side shows where
I spend most of my time, the text editor.  At the bottom is a little ribbon that
shows my active "virtual desktops", as well as some status info, a clock and my
tray icons (sound volume, wifi, and dropbox).</p>
<p><a href="http://media.charlesleifer.com/blog/photos/s1377181854.49.png" title="My desktop"><img alt="My desktop" class="img-responsive" src="http://media.charlesleifer.com/blog/photos/thumbnails/s1377181854.49_800x800.png" /></a> </p>
<p>I really like to freshen up my colorscheme every month or two, but as I'm
particular about everything matching, it takes some time to do it right and
I'm not always sure how it will turn out. I also like to save my themes so I can
switch back to them, but since there are so many files that contribute to the 
appearance, it often was more trouble than it was worth to try and "save" them.</p>
<p>So I did what any programmer would do, I decided to write a script to make it
really easy for me to change up my colorschemes.</p>
<p>Here are some links to some themes I've generated with my script.  They have
cheesy names, but it helps me remember which is which.</p>
<ul>
<li><a href="http://media.charlesleifer.com/blog/photos/beach.png">"beach"</a></li>
<li><a href="http://media.charlesleifer.com/blog/photos/bloom.png">"bloom"</a></li>
<li><a href="http://media.charlesleifer.com/blog/photos/candybean.png">"candybean"</a></li>
<li><a href="http://media.charlesleifer.com/blog/photos/pastels.png">"pastels"</a></li>
<li><a href="http://media.charlesleifer.com/blog/photos/waves.png">"waves"</a></li>
<li><a href="http://media.charlesleifer.com/blog/photos/waves2.png">"waves 2"</a></li>
<li><a href="http://media.charlesleifer.com/blog/photos/zenburn.png">"zenburn"</a></li>
</ul>
<p>In case you're curious, I'm using <a href="http://i3wm.org">i3</a>, a "tiling" window manager. Unlike Windows or 
OS X, my windows are all placed flat and "tiled", and instead of stacking them 
I have multiple virtual desktops. Check out the screencast:</p>
<p><iframe width="459" height="344" src="http://www.youtube.com/embed/Wx0eNaGzAZU?feature=oembed" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<h3>"themer" in action</h3>
<p>The script itself is pretty easy to use, and hopefully very hackable if you're
interested in tailoring it to your desktop.  The screenshot below shows how I typically use <code>themer</code>.</p>
<ul>
<li><code>themer list</code> to list out all the themes I've currently got</li>
<li><code>themer current</code> displays the name of my current theme and what the colors look like</li>
<li><code>themer generate bloom ~/pictures/Wallpapers/bloom.jpg</code> generates a new theme
  based on a nice wallpaper I found (wallpaper displayed in bottom-left).</li>
<li><code>themer list</code> again to see that "bloom" was added</li>
<li>Then lastly I open up a browser and view the auto-generated "index.html" file
  which displays the new colorscheme as an HTML page.</li>
</ul>
<p><a href="http://media.charlesleifer.com/blog/photos/themer.png" title="Using themer"><img alt="Using themer" class="img-responsive" src="http://media.charlesleifer.com/blog/photos/thumbnails/themer_800x800.png" /></a></p>
<h3>The source code</h3>
<p>The script itself is over 500 lines of (hacked together) code, too long to just slap into this
blog post, so I've put it up on github as a gist:</p>
<p><a href="https://gist.github.com/coleifer/33484bff21c34644dae1">https://gist.github.com/coleifer/33484bff21c34644dae1</a></p>
<p>I've also included some templates to get you started if you'd like to try it out
for yourself.  These belong in the "default" template folder, <code>~/.themer/templates/i3/</code> 
(though of course you can change this to suit you).  The templates and config 
are in this gist:</p>
<p><a href="https://gist.github.com/coleifer/9fbab2d19a337512ab2a">https://gist.github.com/coleifer/9fbab2d19a337512ab2a</a></p>
<p>Additionally, the script relies on a helper I wrote called <a href="https://gist.github.com/coleifer/2a35418b520c8e1ec4fd">wallfix</a>
which automatically resizes and crops an image to make it suitable for use as a
wallpaper.  The cropped wallpaper is stored in <code>$HOME/.wallpaper.[png|jpg]</code>.</p>
<h3>A color for every occasion</h3>
<p>Sometimes I would see a really cool colortheme on <a href="http://reddit.com/r/unixporn">the unixporn subreddit</a>
(don't worry, its safe for work), so my initial plan was to be able to take the
16 color <a href="https://wiki.archlinux.org/index.php/X_resources">Xresources</a> file and
generate everything else from that.  </p>
<p>A while ago I found a really cool site that will automatically generate color
schemes for popular text editors. <a href="http://sweyla.com/themes/seed/693812/">Sweyla's site</a>
let's you cycle through thousands of programmatically generated color themes by
clicking a button -- it's pretty slick and some of the themes look great so I
knew I wanted my script to also be able to use themes from Sweyla's site.</p>
<p>And finally, back when I wrote about using k-means to detect the <a href="/blog/using-python-and-k-means-to-find-the-dominant-colors-in-images/">dominant colors in images</a>,
<a href="https://github.com/radiosilence">a friendly redditor</a> shared <a href="https://gist.github.com/radiosilence/3946121">a script</a>
he wrote that will normalize the colors extracted from wallpaper images so he 
could generate Xresources files directly from his wallpaper. I borrowed his
code for "normalizing" colors so my script could generate colorschemes directly
from a wallpaper I liked.</p>
<p>So the script will accept three possible inputs:</p>
<ul>
<li>Xresources color definitions</li>
<li>A set of colors from Sweyla's website</li>
<li>An image file (which will also be the wallpaper)</li>
</ul>
<p>The script is then responsible for updating my various config files. Here is the list 
of things I change whenever updating my colors:</p>
<ul>
<li>Xresources, the 16 colors I use on my terminal</li>
<li>Window borders (i3 uses a simple text file to configure these)</li>
<li>Status bar and program launcher (i3status and dmenu_run)</li>
<li>Wallpaper</li>
<li>Icons (I use <a href="http://gnome-look.org/content/show.php/?content=102435">ACYL</a>, a customizable set of svg icons).</li>
<li>Text editor</li>
</ul>
<h3>Setting things up</h3>
<p>A long time ago a former coworker of mine wrote some utility scripts that used 
a combination of python, YAML and Jinja2 to template out his various system config 
files. I think this is brilliant and decided to go with the same combination for
my script. It reads a YAML file that defines variables controlling
things like the font, window borders, etc. The config file also defines the 
locations of the templates for rendering my <code>.Xresources</code>, <code>.i3/config</code>, etc.</p>
<p>Here is what my main config currently looks like:</p>
<div class="highlight"><pre><span class="l-Scalar-Plain">variables</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">primary</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">magenta</span>
  <span class="l-Scalar-Plain">secondary</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">green</span>
  <span class="l-Scalar-Plain">tertiary</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">red</span>
  <span class="l-Scalar-Plain">special</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yellow</span>
  <span class="l-Scalar-Plain">transparency</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">85</span>
  <span class="l-Scalar-Plain">fontName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">terminus</span>
  <span class="l-Scalar-Plain">fontSize</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">12</span>
  <span class="l-Scalar-Plain">font</span><span class="p-Indicator">:</span> <span class="s">"-*-terminus-*-*-*-*-12-*-*-*-*-*-*-*"</span>
  <span class="l-Scalar-Plain">window_style</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1pixel</span>
<span class="l-Scalar-Plain">files</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">colors.tpl</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">colors</span>
  <span class="l-Scalar-Plain">i3.tpl</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">i3.conf</span>
  <span class="l-Scalar-Plain">i3status.tpl</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">i3status.conf</span>
  <span class="l-Scalar-Plain">xresources.tpl</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Xresources</span>
  <span class="l-Scalar-Plain">index.tpl</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">index.html</span>
</pre></div>
<p>The <code>variables</code> section defines things that I may want to change later, such
as the font I use, or which colors I treat as <code>primary</code> or <code>secondary</code>. The
<code>files</code> section contains a mapping of template file to destination file. These
are just jinja templates -- here is a snippet from the <code>xresources.tpl</code>:</p>
<div class="highlight"><pre><span class="x">*faceName: </span><span class="cp">{{</span> <span class="nv">fontName.title</span><span class="o">()</span> <span class="cp">}}</span><span class="x"></span>
<span class="x">*faceSize: </span><span class="cp">{{</span> <span class="nv">fontSize</span> <span class="cp">}}</span><span class="x"></span>
<span class="x">*font: xft:</span><span class="cp">{{</span> <span class="nv">fontName.title</span><span class="o">()</span> <span class="cp">}}</span><span class="x">:</span><span class="cp">{{</span> <span class="nv">fontSize</span> <span class="cp">}}</span><span class="x"></span>
<span class="x">*.cursorColor: </span><span class="cp">{%</span> <span class="k">if</span> <span class="nv">foreground</span> <span class="cp">%}{{</span> <span class="nv">foreground</span> <span class="cp">}}{%</span> <span class="k">else</span> <span class="cp">%}{{</span> <span class="nv">white</span> <span class="cp">}}{%</span> <span class="k">endif</span> <span class="cp">%}</span><span class="x"></span>
</pre></div>
<p>As you can see, this template uses some variables defined in the <code>variables</code>
section of the YAML config file.  It also uses one that isn't defined in the config: <code>white</code>.
Because the script will programmatically determine which colors to use, it will
be responsible for adding them to the template context.</p>
<p>Here is the code for reading the configuration files.  It supports config-file
inheritance, although I haven't yet found myself using this:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">dict_update</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">child</span><span class="p">):</span>
    <span class="sd">"""Recursively update parent dict with child dict."""</span>
    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">child</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">parent</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">parent</span><span class="p">[</span><span class="n">key</span><span class="p">],</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="n">parent</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">dict_update</span><span class="p">(</span><span class="n">parent</span><span class="p">[</span><span class="n">key</span><span class="p">],</span> <span class="n">value</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">parent</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
    <span class="k">return</span> <span class="n">parent</span>

<span class="k">def</span> <span class="nf">read_config</span><span class="p">(</span><span class="n">config_file</span><span class="p">):</span>
    <span class="sd">"""Read a YAML config file."""</span>
    <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">'Reading config file: </span><span class="si">%s</span><span class="s">'</span> <span class="o">%</span> <span class="n">config_file</span><span class="p">)</span>
    <span class="n">config_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">config_file</span><span class="p">)</span>
    <span class="n">base_config</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">config_file</span><span class="p">)</span> <span class="k">as</span> <span class="n">fh</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'extends'</span><span class="p">):</span>
        <span class="n">parent_config</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">config_dir</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="s">'extends'</span><span class="p">])</span>
        <span class="n">base_config</span> <span class="o">=</span> <span class="n">read_config</span><span class="p">(</span><span class="n">parent_config</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">dict_update</span><span class="p">(</span><span class="n">base_config</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</pre></div>
<p>By now I imagine you see how this all works -- so how does the script figure out
which colors to use?</p>
<h3>Getting the colors</h3>
<p>As I mentioned earlier, the colors are read from one of three sources so I just
needed a way to determine what to do given the input.  It works like this:</p>
<ul>
<li>If the input is a bunch of numbers, consider it the "seed" for one of Sweyla's
  themes, and use <code>urllib2</code> to go fetch the colors and convert them into something
  usable.</li>
<li>If the input is a file and ends with ".jpg" or ".png" treat it as a wallpaper
  and use the k-means algorithm to extract 16 colors from the image file (and
  do a bit of normalization as well).</li>
<li>Otherwise, treat the file as an Xresources-type file and simply parse it for
  the color definitions.</li>
</ul>
<p>Each of these is implemented as a different <code>ColorParser</code>.  For example, the 
"Sweyla" color parser fetches the pygments color theme and then maps the values to
colors used by the templates:</p>
<div class="highlight"><pre><span class="k">class</span> <span class="nc">SweylaColorParser</span><span class="p">(</span><span class="n">ColorParser</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">mapping</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="s">'bg'</span><span class="p">:</span> <span class="p">[</span><span class="s">'background'</span><span class="p">,</span> <span class="s">'black'</span><span class="p">,</span> <span class="s">'alt_black'</span><span class="p">],</span>
            <span class="s">'fg'</span><span class="p">:</span> <span class="p">[</span><span class="s">'foreground'</span><span class="p">,</span> <span class="s">'white'</span><span class="p">],</span>
            <span class="s">'nf'</span><span class="p">:</span> <span class="s">'red'</span><span class="p">,</span>  <span class="c"># name of function / method</span>
            <span class="s">'nd'</span><span class="p">:</span> <span class="s">'alt_red'</span><span class="p">,</span>  <span class="c"># decorator</span>
            <span class="s">'nc'</span><span class="p">:</span> <span class="s">'green'</span><span class="p">,</span>  <span class="c"># name of class</span>
            <span class="s">'nt'</span><span class="p">:</span> <span class="s">'alt_green'</span><span class="p">,</span> <span class="c"># ???</span>
            <span class="s">'nb'</span><span class="p">:</span> <span class="s">'yellow'</span><span class="p">,</span>  <span class="c"># e.g., "object" or "open"</span>
            <span class="s">'c'</span><span class="p">:</span> <span class="s">'alt_yellow'</span><span class="p">,</span>  <span class="c"># comments</span>
            <span class="s">'s'</span><span class="p">:</span> <span class="s">'blue'</span><span class="p">,</span>  <span class="c"># string</span>
            <span class="s">'mi'</span><span class="p">:</span> <span class="s">'alt_blue'</span><span class="p">,</span>  <span class="c"># e.g., a number</span>
            <span class="s">'k'</span><span class="p">:</span> <span class="s">'magenta'</span><span class="p">,</span>  <span class="c"># e.g., "class"</span>
            <span class="s">'o'</span><span class="p">:</span> <span class="s">'alt_magenta'</span><span class="p">,</span> <span class="c"># operator, e.g "="</span>
            <span class="s">'bp'</span><span class="p">:</span> <span class="s">'cyan'</span><span class="p">,</span>  <span class="c"># e.g., "self" keyword</span>
            <span class="s">'si'</span><span class="p">:</span> <span class="s">'alt_cyan'</span><span class="p">,</span> <span class="c"># e.g. "%d"</span>
            <span class="s">'se'</span><span class="p">:</span> <span class="s">'alt_white'</span><span class="p">,</span>
            <span class="s">'support_function'</span><span class="p">:</span> <span class="s">'underline'</span><span class="p">}</span>

    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">mapping</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">mapping</span><span class="p">()</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span>
            <span class="s">'http://sweyla.com/themes/textfile/sweyla</span><span class="si">%s</span><span class="s">.txt'</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">color_file</span><span class="p">)</span>
        <span class="n">contents</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">contents</span><span class="o">.</span><span class="n">splitlines</span><span class="p">():</span>
            <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">':</span><span class="se">\t</span><span class="s">'</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">mapping</span><span class="p">:</span>
                <span class="n">colors</span> <span class="o">=</span> <span class="n">mapping</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">colors</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
                    <span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">colors</span><span class="p">]</span>
                <span class="k">for</span> <span class="n">color</span> <span class="ow">in</span> <span class="n">colors</span><span class="p">:</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">colors</span><span class="p">[</span><span class="n">color</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">colors</span>
</pre></div>
<p>Another trick is to update the colors of the icons I use on my desktop. There's
an icon theme called <a href="http://gnome-look.org/content/show.php/?content=102435">"any color you like"</a> 
that consists of a bunch of <code>svg</code> icon files and a python script which lets 
you modify the icon colors (so your folders/files could all be one color and your
programs another). These icons are really just fancy text files, so the script 
will introspect the colors of the icons you're currently using and do a big 
"search and replace" to swap the old colors with the new ones.</p>
<h3>Putting it all together</h3>
<p>As I hope I've shown, generating a new theme consists of little more than
determining which colors to use and rendering a set of templated config files.
The other important task the script does is make it easy to "activate" a theme
once generated.</p>
<p>Here are all of the things that the script does when you activate a new theme:</p>
<ul>
<li>Put rendered templates into their own folder so I can have a collection of
  themes ready when I want to change it up.</li>
<li>Symlink the active set of templates to a well-known location, so I can in
  turn symlink the "active" templates to where my configuration files live. For
  example <code>~/.themer/zenburn/</code> is symlinked to <code>~/.themer/current/</code> and then
  <code>~/.themer/current/Xresouces</code> is symlinked to <code>~/.Xresources</code>.</li>
<li>If a wallpaper wasn't specified, generate a geometric pattern using the colors from the theme.</li>
<li>Set the wallpaper (using the <a href="https://gist.github.com/coleifer/2a35418b520c8e1ec4fd">wallfix</a> script).</li>
<li>Change the icon colors.</li>
<li>Generate an HTML file "demoing" the colors so I can remember what they look like.</li>
<li>Other junk like calling <code>xrdb -merge</code> and restarting my window manager.</li>
</ul>
<p>I've had a ton of fun hacking this together and imagine I will continue to make
tweaks over time.  While the script and config files are fairly tied to my own
setup, I hope that if you're interested, you are able to modify and expand on them.</p>
<p>Thanks for reading!  Please feel free to leave any comments, questions or suggestions below.</p>
<h3>Links</h3>
<ul>
<li>The script: <a href="https://gist.github.com/coleifer/33484bff21c34644dae1">https://gist.github.com/coleifer/33484bff21c34644dae1</a></li>
<li>Template "starter pack": <a href="https://gist.github.com/coleifer/9fbab2d19a337512ab2a">https://gist.github.com/coleifer/9fbab2d19a337512ab2a</a></li>
<li>Sweyla's theme generator: <a href="http://sweyla.com/themes/seed/693812/">http://sweyla.com/themes/seed/693812/</a> </li>
<li><a href="/blog/using-python-and-k-means-to-find-the-dominant-colors-in-images/">Using python and k-means to find dominant colors in images</a></li>
<li><a href="/blog/-wallfix-using-python-to-set-my-wallpaper/">Blog post about wallfix</a>, a python wallpaper sizer</li>
<li><a href="http://gnome-look.org/content/show.php/?content=102435">ACYL</a>, the icons I use</li>
<li><a href="https://gist.github.com/radiosilence/3946121">@radiosilence's color generator script</a> </li>
<li><a href="http://reddit.com/r/unixporn">r/unixporn</a> - don't worry, it's safe for work</li>
<li><strong>Added 8/25</strong> a <a href="http://www.reddit.com/r/Python/comments/1kvy4w/using_python_to_generate_awesome_linux_desktop/cbv7ejm">helpful redditor</a> reimplemented the kmeans in C and has put it on <a href="https://github.com/numberoverzero/kmeans">github</a>.</li>
</ul>
  

  <h2 id="comments">Comments (5)</h2>

  
  <div class="media" id="c926">
    <a class="pull-left" href="stephentanner.net">
      <img class="media-object" src="http://www.gravatar.com/avatar.php?size=64&amp;gravatar_id=6f3c9b488a25514957ed2c970cfdb049" />
    </a>
    <div class="media-body">
      <h4 class="media-heading">
        <a href="stephentanner.net">Stephen Tanner</a> <span class="separator">|</span>
        <small><a href="./#c926">aug 2013, at 03:34pm</a></small>
      </h4>
      <p>This is most good! I use i3 myself and am curious what compositor you are using for transparency?</p>
    </div>
  </div>
  

  
  <div class="media" id="c927">
    <a class="pull-left" href="/">
      <img class="media-object" src="http://www.gravatar.com/avatar.php?size=64&amp;gravatar_id=ebd1c4256c1ece3469d2ccf3031cb6c5" />
    </a>
    <div class="media-body">
      <h4 class="media-heading">
        <a href="/">Charlie</a> <span class="separator">|</span>
        <small><a href="./#c927">aug 2013, at 04:21pm</a></small>
      </h4>
      <p>I used <code>xcompmgr</code> for transparency in those screenshots, although I don't usually run a compositor.</p>
    </div>
  </div>
  

  
  <div class="media" id="c946">
    <a class="pull-left" href="">
      <img class="media-object" src="http://www.gravatar.com/avatar.php?size=64&amp;gravatar_id=a6c5da3fd80302d542dfb84afbfeb514" />
    </a>
    <div class="media-body">
      <h4 class="media-heading">
        <a href="">Wann</a> <span class="separator">|</span>
        <small><a href="./#c946">aug 2013, at 07:43am</a></small>
      </h4>
      <p>Hi, great work, but I'm keep getting this error when trying to run this script on Manjaro Linux with python 3.3:</p>
<pre><code>File "themer.py", line 488
    print "\n".join(sorted(themes))
</code></pre>
    </div>
  </div>
  

  
  <div class="media" id="c950">
    <a class="pull-left" href="/">
      <img class="media-object" src="http://www.gravatar.com/avatar.php?size=64&amp;gravatar_id=ebd1c4256c1ece3469d2ccf3031cb6c5" />
    </a>
    <div class="media-body">
      <h4 class="media-heading">
        <a href="/">Charlie</a> <span class="separator">|</span>
        <small><a href="./#c950">aug 2013, at 09:55am</a></small>
      </h4>
      <p>The script was written with python 2 in mind, as that is what I still use.  You can fix this by calling the print function: <code>print("\n".join(sorted(themes)))</code>. There are probably other places that will need to be updated as well, unfortunately.</p>
    </div>
  </div>
  

  
  <div class="media" id="c953">
    <a class="pull-left" href="">
      <img class="media-object" src="http://www.gravatar.com/avatar.php?size=64&amp;gravatar_id=a6c5da3fd80302d542dfb84afbfeb514" />
    </a>
    <div class="media-body">
      <h4 class="media-heading">
        <a href="">Wann</a> <span class="separator">|</span>
        <small><a href="./#c953">aug 2013, at 01:13pm</a></small>
      </h4>
      <p>Thanks! Works like a charm with python2 after installation of python2-yaml and python2-jinja modules.</p>
    </div>
  </div>
  


<hr />

  <p>Commenting has been closed, but please feel free to <a href="/contact/">contact me</a></p>



      <hr />
      <footer>
        <p>
          <a class="pull-right" href="/about/"><small>About this site</small></a>
          &copy; charles leifer, 2014
          
        </p>
      </footer>
    </div>
    
      <script src="http://a.charlesleifer.com/a.js?id=1" type="text/javascript"></script>
    
  </body>
</html>