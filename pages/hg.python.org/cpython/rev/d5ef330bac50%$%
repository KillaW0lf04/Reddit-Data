<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US">
<head>
<link rel="icon" href="/cpython/static/hgicon.png" type="image/png" />
<meta name="robots" content="index, nofollow" />
<link rel="stylesheet" href="/cpython/static/style-paper.css" type="text/css" />
<script type="text/javascript" src="/cpython/static/mercurial.js"></script>

<title>cpython: d5ef330bac50</title>
</head>
<body>
<div class="container">
<div class="menu">
<div class="logo">
<a href="http://hg.python.org">
<img src="/cpython/static/hglogo.png" alt="back to hg.python.org repositories" /></a>
</div>
<ul>
 <li><a href="/cpython/shortlog/d5ef330bac50">log</a></li>
 <li><a href="/cpython/graph/d5ef330bac50">graph</a></li>
 <li><a href="/cpython/tags">tags</a></li>
 <li><a href="/cpython/bookmarks">bookmarks</a></li>
 <li><a href="/cpython/branches">branches</a></li>
</ul>
<ul>
 <li class="active">changeset</li>
 <li><a href="/cpython/raw-rev/d5ef330bac50">raw</a></li>
 <li><a href="/cpython/file/d5ef330bac50">browse</a></li>
</ul>
<ul>
 
<li>
<a href="/cpython/archive/d5ef330bac50.tar.bz2">bz2</a>
</li>
<li>
<a href="/cpython/archive/d5ef330bac50.zip">zip</a>
</li>
<li>
<a href="/cpython/archive/d5ef330bac50.tar.gz">gz</a>
</li>
</ul>
<ul>
 <li><a href="/cpython/help">help</a></li>
</ul>
</div>

<div class="main">

<h2 class="breadcrumb"><a href="/">Mercurial</a> &gt; <a href="/cpython">cpython</a> </h2>
<h3>changeset 83608:d5ef330bac50   </h3>

<form class="search" action="/cpython/log">

<p><input name="rev" id="search1" type="text" size="30" /></p>
<div id="hint">Find changesets by keywords (author, files, the commit message), revision
number or hash, or <a href="/cpython/help/revsets">revset expression</a>.</div>
</form>

<div class="description">Issue #5845: Enable tab-completion in the interactive interpreter by default, thanks to a new sys.__interactivehook__.

(original patch by Ã‰ric Araujo)</a> [<a href="http://bugs.python.org/5845" class="issuelink">#5845</a>]</div>

<table id="changesetEntry">
<tr>
 <th class="author">author</th>
 <td class="author">&#65;&#110;&#116;&#111;&#105;&#110;&#101;&#32;&#80;&#105;&#116;&#114;&#111;&#117;&#32;&#60;&#115;&#111;&#108;&#105;&#112;&#115;&#105;&#115;&#64;&#112;&#105;&#116;&#114;&#111;&#117;&#46;&#110;&#101;&#116;&#62;</td>
</tr>
<tr>
 <th class="date">date</th>
 <td class="date age">Sat, 04 May 2013 20:08:35 +0200</td></tr>
<tr>
 <th class="author">parents</th>
 <td class="author"><a href="/cpython/rev/e39a8f8ceb9f">e39a8f8ceb9f</a> </td>
</tr>
<tr>
 <th class="author">children</th>
 <td class="author"> <a href="/cpython/rev/193f25352e1c">193f25352e1c</a></td>
</tr>
<tr>
 <th class="files">files</th>
 <td class="files"><a href="/cpython/file/d5ef330bac50/Doc/library/readline.rst">Doc/library/readline.rst</a> <a href="/cpython/file/d5ef330bac50/Doc/library/rlcompleter.rst">Doc/library/rlcompleter.rst</a> <a href="/cpython/file/d5ef330bac50/Doc/library/site.rst">Doc/library/site.rst</a> <a href="/cpython/file/d5ef330bac50/Doc/library/sys.rst">Doc/library/sys.rst</a> <a href="/cpython/file/d5ef330bac50/Doc/tutorial/interactive.rst">Doc/tutorial/interactive.rst</a> <a href="/cpython/file/d5ef330bac50/Doc/using/cmdline.rst">Doc/using/cmdline.rst</a> <a href="/cpython/file/d5ef330bac50/Lib/site.py">Lib/site.py</a> <a href="/cpython/file/d5ef330bac50/Misc/NEWS">Misc/NEWS</a> <a href="/cpython/file/d5ef330bac50/Modules/main.c">Modules/main.c</a> </td>
</tr>
<tr>
  <th class="diffstat">diffstat</th>
  <td class="diffstat">
     9 files changed, 143 insertions(+), 165 deletions(-)

    <a id="diffstatexpand" href="javascript:toggleDiffstat()"/>[<tt>+</tt>]</a>
    <div id="diffstatdetails" style="display:none;">
      <a href="javascript:toggleDiffstat()"/>[<tt>-</tt>]</a>
      <p>
      <table class="stripes2">  <tr>
    <td class="diffstat-file"><a href="#l1.1">Doc/library/readline.rst</a></td>
    <td class="diffstat-total" align="right">20</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:7.8431372549%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:5.22875816993%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l2.1">Doc/library/rlcompleter.rst</a></td>
    <td class="diffstat-total" align="right">16</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:2.61437908497%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:7.8431372549%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l3.1">Doc/library/site.rst</a></td>
    <td class="diffstat-total" align="right">20</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:11.7647058824%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:1.30718954248%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l4.1">Doc/library/sys.rst</a></td>
    <td class="diffstat-total" align="right">10</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:6.53594771242%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.0%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l5.1">Doc/tutorial/interactive.rst</a></td>
    <td class="diffstat-total" align="right">153</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:10.4575163399%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:89.5424836601%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l6.1">Doc/using/cmdline.rst</a></td>
    <td class="diffstat-total" align="right">9</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:4.57516339869%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:1.30718954248%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l7.1">Lib/site.py</a></td>
    <td class="diffstat-total" align="right">42</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:26.1437908497%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:1.30718954248%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l8.1">Misc/NEWS</a></td>
    <td class="diffstat-total" align="right">10</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:5.22875816993%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:1.30718954248%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l9.1">Modules/main.c</a></td>
    <td class="diffstat-total" align="right">28</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:18.3006535948%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.0%;">&nbsp;</span>
    </td>
  </tr>
</table>
    </div>
  </td>
</tr>
</table>

<div class="overflow">
<div class="sourcefirst linewraptoggle">line wrap: <a class="linewraplink" href="javascript:toggleLinewrap()">on</a></div>
<div class="sourcefirst"> line diff</div>
<div class="stripes2 diffblocks">
<div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l1.1" class="minusline">--- a/Doc/library/readline.rst</span><a href="#l1.1"></a>
<span id="l1.2" class="plusline">+++ b/Doc/library/readline.rst</span><a href="#l1.2"></a>
<span id="l1.3" class="atline">@@ -190,28 +190,32 @@ Example</span><a href="#l1.3"></a>
<span id="l1.4"> </span><a href="#l1.4"></a>
<span id="l1.5"> The following example demonstrates how to use the :mod:`readline` module's</span><a href="#l1.5"></a>
<span id="l1.6"> history reading and writing functions to automatically load and save a history</span><a href="#l1.6"></a>
<span id="l1.7" class="minusline">-file named :file:`.pyhist` from the user's home directory.  The code below would</span><a href="#l1.7"></a>
<span id="l1.8" class="minusline">-normally be executed automatically during interactive sessions from the user's</span><a href="#l1.8"></a>
<span id="l1.9" class="minusline">-:envvar:`PYTHONSTARTUP` file. ::</span><a href="#l1.9"></a>
<span id="l1.10" class="plusline">+file named :file:`.python_history` from the user's home directory.  The code</span><a href="#l1.10"></a>
<span id="l1.11" class="plusline">+below would normally be executed automatically during interactive sessions</span><a href="#l1.11"></a>
<span id="l1.12" class="plusline">+from the user's :envvar:`PYTHONSTARTUP` file. ::</span><a href="#l1.12"></a>
<span id="l1.13"> </span><a href="#l1.13"></a>
<span id="l1.14" class="plusline">+   import atexit</span><a href="#l1.14"></a>
<span id="l1.15">    import os</span><a href="#l1.15"></a>
<span id="l1.16">    import readline</span><a href="#l1.16"></a>
<span id="l1.17" class="minusline">-   histfile = os.path.join(os.path.expanduser(&quot;~&quot;), &quot;.pyhist&quot;)</span><a href="#l1.17"></a>
<span id="l1.18" class="plusline">+</span><a href="#l1.18"></a>
<span id="l1.19" class="plusline">+   histfile = os.path.join(os.path.expanduser(&quot;~&quot;), &quot;.python_history&quot;)</span><a href="#l1.19"></a>
<span id="l1.20">    try:</span><a href="#l1.20"></a>
<span id="l1.21">        readline.read_history_file(histfile)</span><a href="#l1.21"></a>
<span id="l1.22">    except FileNotFoundError:</span><a href="#l1.22"></a>
<span id="l1.23">        pass</span><a href="#l1.23"></a>
<span id="l1.24" class="minusline">-   import atexit</span><a href="#l1.24"></a>
<span id="l1.25" class="plusline">+</span><a href="#l1.25"></a>
<span id="l1.26">    atexit.register(readline.write_history_file, histfile)</span><a href="#l1.26"></a>
<span id="l1.27" class="minusline">-   del os, histfile</span><a href="#l1.27"></a>
<span id="l1.28" class="plusline">+</span><a href="#l1.28"></a>
<span id="l1.29" class="plusline">+This code is actually automatically run when Python is run in</span><a href="#l1.29"></a>
<span id="l1.30" class="plusline">+:ref:`interactive mode &lt;tut-interactive&gt;` (see :ref:`rlcompleter-config`).</span><a href="#l1.30"></a>
<span id="l1.31"> </span><a href="#l1.31"></a>
<span id="l1.32"> The following example extends the :class:`code.InteractiveConsole` class to</span><a href="#l1.32"></a>
<span id="l1.33"> support history save/restore. ::</span><a href="#l1.33"></a>
<span id="l1.34"> </span><a href="#l1.34"></a>
<span id="l1.35" class="plusline">+   import atexit</span><a href="#l1.35"></a>
<span id="l1.36">    import code</span><a href="#l1.36"></a>
<span id="l1.37" class="plusline">+   import os</span><a href="#l1.37"></a>
<span id="l1.38">    import readline</span><a href="#l1.38"></a>
<span id="l1.39" class="minusline">-   import atexit</span><a href="#l1.39"></a>
<span id="l1.40" class="minusline">-   import os</span><a href="#l1.40"></a>
<span id="l1.41"> </span><a href="#l1.41"></a>
<span id="l1.42">    class HistoryConsole(code.InteractiveConsole):</span><a href="#l1.42"></a>
<span id="l1.43">        def __init__(self, locals=None, filename=&quot;&lt;console&gt;&quot;,</span><a href="#l1.43"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l2.1" class="minusline">--- a/Doc/library/rlcompleter.rst</span><a href="#l2.1"></a>
<span id="l2.2" class="plusline">+++ b/Doc/library/rlcompleter.rst</span><a href="#l2.2"></a>
<span id="l2.3" class="atline">@@ -27,18 +27,10 @@ Example::</span><a href="#l2.3"></a>
<span id="l2.4">    readline.__name__         readline.parse_and_bind(</span><a href="#l2.4"></a>
<span id="l2.5">    &gt;&gt;&gt; readline.</span><a href="#l2.5"></a>
<span id="l2.6"> </span><a href="#l2.6"></a>
<span id="l2.7" class="minusline">-The :mod:`rlcompleter` module is designed for use with Python's interactive</span><a href="#l2.7"></a>
<span id="l2.8" class="minusline">-mode.  A user can add the following lines to his or her initialization file</span><a href="#l2.8"></a>
<span id="l2.9" class="minusline">-(identified by the :envvar:`PYTHONSTARTUP` environment variable) to get</span><a href="#l2.9"></a>
<span id="l2.10" class="minusline">-automatic :kbd:`Tab` completion::</span><a href="#l2.10"></a>
<span id="l2.11" class="minusline">-</span><a href="#l2.11"></a>
<span id="l2.12" class="minusline">-   try:</span><a href="#l2.12"></a>
<span id="l2.13" class="minusline">-       import readline</span><a href="#l2.13"></a>
<span id="l2.14" class="minusline">-   except ImportError:</span><a href="#l2.14"></a>
<span id="l2.15" class="minusline">-       print(&quot;Module readline not available.&quot;)</span><a href="#l2.15"></a>
<span id="l2.16" class="minusline">-   else:</span><a href="#l2.16"></a>
<span id="l2.17" class="minusline">-       import rlcompleter</span><a href="#l2.17"></a>
<span id="l2.18" class="minusline">-       readline.parse_and_bind(&quot;tab: complete&quot;)</span><a href="#l2.18"></a>
<span id="l2.19" class="plusline">+The :mod:`rlcompleter` module is designed for use with Python's</span><a href="#l2.19"></a>
<span id="l2.20" class="plusline">+:ref:`interactive mode &lt;tut-interactive&gt;`.  Unless Python is run with the</span><a href="#l2.20"></a>
<span id="l2.21" class="plusline">+:option:`-S` option, the module is automatically imported and configured</span><a href="#l2.21"></a>
<span id="l2.22" class="plusline">+(see :ref:`rlcompleter-config`).</span><a href="#l2.22"></a>
<span id="l2.23"> </span><a href="#l2.23"></a>
<span id="l2.24"> On platforms without :mod:`readline`, the :class:`Completer` class defined by</span><a href="#l2.24"></a>
<span id="l2.25"> this module can still be used for custom purposes.</span><a href="#l2.25"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l3.1" class="minusline">--- a/Doc/library/site.rst</span><a href="#l3.1"></a>
<span id="l3.2" class="plusline">+++ b/Doc/library/site.rst</span><a href="#l3.2"></a>
<span id="l3.3" class="atline">@@ -111,6 +111,23 @@ empty, and the path manipulations are sk</span><a href="#l3.3"></a>
<span id="l3.4"> :mod:`sitecustomize` and :mod:`usercustomize` is still attempted.</span><a href="#l3.4"></a>
<span id="l3.5"> </span><a href="#l3.5"></a>
<span id="l3.6"> </span><a href="#l3.6"></a>
<span id="l3.7" class="plusline">+.. _rlcompleter-config:</span><a href="#l3.7"></a>
<span id="l3.8" class="plusline">+</span><a href="#l3.8"></a>
<span id="l3.9" class="plusline">+Readline configuration</span><a href="#l3.9"></a>
<span id="l3.10" class="plusline">+----------------------</span><a href="#l3.10"></a>
<span id="l3.11" class="plusline">+</span><a href="#l3.11"></a>
<span id="l3.12" class="plusline">+On systems that support :mod:`readline`, this module will also import and</span><a href="#l3.12"></a>
<span id="l3.13" class="plusline">+configure the :mod:`rlcompleter` module, if Python is started in</span><a href="#l3.13"></a>
<span id="l3.14" class="plusline">+:ref:`interactive mode &lt;tut-interactive&gt;` and without the :option:`-S` option.</span><a href="#l3.14"></a>
<span id="l3.15" class="plusline">+The default behavior is enable tab-completion and to use</span><a href="#l3.15"></a>
<span id="l3.16" class="plusline">+:file:`~/.python_history` as the history save file.  To disable it, override</span><a href="#l3.16"></a>
<span id="l3.17" class="plusline">+the :data:`sys.__interactivehook__` attribute in your :mod:`sitecustomize`</span><a href="#l3.17"></a>
<span id="l3.18" class="plusline">+or :mod:`usercustomize` module or your :envvar:`PYTHONSTARTUP` file.</span><a href="#l3.18"></a>
<span id="l3.19" class="plusline">+</span><a href="#l3.19"></a>
<span id="l3.20" class="plusline">+</span><a href="#l3.20"></a>
<span id="l3.21" class="plusline">+Module contents</span><a href="#l3.21"></a>
<span id="l3.22" class="plusline">+---------------</span><a href="#l3.22"></a>
<span id="l3.23" class="plusline">+</span><a href="#l3.23"></a>
<span id="l3.24"> .. data:: PREFIXES</span><a href="#l3.24"></a>
<span id="l3.25"> </span><a href="#l3.25"></a>
<span id="l3.26">    A list of prefixes for site-packages directories.</span><a href="#l3.26"></a>
<span id="l3.27" class="atline">@@ -153,8 +170,7 @@ empty, and the path manipulations are sk</span><a href="#l3.27"></a>
<span id="l3.28"> </span><a href="#l3.28"></a>
<span id="l3.29">    Adds all the standard site-specific directories to the module search</span><a href="#l3.29"></a>
<span id="l3.30">    path.  This function is called automatically when this module is imported,</span><a href="#l3.30"></a>
<span id="l3.31" class="minusline">-   unless the :program:`python` interpreter was started with the :option:`-S`</span><a href="#l3.31"></a>
<span id="l3.32" class="minusline">-   flag.</span><a href="#l3.32"></a>
<span id="l3.33" class="plusline">+   unless the Python interpreter was started with the :option:`-S` flag.</span><a href="#l3.33"></a>
<span id="l3.34"> </span><a href="#l3.34"></a>
<span id="l3.35">    .. versionchanged:: 3.3</span><a href="#l3.35"></a>
<span id="l3.36">       This function used to be called unconditionnally.</span><a href="#l3.36"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l4.1" class="minusline">--- a/Doc/library/sys.rst</span><a href="#l4.1"></a>
<span id="l4.2" class="plusline">+++ b/Doc/library/sys.rst</span><a href="#l4.2"></a>
<span id="l4.3" class="atline">@@ -679,6 +679,16 @@ always available.</span><a href="#l4.3"></a>
<span id="l4.4">    .. versionadded:: 3.1</span><a href="#l4.4"></a>
<span id="l4.5"> </span><a href="#l4.5"></a>
<span id="l4.6"> </span><a href="#l4.6"></a>
<span id="l4.7" class="plusline">+.. data:: __interactivehook__</span><a href="#l4.7"></a>
<span id="l4.8" class="plusline">+</span><a href="#l4.8"></a>
<span id="l4.9" class="plusline">+   When present, this function is automatically called (with no arguments)</span><a href="#l4.9"></a>
<span id="l4.10" class="plusline">+   when the interpreter is launched in :ref:`interactive mode &lt;tut-interactive&gt;`.</span><a href="#l4.10"></a>
<span id="l4.11" class="plusline">+   This is done after the :envvar:`PYTHONSTARTUP` file is read, so that you</span><a href="#l4.11"></a>
<span id="l4.12" class="plusline">+   can set this hook there.</span><a href="#l4.12"></a>
<span id="l4.13" class="plusline">+</span><a href="#l4.13"></a>
<span id="l4.14" class="plusline">+   .. versionadded:: 3.4</span><a href="#l4.14"></a>
<span id="l4.15" class="plusline">+</span><a href="#l4.15"></a>
<span id="l4.16" class="plusline">+</span><a href="#l4.16"></a>
<span id="l4.17"> .. function:: intern(string)</span><a href="#l4.17"></a>
<span id="l4.18"> </span><a href="#l4.18"></a>
<span id="l4.19">    Enter *string* in the table of &quot;interned&quot; strings and return the interned string</span><a href="#l4.19"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l5.1" class="minusline">--- a/Doc/tutorial/interactive.rst</span><a href="#l5.1"></a>
<span id="l5.2" class="plusline">+++ b/Doc/tutorial/interactive.rst</span><a href="#l5.2"></a>
<span id="l5.3" class="atline">@@ -7,140 +7,27 @@ Interactive Input Editing and History Su</span><a href="#l5.3"></a>
<span id="l5.4"> Some versions of the Python interpreter support editing of the current input</span><a href="#l5.4"></a>
<span id="l5.5"> line and history substitution, similar to facilities found in the Korn shell and</span><a href="#l5.5"></a>
<span id="l5.6"> the GNU Bash shell.  This is implemented using the `GNU Readline`_ library,</span><a href="#l5.6"></a>
<span id="l5.7" class="minusline">-which supports Emacs-style and vi-style editing.  This library has its own</span><a href="#l5.7"></a>
<span id="l5.8" class="minusline">-documentation which I won't duplicate here; however, the basics are easily</span><a href="#l5.8"></a>
<span id="l5.9" class="minusline">-explained.  The interactive editing and history described here are optionally</span><a href="#l5.9"></a>
<span id="l5.10" class="minusline">-available in the Unix and Cygwin versions of the interpreter.</span><a href="#l5.10"></a>
<span id="l5.11" class="minusline">-</span><a href="#l5.11"></a>
<span id="l5.12" class="minusline">-This chapter does *not* document the editing facilities of Mark Hammond's</span><a href="#l5.12"></a>
<span id="l5.13" class="minusline">-PythonWin package or the Tk-based environment, IDLE, distributed with Python.</span><a href="#l5.13"></a>
<span id="l5.14" class="minusline">-The command line history recall which operates within DOS boxes on NT and some</span><a href="#l5.14"></a>
<span id="l5.15" class="minusline">-other DOS and Windows flavors  is yet another beast.</span><a href="#l5.15"></a>
<span id="l5.16" class="minusline">-</span><a href="#l5.16"></a>
<span id="l5.17" class="minusline">-</span><a href="#l5.17"></a>
<span id="l5.18" class="minusline">-.. _tut-lineediting:</span><a href="#l5.18"></a>
<span id="l5.19" class="minusline">-</span><a href="#l5.19"></a>
<span id="l5.20" class="minusline">-Line Editing</span><a href="#l5.20"></a>
<span id="l5.21" class="minusline">-============</span><a href="#l5.21"></a>
<span id="l5.22" class="minusline">-</span><a href="#l5.22"></a>
<span id="l5.23" class="minusline">-If supported, input line editing is active whenever the interpreter prints a</span><a href="#l5.23"></a>
<span id="l5.24" class="minusline">-primary or secondary prompt.  The current line can be edited using the</span><a href="#l5.24"></a>
<span id="l5.25" class="minusline">-conventional Emacs control characters.  The most important of these are:</span><a href="#l5.25"></a>
<span id="l5.26" class="minusline">-:kbd:`C-A` (Control-A) moves the cursor to the beginning of the line, :kbd:`C-E`</span><a href="#l5.26"></a>
<span id="l5.27" class="minusline">-to the end, :kbd:`C-B` moves it one position to the left, :kbd:`C-F` to the</span><a href="#l5.27"></a>
<span id="l5.28" class="minusline">-right.  Backspace erases the character to the left of the cursor, :kbd:`C-D` the</span><a href="#l5.28"></a>
<span id="l5.29" class="minusline">-character to its right. :kbd:`C-K` kills (erases) the rest of the line to the</span><a href="#l5.29"></a>
<span id="l5.30" class="minusline">-right of the cursor, :kbd:`C-Y` yanks back the last killed string.</span><a href="#l5.30"></a>
<span id="l5.31" class="minusline">-:kbd:`C-underscore` undoes the last change you made; it can be repeated for</span><a href="#l5.31"></a>
<span id="l5.32" class="minusline">-cumulative effect.</span><a href="#l5.32"></a>
<span id="l5.33" class="minusline">-</span><a href="#l5.33"></a>
<span id="l5.34" class="minusline">-</span><a href="#l5.34"></a>
<span id="l5.35" class="minusline">-.. _tut-history:</span><a href="#l5.35"></a>
<span id="l5.36" class="minusline">-</span><a href="#l5.36"></a>
<span id="l5.37" class="minusline">-History Substitution</span><a href="#l5.37"></a>
<span id="l5.38" class="minusline">-====================</span><a href="#l5.38"></a>
<span id="l5.39" class="minusline">-</span><a href="#l5.39"></a>
<span id="l5.40" class="minusline">-History substitution works as follows.  All non-empty input lines issued are</span><a href="#l5.40"></a>
<span id="l5.41" class="minusline">-saved in a history buffer, and when a new prompt is given you are positioned on</span><a href="#l5.41"></a>
<span id="l5.42" class="minusline">-a new line at the bottom of this buffer. :kbd:`C-P` moves one line up (back) in</span><a href="#l5.42"></a>
<span id="l5.43" class="minusline">-the history buffer, :kbd:`C-N` moves one down.  Any line in the history buffer</span><a href="#l5.43"></a>
<span id="l5.44" class="minusline">-can be edited; an asterisk appears in front of the prompt to mark a line as</span><a href="#l5.44"></a>
<span id="l5.45" class="minusline">-modified.  Pressing the :kbd:`Return` key passes the current line to the</span><a href="#l5.45"></a>
<span id="l5.46" class="minusline">-interpreter.  :kbd:`C-R` starts an incremental reverse search; :kbd:`C-S` starts</span><a href="#l5.46"></a>
<span id="l5.47" class="minusline">-a forward search.</span><a href="#l5.47"></a>
<span id="l5.48" class="plusline">+which supports various styles of editing.  This library has its own</span><a href="#l5.48"></a>
<span id="l5.49" class="plusline">+documentation which we won't duplicate here.</span><a href="#l5.49"></a>
<span id="l5.50"> </span><a href="#l5.50"></a>
<span id="l5.51"> </span><a href="#l5.51"></a>
<span id="l5.52"> .. _tut-keybindings:</span><a href="#l5.52"></a>
<span id="l5.53"> </span><a href="#l5.53"></a>
<span id="l5.54" class="minusline">-Key Bindings</span><a href="#l5.54"></a>
<span id="l5.55" class="minusline">-============</span><a href="#l5.55"></a>
<span id="l5.56" class="plusline">+Tab Completion and History Editing</span><a href="#l5.56"></a>
<span id="l5.57" class="plusline">+==================================</span><a href="#l5.57"></a>
<span id="l5.58"> </span><a href="#l5.58"></a>
<span id="l5.59" class="minusline">-The key bindings and some other parameters of the Readline library can be</span><a href="#l5.59"></a>
<span id="l5.60" class="minusline">-customized by placing commands in an initialization file called</span><a href="#l5.60"></a>
<span id="l5.61" class="minusline">-:file:`~/.inputrc`.  Key bindings have the form ::</span><a href="#l5.61"></a>
<span id="l5.62" class="minusline">-</span><a href="#l5.62"></a>
<span id="l5.63" class="minusline">-   key-name: function-name</span><a href="#l5.63"></a>
<span id="l5.64" class="minusline">-</span><a href="#l5.64"></a>
<span id="l5.65" class="minusline">-or ::</span><a href="#l5.65"></a>
<span id="l5.66" class="minusline">-</span><a href="#l5.66"></a>
<span id="l5.67" class="minusline">-   &quot;string&quot;: function-name</span><a href="#l5.67"></a>
<span id="l5.68" class="minusline">-</span><a href="#l5.68"></a>
<span id="l5.69" class="minusline">-and options can be set with ::</span><a href="#l5.69"></a>
<span id="l5.70" class="minusline">-</span><a href="#l5.70"></a>
<span id="l5.71" class="minusline">-   set option-name value</span><a href="#l5.71"></a>
<span id="l5.72" class="minusline">-</span><a href="#l5.72"></a>
<span id="l5.73" class="minusline">-For example::</span><a href="#l5.73"></a>
<span id="l5.74" class="minusline">-</span><a href="#l5.74"></a>
<span id="l5.75" class="minusline">-   # I prefer vi-style editing:</span><a href="#l5.75"></a>
<span id="l5.76" class="minusline">-   set editing-mode vi</span><a href="#l5.76"></a>
<span id="l5.77" class="minusline">-</span><a href="#l5.77"></a>
<span id="l5.78" class="minusline">-   # Edit using a single line:</span><a href="#l5.78"></a>
<span id="l5.79" class="minusline">-   set horizontal-scroll-mode On</span><a href="#l5.79"></a>
<span id="l5.80" class="minusline">-</span><a href="#l5.80"></a>
<span id="l5.81" class="minusline">-   # Rebind some keys:</span><a href="#l5.81"></a>
<span id="l5.82" class="minusline">-   Meta-h: backward-kill-word</span><a href="#l5.82"></a>
<span id="l5.83" class="minusline">-   &quot;\C-u&quot;: universal-argument</span><a href="#l5.83"></a>
<span id="l5.84" class="minusline">-   &quot;\C-x\C-r&quot;: re-read-init-file</span><a href="#l5.84"></a>
<span id="l5.85" class="minusline">-</span><a href="#l5.85"></a>
<span id="l5.86" class="minusline">-Note that the default binding for :kbd:`Tab` in Python is to insert a :kbd:`Tab`</span><a href="#l5.86"></a>
<span id="l5.87" class="minusline">-character instead of Readline's default filename completion function.  If you</span><a href="#l5.87"></a>
<span id="l5.88" class="minusline">-insist, you can override this by putting ::</span><a href="#l5.88"></a>
<span id="l5.89" class="minusline">-</span><a href="#l5.89"></a>
<span id="l5.90" class="minusline">-   Tab: complete</span><a href="#l5.90"></a>
<span id="l5.91" class="minusline">-</span><a href="#l5.91"></a>
<span id="l5.92" class="minusline">-in your :file:`~/.inputrc`.  (Of course, this makes it harder to type indented</span><a href="#l5.92"></a>
<span id="l5.93" class="minusline">-continuation lines if you're accustomed to using :kbd:`Tab` for that purpose.)</span><a href="#l5.93"></a>
<span id="l5.94" class="minusline">-</span><a href="#l5.94"></a>
<span id="l5.95" class="minusline">-.. index::</span><a href="#l5.95"></a>
<span id="l5.96" class="minusline">-   module: rlcompleter</span><a href="#l5.96"></a>
<span id="l5.97" class="minusline">-   module: readline</span><a href="#l5.97"></a>
<span id="l5.98" class="minusline">-</span><a href="#l5.98"></a>
<span id="l5.99" class="minusline">-Automatic completion of variable and module names is optionally available.  To</span><a href="#l5.99"></a>
<span id="l5.100" class="minusline">-enable it in the interpreter's interactive mode, add the following to your</span><a href="#l5.100"></a>
<span id="l5.101" class="minusline">-startup file: [#]_  ::</span><a href="#l5.101"></a>
<span id="l5.102" class="minusline">-</span><a href="#l5.102"></a>
<span id="l5.103" class="minusline">-   import rlcompleter, readline</span><a href="#l5.103"></a>
<span id="l5.104" class="minusline">-   readline.parse_and_bind('tab: complete')</span><a href="#l5.104"></a>
<span id="l5.105" class="minusline">-</span><a href="#l5.105"></a>
<span id="l5.106" class="minusline">-This binds the :kbd:`Tab` key to the completion function, so hitting the</span><a href="#l5.106"></a>
<span id="l5.107" class="minusline">-:kbd:`Tab` key twice suggests completions; it looks at Python statement names,</span><a href="#l5.107"></a>
<span id="l5.108" class="minusline">-the current local variables, and the available module names.  For dotted</span><a href="#l5.108"></a>
<span id="l5.109" class="minusline">-expressions such as ``string.a``, it will evaluate the expression up to the</span><a href="#l5.109"></a>
<span id="l5.110" class="minusline">-final ``'.'`` and then suggest completions from the attributes of the resulting</span><a href="#l5.110"></a>
<span id="l5.111" class="minusline">-object.  Note that this may execute application-defined code if an object with a</span><a href="#l5.111"></a>
<span id="l5.112" class="minusline">-:meth:`__getattr__` method is part of the expression.</span><a href="#l5.112"></a>
<span id="l5.113" class="minusline">-</span><a href="#l5.113"></a>
<span id="l5.114" class="minusline">-A more capable startup file might look like this example.  Note that this</span><a href="#l5.114"></a>
<span id="l5.115" class="minusline">-deletes the names it creates once they are no longer needed; this is done since</span><a href="#l5.115"></a>
<span id="l5.116" class="minusline">-the startup file is executed in the same namespace as the interactive commands,</span><a href="#l5.116"></a>
<span id="l5.117" class="minusline">-and removing the names avoids creating side effects in the interactive</span><a href="#l5.117"></a>
<span id="l5.118" class="minusline">-environment.  You may find it convenient to keep some of the imported modules,</span><a href="#l5.118"></a>
<span id="l5.119" class="minusline">-such as :mod:`os`, which turn out to be needed in most sessions with the</span><a href="#l5.119"></a>
<span id="l5.120" class="minusline">-interpreter. ::</span><a href="#l5.120"></a>
<span id="l5.121" class="minusline">-</span><a href="#l5.121"></a>
<span id="l5.122" class="minusline">-   # Add auto-completion and a stored history file of commands to your Python</span><a href="#l5.122"></a>
<span id="l5.123" class="minusline">-   # interactive interpreter. Requires Python 2.0+, readline. Autocomplete is</span><a href="#l5.123"></a>
<span id="l5.124" class="minusline">-   # bound to the Esc key by default (you can change it - see readline docs).</span><a href="#l5.124"></a>
<span id="l5.125" class="minusline">-   #</span><a href="#l5.125"></a>
<span id="l5.126" class="minusline">-   # Store the file in ~/.pystartup, and set an environment variable to point</span><a href="#l5.126"></a>
<span id="l5.127" class="minusline">-   # to it:  &quot;export PYTHONSTARTUP=~/.pystartup&quot; in bash.</span><a href="#l5.127"></a>
<span id="l5.128" class="minusline">-</span><a href="#l5.128"></a>
<span id="l5.129" class="minusline">-   import atexit</span><a href="#l5.129"></a>
<span id="l5.130" class="minusline">-   import os</span><a href="#l5.130"></a>
<span id="l5.131" class="minusline">-   import readline</span><a href="#l5.131"></a>
<span id="l5.132" class="minusline">-   import rlcompleter</span><a href="#l5.132"></a>
<span id="l5.133" class="minusline">-</span><a href="#l5.133"></a>
<span id="l5.134" class="minusline">-   historyPath = os.path.expanduser(&quot;~/.pyhistory&quot;)</span><a href="#l5.134"></a>
<span id="l5.135" class="minusline">-</span><a href="#l5.135"></a>
<span id="l5.136" class="minusline">-   def save_history(historyPath=historyPath):</span><a href="#l5.136"></a>
<span id="l5.137" class="minusline">-       import readline</span><a href="#l5.137"></a>
<span id="l5.138" class="minusline">-       readline.write_history_file(historyPath)</span><a href="#l5.138"></a>
<span id="l5.139" class="minusline">-</span><a href="#l5.139"></a>
<span id="l5.140" class="minusline">-   if os.path.exists(historyPath):</span><a href="#l5.140"></a>
<span id="l5.141" class="minusline">-       readline.read_history_file(historyPath)</span><a href="#l5.141"></a>
<span id="l5.142" class="minusline">-</span><a href="#l5.142"></a>
<span id="l5.143" class="minusline">-   atexit.register(save_history)</span><a href="#l5.143"></a>
<span id="l5.144" class="minusline">-   del os, atexit, readline, rlcompleter, save_history, historyPath</span><a href="#l5.144"></a>
<span id="l5.145" class="plusline">+Completion of variable and module names is</span><a href="#l5.145"></a>
<span id="l5.146" class="plusline">+:ref:`automatically enabled &lt;rlcompleter-config&gt;` at interpreter startup so</span><a href="#l5.146"></a>
<span id="l5.147" class="plusline">+that the :kbd:`Tab` key invokes the completion function; it looks at</span><a href="#l5.147"></a>
<span id="l5.148" class="plusline">+Python statement names, the current local variables, and the available</span><a href="#l5.148"></a>
<span id="l5.149" class="plusline">+module names.  For dotted expressions such as ``string.a``, it will evaluate</span><a href="#l5.149"></a>
<span id="l5.150" class="plusline">+the expression up to the final ``'.'`` and then suggest completions from</span><a href="#l5.150"></a>
<span id="l5.151" class="plusline">+the attributes of the resulting object.  Note that this may execute</span><a href="#l5.151"></a>
<span id="l5.152" class="plusline">+application-defined code if an object with a :meth:`__getattr__` method</span><a href="#l5.152"></a>
<span id="l5.153" class="plusline">+is part of the expression.  The default configuration also saves your</span><a href="#l5.153"></a>
<span id="l5.154" class="plusline">+history into a file named :file:`.python_history` in your user directory.</span><a href="#l5.154"></a>
<span id="l5.155" class="plusline">+The history will be available again during the next interactive interpreter</span><a href="#l5.155"></a>
<span id="l5.156" class="plusline">+session.</span><a href="#l5.156"></a>
<span id="l5.157"> </span><a href="#l5.157"></a>
<span id="l5.158"> </span><a href="#l5.158"></a>
<span id="l5.159"> .. _tut-commentary:</span><a href="#l5.159"></a>
<span id="l5.160" class="atline">@@ -162,14 +49,6 @@ into other applications.  Another simila</span><a href="#l5.160"></a>
<span id="l5.161"> bpython_.</span><a href="#l5.161"></a>
<span id="l5.162"> </span><a href="#l5.162"></a>
<span id="l5.163"> </span><a href="#l5.163"></a>
<span id="l5.164" class="minusline">-.. rubric:: Footnotes</span><a href="#l5.164"></a>
<span id="l5.165" class="minusline">-</span><a href="#l5.165"></a>
<span id="l5.166" class="minusline">-.. [#] Python will execute the contents of a file identified by the</span><a href="#l5.166"></a>
<span id="l5.167" class="minusline">-   :envvar:`PYTHONSTARTUP` environment variable when you start an interactive</span><a href="#l5.167"></a>
<span id="l5.168" class="minusline">-   interpreter.  To customize Python even for non-interactive mode, see</span><a href="#l5.168"></a>
<span id="l5.169" class="minusline">-   :ref:`tut-customize`.</span><a href="#l5.169"></a>
<span id="l5.170" class="minusline">-</span><a href="#l5.170"></a>
<span id="l5.171" class="minusline">-</span><a href="#l5.171"></a>
<span id="l5.172"> .. _GNU Readline: http://tiswww.case.edu/php/chet/readline/rltop.html</span><a href="#l5.172"></a>
<span id="l5.173"> .. _IPython: http://ipython.scipy.org/</span><a href="#l5.173"></a>
<span id="l5.174"> .. _bpython: http://www.bpython-interpreter.org/</span><a href="#l5.174"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l6.1" class="minusline">--- a/Doc/using/cmdline.rst</span><a href="#l6.1"></a>
<span id="l6.2" class="plusline">+++ b/Doc/using/cmdline.rst</span><a href="#l6.2"></a>
<span id="l6.3" class="atline">@@ -147,7 +147,12 @@ source.</span><a href="#l6.3"></a>
<span id="l6.4"> </span><a href="#l6.4"></a>
<span id="l6.5"> If no interface option is given, :option:`-i` is implied, ``sys.argv[0]`` is</span><a href="#l6.5"></a>
<span id="l6.6"> an empty string (``&quot;&quot;``) and the current directory will be added to the</span><a href="#l6.6"></a>
<span id="l6.7" class="minusline">-start of :data:`sys.path`.</span><a href="#l6.7"></a>
<span id="l6.8" class="plusline">+start of :data:`sys.path`.  Also, tab-completion and history editing is</span><a href="#l6.8"></a>
<span id="l6.9" class="plusline">+automatically enabled, if available on your platform (see</span><a href="#l6.9"></a>
<span id="l6.10" class="plusline">+:ref:`rlcompleter-config`).</span><a href="#l6.10"></a>
<span id="l6.11" class="plusline">+</span><a href="#l6.11"></a>
<span id="l6.12" class="plusline">+.. versionchanged:: 3.4</span><a href="#l6.12"></a>
<span id="l6.13" class="plusline">+   Automatic enabling of tab-completion and history editing.</span><a href="#l6.13"></a>
<span id="l6.14"> </span><a href="#l6.14"></a>
<span id="l6.15"> .. seealso::  :ref:`tut-invoking`</span><a href="#l6.15"></a>
<span id="l6.16"> </span><a href="#l6.16"></a>
<span id="l6.17" class="atline">@@ -438,7 +443,7 @@ conflict.</span><a href="#l6.17"></a>
<span id="l6.18">    is executed in the same namespace where interactive commands are executed so</span><a href="#l6.18"></a>
<span id="l6.19">    that objects defined or imported in it can be used without qualification in</span><a href="#l6.19"></a>
<span id="l6.20">    the interactive session.  You can also change the prompts :data:`sys.ps1` and</span><a href="#l6.20"></a>
<span id="l6.21" class="minusline">-   :data:`sys.ps2` in this file.</span><a href="#l6.21"></a>
<span id="l6.22" class="plusline">+   :data:`sys.ps2` and the hook :data:`sys.__interactivehook__` in this file.</span><a href="#l6.22"></a>
<span id="l6.23"> </span><a href="#l6.23"></a>
<span id="l6.24"> </span><a href="#l6.24"></a>
<span id="l6.25"> .. envvar:: PYTHONY2K</span><a href="#l6.25"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l7.1" class="minusline">--- a/Lib/site.py</span><a href="#l7.1"></a>
<span id="l7.2" class="plusline">+++ b/Lib/site.py</span><a href="#l7.2"></a>
<span id="l7.3" class="atline">@@ -58,11 +58,14 @@ Note that bletch is omitted because it d</span><a href="#l7.3"></a>
<span id="l7.4"> because bar.pth comes alphabetically before foo.pth; and spam is</span><a href="#l7.4"></a>
<span id="l7.5"> omitted because it is not mentioned in either path configuration file.</span><a href="#l7.5"></a>
<span id="l7.6"> </span><a href="#l7.6"></a>
<span id="l7.7" class="minusline">-After these path manipulations, an attempt is made to import a module</span><a href="#l7.7"></a>
<span id="l7.8" class="plusline">+The readline module is also automatically configured to enable</span><a href="#l7.8"></a>
<span id="l7.9" class="plusline">+completion for systems that support it.  This can be overriden in</span><a href="#l7.9"></a>
<span id="l7.10" class="plusline">+sitecustomize, usercustomize or PYTHONSTARTUP.</span><a href="#l7.10"></a>
<span id="l7.11" class="plusline">+</span><a href="#l7.11"></a>
<span id="l7.12" class="plusline">+After these operations, an attempt is made to import a module</span><a href="#l7.12"></a>
<span id="l7.13"> named sitecustomize, which can perform arbitrary additional</span><a href="#l7.13"></a>
<span id="l7.14"> site-specific customizations.  If this import fails with an</span><a href="#l7.14"></a>
<span id="l7.15"> ImportError exception, it is silently ignored.</span><a href="#l7.15"></a>
<span id="l7.16" class="minusline">-</span><a href="#l7.16"></a>
<span id="l7.17"> &quot;&quot;&quot;</span><a href="#l7.17"></a>
<span id="l7.18"> </span><a href="#l7.18"></a>
<span id="l7.19"> import sys</span><a href="#l7.19"></a>
<span id="l7.20" class="atline">@@ -452,6 +455,40 @@ class _Helper(object):</span><a href="#l7.20"></a>
<span id="l7.21"> def sethelper():</span><a href="#l7.21"></a>
<span id="l7.22">     builtins.help = _Helper()</span><a href="#l7.22"></a>
<span id="l7.23"> </span><a href="#l7.23"></a>
<span id="l7.24" class="plusline">+def enablerlcompleter():</span><a href="#l7.24"></a>
<span id="l7.25" class="plusline">+    &quot;&quot;&quot;Enable default readline configuration on interactive prompts, by</span><a href="#l7.25"></a>
<span id="l7.26" class="plusline">+    registering a sys.__interactivehook__.</span><a href="#l7.26"></a>
<span id="l7.27" class="plusline">+</span><a href="#l7.27"></a>
<span id="l7.28" class="plusline">+    If the readline module can be imported, the hook will set the Tab key</span><a href="#l7.28"></a>
<span id="l7.29" class="plusline">+    as completion key and register ~/.python_history as history file.</span><a href="#l7.29"></a>
<span id="l7.30" class="plusline">+    This can be overriden in the sitecustomize or usercustomize module,</span><a href="#l7.30"></a>
<span id="l7.31" class="plusline">+    or in a PYTHONSTARTUP file.</span><a href="#l7.31"></a>
<span id="l7.32" class="plusline">+    &quot;&quot;&quot;</span><a href="#l7.32"></a>
<span id="l7.33" class="plusline">+    def register_readline():</span><a href="#l7.33"></a>
<span id="l7.34" class="plusline">+        import atexit</span><a href="#l7.34"></a>
<span id="l7.35" class="plusline">+        try:</span><a href="#l7.35"></a>
<span id="l7.36" class="plusline">+            import readline</span><a href="#l7.36"></a>
<span id="l7.37" class="plusline">+            import rlcompleter</span><a href="#l7.37"></a>
<span id="l7.38" class="plusline">+        except ImportError:</span><a href="#l7.38"></a>
<span id="l7.39" class="plusline">+            return</span><a href="#l7.39"></a>
<span id="l7.40" class="plusline">+</span><a href="#l7.40"></a>
<span id="l7.41" class="plusline">+        # Reading the initialization (config) file may not be enough to set a</span><a href="#l7.41"></a>
<span id="l7.42" class="plusline">+        # completion key, so we set one first and then read the file</span><a href="#l7.42"></a>
<span id="l7.43" class="plusline">+        if 'libedit' in getattr(readline, '__doc__', ''):</span><a href="#l7.43"></a>
<span id="l7.44" class="plusline">+            readline.parse_and_bind('bind ^I rl_complete')</span><a href="#l7.44"></a>
<span id="l7.45" class="plusline">+        else:</span><a href="#l7.45"></a>
<span id="l7.46" class="plusline">+            readline.parse_and_bind('tab: complete')</span><a href="#l7.46"></a>
<span id="l7.47" class="plusline">+        readline.read_init_file()</span><a href="#l7.47"></a>
<span id="l7.48" class="plusline">+</span><a href="#l7.48"></a>
<span id="l7.49" class="plusline">+        history = os.path.join(os.path.expanduser('~'), '.python_history')</span><a href="#l7.49"></a>
<span id="l7.50" class="plusline">+        try:</span><a href="#l7.50"></a>
<span id="l7.51" class="plusline">+            readline.read_history_file(history)</span><a href="#l7.51"></a>
<span id="l7.52" class="plusline">+        except IOError:</span><a href="#l7.52"></a>
<span id="l7.53" class="plusline">+            pass</span><a href="#l7.53"></a>
<span id="l7.54" class="plusline">+        atexit.register(readline.write_history_file, history)</span><a href="#l7.54"></a>
<span id="l7.55" class="plusline">+</span><a href="#l7.55"></a>
<span id="l7.56" class="plusline">+    sys.__interactivehook__ = register_readline</span><a href="#l7.56"></a>
<span id="l7.57" class="plusline">+</span><a href="#l7.57"></a>
<span id="l7.58"> def aliasmbcs():</span><a href="#l7.58"></a>
<span id="l7.59">     &quot;&quot;&quot;On Windows, some default encodings are not provided by Python,</span><a href="#l7.59"></a>
<span id="l7.60">     while they are always available as &quot;mbcs&quot; in each locale. Make</span><a href="#l7.60"></a>
<span id="l7.61" class="atline">@@ -571,6 +608,7 @@ def main():</span><a href="#l7.61"></a>
<span id="l7.62">     setquit()</span><a href="#l7.62"></a>
<span id="l7.63">     setcopyright()</span><a href="#l7.63"></a>
<span id="l7.64">     sethelper()</span><a href="#l7.64"></a>
<span id="l7.65" class="plusline">+    enablerlcompleter()</span><a href="#l7.65"></a>
<span id="l7.66">     aliasmbcs()</span><a href="#l7.66"></a>
<span id="l7.67">     execsitecustomize()</span><a href="#l7.67"></a>
<span id="l7.68">     if ENABLE_USER_SITE:</span><a href="#l7.68"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l8.1" class="minusline">--- a/Misc/NEWS</span><a href="#l8.1"></a>
<span id="l8.2" class="plusline">+++ b/Misc/NEWS</span><a href="#l8.2"></a>
<span id="l8.3" class="atline">@@ -10,6 +10,9 @@ What's New in Python 3.4.0 Alpha 1?</span><a href="#l8.3"></a>
<span id="l8.4"> Core and Builtins</span><a href="#l8.4"></a>
<span id="l8.5"> -----------------</span><a href="#l8.5"></a>
<span id="l8.6"> </span><a href="#l8.6"></a>
<span id="l8.7" class="plusline">+- Issue #5845: Enable tab-completion in the interactive interpreter by</span><a href="#l8.7"></a>
<span id="l8.8" class="plusline">+  default, thanks to a new sys.__interactivehook__.</span><a href="#l8.8"></a>
<span id="l8.9" class="plusline">+</span><a href="#l8.9"></a>
<span id="l8.10"> - Issue #17115,17116: Module initialization now includes setting __package__ and</span><a href="#l8.10"></a>
<span id="l8.11">   __loader__ attributes to None.</span><a href="#l8.11"></a>
<span id="l8.12"> </span><a href="#l8.12"></a>
<span id="l8.13" class="atline">@@ -63,8 +66,8 @@ Core and Builtins</span><a href="#l8.13"></a>
<span id="l8.14"> Library</span><a href="#l8.14"></a>
<span id="l8.15"> -------</span><a href="#l8.15"></a>
<span id="l8.16"> </span><a href="#l8.16"></a>
<span id="l8.17" class="minusline">- - Issue #15902: Fix imp.load_module() accepting None as a file when loading an</span><a href="#l8.17"></a>
<span id="l8.18" class="minusline">-   extension module.</span><a href="#l8.18"></a>
<span id="l8.19" class="plusline">+- Issue #15902: Fix imp.load_module() accepting None as a file when loading an</span><a href="#l8.19"></a>
<span id="l8.20" class="plusline">+  extension module.</span><a href="#l8.20"></a>
<span id="l8.21"> </span><a href="#l8.21"></a>
<span id="l8.22"> - Issue #13721: SSLSocket.getpeercert() and SSLSocket.do_handshake() now</span><a href="#l8.22"></a>
<span id="l8.23">   raise an OSError with ENOTCONN, instead of an AttributeError, when the</span><a href="#l8.23"></a>
<span id="l8.24" class="atline">@@ -5001,6 +5004,9 @@ Library</span><a href="#l8.24"></a>
<span id="l8.25"> - Issue #11635: Don't use polling in worker threads and processes launched by</span><a href="#l8.25"></a>
<span id="l8.26">   concurrent.futures.</span><a href="#l8.26"></a>
<span id="l8.27"> </span><a href="#l8.27"></a>
<span id="l8.28" class="plusline">+- Issue #5845: Automatically read readline configuration to enable completion</span><a href="#l8.28"></a>
<span id="l8.29" class="plusline">+  in interactive mode.</span><a href="#l8.29"></a>
<span id="l8.30" class="plusline">+</span><a href="#l8.30"></a>
<span id="l8.31"> - Issue #6811: Allow importlib to change a code object's co_filename attribute</span><a href="#l8.31"></a>
<span id="l8.32">   to match the path to where the source code currently is, not where the code</span><a href="#l8.32"></a>
<span id="l8.33">   object originally came from.</span><a href="#l8.33"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l9.1" class="minusline">--- a/Modules/main.c</span><a href="#l9.1"></a>
<span id="l9.2" class="plusline">+++ b/Modules/main.c</span><a href="#l9.2"></a>
<span id="l9.3" class="atline">@@ -160,6 +160,32 @@ static void RunStartupFile(PyCompilerFla</span><a href="#l9.3"></a>
<span id="l9.4">     }</span><a href="#l9.4"></a>
<span id="l9.5"> }</span><a href="#l9.5"></a>
<span id="l9.6"> </span><a href="#l9.6"></a>
<span id="l9.7" class="plusline">+static void RunInteractiveHook(void)</span><a href="#l9.7"></a>
<span id="l9.8" class="plusline">+{</span><a href="#l9.8"></a>
<span id="l9.9" class="plusline">+    PyObject *sys, *hook, *result;</span><a href="#l9.9"></a>
<span id="l9.10" class="plusline">+    sys = PyImport_ImportModule(&quot;sys&quot;);</span><a href="#l9.10"></a>
<span id="l9.11" class="plusline">+    if (sys == NULL)</span><a href="#l9.11"></a>
<span id="l9.12" class="plusline">+        goto error;</span><a href="#l9.12"></a>
<span id="l9.13" class="plusline">+    hook = PyObject_GetAttrString(sys, &quot;__interactivehook__&quot;);</span><a href="#l9.13"></a>
<span id="l9.14" class="plusline">+    Py_DECREF(sys);</span><a href="#l9.14"></a>
<span id="l9.15" class="plusline">+    if (hook == NULL)</span><a href="#l9.15"></a>
<span id="l9.16" class="plusline">+        PyErr_Clear();</span><a href="#l9.16"></a>
<span id="l9.17" class="plusline">+    else {</span><a href="#l9.17"></a>
<span id="l9.18" class="plusline">+        result = PyObject_CallObject(hook, NULL);</span><a href="#l9.18"></a>
<span id="l9.19" class="plusline">+        Py_DECREF(hook);</span><a href="#l9.19"></a>
<span id="l9.20" class="plusline">+        if (result == NULL)</span><a href="#l9.20"></a>
<span id="l9.21" class="plusline">+            goto error;</span><a href="#l9.21"></a>
<span id="l9.22" class="plusline">+        else</span><a href="#l9.22"></a>
<span id="l9.23" class="plusline">+            Py_DECREF(result);</span><a href="#l9.23"></a>
<span id="l9.24" class="plusline">+    }</span><a href="#l9.24"></a>
<span id="l9.25" class="plusline">+    return;</span><a href="#l9.25"></a>
<span id="l9.26" class="plusline">+</span><a href="#l9.26"></a>
<span id="l9.27" class="plusline">+error:</span><a href="#l9.27"></a>
<span id="l9.28" class="plusline">+    PySys_WriteStderr(&quot;Failed calling sys.__interactivehook__\n&quot;);</span><a href="#l9.28"></a>
<span id="l9.29" class="plusline">+    PyErr_Print();</span><a href="#l9.29"></a>
<span id="l9.30" class="plusline">+    PyErr_Clear();</span><a href="#l9.30"></a>
<span id="l9.31" class="plusline">+}</span><a href="#l9.31"></a>
<span id="l9.32" class="plusline">+</span><a href="#l9.32"></a>
<span id="l9.33"> </span><a href="#l9.33"></a>
<span id="l9.34"> static int RunModule(wchar_t *modname, int set_argv0)</span><a href="#l9.34"></a>
<span id="l9.35"> {</span><a href="#l9.35"></a>
<span id="l9.36" class="atline">@@ -690,6 +716,7 @@ Py_Main(int argc, wchar_t **argv)</span><a href="#l9.36"></a>
<span id="l9.37">         if (filename == NULL &amp;&amp; stdin_is_interactive) {</span><a href="#l9.37"></a>
<span id="l9.38">             Py_InspectFlag = 0; /* do exit on SystemExit */</span><a href="#l9.38"></a>
<span id="l9.39">             RunStartupFile(&amp;cf);</span><a href="#l9.39"></a>
<span id="l9.40" class="plusline">+            RunInteractiveHook();</span><a href="#l9.40"></a>
<span id="l9.41">         }</span><a href="#l9.41"></a>
<span id="l9.42">         /* XXX */</span><a href="#l9.42"></a>
<span id="l9.43"> </span><a href="#l9.43"></a>
<span id="l9.44" class="atline">@@ -755,6 +782,7 @@ Py_Main(int argc, wchar_t **argv)</span><a href="#l9.44"></a>
<span id="l9.45">     if (Py_InspectFlag &amp;&amp; stdin_is_interactive &amp;&amp;</span><a href="#l9.45"></a>
<span id="l9.46">         (filename != NULL || command != NULL || module != NULL)) {</span><a href="#l9.46"></a>
<span id="l9.47">         Py_InspectFlag = 0;</span><a href="#l9.47"></a>
<span id="l9.48" class="plusline">+        RunInteractiveHook();</span><a href="#l9.48"></a>
<span id="l9.49">         /* XXX */</span><a href="#l9.49"></a>
<span id="l9.50">         sts = PyRun_AnyFileFlags(stdin, &quot;&lt;stdin&gt;&quot;, &amp;cf) != 0;</span><a href="#l9.50"></a>
<span id="l9.51">     }</span><a href="#l9.51"></a></pre></div>
</div>
</div>

</div>
</div>
<script type="text/javascript">process_dates()</script>


</body>
</html>

