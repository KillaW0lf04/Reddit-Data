<!DOCTYPE html>
<html>
<head>
    
    <title>How can I make a chain of function decorators in Python? - Stack Overflow</title>
    <link rel="shortcut icon" href="//cdn.sstatic.net/stackoverflow/img/favicon.ico?v=038622610830">
    <link rel="apple-touch-icon image_src" href="//cdn.sstatic.net/stackoverflow/img/apple-touch-icon.png?v=fd7230a85918">
    <link rel="search" type="application/opensearchdescription+xml" title="Stack Overflow" href="/opensearch.xml">
    <meta name="twitter:card" content="summary">
    <meta name="twitter:domain" content="stackoverflow.com"/>
    <meta name="og:type" content="website" />
    <meta name="og:image" content="http://cdn.sstatic.net/stackoverflow/img/apple-touch-icon@2.png?v=fde65a5a78c6"/>
    <meta name="og:title" content="How can I make a chain of function decorators in Python?" />
    <meta name="og:description" content="How can I make two decorators in Python that would do the following?

@makebold
@makeitalic
def say():
   return &quot;Hello&quot;


which should return

&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;Hello&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;


I&#39;m not " />
    <meta name="og:url" content="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python"/>
    <link rel="canonical" href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python" />

    
    
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
    <script src="//cdn.sstatic.net/Js/stub.en.js?v=d142d951ee55"></script>
    <link rel="stylesheet" type="text/css" href="//cdn.sstatic.net/stackoverflow/all.css?v=dc5a5d7ef830">
    
    <link rel="alternate" type="application/atom+xml" title="Feed for question &#39;How can I make a chain of function decorators in Python?&#39;" href="/feeds/question/739654">
    <script>
        
        StackExchange.ready(function () {
            StackExchange.using("postValidation", function () {
                StackExchange.postValidation.initOnBlurAndSubmit($('#post-form'), 2, 'answer');
            });

            
            StackExchange.question.init({showAnswerHelp:true,totalCommentCount:3,shownCommentCount:3,highlightColor:'#F4A83D',backgroundColor:'#FFF',questionId:739654});

            styleCode();

                StackExchange.realtime.subscribeToQuestion('1', '739654');
            
                    });
    </script>


    <script>
        StackExchange.init({"locale":"en","stackAuthUrl":"https://stackauth.com","serverTime":1404132089,"networkMetaHostname":"meta.stackexchange.com","styleCode":true,"enableUserHovercards":true,"site":{"name":"Stack Overflow","description":"Q&A for professional and enthusiast programmers","isNoticesTabEnabled":true,"recaptchaPublicKey":"6LdchgIAAAAAAJwGpIzRQSOFaO0pU6s44Xt8aTwc","recaptchaAudioLang":"en","enableNewTagCreationWarning":true,"nonAsciiTags":true,"enableSocialMediaInSharePopup":true},"user":{"fkey":"a92f13ba36c772525db1c7111c756719","isAnonymous":true}});
        StackExchange.using.setCacheBreakers({"js/prettify-full.en.js":"12ef2711e474","js/moderator.en.js":"e2c6bab58c56","js/full-anon.en.js":"a66b4586d8f3","js/full.en.js":"d43401f72f80","js/wmd.en.js":"d25c057c3f48","js/third-party/jquery.autocomplete.min.js":"e5f01e97f7c3","js/third-party/jquery.autocomplete.min.en.js":"","js/mobile.en.js":"5f0b5c72eaa8","js/help.en.js":"43b6b771d4d9","js/tageditor.en.js":"afabf8d8de91","js/tageditornew.en.js":"140e973e4037","js/inline-tag-editing.en.js":"21223186b436","js/revisions.en.js":"989c474e85a9","js/review.en.js":"c261687765b3","js/tagsuggestions.en.js":"bb4721d888d2","js/post-validation.en.js":"62fe2d3d1730","js/explore-qlist.en.js":"8b8b631bd679","js/events.en.js":"7263182fd2c2"});
        StackExchange.using("gps", function() {
             StackExchange.gps.init(true);
        });
    </script>
    
        <script>
            StackExchange.ready(function () {
                $('#nav-tour').click(function () {
                    StackExchange.using("gps", function() {
                        StackExchange.gps.track("aboutpage.click", { aboutclick_location: "headermain" }, true);
                    });
                });
            });
        </script>
</head>
<body class="question-page new-topbar">
    <noscript><div id="noscript-padding"></div></noscript>
    <div id="notify-container"></div>
    <div id="overlay-header"></div>
    <div id="custom-header"></div>
<div class="topbar">
    <div class="topbar-wrapper">
        
        <div class="js-topbar-dialog-corral">

<div class="topbar-dialog siteSwitcher-dialog dno">
    <div class="header">
        <h3><a href="//stackoverflow.com">current community</a></h3>
    </div>
    <div class="modal-content current-site-container">
        <ul class="current-site">
                <li>
                        <div class="related-links">
            <a href="http://chat.stackoverflow.com"     data-gps-track="site_switcher.click({ item_type:6 })"
>chat</a>
                    <a href="http://blog.stackoverflow.com"     data-gps-track="site_switcher.click({ item_type:7 })"
>blog</a>
            </div>




    <a href="//stackoverflow.com"
       class="current-site-link site-link js-gps-track"
       data-id="1"
       data-gps-track="
        site_switcher.click({ item_type:3 })">
        <div class="site-icon favicon favicon-stackoverflow" title="Stack Overflow"></div>
        Stack Overflow
    </a>

                </li>
                <li class="related-site">
                        <div class="L-shaped-icon-container">
        <span class="L-shaped-icon"></span>
    </div>

                    



    <a href="http://meta.stackoverflow.com"
       class="site-link js-gps-track"
       data-id="552"
       data-gps-track="
            site.switch({ target_site:552, item_type:3 }),
        site_switcher.click({ item_type:4 })">
        <div class="site-icon favicon favicon-stackoverflowmeta" title="Meta Stack Overflow"></div>
        Meta Stack Overflow
    </a>

                </li>
                            <li class="related-site">
                        <div class="L-shaped-icon-container">
        <span class="L-shaped-icon"></span>
    </div>

                    <a class="site-link"
                       href="//careers.stackoverflow.com"
                            data-gps-track="site_switcher.click({ item_type:9 })"
>
                        <div class="site-icon favicon favicon-careers" title="Stack Overflow Careers"></div>
                        Careers 2.0
                    </a>
                </li>
        </ul>
    </div>
    
    <div class="header" id="your-communities-header">
        <h3>
your communities        </h3>
            
    </div>
    <div class="modal-content" id="your-communities-section">
            
            <div class="call-to-login">
                        <a href="https://stackoverflow.com/users/signup?returnurl=http%3a%2f%2fstackoverflow.com%2fquestions%2f739654%2fhow-can-i-make-a-chain-of-function-decorators-in-python" class="js-gps-track"     data-gps-track="site_switcher.click({ item_type:10 })"
>Sign up</a>
                    or
                    <a href="https://stackoverflow.com/users/login?returnurl=http%3a%2f%2fstackoverflow.com%2fquestions%2f739654%2fhow-can-i-make-a-chain-of-function-decorators-in-python" class="js-gps-track"     data-gps-track="site_switcher.click({ item_type:11 })"
>log in</a>

                    to customize your list.
            </div>
    </div>
    
    <div class="header">
        <h3><a href="//stackexchange.com/sites">more stack exchange communities</a></h3>
    </div>
    <div class="modal-content">
            <div class="child-content"></div>
    </div>
</div>
        </div>

        <div class="network-items">
            
            <a href="//stackexchange.com" 
               class="topbar-icon icon-site-switcher yes-hover js-site-switcher-button js-gps-track"
               data-gps-track="site_switcher.show"
               title="A list of all 128 Stack Exchange sites">
                <span class="hidden-text">Stack Exchange</span>
            </a>
            
        </div>

        <div class="topbar-links">
            
                <div class="links-container">
                    <span class="topbar-menu-links">
                            <a href="https://stackoverflow.com/users/signup?returnurl=http%3a%2f%2fstackoverflow.com%2fquestions%2f739654%2fhow-can-i-make-a-chain-of-function-decorators-in-python" class="login-link">sign up</a>
                            <a href="https://stackoverflow.com/users/login?returnurl=http%3a%2f%2fstackoverflow.com%2fquestions%2f739654%2fhow-can-i-make-a-chain-of-function-decorators-in-python" class="login-link">log in</a>
                            <a href="/tour">tour</a>

                            <a href="#" class="icon-help js-help-button" title="Help Center and other resources">
        help
        <span class="triangle"></span>
    </a>
    <div class="topbar-dialog help-dialog js-help-dialog dno">
        <div class="modal-content">
            <ul>
                                    <li>
                        <a href="/tour"     class="js-gps-track" data-gps-track="help_popup.click({ item_type:1 })"
>
                            Tour
                            <span class="item-summary">
                                Start here for a quick overview of the site
                            </span>
                        </a>
                    </li>
                <li>
                    <a href="/help"     class="js-gps-track" data-gps-track="help_popup.click({ item_type:4 })"
>
                        Help Center
                        <span class="item-summary">
                            Detailed answers to any questions you might have
                        </span>
                    </a>
                </li>
                    <li>
                        <a href="//meta.stackoverflow.com"     class="js-gps-track" data-gps-track="help_popup.click({ item_type:2 })"
>
                            Meta
                            <span class="item-summary">
                                Discuss the workings and policies of this site
                            </span>
                        </a>
                    </li>
            </ul>
        </div>
    </div>

                            <a href="//careers.stackoverflow.com">careers 2.0</a>
                    </span>
                </div>

			<div class="search-container">
                <form id="search" action="/search" method="get" autocomplete="off">
                    <input name="q" type="text" placeholder="search" value="" tabindex="1" autocomplete="off" maxlength="240" />
                </form>
			</div>
            	
        </div>      
    </div> 
</div>
<script>
    StackExchange.ready(function () { StackExchange.topbar.init(); });
</script>
    <div class="container">
        <div id="header" class=headeranon>
            <br class="cbt">
            <div id="hlogo">
                <a href="/">
                    Stack Overflow
                </a>
            </div>
            <div id="hmenus">
                <div class="nav mainnavs mainnavsanon">
                    <ul>
                        <li class="youarehere"><a id="nav-questions" href="/questions">Questions</a></li>
                        <li><a id="nav-tags" href="/tags">Tags</a></li>
                        <li><a id="nav-users" href="/users">Users</a></li>
                        <li><a id="nav-badges" href="/help/badges">Badges</a></li>
                        <li><a id="nav-unanswered" href="/unanswered">Unanswered</a></li>
                    </ul>
                </div>
                <div class="nav askquestion">
                    <ul>
                        <li>
                            <a id="nav-askquestion"  href="/questions/ask">Ask Question</a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        



        <div id="content">
            

<div itemscope itemtype="http://schema.org/Article">
	<link itemprop="image" href="//cdn.sstatic.net/stackoverflow/img/apple-touch-icon.png">
			<!--googleoff: all-->

<div id="herobox-mini">
    <div id="hero-content">
        <span id="controls">
            <a href="/tour" id="tell-me-more" class="button">Take the 2-minute tour</a>
            <span id="close"><a title="click to dismiss">&times;</a></span>
        </span>
        <div id="blurb">
            Stack Overflow is a question and answer site for professional and enthusiast programmers. It&#39;s 100% free, no registration required.
        </div>        
    </div>
    <script>
        $('#tell-me-more').click(function () {
            var clickSource = $("body").attr("class") + '-mini';
            if ($("body").hasClass("questions-page")) {
                clickSource = 'questionpagemini';
            } else if ($("body").hasClass("question-page")) {
                clickSource = 'questionpagemini';
            } else if ($("body").hasClass("home-page")) {
                clickSource = 'homepagemini';
            }

            StackExchange.using("gps", function () {
                StackExchange.gps.track("aboutpage.click", { aboutclick_location: clickSource } , true);
            });
        });
        $('#herobox-mini #close').click(function () {
            StackExchange.using("gps", function () {
                StackExchange.gps.track("hero.action", { hero_action_type: "close" }, true);
            });
            $.cookie("hero", "none", { path: "/" });
            var $hero = $("#herobox-mini");
            $hero.slideUp('fast', function () { $hero.remove(); });
            return false;
        });
    </script>
</div>
			<!--googleon: all-->
			<div id="question-header">
			<h1 itemprop="name"><a href="/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python" class="question-hyperlink">How can I make a chain of function decorators in Python?</a></h1>
		</div>
			<div id="mainbar">

			

<div class="question" data-questionid="739654"  id="question">

    <script>
                var ados = ados || {};ados.run = ados.run || [];
                ados.run.push(function() { ados_add_placement(22,8277,"adzerk259345974",4).setZone(43) ; });                    
            </script>
            <div class="everyonelovesstackoverflow" id="adzerk259345974">
            </div>    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="739654">
    <a class="vote-up-off" title="This question shows research effort; it is useful and clear">up vote</a>
    <span class="vote-count-post high-scored-post">1269</span>
    <a class="vote-down-off" title="This question does not show any research effort; it is unclear or not useful">down vote</a>
    
    <a class="star-off" href="#" title="This is a favorite question (click again to undo)">favorite</a>
    <div class="favoritecount"><b>1423</b></div>   

</div>

            </td>
            
<td class="postcell">
<div>
    <div class="post-text" itemprop="description">

        <p>How can I make two decorators in Python that would do the following?</p>

<pre><code>@makebold
@makeitalic
def say():
   return "Hello"
</code></pre>

<p>which should return</p>

<pre><code>&lt;b&gt;&lt;i&gt;Hello&lt;/i&gt;&lt;/b&gt;
</code></pre>

<p>I'm not trying to make HTML this way in a real application, just trying to understand how decorators and decorator chaining works.</p>

    </div>
    <div class="post-taglist">
        <a href="/questions/tagged/python" class="post-tag" title="show questions tagged &#39;python&#39;" rel="tag">python</a> <a href="/questions/tagged/decorator" class="post-tag" title="show questions tagged &#39;decorator&#39;" rel="tag">decorator</a> 
    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/q/739654" title="short permalink to this question" class="short-link" id="link-post-739654">share</a><span class="lsep">|</span><a href="/posts/739654/edit" class="suggest-edit-post" title="">improve this question</a></div>        
    </td>
    <td align="right" class="post-signature">
<div class="user-info ">
    <div class="user-action-time">
        <a href="/posts/739654/revisions" title="show all edits to this post">edited <span title="2014-01-01 22:30:23Z" class="relativetime">Jan 1 at 22:30</span></a>
    </div>
    <div class="user-gravatar32">
        <a href="/users/2619939/superscript"><div class="gravatar-wrapper-32"><img src="http://i.stack.imgur.com/qS833.png?s=32&g=1" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/2619939/superscript">SuperScript</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">3,075</span><span title="3 silver badges"><span class="badge2"></span><span class="badgecount">3</span></span><span title="21 bronze badges"><span class="badge3"></span><span class="badgecount">21</span></span>
    </div>
</div>    </td>
    <td class="post-signature owner">
        <div class="user-info ">
    <div class="user-action-time">
        asked <span title="2009-04-11 07:05:31Z" class="relativetime">Apr 11 '09 at 7:05</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/1897/imran"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/09d9b10ad83581c21328d44e48c77b9d?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/1897/imran">Imran</a><br>
        <span class="reputation-score" title="reputation score 19962" dir="ltr">20k</span><span title="10 gold badges"><span class="badge1"></span><span class="badgecount">10</span></span><span title="51 silver badges"><span class="badge2"></span><span class="badgecount">51</span></span><span title="90 bronze badges"><span class="badge3"></span><span class="badgecount">90</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</div>
</td>
        </tr>
                
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-739654" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-22540293" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="hot">15</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Here&#39;s the most &#39;a-ha!&#39; answer I&#39;ve found so far: <a href="http://pythonconquerstheuniverse.wordpress.com/2012/04/29/python-decorators/" rel="nofollow">pythonconquerstheuniverse.wordpress.com/2012/04/29/&hellip;</a></span>
                &ndash;&nbsp;
                    <a href="/users/2394437/takosuke"
                       title="33 reputation"
                       class="comment-user">takosuke</a>
                <span class="comment-date" dir="ltr"><span title="2012-05-24 00:27:43Z" class="relativetime-clean">May 24 '12 at 0:27</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-20552133" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">3</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">If you need more help with decorators and annotations see my blog post here. <a href="http://blog.mattalcock.com/2013/1/5/decorates-and-annotations/" rel="nofollow">blog.mattalcock.com/2013/1/5/decorates-and-annotations</a></span>
                &ndash;&nbsp;
                    <a href="/users/200983/matt-alcock"
                       title="1878 reputation"
                       class="comment-user">Matt Alcock</a>
                <span class="comment-date" dir="ltr"><span title="2013-02-04 22:25:58Z" class="relativetime-clean">Feb 4 '13 at 22:25</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-27843242" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Adding a link: <a href="http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/" rel="nofollow">Understanding Python Decorators in 12 Easy Steps!</a></span>
                &ndash;&nbsp;
                    <a href="/users/1673391/grijesh-chauhan"
                       title="28207 reputation"
                       class="comment-user">Grijesh Chauhan</a>
                <span class="comment-date" dir="ltr"><span title="2013-09-18 09:01:29Z" class="relativetime-clean">Sep 18 '13 at 9:01</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-739654" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid answering questions in comments." 
				>add comment</a>
    </td>
</tr>        </table>
</div>


			<div id="answers">

				<a name="tab-top"></a>
				<div id="answers-header">
					<div class="subheader answers-subheader">
						<h2>
								12 Answers
						</h2>
						<div>
							<div id="tabs">
        <a href="/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python?answertab=active#tab-top" title="Answers with the latest activity first">active</a>
        <a href="/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python?answertab=oldest#tab-top" title="Answers in the order they were provided">oldest</a>
        <a class="youarehere" href="/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python?answertab=votes#tab-top" title="Answers with the highest score first">votes</a>
</div>
						</div>
					</div>    
				</div>    




  
<a name="739665"></a>
<div id="answer-739665" class="answer accepted-answer" data-answerid="739665" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="739665">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post high-scored-post">1851</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


        <span class="vote-accepted-on load-accepted-answer-date" title="loading when this answer was accepted...">accepted</span>
</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>Check out <a href="http://docs.python.org/reference/compound%5Fstmts.html#function">the documentation</a> to see how decorators work. Here is what you asked for:</p>

<pre><code>def makebold(fn):
    def wrapped():
        return "&lt;b&gt;" + fn() + "&lt;/b&gt;"
    return wrapped

def makeitalic(fn):
    def wrapped():
        return "&lt;i&gt;" + fn() + "&lt;/i&gt;"
    return wrapped

@makebold
@makeitalic
def hello():
    return "hello world"

print hello() ## returns &lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;
</code></pre>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/739665" title="short permalink to this answer" class="short-link" id="link-post-739665">share</a><span class="lsep">|</span><a href="/posts/739665/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info ">
    <div class="user-action-time">
        <a href="/posts/739665/revisions" title="show all edits to this post">edited <span title="2009-04-11 07:21:39Z" class="relativetime">Apr 11 '09 at 7:21</span></a>
    </div>
    <div class="user-gravatar32">
        
    </div>
    <div class="user-details">
        <br>
        
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info user-hover">
    <div class="user-action-time">
        answered <span title="2009-04-11 07:16:18Z" class="relativetime">Apr 11 '09 at 7:16</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/16417/paolo-bergantino"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/80ae8ec34e9e3e66c5be50733afaa44e?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/16417/paolo-bergantino">Paolo Bergantino</a><br>
        <span class="reputation-score" title="reputation score 195708" dir="ltr">196k</span><span title="49 gold badges"><span class="badge1"></span><span class="badgecount">49</span></span><span title="387 silver badges"><span class="badge2"></span><span class="badgecount">387</span></span><span title="376 bronze badges"><span class="badge3"></span><span class="badgecount">376</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-739665" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="5" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-5934940" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="supernova">120</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Consider using <a href="http://docs.python.org/library/functools.html#functools.wraps" rel="nofollow">functools.wraps</a> or, better yet, the <a href="http://pypi.python.org/pypi/decorator" rel="nofollow">decorator module from PyPI</a>: they preserve certain important metadata (such as <code>__name__</code> and, speaking about the decorator package, function signature).</span>
                &ndash;&nbsp;
                    <a href="/users/110151/marius-gedminas"
                       title="3219 reputation"
                       class="comment-user">Marius Gedminas</a>
                <span class="comment-date" dir="ltr"><span title="2011-03-11 02:30:48Z" class="relativetime-clean">Mar 11 '11 at 2:30</span></span>
                    <span class="edited-yes" title="this comment was edited 1 time"></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-7458778" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="hot">26</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">What the hell! Most elaborate to the point explanation on Python decorators. Well done!</span>
                &ndash;&nbsp;
                    <a href="/users/69281/mohsin-hijazee"
                       title="157 reputation"
                       class="comment-user">Mohsin Hijazee</a>
                <span class="comment-date" dir="ltr"><span title="2011-06-16 08:47:52Z" class="relativetime-clean">Jun 16 '11 at 8:47</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-9437012" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">13</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Finally I understand them. And more importantly, why to use them. Thanks Paolo Bergantino.</span>
                &ndash;&nbsp;
                    <a href="/users/689569/alan"
                       title="148 reputation"
                       class="comment-user">Alan</a>
                <span class="comment-date" dir="ltr"><span title="2011-10-13 11:20:47Z" class="relativetime-clean">Oct 13 '11 at 11:20</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-15554316" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">1</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Finally, an example that&#39;s real and makes sense. Your main function is being decorated. I want my main function to receive a zipped dictionary, so I can pull out database row column values by name, rather than relying on index position. Thanks.</span>
                &ndash;&nbsp;
                    <a href="/users/448715/octopusgrabbus"
                       title="4183 reputation"
                       class="comment-user">octopusgrabbus</a>
                <span class="comment-date" dir="ltr"><span title="2012-07-30 14:30:06Z" class="relativetime-clean">Jul 30 '12 at 14:30</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-16084620" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">2</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">two best answers, one to the point and one seriously in depth, how awesome is that?</span>
                &ndash;&nbsp;
                    <a href="/users/103897/chris-hayes"
                       title="1149 reputation"
                       class="comment-user">Chris Hayes</a>
                <span class="comment-date" dir="ltr"><span title="2012-08-21 00:19:18Z" class="relativetime-clean">Aug 21 '12 at 0:19</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-739665" data-rep=50 data-anon=true
			   class="comments-link " 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>show <b>5</b> more comments</a>
    </td>
</tr>    </table>
</div>
<script>
                var ados = ados || {};ados.run = ados.run || [];
                ados.run.push(function() { ados_add_placement(22,8277,"adzerk803514124",4).setZone(44) ; });                    
            </script>
            <div class="everyonelovesstackoverflow" id="adzerk803514124">
            </div>
  
<a name="1594484"></a>
<div id="answer-1594484" class="answer" data-answerid="1594484" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="1594484">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post high-scored-post">2534</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


<div class="bounty-award-container"><span class="bounty-award" title="This answer has been awarded bounties worth 250 reputation by 200 OK">+250</span></div></div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>If you are not into long explanations, see <a href="http://stackoverflow.com/questions/739654/understanding-python-decorators#answer-739665">Paolo Bergantino’s answer</a>.</p>

<h1>Decorator Basics</h1>

<h2>Python’s functions are objects</h2>

<p>To understand decorators, you must first understand that functions are objects in Python.
This has important consequences. Let’s see why with a simple example :</p>

<pre><code>def shout(word="yes"):
    return word.capitalize()+"!"

print shout()
# outputs : 'Yes!'

# As an object, you can assign the function to a variable like any
# other object 

scream = shout

# Notice we don't use parentheses: we are not calling the function, we are
# putting the function "shout" into the variable "scream". 
# It means you can then call "shout" from "scream":

print scream()
# outputs : 'Yes!'

# More than that, it means you can remove the old name 'shout', and
# the function will still be accessible from 'scream'

del shout
try:
    print shout()
except NameError, e:
    print e
    #outputs: "name 'shout' is not defined"

print scream()
# outputs: 'Yes!'
</code></pre>

<p>Okay! Keep this in mind. We’ll circle back to it shortly. </p>

<p>Another interesting property of Python functions is they can be defined... inside another function!</p>

<pre><code>def talk():

    # You can define a function on the fly in "talk" ...
    def whisper(word="yes"):
        return word.lower()+"..."

    # ... and use it right away!

    print whisper()

# You call "talk", that defines "whisper" EVERY TIME you call it, then
# "whisper" is called in "talk". 
talk()
# outputs: 
# "yes..."

# But "whisper" DOES NOT EXIST outside "talk":

try:
    print whisper()
except NameError, e:
    print e
    #outputs : "name 'whisper' is not defined"*
    Python's functions are objects
</code></pre>

<h2>Functions references</h2>

<p>Okay, still here? Now the fun part... </p>

<p>You’ve seen that functions are objects. Therefore, functions:</p>

<ul>
<li>can be assigned to a variable</li>
<li>can be defined in another function</li>
</ul>

<p>That means that <strong>a function can <code>return</code> another function</strong>. Have a look! ☺</p>

<pre><code>def getTalk(kind="shout"):

    # We define functions on the fly
    def shout(word="yes"):
        return word.capitalize()+"!"

    def whisper(word="yes") :
        return word.lower()+"...";

    # Then we return one of them
    if kind == "shout":
        # We don't use "()", we are not calling the function,
        # we are returning the function object
        return shout  
    else:
        return whisper

# How do you use this strange beast?

# Get the function and assign it to a variable
talk = getTalk()      

# You can see that "talk" is here a function object:
print talk
#outputs : &lt;function shout at 0xb7ea817c&gt;

# The object is the one returned by the function:
print talk()
#outputs : Yes!

# And you can even use it directly if you feel wild:
print getTalk("whisper")()
#outputs : yes...
</code></pre>

<p>But wait...there’s more! </p>

<p>If you can <code>return</code> a function, you can pass one as a parameter:</p>

<pre><code>def doSomethingBefore(func): 
    print "I do something before then I call the function you gave me"
    print func()

doSomethingBefore(scream)
#outputs: 
#I do something before then I call the function you gave me
#Yes!
</code></pre>

<p>Well, you just have everything needed to understand decorators. You see, decorators are “wrappers”, which means that <strong>they let you execute code before and after the function they decorate</strong> without modifying the function itself.</p>

<h2>Handcrafted decorators</h2>

<p>How you’d do it manually:</p>

<pre><code># A decorator is a function that expects ANOTHER function as parameter
def my_shiny_new_decorator(a_function_to_decorate):

    # Inside, the decorator defines a function on the fly: the wrapper.
    # This function is going to be wrapped around the original function
    # so it can execute code before and after it.
    def the_wrapper_around_the_original_function():

        # Put here the code you want to be executed BEFORE the original 
        # function is called
        print "Before the function runs"

        # Call the function here (using parentheses)
        a_function_to_decorate()

        # Put here the code you want to be executed AFTER the original 
        # function is called
        print "After the function runs"

    # At this point, "a_function_to_decorate" HAS NEVER BEEN EXECUTED.
    # We return the wrapper function we have just created.
    # The wrapper contains the function and the code to execute before
    # and after. It’s ready to use!
    return the_wrapper_around_the_original_function

# Now imagine you create a function you don't want to ever touch again.
def a_stand_alone_function():
    print "I am a stand alone function, don't you dare modify me"

a_stand_alone_function() 
#outputs: I am a stand alone function, don't you dare modify me

# Well, you can decorate it to extend its behavior.
# Just pass it to the decorator, it will wrap it dynamically in 
# any code you want and return you a new function ready to be used:

a_stand_alone_function_decorated = my_shiny_new_decorator(a_stand_alone_function)
a_stand_alone_function_decorated()
#outputs:
#Before the function runs
#I am a stand alone function, don't you dare modify me
#After the function runs
</code></pre>

<p>Now, you probably want that every time you call <code>a_stand_alone_function</code>, <code>a_stand_alone_function_decorated</code> is called instead. That’s easy, just overwrite <code>a_stand_alone_function</code> with the function returned by <code>my_shiny_new_decorator</code>:</p>

<pre><code>a_stand_alone_function = my_shiny_new_decorator(a_stand_alone_function)
a_stand_alone_function()
#outputs:
#Before the function runs
#I am a stand alone function, don't you dare modify me
#After the function runs

# And guess what? That’s EXACTLY what decorators do!
</code></pre>

<h2>Decorators demystified</h2>

<p>The previous example, using the decorator syntax:</p>

<pre><code>@my_shiny_new_decorator
def another_stand_alone_function():
    print "Leave me alone"

another_stand_alone_function()  
#outputs:  
#Before the function runs
#Leave me alone
#After the function runs
</code></pre>

<p>Yes, that’s all, it’s that simple. <code>@decorator</code> is just a shortcut to:</p>

<pre><code>another_stand_alone_function = my_shiny_new_decorator(another_stand_alone_function)
</code></pre>

<p>Decorators are just a pythonic variant of the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator design pattern</a>. There are several classic design patterns embedded in Python to ease development (like iterators).</p>

<p>Of course, you can accumulate decorators:</p>

<pre><code>def bread(func):
    def wrapper():
        print "&lt;/''''''\&gt;"
        func()
        print "&lt;\______/&gt;"
    return wrapper

def ingredients(func):
    def wrapper():
        print "#tomatoes#"
        func()
        print "~salad~"
    return wrapper

def sandwich(food="--ham--"):
    print food

sandwich()
#outputs: --ham--
sandwich = bread(ingredients(sandwich))
sandwich()
#outputs:
#&lt;/''''''\&gt;
# #tomatoes#
# --ham--
# ~salad~
#&lt;\______/&gt;
</code></pre>

<p>Using the Python decorator syntax:</p>

<pre><code>@bread
@ingredients
def sandwich(food="--ham--"):
    print food

sandwich()
#outputs:
#&lt;/''''''\&gt;
# #tomatoes#
# --ham--
# ~salad~
#&lt;\______/&gt;
</code></pre>

<p>The order you set the decorators MATTERS:</p>

<pre><code>@ingredients
@bread
def strange_sandwich(food="--ham--"):
    print food

strange_sandwich()
#outputs:
##tomatoes#
#&lt;/''''''\&gt;
# --ham--
#&lt;\______/&gt;
# ~salad~
</code></pre>

<hr>

<h1>Now: to answer the question...</h1>

<p>As a conclusion, you can easily see how to answer the question:</p>

<pre><code># The decorator to make it bold
def makebold(fn):
    # The new function the decorator returns
    def wrapper():
        # Insertion of some code before and after
        return "&lt;b&gt;" + fn() + "&lt;/b&gt;"
    return wrapper

# The decorator to make it italic
def makeitalic(fn):
    # The new function the decorator returns
    def wrapper():
        # Insertion of some code before and after
        return "&lt;i&gt;" + fn() + "&lt;/i&gt;"
    return wrapper

@makebold
@makeitalic
def say():
    return "hello"

print say() 
#outputs: &lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;

# This is the exact equivalent to 
def say():
    return "hello"
say = makebold(makeitalic(say))

print say() 
#outputs: &lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;
</code></pre>

<p>You can now just leave happy, or burn your brain a little bit more and see advanced uses of decorators.</p>

<hr>

<h1>Taking decorators to the next level</h1>

<h2>Passing arguments to the decorated function</h2>

<pre><code># It’s not black magic, you just have to let the wrapper 
# pass the argument:

def a_decorator_passing_arguments(function_to_decorate):
    def a_wrapper_accepting_arguments(arg1, arg2):
        print "I got args! Look:", arg1, arg2
        function_to_decorate(arg1, arg2)
    return a_wrapper_accepting_arguments

# Since when you are calling the function returned by the decorator, you are
# calling the wrapper, passing arguments to the wrapper will let it pass them to 
# the decorated function

@a_decorator_passing_arguments
def print_full_name(first_name, last_name):
    print "My name is", first_name, last_name

print_full_name("Peter", "Venkman")
# outputs:
#I got args! Look: Peter Venkman
#My name is Peter Venkman
</code></pre>

<h2>Decorating methods</h2>

<p>One nifty thing about Python is that methods and functions are really the same.  The only difference is that methods expect that their first argument is a reference to the current object (<code>self</code>). </p>

<p>That means you can build a decorator for methods the same way! Just remember to take <code>self</code> into consideration:</p>

<pre><code>def method_friendly_decorator(method_to_decorate):
    def wrapper(self, lie):
        lie = lie - 3 # very friendly, decrease age even more :-)
        return method_to_decorate(self, lie)
    return wrapper


class Lucy(object):

    def __init__(self):
        self.age = 32

    @method_friendly_decorator
    def sayYourAge(self, lie):
        print "I am %s, what did you think?" % (self.age + lie)

l = Lucy()
l.sayYourAge(-3)
#outputs: I am 26, what did you think?
</code></pre>

<p>If you’re making general-purpose decorator--one you’ll apply to any function or method, no matter its arguments--then just use <code>*args, **kwargs</code>:</p>

<pre><code>def a_decorator_passing_arbitrary_arguments(function_to_decorate):
    # The wrapper accepts any arguments
    def a_wrapper_accepting_arbitrary_arguments(*args, **kwargs):
        print "Do I have args?:"
        print args
        print kwargs
        # Then you unpack the arguments, here *args, **kwargs
        # If you are not familiar with unpacking, check:
        # http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/
        function_to_decorate(*args, **kwargs)
    return a_wrapper_accepting_arbitrary_arguments

@a_decorator_passing_arbitrary_arguments
def function_with_no_argument():
    print "Python is cool, no argument here."

function_with_no_argument()
#outputs
#Do I have args?:
#()
#{}
#Python is cool, no argument here.

@a_decorator_passing_arbitrary_arguments
def function_with_arguments(a, b, c):
    print a, b, c

function_with_arguments(1,2,3)
#outputs
#Do I have args?:
#(1, 2, 3)
#{}
#1 2 3 

@a_decorator_passing_arbitrary_arguments
def function_with_named_arguments(a, b, c, platypus="Why not ?"):
    print "Do %s, %s and %s like platypus? %s" %\
    (a, b, c, platypus)

function_with_named_arguments("Bill", "Linus", "Steve", platypus="Indeed!")
#outputs
#Do I have args ? :
#('Bill', 'Linus', 'Steve')
#{'platypus': 'Indeed!'}
#Do Bill, Linus and Steve like platypus? Indeed!

class Mary(object):

    def __init__(self):
        self.age = 31

    @a_decorator_passing_arbitrary_arguments
    def sayYourAge(self, lie=-3): # You can now add a default value
        print "I am %s, what did you think ?" % (self.age + lie)

m = Mary()
m.sayYourAge()
#outputs
# Do I have args?:
#(&lt;__main__.Mary object at 0xb7d303ac&gt;,)
#{}
#I am 28, what did you think?
</code></pre>

<h2>Passing arguments to the decorator</h2>

<p>Great, now what would you say about passing arguments to the decorator itself? </p>

<p>This can get somewhat twisted, since a decorator must accept a function as an argument. Therefore, you cannot pass the decorated function’s arguments directly to the decorator.</p>

<p>Before rushing to the solution, let’s write a little reminder: </p>

<pre><code># Decorators are ORDINARY functions
def my_decorator(func):
    print "I am a ordinary function"
    def wrapper():
        print "I am function returned by the decorator"
        func()
    return wrapper

# Therefore, you can call it without any "@"

def lazy_function():
    print "zzzzzzzz"

decorated_function = my_decorator(lazy_function)
#outputs: I am a ordinary function

# It outputs "I am a ordinary function", because that’s just what you do:
# calling a function. Nothing magic.

@my_decorator
def lazy_function():
    print "zzzzzzzz"

#outputs: I am a ordinary function
</code></pre>

<p>It’s exactly the same. "<code>my_decorator</code>" is called. So when you <code>@my_decorator</code>, you are telling Python to call the function 'labeled by the variable "<code>my_decorator</code>"'. </p>

<p>This is important! The label you give can point directly to the decorator—<strong>or not</strong>. </p>

<p>Let’s get evil. ☺</p>

<pre><code>def decorator_maker():

    print "I make decorators! I am executed only once: "+\
          "when you make me create a decorator."

    def my_decorator(func):

        print "I am a decorator! I am executed only when you decorate a function."

        def wrapped():
            print ("I am the wrapper around the decorated function. "
                  "I am called when you call the decorated function. "
                  "As the wrapper, I return the RESULT of the decorated function.")
            return func()

        print "As the decorator, I return the wrapped function."

        return wrapped

    print "As a decorator maker, I return a decorator"
    return my_decorator

# Let’s create a decorator. It’s just a new function after all.
new_decorator = decorator_maker()       
#outputs:
#I make decorators! I am executed only once: when you make me create a decorator.
#As a decorator maker, I return a decorator

# Then we decorate the function

def decorated_function():
    print "I am the decorated function."

decorated_function = new_decorator(decorated_function)
#outputs:
#I am a decorator! I am executed only when you decorate a function.
#As the decorator, I return the wrapped function

# Let’s call the function:
decorated_function()
#outputs:
#I am the wrapper around the decorated function. I am called when you call the decorated function.
#As the wrapper, I return the RESULT of the decorated function.
#I am the decorated function.
</code></pre>

<p>No surprise here. </p>

<p>Let’s do EXACTLY the same thing, but skip all the pesky intermediate variables:</p>

<pre><code>def decorated_function():
    print "I am the decorated function."
decorated_function = decorator_maker()(decorated_function)
#outputs:
#I make decorators! I am executed only once: when you make me create a decorator.
#As a decorator maker, I return a decorator
#I am a decorator! I am executed only when you decorate a function.
#As the decorator, I return the wrapped function.

# Finally:
decorated_function()    
#outputs:
#I am the wrapper around the decorated function. I am called when you call the decorated function.
#As the wrapper, I return the RESULT of the decorated function.
#I am the decorated function.
</code></pre>

<p>Let’s make it <em>even shorter</em>:</p>

<pre><code>@decorator_maker()
def decorated_function():
    print "I am the decorated function."
#outputs:
#I make decorators! I am executed only once: when you make me create a decorator.
#As a decorator maker, I return a decorator
#I am a decorator! I am executed only when you decorate a function.
#As the decorator, I return the wrapped function.

#Eventually: 
decorated_function()    
#outputs:
#I am the wrapper around the decorated function. I am called when you call the decorated function.
#As the wrapper, I return the RESULT of the decorated function.
#I am the decorated function.
</code></pre>

<p>Hey, did you see that? We used a function call with the "<code>@</code>" syntax! :-)</p>

<p>So, back to decorators with arguments. If we can use functions to generate the decorator on the fly, we can pass arguments to that function, right?</p>

<pre><code>def decorator_maker_with_arguments(decorator_arg1, decorator_arg2):

    print "I make decorators! And I accept arguments:", decorator_arg1, decorator_arg2

    def my_decorator(func):
        # The ability to pass arguments here is a gift from closures.
        # If you are not comfortable with closures, you can assume it’s ok,
        # or read: http://stackoverflow.com/questions/13857/can-you-explain-closures-as-they-relate-to-python
        print "I am the decorator. Somehow you passed me arguments:", decorator_arg1, decorator_arg2

        # Don't confuse decorator arguments and function arguments!
        def wrapped(function_arg1, function_arg2) :
            print ("I am the wrapper around the decorated function.\n"
                  "I can access all the variables\n"
                  "\t- from the decorator: {0} {1}\n"
                  "\t- from the function call: {2} {3}\n"
                  "Then I can pass them to the decorated function"
                  .format(decorator_arg1, decorator_arg2,
                          function_arg1, function_arg2))
            return func(function_arg1, function_arg2)

        return wrapped

    return my_decorator

@decorator_maker_with_arguments("Leonard", "Sheldon")
def decorated_function_with_arguments(function_arg1, function_arg2):
    print ("I am the decorated function and only knows about my arguments: {0}"
           " {1}".format(function_arg1, function_arg2))

decorated_function_with_arguments("Rajesh", "Howard")
#outputs:
#I make decorators! And I accept arguments: Leonard Sheldon
#I am the decorator. Somehow you passed me arguments: Leonard Sheldon
#I am the wrapper around the decorated function. 
#I can access all the variables 
#   - from the decorator: Leonard Sheldon 
#   - from the function call: Rajesh Howard 
#Then I can pass them to the decorated function
#I am the decorated function and only knows about my arguments: Rajesh Howard
</code></pre>

<p>Here it is: a decorator with arguments. Arguments can be set as variable:</p>

<pre><code>c1 = "Penny"
c2 = "Leslie"

@decorator_maker_with_arguments("Leonard", c1)
def decorated_function_with_arguments(function_arg1, function_arg2):
    print ("I am the decorated function and only knows about my arguments:"
           " {0} {1}".format(function_arg1, function_arg2))

decorated_function_with_arguments(c2, "Howard")
#outputs:
#I make decorators! And I accept arguments: Leonard Penny
#I am the decorator. Somehow you passed me arguments: Leonard Penny
#I am the wrapper around the decorated function. 
#I can access all the variables 
#   - from the decorator: Leonard Penny 
#   - from the function call: Leslie Howard 
#Then I can pass them to the decorated function
#I am the decorated function and only knows about my arguments: Leslie Howard
</code></pre>

<p>As you can see, you can pass arguments to the decorator like any function using this trick. You can even use <code>*args, **kwargs</code> if you wish. But remember decorators are called <strong>only once</strong>. Just when Python imports the script. You can't dynamically set the arguments afterwards. When you do "import x", <strong>the function is already decorated</strong>, so you can't
change anything.</p>

<hr>

<h1>Let’s practice: decorating a decorator</h1>

<p>Okay, as a bonus, I'll give you a snippet to make any decorator accept generically any argument. After all, in order to accept arguments, we created our decorator using another function. </p>

<p>We wrapped the decorator.</p>

<p>Anything else we saw recently that wrapped function?</p>

<p>Oh yes, decorators!</p>

<p>Let’s have some fun and write a decorator for the decorators:</p>

<pre><code>def decorator_with_args(decorator_to_enhance):
    """ 
    This function is supposed to be used as a decorator.
    It must decorate an other function, that is intended to be used as a decorator.
    Take a cup of coffee.
    It will allow any decorator to accept an arbitrary number of arguments,
    saving you the headache to remember how to do that every time.
    """

    # We use the same trick we did to pass arguments
    def decorator_maker(*args, **kwargs):

        # We create on the fly a decorator that accepts only a function
        # but keeps the passed arguments from the maker.
        def decorator_wrapper(func):

            # We return the result of the original decorator, which, after all, 
            # IS JUST AN ORDINARY FUNCTION (which returns a function).
            # Only pitfall: the decorator must have this specific signature or it won't work:
            return decorator_to_enhance(func, *args, **kwargs)

        return decorator_wrapper

    return decorator_maker
</code></pre>

<p>It can be used as follows:</p>

<pre><code># You create the function you will use as a decorator. And stick a decorator on it :-)
# Don't forget, the signature is "decorator(func, *args, **kwargs)"
@decorator_with_args 
def decorated_decorator(func, *args, **kwargs): 
    def wrapper(function_arg1, function_arg2):
        print "Decorated with", args, kwargs
        return func(function_arg1, function_arg2)
    return wrapper

# Then you decorate the functions you wish with your brand new decorated decorator.

@decorated_decorator(42, 404, 1024)
def decorated_function(function_arg1, function_arg2):
    print "Hello", function_arg1, function_arg2

decorated_function("Universe and", "everything")
#outputs:
#Decorated with (42, 404, 1024) {}
#Hello Universe and everything

# Whoooot!
</code></pre>

<p>I know, the last time you had this feeling, it was after listening a guy saying: "before understanding recursion, you must first understand recursion". But now, don't you feel good about mastering this?</p>

<hr>

<h1>Best practices: decorators</h1>

<ul>
<li>Decorators were introduced in Python 2.4, so be sure your code will be run on >= 2.4. </li>
<li>Decorators slow down the function call. Keep that in mind.</li>
<li><strong>You cannot un-decorate a function.</strong> (There <em>are</em> hacks to create decorators that can be removed, but nobody uses them.) So once a function is decorated, it’s decorated <em>for all the code</em>.</li>
<li>Decorators wrap functions, which can make them hard to debug.  (This gets better from Python >= 2.5; see below.)</li>
</ul>

<p>The <code>functools</code> module was introduced in Python 2.5. It includes the function <code>functools.wraps()</code>, which copies the name, module, and docstring of the decorated function to its wrapper. </p>

<p>(Fun fact: <code>functools.wraps()</code> is a decorator! ☺)</p>

<pre><code># For debugging, the stacktrace prints you the function __name__
def foo():
    print "foo"

print foo.__name__
#outputs: foo

# With a decorator, it gets messy    
def bar(func):
    def wrapper():
        print "bar"
        return func()
    return wrapper

@bar
def foo():
    print "foo"

print foo.__name__
#outputs: wrapper

# "functools" can help for that

import functools

def bar(func):
    # We say that "wrapper", is wrapping "func"
    # and the magic begins
    @functools.wraps(func)
    def wrapper():
        print "bar"
        return func()
    return wrapper

@bar
def foo():
    print "foo"

print foo.__name__
#outputs: foo
</code></pre>

<hr>

<h1>How can the decorators be useful?</h1>

<p><strong>Now the big question:</strong> What can I use decorators for? </p>

<p>Seem cool and powerful, but a practical example would be great. Well, there are 1000 possibilities. Classic uses are extending a function behavior from an external lib (you can't modify it), or for debugging (you don't want to modify it because it’s temporary). </p>

<p>You can use them to extend several functions in a DRY’s way, like so:</p>

<pre><code>def benchmark(func):
    """
    A decorator that prints the time a function takes
    to execute.
    """
    import time
    def wrapper(*args, **kwargs):
        t = time.clock()
        res = func(*args, **kwargs)
        print func.__name__, time.clock()-t
        return res
    return wrapper


def logging(func):
    """
    A decorator that logs the activity of the script.
    (it actually just prints it, but it could be logging!)
    """
    def wrapper(*args, **kwargs):
        res = func(*args, **kwargs)
        print func.__name__, args, kwargs
        return res
    return wrapper


def counter(func):
    """
    A decorator that counts and prints the number of times a function has been executed
    """
    def wrapper(*args, **kwargs):
        wrapper.count = wrapper.count + 1
        res = func(*args, **kwargs)
        print "{0} has been used: {1}x".format(func.__name__, wrapper.count)
        return res
    wrapper.count = 0
    return wrapper

@counter
@benchmark
@logging
def reverse_string(string):
    return str(reversed(string))

print reverse_string("Able was I ere I saw Elba")
print reverse_string("A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!")

#outputs:
#reverse_string ('Able was I ere I saw Elba',) {}
#wrapper 0.0
#wrapper has been used: 1x 
#ablE was I ere I saw elbA
#reverse_string ('A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!',) {}
#wrapper 0.0
#wrapper has been used: 2x
#!amanaP :lanac a ,noep a ,stah eros ,raj a ,hsac ,oloR a ,tur a ,mapS ,snip ,eperc a ,)lemac a ro( niaga gab ananab a ,gat a ,nat a ,gab ananab a ,gag a ,inoracam ,elacrep ,epins ,spam ,arutaroloc a ,shajar ,soreh ,atsap ,eonac a ,nalp a ,nam A
</code></pre>

<p>Of course the good thing with decorators is that you can use them right away on almost anything without rewriting. DRY, I said:</p>

<pre><code>@counter
@benchmark
@logging
def get_random_futurama_quote():
    from urllib import urlopen
    result = urlopen("http://subfusion.net/cgi-bin/quote.pl?quote=futurama").read()
    try:
        value = result.split("&lt;br&gt;&lt;b&gt;&lt;hr&gt;&lt;br&gt;")[1].split("&lt;br&gt;&lt;br&gt;&lt;hr&gt;")[0]
        return value.strip()
    except:
        return "No, I'm ... doesn't!"


print get_random_futurama_quote()
print get_random_futurama_quote()

#outputs:
#get_random_futurama_quote () {}
#wrapper 0.02
#wrapper has been used: 1x
#The laws of science be a harsh mistress.
#get_random_futurama_quote () {}
#wrapper 0.01
#wrapper has been used: 2x
#Curse you, merciful Poseidon!
</code></pre>

<p>Python itself provides several decorators: <code>property</code>, <code>staticmethod</code>, etc. </p>

<ul>
<li>Django uses decorators to manage caching and view permissions. </li>
<li>Twisted to fake inlining asynchronous functions calls.</li>
</ul>

<p>This really is a large playground.</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/1594484" title="short permalink to this answer" class="short-link" id="link-post-1594484">share</a><span class="lsep">|</span><a href="/posts/1594484/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info ">
    <div class="user-action-time">
        <a href="/posts/1594484/revisions" title="show all edits to this post">edited <span title="2014-01-07 15:55:57Z" class="relativetime">Jan 7 at 15:55</span></a>
    </div>
    <div class="user-gravatar32">
        
    </div>
    <div class="user-details">
        <br>
        
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info">
    <div class="user-details">
        <span class="community-wiki" title="This post is community owned as of Jun 10 &#39;12 at 21:56. Votes do not generate reputation, and it can be edited by users with 100 rep">
            community wiki
        </span>
    </div><br>
    <div class="user-details">
        <a id="history-1594484" href="/posts/1594484/revisions" title="show revision history for this post">
        26 revs, 14 users 77%<br><a href="/users/9951">e-satis</a>
        </a>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-1594484" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="62" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-1466586" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="supernova">47</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">You wrote this somewhere else or disabled the javascript preview to write this, didn&#39;t you?</span>
                &ndash;&nbsp;
                    <a href="/users/34813/voyager"
                       title="17153 reputation"
                       class="comment-user">voyager</a>
                <span class="comment-date" dir="ltr"><span title="2009-10-21 15:09:12Z" class="relativetime-clean">Oct 21 '09 at 15:09</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-1467191" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">11</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">@voyager : I have the FF add-on &quot;It&#39;s all text&quot;. @gath1 : I can only explain something that way if I put some handcrafted code using the concept in production. It&#39;s not the case with metaclass yet.</span>
                &ndash;&nbsp;
                    <a href="/users/9951/e-satis"
                       title="144801 reputation"
                       class="comment-user">e-satis</a>
                <span class="comment-date" dir="ltr"><span title="2009-10-21 16:35:07Z" class="relativetime-clean">Oct 21 '09 at 16:35</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-4300495" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="supernova">266</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">thank you, it&#39;s one of the best answers I have ever encountered on SO.</span>
                &ndash;&nbsp;
                    <a href="/users/19756/alexandrul"
                       title="6765 reputation"
                       class="comment-user">alexandrul</a>
                <span class="comment-date" dir="ltr"><span title="2010-10-25 06:37:15Z" class="relativetime-clean">Oct 25 '10 at 6:37</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-7458880" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">10</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">I can only give one vote. Could have given 10 more if allowed. Well done. Thanks.</span>
                &ndash;&nbsp;
                    <a href="/users/69281/mohsin-hijazee"
                       title="157 reputation"
                       class="comment-user">Mohsin Hijazee</a>
                <span class="comment-date" dir="ltr"><span title="2011-06-16 08:54:31Z" class="relativetime-clean">Jun 16 '11 at 8:54</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-8264315" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="hot">23</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">As somebody who is not new to programming (C, bash, sed, awk) but just starting to learn python due to its sheer power, I feel like this post just leveled me up 10x.  It&#39;s like stumbling upon a mid-game item in the first hour of gameplay and making a mockery out of the NPCs for the next week of play.</span>
                &ndash;&nbsp;
                    <a href="/users/207248/siegex"
                       title="31504 reputation"
                       class="comment-user">SiegeX</a>
                <span class="comment-date" dir="ltr"><span title="2011-08-04 00:06:15Z" class="relativetime-clean">Aug 4 '11 at 0:06</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-1594484" data-rep=50 data-anon=true
			   class="comments-link " 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>show <b>62</b> more comments</a>
    </td>
</tr>    </table>
</div>

  
<a name="739679"></a>
<div id="answer-739679" class="answer" data-answerid="739679" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="739679">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">83</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>Alternatively, you could write a factory function which return a decorator which wraps the return value of the decorated function in a tag passed to the factory function. For example:</p>

<pre><code>from functools import wraps

def wrap_in_tag(tag):
    def factory(func):
        @wraps(func)
        def decorator():
            return '&lt;%(tag)s&gt;%(rv)s&lt;/%(tag)s&gt;' % (
                {'tag': tag, 'rv': func()})
        return decorator
    return factory
</code></pre>

<p>This enables you to write:</p>

<pre><code>@wrap_in_tag('b')
@wrap_in_tag('i')
def say():
    return 'hello'
</code></pre>

<p>or</p>

<pre><code>makebold = wrap_in_tag('b')
makeitalic = wrap_in_tag('i')

@makebold
@makeitalic
def say():
    return 'hello'
</code></pre>

<p>Personally I would have written the decorator somewhat differently:</p>

<pre><code>from functools import wraps

def wrap_in_tag(tag):
    def factory(func):
        @wraps(func)
        def decorator(val):
            return func('&lt;%(tag)s&gt;%(val)s&lt;/%(tag)s&gt;' %
                        {'tag': tag, 'val': val})
        return decorator
    return factory
</code></pre>

<p>which would yield:</p>

<pre><code>@wrap_in_tag('b')
@wrap_in_tag('i')
def say(val):
    return val
say('hello')
</code></pre>

<p>Don't forget the construction for which decorator syntax is a shorthand:</p>

<pre><code>say = wrap_in_tag('b')(wrap_in_tag('i')(say)))
</code></pre>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/739679" title="short permalink to this answer" class="short-link" id="link-post-739679">share</a><span class="lsep">|</span><a href="/posts/739679/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info ">
    <div class="user-action-time">
        <a href="/posts/739679/revisions" title="show all edits to this post">edited <span title="2009-04-11 09:29:28Z" class="relativetime">Apr 11 '09 at 9:29</span></a>
    </div>
    <div class="user-gravatar32">
        
    </div>
    <div class="user-details">
        <br>
        
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info">
    <div class="user-details">
        <span class="community-wiki" title="This post is community owned as of Apr 11 &#39;09 at 7:32. Votes do not generate reputation, and it can be edited by users with 100 rep">
            community wiki
        </span>
    </div><br>
    <div class="user-details">
        <a id="history-739679" href="/posts/739679/revisions" title="show revision history for this post">
        2 revs<br>Trevor
        </a>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-739679" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-770493" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">3</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">This answer solved a question I had about passing parameters into a funtools.wraps decorator.  Thanks</span>
                &ndash;&nbsp;
                    <a href="/users/1798387/kinlan"
                       title="7700 reputation"
                       class="comment-user">Kinlan</a>
                <span class="comment-date" dir="ltr"><span title="2009-06-07 13:29:33Z" class="relativetime-clean">Jun 7 '09 at 13:29</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-17688077" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">5</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">This sentence, is absolutely correct, but made me chuckle: &quot;Alternatively, you could write a factory function which return a decorator which wraps the return value of the decorated function in a tag passed to the factory function.&quot;</span>
                &ndash;&nbsp;
                    <a href="/users/259967/agrajag"
                       title="492 reputation"
                       class="comment-user">Agrajag</a>
                <span class="comment-date" dir="ltr"><span title="2012-10-23 12:17:34Z" class="relativetime-clean">Oct 23 '12 at 12:17</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-23435384" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Even more generic. I love your <code>wrap_in_tag</code> technique.</span>
                &ndash;&nbsp;
                    <a href="/users/356440/stephane-rolland"
                       title="7925 reputation"
                       class="comment-user">Stephane Rolland</a>
                <span class="comment-date" dir="ltr"><span title="2013-05-03 11:32:18Z" class="relativetime-clean">May 3 '13 at 11:32</span></span>
                    <span class="edited-yes" title="this comment was edited 1 time"></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-29212998" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">In my opinion, it is better to avoid more than one decorator as far as possible. If i had to write a factory function i would code it with *kwargs like <code>def wrap_in_tag(*kwargs)</code> then <code>@wrap_in_tag(&#39;b&#39;,&#39;i&#39;)</code></span>
                &ndash;&nbsp;
                    <a href="/users/1766716/guneysus"
                       title="455 reputation"
                       class="comment-user">guneysus</a>
                <span class="comment-date" dir="ltr"><span title="2013-10-29 22:29:45Z" class="relativetime-clean">Oct 29 '13 at 22:29</span></span>
                    <span class="edited-yes" title="this comment was edited 2 times"></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-739679" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="739721"></a>
<div id="answer-739721" class="answer" data-answerid="739721" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="739721">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">50</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>It looks like the other people have already told you how to solve the problem. I hope this will help you understand what decorators are.</p>

<p>Decorators are just syntactical sugar.</p>

<p>This</p>

<pre><code>@decorator
def func():
    ...
</code></pre>

<p>expands to    </p>

<pre><code>def func():
    ...
func = decorator(func)
</code></pre>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/739721" title="short permalink to this answer" class="short-link" id="link-post-739721">share</a><span class="lsep">|</span><a href="/posts/739721/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2009-04-11 08:00:42Z" class="relativetime">Apr 11 '09 at 8:00</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/57757/unknown"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/12d12320bb9a578802cfd9c8cb312e33?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/57757/unknown">Unknown</a><br>
        <span class="reputation-score" title="reputation score 22524" dir="ltr">22.5k</span><span title="11 gold badges"><span class="badge1"></span><span class="badgecount">11</span></span><span title="81 silver badges"><span class="badge2"></span><span class="badgecount">81</span></span><span title="146 bronze badges"><span class="badge3"></span><span class="badgecount">146</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-739721" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="1" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-21235198" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">3</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">This is really the simplest explanation to what decorators do, I like it!</span>
                &ndash;&nbsp;
                    <a href="/users/1248175/rednaw"
                       title="3651 reputation"
                       class="comment-user">rednaw</a>
                <span class="comment-date" dir="ltr"><span title="2013-02-26 17:28:42Z" class="relativetime-clean">Feb 26 '13 at 17:28</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-24206661" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">3</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Actually these two examples are not <i>exactly</i> the same.  Suppose <code>func</code> makes a recursive call to itself.  In the first example, that recursive call invokes the <i>decorated</i> version; in the second, the <i>undecorated</i> version.  So when decorating recursive functions, it&#39;s important to consider which behavior you want, and decorate it one way or the other.</span>
                &ndash;&nbsp;
                    <a href="/users/729627/wberry"
                       title="5945 reputation"
                       class="comment-user">wberry</a>
                <span class="comment-date" dir="ltr"><span title="2013-05-28 16:13:32Z" class="relativetime-clean">May 28 '13 at 16:13</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-29610246" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">@wberry No. A self-recursive call is not a special, it looks up the function to call in the surrounding context, just like any other function call. I just tried this and the first and second form both wrap all levels of recursion (on Python 2.6.6).</span>
                &ndash;&nbsp;
                    <a href="/users/260122/clacke"
                       title="1499 reputation"
                       class="comment-user">clacke</a>
                <span class="comment-date" dir="ltr"><span title="2013-11-11 09:03:40Z" class="relativetime-clean">Nov 11 '13 at 9:03</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-29634628" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">@clacke I don&#39;t have a 2.6 interpreter handy but in 2.7 the behavior is different.  I used a decorator that prints &quot;foo&quot; but otherwise preserves behavior, and two identical factorial functions, one decorated and one manually wrapped as in this answer.  The decorated one prints &quot;foo&quot; N times, the undecorated one prints it once.</span>
                &ndash;&nbsp;
                    <a href="/users/729627/wberry"
                       title="5945 reputation"
                       class="comment-user">wberry</a>
                <span class="comment-date" dir="ltr"><span title="2013-11-11 21:25:45Z" class="relativetime-clean">Nov 11 '13 at 21:25</span></span>
                    <span class="edited-yes" title="this comment was edited 1 time"></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-29643610" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">1</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">@wberry Ok, thanks for clarifying. Ha! I used a factorial function too. :-)</span>
                &ndash;&nbsp;
                    <a href="/users/260122/clacke"
                       title="1499 reputation"
                       class="comment-user">clacke</a>
                <span class="comment-date" dir="ltr"><span title="2013-11-12 05:33:08Z" class="relativetime-clean">Nov 12 '13 at 5:33</span></span>
                    <span class="edited-yes" title="this comment was edited 1 time"></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-739721" data-rep=50 data-anon=true
			   class="comments-link " 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>show <b>1</b> more comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="739667"></a>
<div id="answer-739667" class="answer" data-answerid="739667" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="739667">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">39</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>Python decorators add extra functionality to another function</p>

<p>An italics decorator could be like</p>

<pre><code>def makeitalic(fn):
    def newFunc():
        return "&lt;i&gt;" + fn() + "&lt;/i&gt;"
    return newFunc
</code></pre>

<p>Note that a function is defined inside a function.
What it basically does is replace a function with the newly defined one. For example, I have this class</p>

<pre><code>class foo:
    def bar(self):
        print "hi"
    def foobar(self):
        print "hi again"
</code></pre>

<p>Now say, I want both functions to print "---" after and before they are done.
I could add a print "---" before and after each print statement.
But because I don't like repeating myself, I will make a decorator</p>

<pre><code>def addDashes(fn): # notice it takes a function as an argument
    def newFunction(self): # define a new function
        print "---"
        fn(self) # call the original function
        print "---"
    return newFunction
    # Return the newly defined function - it will "replace" the original
</code></pre>

<p>So now I can change my class to </p>

<pre><code>class foo:
    @addDashes
    def bar(self):
        print "hi"

    @addDashes
    def foobar(self):
        print "hi again"
</code></pre>

<p>For more on decorators, check
<a href="http://www.ibm.com/developerworks/linux/library/l-cpdecor.html">http://www.ibm.com/developerworks/linux/library/l-cpdecor.html</a></p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/739667" title="short permalink to this answer" class="short-link" id="link-post-739667">share</a><span class="lsep">|</span><a href="/posts/739667/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2009-04-11 07:19:12Z" class="relativetime">Apr 11 '09 at 7:19</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/58536/abhinav"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/ca3550c3b2f3c75b08ac57ab6e2b04ea?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/58536/abhinav">abhinav</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">1,746</span><span title="7 silver badges"><span class="badge2"></span><span class="badgecount">7</span></span><span title="13 bronze badges"><span class="badge3"></span><span class="badgecount">13</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-739667" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-8532286" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Note as elegant as the lambda functions proposed by @Rune Kaagaard</span>
                &ndash;&nbsp;
                    <a href="/users/94363/rds"
                       title="5597 reputation"
                       class="comment-user">rds</a>
                <span class="comment-date" dir="ltr"><span title="2011-08-19 10:46:49Z" class="relativetime-clean">Aug 19 '11 at 10:46</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-23843910" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">what is the work of self keyword here ?</span>
                &ndash;&nbsp;
                    <a href="/users/1058541/phoenix"
                       title="571 reputation"
                       class="comment-user">Phoenix</a>
                <span class="comment-date" dir="ltr"><span title="2013-05-16 14:38:33Z" class="relativetime-clean">May 16 '13 at 14:38</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-25647861" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">1</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">@Phoenix: The <code>self</code> argument is needed because the <code>newFunction()</code> defined in <code>addDashes()</code> was specifically designed to be a <i>method</i> decorator not a general function decorator. The <code>self</code> argument represents the class instance and is passed to class methods whether they use it or not -- see the section titled <b>Decorating methods</b> in @e-satis&#39;s answer.</span>
                &ndash;&nbsp;
                    <a href="/users/355230/martineau"
                       title="20907 reputation"
                       class="comment-user">martineau</a>
                <span class="comment-date" dir="ltr"><span title="2013-07-12 15:46:27Z" class="relativetime-clean">Jul 12 '13 at 15:46</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-739667" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="4012213"></a>
<div id="answer-4012213" class="answer" data-answerid="4012213" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="4012213">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">38</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>And of course you can return lambdas as well from a decorator function:</p>

<pre><code>def makebold(f): 
    return lambda: "&lt;b&gt;" + f() + "&lt;/b&gt;"
def makeitalic(f): 
    return lambda: "&lt;i&gt;" + f() + "&lt;/i&gt;"

@makebold
@makeitalic
def say():
    return "Hello"

print say()
</code></pre>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/4012213" title="short permalink to this answer" class="short-link" id="link-post-4012213">share</a><span class="lsep">|</span><a href="/posts/4012213/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2010-10-25 06:18:12Z" class="relativetime">Oct 25 '10 at 6:18</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/164449/rune-kaagaard"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/c217fbcb041bb4a6b837eef71668c4a6?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/164449/rune-kaagaard">Rune Kaagaard</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">2,024</span><span title="10 silver badges"><span class="badge2"></span><span class="badgecount">10</span></span><span title="12 bronze badges"><span class="badge3"></span><span class="badgecount">12</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-4012213" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-21440413" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">5</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">And one step further: <code>makebold = lambda f : lambda &quot;&lt;b&gt;&quot; + f() + &quot;&lt;&#47;b&gt;&quot;</code></span>
                &ndash;&nbsp;
                    <a href="/users/8747/rob%e1%b5%a9"
                       title="48980 reputation"
                       class="comment-user">Robᵩ</a>
                <span class="comment-date" dir="ltr"><span title="2013-03-04 22:26:00Z" class="relativetime-clean">Mar 4 '13 at 22:26</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-31016621" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">4</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">@Robᵩ: To be syntactically correct: <code>makebold = lambda f: lambda: &quot;&lt;b&gt;&quot; + f() + &quot;&lt;&#47;b&gt;&quot;</code></span>
                &ndash;&nbsp;
                    <a href="/users/355230/martineau"
                       title="20907 reputation"
                       class="comment-user">martineau</a>
                <span class="comment-date" dir="ltr"><span title="2013-12-20 16:01:44Z" class="relativetime-clean">Dec 20 '13 at 16:01</span></span>
                    <span class="edited-yes" title="this comment was edited 1 time"></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-4012213" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="8633375"></a>
<div id="answer-8633375" class="answer" data-answerid="8633375" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="8633375">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">11</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>Another way of doing the same thing:</p>

<pre><code>class bol(object):
  def __init__(self, f):
    self.f = f
  def __call__(self):
    return "&lt;b&gt;{}&lt;/b&gt;".format(self.f())


class ita(object):
  def __init__(self, f):
    self.f = f
  def __call__(self):
    return "&lt;i&gt;{}&lt;/i&gt;".format(self.f())


@bol
@ita
def sayhi():
  return 'hi'
</code></pre>

<p>Or, more flexibly:</p>

<pre><code>class sty(object):
  def __init__(self, tag):
    self.tag = tag
  def __call__(self, f):
    def newf():
      return "&lt;{tag}&gt;{res}&lt;/{tag}&gt;".format(res=f(), tag=self.tag)
    return newf


@sty('b')
@sty('i')
def sayhi():
  return 'hi'
</code></pre>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/8633375" title="short permalink to this answer" class="short-link" id="link-post-8633375">share</a><span class="lsep">|</span><a href="/posts/8633375/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2011-12-26 06:13:01Z" class="relativetime">Dec 26 '11 at 6:13</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/562222/qed"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/d9c93381a9aa785b6fce90659875d704?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/562222/qed">qed</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">1,696</span><span title="1 gold badge"><span class="badge1"></span><span class="badgecount">1</span></span><span title="9 silver badges"><span class="badge2"></span><span class="badgecount">9</span></span><span title="16 bronze badges"><span class="badge3"></span><span class="badgecount">16</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-8633375" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-8633375" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="11673539"></a>
<div id="answer-11673539" class="answer" data-answerid="11673539" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="11673539">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">7</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>A decorator takes the function definition and creates a new function that executes this function and transforms the result.</p>

<pre><code>@deco
def do():
    ...
</code></pre>

<p>is eqivarent to:</p>

<pre><code>do = deco(do)
</code></pre>

<h2>Example:</h2>

<pre><code>def deco(func):
    def inner(letter):
        return func(letter).upper()  #upper
    return inner
</code></pre>

<p>This</p>

<pre><code>@deco
def do(number):
    return chr(number)  # number to letter
</code></pre>

<p>is eqivalent to this
    def do2(number):
        return chr(number)</p>

<pre><code>do2 = deco(do2)
</code></pre>

<p>65 &lt;=> 'a'</p>

<pre><code>print(do(65))
print(do2(65))
&gt;&gt;&gt; B
&gt;&gt;&gt; B
</code></pre>

<p>To understand the decorator, it is important to notice, that decorator created a new function do which is inner that executes func and transforms the result.</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/11673539" title="short permalink to this answer" class="short-link" id="link-post-11673539">share</a><span class="lsep">|</span><a href="/posts/11673539/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info user-hover">
    <div class="user-action-time">
        answered <span title="2012-07-26 16:11:42Z" class="relativetime">Jul 26 '12 at 16:11</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/236830/davoud-taghawi-nejad"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/1d7f93f931421bcf885970cac408ef8c?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/236830/davoud-taghawi-nejad">Davoud Taghawi-Nejad</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">2,185</span><span title="13 silver badges"><span class="badge2"></span><span class="badgecount">13</span></span><span title="27 bronze badges"><span class="badge3"></span><span class="badgecount">27</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-11673539" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-11673539" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="9540819"></a>
<div id="answer-9540819" class="answer" data-answerid="9540819" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="9540819">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">3</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>Speaking of the counter example - as given above, the counter will be shared between all functions that use the decorator:</p>

<pre><code>def counter(func):
    def wrapped(*args, **kws):
        print 'Called #%i' % wrapped.count
        wrapped.count += 1
        return func(*args, **kws)
    wrapped.count = 0
    return wrapped
</code></pre>

<p>That way, your decorator can be reused for different functions (or used to decorate the same function multiple times: <code>func_counter1 = counter(func); func_counter2 = counter(func)</code>), and the counter variable will remain private to each. </p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/9540819" title="short permalink to this answer" class="short-link" id="link-post-9540819">share</a><span class="lsep">|</span><a href="/posts/9540819/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2012-03-02 21:47:17Z" class="relativetime">Mar 2 '12 at 21:47</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/76957/marqueed"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/379e5a89215a550393842eef92563c14?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/76957/marqueed">marqueed</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">344</span><span title="2 silver badges"><span class="badge2"></span><span class="badgecount">2</span></span><span title="10 bronze badges"><span class="badge3"></span><span class="badgecount">10</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-9540819" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-9540819" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="17140530"></a>
<div id="answer-17140530" class="answer" data-answerid="17140530" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="17140530">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">3</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>Here is a simple example of chaining decorators.  Note the last line - it shows what is going on under the covers.</p>

<pre><code>############################################################
#
#    decorators
#
############################################################

def bold(fn):
    def decorate():
        # surround with bold tags before calling original function
        return "&lt;b&gt;" + fn() + "&lt;/b&gt;"
    return decorate


def uk(fn):
    def decorate():
        # swap month and day
        fields = fn().split('/')
        date = fields[1] + "/" + fields[0] + "/" + fields[2]
        return date
    return decorate

import datetime
def getDate():
    now = datetime.datetime.now()
    return "%d/%d/%d" % (now.day, now.month, now.year)

@bold
def getBoldDate(): 
    return getDate()

@uk
def getUkDate():
    return getDate()

@bold
@uk
def getBoldUkDate():
    return getDate()


print getDate()
print getBoldDate()
print getUkDate()
print getBoldUkDate()
# what is happening under the covers
print bold(uk(getDate))()
</code></pre>

<p>The output looks like:</p>

<pre><code>17/6/2013
&lt;b&gt;17/6/2013&lt;/b&gt;
6/17/2013
&lt;b&gt;6/17/2013&lt;/b&gt;
&lt;b&gt;6/17/2013&lt;/b&gt;
</code></pre>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/17140530" title="short permalink to this answer" class="short-link" id="link-post-17140530">share</a><span class="lsep">|</span><a href="/posts/17140530/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2013-06-17 04:43:25Z" class="relativetime">Jun 17 '13 at 4:43</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/1442379/chris-seddon"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/d780727b2a323fa2a92dc2def8e7f4f2?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/1442379/chris-seddon">Chris Seddon</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">498</span><span title="3 silver badges"><span class="badge2"></span><span class="badgecount">3</span></span><span title="7 bronze badges"><span class="badge3"></span><span class="badgecount">7</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-17140530" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-17140530" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="15840821"></a>
<div id="answer-15840821" class="answer" data-answerid="15840821" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="15840821">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">2</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <h1>Decorate functions with different number of arguments:</h1>

<pre><code>def frame_tests(fn):
    def wrapper(*args):
        print "\nStart: %s" %(fn.__name__)
        fn(*args)
        print "End: %s\n" %(fn.__name__)
    return wrapper

@frame_tests
def test_fn1():
    print "This is only a test!"

@frame_tests
def test_fn2(s1):
    print "This is only a test! %s" %(s1)

@frame_tests
def test_fn3(s1, s2):
    print "This is only a test! %s %s" %(s1, s2)

if __name__ == "__main__":
    test_fn1()
    test_fn2('OK!')
    test_fn3('OK!', 'Just a test!')
</code></pre>

<p>Result:  </p>

<pre><code>Start: test_fn1  
This is only a test!  
End: test_fn1  


Start: test_fn2  
This is only a test! OK!  
End: test_fn2  


Start: test_fn3  
This is only a test! OK! Just a test!  
End: test_fn3  
</code></pre>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/15840821" title="short permalink to this answer" class="short-link" id="link-post-15840821">share</a><span class="lsep">|</span><a href="/posts/15840821/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info user-hover">
    <div class="user-action-time">
        <a href="/posts/15840821/revisions" title="show all edits to this post">edited <span title="2014-02-15 19:09:04Z" class="relativetime">Feb 15 at 19:09</span></a>
    </div>
    <div class="user-gravatar32">
        <a href="/users/257944/bibhas"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/031d3c59dd2bae886bcf092883c9f5ff?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/257944/bibhas">Bibhas</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">5,125</span><span title="8 gold badges"><span class="badge1"></span><span class="badgecount">8</span></span><span title="26 silver badges"><span class="badge2"></span><span class="badgecount">26</span></span><span title="63 bronze badges"><span class="badge3"></span><span class="badgecount">63</span></span>
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2013-04-05 18:18:08Z" class="relativetime">Apr 5 '13 at 18:18</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/2112485/rabin-utam"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/d2aced5a111837852dcb2caf1823ba01?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/2112485/rabin-utam">rabin utam</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">308</span><span title="2 silver badges"><span class="badge2"></span><span class="badgecount">2</span></span><span title="8 bronze badges"><span class="badge3"></span><span class="badgecount">8</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-15840821" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-15840821" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="22833714"></a>
<div id="answer-22833714" class="answer" data-answerid="22833714" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22833714">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">2</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <pre><code>#decorator.py
def makeHtmlTag(tag, *args, **kwds):
    def real_decorator(fn):
        css_class = " class='{0}'".format(kwds["css_class"]) \
                                 if "css_class" in kwds else ""
        def wrapped(*args, **kwds):
            return "&lt;"+tag+css_class+"&gt;" + fn(*args, **kwds) + "&lt;/"+tag+"&gt;"
        return wrapped
    # return decorator dont call it
    return real_decorator

@makeHtmlTag(tag="b", css_class="bold_css")
@makeHtmlTag(tag="i", css_class="italic_css")
def hello():
    return "hello world"

print hello()
</code></pre>

<p>You can also write decorator in Class</p>

<pre><code>#class.py
class makeHtmlTagClass(object):

def __init__(self, tag, css_class=""):
    self._tag = tag
    self._css_class = " class='{0}'".format(css_class) \
                                   if css_class !="" else ""

def __call__(self, fn):
    def wrapped(*args, **kwargs):
        return "&lt;" + self._tag + self._css_class+"&gt;"  \
                   + fn(*args, **kwargs) + "&lt;/" + self._tag + "&gt;"
    return wrapped

@makeHtmlTagClass(tag="b", css_class="bold_css")
@makeHtmlTagClass(tag="i", css_class="italic_css")
def hello(name):
    return "Hello, {}".format(name)

print hello("Your name")
</code></pre>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22833714" title="short permalink to this answer" class="short-link" id="link-post-22833714">share</a><span class="lsep">|</span><a href="/posts/22833714/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info user-hover">
    <div class="user-action-time">
        answered <span title="2014-04-03 09:43:12Z" class="relativetime">Apr 3 at 9:43</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/1317035/nickleefly"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/904b50a077af81db10ea520be1127968?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/1317035/nickleefly">nickleefly</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">1,152</span><span title="9 silver badges"><span class="badge2"></span><span class="badgecount">9</span></span><span title="19 bronze badges"><span class="badge3"></span><span class="badgecount">19</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22833714" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22833714" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>
				<div class="question-status">
        <h2>                    <b>protected</b> by <a href="/users/1219006/jamylak">jamylak</a> <span title="2013-04-10 11:33:49Z" class="relativetime">Apr 10 '13 at 11:33</span>
</h2>
        <p>
Thank you for your interest in this question. 
Because it has attracted low-quality answers, posting an answer now requires 10 <a href="/help/whats-reputation">reputation</a> on this site.
<br /><br />
Would you like to answer one of these <a href="/unanswered?fromProtectedNotice=true">unanswered questions</a> instead?
</p>
    </div>


						<h2 class="bottom-notice" data-loc="1">
Not the answer you&#39;re looking for?							Browse other questions tagged <a href="/questions/tagged/python" class="post-tag" title="show questions tagged &#39;python&#39;" rel="tag">python</a> <a href="/questions/tagged/decorator" class="post-tag" title="show questions tagged &#39;decorator&#39;" rel="tag">decorator</a>  or <a href="/questions/ask">ask your own question</a>.						</h2>
			</div>
		</div>
				<div id="sidebar" class="show-votes">
						    <div class="module question-stats">
			        <table id="qinfo">
			            <tr>
			                <td>
			                    <p class="label-key">asked</p>
			                </td>
			                <td style="padding-left: 10px">
			                    <p class="label-key" title="2009-04-11 07:05:31Z"><b>5 years ago</b></p>
			                </td>
			            </tr>
			            <tr>
			                <td>
			                    <p class="label-key">viewed</p>
			                </td>

			                <td style="padding-left: 10px">
			                    <p class="label-key">
			                        <b>271484 times</b>
			                    </p>
			                </td>
			            </tr>
			                <tr>
			                    <td>
			                        <p class="label-key">active</p>
			                    </td>
			                    <td style="padding-left: 10px">
			                        <p class="label-key"><b><a href="?lastactivity" class="lastactivity-link" title="2014-04-03 09:43:12Z">2 months ago</a></b></p>
			                    </td>
			                </tr>
			        </table>
			    </div>
						
			<script>
                var ados = ados || {};ados.run = ados.run || [];
                ados.run.push(function() { ados_add_placement(22,8277,"adzerk2110704123",17).setZone(45) ; });                    
            </script>
            <div class="everyonelovesstackoverflow" id="adzerk2110704123">
            </div>  
    <div id="hireme">
        <script>
window.careers_adurl="//careers.stackoverflow.com/gethired/js",window.careers_cssurl="//cdn-careers.sstatic.net/careers/gethired/sidebar.min.css?v=88f3fd5e2263",window.careers_leaderboardcssurl="{leaderboardcssurl}",window.careers_companycssurl="//cdn-careers.sstatic.net/careers/gethired/company",window.careers_adselector="div#hireme",StackExchange.ready(function(){$.ajax({url:"//cdn-careers.sstatic.net/careers/gethired/loader.min.js?v=77944c6f6aca",dataType:"script",cache:!0})});        </script>
    </div>
			  
    
            <div class="module sidebar-linked">
	<h4 id="h-linked">Linked</h4>
	<div class="linked" data-tracker="lq=1">
<div class="spacer">
	<a href="/q/6711762" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">0</div>
	</a>
	<a href="/questions/6711762/python-lines-that-start-with" class="question-hyperlink">python lines that start with @</a>
</div><div class="spacer">
	<a href="/q/13857460" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">0</div>
	</a>
	<a href="/questions/13857460/what-do-and-lambda-mean-in-python" class="question-hyperlink">What do @ and lambda mean in Python?</a>
</div><div class="spacer">
	<a href="/q/10191561" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes  default">-5</div>
	</a>
	<a href="/questions/10191561/decorator-in-python" class="question-hyperlink">&ldquo;@&rdquo; Decorator (in Python)</a>
</div><div class="spacer">
	<a href="/q/12295974" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">1</div>
	</a>
	<a href="/questions/12295974/python-decorators-just-syntactic-sugar" class="question-hyperlink">Python decorators just syntactic sugar?</a>
</div><div class="spacer">
	<a href="/q/13450155" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">-1</div>
	</a>
	<a href="/questions/13450155/what-is-a-decorator-used-for" class="question-hyperlink">What is a decorator used for?</a>
</div><div class="spacer">
	<a href="/q/11342606" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">-9</div>
	</a>
	<a href="/questions/11342606/how-to-apply-a-python-decorator-to-a-function" class="question-hyperlink">How to apply a python decorator to a function?</a>
</div><div class="spacer">
	<a href="/q/12552708" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">1</div>
	</a>
	<a href="/questions/12552708/what-does-a-python-decorator-do-and-where-is-its-code" class="question-hyperlink">What does a Python decorator do, and where is its code?</a>
</div><div class="spacer">
	<a href="/q/17919025" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes  default">0</div>
	</a>
	<a href="/questions/17919025/what-withparser-method-in-python-means" class="question-hyperlink">What @withparser method in Python means?</a>
</div><div class="spacer">
	<a href="/q/21845557" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">-2</div>
	</a>
	<a href="/questions/21845557/explain-how-python-decorator-works" class="question-hyperlink">Explain how python decorator works</a>
</div><div class="spacer">
	<a href="/q/23702101" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes  default">0</div>
	</a>
	<a href="/questions/23702101/python-django-exploring-python-fundamentals-through-decorators" class="question-hyperlink">Python/Django: exploring python fundamentals through decorators</a>
</div>					<div class="spacer more">
				<a href="http://stackoverflow.com/questions/linked/739654">see more linked questions…</a>
			</div>
	</div>
</div>

				<div class="module sidebar-related">
					<h4 id="h-related">Related</h4>
                    <div class="related js-gps-related-questions" data-tracker="rq=1">
                        <div class="spacer">
<a href="/q/1010080" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">5
    </div>
</a><a href="/questions/1010080/python-get-original-function-arguments-in-decorator" class="question-hyperlink">Python - Get original function arguments in decorator</a>
</div>
<div class="spacer">
<a href="/q/1166118" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">18
    </div>
</a><a href="/questions/1166118/how-to-strip-decorators-from-a-function-in-python" class="question-hyperlink">How to strip decorators from a function in python</a>
</div>
<div class="spacer">
<a href="/q/1965607" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">4
    </div>
</a><a href="/questions/1965607/how-can-i-pass-a-variable-in-a-decorator-to-functions-argument-in-a-decorated-f" class="question-hyperlink">How can I pass a variable in a decorator to function&#39;s argument in a decorated function?</a>
</div>
<div class="spacer">
<a href="/q/2094008" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">8
    </div>
</a><a href="/questions/2094008/why-cant-python-decorators-be-chained-across-definitions" class="question-hyperlink">Why can&#39;t Python decorators be chained across definitions?</a>
</div>
<div class="spacer">
<a href="/q/2366713" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">36
    </div>
</a><a href="/questions/2366713/can-a-python-decorator-of-an-instance-method-access-the-class" class="question-hyperlink">Can a Python decorator of an instance method access the class?</a>
</div>
<div class="spacer">
<a href="/q/3012421" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">57
    </div>
</a><a href="/questions/3012421/python-lazy-property-decorator" class="question-hyperlink">Python lazy property decorator</a>
</div>
<div class="spacer">
<a href="/q/3931627" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">10
    </div>
</a><a href="/questions/3931627/how-to-build-a-python-decorator-with-optional-parameters" class="question-hyperlink">How to build a python decorator with optional parameters?</a>
</div>
<div class="spacer">
<a href="/q/5542993" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">1
    </div>
</a><a href="/questions/5542993/python-function-decorator-calls" class="question-hyperlink">Python function decorator calls</a>
</div>
<div class="spacer">
<a href="/q/9295398" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">5
    </div>
</a><a href="/questions/9295398/python-decorator-for-class-or-function" class="question-hyperlink">python decorator for class OR function</a>
</div>
<div class="spacer">
<a href="/q/17493183" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes default">2
    </div>
</a><a href="/questions/17493183/python-decorate-function-with-default-kwargs" class="question-hyperlink">python: decorate function with default kwargs</a>
</div>

                    </div>
				</div>
            
<div id="hot-network-questions" class="module">
    <h4>
        <a href="//stackexchange.com/questions?tab=hot" 
           class="js-gps-track" 
           data-gps-track="posts_hot_network.click({ item_type:1, location:11 })">
            Hot Network Questions
        </a>
    </h4>
    <ul>
            <li >
                <div class="favicon favicon-skeptics" title="Skeptics Stack Exchange"></div><a href="http://skeptics.stackexchange.com/questions/22160/did-facebook-permit-researchers-to-alter-data-feeds-without-users-permission" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:212 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Did Facebook permit researchers to alter data feeds without users&#39; permission?
                </a>

            </li>
            <li >
                <div class="favicon favicon-physics" title="Physics Stack Exchange"></div><a href="http://physics.stackexchange.com/questions/122374/why-isnt-water-running-faster-hotter" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:151 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Why isn&#39;t water running faster hotter?
                </a>

            </li>
            <li >
                <div class="favicon favicon-physics" title="Physics Stack Exchange"></div><a href="http://physics.stackexchange.com/questions/121879/can-i-compute-the-mass-of-a-coin-based-on-the-sound-of-its-fall" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:151 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Can I compute the mass of a coin based on the sound of its fall?
                </a>

            </li>
            <li >
                <div class="favicon favicon-movies" title="Movies &amp; TV Stack Exchange"></div><a href="http://movies.stackexchange.com/questions/21729/did-rose-die-at-the-end-of-titanic-or-was-she-dreaming" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:367 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Did Rose die at the end of Titanic, or was she dreaming?
                </a>

            </li>
            <li >
                <div class="favicon favicon-english" title="English Language &amp; Usage Stack Exchange"></div><a href="http://english.stackexchange.com/questions/181396/the-right-word-for-someone-with-a-higher-rank-in-military" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:97 }); posts_hot_network.click({ item_type:2, location:11 })">
                    The right word for someone with a higher rank in military
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-superuser" title="Super User"></div><a href="http://superuser.com/questions/774909/mah-jonng-game-on-archive-org-from-1991-will-not-run" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:3 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Mah Jonng game on Archive.org from 1991 will not run
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-academia" title="Academia Stack Exchange"></div><a href="http://academia.stackexchange.com/questions/24156/is-a-copied-acknowledgements-considered-plagiarism" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:415 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Is a copied acknowledgements considered plagiarism?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-codereview" title="Code Review Stack Exchange"></div><a href="http://codereview.stackexchange.com/questions/55667/functions-to-escape-css-rules-in-php" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:196 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Functions to escape CSS rules in PHP
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-photo" title="Photography Stack Exchange"></div><a href="http://photo.stackexchange.com/questions/52408/can-long-heavy-lenses-deform-the-lens-mount" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:61 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Can long/heavy lenses deform the lens mount?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-travel" title="Travel Stack Exchange"></div><a href="http://travel.stackexchange.com/questions/31215/do-citizens-of-hong-kong-living-in-canada-still-need-a-visa-to-enter-russia-fo" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:273 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Do citizens of Hong Kong living in Canada - still need a visa to enter Russia for &lt;2 weeks?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-craftcms" title="Craft CMS Stack Exchange"></div><a href="http://craftcms.stackexchange.com/questions/609/direct-access-to-controller" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:563 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Direct access to controller
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-codereview" title="Code Review Stack Exchange"></div><a href="http://codereview.stackexchange.com/questions/55668/how-do-i-add-jdbc-and-queue-functionality-to-a-simple-server" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:196 }); posts_hot_network.click({ item_type:2, location:11 })">
                    how do I add JDBC and Queue functionality to a simple server?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-bicycles" title="Bicycles Stack Exchange"></div><a href="http://bicycles.stackexchange.com/questions/23307/does-it-make-you-safer-to-use-lights-during-the-day" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:126 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Does it make you safer to use lights during the day?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-rpg" title="Role-playing Games Stack Exchange"></div><a href="http://rpg.stackexchange.com/questions/41635/is-this-amulet-of-mage-armor-and-shield-legit-according-to-the-rules" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:122 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Is this Amulet of Mage Armor and Shield legit according to the rules?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-serverfault" title="Server Fault"></div><a href="http://serverfault.com/questions/608874/what-is-the-ideal-value-for-worker-processes-in-nginx-config" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:2 }); posts_hot_network.click({ item_type:2, location:11 })">
                    What is the Ideal value for Worker Processes in Nginx Config?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-physics" title="Physics Stack Exchange"></div><a href="http://physics.stackexchange.com/questions/122353/why-does-our-voice-sound-different-on-inhaling-helium" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:151 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Why does our voice sound different on inhaling helium?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-programmers" title="Programmers Stack Exchange"></div><a href="http://programmers.stackexchange.com/questions/246432/how-to-allow-innovation-in-an-agile-methodology" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:131 }); posts_hot_network.click({ item_type:2, location:11 })">
                    How to allow innovation in an Agile Methodology
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-tex" title="TeX - LaTeX Stack Exchange"></div><a href="http://tex.stackexchange.com/questions/187281/big-forward-slash-in-math" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:85 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Big forward slash in math
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-music" title="Musical Practice &amp; Performance Stack Exchange"></div><a href="http://music.stackexchange.com/questions/20626/how-to-choose-a-key-signature-for-a-song-that-modulates-often" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:240 }); posts_hot_network.click({ item_type:2, location:11 })">
                    How to choose a key signature for a song that modulates often?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-codegolf" title="Programming Puzzles &amp; Code Golf Stack Exchange"></div><a href="http://codegolf.stackexchange.com/questions/32267/play-the-bzzt-game" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:200 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Play the &quot;bzzt&quot; game
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-electronics" title="Electrical Engineering Stack Exchange"></div><a href="http://electronics.stackexchange.com/questions/117161/do-i-have-to-use-external-clock-for-atmega-isp-programming-after-changing-fuse-b" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:135 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Do I have to use external clock for ATmega ISP programming after changing fuse bits?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-physics" title="Physics Stack Exchange"></div><a href="http://physics.stackexchange.com/questions/122416/why-does-the-speed-of-the-propellant-limit-the-speed-of-a-space-ship-in-open-spa" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:151 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Why does the speed of the propellant limit the speed of a space ship in open space?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-academia" title="Academia Stack Exchange"></div><a href="http://academia.stackexchange.com/questions/24127/should-i-send-a-cease-and-desist-letter-to-researchgate" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:415 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Should I send a &quot;cease-and-desist&quot; letter to ResearchGate?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-stackoverflow" title="Stack Overflow"></div><a href="http://stackoverflow.com/questions/24485226/c-sharp-oop-composition-and-generalization-at-the-same-time" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:1 }); posts_hot_network.click({ item_type:2, location:11 })">
                    C# OOP Composition and Generalization at the same time
                </a>

            </li>
    </ul>

        <a href="#" 
           class="show-more js-show-more js-gps-track" 
           data-gps-track="posts_hot_network.click({ item_type:3, location:11 })">
            more hot questions
        </a>
</div>
		</div>
	
<div id="feed-link">
    <div id="feed-link-text">
        <a href="/feeds/question/739654" title="feed of this question and its answers">
            <span class="feed-icon"></span>question feed
        </a>
    </div>
</div>	<script>
StackExchange.ready(function(){$.get('/posts/739654/ivc/7561');});
</script>
<noscript>
    <div><img src="/posts/739654/ivc/7561" class="dno" alt="" width="0" height="0"></div>
</noscript><div style="display:none" id="prettify-lang">lang-py</div></div>



        </div>
    </div>
    <div id="footer" class="categories">
        <div class="footerwrap">
            <div id="footer-menu">
                <div class="top-footer-links">
                        <a href="/tour">tour</a>
                    <a href="/help">help</a>
                        <a href="/help/badges">badges</a>
                    <a href="http://blog.stackoverflow.com?blb=1">blog</a>
                        <a href="http://chat.stackoverflow.com">chat</a>
                    <a href="http://data.stackexchange.com">data</a>
                    <a href="http://stackexchange.com/legal">legal</a>
                    <a href="http://stackexchange.com/legal/privacy-policy">privacy policy</a>
                    <a href="http://stackexchange.com/work-here">work here</a>
                    <a href="http://stackexchange.com/mediakit">advertising info</a>

                    <a onclick='StackExchange.switchMobile("on")'>mobile</a>
                    <b><a href="/contact">contact us</a></b>
                        <b><a href="http://meta.stackoverflow.com">feedback</a></b>
                    
                </div>
                <div id="footer-sites">
                    <table>
    <tr>
            <th colspan=3>
                Technology
            </th>
            <th >
                Life / Arts
            </th>
            <th >
                Culture / Recreation
            </th>
            <th >
                Science
            </th>
            <th >
                Other
            </th>
    </tr>
    <tr>
            <td>
                <ol>
                        <li><a href="http://stackoverflow.com" title="professional and enthusiast programmers">Stack Overflow</a></li>
                        <li><a href="http://serverfault.com" title="professional system and network administrators">Server Fault</a></li>
                        <li><a href="http://superuser.com" title="computer enthusiasts and power users">Super User</a></li>
                        <li><a href="http://webapps.stackexchange.com" title="power users of web applications">Web Applications</a></li>
                        <li><a href="http://askubuntu.com" title="Ubuntu users and developers">Ask Ubuntu</a></li>
                        <li><a href="http://webmasters.stackexchange.com" title="pro webmasters">Webmasters</a></li>
                        <li><a href="http://gamedev.stackexchange.com" title="professional and independent game developers">Game Development</a></li>
                        <li><a href="http://tex.stackexchange.com" title="users of TeX, LaTeX, ConTeXt, and related typesetting systems">TeX - LaTeX</a></li>
                            </ol></td><td><ol>
                        <li><a href="http://programmers.stackexchange.com" title="professional programmers interested in conceptual questions about software development">Programmers</a></li>
                        <li><a href="http://unix.stackexchange.com" title="users of Linux, FreeBSD and other Un*x-like operating systems.">Unix &amp; Linux</a></li>
                        <li><a href="http://apple.stackexchange.com" title="power users of Apple hardware and software">Ask Different (Apple)</a></li>
                        <li><a href="http://wordpress.stackexchange.com" title="WordPress developers and administrators">WordPress Development</a></li>
                        <li><a href="http://gis.stackexchange.com" title="cartographers, geographers and GIS professionals">Geographic Information Systems</a></li>
                        <li><a href="http://electronics.stackexchange.com" title="electronics and electrical engineering professionals, students, and enthusiasts">Electrical Engineering</a></li>
                        <li><a href="http://android.stackexchange.com" title="enthusiasts and power users of the Android operating system">Android Enthusiasts</a></li>
                        <li><a href="http://security.stackexchange.com" title="Information security professionals">Information Security</a></li>
                            </ol></td><td><ol>
                        <li><a href="http://dba.stackexchange.com" title="database professionals who wish to improve their database skills and learn from others in the community">Database Administrators</a></li>
                        <li><a href="http://drupal.stackexchange.com" title="Drupal developers and administrators">Drupal Answers</a></li>
                        <li><a href="http://sharepoint.stackexchange.com" title="SharePoint enthusiasts">SharePoint</a></li>
                        <li><a href="http://ux.stackexchange.com" title="user experience researchers and experts">User Experience</a></li>
                        <li><a href="http://mathematica.stackexchange.com" title="users of Mathematica">Mathematica</a></li>
                    
                        <li>
                            <a href="http://stackexchange.com/sites#technology" class="more">
                                more (14)
                            </a>
                        </li>
                </ol>
            </td>
            <td>
                <ol>
                        <li><a href="http://photo.stackexchange.com" title="professional, enthusiast and amateur photographers">Photography</a></li>
                        <li><a href="http://scifi.stackexchange.com" title="science fiction and fantasy enthusiasts">Science Fiction &amp; Fantasy</a></li>
                        <li><a href="http://graphicdesign.stackexchange.com" title="professional graphic designers and non-designers trying to do their own graphic design">Graphic Design</a></li>
                        <li><a href="http://cooking.stackexchange.com" title="professional and amateur chefs">Seasoned Advice (cooking)</a></li>
                        <li><a href="http://diy.stackexchange.com" title="contractors and serious DIYers">Home Improvement</a></li>
                        <li><a href="http://money.stackexchange.com" title="people who want to be financially literate">Personal Finance &amp; Money</a></li>
                        <li><a href="http://academia.stackexchange.com" title="academics and those enrolled in higher education">Academia</a></li>
                    
                        <li>
                            <a href="http://stackexchange.com/sites#lifearts" class="more">
                                more (10)
                            </a>
                        </li>
                </ol>
            </td>
            <td>
                <ol>
                        <li><a href="http://english.stackexchange.com" title="linguists, etymologists, and serious English language enthusiasts">English Language &amp; Usage</a></li>
                        <li><a href="http://skeptics.stackexchange.com" title="scientific skepticism">Skeptics</a></li>
                        <li><a href="http://judaism.stackexchange.com" title="those who base their lives on Jewish law and tradition and anyone interested in learning more">Mi Yodeya (Judaism)</a></li>
                        <li><a href="http://travel.stackexchange.com" title="road warriors and seasoned travelers">Travel</a></li>
                        <li><a href="http://christianity.stackexchange.com" title="committed Christians, experts in Christianity and those interested in learning more">Christianity</a></li>
                        <li><a href="http://gaming.stackexchange.com" title="passionate videogamers on all platforms">Arqade (gaming)</a></li>
                        <li><a href="http://bicycles.stackexchange.com" title="people who build and repair bicycles, people who train cycling, or commute on bicycles">Bicycles</a></li>
                        <li><a href="http://rpg.stackexchange.com" title="gamemasters and players of tabletop, paper-and-pencil role-playing games">Role-playing Games</a></li>
                    
                        <li>
                            <a href="http://stackexchange.com/sites#culturerecreation" class="more">
                                more (21)
                            </a>
                        </li>
                </ol>
            </td>
            <td>
                <ol>
                        <li><a href="http://math.stackexchange.com" title="people studying math at any level and professionals in related fields">Mathematics</a></li>
                        <li><a href="http://stats.stackexchange.com" title="people interested in statistics, machine learning, data analysis, data mining, and data visualization">Cross Validated (stats)</a></li>
                        <li><a href="http://cstheory.stackexchange.com" title="theoretical computer scientists and researchers in related fields">Theoretical Computer Science</a></li>
                        <li><a href="http://physics.stackexchange.com" title="active researchers, academics and students of physics">Physics</a></li>
                        <li><a href="http://mathoverflow.net" title="professional mathematicians">MathOverflow</a></li>
                    
                        <li>
                            <a href="http://stackexchange.com/sites#science" class="more">
                                more (7)
                            </a>
                        </li>
                </ol>
            </td>
            <td>
                <ol>
                        <li><a href="http://stackapps.com" title="apps, scripts, and development with the Stack Exchange API">Stack Apps</a></li>
                        <li><a href="http://meta.stackexchange.com" title="meta-discussion of the Stack Exchange family of Q&amp;A websites">Meta Stack Exchange</a></li>
                        <li><a href="http://area51.stackexchange.com" title="proposing new sites in the Stack Exchange network">Area 51</a></li>
                        <li><a href="http://careers.stackoverflow.com">Stack Overflow Careers</a></li>
                    
                </ol>
            </td>
    </tr>
</table>
                </div>
            </div>

            <div id="copyright">
                site design / logo &#169; 2014 stack exchange inc; user contributions licensed under <a href="http://creativecommons.org/licenses/by-sa/3.0/" rel="license">cc by-sa 3.0</a> 
                with <a href="http://blog.stackoverflow.com/2009/06/attribution-required/" rel="license">attribution required</a>
            </div>
            <div id="svnrev">
                rev 2014.6.30.1688
            </div>
            
        </div>
    </div>
    <noscript>
        <div id="noscript-warning">Stack Overflow works best with JavaScript enabled<img src="http://pixel.quantserve.com/pixel/p-c1rF4kxgLUzNc.gif" alt="" class="dno"></div>
    </noscript>
<script>var p = "http", d = "static"; if (document.location.protocol == "https:") { p += "s"; d = "engine"; } var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = p + "://" + d + ".adzerk.net/ados.js"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script>
<script>
    var ados = ados || {};
    ados.run = ados.run || [];
    ados.run.push(function () { ados_setKeywords('python,decorator');; ados_load(); });         
</script>

    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () { (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m);
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
        ga('create', 'UA-5620270-1');        
        
        ga('set', 'dimension2', '|python|decorator|');         
        ga('send', 'pageview');
        var _qevents = _qevents || [],
            _comscore = _comscore || [];
        (function () {
            var ssl='https:'==document.location.protocol,
                s=document.getElementsByTagName('script')[0],
                qc=document.createElement('script');
            qc.async=true;
            qc.src=(ssl?'https://secure':'http://edge')+'.quantserve.com/quant.js';
            s.parentNode.insertBefore(qc, s);
            var sc=document.createElement('script');
            sc.async=true;
            sc.src=(ssl?'https://sb':'http://b') + '.scorecardresearch.com/beacon.js';
            s.parentNode.insertBefore(sc, s);
        })();
        _comscore.push({ c1: "2", c2: "17440561" });
        _qevents.push({ qacct: "p-c1rF4kxgLUzNc" });
    </script>        
    
    </body>
</html>