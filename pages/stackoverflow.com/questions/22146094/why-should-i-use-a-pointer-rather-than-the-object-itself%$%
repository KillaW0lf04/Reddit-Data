<!DOCTYPE html>
<html>
<head>
    
    <title>c++ - Why should I use a pointer rather than the object itself? - Stack Overflow</title>
    <link rel="shortcut icon" href="//cdn.sstatic.net/stackoverflow/img/favicon.ico?v=038622610830">
    <link rel="apple-touch-icon image_src" href="//cdn.sstatic.net/stackoverflow/img/apple-touch-icon.png?v=fd7230a85918">
    <link rel="search" type="application/opensearchdescription+xml" title="Stack Overflow" href="/opensearch.xml">
    <meta name="twitter:card" content="summary">
    <meta name="twitter:domain" content="stackoverflow.com"/>
    <meta name="og:type" content="website" />
    <meta name="og:image" content="http://cdn.sstatic.net/stackoverflow/img/apple-touch-icon@2.png?v=fde65a5a78c6"/>
    <meta name="og:title" content="Why should I use a pointer rather than the object itself?" />
    <meta name="og:description" content="I&#39;m coming from a Java background and have started working with objects in C++. But one thing that occurred to me is that people often use pointers to objects rather than the objects themselves, for " />
    <meta name="og:url" content="http://stackoverflow.com/questions/22146094/why-should-i-use-a-pointer-rather-than-the-object-itself"/>
    <link rel="canonical" href="http://stackoverflow.com/questions/22146094/why-should-i-use-a-pointer-rather-than-the-object-itself" />

    
    
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
    <script src="//cdn.sstatic.net/Js/stub.en.js?v=d142d951ee55"></script>
    <link rel="stylesheet" type="text/css" href="//cdn.sstatic.net/stackoverflow/all.css?v=dc5a5d7ef830">
    
    <link rel="alternate" type="application/atom+xml" title="Feed for question &#39;Why should I use a pointer rather than the object itself?&#39;" href="/feeds/question/22146094">
    <script>
        
        StackExchange.ready(function () {
            StackExchange.using("postValidation", function () {
                StackExchange.postValidation.initOnBlurAndSubmit($('#post-form'), 2, 'answer');
            });

            
            StackExchange.question.init({showAnswerHelp:true,totalCommentCount:16,shownCommentCount:5,highlightColor:'#F4A83D',backgroundColor:'#FFF',questionId:22146094});

            styleCode();

                StackExchange.realtime.subscribeToQuestion('1', '22146094');
            
                    });
    </script>


    <script>
        StackExchange.init({"locale":"en","stackAuthUrl":"https://stackauth.com","serverTime":1404248402,"networkMetaHostname":"meta.stackexchange.com","styleCode":true,"enableUserHovercards":true,"site":{"name":"Stack Overflow","description":"Q&A for professional and enthusiast programmers","isNoticesTabEnabled":true,"recaptchaPublicKey":"6LdchgIAAAAAAJwGpIzRQSOFaO0pU6s44Xt8aTwc","recaptchaAudioLang":"en","enableNewTagCreationWarning":true,"nonAsciiTags":true,"enableSocialMediaInSharePopup":true},"user":{"fkey":"8c6b727b7d57e168eb0f1d8a05eba522","isAnonymous":true}});
        StackExchange.using.setCacheBreakers({"js/prettify-full.en.js":"12ef2711e474","js/moderator.en.js":"e2c6bab58c56","js/full-anon.en.js":"a66b4586d8f3","js/full.en.js":"d43401f72f80","js/wmd.en.js":"d25c057c3f48","js/third-party/jquery.autocomplete.min.js":"e5f01e97f7c3","js/third-party/jquery.autocomplete.min.en.js":"","js/mobile.en.js":"5f0b5c72eaa8","js/help.en.js":"43b6b771d4d9","js/tageditor.en.js":"afabf8d8de91","js/tageditornew.en.js":"140e973e4037","js/inline-tag-editing.en.js":"21223186b436","js/revisions.en.js":"989c474e85a9","js/review.en.js":"c261687765b3","js/tagsuggestions.en.js":"bb4721d888d2","js/post-validation.en.js":"62fe2d3d1730","js/explore-qlist.en.js":"8b8b631bd679","js/events.en.js":"7263182fd2c2"});
        StackExchange.using("gps", function() {
             StackExchange.gps.init(true);
        });
    </script>
    
        <script>
            StackExchange.ready(function () {
                $('#nav-tour').click(function () {
                    StackExchange.using("gps", function() {
                        StackExchange.gps.track("aboutpage.click", { aboutclick_location: "headermain" }, true);
                    });
                });
            });
        </script>
</head>
<body class="question-page new-topbar">
    <noscript><div id="noscript-padding"></div></noscript>
    <div id="notify-container"></div>
    <div id="overlay-header"></div>
    <div id="custom-header"></div>
<div class="topbar">
    <div class="topbar-wrapper">
        
        <div class="js-topbar-dialog-corral">

<div class="topbar-dialog siteSwitcher-dialog dno">
    <div class="header">
        <h3><a href="//stackoverflow.com">current community</a></h3>
    </div>
    <div class="modal-content current-site-container">
        <ul class="current-site">
                <li>
                        <div class="related-links">
            <a href="http://chat.stackoverflow.com"     data-gps-track="site_switcher.click({ item_type:6 })"
>chat</a>
                    <a href="http://blog.stackoverflow.com"     data-gps-track="site_switcher.click({ item_type:7 })"
>blog</a>
            </div>




    <a href="//stackoverflow.com"
       class="current-site-link site-link js-gps-track"
       data-id="1"
       data-gps-track="
        site_switcher.click({ item_type:3 })">
        <div class="site-icon favicon favicon-stackoverflow" title="Stack Overflow"></div>
        Stack Overflow
    </a>

                </li>
                <li class="related-site">
                        <div class="L-shaped-icon-container">
        <span class="L-shaped-icon"></span>
    </div>

                    



    <a href="http://meta.stackoverflow.com"
       class="site-link js-gps-track"
       data-id="552"
       data-gps-track="
            site.switch({ target_site:552, item_type:3 }),
        site_switcher.click({ item_type:4 })">
        <div class="site-icon favicon favicon-stackoverflowmeta" title="Meta Stack Overflow"></div>
        Meta Stack Overflow
    </a>

                </li>
                            <li class="related-site">
                        <div class="L-shaped-icon-container">
        <span class="L-shaped-icon"></span>
    </div>

                    <a class="site-link"
                       href="//careers.stackoverflow.com"
                            data-gps-track="site_switcher.click({ item_type:9 })"
>
                        <div class="site-icon favicon favicon-careers" title="Stack Overflow Careers"></div>
                        Careers 2.0
                    </a>
                </li>
        </ul>
    </div>
    
    <div class="header" id="your-communities-header">
        <h3>
your communities        </h3>
            
    </div>
    <div class="modal-content" id="your-communities-section">
            
            <div class="call-to-login">
                        <a href="https://stackoverflow.com/users/signup?returnurl=http%3a%2f%2fstackoverflow.com%2fquestions%2f22146094%2fwhy-should-i-use-a-pointer-rather-than-the-object-itself" class="js-gps-track"     data-gps-track="site_switcher.click({ item_type:10 })"
>Sign up</a>
                    or
                    <a href="https://stackoverflow.com/users/login?returnurl=http%3a%2f%2fstackoverflow.com%2fquestions%2f22146094%2fwhy-should-i-use-a-pointer-rather-than-the-object-itself" class="js-gps-track"     data-gps-track="site_switcher.click({ item_type:11 })"
>log in</a>

                    to customize your list.
            </div>
    </div>
    
    <div class="header">
        <h3><a href="//stackexchange.com/sites">more stack exchange communities</a></h3>
    </div>
    <div class="modal-content">
            <div class="child-content"></div>
    </div>
</div>
        </div>

        <div class="network-items">
            
            <a href="//stackexchange.com" 
               class="topbar-icon icon-site-switcher yes-hover js-site-switcher-button js-gps-track"
               data-gps-track="site_switcher.show"
               title="A list of all 128 Stack Exchange sites">
                <span class="hidden-text">Stack Exchange</span>
            </a>
            
        </div>

        <div class="topbar-links">
            
                <div class="links-container">
                    <span class="topbar-menu-links">
                            <a href="https://stackoverflow.com/users/signup?returnurl=http%3a%2f%2fstackoverflow.com%2fquestions%2f22146094%2fwhy-should-i-use-a-pointer-rather-than-the-object-itself" class="login-link">sign up</a>
                            <a href="https://stackoverflow.com/users/login?returnurl=http%3a%2f%2fstackoverflow.com%2fquestions%2f22146094%2fwhy-should-i-use-a-pointer-rather-than-the-object-itself" class="login-link">log in</a>
                            <a href="/tour">tour</a>

                            <a href="#" class="icon-help js-help-button" title="Help Center and other resources">
        help
        <span class="triangle"></span>
    </a>
    <div class="topbar-dialog help-dialog js-help-dialog dno">
        <div class="modal-content">
            <ul>
                                    <li>
                        <a href="/tour"     class="js-gps-track" data-gps-track="help_popup.click({ item_type:1 })"
>
                            Tour
                            <span class="item-summary">
                                Start here for a quick overview of the site
                            </span>
                        </a>
                    </li>
                <li>
                    <a href="/help"     class="js-gps-track" data-gps-track="help_popup.click({ item_type:4 })"
>
                        Help Center
                        <span class="item-summary">
                            Detailed answers to any questions you might have
                        </span>
                    </a>
                </li>
                    <li>
                        <a href="//meta.stackoverflow.com"     class="js-gps-track" data-gps-track="help_popup.click({ item_type:2 })"
>
                            Meta
                            <span class="item-summary">
                                Discuss the workings and policies of this site
                            </span>
                        </a>
                    </li>
            </ul>
        </div>
    </div>

                            <a href="//careers.stackoverflow.com">careers 2.0</a>
                    </span>
                </div>

			<div class="search-container">
                <form id="search" action="/search" method="get" autocomplete="off">
                    <input name="q" type="text" placeholder="search" value="" tabindex="1" autocomplete="off" maxlength="240" />
                </form>
			</div>
            	
        </div>      
    </div> 
</div>
<script>
    StackExchange.ready(function () { StackExchange.topbar.init(); });
</script>
    <div class="container">
        <div id="header" class=headeranon>
            <br class="cbt">
            <div id="hlogo">
                <a href="/">
                    Stack Overflow
                </a>
            </div>
            <div id="hmenus">
                <div class="nav mainnavs mainnavsanon">
                    <ul>
                        <li class="youarehere"><a id="nav-questions" href="/questions">Questions</a></li>
                        <li><a id="nav-tags" href="/tags">Tags</a></li>
                        <li><a id="nav-users" href="/users">Users</a></li>
                        <li><a id="nav-badges" href="/help/badges">Badges</a></li>
                        <li><a id="nav-unanswered" href="/unanswered">Unanswered</a></li>
                    </ul>
                </div>
                <div class="nav askquestion">
                    <ul>
                        <li>
                            <a id="nav-askquestion"  href="/questions/ask">Ask Question</a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        



        <div id="content">
            

<div itemscope itemtype="http://schema.org/Article">
	<link itemprop="image" href="//cdn.sstatic.net/stackoverflow/img/apple-touch-icon.png">
			<!--googleoff: all-->

<div id="herobox-mini">
    <div id="hero-content">
        <span id="controls">
            <a href="/tour" id="tell-me-more" class="button">Take the 2-minute tour</a>
            <span id="close"><a title="click to dismiss">&times;</a></span>
        </span>
        <div id="blurb">
            Stack Overflow is a question and answer site for professional and enthusiast programmers. It&#39;s 100% free, no registration required.
        </div>        
    </div>
    <script>
        $('#tell-me-more').click(function () {
            var clickSource = $("body").attr("class") + '-mini';
            if ($("body").hasClass("questions-page")) {
                clickSource = 'questionpagemini';
            } else if ($("body").hasClass("question-page")) {
                clickSource = 'questionpagemini';
            } else if ($("body").hasClass("home-page")) {
                clickSource = 'homepagemini';
            }

            StackExchange.using("gps", function () {
                StackExchange.gps.track("aboutpage.click", { aboutclick_location: clickSource } , true);
            });
        });
        $('#herobox-mini #close').click(function () {
            StackExchange.using("gps", function () {
                StackExchange.gps.track("hero.action", { hero_action_type: "close" }, true);
            });
            $.cookie("hero", "none", { path: "/" });
            var $hero = $("#herobox-mini");
            $hero.slideUp('fast', function () { $hero.remove(); });
            return false;
        });
    </script>
</div>
			<!--googleon: all-->
			<div id="question-header">
			<h1 itemprop="name"><a href="/questions/22146094/why-should-i-use-a-pointer-rather-than-the-object-itself" class="question-hyperlink">Why should I use a pointer rather than the object itself?</a></h1>
		</div>
			<div id="mainbar">

			

<div class="question" data-questionid="22146094"  id="question">

    <script>
                var ados = ados || {};ados.run = ados.run || [];
                ados.run.push(function() { ados_add_placement(22,8277,"adzerk1853633600",4).setZone(43) ; });                    
            </script>
            <div class="everyonelovesstackoverflow" id="adzerk1853633600">
            </div>    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22146094">
    <a class="vote-up-off" title="This question shows research effort; it is useful and clear">up vote</a>
    <span class="vote-count-post ">572</span>
    <a class="vote-down-off" title="This question does not show any research effort; it is unclear or not useful">down vote</a>
    
    <a class="star-off" href="#" title="This is a favorite question (click again to undo)">favorite</a>
    <div class="favoritecount"><b>324</b></div>   

</div>

            </td>
            
<td class="postcell">
<div>
    <div class="post-text" itemprop="description">

        <p>I'm coming from a Java background and have started working with objects in C++. But one thing that occurred to me is that people often use pointers to objects rather than the objects themselves, for example this declaration:</p>

<pre><code>Object *myObject = new Object;
</code></pre>

<p>rather than:</p>

<pre><code>Object myObject;
</code></pre>

<p>Or instead of using a function, let's say <code>testFunc()</code>, like this:</p>

<pre><code>myObject.testFunc();
</code></pre>

<p>we have to write:</p>

<pre><code>myObject-&gt;testFunc();
</code></pre>

<p>But I can't figure out why should we do it this way. I would assume it has to do with efficiency and speed since we get direct access to the memory address. Am I right?</p>

    </div>
    <div class="post-taglist">
        <a href="/questions/tagged/c%2b%2b" class="post-tag" title="show questions tagged &#39;c++&#39;" rel="tag">c++</a> <a href="/questions/tagged/pointers" class="post-tag" title="show questions tagged &#39;pointers&#39;" rel="tag">pointers</a> <a href="/questions/tagged/c%2b%2b11" class="post-tag" title="show questions tagged &#39;c++11&#39;" rel="tag">c++11</a> 
    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/q/22146094" title="short permalink to this question" class="short-link" id="link-post-22146094">share</a><span class="lsep">|</span><a href="/posts/22146094/edit" class="suggest-edit-post" title="">improve this question</a></div>        
    </td>
    <td align="right" class="post-signature">
<div class="user-info user-hover">
    <div class="user-action-time">
        <a href="/posts/22146094/revisions" title="show all edits to this post">edited <span title="2014-03-05 18:58:15Z" class="relativetime">Mar 5 at 18:58</span></a>
    </div>
    <div class="user-gravatar32">
        <a href="/users/63550/peter-mortensen"><div class="gravatar-wrapper-32"><img src="http://i.stack.imgur.com/RIZKi.png?s=32&g=1" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/63550/peter-mortensen">Peter Mortensen</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">7,406</span><span title="8 gold badges"><span class="badge1"></span><span class="badgecount">8</span></span><span title="51 silver badges"><span class="badge2"></span><span class="badgecount">51</span></span><span title="82 bronze badges"><span class="badge3"></span><span class="badgecount">82</span></span>
    </div>
</div>    </td>
    <td class="post-signature owner">
        <div class="user-info ">
    <div class="user-action-time">
        asked <span title="2014-03-03 11:54:16Z" class="relativetime">Mar 3 at 11:54</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/3374738/gedringer"><div class="gravatar-wrapper-32"><img src="http://i.stack.imgur.com/7mhHF.jpg?s=32&g=1" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/3374738/gedringer">gEdringer</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">2,141</span><span title="3 gold badges"><span class="badge1"></span><span class="badgecount">3</span></span><span title="3 silver badges"><span class="badge2"></span><span class="badgecount">3</span></span><span title="11 bronze badges"><span class="badge3"></span><span class="badgecount">11</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</div>
</td>
        </tr>
                
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22146094" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="11" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-33604231" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="supernova">172</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Kudos to you for questioning this practice rather than just following it. Most of the time, pointers are over-used.</span>
                &ndash;&nbsp;
                    <a href="/users/673730/luchian-grigore"
                       title="132749 reputation"
                       class="comment-user">Luchian Grigore</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 11:56:59Z" class="relativetime-clean">Mar 3 at 11:56</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33604341" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="supernova">31</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">If you don&#39;t see a reason to use pointers, don&#39;t. Prefer objects. Prefer objects before unique_ptr before shared_ptr before raw pointers.</span>
                &ndash;&nbsp;
                    <a href="/users/985296/stefan"
                       title="4740 reputation"
                       class="comment-user">stefan</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 12:00:04Z" class="relativetime-clean">Mar 3 at 12:00</span></span>
                    <span class="edited-yes" title="this comment was edited 1 time"></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33604377" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="supernova">54</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">note: in java, everything(except basic types) is a pointer. so you rather should ask the opposite: why do I need simple objects?</span>
                &ndash;&nbsp;
                    <a href="/users/650405/karoly-horvath"
                       title="44088 reputation"
                       class="comment-user">Karoly Horvath</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 12:01:01Z" class="relativetime-clean">Mar 3 at 12:01</span></span>
                    <span class="edited-yes" title="this comment was edited 2 times"></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33604538" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="supernova">53</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Note that, in Java, pointers are hidden by syntax. In C++, the difference between a pointer and a non-pointer is made explicit in code. Java uses pointers everywhere.</span>
                &ndash;&nbsp;
                    <a href="/users/1914276/daniel-mart%c3%adn"
                       title="3209 reputation"
                       class="comment-user">Daniel Mart&#237;n</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 12:04:53Z" class="relativetime-clean">Mar 3 at 12:04</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33628717" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="supernova">74</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Close as <i>too broad</i>? Seriously? Please people, note that this Java++ way of programming is <b>very common and one of the most important problems on the C++ community</b>. It should be treated seriously.</span>
                &ndash;&nbsp;
                    <a href="/users/1609356/manu343726"
                       title="7227 reputation"
                       class="comment-user">Manu343726</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 22:53:10Z" class="relativetime-clean">Mar 3 at 22:53</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22146094" data-rep=50 data-anon=true
			   class="comments-link " 
			   title="Use comments to ask for more information or suggest improvements. Avoid answering questions in comments." 
				>show <b>11</b> more comments</a>
    </td>
</tr>        </table>
</div>


			<div id="answers">

				<a name="tab-top"></a>
				<div id="answers-header">
					<div class="subheader answers-subheader">
						<h2>
								15 Answers
						</h2>
						<div>
							<div id="tabs">
        <a href="/questions/22146094/why-should-i-use-a-pointer-rather-than-the-object-itself?answertab=active#tab-top" title="Answers with the latest activity first">active</a>
        <a href="/questions/22146094/why-should-i-use-a-pointer-rather-than-the-object-itself?answertab=oldest#tab-top" title="Answers in the order they were provided">oldest</a>
        <a class="youarehere" href="/questions/22146094/why-should-i-use-a-pointer-rather-than-the-object-itself?answertab=votes#tab-top" title="Answers with the highest score first">votes</a>
</div>
						</div>
					</div>    
				</div>    




  
<a name="22146244"></a>
<div id="answer-22146244" class="answer accepted-answer" data-answerid="22146244" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22146244">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">634</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


        <span class="vote-accepted-on load-accepted-answer-date" title="loading when this answer was accepted...">accepted</span>
</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>It's very unfortunate that you see dynamic allocation so often. That just shows how many bad C++ programmers there are.</p>

<p>In a sense, you have two questions bundled up into one. The first is when should we use dynamic allocation (using <code>new</code>)? The second is when should we use pointers?</p>

<p>The important take-home message is that you should <strong>always use the appropriate tool for the job</strong>. In almost all situations, there is something more appropriate and safer than performing manual dynamic allocation and/or using raw pointers.</p>

<h2>Dynamic allocation</h2>

<p>In your question, you've demonstrated two ways of creating an object. The main difference is the storage duration of the object. When doing <code>Object myObject;</code> within a block, the object is created with automatic storage duration, which means it will be destroyed automatically when it goes out of scope. When you do <code>new Object()</code>, the object has dynamic storage duration, which means it stays alive until you explicitly <code>delete</code> it. You should only use dynamic storage duration when you need it. 
That is, <strong>you should <em>always</em> prefer creating objects with automatic storage duration when you can</strong>.</p>

<p>The main two situations in which you might require dynamic allocation:</p>

<ol>
<li><strong>You need the object to outlive the current scope</strong> - that specific object at that specific memory location, not a copy of it. If you're okay with copying/moving the object (most of the time you should be), you should prefer an automatic object.</li>
<li><strong>You need to allocate a lot of memory</strong>, which may easily fill up the stack. It would be nice if we didn't have to concern ourselves with this (most of the time you shouldn't have to), as it's really outside the purview of C++, but unfortunately we have to deal with the reality of the systems we're developing for.</li>
</ol>

<p>When you do absolutely require dynamic allocation, you should encapsulate it in a smart pointer or some other type that performs <a href="http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization">RAII</a> (like the standard containers). Smart pointers provide ownership semantics of dynamically allocated objects. Take a look at <a href="http://en.cppreference.com/w/cpp/memory/unique_ptr"><code>std::unique_ptr</code></a> and <a href="http://en.cppreference.com/w/cpp/memory/shared_ptr"><code>std::shared_ptr</code></a>, for example. If you use them appropriately, you can almost entirely avoid performing your own memory management (see the <a href="http://flamingdangerzone.com/cxx11/2012/08/15/rule-of-zero.html">Rule of Zero</a>).</p>

<h2>Pointers</h2>

<p>However, there are other more general uses for raw pointers beyond dynamic allocation, but most have alternatives that you should prefer. As before, <strong>always prefer the alternatives unless you really need pointers</strong>.</p>

<ol>
<li><p><strong>You need reference semantics</strong>. Sometimes you want to pass an object using a pointer (regardless of how it was allocated) because you want the function to which you're passing it to have access that that specific object (not a copy of it). However, in most situations, you should prefer reference types to pointers, because this is specifically what they're designed for. Note this is not necessarily about extending the lifetime of the object beyond the current scope, as in situation 1 above. As before, if you're okay with passing a copy of the object, you don't need reference semantics.</p></li>
<li><p><strong>You need polymorphism</strong>. You can only call functions polymorphically (that is, according to the dynamic type of an object) through a pointer or reference to the object. If that's the behaviour you need, then you need to use pointers or references. Again, references should be preferred.</p></li>
<li><p><strong>You want to represent that an object is optional</strong> by allowing a <code>nullptr</code> to be passed when the object is being omitted. If it's an argument, you should prefer to use default arguments or function overloads. Otherwise, you should prefer use a type that encapsulates this behaviour, such as <code>boost::optional</code> (or perhaps soon, <code>std::optional</code> - <strong>Edit</strong> <code>std::optional</code> is voted out of the current C++14 draft n3797).</p></li>
<li><p><strong>You want to decouple compilation units to improve compilation time</strong>. The useful property of a pointer is that you only require a forward declaration of the pointed-to type (to actually use the object, you'll need a definition). This allows you to decouple parts of your compilation process, which may significantly improve compilation time. See the <a href="http://en.wikipedia.org/wiki/Opaque_pointer">Pimpl idiom</a>.</p></li>
<li><p><strong>You need to interface with a C library</strong> or a C-style library. At this point, you're forced to use raw pointers. The best thing you can do is make sure you only let your raw pointers loose at the last possible moment. You can get a raw pointer from a smart pointer, for example, by using its <code>get</code> member function. If a library performs some allocation for you which it expects you to deallocate via a handle, you can often wrap the handle up in a smart pointer with a custom deleter that will deallocate the object appropriately.</p></li>
</ol>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22146244" title="short permalink to this answer" class="short-link" id="link-post-22146244">share</a><span class="lsep">|</span><a href="/posts/22146244/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info ">
    <div class="user-action-time">
        <a href="/posts/22146244/revisions" title="show all edits to this post">edited <span title="2014-03-14 16:57:36Z" class="relativetime">Mar 14 at 16:57</span></a>
    </div>
    <div class="user-gravatar32">
        
    </div>
    <div class="user-details">
        <br>
        
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info">
    <div class="user-details">
        <span class="community-wiki" title="This post is community owned as of Mar 14 at 16:57. Votes do not generate reputation, and it can be edited by users with 100 rep">
            community wiki
        </span>
    </div><br>
    <div class="user-details">
        <a id="history-22146244" href="/posts/22146244/revisions" title="show revision history for this post">
        12 revs, 2 users 98%<br><a href="/users/150634">Joseph Mansfield</a>
        </a>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22146244" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="25" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-33604479" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="hot">19</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">&quot;You need the object to outlive the current scope.&quot; -- An additional note about this: there are cases where it seems like you need the object to outlive the current scope, but you really don&#39;t. If you put your object inside a vector, for example, the object will be copied (or moved) into the vector, and the original object is safe to destroy when its scope ends.</span>
                &ndash;&nbsp;
                    <a href="/users/743382/hvd"
                       title="34826 reputation"
                       class="comment-user">hvd</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 12:03:38Z" class="relativetime-clean">Mar 3 at 12:03</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33604763" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">10</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Remember that s/copy/move/ in many places now. Returning an object definitely does not imply a move. You should also note that accessing an object through a pointer is orthogonal to how it was created.</span>
                &ndash;&nbsp;
                    <a href="/users/298661/puppy"
                       title="89872 reputation"
                       class="comment-user">Puppy</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 12:10:13Z" class="relativetime-clean">Mar 3 at 12:10</span></span>
                    <span class="edited-yes" title="this comment was edited 2 times"></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33628929" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">6</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">I miss an explicit reference to RAII on this answer. C++ is all (almost all) about resource management, and RAII is the way to do it on C++ (And the main problem which raw pointers generate: Breaking RAII)</span>
                &ndash;&nbsp;
                    <a href="/users/1609356/manu343726"
                       title="7227 reputation"
                       class="comment-user">Manu343726</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 23:01:05Z" class="relativetime-clean">Mar 3 at 23:01</span></span>
                    <span class="edited-yes" title="this comment was edited 2 times"></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33704662" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">7</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Smart pointers existed before C++11, e.g. boost::shared_ptr and boost::scoped_ptr. Other projects have their own equivalent. You can&#39;t get move semantics, and std::auto_ptr&#39;s assign is flawed, so C++11 improves things, but the advice is still good.   (And a sad nitpick, it&#39;s not enough to have access to <i>a</i> C++11 compiler, it&#39;s necessary that all the compilers you might possibly want your code to work with support C++11. Yes, Oracle Solaris Studio, I&#39;m looking at you.)</span>
                &ndash;&nbsp;
                    <a href="/users/729705/armb"
                       title="111 reputation"
                       class="comment-user">armb</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-05 15:29:15Z" class="relativetime-clean">Mar 5 at 15:29</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33852335" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">5</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">@MDMoore313 You can write <code>Object myObject(param1, etc...)</code></span>
                &ndash;&nbsp;
                    <a href="/users/828193/user000001"
                       title="11024 reputation"
                       class="comment-user">user000001</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-09 14:41:44Z" class="relativetime-clean">Mar 9 at 14:41</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22146244" data-rep=50 data-anon=true
			   class="comments-link " 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>show <b>25</b> more comments</a>
    </td>
</tr>    </table>
</div>
<script>
                var ados = ados || {};ados.run = ados.run || [];
                ados.run.push(function() { ados_add_placement(22,8277,"adzerk686174272",4).setZone(44) ; });                    
            </script>
            <div class="everyonelovesstackoverflow" id="adzerk686174272">
            </div>
  
<a name="22146344"></a>
<div id="answer-22146344" class="answer" data-answerid="22146344" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22146344">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">78</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>There are many use cases for pointers. </p>

<p><strong>Polymorphic behavior</strong>. For polymorphic types, pointers (or references) are used to avoid slicing:</p>

<pre><code>class Base { ... };
class Derived : public Base { ... };

void fun(Base b) { ... }
void gun(Base* b) { ... }
void hun(Base&amp; b) { ... }

Derived d;
fun(d);    // oops, all Derived parts silently "sliced" off
gun(&amp;d);   // OK, a Derived object IS-A Base object
hun(d);    // also OK, reference also doesn't slice
</code></pre>

<p><strong>Reference semantics and avoiding copying</strong>. For non-polymorphic types, a pointer (or a reference) will avoid copying a potentially expensive object</p>

<pre><code>Base b;
fun(b);  // copies b, potentially expensive 
gun(&amp;b); // takes a pointer to b, no copying
hun(b);  // regular syntax, behaves as a pointer
</code></pre>

<p>Note that C++11 has move semantics that can avoid many copies of expensive objects into function argument and as return values. But using a pointer will definitely avoid those and will allow multiple pointers on the same object (whereas an object can only be moved from once).</p>

<p><strong>Resource acquisition</strong>. Creating a pointer to a resource using the <code>new</code> operator is an <strong>anti-pattern</strong> in modern C++. Use a special resource class (one of the Standard containers) or a <strong>smart pointer</strong> (<code>std::unique_ptr&lt;&gt;</code> or <code>std::shared_ptr&lt;&gt;</code>). Consider:   </p>

<pre><code>{
    auto b = new Base;
    ...       // oops, if an exception is thrown, destructor not called!
    delete b;
}
</code></pre>

<p>vs. </p>

<pre><code>{
    auto b = std::make_unique&lt;Base&gt;();
    ...       // OK, now exception safe
}
</code></pre>

<p>A raw pointer should only be used a "view" and not in any way involved in ownership, be it through direct creation or implicitly through return values. See also <a href="http://stackoverflow.com/questions/8706192/which-kind-of-pointer-do-i-use-when?lq=1"><strong>this Q&amp;A from the C++ FAQ</strong></a>.</p>

<p><strong>More fine-grained life-time control</strong> Everytime a shared pointer is being copied (e.g. as a function argument) the resource it points to is being kept alive. Regular objects (not created by <code>new</code>, either directly by you or inside a resource class) are destroyed when going out of scope.</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22146344" title="short permalink to this answer" class="short-link" id="link-post-22146344">share</a><span class="lsep">|</span><a href="/posts/22146344/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info ">
    <div class="user-action-time">
        <a href="/posts/22146344/revisions" title="show all edits to this post">edited <span title="2014-03-03 12:32:41Z" class="relativetime">Mar 3 at 12:32</span></a>
    </div>
    <div class="user-gravatar32">
        
    </div>
    <div class="user-details">
        <br>
        
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info user-hover">
    <div class="user-action-time">
        answered <span title="2014-03-03 12:06:20Z" class="relativetime">Mar 3 at 12:06</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/819272/templaterex"><div class="gravatar-wrapper-32"><img src="http://i.stack.imgur.com/o7w9X.png?s=32&g=1" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/819272/templaterex">TemplateRex</a><br>
        <span class="reputation-score" title="reputation score 22975" dir="ltr">23k</span><span title="7 gold badges"><span class="badge1"></span><span class="badgecount">7</span></span><span title="37 silver badges"><span class="badge2"></span><span class="badgecount">37</span></span><span title="96 bronze badges"><span class="badge3"></span><span class="badgecount">96</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22146344" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="4" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-33605508" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">10</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy"><i>&quot;Creating a pointer to a resource using the new operator is an anti-pattern&quot;</i> I think you could even enhance that to <i>having a raw pointer own something is an anti-pattern</i>. Not only the creation, but passing raw pointers as arguments or return values implying ownership transfer IMHO is deprecated since <code>unique_ptr</code>/move semantics</span>
                &ndash;&nbsp;
                    <a href="/users/420683/dyp"
                       title="16519 reputation"
                       class="comment-user">dyp</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 12:29:12Z" class="relativetime-clean">Mar 3 at 12:29</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33605658" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">@dyp tnx, updated and reference to the C++ FAQ Q&amp;A on this topic.</span>
                &ndash;&nbsp;
                    <a href="/users/819272/templaterex"
                       title="22975 reputation"
                       class="comment-user">TemplateRex</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 12:33:03Z" class="relativetime-clean">Mar 3 at 12:33</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33607758" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">1</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Using smart pointers everywhere is an anti-pattern.  There are a few special cases where it is applicable, but most of the time, the same reason which argue for dynamic allocation (arbitrary lifetime) argue against any of the usual smart pointers as well.</span>
                &ndash;&nbsp;
                    <a href="/users/649665/james-kanze"
                       title="90077 reputation"
                       class="comment-user">James Kanze</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 13:26:09Z" class="relativetime-clean">Mar 3 at 13:26</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33607840" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">1</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">@JamesKanze I didn&#39;t mean to imply that smart pointers should be used everywhere, just for ownership, and also that raw pointers should not be used for ownership, but only for views.</span>
                &ndash;&nbsp;
                    <a href="/users/819272/templaterex"
                       title="22975 reputation"
                       class="comment-user">TemplateRex</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 13:28:28Z" class="relativetime-clean">Mar 3 at 13:28</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33614197" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">1</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">@TemplateRex That seems slightly silly given that <code>hun(b)</code> also requires knowledge of the signature unless you&#39;re fine with not knowing that you supplied the wrong type until compilation. While the reference issue usually won&#39;t get caught at compile time and would take more effort to debug, if you&#39;re checking the signature to make sure the arguments are right you&#39;ll also be able to see if any of the arguments are references so the reference bit becomes something of a non-problem (especially when using IDEs or text editors that show the signature of a selected functions). Also, <code>const&amp;</code>.</span>
                &ndash;&nbsp;
                    <a href="/users/138772/jab"
                       title="10932 reputation"
                       class="comment-user">JAB</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 16:04:00Z" class="relativetime-clean">Mar 3 at 16:04</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22146344" data-rep=50 data-anon=true
			   class="comments-link " 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>show <b>4</b> more comments</a>
    </td>
</tr>    </table>
</div>

  
<a name="22149438"></a>
<div id="answer-22149438" class="answer" data-answerid="22149438" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22149438">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">48</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>Another good reason to use pointers would be for <a href="http://en.wikipedia.org/wiki/Forward_declaration">forward declarations</a>. In a large enough project they can really speed up compile time. </p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22149438" title="short permalink to this answer" class="short-link" id="link-post-22149438">share</a><span class="lsep">|</span><a href="/posts/22149438/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info user-hover">
    <div class="user-action-time">
        <a href="/posts/22149438/revisions" title="show all edits to this post">edited <span title="2014-03-05 05:38:46Z" class="relativetime">Mar 5 at 5:38</span></a>
    </div>
    <div class="user-gravatar32">
        <a href="/users/23897/michael-petrotta"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/ec23f7cf0263a623bea6aca36a77a58b?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/23897/michael-petrotta">Michael Petrotta</a><br>
        <span class="reputation-score" title="reputation score 35163" dir="ltr">35.2k</span><span title="9 gold badges"><span class="badge1"></span><span class="badgecount">9</span></span><span title="80 silver badges"><span class="badge2"></span><span class="badgecount">80</span></span><span title="130 bronze badges"><span class="badge3"></span><span class="badgecount">130</span></span>
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2014-03-03 14:34:32Z" class="relativetime">Mar 3 at 14:34</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/2980846/burnt-toast"><div><img src="https://www.gravatar.com/avatar/7953fd4d452699919cf50b8a703efdaf?s=32&d=identicon&r=PG&f=1" alt="" width="32" height="32"></div></a>
    </div>
    <div class="user-details">
        <a href="/users/2980846/burnt-toast">Burnt Toast</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">581</span><span title="1 silver badge"><span class="badge2"></span><span class="badgecount">1</span></span><span title="2 bronze badges"><span class="badge3"></span><span class="badgecount">2</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22149438" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-33672309" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">6</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">this is really adding to the mix of useful info, so glad you made it an answer!</span>
                &ndash;&nbsp;
                    <a href="/users/819272/templaterex"
                       title="22975 reputation"
                       class="comment-user">TemplateRex</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-04 21:39:39Z" class="relativetime-clean">Mar 4 at 21:39</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33720809" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">References work for this too.</span>
                &ndash;&nbsp;
                    <a href="/users/13422/zan-lynx"
                       title="22935 reputation"
                       class="comment-user">Zan Lynx</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-05 22:18:55Z" class="relativetime-clean">Mar 5 at 22:18</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-34059614" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">1</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">std::shared_ptr&lt;T&gt; also works with forward declarations of T. (std::unique_ptr&lt;T&gt; <b>doesn&#39;t</b>)</span>
                &ndash;&nbsp;
                    <a href="/users/145434/berkus"
                       title="817 reputation"
                       class="comment-user">berkus</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-14 10:23:53Z" class="relativetime-clean">Mar 14 at 10:23</span></span>
                    <span class="edited-yes" title="this comment was edited 2 times"></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22149438" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="22244097"></a>
<div id="answer-22244097" class="answer" data-answerid="22244097" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22244097">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">29</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <h2>Preface</h2>

<p>Java is nothing like C++, contrary to hype. The Java hype machine would like you to believe that because Java has C++ like syntax, that the languages are similar. Nothing can be further from the truth. This misinformation is part of the reason why Java programmers go to C++ and use Java-like syntax without understanding the implications of their code.</p>

<h2>Onwards we go</h2>

<blockquote>
  <p>But I can't figure out why should we do it this way. I would assume it
  has to do with efficiency and speed since we get direct access to the
  memory address. Am I right?</p>
</blockquote>

<p>To the contrary, actually. <a href="http://stackoverflow.com/questions/2264969/why-memory-allocation-on-heap-is-much-slower-than-on-stack">The heap is much slower</a> than the stack, because the stack is very simple compared to the heap. Automatic storage variables (aka stack variables) have their destructors called once they go out of scope. For example:</p>

<pre><code>{
    std::string s;
}
// s is destroyed here
</code></pre>

<p>On the other hand, if you use a pointer dynamically allocated, its destructor must be called manually. <code>delete</code> calls this destructor for you.</p>

<pre><code>{
    std::string* s = new std::string;
}
delete s; // destructor called
</code></pre>

<p>This has nothing to do with the <code>new</code> syntax prevalent in C# and Java. They are used for completely different purposes. </p>

<h2>Benefits of dynamic allocation</h2>

<blockquote>
  <p><strong>1. You don't have to know the size of the array in advance</strong></p>
</blockquote>

<p>One of the first problems many C++ programmers run into is that when they are accepting arbitrary input from users, you can only allocate a fixed size for a stack variable. You cannot change the size of arrays either. For example:</p>

<pre><code>char buffer[100];
std::cin &gt;&gt; buffer;
// bad input = buffer overflow
</code></pre>

<p>Of course if you used an <code>std::string</code> instead, <code>std::string</code> internally resizes itself so that shouldn't be a problem. But essentially the solution to this problem is dynamic allocation. You can allocate dynamic memory based on input of the user, for example:</p>

<pre><code>int * pointer;
std::cout &lt;&lt; "How many items do you need?";
std::cin &gt;&gt; n;
pointer = new int[n];
</code></pre>

<blockquote>
  <p><b>Side note</b>: One mistake many beginners make is the usage of
  variable length arrays. This is a GNU extension and also one in Clang
  because they mirror many of GCC's extensions. So the following 
  <code>int arr[n]</code> should not be relied on.</p>
</blockquote>

<p>Because the heap is much bigger than the stack, one can arbitrary allocate/reallocate as much memory as he/she needs, whereas the stack has a limitation. </p>

<blockquote>
  <p><strong>2. Arrays are not pointers</strong></p>
</blockquote>

<p>How is this a benefit you ask? The answer will become clear once you understand the confusion/myth behind arrays and pointers. It is commonly assumed that they are the same, but they are not. This myth comes from the fact that pointers can be subscripted just like arrays and because arrays decay to pointers at the top level in a function declaration. However, once an array decays to a pointer, the pointer loses its <code>sizeof</code> information. So <code>sizeof(pointer)</code> will give the size of the pointer in bytes, which is usually 8 bytes on a 64-bit system. </p>

<p>You cannot assign to arrays, only initialize them. For example:</p>

<pre><code>int arr[5] = {1, 2, 3, 4, 5}; // initialization 
int arr[] = {1, 2, 3, 4, 5}; // The standard dictates that the size of the array
                             // be given by the amount of members in the initializer  
arr = { 1, 2, 3, 4, 5 }; // ERROR
</code></pre>

<p>On the other hand, you can do whatever you want with pointers. Unfortunately because the distinction between pointers and arrays are hand-waved in Java and C#, beginners don't understand the difference. </p>

<blockquote>
  <p><strong>3. Polymorphism</strong></p>
</blockquote>

<p>Java and C# have facilities that allow you to treat objects as another, for example using the <code>as</code> keyword. So if somebody wanted to treat an <code>Entity</code> object as a <code>Player</code> object, one could do <code>Player player = Entity as Player;</code> This is very useful if you intend to call functions on a homogeneous container that should only apply to a specific type. The functionality can be achieved in a similar fashion below:</p>

<pre><code>std::vector&lt;Base*&gt; vector;
vector.push_back(&amp;square);
vector.push_back(&amp;triangle);
for (auto&amp; e : vector)
{
     auto test = dynamic_cast&lt;Triangle*&gt;(e); // I only care about triangles
     if (!test) // not a triangle
        e.GenericFunction();
     else
        e.TriangleOnlyMagic();
}
</code></pre>

<p>So say if only Triangles had a Rotate function, it would be a compiler error if you tried to call it on all objects of the class. Using <code>dynamic_cast</code>, you can simulate the <code>as</code> keyword. To be clear, if a cast fails, it returns an invalid pointer. So <code>!test</code> is essentially a shorthand for checking if <code>test</code> is NULL or an invalid pointer, which means the cast failed.</p>

<h2>Benefits of automatic variables</h2>

<p>After seeing all the great things dynamic allocation can do, you're probably wondering why wouldn't anyone NOT use dynamic allocation all the time? I already told you one reason, the heap is slow. And if you don't need all that memory, you shouldn't abuse it. So here's some disadvantages in no particular order:</p>

<ul>
<li><p>It is error prone. Manual memory allocation is dangerous and you are prone to leaks. If you are not proficient at using the debugger or <code>valgrind</code> (a memory leak tool), you may pull your hair out of your head. Luckily RAII idioms and smart pointers alleviate this a bit, but you must be familiar with practices such as The Rule Of Three and The Rule Of Five. It is a lot of information to take in, and beginners who either don't know or don't care will fall into this trap.</p></li>
<li><p>It is not necessary. Unlike Java and C# where it is idiomatic to use the <code>new</code> keyword everywhere, in C++, you should only use it if you need to. The common phrase goes, everything looks like a nail if you have a hammer. Whereas beginners who start with C++ are scared of pointers and learn to use stack variables by habit, Java and C# programmers <b>start</b> by using pointers without understanding it! That is literally stepping off on the wrong foot. You must abandon everything you know because syntax is one thing, learning the language is another.</p></li>
</ul>

<blockquote>
  <p><b>1. (N)RVO - Aka, (Named) Return Value Optimization</b></p>
</blockquote>

<p>One optimization many compilers make are things called <b>elision</b> and <b>return value optimization</b>. These things can obviate unnecessary copys which is useful for objects that are very large, such as a vector containing many elements. Normally the common practice is to use pointers to <b>transfer ownership</b> rather than copying the large objects to <b>move</b> them around. This has lead to the inception of <b>move semantics</b> and <b>smart pointers</b>.</p>

<p>If you are using pointers, (N)RVO does <b>NOT</b> occur. It is more beneficial and less error-prone to take advantage of (N)RVO rather than returning or passing pointers if you are worried about optimization. Error leaks can happen if the caller of a function is responsible for <code>delete</code>ing a dynamically allocated object and such. It can be difficult to track the ownership of an object if pointers are being passed around like a hot potato. Just use stack variables because it is simpler and better.</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22244097" title="short permalink to this answer" class="short-link" id="link-post-22244097">share</a><span class="lsep">|</span><a href="/posts/22244097/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2014-03-07 07:30:18Z" class="relativetime">Mar 7 at 7:30</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/3391320/user3391320"><div><img src="https://www.gravatar.com/avatar/b6ce38939f2d5de85bfaa716971d462d?s=32&d=identicon&r=PG&f=1" alt="" width="32" height="32"></div></a>
    </div>
    <div class="user-details">
        <a href="/users/3391320/user3391320">user3391320</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">338</span><span title="1 silver badge"><span class="badge2"></span><span class="badgecount">1</span></span><span title="7 bronze badges"><span class="badge3"></span><span class="badgecount">7</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22244097" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-34060047" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">&quot;So !test is essentially a shorthand for checking if test is NULL or an invalid pointer, which means the cast failed.&quot; I think this sentence must be rewritten for clarity.</span>
                &ndash;&nbsp;
                    <a href="/users/145434/berkus"
                       title="817 reputation"
                       class="comment-user">berkus</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-14 10:34:25Z" class="relativetime-clean">Mar 14 at 10:34</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-34067721" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">1</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">&quot;The Java hype machine would like you to believe&quot; -- maybe in 1997, but this is now anachronistic, there&#39;s no longer motivation to compare Java to C++ in 2014.</span>
                &ndash;&nbsp;
                    <a href="/users/61298/matt-r"
                       title="1716 reputation"
                       class="comment-user">Matt R</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-14 13:52:27Z" class="relativetime-clean">Mar 14 at 13:52</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-37893049" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">1</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Old question, but in the code segment <code>{     std::string* s = new std::string; } delete s; &#47;&#47; destructor called</code> ....surely this <code>delete</code> won&#39;t work because the compiler won&#39;t know what <code>s</code> is anymore?</span>
                &ndash;&nbsp;
                    <a href="/users/2004280/johnny-lyco"
                       title="72 reputation"
                       class="comment-user">Johnny Lyco</a>
                <span class="comment-date" dir="ltr"><span title="2014-06-29 22:55:17Z" class="relativetime-clean">yesterday</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22244097" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="22233179"></a>
<div id="answer-22233179" class="answer" data-answerid="22233179" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22233179">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">25</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>There are many excellent answers to this question, but I feel a part of the "soul" of your question is not answered.</p>

<p>Let's examine these two statements:</p>

<h3>Java:</h3>

<pre><code>Object object1 = new Object(); //A new object is allocated by Java
Object object2 = new Object(); //Another new object is allocated by Java

object1 = object2; 
//object1 now points to the object originally allocated for object2
//object2 is now "dead", and will be reclaimed by the Garbage Collector.
//If either is changed, the change will be reflected to the other
</code></pre>

<p>The closest equivalent to this, is:</p>

<h3>C++:</h3>

<pre><code>Object * object1 = new Object(); //A new object is allocated on the heap
Object * object2 = new Object(); //Another new object is allocated on the heap
delete object1;
//Since C++ does not have a garbage collector, if we don't do that we get a "memory leak", i.e. a piece of claimed memory that the app cannot use and we cannot reclaim it.

object1 = object2; //Same as Java, object1 points to object2.
</code></pre>

<p>Let's see the alternative C++ way:</p>

<pre><code>Object object1; //A new object is allocated on the STACK
Object object2; //Another new object is allocated on the STACK
object1 = object2;//!!!! This is different! The CONTENTS of object2 are COPIED onto object1
//But, the two objects are still different. Change one, the other remains unchanged.
//Also, the objects get automatically destroyed once the function returns...
</code></pre>

<p>The best way to think of it is that -- more or less -- Java (implicitly) handles pointers to objects, while C++ may handle either pointers to objects, or the objects themselves.
There are exceptions to this -- for example, if you declare Java "primitive" types, they are actual values that are copied, and not pointers.
So,</p>

<p>Java:</p>

<pre><code>int object1; //An integer is allocated on the stack.
int object2; //Another integer is allocated on the stack.
object1 = object2; //The value of object2 is copied to object1.
</code></pre>

<p>That said, using pointers is NOT necessarily the correct way to handle things. Neither is it necessarily wrong. Other answers have covered that satisfactorily though. The idea is though that in C++ you have much more control on the lifetime of the objects, and on where they will live.</p>

<p>Take home point -- the <code>Object * object = new Object()</code> construct is actually what is closest to typical Java (or C# for that matter) semantics.</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22233179" title="short permalink to this answer" class="short-link" id="link-post-22233179">share</a><span class="lsep">|</span><a href="/posts/22233179/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info user-hover">
    <div class="user-action-time">
        <a href="/posts/22233179/revisions" title="show all edits to this post">edited <span title="2014-04-03 21:16:44Z" class="relativetime">Apr 3 at 21:16</span></a>
    </div>
    <div class="user-gravatar32">
        <a href="/users/63550/peter-mortensen"><div class="gravatar-wrapper-32"><img src="http://i.stack.imgur.com/RIZKi.png?s=32&g=1" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/63550/peter-mortensen">Peter Mortensen</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">7,406</span><span title="8 gold badges"><span class="badge1"></span><span class="badgecount">8</span></span><span title="51 silver badges"><span class="badge2"></span><span class="badgecount">51</span></span><span title="82 bronze badges"><span class="badge3"></span><span class="badgecount">82</span></span>
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2014-03-06 18:40:44Z" class="relativetime">Mar 6 at 18:40</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/1406393/gerasimos-r"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/6819fac41db50ea51d89e3d5fb89ad87?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/1406393/gerasimos-r">Gerasimos R</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">468</span><span title="3 silver badges"><span class="badge2"></span><span class="badgecount">3</span></span><span title="7 bronze badges"><span class="badge3"></span><span class="badgecount">7</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22233179" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-33874087" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">2</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy"><code>Object2 is now &quot;dead&quot;</code>: I think you mean <code>myObject1</code> or more precisely <code>the object pointed to by myObject1</code>.</span>
                &ndash;&nbsp;
                    <a href="/users/695591/cl%c3%a9ment"
                       title="1359 reputation"
                       class="comment-user">Cl&#233;ment</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-10 08:51:07Z" class="relativetime-clean">Mar 10 at 8:51</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22233179" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="22146614"></a>
<div id="answer-22146614" class="answer" data-answerid="22146614" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22146614">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">13</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <blockquote>
  <p>But I can't figure out why should we use it like this?</p>
</blockquote>

<p>I will compare how it works inside function body, if you use:</p>

<pre><code>Object myObject;
</code></pre>

<p>inside function, your <code>myObject</code> will get destroyed once this function returns. So this is usefull if you dont need your object outside your function. This object will be put on current thread stack.</p>

<p>If you write inside function body:</p>

<pre><code> Object *myObject = new Object;
</code></pre>

<p>then Object class instance pointed by <code>myObject</code> will not get destroyed once function ends, and allocation is on heap.</p>

<p>Now if you are java programmer, then the second example is closer to how object allocation works under java. This line: <code>Object *myObject = new Object;</code> is equivalent to java: <code>Object myObject = new Object();</code>. The difference is that under java myObject will get garbage collected, while under c++ it will not get freed, you must somewhere explicitly call `delete myObject;' otherwise you will introduce memory leaks.</p>

<p>Since c++11 you can use safe ways of dynamic allocations: <code>new Object</code>, by storing values in shared_ptr/unique_ptr.</p>

<pre><code>std::shared_ptr&lt;std::string&gt; safe_str = make_shared&lt;std::string&gt;("make_shared");

// since c++14
std::unique_ptr&lt;std::string&gt; safe_str = make_unique&lt;std::string&gt;("make_shared"); 
</code></pre>

<p>also, objects are very often stored in containers, like map-s or vector-s, they will automatically manage lifetime of your objects.</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22146614" title="short permalink to this answer" class="short-link" id="link-post-22146614">share</a><span class="lsep">|</span><a href="/posts/22146614/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info ">
    <div class="user-action-time">
        <a href="/posts/22146614/revisions" title="show all edits to this post">edited <span title="2014-03-03 16:02:58Z" class="relativetime">Mar 3 at 16:02</span></a>
    </div>
    <div class="user-gravatar32">
        
    </div>
    <div class="user-details">
        <br>
        
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2014-03-03 12:19:19Z" class="relativetime">Mar 3 at 12:19</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/471160/marcin-j"><div class="gravatar-wrapper-32"><img src="http://i.stack.imgur.com/6EOra.jpg?s=32&g=1" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/471160/marcin-j">marcin_j</a><br>
        <span class="reputation-score" title="reputation score 12092" dir="ltr">12.1k</span><span title="2 gold badges"><span class="badge1"></span><span class="badgecount">2</span></span><span title="13 silver badges"><span class="badge2"></span><span class="badgecount">13</span></span><span title="27 bronze badges"><span class="badge3"></span><span class="badgecount">27</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22146614" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-33606289" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">1</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy"><code>then myObject will not get destroyed once function ends</code> It absolutely will.</span>
                &ndash;&nbsp;
                    <a href="/users/560648/lightness-races-in-orbit"
                       title="120193 reputation"
                       class="comment-user">Lightness Races in Orbit</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 12:49:43Z" class="relativetime-clean">Mar 3 at 12:49</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33613425" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">5</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">In the pointer case, <code>myObject</code> will still be destroyed, just as any other local variable will.  The difference is that its value is a <i>pointer</i> to an object, not the object itself, and a dumb pointer&#39;s destruction doesn&#39;t affect its pointee.  So the <i>object</i> will survive said destruction.</span>
                &ndash;&nbsp;
                    <a href="/users/319403/chao"
                       title="41646 reputation"
                       class="comment-user">cHao</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 15:45:55Z" class="relativetime-clean">Mar 3 at 15:45</span></span>
                    <span class="edited-yes" title="this comment was edited 3 times"></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33614301" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Fixed that, local variables (that includes pointer) of course will be freed - they are on stack.</span>
                &ndash;&nbsp;
                    <a href="/users/471160/marcin-j"
                       title="12092 reputation"
                       class="comment-user">marcin_j</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 16:06:56Z" class="relativetime-clean">Mar 3 at 16:06</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22146614" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="22246945"></a>
<div id="answer-22246945" class="answer" data-answerid="22246945" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22246945">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">12</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>C++ gives you three ways to pass an object: by pointer, by reference, and by value. Java limits you with the latter one (the only exception is primitive types like int, boolean etc). If you want to use C++ not just like a weird toy, then you'd better get to know the difference between these three ways.</p>

<p>Java pretends that there is no such problem as 'who and when should destroy this?'. The answer is: The Garbage Collector, Great and Awful. Nevertheless, it can't provide 100% protection against memory leaks (yes, <a href="http://iwillgetthatjobatgoogle.tumblr.com/post/12591334729/java-memory-leaks" rel="nofollow">java <strong>can</strong> leak memory</a>). Actually, GC gives you a false sense of safety. The bigger your SUV, the longer your way to the evacuator.</p>

<p>C++ leaves you face-to-face with object's lifecycle management. Well, there are means to deal with that (<a href="http://en.wikipedia.org/wiki/Smart_pointer" rel="nofollow">smart pointers</a> family, QObject in Qt and so on), but none of them can be used in 'fire and forget' manner like GC: you should <strong>always</strong> keep in mind memory handling. Not only should you care about destroying an object, you also have to avoid destroying the same object more than once.</p>

<p>Not scared yet? Ok: cyclic references - handle them yourself, human. And remember: kill each object precisely once, we C++ runtimes don't like those who mess with corpses, leave dead ones alone.</p>

<p>So, back to your question.</p>

<p>When you pass your object around by value, not by pointer or by reference, you copy the object (the whole object, whether it's a couple of bytes or a huge database dump - you're smart enough to care to avoid latter, aren't you?) every time you do '='. And to access the object's members, you use '.' (dot).</p>

<p>When you pass your object by pointer, you copy just a few bytes (4 on 32-bit systems, 8 on 64-bit ones), namely - the address of this object. And to show this to everyone, you use this fancy '->' operator when you access the members. Or you can use the combination of '*' and '.'.</p>

<p>When you use references, then you get the pointer that pretends to be a value. It's a pointer, but you access the members through '.'.</p>

<p>And, to blow your mind one more time: when you declare several variables separated by commas, then (watch the hands):</p>

<ul>
<li>Type is given to everyone</li>
<li>Value/pointer/reference modifier is individual</li>
</ul>

<p>Example:</p>

<pre><code>struct MyStruct
{
    int* someIntPointer, someInt; //here comes the surprise
    MyStruct *somePointer;
    MyStruct &amp;someReference;
};

MyStruct s1; //we allocated an object on stack, not in heap

s1.someInt = 1; //someInt is of type 'int', not 'int*' - value/pointer modifier is individual
s1.someIntPointer = &amp;s1.someInt;
*s1.someIntPointer = 2; //now s1.someInt has value '2'
s1.somePointer = &amp;s1;
s1.someReference = s1; //note there is no '&amp;' operator: reference tries to look like value
s1.somePointer-&gt;someInt = 3; //now s1.someInt has value '3'
*(s1.somePointer).someInt = 3; //same as above line
*s1.somePointer-&gt;someIntPointer = 4; //now s1.someInt has value '4'

s1.someReference.someInt = 5; //now s1.someInt has value '5'
                              //although someReference is not value, it's members are accessed through '.'

MyStruct s2 = s1; //'NO WAY' the compiler will say. Go define your '=' operator and come back.

//OK, assume we have '=' defined in MyStruct

s2.someInt = 0; //s2.someInt == 0, but s1.someInt is still 5 - it's two completely different objects, not the references to the same one
</code></pre>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22246945" title="short permalink to this answer" class="short-link" id="link-post-22246945">share</a><span class="lsep">|</span><a href="/posts/22246945/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info ">
    <div class="user-action-time">
        <a href="/posts/22246945/revisions" title="show all edits to this post">edited <span title="2014-04-17 15:55:16Z" class="relativetime">Apr 17 at 15:55</span></a>
    </div>
    <div class="user-gravatar32">
        
    </div>
    <div class="user-details">
        <br>
        
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2014-03-07 10:00:59Z" class="relativetime">Mar 7 at 10:00</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/1643115/kirill-gamazkov"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/5599809acb9ff46f9876196143db83b5?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/1643115/kirill-gamazkov">Kirill Gamazkov</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">413</span><span title="1 silver badge"><span class="badge2"></span><span class="badgecount">1</span></span><span title="9 bronze badges"><span class="badge3"></span><span class="badgecount">9</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22246945" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-33859477" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy"><code>std::auto_ptr</code> is deprecated, please don&#39;t use it.</span>
                &ndash;&nbsp;
                    <a href="/users/182705/neil"
                       title="24572 reputation"
                       class="comment-user">Neil</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-09 19:53:27Z" class="relativetime-clean">Mar 9 at 19:53</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33860006" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">3</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Thanks for std::pointing this out, I&#39;ve edited the answer</span>
                &ndash;&nbsp;
                    <a href="/users/1643115/kirill-gamazkov"
                       title="413 reputation"
                       class="comment-user">Kirill Gamazkov</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-09 20:17:09Z" class="relativetime-clean">Mar 9 at 20:17</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22246945" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="22146231"></a>
<div id="answer-22146231" class="answer" data-answerid="22146231" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22146231">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">10</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>In C++, objects allocated on the stack (using <code>Object object;</code> statement within a block) will only live within the scope they are declared in. When the block of code finishes execution, the object declared are destroyed. 
Whereas if you allocate memory on heap, using <code>Object* obj = new Object()</code>, they continue to live in heap until you call <code>delete obj</code>.</p>

<p>I would create an object on heap when I like to use the object not only in the block of code which declared/allocated it.</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22146231" title="short permalink to this answer" class="short-link" id="link-post-22146231">share</a><span class="lsep">|</span><a href="/posts/22146231/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info ">
    <div class="user-action-time">
        <a href="/posts/22146231/revisions" title="show all edits to this post">edited <span title="2014-03-04 09:48:26Z" class="relativetime">Mar 4 at 9:48</span></a>
    </div>
    <div class="user-gravatar32">
        
    </div>
    <div class="user-details">
        <br>
        
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info user-hover">
    <div class="user-action-time">
        answered <span title="2014-03-03 12:00:46Z" class="relativetime">Mar 3 at 12:00</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/2573687/karthik-kalyanasundaram"><div><img src="https://www.gravatar.com/avatar/f2125adb8f33949ea7e88d57aad840d7?s=32&d=identicon&r=PG&f=1" alt="" width="32" height="32"></div></a>
    </div>
    <div class="user-details">
        <a href="/users/2573687/karthik-kalyanasundaram">Karthik Kalyanasundaram</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">1,061</span><span title="2 silver badges"><span class="badge2"></span><span class="badgecount">2</span></span><span title="14 bronze badges"><span class="badge3"></span><span class="badgecount">14</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22146231" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-33604462" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">5</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy"><code>Object obj</code> is not always on the stack - for example globals or member variables.</span>
                &ndash;&nbsp;
                    <a href="/users/402169/tenfour"
                       title="16614 reputation"
                       class="comment-user">tenfour</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 12:03:15Z" class="relativetime-clean">Mar 3 at 12:03</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33604567" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">@tenfour Yes. I know that :)</span>
                &ndash;&nbsp;
                    <a href="/users/2573687/karthik-kalyanasundaram"
                       title="1061 reputation"
                       class="comment-user">Karthik Kalyanasundaram</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 12:05:37Z" class="relativetime-clean">Mar 3 at 12:05</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33606260" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">4</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Then you knowingly wrote false information!</span>
                &ndash;&nbsp;
                    <a href="/users/560648/lightness-races-in-orbit"
                       title="120193 reputation"
                       class="comment-user">Lightness Races in Orbit</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-03 12:49:05Z" class="relativetime-clean">Mar 3 at 12:49</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33644313" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">1</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">@LightnessRacesinOrbit I mentioned only about the objects allocated in a block, not about global and member variables. Thing is it was not clear, now corrected it - added &quot;within a block&quot; in the answer. Hope its not false information now :)</span>
                &ndash;&nbsp;
                    <a href="/users/2573687/karthik-kalyanasundaram"
                       title="1061 reputation"
                       class="comment-user">Karthik Kalyanasundaram</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-04 09:51:28Z" class="relativetime-clean">Mar 4 at 9:51</span></span>
                    <span class="edited-yes" title="this comment was edited 2 times"></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22146231" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="22146335"></a>
<div id="answer-22146335" class="answer" data-answerid="22146335" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22146335">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">7</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>Technically it is a memory allocation issue, however here are two more practical aspects of this.
It has to do with two things:
1) Scope, when you define an object without a pointer you will no longer be able to access it after the code block it is defined in, whereas if you define a pointer with "new" then you can access it from anywhere you have a pointer to this memory until you call "delete" on the same pointer.
2) If you want to pass arguments to a function you want to pass a pointer or a reference in order to be more efficient. When you pass an Object then the object is copied, if this is an object that uses a lot of memory this might be CPU consuming (e.g. you copy a vector full of data). When you pass a pointer all you pass is one int (depending of implementation but most of them are one int).</p>

<p>Other than that you need to understand that "new" allocates memory on the heap that needs to be freed at some point. When you don't have to use "new" I suggest you use a regular object definition "on the stack".</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22146335" title="short permalink to this answer" class="short-link" id="link-post-22146335">share</a><span class="lsep">|</span><a href="/posts/22146335/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2014-03-03 12:05:54Z" class="relativetime">Mar 3 at 12:05</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/1428404/in-need-of-help"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/353406b60b21d6d03c7c6f293876a069?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/1428404/in-need-of-help">in need of help</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">309</span><span title="1 silver badge"><span class="badge2"></span><span class="badgecount">1</span></span><span title="11 bronze badges"><span class="badge3"></span><span class="badgecount">11</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22146335" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22146335" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="22146270"></a>
<div id="answer-22146270" class="answer" data-answerid="22146270" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22146270">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">4</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>Let's say that you have <code>class A</code> that contain <code>class B</code> When you want to call some function of <code>class B</code> outside <code>class A</code> you will simply obtain a pointer to this class and you can do whatever you want and it will also change context of <code>class B</code> in your <code>class A</code></p>

<p>But be careful with dynamic object</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22146270" title="short permalink to this answer" class="short-link" id="link-post-22146270">share</a><span class="lsep">|</span><a href="/posts/22146270/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2014-03-03 12:02:35Z" class="relativetime">Mar 3 at 12:02</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/2660282/quest"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/6c66cd2b6bda52c5ff72783ef727d907?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/2660282/quest">Quest</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">632</span><span title="2 silver badges"><span class="badge2"></span><span class="badgecount">2</span></span><span title="15 bronze badges"><span class="badge3"></span><span class="badgecount">15</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22146270" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22146270" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="22146600"></a>
<div id="answer-22146600" class="answer" data-answerid="22146600" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22146600">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">3</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>There are many benefits of using pointers to object - </p>

<ol>
<li>Efficiency (as you already pointed out). Passing objects to
functions mean creating new copies of object. </li>
<li>Working with objects from third party libraries. If your object
belongs to a third party code and the authors intend the usage of their objects through pointers only (no copy constructors etc) the only way you can pass around this
object is using pointers. Passing by value may cause issues. (Deep
copy / shallow copy issues).</li>
<li>if the object owns a resource and you want that the ownership should not be sahred with other objects.</li>
</ol>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22146600" title="short permalink to this answer" class="short-link" id="link-post-22146600">share</a><span class="lsep">|</span><a href="/posts/22146600/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2014-03-03 12:18:41Z" class="relativetime">Mar 3 at 12:18</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/2161003/rohit"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/fa0b54c2f86830037f4bfc166fbc56e6?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/2161003/rohit">Rohit</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">79</span><span title="7 bronze badges"><span class="badge3"></span><span class="badgecount">7</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22146600" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22146600" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="22263437"></a>
<div id="answer-22263437" class="answer" data-answerid="22263437" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22263437">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">3</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>This is has been discussed at length, but in Java everything is a pointer. It makes no distinction between stack and heap allocations (all objects are allocated on the heap), so you don't realize you're using pointers. In C++, you can mix the two, depending on your memory requirements. Performance and memory usage is more deterministic in C++ (duh).  </p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22263437" title="short permalink to this answer" class="short-link" id="link-post-22263437">share</a><span class="lsep">|</span><a href="/posts/22263437/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info user-hover">
    <div class="user-action-time">
        <a href="/posts/22263437/revisions" title="show all edits to this post">edited <span title="2014-04-03 21:17:41Z" class="relativetime">Apr 3 at 21:17</span></a>
    </div>
    <div class="user-gravatar32">
        <a href="/users/63550/peter-mortensen"><div class="gravatar-wrapper-32"><img src="http://i.stack.imgur.com/RIZKi.png?s=32&g=1" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/63550/peter-mortensen">Peter Mortensen</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">7,406</span><span title="8 gold badges"><span class="badge1"></span><span class="badgecount">8</span></span><span title="51 silver badges"><span class="badge2"></span><span class="badgecount">51</span></span><span title="82 bronze badges"><span class="badge3"></span><span class="badgecount">82</span></span>
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2014-03-08 00:45:39Z" class="relativetime">Mar 8 at 0:45</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/1480498/user1480498"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/044bfadc5e6aa8a044a5cc43943b34d3?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/1480498/user1480498">user1480498</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">51</span><span title="1 bronze badge"><span class="badge3"></span><span class="badgecount">1</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22263437" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22263437" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="22268280"></a>
<div id="answer-22268280" class="answer" data-answerid="22268280" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22268280">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">2</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>Well the main question is <strong>Why should I use a pointer rather than the object itself?</strong> And my answer, you should (almost) never use pointer instead of object, because C++ has <a href="http://www.cprogramming.com/tutorial/references.html" rel="nofollow">references</a>, it is safer then pointers and guarantees the same performance as pointers.</p>

<p>Another thing you mentioned in your question:</p>

<pre><code>Object *myObject = new Object;
</code></pre>

<p>How does it work? It creates pointer of <code>Object</code> type, allocates memory to fit one object and calls default constructor, sounds good, right? But actually it isn't so good, if you dynamically allocated memory (used keyword <code>new</code>), you also have to free memory manually, that means in code you should have:</p>

<pre><code>delete myObject;
</code></pre>

<p>This calls destructor and frees memory, looks easy, however in big projects may be difficult to detect if one thread freed memory or not, but for that purpose you can try <a href="https://www.google.lt/?gws_rd=cr&amp;ei=ge4aU_OqC-PoywPVsoL4BA#q=c%2b%2b%20shared%20pointer" rel="nofollow">shared pointers</a>, these slightly decreases performance, but it is much easier to work with them.</p>

<hr>

<p>And now some introduction is over and go back to question.</p>

<p>You can use pointers instead of objects to get better performance while transferring data between function.</p>

<p>Take a look, you have <code>std::string</code> (it is also object) and it contains really much data, for example big XML, now you need to parse it, but for that you have function <code>void foo(...)</code> which can be declarated in different ways:</p>

<ol>
<li><code>void foo(std::string xml);</code>
In this case you will copy all data from your variable to function stack, it takes some time, so your performance will be low.</li>
<li><code>void foo(std::string* xml);</code>
In this case you will pass pointer to object, same speed as passing <code>size_t</code> variable, however this declaration has error prone, because you can pass <code>NULL</code> pointer or invalid pointer. Pointers usually used in <code>C</code> because it doesn't have references.</li>
<li><code>void foo(std::string&amp; xml);</code>
Here you pass reference, basically it is the same as passing pointer, but compiler does some stuff and you cannot pass invalid reference (actually it is possible to create situation with invalid reference, but it is tricking compiler).</li>
<li><code>void foo(const std::string* xml);</code>
Here is the same as second, just pointer value cannot be changed.</li>
<li><code>void foo(const std::string&amp; xml);</code>
Here is the same as third, but object value cannot be changed.</li>
</ol>

<p>What more I want to mention, you can use these 5 ways to pass data no matter which allocation way you have chosen (with <code>new</code> or <em>regular</em>).</p>

<hr>

<p>Another thing to mention, when you create object in <em>regular</em> way, you allocate memory in stack, but while you create it with <code>new</code> you allocate heap. It is much faster to allocate stack, but it is kind a small for really big arrays of data, so if you need big object you should use heap, because you may get stack overflow, but usually this issue is solved using <a href="http://www.cplusplus.com/reference/stl/" rel="nofollow">STL containers</a> and remember <code>std::string</code> is also container, some guys forgot it :)</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22268280" title="short permalink to this answer" class="short-link" id="link-post-22268280">share</a><span class="lsep">|</span><a href="/posts/22268280/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2014-03-08 10:48:02Z" class="relativetime">Mar 8 at 10:48</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/1237747/st3"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/5674cd4a4abd08d63c5c3de20afbc97d?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/1237747/st3">ST3</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">2,946</span><span title="1 gold badge"><span class="badge1"></span><span class="badgecount">1</span></span><span title="14 silver badges"><span class="badge2"></span><span class="badgecount">14</span></span><span title="41 bronze badges"><span class="badge3"></span><span class="badgecount">41</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22268280" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22268280" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="22182492"></a>
<div id="answer-22182492" class="answer" data-answerid="22182492" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22182492">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">2</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>A pointer directly references the memory location of an object. Java has nothing like this. Java has references that reference the location of object through hash tables. You cannot do anything like pointer arithmetic in Java with these references.</p>

<p>To answer your question, it's just your preference. I prefer using the Java-like syntax.</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22182492" title="short permalink to this answer" class="short-link" id="link-post-22182492">share</a><span class="lsep">|</span><a href="/posts/22182492/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info user-hover">
    <div class="user-action-time">
        <a href="/posts/22182492/revisions" title="show all edits to this post">edited <span title="2014-04-03 21:15:29Z" class="relativetime">Apr 3 at 21:15</span></a>
    </div>
    <div class="user-gravatar32">
        <a href="/users/63550/peter-mortensen"><div class="gravatar-wrapper-32"><img src="http://i.stack.imgur.com/RIZKi.png?s=32&g=1" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/63550/peter-mortensen">Peter Mortensen</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">7,406</span><span title="8 gold badges"><span class="badge1"></span><span class="badgecount">8</span></span><span title="51 silver badges"><span class="badge2"></span><span class="badgecount">51</span></span><span title="82 bronze badges"><span class="badge3"></span><span class="badgecount">82</span></span>
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2014-03-04 20:37:21Z" class="relativetime">Mar 4 at 20:37</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/2004705/rioricorick"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/6e942a246a9fb9739581eb8619635515?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/2004705/rioricorick">RioRicoRick</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">29</span><span title="2 bronze badges"><span class="badge3"></span><span class="badgecount">2</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22182492" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-33720887" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Hash tables? Maybe in some JVMs but don&#39;t count on it.</span>
                &ndash;&nbsp;
                    <a href="/users/13422/zan-lynx"
                       title="22935 reputation"
                       class="comment-user">Zan Lynx</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-05 22:21:16Z" class="relativetime-clean">Mar 5 at 22:21</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-33860092" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">1</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">You can use <code>MyClass&#91;&#93;</code> to emulate pointer math</span>
                &ndash;&nbsp;
                    <a href="/users/1643115/kirill-gamazkov"
                       title="413 reputation"
                       class="comment-user">Kirill Gamazkov</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-09 20:20:42Z" class="relativetime-clean">Mar 9 at 20:20</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22182492" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="22194306"></a>
<div id="answer-22194306" class="answer" data-answerid="22194306" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="22194306">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">0</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>"Necessity is the mother of invention."
The most of important difference that I would like to point out is the outcome of my own experience of coding.
Sometimes you need to pass objects to  functions . In that case if your object is  of a very  big class then passing it as an object will copy its state  (which you might not want ..AND CAN BE BIG OVERHEAD) thus resulting in overhead of copying object .while pointer is fixed 4 byte size (assuming 32 bit).Other reasons are already mentioned above...</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/22194306" title="short permalink to this answer" class="short-link" id="link-post-22194306">share</a><span class="lsep">|</span><a href="/posts/22194306/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2014-03-05 09:58:11Z" class="relativetime">Mar 5 at 9:58</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/2322837/sandeep-bisht"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/f8c402f06eea5ce337a09f012948bece?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/2322837/sandeep-bisht">sandeep bisht</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">47</span><span title="9 bronze badges"><span class="badge3"></span><span class="badgecount">9</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-22194306" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-33734938" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">4</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">you should prefer passing by reference</span>
                &ndash;&nbsp;
                    <a href="/users/2805305/bolov"
                       title="3127 reputation"
                       class="comment-user">bolov</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-06 08:20:32Z" class="relativetime-clean">Mar 6 at 8:20</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-22194306" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>
				<div class="question-status">
        <h2>                    <b>protected</b> by <a href="/users/168868/charles">Charles</a> <span title="2014-03-07 22:26:40Z" class="relativetime">Mar 7 at 22:26</span>
</h2>
        <p>
Thank you for your interest in this question. 
Because it has attracted low-quality answers, posting an answer now requires 10 <a href="/help/whats-reputation">reputation</a> on this site.
<br /><br />
Would you like to answer one of these <a href="/unanswered?fromProtectedNotice=true">unanswered questions</a> instead?
</p>
    </div>


						<h2 class="bottom-notice" data-loc="1">
Not the answer you&#39;re looking for?							Browse other questions tagged <a href="/questions/tagged/c%2b%2b" class="post-tag" title="show questions tagged &#39;c++&#39;" rel="tag">c++</a> <a href="/questions/tagged/pointers" class="post-tag" title="show questions tagged &#39;pointers&#39;" rel="tag">pointers</a> <a href="/questions/tagged/c%2b%2b11" class="post-tag" title="show questions tagged &#39;c++11&#39;" rel="tag">c++11</a>  or <a href="/questions/ask">ask your own question</a>.						</h2>
			</div>
		</div>
				<div id="sidebar" class="show-votes">
						    <div class="module question-stats">
			        <table id="qinfo">
			            <tr>
			                <td>
			                    <p class="label-key">asked</p>
			                </td>
			                <td style="padding-left: 10px">
			                    <p class="label-key" title="2014-03-03 11:54:16Z"><b>4 months ago</b></p>
			                </td>
			            </tr>
			            <tr>
			                <td>
			                    <p class="label-key">viewed</p>
			                </td>

			                <td style="padding-left: 10px">
			                    <p class="label-key">
			                        <b>80504 times</b>
			                    </p>
			                </td>
			            </tr>
			                <tr>
			                    <td>
			                        <p class="label-key">active</p>
			                    </td>
			                    <td style="padding-left: 10px">
			                        <p class="label-key"><b><a href="?lastactivity" class="lastactivity-link" title="2014-04-17 15:55:16Z">2 months ago</a></b></p>
			                    </td>
			                </tr>
			        </table>
			    </div>
						
			<script>
                var ados = ados || {};ados.run = ados.run || [];
                ados.run.push(function() { ados_add_placement(22,8277,"adzerk1764677197",17).setZone(45) ; });                    
            </script>
            <div class="everyonelovesstackoverflow" id="adzerk1764677197">
            </div>  
    <div id="hireme">
        <script>
window.careers_adurl="//careers.stackoverflow.com/gethired/js",window.careers_cssurl="//cdn-careers.sstatic.net/careers/gethired/sidebar.min.css?v=88f3fd5e2263",window.careers_leaderboardcssurl="{leaderboardcssurl}",window.careers_companycssurl="//cdn-careers.sstatic.net/careers/gethired/company",window.careers_adselector="div#hireme",StackExchange.ready(function(){$.ajax({url:"//cdn-careers.sstatic.net/careers/gethired/loader.min.js?v=93d05efce50b",dataType:"script",cache:!0})});        </script>
    </div>
			  
    
            <div class="module sidebar-linked">
	<h4 id="h-linked">Linked</h4>
	<div class="linked" data-tracker="lq=1">
<div class="spacer">
	<a href="/q/8706192" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted large">110</div>
	</a>
	<a href="/questions/8706192/which-kind-of-pointer-do-i-use-when" class="question-hyperlink">Which kind of pointer do I use when?</a>
</div><div class="spacer">
	<a href="/q/21256252" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">36</div>
	</a>
	<a href="/questions/21256252/force-the-compiler-to-ignore-some-lines-in-the-program" class="question-hyperlink">Force the compiler to ignore some lines in the program</a>
</div><div class="spacer">
	<a href="/q/4288030" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">5</div>
	</a>
	<a href="/questions/4288030/c-objects-when-should-i-use-pointer-or-reference" class="question-hyperlink">C++ Objects: When should I use pointer or reference</a>
</div><div class="spacer">
	<a href="/q/2264969" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">9</div>
	</a>
	<a href="/questions/2264969/why-memory-allocation-on-heap-is-much-slower-than-on-stack" class="question-hyperlink">Why memory allocation on heap is MUCH slower than on stack?</a>
</div><div class="spacer">
	<a href="/q/10729522" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes  default">6</div>
	</a>
	<a href="/questions/10729522/why-scoped-pointers-in-boost" class="question-hyperlink">Why scoped pointers in boost</a>
</div><div class="spacer">
	<a href="/q/22439043" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes  default">1</div>
	</a>
	<a href="/questions/22439043/when-to-allocate-memory-in-c" class="question-hyperlink">When to allocate memory in C++?</a>
</div><div class="spacer">
	<a href="/q/22433822" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes  default">0</div>
	</a>
	<a href="/questions/22433822/why-would-you-use-pointers-in-a-class-definition" class="question-hyperlink">Why would you use pointers in a class definition?</a>
</div>			</div>
</div>

				<div class="module sidebar-related">
					<h4 id="h-related">Related</h4>
                    <div class="related js-gps-related-questions" data-tracker="rq=1">
                        <div class="spacer">
<a href="/q/106508" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted large">413
    </div>
</a><a href="/questions/106508/what-is-a-smart-pointer-and-when-should-i-use-one" class="question-hyperlink">What is a smart pointer and when should I use one?</a>
</div>
<div class="spacer">
<a href="/q/6880111" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">3
    </div>
</a><a href="/questions/6880111/why-mutable-lambda-with-pointer-to-member-function" class="question-hyperlink">Why mutable lambda with pointer to member function?</a>
</div>
<div class="spacer">
<a href="/q/7392057" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">22
    </div>
</a><a href="/questions/7392057/why-cant-a-constant-pointer-be-a-constant-expression" class="question-hyperlink">Why can&#39;t a constant pointer be a constant expression?</a>
</div>
<div class="spacer">
<a href="/q/11227809" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted extra-large">8115
    </div>
</a><a href="/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array" class="question-hyperlink">Why is processing a sorted array faster than an unsorted array?</a>
</div>
<div class="spacer">
<a href="/q/11291152" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">7
    </div>
</a><a href="/questions/11291152/should-i-use-a-smart-pointer" class="question-hyperlink">Should I use a smart pointer?</a>
</div>
<div class="spacer">
<a href="/q/17928687" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">3
    </div>
</a><a href="/questions/17928687/should-i-use-pointers-or-move-semantics-for-passing-big-chunks-of-data" class="question-hyperlink">Should I use pointers or move semantics for passing big chunks of data?</a>
</div>
<div class="spacer">
<a href="/q/18938396" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes default">1
    </div>
</a><a href="/questions/18938396/malloc-error-for-object-0x1029249b0-pointer-being-freed-was-not-allocated" class="question-hyperlink">malloc: *** error for object 0x1029249b0: pointer being freed was not allocated</a>
</div>
<div class="spacer">
<a href="/q/19929970" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">26
    </div>
</a><a href="/questions/19929970/c11-smart-pointer-semantics" class="question-hyperlink">C++11 Smart Pointer Semantics</a>
</div>
<div class="spacer">
<a href="/q/21313596" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">3
    </div>
</a><a href="/questions/21313596/return-a-type-or-how-to-preserve-a-type-of-an-object-pointer" class="question-hyperlink">return a Type, or how to preserve a type of an object pointer?</a>
</div>
<div class="spacer">
<a href="/q/22777068" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">1
    </div>
</a><a href="/questions/22777068/c11-initialization-of-a-list-of-pointers-to-objects" class="question-hyperlink">C++11 Initialization of a list of pointers to objects</a>
</div>

                    </div>
				</div>
            
<div id="hot-network-questions" class="module">
    <h4>
        <a href="//stackexchange.com/questions?tab=hot" 
           class="js-gps-track" 
           data-gps-track="posts_hot_network.click({ item_type:1, location:11 })">
            Hot Network Questions
        </a>
    </h4>
    <ul>
            <li >
                <div class="favicon favicon-english" title="English Language &amp; Usage Stack Exchange"></div><a href="http://english.stackexchange.com/questions/181451/what-should-i-say-if-i-am-not-drunk-but-i-feel-that-my-head-is-heavy" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:97 }); posts_hot_network.click({ item_type:2, location:11 })">
                    What should I say if I am not drunk but I feel that my head is heavy?
                </a>

            </li>
            <li >
                <div class="favicon favicon-gaming" title="Arqade"></div><a href="http://gaming.stackexchange.com/questions/174461/is-it-possible-to-get-your-loot-from-the-public-test-realm" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:41 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Is it possible to get your loot from the Public Test Realm?
                </a>

            </li>
            <li >
                <div class="favicon favicon-rpg" title="Role-playing Games Stack Exchange"></div><a href="http://rpg.stackexchange.com/questions/41704/how-to-tackle-heavy-sphere-redundancy" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:122 }); posts_hot_network.click({ item_type:2, location:11 })">
                    How to tackle heavy sphere redundancy?
                </a>

            </li>
            <li >
                <div class="favicon favicon-mathoverflow" title="MathOverflow"></div><a href="http://mathoverflow.net/questions/173060/simplest-example-of-non-trivial-toda-bracket-in-spaces" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:504 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Simplest example of non-trivial Toda bracket in spaces
                </a>

            </li>
            <li >
                <div class="favicon favicon-askubuntu" title="Ask Ubuntu"></div><a href="http://askubuntu.com/questions/490385/read-a-part-of-massive-online-csv-file-using-its-url-from-command-line" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:89 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Read a part of massive online CSV file using its URL from command line
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-cs" title="Computer Science Stack Exchange"></div><a href="http://cs.stackexchange.com/questions/28123/returning-a-random-subset-with-length-k-of-n-strings-while-only-storing-at-most" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:419 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Returning a random subset with length k of N strings while only storing at most k of them
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-workplace" title="The Workplace Stack Exchange"></div><a href="http://workplace.stackexchange.com/questions/27996/how-do-i-ask-my-boss-for-back-pay-when-ive-been-grossly-underpaid" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:423 }); posts_hot_network.click({ item_type:2, location:11 })">
                    How do I ask my boss for back pay when I&#39;ve been grossly underpaid?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-rpg" title="Role-playing Games Stack Exchange"></div><a href="http://rpg.stackexchange.com/questions/41663/is-summoning-undead-evil-why" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:122 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Is summoning undead evil? Why?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-tridion" title="Tridion Stack Exchange"></div><a href="http://tridion.stackexchange.com/questions/6030/can-we-take-backup-of-tridion-user" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:485 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Can we take backup of tridion user?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-blender" title="Blender Stack Exchange"></div><a href="http://blender.stackexchange.com/questions/13663/how-to-see-bundles-and-back-projecting-points-of-different-colors" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:502 }); posts_hot_network.click({ item_type:2, location:11 })">
                    How to see bundles and back projecting points of different colors?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-codereview" title="Code Review Stack Exchange"></div><a href="http://codereview.stackexchange.com/questions/55795/refactor-a-legacy-application-to-a-less-unwieldy-state" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:196 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Refactor a legacy application to a less-unwieldy state
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-matheducators" title="Mathematics Educators Stack Exchange"></div><a href="http://matheducators.stackexchange.com/questions/3886/the-definition-of-natural-log-and-e" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:548 }); posts_hot_network.click({ item_type:2, location:11 })">
                    The definition of natural log and e
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-movies" title="Movies &amp; TV Stack Exchange"></div><a href="http://movies.stackexchange.com/questions/21754/what-format-do-movie-theaters-now-use" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:367 }); posts_hot_network.click({ item_type:2, location:11 })">
                    What format do movie theaters now use?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-salesforce" title="Salesforce Stack Exchange"></div><a href="http://salesforce.stackexchange.com/questions/42048/on-deploying-2-triggers-in-same-org-it-fails-with-system-limitexception-too-m" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:459 }); posts_hot_network.click({ item_type:2, location:11 })">
                    On deploying 2 triggers in same org, it fails with &#39;System.LimitException: Too many SOQL queries: 101 &#39;, but on deploying either of the one it works
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-math" title="Mathematics Stack Exchange"></div><a href="http://math.stackexchange.com/questions/853409/how-would-you-count-a-base-36-system" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:69 }); posts_hot_network.click({ item_type:2, location:11 })">
                    How would you count a base &gt; 36 system?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-tex" title="TeX - LaTeX Stack Exchange"></div><a href="http://tex.stackexchange.com/questions/187443/how-to-remove-the-full-stop-at-the-end-of-each-bibliography-entry" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:85 }); posts_hot_network.click({ item_type:2, location:11 })">
                    How to remove the full stop at the end of each bibliography entry?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-academia" title="Academia Stack Exchange"></div><a href="http://academia.stackexchange.com/questions/24227/what-happens-when-a-closed-form-solution-to-a-research-problem-is-not-possible" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:415 }); posts_hot_network.click({ item_type:2, location:11 })">
                    What happens when a closed form solution to a research problem is not possible?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-craftcms" title="Craft CMS Stack Exchange"></div><a href="http://craftcms.stackexchange.com/questions/651/overwrite-entry-title-in-template" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:563 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Overwrite entry.title in template
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-math" title="Mathematics Stack Exchange"></div><a href="http://math.stackexchange.com/questions/853615/proving-an-expression-is-composite" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:69 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Proving an expression is composite
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-superuser" title="Super User"></div><a href="http://superuser.com/questions/775560/is-there-a-way-to-only-allow-a-login-to-happen-only-at-a-specific-time" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:3 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Is there a way to only allow a login to happen only at a specific time?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-codegolf" title="Programming Puzzles &amp; Code Golf Stack Exchange"></div><a href="http://codegolf.stackexchange.com/questions/32696/disprove-fermats-last-theorem" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:200 }); posts_hot_network.click({ item_type:2, location:11 })">
                    “Disprove” Fermat&#39;s Last Theorem
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-math" title="Mathematics Stack Exchange"></div><a href="http://math.stackexchange.com/questions/853156/how-can-i-solve-this-o-d-e" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:69 }); posts_hot_network.click({ item_type:2, location:11 })">
                    How can I solve this O.D.E.?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-dba" title="Database Administrators Stack Exchange"></div><a href="http://dba.stackexchange.com/questions/69467/is-it-ok-to-change-from-full-recovery-to-simple-recovery-in-sql-server" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:182 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Is it ok to change from full recovery to simple recovery in Sql Server
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-rpg" title="Role-playing Games Stack Exchange"></div><a href="http://rpg.stackexchange.com/questions/41719/why-is-magic-so-hard" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:122 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Why is Magic so hard?
                </a>

            </li>
    </ul>

        <a href="#" 
           class="show-more js-show-more js-gps-track" 
           data-gps-track="posts_hot_network.click({ item_type:3, location:11 })">
            more hot questions
        </a>
</div>
		</div>
	
<div id="feed-link">
    <div id="feed-link-text">
        <a href="/feeds/question/22146094" title="feed of this question and its answers">
            <span class="feed-icon"></span>question feed
        </a>
    </div>
</div>	<script>
StackExchange.ready(function(){$.get('/posts/22146094/ivc/1393');});
</script>
<noscript>
    <div><img src="/posts/22146094/ivc/1393" class="dno" alt="" width="0" height="0"></div>
</noscript><div style="display:none" id="prettify-lang">lang-cpp</div></div>



        </div>
    </div>
    <div id="footer" class="categories">
        <div class="footerwrap">
            <div id="footer-menu">
                <div class="top-footer-links">
                        <a href="/tour">tour</a>
                    <a href="/help">help</a>
                        <a href="/help/badges">badges</a>
                    <a href="http://blog.stackoverflow.com?blb=1">blog</a>
                        <a href="http://chat.stackoverflow.com">chat</a>
                    <a href="http://data.stackexchange.com">data</a>
                    <a href="http://stackexchange.com/legal">legal</a>
                    <a href="http://stackexchange.com/legal/privacy-policy">privacy policy</a>
                    <a href="http://stackexchange.com/work-here">work here</a>
                    <a href="http://stackexchange.com/mediakit">advertising info</a>

                    <a onclick='StackExchange.switchMobile("on")'>mobile</a>
                    <b><a href="/contact">contact us</a></b>
                        <b><a href="http://meta.stackoverflow.com">feedback</a></b>
                    
                </div>
                <div id="footer-sites">
                    <table>
    <tr>
            <th colspan=3>
                Technology
            </th>
            <th >
                Life / Arts
            </th>
            <th >
                Culture / Recreation
            </th>
            <th >
                Science
            </th>
            <th >
                Other
            </th>
    </tr>
    <tr>
            <td>
                <ol>
                        <li><a href="http://stackoverflow.com" title="professional and enthusiast programmers">Stack Overflow</a></li>
                        <li><a href="http://serverfault.com" title="professional system and network administrators">Server Fault</a></li>
                        <li><a href="http://superuser.com" title="computer enthusiasts and power users">Super User</a></li>
                        <li><a href="http://webapps.stackexchange.com" title="power users of web applications">Web Applications</a></li>
                        <li><a href="http://askubuntu.com" title="Ubuntu users and developers">Ask Ubuntu</a></li>
                        <li><a href="http://webmasters.stackexchange.com" title="pro webmasters">Webmasters</a></li>
                        <li><a href="http://gamedev.stackexchange.com" title="professional and independent game developers">Game Development</a></li>
                        <li><a href="http://tex.stackexchange.com" title="users of TeX, LaTeX, ConTeXt, and related typesetting systems">TeX - LaTeX</a></li>
                            </ol></td><td><ol>
                        <li><a href="http://programmers.stackexchange.com" title="professional programmers interested in conceptual questions about software development">Programmers</a></li>
                        <li><a href="http://unix.stackexchange.com" title="users of Linux, FreeBSD and other Un*x-like operating systems.">Unix &amp; Linux</a></li>
                        <li><a href="http://apple.stackexchange.com" title="power users of Apple hardware and software">Ask Different (Apple)</a></li>
                        <li><a href="http://wordpress.stackexchange.com" title="WordPress developers and administrators">WordPress Development</a></li>
                        <li><a href="http://gis.stackexchange.com" title="cartographers, geographers and GIS professionals">Geographic Information Systems</a></li>
                        <li><a href="http://electronics.stackexchange.com" title="electronics and electrical engineering professionals, students, and enthusiasts">Electrical Engineering</a></li>
                        <li><a href="http://android.stackexchange.com" title="enthusiasts and power users of the Android operating system">Android Enthusiasts</a></li>
                        <li><a href="http://security.stackexchange.com" title="Information security professionals">Information Security</a></li>
                            </ol></td><td><ol>
                        <li><a href="http://dba.stackexchange.com" title="database professionals who wish to improve their database skills and learn from others in the community">Database Administrators</a></li>
                        <li><a href="http://drupal.stackexchange.com" title="Drupal developers and administrators">Drupal Answers</a></li>
                        <li><a href="http://sharepoint.stackexchange.com" title="SharePoint enthusiasts">SharePoint</a></li>
                        <li><a href="http://ux.stackexchange.com" title="user experience researchers and experts">User Experience</a></li>
                        <li><a href="http://mathematica.stackexchange.com" title="users of Mathematica">Mathematica</a></li>
                    
                        <li>
                            <a href="http://stackexchange.com/sites#technology" class="more">
                                more (14)
                            </a>
                        </li>
                </ol>
            </td>
            <td>
                <ol>
                        <li><a href="http://photo.stackexchange.com" title="professional, enthusiast and amateur photographers">Photography</a></li>
                        <li><a href="http://scifi.stackexchange.com" title="science fiction and fantasy enthusiasts">Science Fiction &amp; Fantasy</a></li>
                        <li><a href="http://graphicdesign.stackexchange.com" title="professional graphic designers and non-designers trying to do their own graphic design">Graphic Design</a></li>
                        <li><a href="http://cooking.stackexchange.com" title="professional and amateur chefs">Seasoned Advice (cooking)</a></li>
                        <li><a href="http://diy.stackexchange.com" title="contractors and serious DIYers">Home Improvement</a></li>
                        <li><a href="http://money.stackexchange.com" title="people who want to be financially literate">Personal Finance &amp; Money</a></li>
                        <li><a href="http://academia.stackexchange.com" title="academics and those enrolled in higher education">Academia</a></li>
                    
                        <li>
                            <a href="http://stackexchange.com/sites#lifearts" class="more">
                                more (10)
                            </a>
                        </li>
                </ol>
            </td>
            <td>
                <ol>
                        <li><a href="http://english.stackexchange.com" title="linguists, etymologists, and serious English language enthusiasts">English Language &amp; Usage</a></li>
                        <li><a href="http://skeptics.stackexchange.com" title="scientific skepticism">Skeptics</a></li>
                        <li><a href="http://judaism.stackexchange.com" title="those who base their lives on Jewish law and tradition and anyone interested in learning more">Mi Yodeya (Judaism)</a></li>
                        <li><a href="http://travel.stackexchange.com" title="road warriors and seasoned travelers">Travel</a></li>
                        <li><a href="http://christianity.stackexchange.com" title="committed Christians, experts in Christianity and those interested in learning more">Christianity</a></li>
                        <li><a href="http://gaming.stackexchange.com" title="passionate videogamers on all platforms">Arqade (gaming)</a></li>
                        <li><a href="http://bicycles.stackexchange.com" title="people who build and repair bicycles, people who train cycling, or commute on bicycles">Bicycles</a></li>
                        <li><a href="http://rpg.stackexchange.com" title="gamemasters and players of tabletop, paper-and-pencil role-playing games">Role-playing Games</a></li>
                    
                        <li>
                            <a href="http://stackexchange.com/sites#culturerecreation" class="more">
                                more (21)
                            </a>
                        </li>
                </ol>
            </td>
            <td>
                <ol>
                        <li><a href="http://math.stackexchange.com" title="people studying math at any level and professionals in related fields">Mathematics</a></li>
                        <li><a href="http://stats.stackexchange.com" title="people interested in statistics, machine learning, data analysis, data mining, and data visualization">Cross Validated (stats)</a></li>
                        <li><a href="http://cstheory.stackexchange.com" title="theoretical computer scientists and researchers in related fields">Theoretical Computer Science</a></li>
                        <li><a href="http://physics.stackexchange.com" title="active researchers, academics and students of physics">Physics</a></li>
                        <li><a href="http://mathoverflow.net" title="professional mathematicians">MathOverflow</a></li>
                    
                        <li>
                            <a href="http://stackexchange.com/sites#science" class="more">
                                more (7)
                            </a>
                        </li>
                </ol>
            </td>
            <td>
                <ol>
                        <li><a href="http://stackapps.com" title="apps, scripts, and development with the Stack Exchange API">Stack Apps</a></li>
                        <li><a href="http://meta.stackexchange.com" title="meta-discussion of the Stack Exchange family of Q&amp;A websites">Meta Stack Exchange</a></li>
                        <li><a href="http://area51.stackexchange.com" title="proposing new sites in the Stack Exchange network">Area 51</a></li>
                        <li><a href="http://careers.stackoverflow.com">Stack Overflow Careers</a></li>
                    
                </ol>
            </td>
    </tr>
</table>
                </div>
            </div>

            <div id="copyright">
                site design / logo &#169; 2014 stack exchange inc; user contributions licensed under <a href="http://creativecommons.org/licenses/by-sa/3.0/" rel="license">cc by-sa 3.0</a> 
                with <a href="http://blog.stackoverflow.com/2009/06/attribution-required/" rel="license">attribution required</a>
            </div>
            <div id="svnrev">
                rev 2014.6.30.1688
            </div>
            
        </div>
    </div>
    <noscript>
        <div id="noscript-warning">Stack Overflow works best with JavaScript enabled<img src="http://pixel.quantserve.com/pixel/p-c1rF4kxgLUzNc.gif" alt="" class="dno"></div>
    </noscript>
<script>var p = "http", d = "static"; if (document.location.protocol == "https:") { p += "s"; d = "engine"; } var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = p + "://" + d + ".adzerk.net/ados.js"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script>
<script>
    var ados = ados || {};
    ados.run = ados.run || [];
    ados.run.push(function () { ados_setKeywords('c%2b%2b,pointers,c%2b%2b11');; ados_load(); });         
</script>

    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () { (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m);
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
        ga('create', 'UA-5620270-1');        
        
        ga('set', 'dimension2', '|c++|pointers|c++11|');         
        ga('send', 'pageview');
        var _qevents = _qevents || [],
            _comscore = _comscore || [];
        (function () {
            var ssl='https:'==document.location.protocol,
                s=document.getElementsByTagName('script')[0],
                qc=document.createElement('script');
            qc.async=true;
            qc.src=(ssl?'https://secure':'http://edge')+'.quantserve.com/quant.js';
            s.parentNode.insertBefore(qc, s);
            var sc=document.createElement('script');
            sc.async=true;
            sc.src=(ssl?'https://sb':'http://b') + '.scorecardresearch.com/beacon.js';
            s.parentNode.insertBefore(sc, s);
        })();
        _comscore.push({ c1: "2", c2: "17440561" });
        _qevents.push({ qacct: "p-c1rF4kxgLUzNc" });
    </script>        
    
    </body>
</html>