<!DOCTYPE html>
<html>
<head>
    
    <title>oop - What is a metaclass in Python? - Stack Overflow</title>
    <link rel="shortcut icon" href="//cdn.sstatic.net/stackoverflow/img/favicon.ico?v=038622610830">
    <link rel="apple-touch-icon image_src" href="//cdn.sstatic.net/stackoverflow/img/apple-touch-icon.png?v=fd7230a85918">
    <link rel="search" type="application/opensearchdescription+xml" title="Stack Overflow" href="/opensearch.xml">
    <meta name="twitter:card" content="summary">
    <meta name="twitter:domain" content="stackoverflow.com"/>
    <meta name="og:type" content="website" />
    <meta name="og:image" content="http://cdn.sstatic.net/stackoverflow/img/apple-touch-icon@2.png?v=fde65a5a78c6"/>
    <meta name="og:title" content="What is a metaclass in Python?" />
    <meta name="og:description" content="What are metaclasses? What do you use them for?
" />
    <meta name="og:url" content="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python"/>
    <link rel="canonical" href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python" />

    
    
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
    <script src="//cdn.sstatic.net/Js/stub.en.js?v=d142d951ee55"></script>
    <link rel="stylesheet" type="text/css" href="//cdn.sstatic.net/stackoverflow/all.css?v=dc5a5d7ef830">
    
    <link rel="alternate" type="application/atom+xml" title="Feed for question &#39;What is a metaclass in Python?&#39;" href="/feeds/question/100003">
    <script>
        
        StackExchange.ready(function () {
            StackExchange.using("postValidation", function () {
                StackExchange.postValidation.initOnBlurAndSubmit($('#post-form'), 2, 'answer');
            });

            
            StackExchange.question.init({showAnswerHelp:true,totalCommentCount:0,shownCommentCount:0,highlightColor:'#F4A83D',backgroundColor:'#FFF',questionId:100003});

            styleCode();

                StackExchange.realtime.subscribeToQuestion('1', '100003');
            
                    });
    </script>


    <script>
        StackExchange.init({"locale":"en","stackAuthUrl":"https://stackauth.com","serverTime":1404132073,"networkMetaHostname":"meta.stackexchange.com","styleCode":true,"enableUserHovercards":true,"site":{"name":"Stack Overflow","description":"Q&A for professional and enthusiast programmers","isNoticesTabEnabled":true,"recaptchaPublicKey":"6LdchgIAAAAAAJwGpIzRQSOFaO0pU6s44Xt8aTwc","recaptchaAudioLang":"en","enableNewTagCreationWarning":true,"nonAsciiTags":true,"enableSocialMediaInSharePopup":true},"user":{"fkey":"a92f13ba36c772525db1c7111c756719","isAnonymous":true}});
        StackExchange.using.setCacheBreakers({"js/prettify-full.en.js":"12ef2711e474","js/moderator.en.js":"e2c6bab58c56","js/full-anon.en.js":"a66b4586d8f3","js/full.en.js":"d43401f72f80","js/wmd.en.js":"d25c057c3f48","js/third-party/jquery.autocomplete.min.js":"e5f01e97f7c3","js/third-party/jquery.autocomplete.min.en.js":"","js/mobile.en.js":"5f0b5c72eaa8","js/help.en.js":"43b6b771d4d9","js/tageditor.en.js":"afabf8d8de91","js/tageditornew.en.js":"140e973e4037","js/inline-tag-editing.en.js":"21223186b436","js/revisions.en.js":"989c474e85a9","js/review.en.js":"c261687765b3","js/tagsuggestions.en.js":"bb4721d888d2","js/post-validation.en.js":"62fe2d3d1730","js/explore-qlist.en.js":"8b8b631bd679","js/events.en.js":"7263182fd2c2"});
        StackExchange.using("gps", function() {
             StackExchange.gps.init(true);
        });
    </script>
    
        <script>
            StackExchange.ready(function () {
                $('#nav-tour').click(function () {
                    StackExchange.using("gps", function() {
                        StackExchange.gps.track("aboutpage.click", { aboutclick_location: "headermain" }, true);
                    });
                });
            });
        </script>
</head>
<body class="question-page new-topbar">
    <noscript><div id="noscript-padding"></div></noscript>
    <div id="notify-container"></div>
    <div id="overlay-header"></div>
    <div id="custom-header"></div>
<div class="topbar">
    <div class="topbar-wrapper">
        
        <div class="js-topbar-dialog-corral">

<div class="topbar-dialog siteSwitcher-dialog dno">
    <div class="header">
        <h3><a href="//stackoverflow.com">current community</a></h3>
    </div>
    <div class="modal-content current-site-container">
        <ul class="current-site">
                <li>
                        <div class="related-links">
            <a href="http://chat.stackoverflow.com"     data-gps-track="site_switcher.click({ item_type:6 })"
>chat</a>
                    <a href="http://blog.stackoverflow.com"     data-gps-track="site_switcher.click({ item_type:7 })"
>blog</a>
            </div>




    <a href="//stackoverflow.com"
       class="current-site-link site-link js-gps-track"
       data-id="1"
       data-gps-track="
        site_switcher.click({ item_type:3 })">
        <div class="site-icon favicon favicon-stackoverflow" title="Stack Overflow"></div>
        Stack Overflow
    </a>

                </li>
                <li class="related-site">
                        <div class="L-shaped-icon-container">
        <span class="L-shaped-icon"></span>
    </div>

                    



    <a href="http://meta.stackoverflow.com"
       class="site-link js-gps-track"
       data-id="552"
       data-gps-track="
            site.switch({ target_site:552, item_type:3 }),
        site_switcher.click({ item_type:4 })">
        <div class="site-icon favicon favicon-stackoverflowmeta" title="Meta Stack Overflow"></div>
        Meta Stack Overflow
    </a>

                </li>
                            <li class="related-site">
                        <div class="L-shaped-icon-container">
        <span class="L-shaped-icon"></span>
    </div>

                    <a class="site-link"
                       href="//careers.stackoverflow.com"
                            data-gps-track="site_switcher.click({ item_type:9 })"
>
                        <div class="site-icon favicon favicon-careers" title="Stack Overflow Careers"></div>
                        Careers 2.0
                    </a>
                </li>
        </ul>
    </div>
    
    <div class="header" id="your-communities-header">
        <h3>
your communities        </h3>
            
    </div>
    <div class="modal-content" id="your-communities-section">
            
            <div class="call-to-login">
                        <a href="https://stackoverflow.com/users/signup?returnurl=http%3a%2f%2fstackoverflow.com%2fquestions%2f100003%2fwhat-is-a-metaclass-in-python%2f6581949" class="js-gps-track"     data-gps-track="site_switcher.click({ item_type:10 })"
>Sign up</a>
                    or
                    <a href="https://stackoverflow.com/users/login?returnurl=http%3a%2f%2fstackoverflow.com%2fquestions%2f100003%2fwhat-is-a-metaclass-in-python%2f6581949" class="js-gps-track"     data-gps-track="site_switcher.click({ item_type:11 })"
>log in</a>

                    to customize your list.
            </div>
    </div>
    
    <div class="header">
        <h3><a href="//stackexchange.com/sites">more stack exchange communities</a></h3>
    </div>
    <div class="modal-content">
            <div class="child-content"></div>
    </div>
</div>
        </div>

        <div class="network-items">
            
            <a href="//stackexchange.com" 
               class="topbar-icon icon-site-switcher yes-hover js-site-switcher-button js-gps-track"
               data-gps-track="site_switcher.show"
               title="A list of all 128 Stack Exchange sites">
                <span class="hidden-text">Stack Exchange</span>
            </a>
            
        </div>

        <div class="topbar-links">
            
                <div class="links-container">
                    <span class="topbar-menu-links">
                            <a href="https://stackoverflow.com/users/signup?returnurl=http%3a%2f%2fstackoverflow.com%2fquestions%2f100003%2fwhat-is-a-metaclass-in-python%2f6581949" class="login-link">sign up</a>
                            <a href="https://stackoverflow.com/users/login?returnurl=http%3a%2f%2fstackoverflow.com%2fquestions%2f100003%2fwhat-is-a-metaclass-in-python%2f6581949" class="login-link">log in</a>
                            <a href="/tour">tour</a>

                            <a href="#" class="icon-help js-help-button" title="Help Center and other resources">
        help
        <span class="triangle"></span>
    </a>
    <div class="topbar-dialog help-dialog js-help-dialog dno">
        <div class="modal-content">
            <ul>
                                    <li>
                        <a href="/tour"     class="js-gps-track" data-gps-track="help_popup.click({ item_type:1 })"
>
                            Tour
                            <span class="item-summary">
                                Start here for a quick overview of the site
                            </span>
                        </a>
                    </li>
                <li>
                    <a href="/help"     class="js-gps-track" data-gps-track="help_popup.click({ item_type:4 })"
>
                        Help Center
                        <span class="item-summary">
                            Detailed answers to any questions you might have
                        </span>
                    </a>
                </li>
                    <li>
                        <a href="//meta.stackoverflow.com"     class="js-gps-track" data-gps-track="help_popup.click({ item_type:2 })"
>
                            Meta
                            <span class="item-summary">
                                Discuss the workings and policies of this site
                            </span>
                        </a>
                    </li>
            </ul>
        </div>
    </div>

                            <a href="//careers.stackoverflow.com">careers 2.0</a>
                    </span>
                </div>

			<div class="search-container">
                <form id="search" action="/search" method="get" autocomplete="off">
                    <input name="q" type="text" placeholder="search" value="" tabindex="1" autocomplete="off" maxlength="240" />
                </form>
			</div>
            	
        </div>      
    </div> 
</div>
<script>
    StackExchange.ready(function () { StackExchange.topbar.init(); });
</script>
    <div class="container">
        <div id="header" class=headeranon>
            <br class="cbt">
            <div id="hlogo">
                <a href="/">
                    Stack Overflow
                </a>
            </div>
            <div id="hmenus">
                <div class="nav mainnavs mainnavsanon">
                    <ul>
                        <li class="youarehere"><a id="nav-questions" href="/questions">Questions</a></li>
                        <li><a id="nav-tags" href="/tags">Tags</a></li>
                        <li><a id="nav-users" href="/users">Users</a></li>
                        <li><a id="nav-badges" href="/help/badges">Badges</a></li>
                        <li><a id="nav-unanswered" href="/unanswered">Unanswered</a></li>
                    </ul>
                </div>
                <div class="nav askquestion">
                    <ul>
                        <li>
                            <a id="nav-askquestion"  href="/questions/ask">Ask Question</a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        



        <div id="content">
            

<div itemscope itemtype="http://schema.org/Article">
	<link itemprop="image" href="//cdn.sstatic.net/stackoverflow/img/apple-touch-icon.png">
			<!--googleoff: all-->

<div id="herobox-mini">
    <div id="hero-content">
        <span id="controls">
            <a href="/tour" id="tell-me-more" class="button">Take the 2-minute tour</a>
            <span id="close"><a title="click to dismiss">&times;</a></span>
        </span>
        <div id="blurb">
            Stack Overflow is a question and answer site for professional and enthusiast programmers. It&#39;s 100% free, no registration required.
        </div>        
    </div>
    <script>
        $('#tell-me-more').click(function () {
            var clickSource = $("body").attr("class") + '-mini';
            if ($("body").hasClass("questions-page")) {
                clickSource = 'questionpagemini';
            } else if ($("body").hasClass("question-page")) {
                clickSource = 'questionpagemini';
            } else if ($("body").hasClass("home-page")) {
                clickSource = 'homepagemini';
            }

            StackExchange.using("gps", function () {
                StackExchange.gps.track("aboutpage.click", { aboutclick_location: clickSource } , true);
            });
        });
        $('#herobox-mini #close').click(function () {
            StackExchange.using("gps", function () {
                StackExchange.gps.track("hero.action", { hero_action_type: "close" }, true);
            });
            $.cookie("hero", "none", { path: "/" });
            var $hero = $("#herobox-mini");
            $hero.slideUp('fast', function () { $hero.remove(); });
            return false;
        });
    </script>
</div>
			<!--googleon: all-->
			<div id="question-header">
			<h1 itemprop="name"><a href="/questions/100003/what-is-a-metaclass-in-python" class="question-hyperlink">What is a metaclass in Python?</a></h1>
		</div>
			<div id="mainbar">

			

<div class="question" data-questionid="100003"  id="question">

    <script>
                var ados = ados || {};ados.run = ados.run || [];
                ados.run.push(function() { ados_add_placement(22,8277,"adzerk725705377",4).setZone(43) ; });                    
            </script>
            <div class="everyonelovesstackoverflow" id="adzerk725705377">
            </div>    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="100003">
    <a class="vote-up-off" title="This question shows research effort; it is useful and clear">up vote</a>
    <span class="vote-count-post high-scored-post">1789</span>
    <a class="vote-down-off" title="This question does not show any research effort; it is unclear or not useful">down vote</a>
    
    <a class="star-off" href="#" title="This is a favorite question (click again to undo)">favorite</a>
    <div class="favoritecount"><b>1736</b></div>   

</div>

            </td>
            
<td class="postcell">
<div>
    <div class="post-text" itemprop="description">

        <p>What are metaclasses? What do you use them for?</p>

    </div>
    <div class="post-taglist">
        <a href="/questions/tagged/python" class="post-tag" title="show questions tagged &#39;python&#39;" rel="tag">python</a> <a href="/questions/tagged/oop" class="post-tag" title="show questions tagged &#39;oop&#39;" rel="tag">oop</a> <a href="/questions/tagged/metaclass" class="post-tag" title="show questions tagged &#39;metaclass&#39;" rel="tag">metaclass</a> <a href="/questions/tagged/python-datamodel" class="post-tag" title="show questions tagged &#39;python-datamodel&#39;" rel="tag">python-datamodel</a> 
    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/q/100003" title="short permalink to this question" class="short-link" id="link-post-100003">share</a><span class="lsep">|</span><a href="/posts/100003/edit" class="suggest-edit-post" title="">improve this question</a></div>        
    </td>
    <td align="right" class="post-signature">
<div class="user-info user-hover">
    <div class="user-action-time">
        <a href="/posts/100003/revisions" title="show all edits to this post">edited <span title="2014-02-26 05:18:13Z" class="relativetime">Feb 26 at 5:18</span></a>
    </div>
    <div class="user-gravatar32">
        <a href="/users/-1/community"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/-1/community">Community</a><span class="mod-flair" title="moderator">&#9830;</span><br>
        <span class="reputation-score" title="reputation score " dir="ltr">1</span>
    </div>
</div>    </td>
    <td class="post-signature owner">
        <div class="user-info user-hover">
    <div class="user-action-time">
        asked <span title="2008-09-19 06:10:46Z" class="relativetime">Sep 19 '08 at 6:10</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/9951/e-satis"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/d48823dc173e34714830a841fe7c6b0f?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/9951/e-satis">e-satis</a><br>
        <span class="reputation-score" title="reputation score 144801" dir="ltr">145k</span><span title="62 gold badges"><span class="badge1"></span><span class="badgecount">62</span></span><span title="187 silver badges"><span class="badge2"></span><span class="badgecount">187</span></span><span title="245 bronze badges"><span class="badge3"></span><span class="badgecount">245</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</div>
</td>
        </tr>
                
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-100003" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-100003" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid answering questions in comments." 
				>add comment</a>
    </td>
</tr>        </table>
</div>


			<div id="answers">

				<a name="tab-top"></a>
				<div id="answers-header">
					<div class="subheader answers-subheader">
						<h2>
								9 Answers
						</h2>
						<div>
							<div id="tabs">
        <a href="/questions/100003/what-is-a-metaclass-in-python?answertab=active#tab-top" title="Answers with the latest activity first">active</a>
        <a href="/questions/100003/what-is-a-metaclass-in-python?answertab=oldest#tab-top" title="Answers in the order they were provided">oldest</a>
        <a class="youarehere" href="/questions/100003/what-is-a-metaclass-in-python?answertab=votes#tab-top" title="Answers with the highest score first">votes</a>
</div>
						</div>
					</div>    
				</div>    




  
<a name="100146"></a>
<div id="answer-100146" class="answer accepted-answer" data-answerid="100146" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="100146">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">307</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


        <span class="vote-accepted-on load-accepted-answer-date" title="loading when this answer was accepted...">accepted</span>
</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>A metaclass is the class of a class. Like a class defines how an instance of the class behaves, a metaclass defines how a class behaves. A class is an instance of a metaclass.</p>

<p>While in Python you can use arbitrary callables for metaclasses (like <a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037">Jerub</a> shows), the more useful approach is actually to make it an actual class itself. 'type' is the usual metaclass in Python. In case you're wondering, yes, 'type' is itself a class, and it is its own type. You won't be able to recreate something like 'type' purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass 'type'.</p>

<p>A metaclass is most commonly used as a class-factory. Like you create an instance of the class by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. Combined with the normal __init__ and __new__ methods, metaclasses therefor allow you to do 'extra things' when creating a class, like registering the new class with some registry, or even replace the class with something else entirely.</p>

<p>When the 'class' statement is executed, Python first executes the body of the 'class' statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the __metaclass__ attribute of the class-to-be (if any) or the '__metaclass__' global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.</p>

<p>However, metaclasses actually define the <em>type</em> of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods, in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. type.__subclasses__() is an example of a method on the 'type' metaclass. You can also define the normal 'magic' methods, like __add__, __iter__ and __getattr__, to implement or change how the class behaves.</p>

<p>Here's an aggregated example of the bits and pieces:</p>

<pre><code>def make_hook(f):
    """Decorator to turn 'foo' method into '__foo__'"""
    f.is_hook = 1
    return f

class MyType(type):
    def __new__(cls, name, bases, attrs):

        if name.startswith('None'):
            return None

        # Go over attributes and see if they should be renamed.
        newattrs = {}
        for attrname, attrvalue in attrs.iteritems():
            if getattr(attrvalue, 'is_hook', 0):
                newattrs['__%s__' % attrname] = attrvalue
            else:
                newattrs[attrname] = attrvalue

        return super(MyType, cls).__new__(cls, name, bases, newattrs)

    def __init__(self, name, bases, attrs):
        super(MyType, self).__init__(name, bases, attrs)

        # classregistry.register(self, self.interfaces)
        print "Would register class %s now." % self

    def __add__(self, other):
        class AutoClass(self, other):
            pass
        return AutoClass
        # Alternatively, to autogenerate the classname as well as the class:
        # return type(self.__name__ + other.__name__, (self, other), {})

    def unregister(self):
        # classregistry.unregister(self)
        print "Would unregister class %s now." % self

class MyObject:
    __metaclass__ = MyType


class NoneSample(MyObject):
    pass

# Will print "NoneType None"
print type(NoneSample), repr(NoneSample)

class Example(MyObject):
    def __init__(self, value):
        self.value = value
    @make_hook
    def add(self, other):
        return self.__class__(self.value + other.value)

# Will unregister the class
Example.unregister()

inst = Example(10)
# Will fail with an AttributeError
#inst.unregister()

print inst + inst
class Sibling(MyObject):
    pass

ExampleSibling = Example + Sibling
# ExampleSibling is now a subclass of both Example and Sibling (with no
# content of its own) although it will believe it's called 'AutoClass'
print ExampleSibling
print ExampleSibling.__mro__
</code></pre>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/100146" title="short permalink to this answer" class="short-link" id="link-post-100146">share</a><span class="lsep">|</span><a href="/posts/100146/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info user-hover">
    <div class="user-action-time">
        <a href="/posts/100146/revisions" title="show all edits to this post">edited <span title="2011-05-06 01:55:01Z" class="relativetime">May 6 '11 at 1:55</span></a>
    </div>
    <div class="user-gravatar32">
        <a href="/users/463065/trufa"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/edb56216fd1104b03e56477dfc1a282c?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/463065/trufa">Trufa</a><br>
        <span class="reputation-score" title="reputation score 10229" dir="ltr">10.2k</span><span title="16 gold badges"><span class="badge1"></span><span class="badgecount">16</span></span><span title="60 silver badges"><span class="badge2"></span><span class="badgecount">60</span></span><span title="119 bronze badges"><span class="badge3"></span><span class="badgecount">119</span></span>
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2008-09-19 07:01:58Z" class="relativetime">Sep 19 '08 at 7:01</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/17624/thomas-wouters"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/90285a816eda046ff55a0dcacc0c5ee8?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/17624/thomas-wouters">Thomas Wouters</a><br>
        <span class="reputation-score" title="reputation score 38077" dir="ltr">38.1k</span><span title="10 gold badges"><span class="badge1"></span><span class="badgecount">10</span></span><span title="84 silver badges"><span class="badge2"></span><span class="badgecount">84</span></span><span title="90 bronze badges"><span class="badge3"></span><span class="badgecount">90</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-100146" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-2647653" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">1</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">thanks, super helpful example.  Couldn&#39;t you also have created the hook attributes in the <b>init</b> method.  And in a sense wouldn&#39;t that be more correct, since the &quot;hookness&quot; of all hook attributes is something common to all objects and so should belong to the class, not just added everytime a new instance of the class is requested?</span>
                &ndash;&nbsp;
                    <a href="/users/39396/carl-g"
                       title="1984 reputation"
                       class="comment-user">Carl G</a>
                <span class="comment-date" dir="ltr"><span title="2010-04-13 23:21:34Z" class="relativetime-clean">Apr 13 '10 at 23:21</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-2650871" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">7</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">That&#39;s not the difference between <code>__new__</code> and <code>__init__</code>. Both are called when the class is created, not when it&#39;s instantiated. The <i>class</i>&#39;s <code>__init__</code> is called when the class is instantiated, as is the metaclass&#39;s <code>__call__</code>. The difference between <code>__new__</code> and <code>__init__</code> is that the former is called to create the class object, and the latter to initialize it. I translate the hooks in <code>__new__</code> so all subsequent code (other metaclasses, in metaclass-multiple-inheritance situations) see the hooks &quot;normally&quot;.</span>
                &ndash;&nbsp;
                    <a href="/users/17624/thomas-wouters"
                       title="38077 reputation"
                       class="comment-user">Thomas Wouters</a>
                <span class="comment-date" dir="ltr"><span title="2010-04-14 11:23:47Z" class="relativetime-clean">Apr 14 '10 at 11:23</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-5400154" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">14</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">For extra mind warping, Python 3 adds the <b>prepare</b> special method, which allows metaclasses to provide a special namespace for the execution of the class body (for example, returning a collections.OrderedDict instance to keep track of the order that fields are defined). See PEP 3115 and the Python 3 language reference for more info.</span>
                &ndash;&nbsp;
                    <a href="/users/597742/ncoghlan"
                       title="10333 reputation"
                       class="comment-user">ncoghlan</a>
                <span class="comment-date" dir="ltr"><span title="2011-02-01 07:29:50Z" class="relativetime-clean">Feb 1 '11 at 7:29</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-35921746" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">4</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">It&#39;s clear the answer below this one should be the &quot;accepted&quot; one.  I didn&#39;t even see it down there because it falls below the fold</span>
                &ndash;&nbsp;
                    <a href="/users/130221/nick-franceschina"
                       title="1794 reputation"
                       class="comment-user">Nick Franceschina</a>
                <span class="comment-date" dir="ltr"><span title="2014-05-02 21:20:16Z" class="relativetime-clean">May 2 at 21:20</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-100146" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>
<script>
                var ados = ados || {};ados.run = ados.run || [];
                ados.run.push(function() { ados_add_placement(22,8277,"adzerk1805602104",4).setZone(44) ; });                    
            </script>
            <div class="everyonelovesstackoverflow" id="adzerk1805602104">
            </div>
  
<a name="6581949"></a>
<div id="answer-6581949" class="answer" data-answerid="6581949" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="6581949">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post high-scored-post">2959</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


<div class="bounty-award-container"><span class="bounty-award" title="This answer has been awarded bounties worth 100 reputation by Martijn Pieters">+100</span></div></div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <h1>Classes as objects</h1>

<p>Before understanding metaclasses, you need to master classes in Python. And Python has a very peculiar idea of what classes are, borrowed from the Smalltalk language.</p>

<p>In most languages, classes are just pieces of code that describe how to produce an object. That's kinda true in Python too:</p>

<pre><code>&gt;&gt;&gt; class ObjectCreator(object):
...       pass
... 

&gt;&gt;&gt; my_object = ObjectCreator()
&gt;&gt;&gt; print(my_object)
&lt;__main__.ObjectCreator object at 0x8974f2c&gt;
</code></pre>

<p>But classes are more than that in Python. Classes are objects too.</p>

<p>Yes, objects. </p>

<p>As soon as you use the keyword <code>class</code>, Python executes it and creates
an OBJECT. The instruction</p>

<pre><code>&gt;&gt;&gt; class ObjectCreator(object):
...       pass
... 
</code></pre>

<p>creates in memory an object with the name "ObjectCreator". </p>

<p><strong>This object (the class) is itself capable of creating objects (the instances), 
and this is why it's a class</strong>. </p>

<p>But still, it's an object, and therefore:</p>

<ul>
<li>you can assign it to a variable</li>
<li>you can copy it</li>
<li>you can add attributes to it</li>
<li>you can pass it as a function parameter</li>
</ul>

<p>e.g.:</p>

<pre><code>&gt;&gt;&gt; print(ObjectCreator) # you can print a class because it's an object
&lt;class '__main__.ObjectCreator'&gt;
&gt;&gt;&gt; def echo(o):
...       print(o)
... 
&gt;&gt;&gt; echo(ObjectCreator) # you can pass a class as a parameter
&lt;class '__main__.ObjectCreator'&gt;
&gt;&gt;&gt; print(hasattr(ObjectCreator, 'new_attribute'))
False
&gt;&gt;&gt; ObjectCreator.new_attribute = 'foo' # you can add attributes to a class
&gt;&gt;&gt; print(hasattr(ObjectCreator, 'new_attribute'))
True
&gt;&gt;&gt; print(ObjectCreator.new_attribute)
foo
&gt;&gt;&gt; ObjectCreatorMirror = ObjectCreator # you can assign a class to a variable
&gt;&gt;&gt; print(ObjectCreatorMirror.new_attribute)
foo
&gt;&gt;&gt; print(ObjectCreatorMirror())
&lt;__main__.ObjectCreator object at 0x8997b4c&gt;
</code></pre>

<h1>Creating classes dynamically</h1>

<p>Since classes are objects, you can create them on the fly, like any object.</p>

<p>First, you can create a class in a function using <code>class</code>:</p>

<pre><code>&gt;&gt;&gt; def choose_class(name):
...     if name == 'foo':
...         class Foo(object):
...             pass
...         return Foo # return the class, not an instance
...     else:
...         class Bar(object):
...             pass
...         return Bar
...     
&gt;&gt;&gt; MyClass = choose_class('foo') 
&gt;&gt;&gt; print(MyClass) # the function returns a class, not an instance
&lt;class '__main__.Foo'&gt;
&gt;&gt;&gt; print(MyClass()) # you can create an object from this class
&lt;__main__.Foo object at 0x89c6d4c&gt;
</code></pre>

<p>But it's not so dynamic, since you still have to write the whole class yourself.</p>

<p>Since classes are objects, they must be generated by something.</p>

<p>When you use the <code>class</code> keyword, Python creates this object automatically. But as
with most things in Python, it gives you a way to do it manually.</p>

<p>Remember the function <code>type</code>? The good old function that lets you know what 
type an object is:</p>

<pre><code>&gt;&gt;&gt; print(type(1))
&lt;type 'int'&gt;
&gt;&gt;&gt; print(type("1"))
&lt;type 'str'&gt;
&gt;&gt;&gt; print(type(ObjectCreator))
&lt;type 'type'&gt;
&gt;&gt;&gt; print(type(ObjectCreator()))
&lt;class '__main__.ObjectCreator'&gt;
</code></pre>

<p>Well, <a href="http://docs.python.org/2/library/functions.html#type"><code>type</code></a> has a completely different ability, it can also create classes on 
the fly. <code>type</code> can take the description of a class as parameters, 
and return a class.</p>

<p>(I  know, it's silly that the same function can have two completely different uses
according to the parameters you pass to it. It's an issue due to backwards 
compatibility in Python)</p>

<p><code>type</code> works this way:</p>

<pre><code>type(name of the class, 
     tuple of the parent class (for inheritance, can be empty), 
     dictionary containing attributes names and values)
</code></pre>

<p>e.g.:</p>

<pre><code>&gt;&gt;&gt; class MyShinyClass(object):
...       pass
</code></pre>

<p>can be created manually this way:</p>

<pre><code>&gt;&gt;&gt; MyShinyClass = type('MyShinyClass', (), {}) # returns a class object
&gt;&gt;&gt; print(MyShinyClass)
&lt;class '__main__.MyShinyClass'&gt;
&gt;&gt;&gt; print(MyShinyClass()) # create an instance with the class
&lt;__main__.MyShinyClass object at 0x8997cec&gt;
</code></pre>

<p>You'll notice that we use "MyShinyClass" as the name of the class
and as the variable to hold the class reference. They can be different,
but there is no reason to complicate things.</p>

<p><code>type</code> accepts a dictionary to define the attributes of the class. So:</p>

<pre><code>&gt;&gt;&gt; class Foo(object):
...       bar = True
</code></pre>

<p>Can be translated to:</p>

<pre><code>&gt;&gt;&gt; Foo = type('Foo', (), {'bar':True})
</code></pre>

<p>And used as a normal class:</p>

<pre><code>&gt;&gt;&gt; print(Foo)
&lt;class '__main__.Foo'&gt;
&gt;&gt;&gt; print(Foo.bar)
True
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; print(f)
&lt;__main__.Foo object at 0x8a9b84c&gt;
&gt;&gt;&gt; print(f.bar)
True
</code></pre>

<p>And of course, you can inherit from it, so:</p>

<pre><code>&gt;&gt;&gt;   class FooChild(Foo):
...         pass
</code></pre>

<p>would be:</p>

<pre><code>&gt;&gt;&gt; FooChild = type('FooChild', (Foo,), {})
&gt;&gt;&gt; print(FooChild)
&lt;class '__main__.FooChild'&gt;
&gt;&gt;&gt; print(FooChild.bar) # bar is inherited from Foo
True
</code></pre>

<p>Eventually you'll want to add methods to your class. Just define a function
with the proper signature and assign it as an attribute.</p>

<pre><code>&gt;&gt;&gt; def echo_bar(self):
...       print(self.bar)
... 
&gt;&gt;&gt; FooChild = type('FooChild', (Foo,), {'echo_bar': echo_bar})
&gt;&gt;&gt; hasattr(Foo, 'echo_bar')
False
&gt;&gt;&gt; hasattr(FooChild, 'echo_bar')
True
&gt;&gt;&gt; my_foo = FooChild()
&gt;&gt;&gt; my_foo.echo_bar()
True
</code></pre>

<p>You see where we are going: in Python, classes are objects, and you can create a class on the fly, dynamically.</p>

<p>This is what Python does when you use the keyword <code>class</code>, and it does so by using a metaclass.</p>

<h1>What are metaclasses (finally)</h1>

<p>Metaclasses are the 'stuff' that creates classes.</p>

<p>You define classes in order to create objects, right?</p>

<p>But we learned that Python classes are objects.</p>

<p>Well, metaclasses are what create these objects. They are the classes' classes,
you can picture them this way:</p>

<pre><code>MyClass = MetaClass()
MyObject = MyClass()
</code></pre>

<p>You've seen that <code>type</code> lets you do something like this:</p>

<pre><code>MyClass = type('MyClass', (), {})
</code></pre>

<p>It's because the function <code>type</code> is in fact a metaclass. <code>type</code> is the 
metaclass Python uses to create all classes behind the scenes.</p>

<p>Now you wonder why the heck is it written in lowercase, and not <code>Type</code>?</p>

<p>Well, I guess it's a matter of consistency with <code>str</code>, the class that creates
strings objects, and <code>int</code> the class that creates integer objects. <code>type</code> is
just the class that creates class objects.</p>

<p>You see that by checking the <code>__class__</code> attribute. </p>

<p>Everything, and I mean everything, is an object in Python. That includes ints, 
strings, functions and classes. All of them are objects. And all of them have
been created from a class:</p>

<pre><code>&gt;&gt;&gt; age = 35
&gt;&gt;&gt; age.__class__
&lt;type 'int'&gt;
&gt;&gt;&gt; name = 'bob'
&gt;&gt;&gt; name.__class__
&lt;type 'str'&gt;
&gt;&gt;&gt; def foo(): pass
&gt;&gt;&gt; foo.__class__
&lt;type 'function'&gt;
&gt;&gt;&gt; class Bar(object): pass
&gt;&gt;&gt; b = Bar()
&gt;&gt;&gt; b.__class__
&lt;class '__main__.Bar'&gt;
</code></pre>

<p>Now, what is the <code>__class__</code> of any <code>__class__</code> ?</p>

<pre><code>&gt;&gt;&gt; age.__class__.__class__
&lt;type 'type'&gt;
&gt;&gt;&gt; name.__class__.__class__
&lt;type 'type'&gt;
&gt;&gt;&gt; foo.__class__.__class__
&lt;type 'type'&gt;
&gt;&gt;&gt; b.__class__.__class__
&lt;type 'type'&gt;
</code></pre>

<p>So, a metaclass is just the stuff that creates class objects.</p>

<p>You can call it a 'class factory' if you wish.</p>

<p><code>type</code> is the built-in metaclass Python uses, but of course, you can create your
own metaclass.</p>

<h1>The <a href="http://docs.python.org/2/reference/datamodel.html?highlight=__metaclass__#__metaclass__"><code>__metaclass__</code></a> attribute</h1>

<p>You can add a <code>__metaclass__</code> attribute when you write a class:</p>

<pre><code>class Foo(object):
  __metaclass__ = something...
  [...]
</code></pre>

<p>If you do so, Python will use the metaclass to create the class <code>Foo</code>.</p>

<p>Careful, it's tricky.</p>

<p>You write <code>class Foo(object)</code> first, but the class object <code>Foo</code> is not created
in memory yet.</p>

<p>Python will look for <code>__metaclass__</code> in the class definition. If it finds it,
it will use it to create the object class <code>Foo</code>. If it doesn't, it will use
<code>type</code> to create the class.</p>

<p>Read that several times.</p>

<p>When you do:</p>

<pre><code>class Foo(Bar):
  pass
</code></pre>

<p>Python does the following:</p>

<p>Is there a <code>__metaclass__</code> attribute in <code>Foo</code>?</p>

<p>If yes, create in memory a class object (I said a class object, stay with me here),
with the name <code>Foo</code> by using what is in <code>__metaclass__</code>.</p>

<p>If Python can't find <code>__metaclass__</code>, it will look for a <code>__metaclass__</code> in 
Bar (the parent class), and try to do the same.</p>

<p>If Python can't find <code>__metaclass__</code> in any parent, it will look for 
a <code>__metaclass__</code> at the MODULE level, and try to do the same.</p>

<p>Then if it can't find any <code>__metaclass__</code> at all, it will use <code>type</code>
to create the class object.</p>

<p>Now the big question is, what can you put in <code>__metaclass__</code> ?</p>

<p>The answer is: something that can create a class.</p>

<p>And what can create a class? <code>type</code>, or anything that subclasses or uses it.</p>

<h1>Custom metaclasses</h1>

<p>The main purpose of a metaclass is to change the class automatically,
when it's created.</p>

<p>You usually do this for APIs, where you want to create classes matching the
current context.</p>

<p>Imagine a stupid example, where you decide that all classes in your module
should have their attributes written in uppercase. There are several ways to 
do this, but one way is to set <code>__metaclass__</code> at the module level.</p>

<p>This way, all classes of this module will be created using this metaclass, 
and we just have to tell the metaclass to turn all attributes to uppercase.</p>

<p>Luckily, <code>__metaclass__</code> can actually be any callable, it doesn't need to be a
formal class (I know, something with 'class' in its name doesn't need to be 
a class, go figure... but it's helpful).</p>

<p>So we will start with a simple example, by using a function.</p>

<pre><code># the metaclass will automatically get passed the same argument
# that you usually pass to `type`
def upper_attr(future_class_name, future_class_parents, future_class_attr):
  """
    Return a class object, with the list of its attribute turned 
    into uppercase.
  """

  # pick up any attribute that doesn't start with '__' and uppercase it
  uppercase_attr = {}
  for name, val in future_class_attr.items():
      if not name.startswith('__'):
          uppercase_attr[name.upper()] = val
      else:
          uppercase_attr[name] = val

  # let `type` do the class creation
  return type(future_class_name, future_class_parents, uppercase_attr)

__metaclass__ = upper_attr # this will affect all classes in the module

class Foo(): # global __metaclass__ won't work with "object" though
  # but we can define __metaclass__ here instead to affect only this class
  # and this will work with "object" children
  bar = 'bip'

print(hasattr(Foo, 'bar'))
# Out: False
print(hasattr(Foo, 'BAR'))
# Out: True

f = Foo()
print(f.BAR)
# Out: 'bip'
</code></pre>

<p>Now, let's do exactly the same, but using a real class for a metaclass:</p>

<pre><code># remember that `type` is actually a class like `str` and `int`
# so you can inherit from it
class UpperAttrMetaclass(type): 
    # __new__ is the method called before __init__
    # it's the method that creates the object and returns it
    # while __init__ just initializes the object passed as parameter
    # you rarely use __new__, except when you want to control how the object
    # is created.
    # here the created object is the class, and we want to customize it
    # so we override __new__
    # you can do some stuff in __init__ too if you wish
    # some advanced use involves overriding __call__ as well, but we won't
    # see this
    def __new__(upperattr_metaclass, future_class_name, 
                future_class_parents, future_class_attr):

        uppercase_attr = {}
        for name, val in future_class_attr.items():
            if not name.startswith('__'):
                uppercase_attr[name.upper()] = val
            else:
                uppercase_attr[name] = val

        return type(future_class_name, future_class_parents, uppercase_attr)
</code></pre>

<p>But this is not really OOP. We call <code>type</code> directly and we don't override
call the parent <code>__new__</code>. Let's do it:</p>

<pre><code>class UpperAttrMetaclass(type): 

    def __new__(upperattr_metaclass, future_class_name, 
                future_class_parents, future_class_attr):

        uppercase_attr = {}
        for name, val in future_class_attr.items():
            if not name.startswith('__'):
                uppercase_attr[name.upper()] = val
            else:
                uppercase_attr[name] = val

        # reuse the type.__new__ method
        # this is basic OOP, nothing magic in there
        return type.__new__(upperattr_metaclass, future_class_name, 
                            future_class_parents, uppercase_attr)
</code></pre>

<p>You may have noticed the extra argument <code>upperattr_metaclass</code>. There is
nothing special about it: a method always receives the current instance as
first parameter. Just like you have <code>self</code> for ordinary methods.</p>

<p>Of course, the names I used here are long for the sake of clarity, but like
for <code>self</code>, all the arguments have conventional names. So a real production
metaclass would look like this:</p>

<pre><code>class UpperAttrMetaclass(type): 

    def __new__(cls, clsname, bases, dct):

        uppercase_attr = {}
        for name, val in dct.items():
            if not name.startswith('__'):
                uppercase_attr[name.upper()] = val
            else:
                uppercase_attr[name] = val

        return type.__new__(cls, clsname, bases, uppercase_attr)
</code></pre>

<p>We can make it even cleaner by using <code>super</code>, which will ease inheritance (because
yes, you can have metaclasses, inheriting from metaclasses, inheriting from type):</p>

<pre><code>class UpperAttrMetaclass(type): 

    def __new__(cls, clsname, bases, dct):

        uppercase_attr = {}
        for name, val in dct.items():
            if not name.startswith('__'):
                uppercase_attr[name.upper()] = val
            else:
                uppercase_attr[name] = val

        return super(UpperAttrMetaclass, cls).__new__(cls, clsname, bases, uppercase_attr)
</code></pre>

<p>That's it. There is really nothing more about metaclasses.</p>

<p>The reason behind the complexity of the code using metaclasses is not because
of metaclasses, it's because you usually use metaclasses to do twisted stuff
relying on introspection, manipulating inheritance, vars such as <code>__dict__</code>, etc.</p>

<p>Indeed, metaclasses are especially useful to do black magic, and therefore
complicated stuff. But by themselves, they are simple:</p>

<ul>
<li>intercept a class creation</li>
<li>modify the class</li>
<li>return the modified class</li>
</ul>

<h1>Why would you use metaclasses classes instead of functions?</h1>

<p>Since <code>__metaclass__</code> can accept any callable, why would you use a class
since it's obviously more complicated?</p>

<p>There are several reasons to do so:</p>

<ul>
<li>The intention is clear. When you read <code>UpperAttrMetaclass(type)</code>, you know
what's going to follow</li>
<li>You can use OOP. Metaclass can inherit from metaclass, override parent methods.
Metaclasses can even use metaclasses.</li>
<li>You can structure your code better. You never use metaclasses for something as
trivial as the above example. It's usually for something complicated. Having the
ability to make several methods and group them in one class is very useful
to make the code easier to read.</li>
<li>You can hook on <code>__new__</code>, <code>__init__</code> and <code>__call__</code>. Which will allow
you to do different stuff. Even if usually you can do it all in <code>__new__</code>, 
some people are just more comfortable using <code>__init__</code>.</li>
<li>These are called metaclasses, damn it! It must mean something!</li>
</ul>

<h1>Why the hell would you use metaclasses?</h1>

<p>Now the big question. Why would you use some obscure error prone feature?</p>

<p>Well, usually you don't:</p>

<blockquote>
  <p>Metaclasses are deeper magic than
  99% of users should never worry about.
  If you wonder whether you need them,
  you don't (the people who actually
  need them know with certainty that
  they need them, and don't need an
  explanation about why). </p>
</blockquote>

<p><em>Python Guru Tim Peters</em></p>

<p>The main use case for a metaclass is creating an API. A typical example of this is the Django ORM.</p>

<p>It allows you to define something like this:</p>

<pre><code>class Person(models.Model):
  name = models.CharField(max_length=30)
  age = models.IntegerField()
</code></pre>

<p>But if you do this:</p>

<pre><code>guy = Person(name='bob', age='35')
print(guy.age)
</code></pre>

<p>It won't return an <code>IntegerField</code> object. It will return an <code>int</code>, and can even take it directly from the database.</p>

<p>This is possible because <code>models.Model</code> defines <code>__metaclass__</code> and 
it uses some magic that will turn the <code>Person</code> you just defined with simple statements
into a complex hook to a database field. </p>

<p>Django makes something complex look simple by exposing a simple API
and using metaclasses, recreating code from this API to do the real job
behind the scenes.</p>

<h1>The last word</h1>

<p>First, you know that classes are objects that can create instances.</p>

<p>Well in fact, classes are themselves instances. Of metaclasses.</p>

<pre><code>&gt;&gt;&gt; class Foo(object): pass
&gt;&gt;&gt; id(Foo)
142630324
</code></pre>

<p>Everything is an object in Python, and they are all either instances of classes
or instances of metaclasses.</p>

<p>Except for <code>type</code>.</p>

<p><code>type</code> is actually its own metaclass. This is not something you could
reproduce in pure Python, and is done by cheating a little bit at the implementation
level.</p>

<p>Secondly, metaclasses are complicated. You may not want to use them for 
very simple class alterations. You can change classes by using two different techniques:</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Monkey_patch">monkey patching</a></li>
<li>class decorators</li>
</ul>

<p>99% of the time you need class alteration, you are better off using these.</p>

<p>But 99% of the time, you don't need class alteration at all.</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/6581949" title="short permalink to this answer" class="short-link" id="link-post-6581949">share</a><span class="lsep">|</span><a href="/posts/6581949/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info ">
    <div class="user-action-time">
        <a href="/posts/6581949/revisions" title="show all edits to this post">edited <span title="2014-03-27 14:33:13Z" class="relativetime">Mar 27 at 14:33</span></a>
    </div>
    <div class="user-gravatar32">
        
    </div>
    <div class="user-details">
        <br>
        
    </div>
</div>    </td>
            


    <td align="right" class="post-signature owner">   
       

    <div class="user-info">
    <div class="user-details">
        <span class="community-wiki" title="This post is community owned as of Aug 9 &#39;11 at 9:41. Votes do not generate reputation, and it can be edited by users with 100 rep">
            community wiki
        </span>
    </div><br>
    <div class="user-details">
        <a id="history-6581949" href="/posts/6581949/revisions" title="show revision history for this post">
        34 revs, 26 users 82%<br><a href="/users/9951">e-satis</a>
        </a>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-6581949" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="28" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-8229331" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="hot">18</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">@eddy147: sorry for being pedantic but Javascript has prototypes not classes.</span>
                &ndash;&nbsp;
                    <a href="/users/247623/erik-allik"
                       title="9054 reputation"
                       class="comment-user">Erik Allik</a>
                <span class="comment-date" dir="ltr"><span title="2011-08-02 09:53:07Z" class="relativetime-clean">Aug 2 '11 at 9:53</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-8338172" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">11</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">Class Bar(object) inherits from <code>object</code>. Python introduced new classes features and found this way to make it backward compatible. Unless you are dealing with a very old Python version, you always want to inherit from <code>object</code> because you&#39;ll get the new class behavior with it. In Python 3, all classes are going to be new classes and you won&#39;t need to do this anymore.</span>
                &ndash;&nbsp;
                    <a href="/users/9951/e-satis"
                       title="144801 reputation"
                       class="comment-user owner">e-satis</a>
                <span class="comment-date" dir="ltr"><span title="2011-08-08 19:20:04Z" class="relativetime-clean">Aug 8 '11 at 19:20</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-10567210" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">10</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">I&#39;d rather write a book later including several of topics like this.</span>
                &ndash;&nbsp;
                    <a href="/users/9951/e-satis"
                       title="144801 reputation"
                       class="comment-user owner">e-satis</a>
                <span class="comment-date" dir="ltr"><span title="2011-12-16 09:36:49Z" class="relativetime-clean">Dec 16 '11 at 9:36</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-12037662" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="supernova">41</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">I read this and think of the famous &quot;There are lies, damned lies, and then there is statistics&quot;, but instead think of it as &quot;there are hacks, tricks, voodoo magic, dark arts, and then there are Python metaclasses&quot;.  Amazing write-up of an extremely complicated topic.</span>
                &ndash;&nbsp;
                    <a href="/users/808804/adam-parkin"
                       title="1930 reputation"
                       class="comment-user">Adam Parkin</a>
                <span class="comment-date" dir="ltr"><span title="2012-02-29 20:08:43Z" class="relativetime-clean">Feb 29 '12 at 20:08</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-27106828" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="warm">9</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">All other articles on the net are TL;DR. And this is why nobody understood them. And this is why this article is such a success. I&#39;m not sure putting any kind of short explanation would help anybody.</span>
                &ndash;&nbsp;
                    <a href="/users/9951/e-satis"
                       title="144801 reputation"
                       class="comment-user owner">e-satis</a>
                <span class="comment-date" dir="ltr"><span title="2013-08-26 14:58:26Z" class="relativetime-clean">Aug 26 '13 at 14:58</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-6581949" data-rep=50 data-anon=true
			   class="comments-link " 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>show <b>28</b> more comments</a>
    </td>
</tr>    </table>
</div>

  
<a name="100037"></a>
<div id="answer-100037" class="answer" data-answerid="100037" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="100037">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">120</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>Metaclasses are the secret sauce that make 'class' work. The default metaclass for a new style object is called 'type'.</p>

<pre class="lang-none prettyprint-override"><code>class type(object)
  |  type(object) -&gt; the object's type
  |  type(name, bases, dict) -&gt; a new type
</code></pre>

<p>Metaclasses take 3 args. '<strong>name</strong>', '<strong>bases</strong>' and '<strong>dict</strong>'</p>

<p>Here is where the secret starts. Look for where name, bases and the dict come from in this example class definition.</p>

<pre><code>class ThisIsTheName(Bases, Are, Here):
    All_the_code_here
    def doesIs(create, a):
        dict
</code></pre>

<p>Lets define a metaclass that will demonstrate how '<strong>class:</strong>' calls it.</p>

<pre><code>def test_metaclass(name, bases, dict):
    print 'The Class Name is', name
    print 'The Class Bases are', bases
    print 'The dict has', len(dict), 'elems, the keys are', dict.keys()

    return "yellow"

class TestName(object, None, int, 1):
    __metaclass__ = test_metaclass
    foo = 1
    def baz(self, arr):
        pass

print 'TestName = ', repr(TestName)

# output =&gt; 
The Class Name is TestName
The Class Bases are (&lt;type 'object'&gt;, None, &lt;type 'int'&gt;, 1)
The dict has 4 elems, the keys are ['baz', '__module__', 'foo', '__metaclass__']
TestName =  'yellow'
</code></pre>

<p>And now, an example that actually means something, this will automatically make the variables in the list "attributes" set on the class, and set to None.</p>

<pre><code>def init_attributes(name, bases, dict):
    if 'attributes' in dict:
        for attr in dict['attributes']:
            dict[attr] = None

    return type(name, bases, dict)

class Initialised(object):
    __metaclass__ = init_attributes
    attributes = ['foo', 'bar', 'baz']

print 'foo =&gt;', Initialised.foo
# output=&gt;
foo =&gt; None
</code></pre>

<p>Note that the magic behaviour that 'Initalised' gains by having the metaclass init_attributes is not passed onto a subclass of Initalised.</p>

<p>Here is an even more concrete example, showing how you can subclass 'type' to make a metaclass that performs an action when the class is created. This is quite tricky:</p>

<pre><code>class MetaSingleton(type):
    instance = None
    def __call__(cls, *args, **kw):
        if cls.instance is None:
            cls.instance = super(MetaSingleton, cls).__call__(*args, **kw)
        return cls.instance

 class Foo(object):
     __metaclass__ = MetaSingleton

 a = Foo()
 b = Foo()
 assert a is b
</code></pre>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/100037" title="short permalink to this answer" class="short-link" id="link-post-100037">share</a><span class="lsep">|</span><a href="/posts/100037/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info user-hover">
    <div class="user-action-time">
        <a href="/posts/100037/revisions" title="show all edits to this post">edited <span title="2013-08-12 14:38:04Z" class="relativetime">Aug 12 '13 at 14:38</span></a>
    </div>
    <div class="user-gravatar32">
        <a href="/users/355230/martineau"><div class="gravatar-wrapper-32"><img src="http://i.stack.imgur.com/VjcbL.jpg?s=32&g=1" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/355230/martineau">martineau</a><br>
        <span class="reputation-score" title="reputation score 20907" dir="ltr">20.9k</span><span title="2 gold badges"><span class="badge1"></span><span class="badgecount">2</span></span><span title="25 silver badges"><span class="badge2"></span><span class="badgecount">25</span></span><span title="49 bronze badges"><span class="badge3"></span><span class="badgecount">49</span></span>
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2008-09-19 06:26:10Z" class="relativetime">Sep 19 '08 at 6:26</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/14648/jerub"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/84965d0d894b45875d8045bc5762ba57?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/14648/jerub">Jerub</a><br>
        <span class="reputation-score" title="reputation score 17334" dir="ltr">17.3k</span><span title="8 gold badges"><span class="badge1"></span><span class="badgecount">8</span></span><span title="45 silver badges"><span class="badge2"></span><span class="badgecount">45</span></span><span title="71 bronze badges"><span class="badge3"></span><span class="badgecount">71</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-100037" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-16703" class="comment ">
        <td class="comment-actions">
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                <span title="number of &#39;useful comment&#39; votes received"
                                      class="cool">4</span>
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">To make the magic behavior happen for subclasses of Initialised, you&#39;d have to subclass &#39;type&#39; and override <b>init</b>. This is covered in the ONLamp tutorial linked in a different answer.</span>
                &ndash;&nbsp;
                    <a href="/users/10999/habnabit"
                       title="4175 reputation"
                       class="comment-user">habnabit</a>
                <span class="comment-date" dir="ltr"><span title="2008-09-19 06:39:31Z" class="relativetime-clean">Sep 19 '08 at 6:39</span></span>
                                                                            </div>
                    </td>
    </tr>
    <tr id="comment-34684539" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">You need to initialize instance = None inside class Foo(object) first or inside <b>call</b> of MetaSingleton</span>
                &ndash;&nbsp;
                    <a href="/users/587088/aro"
                       title="1201 reputation"
                       class="comment-user">Aro</a>
                <span class="comment-date" dir="ltr"><span title="2014-03-31 04:58:16Z" class="relativetime-clean">Mar 31 at 4:58</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-100037" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="100091"></a>
<div id="answer-100091" class="answer" data-answerid="100091" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="100091">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">45</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>One use for metaclasses is adding new properties and methods to an instance automatically.</p>

<p>For example, if you look at <a href="http://docs.djangoproject.com/en/dev/topics/db/models/">Django models</a>, their definition looks a bit confusing. It looks as if you are only defining class properties:</p>

<pre><code>class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
</code></pre>

<p>However, at runtime the Person objects are filled with all sorts of useful methods. See the <a href="http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py">source</a> for some amazing metaclassery.</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/100091" title="short permalink to this answer" class="short-link" id="link-post-100091">share</a><span class="lsep">|</span><a href="/posts/100091/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info user-hover">
    <div class="user-action-time">
        answered <span title="2008-09-19 06:45:40Z" class="relativetime">Sep 19 '08 at 6:45</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/8570/antti-rasinen"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/c81dee2ef36d2c0d115aebfc660b2f1f?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/8570/antti-rasinen">Antti Rasinen</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">2,817</span><span title="1 gold badge"><span class="badge1"></span><span class="badgecount">1</span></span><span title="11 silver badges"><span class="badge2"></span><span class="badgecount">11</span></span><span title="18 bronze badges"><span class="badge3"></span><span class="badgecount">18</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-100091" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-100091" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="100059"></a>
<div id="answer-100059" class="answer" data-answerid="100059" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="100059">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">32</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>I think the ONLamp introduction to metaclass programming is well written and gives a really good introduction to the topic despite being several years old already.</p>

<p><a href="http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html">http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html</a></p>

<p>In short: A class is a blueprint for the creation of an instance, a metaclass is a blueprint for the creation of a class. It can be easily seen that in Python classes need to be first-class objects too to enable this behavior.</p>

<p>I've never written one myself, but I think one of the nicest uses of metaclasses can be seen in the <a href="http://www.djangoproject.com/">Django framework</a>. The model classes use a metaclass approach to enable a declarative style of writing new models or form classes. While the metaclass is creating the class, all members get the possibility to customize the class itself.</p>

<ul>
<li><a href="http://docs.djangoproject.com/en/dev/intro/tutorial01/#id3">Creating a new model</a></li>
<li><a href="http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py#L25">The metaclass enabling this</a></li>
</ul>

<p>The thing that's left to say is: If you don't know what metaclasses are, the probability that you <strong>will not need them</strong> is 99%.</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/100059" title="short permalink to this answer" class="short-link" id="link-post-100059">share</a><span class="lsep">|</span><a href="/posts/100059/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info user-hover">
    <div class="user-action-time">
        <a href="/posts/100059/revisions" title="show all edits to this post">edited <span title="2010-02-03 14:36:54Z" class="relativetime">Feb 3 '10 at 14:36</span></a>
    </div>
    <div class="user-gravatar32">
        <a href="/users/11828/james-hopkin"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/30460bd73df70a706409737e596a2ed9?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/11828/james-hopkin">James Hopkin</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">8,228</span><span title="1 gold badge"><span class="badge1"></span><span class="badgecount">1</span></span><span title="17 silver badges"><span class="badge2"></span><span class="badgecount">17</span></span><span title="44 bronze badges"><span class="badge3"></span><span class="badgecount">44</span></span>
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2008-09-19 06:32:58Z" class="relativetime">Sep 19 '08 at 6:32</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/317346/matthias-kestenholz"><div><img src="https://www.gravatar.com/avatar/57c30682829c0d396e9c0dcb49490abe?s=32&d=identicon&r=PG&f=1" alt="" width="32" height="32"></div></a>
    </div>
    <div class="user-details">
        <a href="/users/317346/matthias-kestenholz">Matthias Kestenholz</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">1,311</span><span title="7 silver badges"><span class="badge2"></span><span class="badgecount">7</span></span><span title="13 bronze badges"><span class="badge3"></span><span class="badgecount">13</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-100059" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-100059" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="6428779"></a>
<div id="answer-6428779" class="answer" data-answerid="6428779" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="6428779">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">32</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>Others have explained how metaclasses work and how they fit into the Python type system. Here's an example of what they can be used for. In a testing framework I wrote, I wanted to keep track of the order in which classes were defined, so that I could later instantiate them in this order. I found it easiest to do this using a metaclass.</p>

<pre><code>class MyMeta(type):

    counter = 0

    def __init__(cls, name, bases, dic):
        type.__init__(cls, name, bases, dic)
        cls._order = MyMeta.counter
        MyMeta.counter += 1

class MyType(object):

    __metaclass__ = MyMeta
</code></pre>

<p>Anything that's a subclass of <code>MyType</code> then gets a class attribute <code>_order</code> that records the order in which the classes were defined.</p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/6428779" title="short permalink to this answer" class="short-link" id="link-post-6428779">share</a><span class="lsep">|</span><a href="/posts/6428779/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info ">
    <div class="user-action-time">
        <a href="/posts/6428779/revisions" title="show all edits to this post">edited <span title="2013-12-03 22:45:39Z" class="relativetime">Dec 3 '13 at 22:45</span></a>
    </div>
    <div class="user-gravatar32">
        
    </div>
    <div class="user-details">
        <br>
        
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info user-hover">
    <div class="user-action-time">
        answered <span title="2011-06-21 16:30:26Z" class="relativetime">Jun 21 '11 at 16:30</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/416467/kindall"><div class="gravatar-wrapper-32"><img src="https://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=32&d=identicon&r=PG" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/416467/kindall">kindall</a><br>
        <span class="reputation-score" title="reputation score 59530" dir="ltr">59.5k</span><span title="6 gold badges"><span class="badge1"></span><span class="badgecount">6</span></span><span title="56 silver badges"><span class="badge2"></span><span class="badgecount">56</span></span><span title="107 bronze badges"><span class="badge3"></span><span class="badgecount">107</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-6428779" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-6428779" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="6987569"></a>
<div id="answer-6987569" class="answer" data-answerid="6987569" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="6987569">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">22</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>The best metaclass explanation I have read is "Metaclasses Demystified"  <a href="http://cleverdevil.org/computing/78/">http://cleverdevil.org/computing/78/</a>, which originally appeared in Python Magazine.</p>

<p>EDIT: Here's an archived version of it until Jonathan's site is fixed:</p>

<p><a href="http://web.archive.org/web/20120503014702/http://cleverdevil.org/computing/78/">http://web.archive.org/web/20120503014702/http://cleverdevil.org/computing/78/</a></p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/6987569" title="short permalink to this answer" class="short-link" id="link-post-6987569">share</a><span class="lsep">|</span><a href="/posts/6987569/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info ">
    <div class="user-action-time">
        <a href="/posts/6987569/revisions" title="show all edits to this post">edited <span title="2013-03-21 07:59:25Z" class="relativetime">Mar 21 '13 at 7:59</span></a>
    </div>
    <div class="user-gravatar32">
        
    </div>
    <div class="user-details">
        <br>
        
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info user-hover">
    <div class="user-action-time">
        answered <span title="2011-08-08 19:35:40Z" class="relativetime">Aug 8 '11 at 19:35</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/161085/espeed"><div class="gravatar-wrapper-32"><img src="http://i.stack.imgur.com/BEB2f.jpg?s=32&g=1" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/161085/espeed">espeed</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">2,756</span><span title="12 silver badges"><span class="badge2"></span><span class="badgecount">12</span></span><span title="28 bronze badges"><span class="badge3"></span><span class="badgecount">28</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-6987569" class="comments " data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">

    <tr id="comment-21727107" class="comment ">
        <td>
            <table>
                <tbody>
                    <tr>
                        <td class=" comment-score">
                                &nbsp;&nbsp;
                        </td>
                        <td>
                                &nbsp;
                        </td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td class="comment-text">
            <div style="display: block;" class="comment-body">
                <span class="comment-copy">The link is dead.</span>
                &ndash;&nbsp;
                    <a href="/users/446921/muhd"
                       title="2798 reputation"
                       class="comment-user">Muhd</a>
                <span class="comment-date" dir="ltr"><span title="2013-03-12 23:56:33Z" class="relativetime-clean">Mar 12 '13 at 23:56</span></span>
                                                                            </div>
                    </td>
    </tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-6987569" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="21999253"></a>
<div id="answer-21999253" class="answer" data-answerid="21999253" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="21999253">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">2</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>I had a really complicated problem, that probably could have been solved differently, but I chose to solve it using a metaclass.  Because of the complexity, it is one of the few modules I have written where the comments in the module surpass the amount of code that has been written.  Here it is...</p>

<pre><code>#!/usr/bin/env python

# Copyright (C) 2013-2014 Craig Phillips.  All rights reserved.

# This requires some explaining.  The point of this metaclass excercise is to
# create a static abstract class that is in one way or another, dormant until
# queried.  I experimented with creating a singlton on import, but that did
# not quite behave how I wanted it to.  See now here, we are creating a class
# called GsyncOptions, that on import, will do nothing except state that its
# class creator is GsyncOptionsType.  This means, docopt doesn't parse any
# of the help document, nor does it start processing command line options.
# So importing this module becomes really efficient.  The complicated bit
# comes from requiring the GsyncOptions class to be static.  By that, I mean
# any property on it, may or may not exist, since they are not statically
# defined; so I can't simply just define the class with a whole bunch of
# properties that are @property @staticmethods.
#
# So here's how it works:
#
# Executing 'from libgsync.options import GsyncOptions' does nothing more
# than load up this module, define the Type and the Class and import them
# into the callers namespace.  Simple.
#
# Invoking 'GsyncOptions.debug' for the first time, or any other property
# causes the __metaclass__ __getattr__ method to be called, since the class
# is not instantiated as a class instance yet.  The __getattr__ method on
# the type then initialises the class (GsyncOptions) via the __initialiseClass
# method.  This is the first and only time the class will actually have its
# dictionary statically populated.  The docopt module is invoked to parse the
# usage document and generate command line options from it.  These are then
# paired with their defaults and what's in sys.argv.  After all that, we
# setup some dynamic properties that could not be defined by their name in
# the usage, before everything is then transplanted onto the actual class
# object (or static class GsyncOptions).
#
# Another piece of magic, is to allow command line options to be set in
# in their native form and be translated into argparse style properties.
#
# Finally, the GsyncListOptions class is actually where the options are
# stored.  This only acts as a mechanism for storing options as lists, to
# allow aggregation of duplicate options or options that can be specified
# multiple times.  The __getattr__ call hides this by default, returning the
# last item in a property's list.  However, if the entire list is required,
# calling the 'list()' method on the GsyncOptions class, returns a reference
# to the GsyncListOptions class, which contains all of the same properties
# but as lists and without the duplication of having them as both lists and
# static singlton values.
#
# So this actually means that GsyncOptions is actually a static proxy class...
#
# ...And all this is neatly hidden within a closure for safe keeping.
def GetGsyncOptionsType():
    class GsyncListOptions(object):
        __initialised = False

    class GsyncOptionsType(type):
        def __initialiseClass(cls):
            if GsyncListOptions._GsyncListOptions__initialised: return

            from docopt import docopt
            from libgsync.options import doc
            from libgsync import __version__

            options = docopt(
                doc.__doc__ % __version__,
                version = __version__,
                options_first = True
            )

            paths = options.pop('&lt;path&gt;', None)
            setattr(cls, "destination_path", paths.pop() if paths else None)
            setattr(cls, "source_paths", paths)
            setattr(cls, "options", options)

            for k, v in options.iteritems():
                setattr(cls, k, v)

            GsyncListOptions._GsyncListOptions__initialised = True

        def list(cls):
            return GsyncListOptions

        def __getattr__(cls, name):
            cls.__initialiseClass()
            return getattr(GsyncListOptions, name)[-1]

        def __setattr__(cls, name, value):
            # Substitut option names: --an-option-name for an_option_name
            import re
            name = re.sub(r'^__', "", re.sub(r'-', "_", name))
            listvalue = []

            # Ensure value is converted to a list type for GsyncListOptions
            if isinstance(value, list):
                if value:
                    listvalue = [] + value
                else:
                    listvalue = [ None ]
            else:
                listvalue = [ value ]

            type.__setattr__(GsyncListOptions, name, listvalue)

    # Cleanup this module to prevent tinkering.
    import sys
    module = sys.modules[__name__]
    del module.__dict__['GetGsyncOptionsType']

    return GsyncOptionsType

# Our singlton abstract proxy class.
class GsyncOptions(object):
    __metaclass__ = GetGsyncOptionsType()
</code></pre>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/21999253" title="short permalink to this answer" class="short-link" id="link-post-21999253">share</a><span class="lsep">|</span><a href="/posts/21999253/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">
<div class="user-info ">
    <div class="user-action-time">
        <a href="/posts/21999253/revisions" title="show all edits to this post">edited <span title="2014-02-24 21:33:17Z" class="relativetime">Feb 24 at 21:33</span></a>
    </div>
    <div class="user-gravatar32">
        
    </div>
    <div class="user-details">
        <br>
        
    </div>
</div>    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info">
    <div class="user-details">
        <span class="community-wiki" title="This post is community owned as of Feb 24 at 21:20. Votes do not generate reputation, and it can be edited by users with 100 rep">
            community wiki
        </span>
    </div><br>
    <div class="user-details">
        <a id="history-21999253" href="/posts/21999253/revisions" title="show revision history for this post">
        2 revs<br><a href="/users/1489354">Craig</a>
        </a>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-21999253" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-21999253" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>

  
<a name="23504478"></a>
<div id="answer-23504478" class="answer" data-answerid="23504478" >
    <table>
        <tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" name="_id_" value="23504478">
    <a class="vote-up-off" title="This answer is useful">up vote</a>
    <span class="vote-count-post ">1</span>
    <a class="vote-down-off" title="This answer is not useful">down vote</a>
    


</div>

            </td>
            


<td class="answercell">
    <div class="post-text">
            <p>Nice explanation of Python classes, objects, and metaclasses:</p>

<p><a href="http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html" rel="nofollow">http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html</a></p>

    </div>
    <table class="fw">
    <tr>
    <td class="vt">
<div class="post-menu"><a href="/a/23504478" title="short permalink to this answer" class="short-link" id="link-post-23504478">share</a><span class="lsep">|</span><a href="/posts/23504478/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    <div class="user-info ">
    <div class="user-action-time">
        answered <span title="2014-05-06 21:03:36Z" class="relativetime">May 6 at 21:03</span>
    </div>
    <div class="user-gravatar32">
        <a href="/users/2102559/reloader"><div class="gravatar-wrapper-32"><img src="http://i.stack.imgur.com/wtFN5.jpg?s=32&g=1" alt=""></div></a>
    </div>
    <div class="user-details">
        <a href="/users/2102559/reloader">Reloader</a><br>
        <span class="reputation-score" title="reputation score " dir="ltr">466</span><span title="1 silver badge"><span class="badge2"></span><span class="badgecount">1</span></span><span title="11 bronze badges"><span class="badge3"></span><span class="badgecount">11</span></span>
    </div>
</div>
    </td>
    </tr>
    </table>
</td>
        </tr>
        
<tr>
    <td class="votecell"></td>
    <td>
	    <div id="comments-23504478" class="comments  dno" data-localized="true">
		    <table>
			    <tbody data-remaining-comments-count="0" 
			           data-addlink-html="add comment" 
			           data-addlink-disabled="true">
					    <tr><td></td><td></td></tr>
			    </tbody>
		    </table>
	    </div>
			<a id="comments-link-23504478" data-rep=50 data-anon=true
			   class="comments-link disabled-link" 
			   title="Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”." 
				>add comment</a>
    </td>
</tr>    </table>
</div>
				<div class="question-status">
        <h2>                    <b>protected</b> by <a href="/users/192247/missingfaktor">missingfaktor</a> <span title="2012-10-18 18:42:40Z" class="relativetime">Oct 18 '12 at 18:42</span>
</h2>
        <p>
Thank you for your interest in this question. 
Because it has attracted low-quality answers, posting an answer now requires 10 <a href="/help/whats-reputation">reputation</a> on this site.
<br /><br />
Would you like to answer one of these <a href="/unanswered?fromProtectedNotice=true">unanswered questions</a> instead?
</p>
    </div>


						<h2 class="bottom-notice" data-loc="1">
Not the answer you&#39;re looking for?							Browse other questions tagged <a href="/questions/tagged/python" class="post-tag" title="show questions tagged &#39;python&#39;" rel="tag">python</a> <a href="/questions/tagged/oop" class="post-tag" title="show questions tagged &#39;oop&#39;" rel="tag">oop</a> <a href="/questions/tagged/metaclass" class="post-tag" title="show questions tagged &#39;metaclass&#39;" rel="tag">metaclass</a> <a href="/questions/tagged/python-datamodel" class="post-tag" title="show questions tagged &#39;python-datamodel&#39;" rel="tag">python-datamodel</a>  or <a href="/questions/ask">ask your own question</a>.						</h2>
			</div>
		</div>
				<div id="sidebar" class="show-votes">
						    <div class="module question-stats">
			        <table id="qinfo">
			            <tr>
			                <td>
			                    <p class="label-key">asked</p>
			                </td>
			                <td style="padding-left: 10px">
			                    <p class="label-key" title="2008-09-19 06:10:46Z"><b>5 years ago</b></p>
			                </td>
			            </tr>
			            <tr>
			                <td>
			                    <p class="label-key">viewed</p>
			                </td>

			                <td style="padding-left: 10px">
			                    <p class="label-key">
			                        <b>236650 times</b>
			                    </p>
			                </td>
			            </tr>
			                <tr>
			                    <td>
			                        <p class="label-key">active</p>
			                    </td>
			                    <td style="padding-left: 10px">
			                        <p class="label-key"><b><a href="?lastactivity" class="lastactivity-link" title="2014-05-06 21:03:36Z">1 month ago</a></b></p>
			                    </td>
			                </tr>
			        </table>
			    </div>
						
			<script>
                var ados = ados || {};ados.run = ados.run || [];
                ados.run.push(function() { ados_add_placement(22,8277,"adzerk254121828",17).setZone(45) ; });                    
            </script>
            <div class="everyonelovesstackoverflow" id="adzerk254121828">
            </div>  
    <div id="hireme">
        <script>
window.careers_adurl="//careers.stackoverflow.com/gethired/js",window.careers_cssurl="//cdn-careers.sstatic.net/careers/gethired/sidebar.min.css?v=88f3fd5e2263",window.careers_leaderboardcssurl="{leaderboardcssurl}",window.careers_companycssurl="//cdn-careers.sstatic.net/careers/gethired/company",window.careers_adselector="div#hireme",StackExchange.ready(function(){$.ajax({url:"//cdn-careers.sstatic.net/careers/gethired/loader.min.js?v=77944c6f6aca",dataType:"script",cache:!0})});        </script>
    </div>
			  
    
            <div class="module sidebar-linked">
	<h4 id="h-linked">Linked</h4>
	<div class="linked" data-tracker="lq=1">
<div class="spacer">
	<a href="/q/18126552" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">7</div>
	</a>
	<a href="/questions/18126552/python-run-code-when-a-class-is-subclassed" class="question-hyperlink">Python: Run code when a class is subclassed</a>
</div><div class="spacer">
	<a href="/q/17801344" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">5</div>
	</a>
	<a href="/questions/17801344/python-understanding-metaclass-and-inheritance" class="question-hyperlink">Python : Understanding metaclass and inheritance</a>
</div><div class="spacer">
	<a href="/q/19463598" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">0</div>
	</a>
	<a href="/questions/19463598/how-are-python-metaclasses-different-from-regular-class-inheritance" class="question-hyperlink">How are Python metaclasses different from regular class inheritance?</a>
</div><div class="spacer">
	<a href="/q/16377453" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes  default">4</div>
	</a>
	<a href="/questions/16377453/why-are-django-model-classes-not-of-type-type" class="question-hyperlink">Why are django model classes not of type &ldquo;type&rdquo;?</a>
</div><div class="spacer">
	<a href="/q/101268" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes  extra-large">1422</div>
	</a>
	<a href="/questions/101268/hidden-features-of-python" class="question-hyperlink">Hidden features of Python</a>
</div><div class="spacer">
	<a href="/q/11227809" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted extra-large">8109</div>
	</a>
	<a href="/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array" class="question-hyperlink">Why is processing a sorted array faster than an unsorted array?</a>
</div><div class="spacer">
	<a href="/q/111234" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">87</div>
	</a>
	<a href="/questions/111234/what-is-a-callable-in-python" class="question-hyperlink">What is a &ldquo;callable&rdquo; in Python?</a>
</div><div class="spacer">
	<a href="/q/6760685" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">84</div>
	</a>
	<a href="/questions/6760685/creating-a-singleton-in-python" class="question-hyperlink">Creating a singleton in python</a>
</div><div class="spacer">
	<a href="/q/566865" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">15</div>
	</a>
	<a href="/questions/566865/python-am-i-missing-something" class="question-hyperlink">Python: Am I missing something?</a>
</div><div class="spacer">
	<a href="/q/245192" title="Vote score (upvotes - downvotes)">
		<div class="answer-votes answered-accepted default">49</div>
	</a>
	<a href="/questions/245192/what-are-first-class-objects" class="question-hyperlink">What are &ldquo;first class&rdquo; objects?</a>
</div>					<div class="spacer more">
				<a href="http://stackoverflow.com/questions/linked/100003">see more linked questions…</a>
			</div>
	</div>
</div>

				<div class="module sidebar-related">
					<h4 id="h-related">Related</h4>
                    <div class="related js-gps-related-questions" data-tracker="rq=1">
                        <div class="spacer">
<a href="/q/81584" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes extra-large">1033
    </div>
</a><a href="/questions/81584/what-ide-to-use-for-python" class="question-hyperlink">What IDE to use for Python?</a>
</div>
<div class="spacer">
<a href="/q/392160" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">31
    </div>
</a><a href="/questions/392160/what-are-your-concrete-use-cases-for-metaclasses-in-python" class="question-hyperlink">What are your (concrete) use-cases for metaclasses in Python?</a>
</div>
<div class="spacer">
<a href="/q/510972" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted large">341
    </div>
</a><a href="/questions/510972/getting-the-class-name-of-an-instance-in-python" class="question-hyperlink">Getting the class name of an instance in Python</a>
</div>
<div class="spacer">
<a href="/q/618960" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes default">5
    </div>
</a><a href="/questions/618960/python-metaclasses" class="question-hyperlink">Python metaclasses</a>
</div>
<div class="spacer">
<a href="/q/818483" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">5
    </div>
</a><a href="/questions/818483/shouldnt-metaclass-force-the-use-of-a-metaclass-in-python" class="question-hyperlink">Shouldn&#39;t __metaclass__ force the use of a metaclass in Python?</a>
</div>
<div class="spacer">
<a href="/q/2005878" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">22
    </div>
</a><a href="/questions/2005878/what-are-python-metaclasses-useful-for" class="question-hyperlink">What are Python metaclasses useful for?</a>
</div>
<div class="spacer">
<a href="/q/2676007" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">7
    </div>
</a><a href="/questions/2676007/what-is-rubys-analog-to-python-metaclasses" class="question-hyperlink">What is Ruby&#39;s analog to Python Metaclasses?</a>
</div>
<div class="spacer">
<a href="/q/10281984" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">2
    </div>
</a><a href="/questions/10281984/python-original-object-class-is-redefined-how-to-get-the-object-class-back" class="question-hyperlink">Python: Original &#39;object&#39; class is redefined. How to get the &#39;object&#39; class back?</a>
</div>
<div class="spacer">
<a href="/q/11256246" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">3
    </div>
</a><a href="/questions/11256246/what-is-wrong-with-this-simple-python-metaclass" class="question-hyperlink">What is wrong with this simple python metaclass?</a>
</div>
<div class="spacer">
<a href="/q/12152911" title="Vote score (upvotes - downvotes)">
    <div class="answer-votes answered-accepted default">1
    </div>
</a><a href="/questions/12152911/how-can-i-get-the-file-name-of-the-function-that-is-passed-to-my-decorator-in-py" class="question-hyperlink">How can I get the file name of the function that is passed to my decorator in python?</a>
</div>

                    </div>
				</div>
            
<div id="hot-network-questions" class="module">
    <h4>
        <a href="//stackexchange.com/questions?tab=hot" 
           class="js-gps-track" 
           data-gps-track="posts_hot_network.click({ item_type:1, location:11 })">
            Hot Network Questions
        </a>
    </h4>
    <ul>
            <li >
                <div class="favicon favicon-gaming" title="Arqade"></div><a href="http://gaming.stackexchange.com/questions/174340/does-dota-2-have-needs-to-level-summoner-as-in-league-of-legends" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:41 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Does Dota 2 have needs to level summoner as in League of Legends?
                </a>

            </li>
            <li >
                <div class="favicon favicon-biology" title="Biology Stack Exchange"></div><a href="http://biology.stackexchange.com/questions/19381/species-of-this-white-dove" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:375 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Species of this White Dove
                </a>

            </li>
            <li >
                <div class="favicon favicon-stackoverflow" title="Stack Overflow"></div><a href="http://stackoverflow.com/questions/24485932/understand-lambda-usage-in-given-python-code" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:1 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Understand lambda usage in given python code
                </a>

            </li>
            <li >
                <div class="favicon favicon-history" title="History Stack Exchange"></div><a href="http://history.stackexchange.com/questions/14325/why-bother-attacking-castles-at-all-why-not-go-around" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:324 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Why bother attacking castles at all? Why not go around?
                </a>

            </li>
            <li >
                <div class="favicon favicon-academia" title="Academia Stack Exchange"></div><a href="http://academia.stackexchange.com/questions/24127/should-i-send-a-cease-and-desist-letter-to-researchgate" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:415 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Should I send a &quot;cease-and-desist&quot; letter to ResearchGate?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-math" title="Mathematics Stack Exchange"></div><a href="http://math.stackexchange.com/questions/851781/expected-value-of-a-determinant" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:69 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Expected Value of a Determinant
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-ell" title="English Language Learners Stack Exchange"></div><a href="http://ell.stackexchange.com/questions/27182/the-definite-article-the-was-missing" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:481 }); posts_hot_network.click({ item_type:2, location:11 })">
                    The definite article &quot;the&quot; was missing
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-craftcms" title="Craft CMS Stack Exchange"></div><a href="http://craftcms.stackexchange.com/questions/609/direct-access-to-controller" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:563 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Direct access to controller
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-english" title="English Language &amp; Usage Stack Exchange"></div><a href="http://english.stackexchange.com/questions/180899/soccer-mom-why-soccer" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:97 }); posts_hot_network.click({ item_type:2, location:11 })">
                    &quot;Soccer mom&quot;: why soccer?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-movies" title="Movies &amp; TV Stack Exchange"></div><a href="http://movies.stackexchange.com/questions/21729/did-rose-die-at-the-end-of-titanic-or-was-she-dreaming" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:367 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Did Rose die at the end of Titanic, or was she dreaming?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-cstheory" title="Theoretical Computer Science Stack Exchange"></div><a href="http://cstheory.stackexchange.com/questions/25077/shortest-path-hitting-a-given-vertex" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:114 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Shortest path hitting a given vertex
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-academia" title="Academia Stack Exchange"></div><a href="http://academia.stackexchange.com/questions/24156/is-a-copied-acknowledgements-considered-plagiarism" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:415 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Is a copied acknowledgements considered plagiarism?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-academia" title="Academia Stack Exchange"></div><a href="http://academia.stackexchange.com/questions/24146/credit-with-helping-to-write-a-phd-thesis" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:415 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Credit with helping to write a PhD thesis
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-networkengineering" title="Network Engineering Stack Exchange"></div><a href="http://networkengineering.stackexchange.com/questions/9677/how-can-there-be-more-than-one-mac-address-on-single-switch-port" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:496 }); posts_hot_network.click({ item_type:2, location:11 })">
                    How can there be more than one MAC address on single switch port?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-physics" title="Physics Stack Exchange"></div><a href="http://physics.stackexchange.com/questions/122452/can-an-asteroid-meteroid-meteor-meteorite-be-stopped-in-its-way-to-earth" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:151 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Can an asteroid/meteroid/meteor/meteorite be stopped in it&#39;s way to Earth?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-superuser" title="Super User"></div><a href="http://superuser.com/questions/775034/ethernet-cable-too-long" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:3 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Ethernet cable too long?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-programmers" title="Programmers Stack Exchange"></div><a href="http://programmers.stackexchange.com/questions/245763/is-there-a-benefit-in-compiling-your-code-as-you-go-along" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:131 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Is there a benefit in compiling your code as you go along?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-codereview" title="Code Review Stack Exchange"></div><a href="http://codereview.stackexchange.com/questions/55644/implementing-division-without-addition-multiplication-division-or-subtraction" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:196 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Implementing division without addition, multiplication, division or subtraction - follow-up
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-photo" title="Photography Stack Exchange"></div><a href="http://photo.stackexchange.com/questions/52401/how-to-measure-light-so-i-know-which-gel-to-use" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:61 }); posts_hot_network.click({ item_type:2, location:11 })">
                    How to measure light so I know which gel to use?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-math" title="Mathematics Stack Exchange"></div><a href="http://math.stackexchange.com/questions/851959/the-union-of-well-ordered-sets-is-a-well-ordered-set" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:69 }); posts_hot_network.click({ item_type:2, location:11 })">
                    The union of well-ordered sets is a well-ordered set
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-english" title="English Language &amp; Usage Stack Exchange"></div><a href="http://english.stackexchange.com/questions/181434/what-to-call-the-area-where-the-hair-directions-all-change-on-the-head" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:97 }); posts_hot_network.click({ item_type:2, location:11 })">
                    What to call the area where the hair directions all change on the head?
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-mathoverflow" title="MathOverflow"></div><a href="http://mathoverflow.net/questions/172955/ordinary-generating-function-for-bell-numbers" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:504 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Ordinary Generating Function for Bell Numbers
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-stackoverflow" title="Stack Overflow"></div><a href="http://stackoverflow.com/questions/24485226/c-sharp-oop-composition-and-generalization-at-the-same-time" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:1 }); posts_hot_network.click({ item_type:2, location:11 })">
                    C# OOP Composition and Generalization at the same time
                </a>

            </li>
            <li class="dno js-hidden">
                <div class="favicon favicon-crypto" title="Cryptography Stack Exchange"></div><a href="http://crypto.stackexchange.com/questions/17939/is-there-a-standard-way-to-use-a-nonce-with-hmac" class="js-gps-track" data-gps-track="site.switch({ item_type:11, target_site:281 }); posts_hot_network.click({ item_type:2, location:11 })">
                    Is there a standard way to use a nonce with HMAC?
                </a>

            </li>
    </ul>

        <a href="#" 
           class="show-more js-show-more js-gps-track" 
           data-gps-track="posts_hot_network.click({ item_type:3, location:11 })">
            more hot questions
        </a>
</div>
		</div>
	
<div id="feed-link">
    <div id="feed-link-text">
        <a href="/feeds/question/100003" title="feed of this question and its answers">
            <span class="feed-icon"></span>question feed
        </a>
    </div>
</div>	<script>
StackExchange.ready(function(){$.get('/posts/100003/ivc/7561');});
</script>
<noscript>
    <div><img src="/posts/100003/ivc/7561" class="dno" alt="" width="0" height="0"></div>
</noscript><div style="display:none" id="prettify-lang">lang-py</div></div>



        </div>
    </div>
    <div id="footer" class="categories">
        <div class="footerwrap">
            <div id="footer-menu">
                <div class="top-footer-links">
                        <a href="/tour">tour</a>
                    <a href="/help">help</a>
                        <a href="/help/badges">badges</a>
                    <a href="http://blog.stackoverflow.com?blb=1">blog</a>
                        <a href="http://chat.stackoverflow.com">chat</a>
                    <a href="http://data.stackexchange.com">data</a>
                    <a href="http://stackexchange.com/legal">legal</a>
                    <a href="http://stackexchange.com/legal/privacy-policy">privacy policy</a>
                    <a href="http://stackexchange.com/work-here">work here</a>
                    <a href="http://stackexchange.com/mediakit">advertising info</a>

                    <a onclick='StackExchange.switchMobile("on")'>mobile</a>
                    <b><a href="/contact">contact us</a></b>
                        <b><a href="http://meta.stackoverflow.com">feedback</a></b>
                    
                </div>
                <div id="footer-sites">
                    <table>
    <tr>
            <th colspan=3>
                Technology
            </th>
            <th >
                Life / Arts
            </th>
            <th >
                Culture / Recreation
            </th>
            <th >
                Science
            </th>
            <th >
                Other
            </th>
    </tr>
    <tr>
            <td>
                <ol>
                        <li><a href="http://stackoverflow.com" title="professional and enthusiast programmers">Stack Overflow</a></li>
                        <li><a href="http://serverfault.com" title="professional system and network administrators">Server Fault</a></li>
                        <li><a href="http://superuser.com" title="computer enthusiasts and power users">Super User</a></li>
                        <li><a href="http://webapps.stackexchange.com" title="power users of web applications">Web Applications</a></li>
                        <li><a href="http://askubuntu.com" title="Ubuntu users and developers">Ask Ubuntu</a></li>
                        <li><a href="http://webmasters.stackexchange.com" title="pro webmasters">Webmasters</a></li>
                        <li><a href="http://gamedev.stackexchange.com" title="professional and independent game developers">Game Development</a></li>
                        <li><a href="http://tex.stackexchange.com" title="users of TeX, LaTeX, ConTeXt, and related typesetting systems">TeX - LaTeX</a></li>
                            </ol></td><td><ol>
                        <li><a href="http://programmers.stackexchange.com" title="professional programmers interested in conceptual questions about software development">Programmers</a></li>
                        <li><a href="http://unix.stackexchange.com" title="users of Linux, FreeBSD and other Un*x-like operating systems.">Unix &amp; Linux</a></li>
                        <li><a href="http://apple.stackexchange.com" title="power users of Apple hardware and software">Ask Different (Apple)</a></li>
                        <li><a href="http://wordpress.stackexchange.com" title="WordPress developers and administrators">WordPress Development</a></li>
                        <li><a href="http://gis.stackexchange.com" title="cartographers, geographers and GIS professionals">Geographic Information Systems</a></li>
                        <li><a href="http://electronics.stackexchange.com" title="electronics and electrical engineering professionals, students, and enthusiasts">Electrical Engineering</a></li>
                        <li><a href="http://android.stackexchange.com" title="enthusiasts and power users of the Android operating system">Android Enthusiasts</a></li>
                        <li><a href="http://security.stackexchange.com" title="Information security professionals">Information Security</a></li>
                            </ol></td><td><ol>
                        <li><a href="http://dba.stackexchange.com" title="database professionals who wish to improve their database skills and learn from others in the community">Database Administrators</a></li>
                        <li><a href="http://drupal.stackexchange.com" title="Drupal developers and administrators">Drupal Answers</a></li>
                        <li><a href="http://sharepoint.stackexchange.com" title="SharePoint enthusiasts">SharePoint</a></li>
                        <li><a href="http://ux.stackexchange.com" title="user experience researchers and experts">User Experience</a></li>
                        <li><a href="http://mathematica.stackexchange.com" title="users of Mathematica">Mathematica</a></li>
                    
                        <li>
                            <a href="http://stackexchange.com/sites#technology" class="more">
                                more (14)
                            </a>
                        </li>
                </ol>
            </td>
            <td>
                <ol>
                        <li><a href="http://photo.stackexchange.com" title="professional, enthusiast and amateur photographers">Photography</a></li>
                        <li><a href="http://scifi.stackexchange.com" title="science fiction and fantasy enthusiasts">Science Fiction &amp; Fantasy</a></li>
                        <li><a href="http://graphicdesign.stackexchange.com" title="professional graphic designers and non-designers trying to do their own graphic design">Graphic Design</a></li>
                        <li><a href="http://cooking.stackexchange.com" title="professional and amateur chefs">Seasoned Advice (cooking)</a></li>
                        <li><a href="http://diy.stackexchange.com" title="contractors and serious DIYers">Home Improvement</a></li>
                        <li><a href="http://money.stackexchange.com" title="people who want to be financially literate">Personal Finance &amp; Money</a></li>
                        <li><a href="http://academia.stackexchange.com" title="academics and those enrolled in higher education">Academia</a></li>
                    
                        <li>
                            <a href="http://stackexchange.com/sites#lifearts" class="more">
                                more (10)
                            </a>
                        </li>
                </ol>
            </td>
            <td>
                <ol>
                        <li><a href="http://english.stackexchange.com" title="linguists, etymologists, and serious English language enthusiasts">English Language &amp; Usage</a></li>
                        <li><a href="http://skeptics.stackexchange.com" title="scientific skepticism">Skeptics</a></li>
                        <li><a href="http://judaism.stackexchange.com" title="those who base their lives on Jewish law and tradition and anyone interested in learning more">Mi Yodeya (Judaism)</a></li>
                        <li><a href="http://travel.stackexchange.com" title="road warriors and seasoned travelers">Travel</a></li>
                        <li><a href="http://christianity.stackexchange.com" title="committed Christians, experts in Christianity and those interested in learning more">Christianity</a></li>
                        <li><a href="http://gaming.stackexchange.com" title="passionate videogamers on all platforms">Arqade (gaming)</a></li>
                        <li><a href="http://bicycles.stackexchange.com" title="people who build and repair bicycles, people who train cycling, or commute on bicycles">Bicycles</a></li>
                        <li><a href="http://rpg.stackexchange.com" title="gamemasters and players of tabletop, paper-and-pencil role-playing games">Role-playing Games</a></li>
                    
                        <li>
                            <a href="http://stackexchange.com/sites#culturerecreation" class="more">
                                more (21)
                            </a>
                        </li>
                </ol>
            </td>
            <td>
                <ol>
                        <li><a href="http://math.stackexchange.com" title="people studying math at any level and professionals in related fields">Mathematics</a></li>
                        <li><a href="http://stats.stackexchange.com" title="people interested in statistics, machine learning, data analysis, data mining, and data visualization">Cross Validated (stats)</a></li>
                        <li><a href="http://cstheory.stackexchange.com" title="theoretical computer scientists and researchers in related fields">Theoretical Computer Science</a></li>
                        <li><a href="http://physics.stackexchange.com" title="active researchers, academics and students of physics">Physics</a></li>
                        <li><a href="http://mathoverflow.net" title="professional mathematicians">MathOverflow</a></li>
                    
                        <li>
                            <a href="http://stackexchange.com/sites#science" class="more">
                                more (7)
                            </a>
                        </li>
                </ol>
            </td>
            <td>
                <ol>
                        <li><a href="http://stackapps.com" title="apps, scripts, and development with the Stack Exchange API">Stack Apps</a></li>
                        <li><a href="http://meta.stackexchange.com" title="meta-discussion of the Stack Exchange family of Q&amp;A websites">Meta Stack Exchange</a></li>
                        <li><a href="http://area51.stackexchange.com" title="proposing new sites in the Stack Exchange network">Area 51</a></li>
                        <li><a href="http://careers.stackoverflow.com">Stack Overflow Careers</a></li>
                    
                </ol>
            </td>
    </tr>
</table>
                </div>
            </div>

            <div id="copyright">
                site design / logo &#169; 2014 stack exchange inc; user contributions licensed under <a href="http://creativecommons.org/licenses/by-sa/3.0/" rel="license">cc by-sa 3.0</a> 
                with <a href="http://blog.stackoverflow.com/2009/06/attribution-required/" rel="license">attribution required</a>
            </div>
            <div id="svnrev">
                rev 2014.6.30.1688
            </div>
            
        </div>
    </div>
    <noscript>
        <div id="noscript-warning">Stack Overflow works best with JavaScript enabled<img src="http://pixel.quantserve.com/pixel/p-c1rF4kxgLUzNc.gif" alt="" class="dno"></div>
    </noscript>
<script>var p = "http", d = "static"; if (document.location.protocol == "https:") { p += "s"; d = "engine"; } var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = p + "://" + d + ".adzerk.net/ados.js"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script>
<script>
    var ados = ados || {};
    ados.run = ados.run || [];
    ados.run.push(function () { ados_setKeywords('python,oop,metaclass,python-datamodel');; ados_load(); });         
</script>

    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () { (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m);
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
        ga('create', 'UA-5620270-1');        
        
        ga('set', 'dimension2', '|python|oop|metaclass|python-datamodel|');         
        ga('send', 'pageview');
        var _qevents = _qevents || [],
            _comscore = _comscore || [];
        (function () {
            var ssl='https:'==document.location.protocol,
                s=document.getElementsByTagName('script')[0],
                qc=document.createElement('script');
            qc.async=true;
            qc.src=(ssl?'https://secure':'http://edge')+'.quantserve.com/quant.js';
            s.parentNode.insertBefore(qc, s);
            var sc=document.createElement('script');
            sc.async=true;
            sc.src=(ssl?'https://sb':'http://b') + '.scorecardresearch.com/beacon.js';
            s.parentNode.insertBefore(sc, s);
        })();
        _comscore.push({ c1: "2", c2: "17440561" });
        _qevents.push({ qacct: "p-c1rF4kxgLUzNc" });
    </script>        
    
    </body>
</html>