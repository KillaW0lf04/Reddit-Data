<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <script>var _sf_startpt=(new Date()).getTime()</script>
  <title>rm -rf remains</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="generator" content="Svbtle.com" />
  <meta name="description" content="Just for fun, I decided to launch a new Linux server and run rm -rf / as root to see what remains. As I found out, rm lives in the future with idiots like me, so you have to specify --no-preserve-root to kick this exercise off. # rm -rf... | Kyle Kelley | Break things and enjoy life!"/>
  <link rel="canonical" href="http://lambdaops.com/rm-rf-remains" />
  <meta name="og:url" content="http://lambdaops.com/rm-rf-remains" />
  <meta property="twitter:card" content="summary" />
  <meta property="twitter:site" content="@svbtle" />
  <meta property="twitter:title" content="rm -rf remains" />
  <meta property="twitter:description" content="Just for fun, I decided to launch a new Linux server and run rm -rf / as root to see what remains. As I found out, rm lives in the future with idiots like me, so you have to specify --no-preserve-root to kick this exercise off. # rm -rf... | Kyle Kelley | Break things and enjoy life!" />
  <meta property="twitter:creator" content="@rgbkrk" />
  <meta property="twitter:image:src" content="https://d27kszptu8mqwl.cloudfront.net/M4JbiV22WBGEBjEM6iNsXxWcjIK80_large.jpg" />
  <meta property="twitter:domain" content="http://lambdaops.com" />
  <link rel="prefetch" href="http://lambdaops.com" />
  <link rel="prerender" href="http://lambdaops.com" />
  <meta property="og:title" content="rm -rf remains &bull; Kyle Kelley" />
  <meta property="og:type" content="article" />
  <meta property="og:description" content="Just for fun, I decided to launch a new Linux server and run rm -rf / as root to see what remains. As I found out, rm lives in the future with idiots like me, so you have to specify --no-preserve-root to kick this exercise off. # rm -rf... | Kyle Kelley | Break things and enjoy life!"/>
  <meta property="og:image" content="https://d27kszptu8mqwl.cloudfront.net/M4JbiV22WBGEBjEM6iNsXxWcjIK80_large.jpg" />
  <meta property="og:site_name" content="Kyle Kelley on Svbtle" />
  <meta property="fb:app_id" content="346346195413177" />
  
  <link rel="alternate" type="application/rss+xml" href="http://lambdaops.com/feed" />
  <link data-turbolinks-track="true" href="https://dtu1xr3i3b2a1.cloudfront.net/cargo/build.blog-c79d4b90279a91aeae2963610177c63f.css" media="all" rel="stylesheet" />
  <script src="//use.typekit.com/kcv5qvs.js"></script>
  <script>try{Typekit.load();}catch(e){}</script>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
  <script async="async" data-turbolinks-track="true" src="https://dtu1xr3i3b2a1.cloudfront.net/cargo/build.blog-b85451ec3705c37386f592f06bb953f7.js"></script>
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-41994323-1');
  ga('send', 'pageview');
  // Create a new tracker for the user on analytics.js and send the pageview
  ga('create', 'UA-37362544-1', {'name': 'userTracker'});
  ga('userTracker.send', 'pageview');
  // Backwards compatibility--create an old ga.js for the user
  var _gaq = _gaq || [];
  _gaq.push( ['_setAccount', 'UA-41994323-1'],['_setDomainName', 'none'],['_setAllowLinker', true],['_trackPageview'],['b._setAccount', 'UA-37362544-1'],['b._setDomainName', 'lambdaops.com'],['b._setAllowLinker', true],['b._trackPageview']);
  (function() { var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);})();
  </script>
</head>
<body class="blog">
<style scoped>
blockquote,
a blockquote,
h2#page_title a:hover,
div#readnext:hover span.flank_title,
div#foot_more:hover a,
div#foot_userbar a#bottom_tagline span:hover,
article.linked h1.article_title a:hover,
a.continue_button:hover,
article p a:hover,
ul#lightning_drop {
  border-color: #030303;
}
body,
figure.kudo.complete div.filling,
section#sidebar,
section#river.userhome p a.buttonize {
  background-color:#030303
}
figure.kudo.complete div.filling {
  background-image:url(//d1jcp5e5r52ocf.cloudfront.net/svbtle.png);
}
div#readnext:hover span.flank_title,
div#foot_more:hover span,
div#foot_userbar a#bottom_tagline span:hover,
article.linked h1.article_title:hover,
h2#page_title a:hover,
section#river.userhome header#page_header h2#page_title a,
body section#river.userhome article h1.article_title:hover a,
aside#read_this_first h6,
aside#also_by_user h6,
article.post.mini h1.article_title:hover a,
a.continue_button:hover,
a.continue_button,
article p a:hover,
ul#lightning_drop li.userinfo a.user_name,
body ul#lightning_drop li.userinfo:hover a.user_name {
  color: #030303;
}

footer#masthead {
  border-bottom: 24px solid #030303;
}
figure.logo a {
  background: #030303 url(//d1jcp5e5r52ocf.cloudfront.net/svbtle.png) center center no-repeat;
  background-size: 100%;
}
@keyframes fPulse
  {
  0% {
    border-color: #ffffff;
  }
  50% {
    border-color: #030303;
  }
  100% {
    border-color: #ffffff;
  }
}

@-moz-keyframes fPulse
  {
  0% {
    border-color: #ffffff;
  }
  50% {
    border-color: #030303;
  }
  100% {
    border-color: #ffffff;
  }
}

@-webkit-keyframes fPulse
  {
  0% {
    border-color: #ffffff;
  }
  50% {
    border-color: #030303;
  }
  100% {
    border-color: #ffffff;
  }
}

@keyframes titlePulse
  {
  0% {
    color: #000000;
  }
  50% {
    color: #030303;
  }
  100% {
    color: #000000;
  }
}

@-moz-keyframes titlePulse
  {
  0% {
    color: #000000;
  }
  50% {
    color: #030303;
  }
  100% {
    color: #000000;
  }
}

@-webkit-keyframes titlePulse
  {
  0% {
    color: #000000;
  }
  50% {
    color: #030303;
  }
  100% {
    color: #000000;
  }
}

figure.avatar {
  background-color: #030303;
}
figure.avatar a {
  background-image: url('https://d27kszptu8mqwl.cloudfront.net/M4JbiV22WBGEBjEM6iNsXxWcjIK80_medium.jpg')
}

body h1#mlogotype a {
  color: #030303;
}

ul#user_nav li a:hover {
  border-color: #030303;
  color: #fff;
  background-color: #030303;
}
</style>
<div id="touch_menu">&nbsp;</div>
<h1 id="mlogotype"><a href="https://svbtle.com">Svbtle</a></h1>
<nav id="master" class="blog">
	<h2 id="logotype"><a href="https://svbtle.com">Svbtle</a></h2>
	<a id="master_indicator" href="#show-drop">&nbsp;</a>
	<ul id="master_drop">
		<li><h5><a href="https://svbtle.com">Kyle Kelley<br/>is writing on the<br/><span>Svbtle</span> network.</a></h5></li>
    <li class="link twitter "><a href="http://twitter.com/rgbkrk" class="twitter_head">@rgbkrk&nbsp;on&nbsp;twitter</a></li>
    <li class="website"><a href="http://github.com/rgbkrk">github.com/rgbkrk</a></li>
    <li class="link feed"><a href="/feed">rss feed</a></li>
		<li><a href="https://svbtle.com" class="header_link">SVBTLE</a></li>
		<li class=""><a href="https://svbtle.com/magazine">magazine</a></li>
		<li><a href="https://svbtle.com/about">about svbtle</a></li>
		<li><a href="http://twitter.com/svbtle" target="_blank">@svbtle</a></li>
		<li style="display: none;"><a href="https://svbtle.com/feed" target="_blank">rss feed</a></li>
		<li><br/></li>
	</ul>
</nav>
<div id="touch_close">&nbsp;</div>

<section id="river">
  <a href="https://svbtle.com" id="home_logotype_link"><h1 id="home_logotype">Svbtle</h1></a>
  <header id="page_header">
    <figure class="avatar post">
      <a href="http://lambdaops.com">Kyle Kelley</a>
    </figure>
    <h2 id="page_title"><a href="http://lambdaops.com">Kyle Kelley</a></h2>
    <h3 id="page_subtitle"><a href="http://lambdaops.com">Break things and enjoy life!</a></h3>
  </header>
  <article id="SKEcyT41o8JJyglznP0i" class="post  ">
  <h1 class="article_title">
    <a href="http://lambdaops.com/rm-rf-remains">rm -rf remains</a>
  </h1>
  <time datetime="2014-06-06" class="article_time">Jun  6, 2014</time>
  <section class="post_content">
    <p>Just for fun, I decided to launch a new Linux server and run <code>rm -rf /</code> as root to see what remains. As I found out, <code>rm</code> lives in the future with idiots like me, so you have to specify <code>--no-preserve-root</code> to kick this exercise off.</p>

<pre><code># rm -rf --no-preserve-root /
</code></pre>

<p>After committing this act of tomfoolery, great utilities like</p>

<ul>
<li><code>/bin/ls</code></li>
<li><code>/bin/cat</code></li>
<li><code>/bin/chmod</code></li>
<li><code>/usr/bin/file</code></li>
</ul>

<p>will all be gone! You should still have your connection over SSH as well as your existing bash session. This means you have all the bash builtins, like <code>echo</code>. </p>

<h2>Becoming Bash McGyver</h2>

<pre><code class="ShellSession">root@rmrf:/# ls
-bash: /bin/ls: No such file or directory
</code></pre>

<p>There is no <code>ls</code>, but <code>echo</code> and fileglobs are still around. What can we do with those?</p>

<pre><code class="ShellSession">root@rmrf:/# echo *
dev proc run sys
# echo /dev/pts/*
/dev/pts/0 /dev/pts/3 /dev/pts/ptmx
</code></pre>

<p>Hey, we got to keep <code>/dev</code>, <code>/proc</code>, <code>/run</code>, and <code>/sys</code>.  Now that we have <code>ls</code>, we  might as well make it a little easier to read.</p>

<pre><code class="ShellSession">root@rmrf:/# for file in /dev/pts/*; do echo $file; done
/dev/pts/0
/dev/pts/3
/dev/pts/ptmx
</code></pre>

<p><a href="http://www.reddit.com/r/programming/comments/27j311/rm_rf_remains/ci1gc4i">Several</a> <a href="http://www.reddit.com/r/programming/comments/27j311/rm_rf_remains/ci1gpli">Redditors</a> pointed out that <code>printf</code> is available.</p>

<pre><code class="ShellSession">root@rmrf:/# ls() { printf &#39;%s\n&#39; ${1:+${1%/}/}*; }
</code></pre>

<p>&ldquo;<em>printf will [apply] the format string until it runs out of args.</em>&rdquo; - <a href="http://www.reddit.com/user/camh-">camh-</a></p>

<p>Since you can define functions in bash, we can create an <code>ls</code> utility, albeit very limited.</p>

<pre><code class="ShellSession">root@rmrf:/# ls() { printf &#39;%s\n&#39; ${1:+${1%/}/}*; }
-bash: syntax error near unexpected token `(&#39;
</code></pre>

<p>What? That should be completely valid. Is <code>ls</code> already hashed or aliased?</p>

<pre><code class="ShellSession">root@rmrf:/# type ls
ls is aliased to `ls --color=auto&#39;
</code></pre>

<p>Ah, that gets expanded to <code>ls--color=auto () { printf &#39;%s\n&#39; ${1:+${1%/}/}*; }</code>. Yuck. Well, we can <code>unalias</code> that.</p>

<pre><code class="ShellSession">root@rmrf:/# unalias ls
root@rmrf:/# ls() { printf &#39;%s\n&#39; ${1:+${1%/}/}*; }
root@rmrf:/# ls
/dev
/proc
/run
/sys
root@rmrf:/# ls /dev
/dev/pts
</code></pre>

<p>And save our work.</p>

<pre><code class="ShellSession">root@rmrf:/# echo &#39;ls() { printf &#39;%s\n&#39; ${1:+${1%/}/}*; }&#39; &gt;&gt; utils.sh
root@rmrf:/# source utils.sh
</code></pre>

<p>How about <code>cat</code>? The <code>read</code> builtin comes in handy along with pipes and redirection, so we can piece together a rudimentary <code>cat</code>.</p>

<pre><code class="ShellSession">root@rmrf:/# (while read line; do echo &quot;$line&quot;; done) &lt; utils.sh
ls() { printf &#39;%s\n&#39; ${1:+${1%/}/}*; }
</code></pre>

<p>With these abilities and the fact that we can write arbitrary bytes with <code>echo</code>, we could rebuild and then <code>curl</code> or <code>wget</code> the binaries we want directly. My first choice, <a href="http://eusebeia.dyndns.org/bashcp">echoed by others</a>, would be to get <a href="http://www.busybox.net/about.html">busybox</a>. Busybox is the Swiss Army Knife of Embedded Linux, with builtin versions of <code>wget</code>, <code>dd</code>, <code>tar</code>, and many others. <a href="http://eusebeia.dyndns.org/bashcp">Eusebeîa goes into great detail about how to get a fully escaped version of busybox on your system</a>, so I won&rsquo;t do that here.</p>

<p>There is a problem though.</p>

<p>Even if we <code>echo</code> all the bytes we need into creating entire binaries, those files won&rsquo;t be executable. No way to start busybox. The easiest workaround for this is to find something which is executable and overwrite it with <code>echo</code>. We&rsquo;ve nuked all of <code>/usr</code> and <code>/bin</code> at this point though, so that&rsquo;s a bit tricky.</p>

<p>We can use shell globs and bash logic to find files with the executable bit set, making sure to ignore directories.</p>

<pre><code class="ShellSession">executable () { if [[ ( ! -d $1 ) &amp;&amp; -x $1 ]] ; then echo &quot;$1&quot;; fi }
</code></pre>

<h3>Find the executables!</h3>

<pre><code class="ShellSession">root@rmrf:/# for file in /*; do executable $file; done
root@rmrf:/# for file in /*/*; do executable $file; done
root@rmrf:/# for file in /*/*/*; do executable $file; done
/proc/1107/exe
/proc/1136/exe
/proc/1149/exe
/proc/1179/exe
/proc/1215/exe
/proc/1217/exe
/proc/1220/exe
/proc/1221/exe
/proc/1223/exe
/proc/1248/exe
/proc/1277/exe
/proc/1468/exe
/proc/1478/exe
/proc/1625/exe
/proc/1644/exe
/proc/1/exe
/proc/374/exe
/proc/378/exe
/proc/471/exe
/proc/616/exe
/proc/657/exe
/proc/self/exe
</code></pre>

<p>Great! Hold on a minute though, those are all symbolic links to executables that no longer exist on disk. We&rsquo;ll just update <code>executable()</code> to ignore symbolic links.</p>

<pre><code class="ShellSession">root@rmrf:/# executable () { if [[ ( ! -d $1 ) &amp;&amp; ( ! -h $1 ) &amp;&amp; -x $1 ]] ; then echo &quot;$1&quot;; fi }
root@rmrf:/# for file in /*/*/*; do executable $file; done
root@rmrf:/# for file in /*/*/*/*; do executable $file; done
root@rmrf:/# for file in /*/*/*/*/*; do executable $file; done
root@rmrf:/# for file in /*/*/*/*/*/*; do executable $file; done
</code></pre>

<p>Well now, that&rsquo;s bad news bears. Perhaps there is something at the kernel level we can use. After all, we can restart the box using sysrq <em>magic</em>:</p>

<pre><code class="ShellSession">root@rmrf:/# echo 1 &gt; /proc/sys/kernel/sysrq
root@rmrf:/# echo &quot;b&quot; &gt; /proc/sysrq-trigger
</code></pre>

<p><del>Now we&rsquo;re locked out and I should do something else on a Friday. Thanks for reading! Let me know if you figure out how to get an executable bit set.</del></p>

<p>UPDATE: Redditor throw_away5046 posted <a href="http://www.reddit.com/r/linux/comments/27is0x/rm_rf_remains/ci199bk">a full, beautiful, solution to this</a>.</p>

<h4>From a non-hosed, same architecture box:</h4>

<pre><code>$ mkdir $(xxd -p -l 16 /dev/urandom)
$ cd $_
$ apt-get download busybox-static
$ dpkg -x *.deb .
$ alias encode=&#39;{ tr -d \\n | sed &quot;s#\\(..\\)#\\\\x\\1#g&quot;; echo; }&#39;
$ alias upload=&#39;{ xxd -p | encode | nc -q0 -lp 5050; }&#39;
$ upload &lt; bin/busybox
</code></pre>

<h4>Back on the rmrf&#39;ed machine</h4>

<pre><code># cd /
# alias decode=&#39;while read -ru9 line; do printf &quot;$line&quot;; done&#39;
# alias download=&#39;( exec 9&lt;&gt;/dev/tcp/{IP OF NON HOSED BOX}/5050; decode )&#39;
# download &gt; busybox
</code></pre>

<h4>Now to create a shared object that will change permissions on busybox</h4>

<pre><code>$ cat &gt; setx.c &lt;&lt;EOF
extern int chmod(const char *pathname, unsigned int mode);

int entry(void) {

        return !! chmod(&quot;busybox&quot;, 0700);
}
char *desc[] = {0};

struct quick_hack {

        char *name; int (*fn)(void); int on;
        char **long_doc, *short_doc, *other;

} setx_struct = { &quot;setx&quot;, entry, 1, desc, &quot;chmod 0700 busybox&quot;, 0 };
EOF
$ gcc -Wall -Wextra -pedantic -nostdlib -Os -fpic -shared setx.c -o setx
$ upload &lt; setx
</code></pre>

<h4>Time to <code>enable</code> setx as a built in and get busybox executable</h4>

<pre><code># ( download &gt; setx; enable -f ./setx setx; setx; )
# /busybox mkdir .bin
# /busybox  --install -s .bin
# PATH=/.bin
</code></pre>

<p>In action:</p>

<p><a href="http://img.svbtle.com/wwijp23ztne0tw.gif"><img src="https://d23f6h5jpj26xu.cloudfront.net/wwijp23ztne0tw_small.gif" alt="final.gif"></a></p>

<hr>

<p><em>For all my blog posts I&rsquo;ve decided to hold discussion on Reddit, linking to the post. Today&rsquo;s post is on <a href="http://www.reddit.com/r/linux/comments/27is0x/rm_rf_remains/">/r/linux</a> and on <a href="http://www.reddit.com/r/programming/comments/27j311/rm_rf_remains/">/r/programming</a>, but feel free to cross post it. PM me if you want me to link it here. Alternatively, you can <a href="https://twitter.com/rgbkrk">reach me on Twitter</a>.</em></p>

<hr>

<p>Go forth and build your <a target="_blank" href="http://www.amazon.com/s/?_encoding=UTF8&amp;camp=1789&amp;creative=390957&amp;keywords=bash&amp;linkCode=ur2&amp;qid=1402239800&amp;rh=n%3A283155%2Ck%3Abash&amp;sort=relevancerank&amp;tag=lamops-20&amp;linkId=OXSOLI7W574KTESZ">bash knowledge</a>. Personally, I recommend <a href="http://www.amazon.com/gp/product/0596003307/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596003307&amp;linkCode=as2&amp;tag=lamops-20">Unix Power Tools</a>.</p>

<p><a href="http://www.amazon.com/gp/product/0596003307/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596003307&amp;linkCode=as2&amp;tag=lamops-20"><img border="0" src="http://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=0596003307&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=US&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=lamops-20" style="display: block; margin-left: auto; margin-right: auto;"></a></p>

<p>Through college and career, flipping through this book has always showed me something new.</p>

<p><img src="https://ir-na.amazon-adsystem.com/e/ir?t=lamops-20&amp;l=as2&amp;o=1&amp;a=0596003307" width="1" height="1" border="0" alt="" style="border: none !important; margin: 0px !important;" />
<img src="https://ir-na.amazon-adsystem.com/e/ir?t=lamops-20&amp;l=ur2&amp;o=1" width="1" height="1" border="0" alt="" style="border: none !important; margin: 0px !important;" /></p>

    <figure class="kudo able clearfix" id="kudo_SKEcyT41o8JJyglznP0i">
      <a href="#kudo">
        <div class="filling">&nbsp;</div>
      </a>
      <div class="num">3,154</div>
      <div class="txt">Kudos</div>
    </figure>
    <figure class="side kudo able clearfix" id="kudo_side_SKEcyT41o8JJyglznP0i">
      <a href="#kudo">
        <div class="filling">&nbsp;</div>
      </a>
      <div class="num">3,154</div>
      <div class="txt">Kudos</div>
    </figure>
  </section>
</article>

  <div>&nbsp;</div>
</section>
<footer id="masthead">
  <div class="separator">
    <div id="readnext">
      <a href="http://lambdaops.com/bootstrapping-a-rackspace-windows-box">
        <span class="flank_head">Read this next:</span><br/>
        <span class="flank_title colorized">Bootstrapping a Rackspace Windows Box</span>
        <div class="flank_preview"><p>There are several projects I want to help out with Windows build automation (at least until Travis CI supports Windows builds) on cloud servers. Since I&rsquo;m not familiar at all with managing a Windows Server, let alone Windows... <span class="continue_btn">Continue&hellip;</span></p></div>
      </a>
    </div>
  </div>
  <div class="separator subscribe_container">
  <div id="subscribe">
    <p class="title">Get updated when Kyle Kelley publishes</p>
    <form accept-charset="UTF-8" action="/subscriptions" class="new_subscription" data-remote="true" id="new_subscription" method="post"><div style="display:none"><input name="utf8" type="hidden" value="&#x2713;" /></div>
    <div class="input active subscribe"><input class="pane_input autosize labeled" id="subscription_email" name="subscription[email]" placeholder="What&#39;s your email?" size="30" type="email" /></div>
    <p class="notify">Don&rsquo;t worry; we hate spam with a passion.<br/>
    You can unsubscribe with one click.</p>
    <span id="user_extid">M4JbiV22WBGEBjEM6iNs</span>
    <a href="#subscribe" class="buttonize submit_form subscribe_submit">Subscribe</a>
</form>  </div>
  </div>
  <div class="separator">
  <div id="foot_logo">
    <a href="https://svbtle.com"><span>Svbtle</span></a>
  </div>
  <div id="foot_userbar">
    <a href="http://lambdaops.com" id="bottom_tagline">
      <span>Kyle Kelley</span> Break things and enjoy life!
    </a>
    <a href="https://twitter.com/rgbkrk" class="linkout twitter">@rgbkrk</a>
  </div>
  <div id="foot_more">
    <a href="http://lambdaops.com"><span>Full blog &raquo;</span></a>
  </div>
  </div>
  <div id="copyright">
    &copy; 2014
  </div>
</footer><script>
  // CBEAT
  var _sf_async_config = { uid: 1721, domain: 'svbtle.com'};
  (function() {
    function loadChartbeat() {
      window._sf_endpt = (new Date()).getTime();
      var e = document.createElement('script');
      e.setAttribute('language', 'javascript');
      e.setAttribute('type', 'text/javascript');
      e.setAttribute('src','//static.chartbeat.com/js/chartbeat.js');
      document.body.appendChild(e);
    };
    var oldonload = window.onload;
    window.onload = (typeof window.onload != 'function') ?
      loadChartbeat : function() { oldonload(); loadChartbeat(); };
  })();
</script>
</body>
</html>