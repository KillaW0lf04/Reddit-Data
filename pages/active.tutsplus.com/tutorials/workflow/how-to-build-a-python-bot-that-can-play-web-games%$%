<!DOCTYPE html><html data-ads="[{&quot;doubleclick_id&quot;:&quot;11757429&quot;,&quot;unit_name&quot;:&quot;hub_development&quot;,&quot;location&quot;:&quot;inarticle&quot;,&quot;width&quot;:300,&quot;height&quot;:250,&quot;slot_id&quot;:&quot;1392179526912-0&quot;},{&quot;doubleclick_id&quot;:&quot;11757429&quot;,&quot;unit_name&quot;:&quot;hub_development&quot;,&quot;location&quot;:&quot;post_top&quot;,&quot;width&quot;:300,&quot;height&quot;:250,&quot;slot_id&quot;:&quot;1379650391729-0&quot;},{&quot;doubleclick_id&quot;:&quot;11757429&quot;,&quot;unit_name&quot;:&quot;hub_development&quot;,&quot;location&quot;:&quot;post_mid&quot;,&quot;width&quot;:300,&quot;height&quot;:250,&quot;slot_id&quot;:&quot;1382314910331-0&quot;},{&quot;doubleclick_id&quot;:&quot;11757429&quot;,&quot;unit_name&quot;:&quot;hub_development&quot;,&quot;location&quot;:&quot;post_comments&quot;,&quot;width&quot;:300,&quot;height&quot;:250,&quot;slot_id&quot;:&quot;1379650407131-0&quot;},{&quot;location&quot;:&quot;leader&quot;,&quot;unit_name&quot;:&quot;hub_development&quot;,&quot;slot_id&quot;:&quot;1391730982123-0&quot;,&quot;width&quot;:728,&quot;height&quot;:90,&quot;doubleclick_id&quot;:&quot;11757429&quot;}]" data-app-version="fd629a2ea659cbc5b453a6ddf3c87285456b91ca-production"><head><meta charset="utf-8" />
<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"beacon-5.newrelic.com","errorBeacon":"bam.nr-data.net","licenseKey":"27851e2035","applicationID":"3094824","transactionName":"JQpZTURXXlRcRBYWRBIKRVBXVEEXSl5WFQ==","queueTime":0,"applicationTime":219,"ttGuid":"","agentToken":null,"agent":"js-agent.newrelic.com/nr-411.min.js"}</script>
<script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VgUFWFRbGwAAXVVaBQU="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o?o:e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(t,e){function n(t,e,n){n||(n={});for(var r=o[t],a=r&&r.length||0,s=n[i]||(n[i]={}),u=0;a>u;u++)r[u].apply(s,e);return s}function r(t,e){var n=o[t]||(o[t]=[]);n.push(e)}var o={},i="nr@context";e.exports={on:r,emit:n}},{}],2:[function(t){function e(t,e,n,i,s){return u?u-=1:r("err",[s||new UncaughtException(t,e,n)]),"function"==typeof a?a.apply(this,o(arguments)):!1}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function n(t){r("err",[t,(new Date).getTime()])}var r=t("handle"),o=t(6),i=t(5),a=window.onerror,s=!1,u=0;t("loader").features.push("err"),window.onerror=e,NREUM.noticeError=n;try{throw new Error}catch(d){"stack"in d&&(t(1),t(2),"addEventListener"in window&&t(3),window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&t(4),s=!0)}i.on("fn-start",function(){s&&(u+=1)}),i.on("fn-err",function(t,e,r){s&&(this.thrown=!0,n(r))}),i.on("fn-end",function(){s&&!this.thrown&&u>0&&(u-=1)}),i.on("internal-error",function(t){r("ierr",[t,(new Date).getTime(),!0])})},{1:5,2:4,3:3,4:6,5:1,6:14,handle:"D5DuLP",loader:"G9z0Bl"}],3:[function(t){function e(t){r.inPlace(t,["addEventListener","removeEventListener"],"-",n)}function n(t){return t[1]}var r=t(1),o=(t(3),t(2));if(e(window),"getPrototypeOf"in Object){for(var i=document;i&&!i.hasOwnProperty("addEventListener");)i=Object.getPrototypeOf(i);i&&e(i);for(var a=XMLHttpRequest.prototype;a&&!a.hasOwnProperty("addEventListener");)a=Object.getPrototypeOf(a);a&&e(a)}else XMLHttpRequest.prototype.hasOwnProperty("addEventListener")&&e(XMLHttpRequest.prototype);o.on("addEventListener-start",function(t){if(t[1]){var e=t[1];"function"==typeof e?this.wrapped=e["nr@wrapped"]?t[1]=e["nr@wrapped"]:e["nr@wrapped"]=t[1]=r(e,"fn-"):"function"==typeof e.handleEvent&&r.inPlace(e,["handleEvent"],"fn-")}}),o.on("removeEventListener-start",function(t){var e=this.wrapped;e&&(t[1]=e)})},{1:15,2:1,3:14}],4:[function(t){var e=(t(3),t(1)),n=t(2);e.inPlace(window,["requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame"],"raf-"),n.on("raf-start",function(t){t[0]=e(t[0],"fn-")})},{1:15,2:1,3:14}],5:[function(t){function e(t){var e=t[0];"string"==typeof e&&(e=new Function(e)),t[0]=n(e,"fn-")}var n=(t(3),t(1)),r=t(2);n.inPlace(window,["setTimeout","setInterval","setImmediate"],"setTimer-"),r.on("setTimer-start",e)},{1:15,2:1,3:14}],6:[function(t){function e(){o.inPlace(this,s,"fn-")}function n(t,e){o.inPlace(e,["onreadystatechange"],"fn-")}function r(t,e){return e}var o=t(1),i=t(2),a=window.XMLHttpRequest,s=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"];window.XMLHttpRequest=function(t){var n=new a(t);try{i.emit("new-xhr",[],n),o.inPlace(n,["addEventListener","removeEventListener"],"-",function(t,e){return e}),n.addEventListener("readystatechange",e,!1)}catch(r){try{i.emit("internal-error",r)}catch(s){}}return n},window.XMLHttpRequest.prototype=a.prototype,o.inPlace(XMLHttpRequest.prototype,["open","send"],"-xhr-",r),i.on("send-xhr-start",n),i.on("open-xhr-start",n)},{1:15,2:1}],7:[function(t){function e(){function e(t){if("string"==typeof t&&t.length)return t.length;if("object"!=typeof t)return void 0;if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if("undefined"!=typeof FormData&&t instanceof FormData)return void 0;try{return JSON.stringify(t).length}catch(e){return void 0}}function n(t){var n=this.params,r=this.metrics;if(!this.ended){this.ended=!0;for(var i=0;u>i;i++)t.removeEventListener(s[i],this.listener,!1);if(!n.aborted){if(r.duration=(new Date).getTime()-this.startTime,4===t.readyState){n.status=t.status;var a=t.responseType,d="arraybuffer"===a||"blob"===a||"json"===a?t.response:t.responseText,f=e(d);if(f&&(r.rxSize=f),this.sameOrigin){var c=t.getResponseHeader("X-NewRelic-App-Data");c&&(n.cat=c.split(", ").pop())}}else n.status=0;r.cbTime=this.cbTime,o("xhr",[n,r])}}}function r(t,e){var n=i(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}t("loader").features.push("xhr");var o=t("handle"),i=t(1),a=t(5),s=["load","error","abort","timeout"],u=s.length,d=t(2);t(3),t(4),a.on("new-xhr",function(){this.totalCbs=0,this.called=0,this.cbTime=0,this.end=n,this.ended=!1,this.xhrGuids={}}),a.on("open-xhr-start",function(t){this.params={method:t[0]},r(this,t[1]),this.metrics={}}),a.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),a.on("send-xhr-start",function(t,n){var r=this.metrics,o=t[0],i=this;if(r&&o){var d=e(o);d&&(r.txSize=d)}this.startTime=(new Date).getTime(),this.listener=function(t){try{"abort"===t.type&&(i.params.aborted=!0),("load"!==t.type||i.called===i.totalCbs&&(i.onloadCalled||"function"!=typeof n.onload))&&i.end(n)}catch(e){try{a.emit("internal-error",e)}catch(r){}}};for(var f=0;u>f;f++)n.addEventListener(s[f],this.listener,!1)}),a.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),a.on("xhr-load-added",function(t,e){var n=""+d(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),a.on("xhr-load-removed",function(t,e){var n=""+d(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),a.on("addEventListener-end",function(t,e){e instanceof XMLHttpRequest&&"load"===t[0]&&a.emit("xhr-load-added",[t[1],t[2]],e)}),a.on("removeEventListener-end",function(t,e){e instanceof XMLHttpRequest&&"load"===t[0]&&a.emit("xhr-load-removed",[t[1],t[2]],e)}),a.on("fn-start",function(t,e,n){e instanceof XMLHttpRequest&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=(new Date).getTime()))}),a.on("fn-end",function(t,e){this.xhrCbStart&&a.emit("xhr-cb-time",[(new Date).getTime()-this.xhrCbStart,this.onload,e],e)})}window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)&&e()},{1:8,2:11,3:3,4:6,5:1,handle:"D5DuLP",loader:"G9z0Bl"}],8:[function(t,e){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");return!r.port&&o[1]&&(r.port=o[1].split("/")[0].split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname),r.sameOrigin=!e.hostname||e.hostname===document.domain&&e.port===n.port&&e.protocol===n.protocol,r}},{}],handle:[function(t,e){e.exports=t("D5DuLP")},{}],D5DuLP:[function(t,e){function n(t,e){var n=r[t];return n?n.apply(this,e):(o[t]||(o[t]=[]),void o[t].push(e))}var r={},o={};e.exports=n,n.queues=o,n.handlers=r},{}],11:[function(t,e){function n(t){if(!t||"object"!=typeof t&&"function"!=typeof t)return-1;if(t===window)return 0;if(o.call(t,"__nr"))return t.__nr;try{return Object.defineProperty(t,"__nr",{value:r,writable:!0,enumerable:!1}),r}catch(e){return t.__nr=r,r}finally{r+=1}}var r=1,o=Object.prototype.hasOwnProperty;e.exports=n},{}],loader:[function(t,e){e.exports=t("G9z0Bl")},{}],G9z0Bl:[function(t,e){function n(){var t=p.info=NREUM.info;if(t&&t.agent&&t.licenseKey&&t.applicationID&&u&&u.body){p.proto="https"===c.split(":")[0]||t.sslForHttp?"https://":"http://",a("mark",["onload",i()]);var e=u.createElement("script");e.src=p.proto+t.agent,u.body.appendChild(e)}}function r(){"complete"===u.readyState&&o()}function o(){a("mark",["domContent",i()])}function i(){return(new Date).getTime()}var a=t("handle"),s=window,u=s.document,d="addEventListener",f="attachEvent",c=(""+location).split("?")[0],p=e.exports={offset:i(),origin:c,features:[]};u[d]?(u[d]("DOMContentLoaded",o,!1),s[d]("load",n,!1)):(u[f]("onreadystatechange",r),s[f]("onload",n)),a("mark",["firstbyte",i()])},{handle:"D5DuLP"}],14:[function(t,e){function n(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(0>o?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=n},{}],15:[function(t,e){function n(t,e,r,s){function nrWrapper(){try{var n,a=u(arguments),d=this,f=r&&r(a,d)||{}}catch(c){i([c,"",[a,d,s],f])}o(e+"start",[a,d,s],f);try{return n=t.apply(d,a)}catch(p){throw o(e+"err",[a,d,p],f),p}finally{o(e+"end",[a,d,n],f)}}return a(t)?t:(e||(e=""),nrWrapper[n.flag]=!0,nrWrapper)}function r(t,e,r,o){r||(r="");var i,s,u,d="-"===r.charAt(0);for(u=0;u<e.length;u++)s=e[u],i=t[s],a(i)||(t[s]=n(i,d?s+r:r,o,s,t))}function o(t,e,n){try{s.emit(t,e,n)}catch(r){i([r,t,e,n])}}function i(t){try{s.emit("internal-error",t)}catch(e){}}function a(t){return!(t&&"function"==typeof t&&t.apply&&!t[n.flag])}var s=t(1),u=t(2);e.exports=n,n.inPlace=r,n.flag="nr@wrapper"},{1:1,2:14}]},{},["G9z0Bl",2,7]);</script><title>How to Build a Python Bot That Can Play Web Games - Tuts+ Code Tutorial</title><link href="http://code.tutsplus.com/tutorials/how-to-build-a-python-bot-that-can-play-web-games--active-11117" rel="canonical" /><link href="http://static.tutsplus.com/assets/favicon-3ef7b4f54ed4378b31ff3124d3c4bff8.png" rel="shortcut icon" type="image/png" /><link href="http://static.tutsplus.com/assets/apple-touch-icon-3ef7b4f54ed4378b31ff3124d3c4bff8.png" rel="apple-touch-icon" type="image/png" /><link href="http://static.tutsplus.com/assets/application-b2d7fd764147da5de93ad8e265c47911.css" media="all" rel="stylesheet" /><!--[if lte IE 8]><link href="http://static.tutsplus.com/assets/ie8-60cf0a9325a4cf96153342dac3a0c330.css" media="screen" rel="stylesheet" /><script src="http://static.tutsplus.com/assets/modernizr.custom-21d4ec93a3dac71842112f3e789ada34.js"></script><![endif]--><script src="http://static.tutsplus.com/assets/application-04e88477e1adcb995dd560a90e123416.js"></script><script src="http://static.tutsplus.com/assets/recurly_v2-c07f1b2d4bed53173d4cfb6a04ba5a3c.js"></script><link href="http://tutorials.tutsplus.com/posts.atom" rel="alternate" title="Atom 1.0" type="application/atom+xml" /><meta content="authenticity_token" name="csrf-param" />
<meta content="upycO6QVRo5FhrLoIWNBf/cHx0QlDhhaXg5mdRCzkXs=" name="csrf-token" /><meta content="initial-scale=1" name="viewport" /><meta content="index, follow" name="robots" /><meta content="How to Build a Python Bot That Can Play Web Games - Tuts+ Code Tutorial" property="og:title" /><meta content="Code Tuts+" property="og:site_name" /><meta content="In this tutorial we&#39;ll explore the ins and outs of building a Computer Vision-based game bot in Python, which will be able to to play the popular Flash game Sushi Go  Round. You can use the techniques taught in this tutorial to create bots for automatically testing your own web games. | Difficulty: Beginner; Length: Medium; Tags: Workflow, Games, Flash, Tools" property="og:description" /><meta content="article" property="og:type" /><meta content="http://code.tutsplus.com/tutorials/how-to-build-a-python-bot-that-can-play-web-games--active-11117" property="og:url" /><meta content="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/PythonLogo.png" property="og:image" /><meta content="In this tutorial we&#39;ll explore the ins and outs of building a Computer Vision-based game bot in Python, which will be able to to play the popular Flash game Sushi Go  Round. You can use the techniques taught in this tutorial to create bots for automatically testing your own web games. | Difficulty: Beginner; Length: Medium; Tags: Workflow, Games, Flash, Tools" name="description" /><meta content="http://static.tutsplus.com/assets/favicon-3ef7b4f54ed4378b31ff3124d3c4bff8.png" property="og:image" /><link href="https://plus.google.com/108971748263060947124/posts" rel="publisher" /></head><body class="page-body topic-code" data-ga-account="UA-11792865-37" data-ga-data="[]" data-ga-domain="tutsplus.com" data-wt-dcsid="dcs222cpd4g6lg7wb3cum8l5g_6w6m"><div class="page-wrap"><!--[if lt IE 10]><div class="legacy-ie-banner"><h2 class="legacy-ie-banner__title">Unsupported browser</h2><p class="legacy-ie-banner__text">This site was designed for modern browsers and tested with Internet Explorer version 10 and later. </p><p class="legacy-ie-banner__text">It may not look or work correctly on your browser. </p></div><![endif]--><nav class="global-nav view"><div class="global-nav__mobile"><section class="global-nav__mobile-search"><form accept-charset="UTF-8" action="/search" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div><input class="global-nav__mobile-search-input" name="search[keywords]" placeholder="Search Tuts+" type="text" /><button class="global-nav__mobile-search-button" name="button" type="submit"><i class="fa fa-search"></i></button></form></section><ul class="global-nav__mobile-top-level"><li class="global-nav__mobile-top-level-item global-nav__mobile-top-level-item--expanded"><a class="global-nav__mobile-top-level-link global-nav__mobile-top-level-link-expandable" href="http://tutsplus.com/"><span class="global-nav__mobile-top-level-link-title">Tutorials</span></a><a class="global-nav__mobile-top-level-link global-nav__mobile-top-level-expansion-link" href="#"><span class="global-nav__mobile-top-level-expand-text"><i class="fa fa-plus global-nav__mobile-top-level-link-icon"></i></span><span class="global-nav__mobile-top-level-collapse-text"><i class="fa fa-minus global-nav__mobile-top-level-link-icon"></i></span></a><ul class="global-nav__mobile-second-level"><li class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-design" href="http://design.tutsplus.com/">Design &amp; Illustration</a></li><li class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-code" href="http://code.tutsplus.com/">Code</a></li><li class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-webdesign" href="http://webdesign.tutsplus.com/">Web Design</a></li><li class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-music" href="http://music.tutsplus.com/">Music &amp; Audio</a></li><li class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-photography" href="http://photography.tutsplus.com/">Photography</a></li><li class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-cgi" href="http://cgi.tutsplus.com/">3D &amp; Motion Graphics</a></li><li class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-gamedevelopment" href="http://gamedevelopment.tutsplus.com/">Game Development</a></li><li class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-computers" href="http://computers.tutsplus.com/">Computer Skills</a></li><li class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-crafts" href="http://crafts.tutsplus.com/">Crafts &amp; DIY</a></li><li class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-business" href="http://business.tutsplus.com/">Business</a></li></ul></li><li class="global-nav__mobile-top-level-item"><a class="global-nav__mobile-top-level-link global-nav__mobile-top-level-link-expandable" href="http://courses.tutsplus.com/"><span class="global-nav__mobile-top-level-link-title">Courses</span></a><a class="global-nav__mobile-top-level-link global-nav__mobile-top-level-expansion-link" href="#"><span class="global-nav__mobile-top-level-expand-text"><i class="fa fa-plus global-nav__mobile-top-level-link-icon"></i></span><span class="global-nav__mobile-top-level-collapse-text"><i class="fa fa-minus global-nav__mobile-top-level-link-icon"></i></span></a><div class="global-nav__mobile-second-level"><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-all-topics-link" href="http://courses.tutsplus.com/courses">All Topics</a></div><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-design" href="http://courses.tutsplus.com/topics/design/courses">Design &amp; Illustration</a></div><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-code" href="http://courses.tutsplus.com/topics/code/courses">Code</a></div><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-webdesign" href="http://courses.tutsplus.com/topics/webdesign/courses">Web Design</a></div><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-music" href="http://courses.tutsplus.com/topics/music/courses">Music &amp; Audio</a></div><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-photography" href="http://courses.tutsplus.com/topics/photography/courses">Photography</a></div><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-cgi" href="http://courses.tutsplus.com/topics/cgi/courses">3D &amp; Motion Graphics</a></div><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-business" href="http://courses.tutsplus.com/topics/business/courses">Business</a></div><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-bundles-link" href="http://courses.tutsplus.com/bundles"><span class="translation_missing" title="translation missing: en.views.courses.courses_menu.bundles">Bundles</span></a></div></div></li><li class="global-nav__mobile-top-level-item"><a class="global-nav__mobile-top-level-link global-nav__mobile-top-level-link-expandable" href="http://ebooks.tutsplus.com/"><span class="global-nav__mobile-top-level-link-title">eBooks</span></a><a class="global-nav__mobile-top-level-link global-nav__mobile-top-level-expansion-link" href="#"><span class="global-nav__mobile-top-level-expand-text"><i class="fa fa-plus global-nav__mobile-top-level-link-icon"></i></span><span class="global-nav__mobile-top-level-collapse-text"><i class="fa fa-minus global-nav__mobile-top-level-link-icon"></i></span></a><div class="global-nav__mobile-second-level"><a class="global-nav__mobile-second-level-all-topics-link" href="http://ebooks.tutsplus.com/ebooks">All Topics</a><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-design" href="http://ebooks.tutsplus.com/topics/design/ebooks">Design &amp; Illustration</a></div><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-code" href="http://ebooks.tutsplus.com/topics/code/ebooks">Code</a></div><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-webdesign" href="http://ebooks.tutsplus.com/topics/webdesign/ebooks">Web Design</a></div><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-music" href="http://ebooks.tutsplus.com/topics/music/ebooks">Music &amp; Audio</a></div><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-photography" href="http://ebooks.tutsplus.com/topics/photography/ebooks">Photography</a></div><div class="global-nav__mobile-second-level-item"><a class="global-nav__mobile-second-level-topic-link topic-cgi" href="http://ebooks.tutsplus.com/topics/cgi/ebooks">3D &amp; Motion Graphics</a></div></div></li><li class="global-nav__mobile-top-level-item"><a class="global-nav__mobile-top-level-link" href="https://jobs.tutsplus.com/">Jobs</a></li><li class="global-nav__mobile-top-level-item"><a class="global-nav__mobile-top-level-link" href="http://blog.tutsplus.com">Blog</a></li></ul><div class="global-nav__mobile-user-links"><a class="global-nav__mobile-user-link" href="https://tutsplus.com/sign_up?redirect_to=http%3A%2F%2Fcode.tutsplus.com%2Ftutorials%2Fhow-to-build-a-python-bot-that-can-play-web-games--active-11117">Create Account</a><a class="global-nav__mobile-user-link" href="https://tutsplus.com/sign_in?redirect_to=http%3A%2F%2Fcode.tutsplus.com%2Ftutorials%2Fhow-to-build-a-python-bot-that-can-play-web-games--active-11117">Sign In</a></div></div><div class="global-nav__header"><div class="global-nav__header-content"><a class="global-nav__header-tuts-logo-link" href="http://tutsplus.com/"><img alt="tuts+" class="global-nav__header-tuts-logo-image" src="http://static.tutsplus.com/assets/tuts_logo-79176000c077f4191a2cfcc3b312b7ed.svg" /></a><div class="global-nav__header-left"><ul class="global-nav__header-list"><li class="global-nav__header-item"><nav class="topics-menu view" data-toggle=".topics-menu__dropdown-toggle"><a class="topics-menu__dropdown-toggle global-nav__header-link global-nav__header-link--primary global-nav__header-link--active" href="http://tutorials.tutsplus.com/">Tutorials<i class="fa fa-chevron-down"></i></a><ul class="topics-menu__topics"><li class="topics-menu__topic topic-design" data-slug="design"><a class="topics-menu__topic-link topic-design" href="http://design.tutsplus.com/">Design &amp; Illustration<i class="fa fa-chevron-right topics-menu__topic-link-chevron"></i></a><div class="topics-menu__topic-submenu topic-design"><span class="topics-menu__submenu-title"><a class="topics-menu__submenu-title-link topic-link topic-design" href="http://design.tutsplus.com/">Design &amp; Illustration</a></span><ul class="topics-menu__featured-categories"><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-design hello" href="http://design.tutsplus.com/categories/vector">Vector</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-design hello" href="http://design.tutsplus.com/categories/photoshop">Photoshop</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-design hello" href="http://design.tutsplus.com/categories/illustration">Illustration</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-design hello" href="http://design.tutsplus.com/categories/photo-effects">Photo Effects</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-design hello" href="http://design.tutsplus.com/categories/drawing">Drawing</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-design hello" href="http://design.tutsplus.com/categories/text-effects">Text Effects</a></li></ul><a class="topics-menu__more-categories-link topic-design" href="http://design.tutsplus.com/categories">More Categories...</a><ul class="topics-menu__submenu-footer-links topic-design"><li class="topics-menu__submenu-footer-item"><a class="topics-menu__submenu-footer-link topic-design" href="http://design.tutsplus.com/series">Series</a></li></ul></div></li><li class="topics-menu__topic topic-code" data-slug="code"><a class="topics-menu__topic-link topic-code" href="http://code.tutsplus.com/">Code<i class="fa fa-chevron-right topics-menu__topic-link-chevron"></i></a><div class="topics-menu__topic-submenu topic-code"><span class="topics-menu__submenu-title"><a class="topics-menu__submenu-title-link topic-link topic-code" href="http://code.tutsplus.com/">Code</a></span><ul class="topics-menu__featured-categories"><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-code hello" href="http://code.tutsplus.com/categories/web-dev">Web Dev</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-code hello" href="http://code.tutsplus.com/categories/html-css">HTML &amp; CSS</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-code hello" href="http://code.tutsplus.com/categories/wordpress">WordPress</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-code hello" href="http://code.tutsplus.com/categories/php">PHP</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-code hello" href="http://code.tutsplus.com/categories/javascript-ajax">JavaScript &amp; AJAX</a></li></ul><a class="topics-menu__more-categories-link topic-code" href="http://code.tutsplus.com/categories">More Categories...</a><ul class="topics-menu__submenu-footer-links topic-code"><li class="topics-menu__submenu-footer-item"><a class="topics-menu__submenu-footer-link topic-code" href="http://code.tutsplus.com/series">Series</a></li></ul></div></li><li class="topics-menu__topic topic-webdesign" data-slug="webdesign"><a class="topics-menu__topic-link topic-webdesign" href="http://webdesign.tutsplus.com/">Web Design<i class="fa fa-chevron-right topics-menu__topic-link-chevron"></i></a><div class="topics-menu__topic-submenu topic-webdesign"><span class="topics-menu__submenu-title"><a class="topics-menu__submenu-title-link topic-link topic-webdesign" href="http://webdesign.tutsplus.com/">Web Design</a></span><ul class="topics-menu__featured-categories"><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-webdesign hello" href="http://webdesign.tutsplus.com/categories/complete-websites">Complete Websites</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-webdesign hello" href="http://webdesign.tutsplus.com/categories/design-theory">Design Theory</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-webdesign hello" href="http://webdesign.tutsplus.com/categories/htmlcss">HTML/CSS</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-webdesign hello" href="http://webdesign.tutsplus.com/categories/typography">Typography</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-webdesign hello" href="http://webdesign.tutsplus.com/categories/ux">UX</a></li></ul><a class="topics-menu__more-categories-link topic-webdesign" href="http://webdesign.tutsplus.com/categories">More Categories...</a><ul class="topics-menu__submenu-footer-links topic-webdesign"><li class="topics-menu__submenu-footer-item"><a class="topics-menu__submenu-footer-link topic-webdesign" href="http://webdesign.tutsplus.com/series">Series</a></li></ul></div></li><li class="topics-menu__topic topic-music" data-slug="music"><a class="topics-menu__topic-link topic-music" href="http://music.tutsplus.com/">Music &amp; Audio<i class="fa fa-chevron-right topics-menu__topic-link-chevron"></i></a><div class="topics-menu__topic-submenu topic-music"><span class="topics-menu__submenu-title"><a class="topics-menu__submenu-title-link topic-link topic-music" href="http://music.tutsplus.com/">Music &amp; Audio</a></span><ul class="topics-menu__featured-categories"><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-music hello" href="http://music.tutsplus.com/categories/audio-production">Audio Production</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-music hello" href="http://music.tutsplus.com/categories/mixing-mastering">Mixing &amp; Mastering</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-music hello" href="http://music.tutsplus.com/categories/sound-design">Sound Design</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-music hello" href="http://music.tutsplus.com/categories/composition">Composition</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-music hello" href="http://music.tutsplus.com/categories/recording">Recording</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-music hello" href="http://music.tutsplus.com/categories/buyers-guides">Buyers Guides</a></li></ul><a class="topics-menu__more-categories-link topic-music" href="http://music.tutsplus.com/categories">More Categories...</a><ul class="topics-menu__submenu-footer-links topic-music"><li class="topics-menu__submenu-footer-item"><a class="topics-menu__submenu-footer-link topic-music" href="http://music.tutsplus.com/series">Series</a></li></ul></div></li><li class="topics-menu__topic topic-photography" data-slug="photography"><a class="topics-menu__topic-link topic-photography" href="http://photography.tutsplus.com/">Photography<i class="fa fa-chevron-right topics-menu__topic-link-chevron"></i></a><div class="topics-menu__topic-submenu topic-photography"><span class="topics-menu__submenu-title"><a class="topics-menu__submenu-title-link topic-link topic-photography" href="http://photography.tutsplus.com/">Photography</a></span><ul class="topics-menu__featured-categories"><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-photography hello" href="http://photography.tutsplus.com/categories/shooting">Shooting</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-photography hello" href="http://photography.tutsplus.com/categories/post-processing">Post-Processing</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-photography hello" href="http://photography.tutsplus.com/categories/inspiration">Inspiration</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-photography hello" href="http://photography.tutsplus.com/categories/lighting">Lighting</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-photography hello" href="http://photography.tutsplus.com/categories/theory">Theory</a></li></ul><a class="topics-menu__more-categories-link topic-photography" href="http://photography.tutsplus.com/categories">More Categories...</a><ul class="topics-menu__submenu-footer-links topic-photography"><li class="topics-menu__submenu-footer-item"><a class="topics-menu__submenu-footer-link topic-photography" href="http://photography.tutsplus.com/series">Series</a></li></ul></div></li><li class="topics-menu__topic topic-cgi" data-slug="cgi"><a class="topics-menu__topic-link topic-cgi" href="http://cgi.tutsplus.com/">3D &amp; Motion Graphics<i class="fa fa-chevron-right topics-menu__topic-link-chevron"></i></a><div class="topics-menu__topic-submenu topic-cgi"><span class="topics-menu__submenu-title"><a class="topics-menu__submenu-title-link topic-link topic-cgi" href="http://cgi.tutsplus.com/">3D &amp; Motion Graphics</a></span><ul class="topics-menu__featured-categories"><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-cgi hello" href="http://cgi.tutsplus.com/categories/after-effects">After Effects</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-cgi hello" href="http://cgi.tutsplus.com/categories/visual-effects">Visual Effects</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-cgi hello" href="http://cgi.tutsplus.com/categories/motion-graphics">Motion Graphics</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-cgi hello" href="http://cgi.tutsplus.com/categories/cinema-4d">Cinema 4D</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-cgi hello" href="http://cgi.tutsplus.com/categories/3d">3D</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-cgi hello" href="http://cgi.tutsplus.com/categories/workflow">Workflow</a></li></ul><a class="topics-menu__more-categories-link topic-cgi" href="http://cgi.tutsplus.com/categories">More Categories...</a><ul class="topics-menu__submenu-footer-links topic-cgi"><li class="topics-menu__submenu-footer-item"><a class="topics-menu__submenu-footer-link topic-cgi" href="http://cgi.tutsplus.com/series">Series</a></li></ul></div></li><li class="topics-menu__topic topic-gamedevelopment" data-slug="gamedevelopment"><a class="topics-menu__topic-link topic-gamedevelopment" href="http://gamedevelopment.tutsplus.com/">Game Development<i class="fa fa-chevron-right topics-menu__topic-link-chevron"></i></a><div class="topics-menu__topic-submenu topic-gamedevelopment"><span class="topics-menu__submenu-title"><a class="topics-menu__submenu-title-link topic-link topic-gamedevelopment" href="http://gamedevelopment.tutsplus.com/">Game Development</a></span><ul class="topics-menu__featured-categories"><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-gamedevelopment hello" href="http://gamedevelopment.tutsplus.com/categories/implementation">Implementation</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-gamedevelopment hello" href="http://gamedevelopment.tutsplus.com/categories/business">Business</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-gamedevelopment hello" href="http://gamedevelopment.tutsplus.com/categories/game-design">Game Design</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-gamedevelopment hello" href="http://gamedevelopment.tutsplus.com/categories/from-scratch">From Scratch</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-gamedevelopment hello" href="http://gamedevelopment.tutsplus.com/categories/how-to-learn">How to Learn</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-gamedevelopment hello" href="http://gamedevelopment.tutsplus.com/categories/roundups">Roundups</a></li></ul><a class="topics-menu__more-categories-link topic-gamedevelopment" href="http://gamedevelopment.tutsplus.com/categories">More Categories...</a><ul class="topics-menu__submenu-footer-links topic-gamedevelopment"><li class="topics-menu__submenu-footer-item"><a class="topics-menu__submenu-footer-link topic-gamedevelopment" href="http://gamedevelopment.tutsplus.com/series">Series</a></li></ul></div></li><li class="topics-menu__topic topic-computers" data-slug="computers"><a class="topics-menu__topic-link topic-computers" href="http://computers.tutsplus.com/">Computer Skills<i class="fa fa-chevron-right topics-menu__topic-link-chevron"></i></a><div class="topics-menu__topic-submenu topic-computers"><span class="topics-menu__submenu-title"><a class="topics-menu__submenu-title-link topic-link topic-computers" href="http://computers.tutsplus.com/">Computer Skills</a></span><ul class="topics-menu__featured-categories"><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-computers hello" href="http://computers.tutsplus.com/categories/os-x">OS X</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-computers hello" href="http://computers.tutsplus.com/categories/app-training">App Training</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-computers hello" href="http://computers.tutsplus.com/categories/productivity">Productivity</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-computers hello" href="http://computers.tutsplus.com/categories/tips-shortcuts">Tips &amp; Shortcuts</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-computers hello" href="http://computers.tutsplus.com/categories/security">Security</a></li></ul><a class="topics-menu__more-categories-link topic-computers" href="http://computers.tutsplus.com/categories">More Categories...</a><ul class="topics-menu__submenu-footer-links topic-computers"><li class="topics-menu__submenu-footer-item"><a class="topics-menu__submenu-footer-link topic-computers" href="http://computers.tutsplus.com/series">Series</a></li></ul></div></li><li class="topics-menu__topic topic-crafts" data-slug="crafts"><a class="topics-menu__topic-link topic-crafts" href="http://crafts.tutsplus.com/">Crafts &amp; DIY<i class="fa fa-chevron-right topics-menu__topic-link-chevron"></i></a><div class="topics-menu__topic-submenu topic-crafts"><span class="topics-menu__submenu-title"><a class="topics-menu__submenu-title-link topic-link topic-crafts" href="http://crafts.tutsplus.com/">Crafts &amp; DIY</a></span><ul class="topics-menu__featured-categories"><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-crafts hello" href="http://crafts.tutsplus.com/categories/jewellery">Jewellery</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-crafts hello" href="http://crafts.tutsplus.com/categories/crochet">Crochet</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-crafts hello" href="http://crafts.tutsplus.com/categories/paper-crafts">Paper Crafts</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-crafts hello" href="http://crafts.tutsplus.com/categories/homewares">Homewares</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-crafts hello" href="http://crafts.tutsplus.com/categories/decorations">Decorations</a></li><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-crafts hello" href="http://crafts.tutsplus.com/categories/sewing">Sewing</a></li></ul><a class="topics-menu__more-categories-link topic-crafts" href="http://crafts.tutsplus.com/categories">More Categories...</a><ul class="topics-menu__submenu-footer-links topic-crafts"><li class="topics-menu__submenu-footer-item"><a class="topics-menu__submenu-footer-link topic-crafts" href="http://crafts.tutsplus.com/series">Series</a></li></ul></div></li><li class="topics-menu__topic topic-business" data-slug="business"><a class="topics-menu__topic-link topic-business" href="http://business.tutsplus.com/">Business<i class="fa fa-chevron-right topics-menu__topic-link-chevron"></i></a><div class="topics-menu__topic-submenu topic-business"><span class="topics-menu__submenu-title"><a class="topics-menu__submenu-title-link topic-link topic-business" href="http://business.tutsplus.com/">Business</a></span><ul class="topics-menu__featured-categories"><li class="topics-menu__featured-category"><a class="topics-menu__featured-category-link topic-business hello" href="http://business.tutsplus.com/categories/business-finance">Business &amp; Finance</a></li></ul><a class="topics-menu__more-categories-link topic-business" href="http://business.tutsplus.com/categories">More Categories...</a><ul class="topics-menu__submenu-footer-links topic-business"><li class="topics-menu__submenu-footer-item"><a class="topics-menu__submenu-footer-link topic-business" href="http://business.tutsplus.com/series">Series</a></li></ul></div></li></ul></nav></li><li class="global-nav__header-item"><nav class="courses-menu view" data-toggle=".courses-menu__dropdown-toggle"><a class="courses-menu__dropdown-toggle global-nav__header-link global-nav__header-link--primary " href="http://courses.tutsplus.com/">Courses<i class="fa fa-chevron-down"></i></a><ul class="courses-menu__topics"><a class="courses-menu__topic-link courses-menu__all-topics-link" href="http://courses.tutsplus.com/courses">All Topics</a><li class="courses-menu__topic topic-design" data-slug="design"><a class="courses-menu__topic-link topic-design" href="http://courses.tutsplus.com/topics/design/courses">Design &amp; Illustration</a></li><li class="courses-menu__topic topic-code" data-slug="code"><a class="courses-menu__topic-link topic-code" href="http://courses.tutsplus.com/topics/code/courses">Code</a></li><li class="courses-menu__topic topic-webdesign" data-slug="webdesign"><a class="courses-menu__topic-link topic-webdesign" href="http://courses.tutsplus.com/topics/webdesign/courses">Web Design</a></li><li class="courses-menu__topic topic-music" data-slug="music"><a class="courses-menu__topic-link topic-music" href="http://courses.tutsplus.com/topics/music/courses">Music &amp; Audio</a></li><li class="courses-menu__topic topic-photography" data-slug="photography"><a class="courses-menu__topic-link topic-photography" href="http://courses.tutsplus.com/topics/photography/courses">Photography</a></li><li class="courses-menu__topic topic-cgi" data-slug="cgi"><a class="courses-menu__topic-link topic-cgi" href="http://courses.tutsplus.com/topics/cgi/courses">3D &amp; Motion Graphics</a></li><li class="courses-menu__topic topic-business" data-slug="business"><a class="courses-menu__topic-link topic-business" href="http://courses.tutsplus.com/topics/business/courses">Business</a></li><a class="courses-menu__topic-link courses-menu__bundles-link" href="http://courses.tutsplus.com/bundles"><span class="translation_missing" title="translation missing: en.views.courses.courses_menu.bundles">Bundles</span></a></ul></nav></li><li class="global-nav__header-item"><nav class="ebooks-menu view" data-toggle=".ebooks-menu__dropdown-toggle"><a class="ebooks-menu__dropdown-toggle global-nav__header-link global-nav__header-link--primary " href="http://ebooks.tutsplus.com/">eBooks<i class="fa fa-chevron-down"></i></a><ul class="ebooks-menu__topics"><a class="ebooks-menu__topic-link courses-menu__all-topics-link" href="http://ebooks.tutsplus.com/ebooks">All Topics</a><li class="ebooks-menu__topic topic-design" data-slug="design"><a class="ebooks-menu__topic-link topic-design" href="http://ebooks.tutsplus.com/topics/design/ebooks">Design &amp; Illustration</a></li><li class="ebooks-menu__topic topic-code" data-slug="code"><a class="ebooks-menu__topic-link topic-code" href="http://ebooks.tutsplus.com/topics/code/ebooks">Code</a></li><li class="ebooks-menu__topic topic-webdesign" data-slug="webdesign"><a class="ebooks-menu__topic-link topic-webdesign" href="http://ebooks.tutsplus.com/topics/webdesign/ebooks">Web Design</a></li><li class="ebooks-menu__topic topic-music" data-slug="music"><a class="ebooks-menu__topic-link topic-music" href="http://ebooks.tutsplus.com/topics/music/ebooks">Music &amp; Audio</a></li><li class="ebooks-menu__topic topic-photography" data-slug="photography"><a class="ebooks-menu__topic-link topic-photography" href="http://ebooks.tutsplus.com/topics/photography/ebooks">Photography</a></li><li class="ebooks-menu__topic topic-cgi" data-slug="cgi"><a class="ebooks-menu__topic-link topic-cgi" href="http://ebooks.tutsplus.com/topics/cgi/ebooks">3D &amp; Motion Graphics</a></li></ul></nav></li><li class="global-nav__header-item"><a class="global-nav__header-link" href="https://jobs.tutsplus.com/">Jobs</a></li><li class="global-nav__header-item"><a class="global-nav__header-link " href="http://blog.tutsplus.com">Blog</a></li></ul></div><div class="global-nav__header-right"><div class="global-nav__user-links"><a class="global-nav__pricing-button" href="http://tutsplus.com/pricing">Pricing</a><a class="global-nav__header-link" href="https://tutsplus.com/sign_up?redirect_to=http%3A%2F%2Fcode.tutsplus.com%2Ftutorials%2Fhow-to-build-a-python-bot-that-can-play-web-games--active-11117">Create Account</a><div class="global-nav__user-links-separator"> or </div><a class="global-nav__header-link" href="https://tutsplus.com/sign_in?redirect_to=http%3A%2F%2Fcode.tutsplus.com%2Ftutorials%2Fhow-to-build-a-python-bot-that-can-play-web-games--active-11117">Sign In</a></div></div></div></div><div class="global-nav__mobile-toggle"><a class="global-nav__mobile-toggle-link" href="javascript:"><i class="fa fa-reorder"></i></a></div></nav><div class="ad view ad--leaderboard"><div class="ad__wrapper"><div class="ad__content" id="div-gpt-1391730982123-0" style="width: 728px; height: 90px;"></div><div class="ad__label">Advertisement</div></div></div><div class="page-content"><main class="content"><div class="section-header"><div class="section-header__navigation"><div class="section-header__topic"><a class="section-header__topic-link topic-link topic-code" href="http://code.tutsplus.com/"><div class="section-header__section-icon section-header__section-icon--tutorials"></div>Code</a></div><ul class="section-header__nav-links"><li class="section-header__nav-link section-header__nav-link--dropdown"><div class="dropdown-menu view" data-toggle=".dropdown-menu__toggle"><a class="dropdown-menu__toggle" href="javascript:"><span class="dropdown-menu__title">Categories</span> <i class="fa fa-chevron-down"></i></a><ul class="dropdown-menu__items"><li class="dropdown-menu__item"><a class="dropdown-menu__item-link" href="http://code.tutsplus.com/categories/web-development">Web Development</a></li><li class="dropdown-menu__item"><a class="dropdown-menu__item-link" href="http://code.tutsplus.com/categories/wordpress">WordPress</a></li><li class="dropdown-menu__item"><a class="dropdown-menu__item-link" href="http://code.tutsplus.com/categories/mobile-development">Mobile Development</a></li><li class="dropdown-menu__item"><a class="dropdown-menu__item-link" href="http://code.tutsplus.com/categories/flash">Flash</a></li><li class="dropdown-menu__item"><a class="dropdown-menu__item-link" href="http://code.tutsplus.com/categories/php">PHP</a></li><li class="dropdown-menu__item"><a class="dropdown-menu__item-link" href="http://code.tutsplus.com/categories/javascript-ajax">JavaScript &amp; AJAX</a></li><li class="dropdown-menu__item"><a class="dropdown-menu__item-link" href="http://code.tutsplus.com/categories/news">News</a></li><li class="dropdown-menu__item"><a class="dropdown-menu__item-link" href="http://code.tutsplus.com/categories/javascript">JavaScript</a></li><li class="dropdown-menu__item"><a class="dropdown-menu__item-link" href="http://code.tutsplus.com/categories/ios-sdk">iOS SDK</a></li><li class="dropdown-menu__item dropdown-menu__more"><a class="dropdown-menu__item-link" href="http://code.tutsplus.com/categories">More...</a></li></ul></div></li><li class="section-header__nav-link section-header__nav-link--direct"><a href="http://code.tutsplus.com/categories">Categories</a></li><li class="section-header__nav-link"><a href="http://code.tutsplus.com/series">Series</a></li></ul></div><div class="section-header__secondary"><div class="section-header__search"><form accept-charset="UTF-8" action="http://code.tutsplus.com/search" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div><input class="posts-switcher--field" id="view" name="view" type="hidden" /><input class="section-header__search-input" name="search[keywords]" placeholder="Search tutorials and articles..." type="text" /><button class="section-header__search-button" name="button" type="submit"><div class="icon fa fa-search section-header__search-icon"></div></button></form></div></div></div><article class="post tutorial"><div class="post__inarticle-ad-template" style="display: none"><div class="ad view"><div class="ad__wrapper"><div class="ad__content" id="div-gpt-1392179526912-0" style="width: 300px; height: 250px;"></div><div class="ad__label">Advertisement</div></div></div></div><div class="nongrid__offset-content"><div class="content-header"><div class="content-header__category"><a class="content-header__category-link" href="http://code.tutsplus.com/categories/workflow">Workflow</a></div><h1 class="content-header__title">How to Build a Python Bot That Can Play Web Games</h1><div class="content-header__publication-meta"><span class="content-header__author-by"></span>by <span class="content-header__author"><a class="content-header__author-link" href="http://tutsplus.com/authors/chris-kiehl" rel="author">Chris Kiehl</a></span><time class="content-header__publication-date" datetime="2012-03-23T06:00:45Z" title="23 Mar 2012">23 Mar 2012</time><span class="content-header__comment-count"><i class="icon tutsicon-comment content-header__comment-icon"></i><a class="content-header__comment-count-link" data-disqus-identifier="11117 http://active.tutsplus.com/?p=11117" href="#disqus_thread"></a></span></div><script src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-539675c9015aacb1">async</script><div class="addthis_sharing_toolbox"></div></div><div class="post-body view"><div class="post-body__body"><div class="post-body__content"><p>In this tutorial we'll explore the ins and outs of building a Computer Vision-based game bot in Python, which will be able to to play the popular Flash game <a href="http://www.miniclip.com/games/sushi-go-round/en/">Sushi Go  Round</a>. You can use the techniques taught in this tutorial to create bots for automatically testing your own web games.<!--more--></p>
<hr />
<h2>Final Result Preview</h2>
<p>Let's take a look at the final result we will be working towards:</p>
<div class="tutorial_image"><iframe src="http://blip.tv/play/haIJgvDcXgA.html?p=1" width="600" height="469" frameborder="0" allowfullscreen></iframe><embed type="application/x-shockwave-flash" src="http://a.blip.tv/api.swf#haIJgvDcXgA" style="display:none"></embed></div>
<hr />
<h2>Prerequisites</h2>
<p>This tutorial, and all the code within it, requires that a few  additional Python libraries be installed. They provide a nice Python  wrapping  to a bunch of low-level C code which greatly eases the process and  speed of bot scripting.</p>
<p>Some of the code and libraries are Windows-specific. There may be Mac or Linux equivalents, but we won't be covering them in this tutorial.</p>
<p>You'll need to download and install the following libraries:</p>
<ul>
<li><a href="http://www.pythonware.com/products/pil/">The Python Imaging Library</a></li>
<li><a href="http://numpy.scipy.org/">Numpy</a></li>
<li><a href="http://sourceforge.net/projects/pywin32/">PyWin</a></li>
<p>All of the above have self installers; Running them will  automatically install the modules into your <code>\lib\site-packages</code> directory  and, in theory, adjust your <code>pythonPath</code> accordingly. However in  practice this doesn't always happen. Should you begin receiving any  <code>Import Error</code> messages after installation, you'll probably  need to manually adjust your Environment Variables.   More information on adjusting Path  Variables may be found <a  href="http://www.katsbits.com/tutorials/blender/setting-up-windows- python-path-system-variable.php">here</a>. </ul>
<p>The final tool we'll need is a decent paint program. I suggest <a  href="http://www.getpaint.net">Paint.NET</a> as an excellent free option,  but any program with rulers that display their measurements in pixels  can be used.</p>
<p>We'll use a few games as examples along the way</p>
<hr />
<h2>Introduction</h2>
<p>This tutorial is written to gave a basic introduction to the  process of building bots that play browser-based games. The approach we're  going to take is likely slightly different than what most would expect  when they think of a bot. Rather than making a program that sits  between the  client and server injecting code (like a Quake or C/S bot), our bot  will sit purely on the 'outside'. We'll rely on Computer Vision-esque  techniques and Windows API calls to gather needed information and generate  movement.</p>
<p>With this approach we lose a bit of refined detail and control,  but make up for it in shortened dev time and ease of use. Automating a  specific  game function can be done in a few short lines of code, and a full-fledged, start-to-finish bot (for a simple game) can be cranked out  in a few hours.</p>
<p>The joys of this fast approach are such that once you get familiar  with what the computer can easily 'see', you'll begin to view games  slightly  differently. A good example is found in puzzle games. A common  construct involves exploiting human speed limitations to force you  into a less than  optimal solution. It's fun (and pretty easy) to 'break' these games by  scripting in movements that could never be accomplished by a human.</p>
<p>These bots are also very useful for testing simple games - unlike a human, a bot won't get bored playing the same scenario over and over again.</p>
<p>Source code for all of the tutorial examples, as well as for one of the  completed example bots, may be found  <a href="http://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Activetuts_PythonBot.zip" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Activetuts_PythonBot.zip">here.</a></p>
<p>Have fun!</p>
<hr />
<h2><span>Step 1:</span> Create a New Python Project</h2>
<p>In a new folder, right-click and select <code>New > Text  Document</code>.</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/right_click_new_text.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/right_click_new_text.png"  alt="Python_Snapshot_of_entire_screen_area" /></div>
<p>Once made, rename the file from 'New Text Document' to  'quickGrab.py' (without the quotes) and confirm that you want to  change the file name extension.</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/quickgrab_py.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/quickgrab_py.png"  alt="Python_Snapshot_of_entire_screen_area" /></div>
<p>Finally, right-click on our newly created file and select "Edit  with IDLE" from the context menu to launch the editor</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/edit_w_idle.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/edit_w_idle.png"  alt="Python_Snapshot_of_entire_screen_area" /></div>
</hr>
<hr />
<h2><span>Step 2:</span> Setting Up Your First Screen Grab</h2>
<p>We'll begin work on our bot by exploring the basic screen grab  function. Once up and running, we'll step through it line by line,  as this function (and its many iterations) will serve as the backbone  of our code.</p>
<p>In quickgrab.py enter the following code:</p>
<pre class="brush: python">
import ImageGrab
import os
import time

def screenGrab():
    box = ()
    im = ImageGrab.grab()
    im.save(os.getcwd() + '\\full_snap__' + str(int(time.time())) + 
'.png', 'PNG')

def main():
    screenGrab()

if __name__ == '__main__':
    main()</pre>
<p>Running this program should give you a full snapshot of the screen  area:</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/full_snap_600x480.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/full_snap_600x480.png"  alt="Python_Snapshot_of_entire_screen_area" /></div>
<p>The current code grabs the full width and height of your screen  area and stores it as a PNG in your current working directory.</p>
<p>Now let's step through the code to see exactly how it works.</p>
<p>The first three lines:</p>
<pre class="firstline: 1; brush: python">
import ImageGrab
import os
import time</pre>
<p>...are the aptly named 'import statements'. These tell Python to load  in the listed modules at runtime. This gives us access to their  methods via  the <code>module.attribute</code> syntax.</p>
<p>The first module is part of the Python Image Library we installed earlier. As  its name suggests, it gives us the basic screen gabbing functionality  our bot will rely on.</p>
<p>The second line imports the OS (Operating System) Module.  This gives us the ability to easily navigate around our operating  system's directories. It'll come in handy once we begin organizing  assets  into different folders.</p>
<p>This final import is the built-in Time module. Well use this mostly  for stamping the current time onto snapshots, but it can be very  useful  as a timer for bots that need events triggered over a given number of  seconds.</p>
<p>The next four lines make up the heart of our <code>screenGrab()</code> function.</p>
<pre class="firstline: 1; brush: python">
def screenGrab():
    box = ()
    im = ImageGrab.grab()
    im.save(os.getcwd() + '\\full_snap__' + str(int(time.time())) + 
'.png', 'PNG')</pre>
<p>The first line <code>def screenGrab()</code> defines the name of  our function. The empty parentheses mean it expects no arguments.</p>
<p>Line 2, <code>box=()</code> assigns an empty tuple to a variable  named "box".  We'll fill this with arguments in the next step.</p>
<p>Line 3, <code>im = ImageGrab.grab()</code> creates a full snapshot of your screen and returns an RGB image to the instance  <code>im</code></p>
<p>Line 4 can be a little tricky if you're unfamiliar with  how the <code>Time</code> module works.  The first part <code>im.save(</code> calls the "save" method from the  Image class. It expects <em>two</em> arguments. The first is the  location in which to save the file, and the second is the file format.</p>
<p>Here we set the location by first calling <code>os.getcwd()</code>.  This gets the current directory the code is being run from and  returns  it as a string. We next add a <code>+</code>. This will be used  in between each new argument to concatenate all of the strings  together.</p>
<p>The next piece <code>'\\full_snap__</code> give our file a simple  descriptive name. (Because the backslash is an escape character  in Python, we have to add two of them to avoid cancelling out one of  our letters).</p>
<p>Next is the hairy bit: <code>str(int(time.time()))  </code>.  This takes advantage of Python's built-in Type methods. We'll explain  this piece by working from the inside out:</p>
<p><code>time.time()</code> returns the number of seconds since Epoch, which is given  as a type Float. Since we're creating a file name we can't have the  decimal in there, so we first convert it to an integer by wrapping it in  <code>int()</code>. This gets us close, but Python can't concatenate  type  <code>Int</code>  with type <code>String</code>, so the last step is  to wrap everything in the <code>str()</code> function to give us a  nice  usable timestamp for the file name. From here, all that remains is  adding the extension as part of the string: <code>+ '.png'</code> and passing the second  argument  which is again the extension's type: <code>"PNG"</code>.</p>
<p>The last part of our code defines the function <code>main()</code>,  and tells it to call the <code>screenGrab()</code> function whenever  it's run.</p>
<p>And here, at the end, is a Python convention that checks whether the  script is top level, and if so allows it to run. Translated,  it simply means that that it only executes <code>main()</code> if it  is run by itself. Otherwise - if, for instance,  it is loaded as a module by a different Python script - it only  supplies its methods instead of executing its code.</p>
<pre class="firstline: 11; brush: python">
def main():
    screenGrab()

if __name__ == '__main__':
    main()</pre>
<hr />
<h2><span>Step 3:</span> The Bounding Box</h2>
<p>The <code>ImageGrab.grab()</code> function accepts one argument which defines a bounding  box. This is a tuple of coordinates following the pattern of (x,y,x,y)  where,
<ol>
<li>The first pair of values (<code>x,y..</code> defines  the top left corner of the box</li>
<li>The second pair <code>..x,y</code>) defines the bottom  right.</li>
</ol>
<p>Combining these allows us to only copy the part of the screen we need.</p>
<p>Let's put this into practice.</p>
<p>For this example, we're going to use a game called <a  href="http://www.miniclip.com/games/sushi-go-round/en/">Sushi Go  Round</a>. (<em>Quite</em> addicting. You've been warned.) Open the game in a new  tab and take a snapshot using our existing <code>screenGrab()</code>  code:</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/sushi_full_screen_grab.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/sushi_full_screen_grab.png"  alt="Python_Snapshot_of_sushi_game_full_screen" /></div>
<p>A snapshot of the full screen area.</p>
<hr />
<h2><span>Step 4:</span> Getting Coordinates</h2>
<p>Now it's time to start mining some coordinates for our bounding  box.</p>
<p>Open up your most recent snapshot in an image editor.</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/sushi_inside_paint.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/sushi_inside_paint.png"  alt="Python_Snapshot_of_sushi_game_full_screen" /></div>
<p>The (0,0) position is always located at the top left corner of the  image. We want to pad the x and y coordinates so that our new snapshot function sets (0,0) to the leftmost corner of the game's play  area.</p>
<p>The reasons for this are two-fold. First, it makes finding in-game  coordinates much easier when we only need to adjust values in relation  to the play area versus the entire area of your screen resolution.  Second, grabbing a smaller portion of the screen reduces the  processing overhead required. Full screen grabs produce quite a bit  of data, which can make it tough to traverse it multiple times per second.</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/sushi_xy.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/sushi_xy.png"  alt="looking_at_xy" /></div>
<p>If not done already, enable the ruler display in your editor and  zoom in on the top corner of the play area until you can see the  pixels in detail:</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/sushi_zoom_set_xy.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/sushi_zoom_set_xy.png"  alt="looking_at_x_y" /></div>
<p>Hover your cursor over the first pixel of the play area and check  the coordinates displayed on the ruler. These will be the first two  values of  our Box tuple. On my specific machine these values are <code>157,  162</code>.</p>
<p>Navigate to the lower edge of the play area to get the bottom pair  of coordinates.</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/sushi_zoom_set_low_xy.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/sushi_zoom_set_low_xy.png" alt="looking_at_x_y" /></div>
<p>This shows coordinates of 796 and 641. Combining these with our  previous pair gives a box with the coordinates of <code>(157,162,796,641)</code>.</p>
<p>Let's add this to our code.</p>
<pre class="highlight: [6]; brush: python">
import ImageGrab
import os
import time

def screenGrab():
    box = (157,346,796,825)
    im = ImageGrab.grab(box)
    im.save(os.getcwd() + '\\full_snap__' + str(int(time.time())) + 
'.png', 'PNG')

def main():
    screenGrab()

if __name__ == '__main__':
    main()</pre>
<p>In line 6 we've updated the tuple to hold the coordinates of the  play area.</p>
<p>Save and run the code. Open up the newly saved image and you should  see:</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/play_area_snapshot.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/play_area_snapshot.png"  alt="play_area_snapshot.png" /></div>
<p>Success! A perfect grab of the play area. We won't always need to  do this kind of intensive hunt for coordinates. Once we get into the  win32api  we'll go over some faster methods for setting coordinates when we  don't need pixel perfect accuracy.</p>
<hr />
<h2><span>Step 5:</span> Planning Ahead for Flexibility</h2>
<p>As it stands now, we've hard-coded the coordinates in relation to  our current setup, assuming <em>our</em> browser, and <em>our</em>  resolution. It's generally a bad idea to hard-code coordinates in this  way. If, for instance, we want to run the code on a different  computer - or  say, a new ad on the website shifts the position of the play area  slightly - we would have to manually and painstakingly fix all  of our coordinate calls.</p>
<p>So we're going to create two new variables: <code>x_pad</code> and <code>y_pad</code>. These will be  used to  store the relationship between the game area and the rest of the  screen. This will make it  very easy to port the code from place to place since every new  coordinate will be relative to the two global variables we're going to  create,  and to adjust for changes in screen area, all that's required is to reset these two variables.</p>
<p>Since we've already done the measurements, setting the pads for our  current system is very straightforward. We're going to set the pads  to store the location of the first pixel outside of the play area. From the first pair of x,y coordinates in our <code>box</code> tuple,  subtract a <code>1</code> from each value. So <code>157</code> becomes  <code>156</code>, and <code>346</code> becomes <code>345</code>.</p>
<p>Let's add this to our code.</p>
<pre class="firstline: 15; brush: python">
# Globals
# ------------------

x_pad = 156
y_pad = 345</pre>
<p>Now that these are set, we'll begin to adjust the box tuple to be  in relation to these values.</p>
<pre class="firstline: 22; brush: python">
def screenGrab():
    box = (x_pad+1, y_pad+1, 796, 825)
    im = ImageGrab.grab()
    im.save(os.getcwd() + '\\full_snap__' + str(int(time.time())) + 
'.png', 'PNG')</pre>
<p>For the second pair, we're going to first subtract the values of  the pads (156 and 345) from the coordinates (796, 825), and then use those values in the same <code>Pad +  Value</code> format.</p>
<pre class="firstline: 22; brush: python">
def screenGrab():
    box = (x_pad+1, y_pad+1, x_pad+640, y_pad+479)
    im = ImageGrab.grab()
    im.save(os.getcwd() + '\\full_snap__' + str(int(time.time())) + 
'.png', 'PNG')</pre>
<p>Here the <code>x</code> coordinate becomes 640 (769-156), and the  <code>y</code> becomes 480 (825-345)</p>
<p>It may seem a little redundant at first, but doing this extra step  ensures easy maintenance in the future.</p>
<hr />
<h2><span>Step 6:</span> Creating a Docstring</h2>
<p>Before we go any further, we're going to create a docstring at the  top of our project.  Since most of our code will be based around specific screen  coordinates and relationships <em>to</em> coordinates, it's important  to know the  circumstances under which everything will line up correctly. For  instance, things such as  current resolution, browser, toolbars enabled (since they change the  browser area), and any adjustments needed to center  the play area on screen, all affect the relative position of the  coordinates. Having all of this documented <em>greatly</em> helps the  troubleshooting process when running your code across multiple browsers and computers.</p>
<p>One last thing to be aware of is the ever-changing ad space on popular  gaming sites. If all of your grab calls  suddenly stop behaving as expected, a new add slightly shifting things  on screen is a good bet.</p>
<p>As an example, I usually have the following comments at the top of  my Python code:</p>
<pre class="firstline: 0; brush: python">
&quot;&quot;&quot;

All coordinates assume a screen resolution of 1280x1024, and Chrome 
maximized with the Bookmarks Toolbar enabled.
Down key has been hit 4 times to center play area in browser.
x_pad = 156
y_pad = 345
Play area =  x_pad+1, y_pad+1, 796, 825
&quot;&quot;&quot;</pre>
<p>Dropping all of this information at the beginning of your Python  file makes it quick and easy to double check all of your  settings and screen alignment without having to pore over your code  trying to remember where you stored that one specific x-coordinate.</p>
<hr />
<h2><span>Step 7:</span> Turning <code>quickGrab.py</code> Into a Useful Tool</h2>
<p>We're going to fork our project at this point, creating two files: one to hold all of our bot's code, and the other to act as a  general screen shot utility. We're going to be taking a lot of screen  shots as we hunt for coordinates, so having a separate module ready to  go  will make things a lot speedier.</p>
<p>Save and close our current project.</p>
<p>In your folder, right-click on <code>quickGrab.py</code> and select 'copy' from  the menu.</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/copy_py.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/copy_py.png"  alt="play_area_snapshot.png" /></div>
<p>Now right-click and select 'paste' from the menu</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/paste_py.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/paste_py.png"  alt="play_area_snapshot.png" /></div>
<p>Select the copied file and rename it to 'code.py'</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/copy_rename.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/copy_rename.png"  alt="play_area_snapshot.png" /></div>
<p>From now on all new code additions and changes will be made in  code.py. quickGrab.py will now function purely as a snapshot tool. We  just  need to make one final modification:</p>
<p>Change the file extension from .py, to .pyw and confirm the  changes.</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/change_pyw.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/change_pyw.png"  alt="play_area_snapshot.png" /></div>
<p>This extension tells Python to run the script without launching the  console. So now, quickGrab.pyw lives up to its name. Double click on  the file and it will quietly execute its code in the background and  save a snapshot to your working directory.</p>
<p>Keep the game open in the background (be sure to mute it before the  looped music drives you to madness); we'll return to it shortly. We  have a  few more concepts/tools to introduce before we get into controlling  things on-screen.</p>
<hr />
<h2><span>Step 8:</span> <code>Win32api</code> - A Brief Overview</h2>
<p>Working with the <code>win32api</code> can be a little daunting initially. It  wraps the low-level Windows C code - which is thankfully <em>very</em>  well documented <a href="http://msdn.microsoft.com/en-gb/en-us/library/windows/desktop/hh447209(v=vs.85).aspx"> here</a>, but a little like a labyrinth to navigate through your first  couple of go-arounds.</p>
<p>Before we start scripting any useful actions, we're going to take a  close look at some of the API functions upon which we'll be  relying.  Once we have a clear understanding of each parameter it will be easy  to adjust them to serve whatever purposes we need in-game.</p>
<p>The <code>win32api.mouse_event()</code>:</p>
<pre class="firstline: 0; brush: python">

win32api.mouse_event(
	dwFlags,
	dx,
	dy,
	dwData	
	)</pre>
<p>The first parameter <code>dwFlags</code> defines the "action" of  the mouse. It controls things such as movement, clicking, scrolling,  etc..</p>
<p>The following list shows the most common parameters used while  scripting movement.</p>
<p><code>dwFlags</code>:</p>
<ul>
<li><code>win32con.MOUSEEVENTF_LEFTDOWN</code></li>
<li><code>win32con.MOUSEEVENTF_LEFTUP</code></li>
<li><code>win32con.MOUSEEVENTF_MIDDLEDOWN</code></li>
<li><code>win32con.MOUSEEVENTF_MIDDLEUP</code></li>
<li><code>win32con.MOUSEEVENTF_RIGHTDOWN</code></li>
<li><code>win32con.MOUSEEVENTF_RIGHTUP</code></li>
<li><code>win32con.MOUSEEVENTF_WHEEL</code></li>
</ul>
<p>Each name is self explanatory. If you wanted to send a virtual right-click, you would pass  <code>win32con.MOUSEEVENTF_RIGHTDOWN</code> to the  <code>dwFlags</code> parameter.</p>
<p>The next two parameters, <code>dx</code> and <code>dy</code>, describe  the mouse's absolute position along the x and y axis. While we could  use  these parameters for scripting mouse movement, they use a coordinate  system different than the one we've been using. So, we'll leave them  set  to zero and rely on a different part of the API for our mouse moving  needs.</p>
<p>The fourth parameter is <code>dwData</code> . This function is used  if (and only if) <code>dwFlags</code> contains  <code>MOUSEEVENTF_WHEEL</code>.  Otherwise is can be omitted or set to zero. <code>dwData</code>  specifies the amount of movement on your mouse's scroll wheel.</p>
<p>A quick example to solidify these techniques:</p>
<p>If we imagine a game with a weapon selection system similar to  Half-Life 2 - where weapons can be selected by rotating the mouse  wheel - we would come up with the following function to sift through  the weapons list:</p>
<pre class="firstline: 1; brush: python">
def browseWeapons():
	weaponList = ['crowbar','gravity gun','pistol'...]
	for i in weaponList:	
		win32api.mouse_event(win32con.MOUSEEVENTF_MOUSEEVENTF_WHEEL,0,0,120)</pre>
<p>Here we want to simulate scrolling the mouse wheel to navigate our  theoretical weapon listing,  so we passed the <code>...MOUSEEVENTF_WHEEL</code> 'action' to the  dwFlag.  We don't need <code>dx</code> or <code>dy</code>, positional data, so we left those set to zero,  and we wanted to scroll one click in the forward direction for each  'weapon' in the list, so we passed the integer 120 to dwData (each  wheel click equals 120).</p>
<p>As you can see, working with <code>mouse_event</code> is simply a  matter of plugging the right arguments into the right spot. Let's now  move onto some more usable functions</p>
<hr />
<h2><span>Step 5:</span> Basic Mouse Clicking</h2>
<p>We're going to make three new functions. One general left-click  function, and two that handle the specific down and up states.</p>
<p>Open <code>code.py</code> with IDLE and add the following to our  list of import statements:</p>
<pre class="brush: python">
import win32api, win32con</pre>
<p>As before, this gives us access to module's contents via the  <code>module.attribute</code> syntax.</p>
<p>Next we'll make our first mouse click function.</p>
<pre class="brush: python">
def leftClick():
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,0,0)
    time.sleep(.1)
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,0,0)
    print &quot;Click.&quot; 			#completely optional. But nice for debugging purposes.</pre>
<p>Recall that all we're doing here is assigning an 'action' to the  first argument of <code>mouse_event</code>. We don't need to pass any positional information, so we're leaving the  coordinate parameters at (0,0), and we  don't need to send any additional info, so <code>dwData</code> is being omitted.  The <code>time.sleep(.1)</code> function tells Python to halt  execution for the time specified in parentheses. We'll add these  through out our code, usually for very short amount of times. Without  these, the  'clicking' can get ahead of itself and fire before menus have a chance  to update.</p>
<p>So what we've made here is a general left-click. One press, one  release. We'll spend most of our time with this one, but we're going  to  make two more variations.</p>
<p>The next two are the exact same thing, but now each step is split  into its own function. These will be used when we need to hold down  the  mouse for a length of time (for dragging, shooting, etc..).</p>
<pre class="firstline: 0; brush: python">
def leftDown():
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,0,0)
    time.sleep(.1)
    print 'left Down'
		
def leftUp():
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,0,0)
    time.sleep(.1)
    print 'left release'</pre>
<hr />
<h2><span>Step 9:</span> Basic Mouse Movement</h2>
<p>With clicking out of the way all that's left is moving the mouse  around on screen.</p>
<p>Add the following functions to <code>code.py</code>:</p>
<pre class="brush: python">
def mousePos(cord):
	win32api.SetCursorPos((x_pad + cord[0], y_pad + cord[1])
	
def get_cords():
	x,y = win32api.GetCursorPos()
	x = x - x_pad
	y = y - y_pad
	print x,y</pre>
<p>These two functions serve distinctly different purposes. The first  will be used for scripting movement in the program. Thanks to  excellent  naming conventions, the body of the function does exactly as  <code>SetCursorPos()</code> implies. Calling this function   sets the mouse to the coordinates passed to it as an <code>x,y</code> tuple. Notice  that we've added in our <code>x</code> and <code>y</code> pads; it's important to do this anywhere a coordinate is called.</p>
<p>The second is a simple tool that we'll use while running Python  interactively. It prints to the console the current position of the  mouse  as an <code>x,y</code> tuple. This greatly speeds up the process of navigating  through menus without having to take a snapshot and break out a ruler.  We won't always be able to use it, as some mouse activities will need  to be pixel-specific, but when we can, it's a fantastic time saver.</p>
<p>In the next step we'll put some of these new techniques to use and  start navigating in-game menus. But before we do, delete the current  contents of <code>main()</code> in <code>code.py</code> and replace it  with <code>pass</code>. We're going to be working with the  interactive prompt for the next step, so we won't be needing the  <code>screenGrab()</code> function.</p>
<hr />
<h2><span>Step 10:</span> Navigating Game  Menus</h2>
<p>In this, and the next few steps, we're going to attempt to gather  as many event coordinates as we can using our <code>get_cords()</code> method.  Using it  we'll be able to quickly build up the code for things like navigating  menus, clearing tables, and making food. Once we have these set, it will just be a matter of hooking them into the bot's logic.</p>
<p>Let's get started. Save and run your code to bring up the Python  shell. Since we replaced the body of <code>main()</code> with  <code>pass</code> in the last step, you should see a blank shell upon running.</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/blank_console.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/blank_console.png"  alt="play_area_snapshot.png" /></div>
<p>Now, before we even get to the playable part of the game there are  four initial menus we need to get through. They are as follows:</p>
<ol>
<li>Initial "play" button
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/play_button.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/play_button.png" alt="play_button.png" /></div>
</li>
<li>iPhone "continue" button
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/iphone_cont_button.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/iphone_cont_button.png" alt="" /></div>
</li>
<li>Tutorial "Skip" button
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/skip_button.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/skip_button.png" alt="" /></div>
</li>
<li>Today's goal "Continue" button
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/daily_goal_cont_button.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/daily_goal_cont_button.png" alt=".png" /></div>
</li>
</ol>
<p>We'll need to get the coordinates for each of these and the add  them to a new function called <code>startGame()</code>.  Position the IDLE shell so you can see both it and the play area. Type  in the <code>get_cords()</code> function but don't press return yet; move your  mouse over the button for which you need coordinates. Be sure not to click  yet, as we want focus to remain in the shell. Hover your  mouse over the menu item and <em>now</em> press the return key. This will grab  the current location of the mouse and print to the console a tuple  containing the <code>x,y</code> values. Repeat this for the remaining three menus.</p>
<div class="tutorial_image"><iframe src="http://blip.tv/play/haIJgvDbeQA.html?p=1" width="600" height="469" frameborder="0" allowfullscreen></iframe><embed type="application/x-shockwave-flash" src="http://a.blip.tv/api.swf#haIJgvDbeQA" style="display:none"></embed></div>
<p>Leave the shell open and arrange it so you can see it as well as  the IDLE editor. We're now going to now add our <code>startGame()</code> function  and fill  it with our newly acquired coordinates.</p>
<pre class="brush: python">
def startGame():
	#location of first menu
	mousePos((182, 225))
    leftClick()
    time.sleep(.1)
	
	#location of second menu
    mousePos((193, 410))
    leftClick()
    time.sleep(.1)
	
	#location of third menu
    mousePos((435, 470))
    leftClick()
    time.sleep(.1)
	
	#location of fourth menu
    mousePos((167, 403))
    leftClick()
    time.sleep(.1)</pre>
<p>We now have a nice compact function to call at the start of each  game. It sets the cursor position to each of the menu locations we  previously defined, and then tells the mouse to click.  <code>time.sleep(.1)</code> tells Python to halt  execution for 1/10 of a second between each click, which gives the menus enough time to  update in between.</p>
<p>Save and run your code and you should see a result similar to this:</p>
<div class="tutorial_image"><iframe src="http://blip.tv/play/haIJgvDcPQA.html?p=1" width="600" height="469" frameborder="0" allowfullscreen></iframe><embed type="application/x-shockwave-flash" src="http://a.blip.tv/api.swf#haIJgvDcPQA" style="display:none"></embed></div>
<p>As a feeble human it takes me slightly longer than a second to  navigate all of the menus by hand, but our bot can now do it in about .4 seconds. Not bad at all!</p>
<hr />
<h2><span>Step 11:</span> Getting Food Coordinates</h2>
<p>Now we're going to repeat the same process for each of these buttons:</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/food_items.png" data-original-url="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/food_items.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/food_items.png"  alt="play_button.png" /></div>
<p>Once again, in the Python shell, type in <code>get_cords()</code>,  hover you mouse over the food box you need, and press the Enter key to  execute the command.</p>
<p>As an option to further speed things along, if you have a second  monitor, or are able to arrange the python shell in a way that you can  see it as well as the game area, rather than typing in and running  <code>get_cords()</code> each time we need it, we can set up a simple <code>for</code> loop. Use a <code>time.sleep()</code> method to halt execution just long enough for you  to move the mouse to the next location needing coordinates.</p>
<p>Here's the <code>for</code> loop in action:</p>
<div class="tutorial_image"><iframe src="http://blip.tv/play/haIJgvDcXQA.html?p=1" width="600" height="469" frameborder="0" allowfullscreen></iframe><embed type="application/x-shockwave-flash" src="http://a.blip.tv/api.swf#haIJgvDcXQA" style="display:none"></embed></div>
<p>We're going to create a new class called <code>Cord</code> and use it to store  all of the coordinate values we gather. Being able to call  <code>Cord.f_rice</code>  offers  a huge readability advantage over passing the coordinates directly to  <code>mousePos()</code>. As an option, you could also store everything in a  <code>dictionary</code>,  but I find the class syntax more enjoyable.</p>
<pre class="brush: python">
class Cord:
	
	f_shrimp = (54,700)
	f_rice = (119 701)
	f_nori = (63 745)
	f_roe = (111 749)
	f_salmon = (54 815)
	f_unagi = (111 812)</pre>
<p>We're going to store a lot of our coordinates in this class, and  there will be some overlap, so adding the '<code>f_</code>' prefix lets us know  that  we referring to the food locations, rather than, say, a location in the phone  menu.</p>
<p>We'll return to these in a bit. There is a bit more coordinate  hunting to do!</p>
<hr />
<h2><span>Step 12:</span> Getting Empty Plate Coordinates</h2>
<p>Each time a customer finishes eating, they leave behind a plate  that needs to be clicked on to be removed. So we need to get the  location of the  empty plates as well.</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/x_marks_the_spot.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/x_marks_the_spot.png"  alt="play_button.png" /> </div>
<p>I've noted their position with a giant red 'X'. Repeat the same  pattern as in the last two steps to get their coordinates. Store them  in the comment string for now.</p>
<pre class="brush: python">
&quot;&quot;&quot;

Plate cords:

    108, 573
    212, 574
    311, 573
    412, 574
    516, 575
    618, 573
&quot;&quot;&quot;</pre>
<p>We're getting close. Only a few more steps of preliminary setup  before we get into the really fun stuff.</p>
<hr />
<h2><span>Step 13:</span> Getting Phone  Coordinates</h2>
<p>Ok, this will be the final set of coordinates we have to mine in  this specific manner.</p>
<p>This one has a lot more to keep track of so you may want to do it  by manually calling the <code>get_cords()</code> function rather than the  previously used  <code>for</code> loop method. Either way, we're going to go through all of the  phone menus to get the coordinates for each item.</p>
<p>This one is a bit more involved as to reach one of the purchase  screens we need, you need to have enough money to actually purchase  something.  So you'll need to make a few pieces of sushi before you go about the  business of coordinate hunting. At the most, you'll have to make two  sushi  rolls, I believe. That will get you enough to buy some rice, which  will get us to the screen we need.</p>
<p>There are six menus we have to get through:</p>
<ol>
<li>The Phone
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/phone.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/phone.png"  alt="play_button.png" /></div>
</li>
<li>Initial Menu
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/phone_menu.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/phone_menu.png" alt="" /></div>
</li>
<li>Toppings
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/phone_menu_toppings.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/phone_menu_toppings.png" alt="" /></div>
</li>
<li>Rice
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/phone_menu_rice.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/phone_menu_rice.png" alt=".png" /></div>
</li>
<li>Shipping
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/phone_delivery.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/phone_delivery.png" alt=".png" /></div>
</li>
</ol>
<p>We need to get coordinates for everything but Sake (although you can  if you want. I found the bot worked fine without it. I was willing to  sacrifice the occasional bad in-game review for not having to code in the logic.)</p>
<p>Getting the coordinates:</p>
<div class="tutorial_image"><iframe src="http://blip.tv/play/haIJgvDcPAA.html?p=1" width="600" height="469" frameborder="0" allowfullscreen></iframe><embed type="application/x-shockwave-flash" src="http://a.blip.tv/api.swf#haIJgvDcPAA" style="display:none"></embed></div>
<p>We're going to add all of these to our Cord class. We'll use the  prefix '<code>t_</code>' to denote that food types are  phone>toppings menu items.</p>
<pre class="brush: python">
class Cord:
	
	f_shrimp = (54,700)
	f_rice = (119 701)
	f_nori = (63 745)
	f_roe = (111 749)
	f_salmon = (54 815)
	f_unagi = (111 812)
    
#-----------------------------------	
	
	phone = (601, 730)

    menu_toppings = (567, 638)
    
    t_shrimp = (509, 581)
    t_nori = (507, 645)
    t_roe = (592, 644)
    t_salmon = (510, 699)
    t_unagi = (597, 585)
    t_exit = (614, 702)

    menu_rice = (551, 662)
    buy_rice = 564, 647
    
    delivery_norm = (510, 664)</pre>
<p>Alright! We've finally mined all the coordinate values we  need. So let's start making something useful!</p>
<hr />
<h2><span>Step 14:</span> Clearing Tables</h2>
<p>We're going to take our previously recorded coordinates and use  them to fill a function called clear_tables().</p>
<pre class="brush: python">
def clear_tables():
    mousePos((108, 573))
    leftClick()

    mousePos((212, 574))
    leftClick()

    mousePos((311, 573))
    leftClick()

    mousePos((412, 574))
    leftClick()

    mousePos((516, 575))
    leftClick()

    mousePos((618, 573))
    leftClick()
    time.sleep(1)</pre>
<p>As you can see, this looks more or less exactly like our earlier  <code>startGame()</code> function. A few small differences:</p>
<p>We have no  <code>time.sleep()</code> functions in between the different click  events. We don't have to wait for any menus to update, so we don't  have to  throttle our click speeds.</p>
<p>We do, however, have one long  <code>time.sleep()</code> at the very end. While not strictly  required, it is nice  to add these occasional pauses in execution to our code, something  just long enough to give us time to manually break out of the bot's  main loop  if necessary (which we'll get to). Otherwise, the thing will continue to steal your mouse position over  and over, and you won't be able to shift focus to the shell long  enough  to stop the  script - which can funny the first two or three times as you struggle  against a mouse, but it quickly loses its charm.</p>
<p>So be sure to add in  some  reliable pauses in your own bots!</p>
<div class="tutorial_image"><iframe src="http://blip.tv/play/haIJgvDcOwA.html?p=1" width="600" height="469" frameborder="0" allowfullscreen></iframe><embed type="application/x-shockwave-flash" src="http://a.blip.tv/api.swf#haIJgvDcOwA" style="display:none"></embed></div>
<hr />
<h2><span>Step 15:</span> Making Sushi</h2>
<p>The first thing we need to do is learn how to make the sushi. Click  the recipe book to open the instruction manual. All sushi types  encountered  throughout the game will be found within its pages. I'll note the  first three below, but I leave it to you to catalog the rest.</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/recipes.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/recipes.png"  alt="play_button.png" /></div>
<pre class="brush: python">
'''
Recipes:

	onigiri
		2 rice, 1 nori
	
	caliroll:
		1 rice, 1 nori, 1 roe
		
	gunkan:
		1 rice, 1 nori, 2 roe
'''</pre>
<p>Now we're going to set up a function that will accept an  argument for "sushi type" and then assemble the proper ingredients based  on the  passed value.</p>
<pre class="highlight: [13,27,45]; brush: python">
def makeFood(food):
    if food == 'caliroll':
        print 'Making a caliroll'
        mousePos(Cord.f_rice)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_nori)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_roe)
        leftClick()
        time.sleep(.1)
        foldMat()
        time.sleep(1.5)
	
    elif food == 'onigiri':
        print 'Making a onigiri'
        mousePos(Cord.f_rice)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_rice)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_nori)
        leftClick()
        time.sleep(.1)
        foldMat()
        time.sleep(.05)
        
        time.sleep(1.5)

    elif food == 'gunkan':
        mousePos(Cord.f_rice)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_nori)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_roe)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_roe)
        leftClick()
        time.sleep(.1)
        foldMat()
        time.sleep(1.5)</pre>
<p>This functions just as all the others but with one small change: rather than passing the coordinates directly, we're calling them as  attributes  from our <code>Cord</code> class.</p>
<p>The function <code>foldMat()</code> is called at the end of each sushi making  process. This clicks the mat to roll the sushi we just assembled.  Let's define that function now:</p>
<pre class="highlight: [2]; brush: python">
def foldMat():
    mousePos((Cord.f_rice[0]+40,Cord.f_rice[1])) 
    leftClick()
    time.sleep(.1)</pre>
<p>Let's briefly walk though this <code>mousePos()</code> call as it's a bit cobbled together. We access the first value of the  <code>f_rice</code> tuple by  adding  <code>[0]</code>  on the end of the attribute. Recall that this is our <code>x</code>  value. To click on the mat we only need to adjust our <code>x</code>  values by a  handful of pixels, so  we add 40 to the current <code>x</code> coordinate, and the then pass  <code>f_rice[1]</code> to the <code>y</code>. This shifts our  <code>x</code> position just  enough to the right to allow us to trigger the mat.</p>
<p>Notice that after the <code>foldMat()</code> call we have a  <code>long time.sleep()</code>. The Mat takes quite a while to roll,  and food items  can't be clicked while their animations are running, so you just have to wait.</p>
<div class="tutorial_image"><iframe src="http://blip.tv/play/haIJgvDcJQA.html?p=1" width="600" height="469" frameborder="0" allowfullscreen></iframe><embed type="application/x-shockwave-flash" src="http://a.blip.tv/api.swf#haIJgvDcJQA" style="display:none"></embed></div>
<hr />
<h2><span>Step 16:</span> Navigating the Phone Menu</h2>
<p>In this step we'll set all of the <code>mousePos()</code> to point  to the appropriate menu items, but we'll leave it there for now.  This is part of the program that will be wrapped in and controlled by  the bot's logic. We'll revisit this function after getting a few new  techniques under our belt.</p>
<pre class="brush: python">
def buyFood(food):
	
	mousePos(Cord.phone)
	
	mousePos(Cord.menu_toppings)
	
	
	mousePos(Cord.t_shrimp)
	mousePos(Cord.t_nori)
	mousePos(Cord.t_roe)
	mousePos(Cord.t_salmon)
	mousePos(Cord.t_unagi)
	mousePos(Cord.t_exit)
	
	mousePos(Cord.menu_rice)
	mousePos(Cord.buy_rice)
	
	mousePos(Cord.delivery_norm)</pre>
<p>That's it for this step. We'll do more with this later.</p>
<hr />
<h2><span>Brief Intro:</span> Making the Computer See</h2>
<p>We're now getting to the very interesting bits. We're going to  start looking at how to make the computer 'see' on-screen events. This  is  a very exciting part of the process, and one that's easy to get wrapped up thinking about.</p>
<p>Another neat part of bot building is that eventually the bot can provide us, the programmers,  with enough information that further vision work is not required. For instance,  in the case of the Sushi bot, once we get the first level running, the bot is spitting out accurate enough  data about what's happening on screen that all we have to do from that  point on is take that data it's "seeing" and simply tell it how  to react to it.</p>
<p>Another large part of bot building is learning the game, knowing  what values you need to keep track of versus which you can ignore. For  instance,  we'll make no effort to track cash on hand. It's just something that  ended up being irrelevant to the bot. All it needs to know is if it  has enough  food to continue working. So rather than keeping tabs on the total  money, it simply checks to see if it <em>can</em> afford something,  regardless of price, because as it works out in the game, it's only a  matter of a few seconds before you can afford to replenish something.  So if it can't afford it now, it just tries again in a few seconds.</p>
<p>Which brings me to my final point. That of the brute force method  versus the elegant one. Vision algorithms take valuable processing  time.  Checking multiple points in many different regions of the play area  can quickly eat away your bot performance, so it comes down to a  question of  "does the bot <em>need</em> to know whether _______ has happened or  not?".</p>
<p>As an example, a customer in the Sushi game could be thought of as having four  states:  not present, waiting, eating, and finished eating. When finished, they leave a flashing  empty plate behind. I could expend the processing power on checking  all plate locations  by snapping  all six plate locations and then checking against an expected value  (which is prone to failure since the plates flash on and off, making a false negative a big possibility), or... I could just brute force my  way through by clicking each plate location every few seconds. In  practice  this is every bit as effective as the 'elegant' solution of letting  the bot determine the state of the customer. Clicking six locations  takes a  fraction of a second where as grabbing and processing six different  images is comparatively slow. We can use the time we saved on other  more important image processing tasks.</p>
<hr />
<h2><span>Step 17:</span> Importing Numpy and ImageOps</h2>
<p>Add the following to your list of import statements.</p>
<pre class="highlight: [2]; brush: python">
import ImageOps
from numpy import *</pre>
<p>ImageOps is another PIL module. It is used to perform operations  (such as grayscaling) on an Image.</p>
<p>I'll briefly explain the second for those who aren't familiar with  Python. Our standard import statements loads the module's namespace (a collection of variable names and functions). So, to access items in  a module's scope, we have to employ the <code>module.attribute</code> sytax. However, by using a <code>from ___ import</code> statement we  inherit the names into our local scope. Meaning, the  <code>module.attribute</code> syntax is no longer needed. They are not top level, so we use them as  we would any other Python built-in function, like <code>str()</code> or <code>list()</code>. By  importing  Numpy in this manner, it allows us to simply call <code>array()</code>, instead of  <code>numpy.array()</code>.</p>
<p>The wildcard <code>*</code> means import <em>everything</em>  from the  module.</p>
<hr />
<h2><span>Step 18:</span> Making the Computer See</h2>
<p>The first method we'll explore is that of checking a specific RGB  value of a pixel against an expected value. This method is good for  static  things such as menus. Since it deals with specific pixels, it's  usually a little too fragile for moving objects. however, its varies  from case to case. Sometimes it's the perfect technique, other time  you'll have to sort out a different method.</p>
<p>Open Sushi Go Round in your browser and start a new game. Ignore  your customers and open the phone menu. You start off with no money  in the bank, so everything should be greyed out as below. These will be the  RGB values we'll check.</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/greyed_out.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/greyed_out.png"  alt="play_button.png" /></div>
<p>In <code>code.py</code>, scroll to your <code>screenGrab()</code> function. We're going to  make the following changes:</p>
<pre class="firstline: 1; highlight: [5,6]; brush: python">
def screenGrab():
    b1 = (x_pad + 1,y_pad+1,x_pad+640,y_pad+480)
    im = ImageGrab.grab()

    ##im.save(os.getcwd() + '\\Snap__' + str(int(time.time())) +'.png', 'PNG')
    return im</pre>
<p>We've made two small changes. In line 5 we commented out our save  statement. In line 6 we now return the <code>Image</code> object for use  outside of the function.</p>
<p>Save and run the code. We're going to do some more interactive  work.</p>
<p>With the Toppings menu open and all items greyed out, run the  following code:</p>
<pre class="firstline: 0; highlight: [5,6]; brush: python">
&gt;&gt;&gt;im = screenGrab()
&gt;&gt;&gt;</pre>
<p>This assigns the snap shot we take in <code>screenGrab()</code> to  the instance <code>im</code>. For here, we can call the <code>getpixel(xy)</code>  method  to grab specific pixel data.</p>
<p>Now we need to get RGB values for each of the greyed out items.  These will make up our 'expected value' that the bot will test against  when it makes its own <code>getpixel()</code> calls.</p>
<p>We already have the coordinates we need from the previous steps, so  all we have to do is pass them as arguments to <code>getpixel()</code>  and note the output.</p>
<div class="tutorial_image"><iframe src="http://blip.tv/play/haIJgvDcJgA.html?p=1" width="600" height="469" frameborder="0" allowfullscreen></iframe><embed type="application/x-shockwave-flash" src="http://a.blip.tv/api.swf#haIJgvDcJgA" style="display:none"></embed></div>
<p>Output from our interactive session:</p>
<pre class="brush: python">
&gt;&gt;&gt; im = screenGrab()
&gt;&gt;&gt; im.getpixel(Cord.t_nori)
(33, 30, 11)
&gt;&gt;&gt; im.getpixel(Cord.t_roe)
(127, 61, 0)
&gt;&gt;&gt; im.getpixel(Cord.t_salmon)
(127, 71, 47)
&gt;&gt;&gt; im.getpixel(Cord.t_shrimp)
(127, 102, 90)
&gt;&gt;&gt; im.getpixel(Cord.t_unagi)
(94, 49, 8)
&gt;&gt;&gt; im.getpixel(Cord.buy_rice)
(127, 127, 127)
&gt;&gt;&gt;</pre>
<p>We need to add these values to our <code>buyFood()</code> function in way that  allows it to know whether or not something is available.</p>
<pre class="firstline: 1; brush: python">
def buyFood(food):
    
    if food == 'rice':
        mousePos(Cord.phone)
        time.sleep(.1)
        leftClick()
        mousePos(Cord.menu_rice)
        time.sleep(.05)
        leftClick()
        s = screenGrab()
        if s.getpixel(Cord.buy_rice) != (127, 127, 127):
            print 'rice is available'
            mousePos(Cord.buy_rice)
            time.sleep(.1)
            leftClick()
            mousePos(Cord.delivery_norm)
            time.sleep(.1)
            leftClick()
            time.sleep(2.5)
        else:
            print 'rice is NOT available'
            mousePos(Cord.t_exit)
            leftClick()
            time.sleep(1)
            buyFood(food)
            

            
    if food == 'nori':
        mousePos(Cord.phone)
        time.sleep(.1)
        leftClick()
        mousePos(Cord.menu_toppings)
        time.sleep(.05)
        leftClick()
        s = screenGrab()
        print 'test'
        time.sleep(.1)
        if s.getpixel(Cord.t_nori) != (33, 30, 11):
            print 'nori is available'
            mousePos(Cord.t_nori)
            time.sleep(.1)
            leftClick()
            mousePos(Cord.delivery_norm)
            time.sleep(.1)
            leftClick()
            time.sleep(2.5)
        else:
            print 'nori is NOT available'
            mousePos(Cord.t_exit)
            leftClick()
            time.sleep(1)
            buyFood(food)

    if food == 'roe':
        mousePos(Cord.phone)
        time.sleep(.1)
        leftClick()
        mousePos(Cord.menu_toppings)
        time.sleep(.05)
        leftClick()
        s = screenGrab()
        
        time.sleep(.1)
        if s.getpixel(Cord.t_roe) != (127, 61, 0):
            print 'roe is available'
            mousePos(Cord.t_roe)
            time.sleep(.1)
            leftClick()
            mousePos(Cord.delivery_norm)
            time.sleep(.1)
            leftClick()
            time.sleep(2.5)
        else:
            print 'roe is NOT available'
            mousePos(Cord.t_exit)
            leftClick()
            time.sleep(1)
            buyFood(food)</pre>
<p>Here we pass a ingredient name to the <code>buyFood()</code> function. A series  of if/elif statements is used to catch the passed parameter and  respond  accordingly. Each fork follows the exact same logic, so we'll just  explore the first one.</p>
<pre class="firstline: 0; brush: python"> 
 if food == 'rice':
        mousePos(Cord.phone)
        time.sleep(.1)
        leftClick()
        mousePos(Cord.menu_rice)
        time.sleep(.05)
        leftClick()
        s = screenGrab()
        time.sleep(.1)</pre>
<p>The first thing we do after the <code>if</code> fork is click on  the phone and open up the proper menu item - in this case the Rice  menu.</p>
<pre class="firstline: 0; brush: python"> 
 s = screenGrab()
 if s.getpixel(Cord.buy_rice) != (127, 127, 127):</pre>
<p>Next we take a quick snapshot of the screen area and call  <code>getpixel()</code> to get an RGB value for the pixel at the coordinates of  <code>Cord.buy_rice</code>. We then test this against  our previously established RGB value for when the item is greyed out.  If it evaluates to <code>True</code>, we know that the item is not longer greyed  out,  and we have enough money to buy it. Consequently, if it evaluated to  <code>False</code>, we can't afford it.</p>
<pre class="firstline: 0; brush: python"> 
print 'rice is available'
mousePos(Cord.buy_rice)
time.sleep(.1)
leftClick()
mousePos(Cord.delivery_norm)
time.sleep(.1)
leftClick()
time.sleep(2.5)</pre>
<p>Providing we can afford the ingredient, we simply navigate through  the remaining boxes required to purchase the food.</p>
<pre class="firstline: 0; brush: python"> 
else:
            print 'rice is NOT available'
            mousePos(Cord.t_exit)
            leftClick()
            time.sleep(1)
            buyFood(food)</pre>
<p>Finally, if we cannot afford the food, we tell Python to close the  menu, wait one second, and then try the process again. It is usually  only a matter of seconds between being able to afford something versus  not being able to afford something. We won't do it in this tutorial,  but it is fairly straightforward to add additional logic to this  function to let the bot decide whether it needs to continue waiting  until  it can afford something, or if it's free to do other tasks and return  at a later time.</p>
<hr />
<h2><span>Step 19:</span> Keeping Track of Ingredients</h2>
<p>All right, now we're going to slowly, little by little, start  replacing areas where we, the external entity, provide input and  decision making  with logic that can run by itself.</p>
<p>We need to device a way of keeping track of how many ingredients we  currently have on hand. We could do this by pinging the screen in  certain  areas, or by averaging each ingredient box (we'll get to this  technique later), but by far, the simplest and fastest method is to  just store all of the on hand items in a dictionary.</p>
<p>The amount of each ingredient stays constant throughout each level.  You will always begin with 10 of the 'common' items (rice, nori, roe),  and 5 of the 'premium' items (shrimp, salmon, unagi).</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/food_items.png" data-original-url="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/food_items.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/food_items.png"  alt="play_button.png" /></div>
<p>Let's add this information to a dictionary.</p>
<pre class="brush: python">
foodOnHand = {'shrimp':5,
              'rice':10,
              'nori':10,
              'roe':10,
              'salmon':5,
              'unagi':5}</pre>
<p>Our dictionary keys hold the name of the ingredient, and we'll be  able to get current amount by exploring the values.</p>
<hr />
<h2><span>Step 20:</span> Adding Tracking to Code</h2>
<p>Now that we have our dictionary of values. Let's work it into the  code. Every time we make something, we'll subtract the ingredients  used.  Every time we shop, we'll add them back in.</p>
<p>Let's begin by expanding the <code>makeFood()</code> function</p>
<pre class="brush: python">
def makeFood(food):
    if food == 'caliroll':
        print 'Making a caliroll'
        foodOnHand['rice'] -= 1 
        foodOnHand['nori'] -= 1 
        foodOnHand['roe'] -= 1  
        mousePos(Cord.f_rice)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_nori)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_roe)
        leftClick()
        time.sleep(.1)
        foldMat()
        time.sleep(1.5)
	
    elif food == 'onigiri':
        print 'Making a onigiri'
        foodOnHand['rice'] -= 2  
        foodOnHand['nori'] -= 1  
        mousePos(Cord.f_rice)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_rice)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_nori)
        leftClick()
        time.sleep(.1)
        foldMat()
        time.sleep(.05)
        
        time.sleep(1.5)

    elif food == 'gunkan':
        print 'Making a gunkan'
        foodOnHand['rice'] -= 1  
        foodOnHand['nori'] -= 1  
        foodOnHand['roe'] -= 2  
        mousePos(Cord.f_rice)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_nori)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_roe)
        leftClick()
        time.sleep(.05)
        mousePos(Cord.f_roe)
        leftClick()
        time.sleep(.1)
        foldMat()
        time.sleep(1.5)</pre>
<p>Now each time we make a piece of Sushi, we reduce the values in our  <code>foodOnHand</code> dictionary by the appropriate amount. Next we'll adjust  buyFood() to add values.</p>
<pre class="highlight: [19,46,73]; brush: python">
def buyFood(food):
    
    if food == 'rice':
        mousePos(Cord.phone)
        time.sleep(.1)
        leftClick()
        mousePos(Cord.menu_rice)
        time.sleep(.05)
        leftClick()
        s = screenGrab()
        print 'test'
        time.sleep(.1)
        if s.getpixel(Cord.buy_rice) != (127, 127, 127):
            print 'rice is available'
            mousePos(Cord.buy_rice)
            time.sleep(.1)
            leftClick()
            mousePos(Cord.delivery_norm)
            foodOnHand['rice'] += 10      
            time.sleep(.1)
            leftClick()
            time.sleep(2.5)
        else:
            print 'rice is NOT available'
            mousePos(Cord.t_exit)
            leftClick()
            time.sleep(1)
            buyFood(food)
            
    if food == 'nori':
        mousePos(Cord.phone)
        time.sleep(.1)
        leftClick()
        mousePos(Cord.menu_toppings)
        time.sleep(.05)
        leftClick()
        s = screenGrab()
        print 'test'
        time.sleep(.1)
        if s.getpixel(Cord.t_nori) != (33, 30, 11):
            print 'nori is available'
            mousePos(Cord.t_nori)
            time.sleep(.1)
            leftClick()
            mousePos(Cord.delivery_norm)
            foodOnHand['nori'] += 10          
            time.sleep(.1)
            leftClick()
            time.sleep(2.5)
        else:
            print 'nori is NOT available'
            mousePos(Cord.t_exit)
            leftClick()
            time.sleep(1)
            buyFood(food)

    if food == 'roe':
        mousePos(Cord.phone)
        time.sleep(.1)
        leftClick()
        mousePos(Cord.menu_toppings)
        time.sleep(.05)
        leftClick()
        s = screenGrab()
        
        time.sleep(.1)
        if s.getpixel(Cord.t_roe) != (127, 61, 0):
            print 'roe is available'
            mousePos(Cord.t_roe)
            time.sleep(.1)
            leftClick()
            mousePos(Cord.delivery_norm)
            foodOnHand['roe'] += 10                 
            time.sleep(.1)
            leftClick()
            time.sleep(2.5)
        else:
            print 'roe is NOT available'
            mousePos(Cord.t_exit)
            leftClick()
            time.sleep(1)
            buyFood(food)</pre>
<p>Now each time an ingredient is purchased, we add the quantity to  the appropriate dictionary value.</p>
<hr />
<h2><span>Step 21:</span> Checking Food on Hand</h2>
<p>Now that we have our <code>makeFood()</code> and <code>buyFood()</code> functions set up to  modify the <code>foodOnHand</code> dictionary, we need to create a new function to  monitor all the changes and check whether an ingredient has fallen below a  certain threshold.</p>
<pre class="brush: python">
def checkFood():
    for i, j in foodOnHand.items():
        if i == 'nori' or i == 'rice' or i == 'roe':
            if j &lt;= 4:
                print '%s is low and needs to be replenished' % i
                buyFood(i)</pre>
<p>Here we set up a <code>for</code> loop to iterate through the key and value  pairs of our <code>foodOnHand</code> dictionary. For each value, it checks whether the  name  equals one of the ingredients we need; if so, it then checks to see if  its value is less than or equal to 3; and finally, providing it is  less than 3, it calls <code>buyFood()</code> with the ingredient type as the  parameter.</p>
<p>Let's test this out a bit.</p>
<div class="tutorial_image"><iframe src="http://blip.tv/play/haIJgvDcPgA.html?p=1" width="600" height="469" frameborder="0" allowfullscreen></iframe><embed type="application/x-shockwave-flash" src="http://a.blip.tv/api.swf#haIJgvDcPgA" style="display:none"></embed></div>
<p>Everything seems to be working fairly well, so let's move on to  some more image recognition tasks.</p>
<hr />
<h2><span>Step 22:</span> Traversing RGB Values - Setup</h2>
<p>To go any further with our bot, we need to gather information about  which sushi type is in which customer's bubble.  Doing this with the <code>getpixel()</code> method would be very painstaking as you  would need to find an area in each thought bubble that has a unique  RGB  value not shared by any other  sushi type/thought bubble. Given the pixel style art, which by its  very nature has a limited color palette, you would have to fight tons  of color overlap in the sushi types. Furthermore, for each new sushi type  introduced through out the game, you would have to manually inspect it  to see if it has a unique RGB not found in any of the other sushi  types. Once found, it would certainly be at a different coordinate  than the  others so that means storing ever <em>more</em> coordinate values - 8 sushi types per bubble times 6 seat locations means 48 unique needed  coordinates!</p>
<p>So, in summary, we need a better method.</p>
<p>Enter method two: Image summing/averaging. This version works off  of a list of RGB values instead of one specific pixel. For each  snapshot we take, the image is grayscaled, loaded into an array, and then  summed. This sum is treated the same as the RGB value in the <code>getpixel()</code>  method. We  will use it to test and compare multiple images.</p>
<p>The flexibility of this method is such that once it is set up, in  the case of our sushi bot, not more work is required on our part. As  new sushi  types are introduced their unique RGB values are summed and printed to  the screen for our use. There's no need to chase down any more  specific  coordinates like with <code>getpixel()</code>.</p>
<p>That said, there is still a bit of setup required for this  technique. We'll need to create a few new bounding boxes so we process  just the  area of the screen we need rather than the entire play area.</p>
<p>Let get started. Navigate to your <code>screenGrab()</code> function and make a  second copy of it. Rename the copy to <code>grab()</code> and make the  following changes:</p>
<pre class="brush: python">
def screenGrab():
    box = (x_pad + 1,y_pad+1,x_pad+640,y_pad+480)
    im = ImageGrab.grab(box)

    ##im.save(os.getcwd() + '\\Snap__' + str(int(time.time())) + '.png', 'PNG')
    return im
	
	
def grab():
    box = (x_pad + 1,y_pad+1,x_pad+640,y_pad+480)
    im = ImageOps.grayscale(ImageGrab.grab(box))
    a = array(im.getcolors())
    a = a.sum()
    print a
    return a</pre>
<p>Line 2: We're taking a screengrab just as we have before, but now  we're converting it to grayscale before we assign it to the instance  <code>im</code>. Converting to grayscale makes traversing all of the color  values much faster; instead of each pixel having a Red, Green, and  Blue value,  it only has one value ranging from 0-255.</p>
<p>Line 3: We create an array of the image's color values using the  PIL method <code>getcolors()</code> and assign them to the variable  <code>a</code></p>
<p>Line 4: We sum all the values of the array and print them to the  screen. These are the numbers we'll use when we compare two images.</p>
<hr />
<h2><span>Step 23:</span> Setting New Bounding Boxes</h2>
<p>Start a new game and wait for all of the customers to fill up. Double click on <code>quickGrab.py</code> to take a snapshot of the play area.</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/bubble_highlight.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/bubble_highlight.png"  alt="play_button.png" /></div>
<p>We'll need to set bounding boxes inside of each of those bubbles.</p>
<p>Zoom in till you can see the fine detail of the pixels</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/bubble_zoome_medium.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/bubble_zoome_medium.png"  alt="play_button.png" /></div>
<p>For each bubble, we need to make sure the top left of our bounding  box starts in the same location. To do so, count up two 'edges' from the  inner left of the bubble. We want the white pixel at the second 'edge'  to mark our first x,y location.</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/bubble_arrows.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/bubble_arrows.png"  alt="play_button.png" /></div>
<p>To get the bottom pair, add 63 to the x position, and 16 to the y.  This will give you a box similar to the one below:</p>
<div class="tutorial_image"><img src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Images/bubble_box.png" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/Images/bubble_box.png"  alt="play_button.png" /></div>
<p>Don't worry that we're not getting the entire picture of the Sushi  type. Since we're summing all of the values, even a small change in  one pixel will change the total and let us know something new is on screen.</p>
<p>We're going to create six new functions, each a specialized version  of our general <code>grab()</code> one, and fill their bounding arguments  with the coordinates of all the bubbles. Once those are made, we'll  make a simple function to call everything at once, just for testing  purposes.</p>
<pre class="highlight: [3,4,5,8]; brush: python">
def get_seat_one():
    box = (45,427,45+63,427+16)
    im = ImageOps.grayscale(ImageGrab.grab(box))
    a = array(im.getcolors())
    a = a.sum()
    print a
    im.save(os.getcwd() + '\\seat_one__' + str(int(time.time())) + '.png', 'PNG')    
    return a

def get_seat_two():
    box = (146,427,146+63,427+16)
    im = ImageOps.grayscale(ImageGrab.grab(box))
    a = array(im.getcolors())
    a = a.sum()
    print a
    im.save(os.getcwd() + '\\seat_two__' + str(int(time.time())) + '.png', 'PNG')    
    return a

def get_seat_three():
    box = (247,427,247+63,427+16)
    im = ImageOps.grayscale(ImageGrab.grab(box))
    a = array(im.getcolors())
    a = a.sum()
    print a
    im.save(os.getcwd() + '\\seat_three__' + str(int(time.time())) + '.png', 'PNG')    
    return a

def get_seat_four():
    box = (348,427,348+63,427+16)
    im = ImageOps.grayscale(ImageGrab.grab(box))
    a = array(im.getcolors())
    a = a.sum()
    print a
    im.save(os.getcwd() + '\\seat_four__' + str(int(time.time())) + '.png', 'PNG')    
    return a

def get_seat_five():
    box = (449,427,449+63,427+16)
    im = ImageOps.grayscale(ImageGrab.grab(box))
    a = array(im.getcolors())
    a = a.sum()
    print a
    im.save(os.getcwd() + '\\seat_five__' + str(int(time.time())) + '.png', 'PNG')    
    return a

def get_seat_six():
    box = (550,427,550+63,427+16)
    im = ImageOps.grayscale(ImageGrab.grab(box))
    a = array(im.getcolors())
    a = a.sum()
    print a
    im.save(os.getcwd() + '\\seat_six__' + str(int(time.time())) + '.png', 'PNG')    
    return a

def get_all_seats():
    get_seat_one()
    get_seat_two()
    get_seat_three()
    get_seat_four()
    get_seat_five()
    get_seat_six()</pre>
<p>Okay! Lots of code, but it's all just specialised versions of  previously defined functions. Each defines a bounding box, and passes  it to  <code>ImageGrab.Grab</code>. From there, we convert to an array of RGB values and  print the sum to the screen.</p>
<p>Go ahead and run this a few times while playing the game. Be sure to  verify that every sushi type, regardless of which bubble it's in, displays the same sum each time.</p>
<hr />
<h2><span>Step 24:</span> Create a Sushi Types Dictionary</h2>
<p>Once you've verified that each of the sushi types is always displaying the  same value, record their sums into a dictionary as follows:</p>
<pre class="brush: python">
sushiTypes = {2670:'onigiri', 
              3143:'caliroll',
              2677:'gunkan',}</pre>
<p>Having the numbers as the key and the strings as the values will  make it easy to shuffle things from function to function without  loosing  track of everything.</p>
<hr />
<h2><span>Step 25:</span> Create a No Bubble Class</h2>
<p>The final step in our bubble gathering is getting the sums for when  there are no bubbles present. We'll use these to check when customers  have come and gone.</p>
<p>Start a new game and quickly run <code>get_all_seats()</code> before anyone has  a chance to show up. The numbers it prints out we'll place into a class  called <code>Blank</code>. As before, you could use a dictionary if you  prefer.</p>
<pre class="brush: python">
class Blank:
    seat_1 = 8119
    seat_2 = 5986
    seat_3 = 11598 
    seat_4 = 10532
    seat_5 = 6782
    seat_6 = 9041</pre>
<p>We're almost there now! One final step and we'll have a simple,  working bot!</p>
<hr />
<h2><span>Step 26:</span> Putting It All Together</h2>
<p>Time to finally hand off control to our bot. We'll script in the  basic logic that will let it respond to customers, make their orders,  and  replenish its ingredients when the begin to run low.</p>
<p>The basic flow will follow this: <em>Check seats > if customer, make  order > check food > if low, buy food > clear tables > repeat</em>.</p>
<p>This is a long one; let's get started.</p>
<pre class="brush: python">
def check_bubs():

    checkFood()
    s1 = get_seat_one()
    if s1 != Blank.seat_1:
        if sushiTypes.has_key(s1):
            print 'table 1 is occupied and needs %s' % sushiTypes[s1]
            makeFood(sushiTypes[s1])
        else:
            print 'sushi not found!\n sushiType = %i' % s1

    else:
        print 'Table 1 unoccupied'

    clear_tables()
    checkFood()
    s2 = get_seat_two()
    if s2 != Blank.seat_2:
        if sushiTypes.has_key(s2):
            print 'table 2 is occupied and needs %s' % sushiTypes[s2]
            makeFood(sushiTypes[s2])
        else:
            print 'sushi not found!\n sushiType = %i' % s2

    else:
        print 'Table 2 unoccupied'

    checkFood()
    s3 = get_seat_three()
    if s3 != Blank.seat_3:
        if sushiTypes.has_key(s3):
            print 'table 3 is occupied and needs %s' % sushiTypes[s3]
            makeFood(sushiTypes[s3])
        else:
            print 'sushi not found!\n sushiType = %i' % s3

    else:
        print 'Table 3 unoccupied'

    checkFood()
    s4 = get_seat_four()
    if s4 != Blank.seat_4:
        if sushiTypes.has_key(s4):
            print 'table 4 is occupied and needs %s' % sushiTypes[s4]
            makeFood(sushiTypes[s4])
        else:
            print 'sushi not found!\n sushiType = %i' % s4

    else:
        print 'Table 4 unoccupied'

    clear_tables()
    checkFood()
    s5 = get_seat_five()
    if s5 != Blank.seat_5:
        if sushiTypes.has_key(s5):
            print 'table 5 is occupied and needs %s' % sushiTypes[s5]
            makeFood(sushiTypes[s5])
        else:
            print 'sushi not found!\n sushiType = %i' % s5

    else:
        print 'Table 5 unoccupied'

    checkFood()
    s6 = get_seat_six()
    if s6 != Blank.seat_6:
        if sushiTypes.has_key(s6):
            print 'table 1 is occupied and needs %s' % sushiTypes[s6]
            makeFood(sushiTypes[s6])
        else:
            print 'sushi not found!\n sushiType = %i' % s6

    else:
        print 'Table 6 unoccupied'

    clear_tables()</pre>
<p>The very first thing we do is check food on hand. from there, we  take a snapshot of position one and assign the sum to <code>s1</code>.  After that we check to see that <code>s1</code> does NOT equal  <code>Blank.seat_1</code>. If it <em>doesn't</em>, we have a customer. We check our <code>sushiTypes</code> dictionary to see it has a sum the same as our <code>s1</code>. If it  does,  we then call <code>makeFood()</code> and pass the <code>sushiType</code> as an argument.</p>
<p><code>Clear_tables()</code> is called every two seats.</p>
<p>Only one final piece remaining: setting up the loop.</p>
<hr />
<h2><span>Step 27:</span> Main Loop</h2>
<p>We're going to set up a very simple while loop to play the game. We  didn't make any sort of break mechanism, so to stop execution, click  in  the shell and hit Ctrl+C to send a keyboard interrupt.</p>
<pre class="brush: python">
def main():
	startGame()
    while True:
        check_bubs()</pre>
<p>And that's it! Refresh the page, load the game, and set your bot  loose!</p>
<div class="tutorial_image"><iframe src="http://blip.tv/play/haIJgvDdDgA.html?p=1" width="600" height="469" frameborder="0" allowfullscreen></iframe><embed type="application/x-shockwave-flash" src="http://a.blip.tv/api.swf#haIJgvDdDgA" style="display:none"></embed></div>
<p>So, it's a bit clunky and in need of refinement, but it stands as a  decent skeleton for you to iterate upon.</p>
<p>A more complete version of the bot can be found <a href="http://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/sushi_roll.py" data-original-url="http://activetuts.s3.amazonaws.com/tuts/425_pythonBot/sushi_roll.py">here</a>.  It has several fixes such as keeping track of what's being made, not  getting stuck in the phone menus, and other general optimizations.</p>
<hr />
<h2>Conclusion</h2>
<p>You now have all of the tools you need to go about building your  own simple bots. The techniques we used in this tutorial are quite  primitive in the world of Computer Vision, but still, with enough persistence,  you can create many cool things with them - even outside the realm of  game bots. We, for instance, run several scripts based on these  techniques to automate repetitive software tasks around the office.  It's  pretty satisfying to remove a human task with just a few lines of  code.</p>
<p>Thanks for reading, and if you have any issues or comments, be sure  to leave a note below. Good luck, have fun.</p>
</div></div></div></div><div class="nongrid__sidebar"><div class="ad view"><div class="ad__wrapper"><div class="ad__content" id="div-gpt-1379650391729-0" style="width: 300px; height: 250px;"></div><div class="ad__label">Advertisement</div></div></div><div class="post__sidebar"><div class="post__series-info"></div><div class="post-meta"><img alt="Preview for How to Build a Python Bot That Can Play Web Games" class="post-meta__image" src="https://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/PythonLogo.png" /><div class="post-meta__description"><div class="post-meta__item"><div class="post-meta__label">Difficulty:</div><div class="post-meta__value"><a class="post-meta__link" href="/search?search%5Bfilters%5D%5Bdifficulty%5D%5B%5D=Beginner">Beginner</a></div></div><div class="post-meta__item"><div class="post-meta__label">Length:</div><div class="post-meta__value"><a class="post-meta__link" href="/search?search%5Bfilters%5D%5Bcompletion_time%5D%5B%5D=Medium">Medium</a></div></div><div class="post-meta__item"><div class="post-meta__label">Tagged with:</div><div class="post-meta__value"><span class="post-meta__tag"><a class="post-meta__category-link" href="/categories/workflow">Workflow</a></span><span class="post-meta__tag"><a class="post-meta__category-link" href="/categories/games">Games</a></span><span class="post-meta__tag"><a class="post-meta__category-link" href="/categories/flash">Flash</a></span><span class="post-meta__tag"><a class="post-meta__category-link" href="/categories/tools">Tools</a></span></div></div><div class="post-meta__resource-links"><a class="post-meta__resource-link post-meta__download-attachment-link button" href="http://cdn.tutsplus.com/active/uploads/legacy/tuts/425_pythonBot/Activetuts_PythonBot.zip">Download Attachment <i class="tutsicon-download"></i></a></div></div></div><div class="instructor-bio view"><div class="instructor-bio__title">About Chris Kiehl</div><div class="instructor-bio__details"><img alt="" class="instructor-bio__image" src="//www.gravatar.com/avatar/5b07183c1d5224270b32a64f5c997b50?s=200&amp;d=https%3A%2F%2Fassets.tutsplus.com%2Fimages%2Fhub%2Favatar_default.png&amp;r=PG" />Chris Kiehl is an editor for an Atlanta based media company. When not null testing audio gear for fun, he can be found tinkering in Pro Tools or building bots. He greatly enjoys making machines do people things.</div><a class="instructor-bio__expand-link" href="javascript:;">+ Expand Bio</a><a class="instructor-bio__collapse-link" href="javascript:;">- Collapse Bio</a></div><div class="post__ad"><div class="ad view"><div class="ad__wrapper"><div class="ad__content" id="div-gpt-1382314910331-0" style="width: 300px; height: 250px;"></div><div class="ad__label">Advertisement</div></div></div></div><div class="post__recommended-content"><div class="addthis_recommended_vertical"></div></div></div></div><div class="post__related-posts"><div class="card-header"><div class="card-header__title">Related Posts</div></div><ul class="posts posts--grid-small"><li class="posts__post"><div class="posts__post-main-topic topic-code">Code</div><div class="posts__post-primary-category"><a class="posts__post-primary-category-link topic-code" href="http://code.tutsplus.com/categories/web-development">Web Development</a></div><a class="posts__post-title" href="/tutorials/refactoring-legacy-code-part-6-attacking-complex-methods--cms-21522">Refactoring Legacy Code: Part 6 - Attacking Complex Methods</a><a class="posts__post-preview " href="/tutorials/refactoring-legacy-code-part-6-attacking-complex-methods--cms-21522"><img alt="Refactoring wide retina preview" class="posts__post-preview-image posts__post-preview-image--regular" src="https://cms-assets.tutsplus.com/uploads/users/45/posts/21522/preview_image/refactoring-wide-retina-preview.png" /><span class="posts__post-meta"><span class="posts__post-meta-label">Difficulty:</span>Intermediate<span class="posts__post-meta-label">Completion Time:</span>Long</span></a><div class="posts__post-details"><div class="posts__post-publication-meta"><span class="posts__post-author"><a class="posts__post-author-link" href="http://tutsplus.com/authors/patkos-csaba">Patkos Csaba</a></span><time class="posts__post-publication-date posts__post-publication-date--relative" datetime="2014-06-25T20:15:20Z" title="25 Jun 2014">5 days ago</time><time class="posts__post-publication-date posts__post-publication-date--formatted" datetime="2014-06-25T20:15:20Z">25 Jun 2014</time></div><div class="posts__post-teaser">Learn techniques for how to deal with complex and complicated unknown legacy code, how to underst...</div><div class="posts__post-summary">Learn techniques for how to deal with complex and complicated unknown legacy code, how to understand it, and finally writing the Golden Master tests for future changes.<a class="posts__post-link posts__post-read-more-link" href="/tutorials/refactoring-legacy-code-part-6-attacking-complex-methods--cms-21522">Read More…</a></div></div></li><li class="posts__post"><div class="posts__post-main-topic topic-computers">Computer Skills</div><div class="posts__post-primary-category"><a class="posts__post-primary-category-link topic-computers" href="http://computers.tutsplus.com/categories/electronics">Electronics</a></div><a class="posts__post-title" href="/tutorials/how-to-build-a-tweet-controlled-rgb-lcd--cms-20515">How to Build a Tweet Controlled RGB LCD</a><a class="posts__post-preview " href="/tutorials/how-to-build-a-tweet-controlled-rgb-lcd--cms-20515"><img alt="Front400s" class="posts__post-preview-image posts__post-preview-image--regular" src="https://cms-assets.tutsplus.com/uploads/users/93/posts/20515/preview_image/front400s.jpg" /><span class="posts__post-meta"><span class="posts__post-meta-label">Difficulty:</span>Intermediate<span class="posts__post-meta-label">Completion Time:</span>Medium</span></a><div class="posts__post-details"><div class="posts__post-publication-meta"><span class="posts__post-author"><a class="posts__post-author-link" href="http://tutsplus.com/authors/jeremy-blythe">Jeremy Blythe</a></span><time class="posts__post-publication-date posts__post-publication-date--relative" datetime="2014-05-30T12:00:00Z" title="30 May 2014">30 May 2014</time><time class="posts__post-publication-date posts__post-publication-date--formatted" datetime="2014-05-30T12:00:00Z">30 May 2014</time></div><div class="posts__post-teaser">In this tutorial I’ll show you how to use a Raspberry Pi with an RGB LCD to monitor tweets. Tweet...</div><div class="posts__post-summary">In this tutorial I’ll show you how to use a Raspberry Pi with an RGB LCD to monitor tweets. Tweets containing specific keywords are displayed in defined colours. You’ll learn how to create a Twitter application to use the stream API to push data to your program, giving you an opportunity to learn about multi-threaded Python programs.<a class="posts__post-link posts__post-read-more-link" href="/tutorials/how-to-build-a-tweet-controlled-rgb-lcd--cms-20515">Read More…</a></div></div></li><li class="posts__post"><div class="posts__post-main-topic topic-cgi">3D &amp; Motion Graphics</div><div class="posts__post-primary-category"><a class="posts__post-primary-category-link topic-cgi" href="http://cgi.tutsplus.com/categories/scripting">Scripting</a></div><a class="posts__post-title" href="/tutorials/write-a-render-manager-for-nuke-using-python--cms-21226">Write a Render Manager for Nuke using Python</a><a class="posts__post-preview " href="/tutorials/write-a-render-manager-for-nuke-using-python--cms-21226"><img alt="Nuke scripting retina" class="posts__post-preview-image posts__post-preview-image--regular" src="https://cms-assets.tutsplus.com/uploads/users/36/posts/21226/preview_image/Nuke-Scripting-Retina.jpg" /><span class="posts__post-meta"><span class="posts__post-meta-label">Difficulty:</span>Advanced<span class="posts__post-meta-label">Completion Time:</span>Short</span></a><div class="posts__post-details"><div class="posts__post-publication-meta"><span class="posts__post-author"><a class="posts__post-author-link" href="http://tutsplus.com/authors/maurizio-di-vitto">Maurizio Di Vitto</a></span><time class="posts__post-publication-date posts__post-publication-date--relative" datetime="2014-05-26T09:09:18Z" title="26 May 2014">26 May 2014</time><time class="posts__post-publication-date posts__post-publication-date--formatted" datetime="2014-05-26T09:09:18Z">26 May 2014</time></div><div class="posts__post-teaser">Learn how to write a custom render manager for Nuke using Python, allowing you to render one or m...</div><div class="posts__post-summary">Learn how to write a custom render manager for Nuke using Python, allowing you to render one or more Nuke projects without needing to open the software.<a class="posts__post-link posts__post-read-more-link" href="/tutorials/write-a-render-manager-for-nuke-using-python--cms-21226">Read More…</a></div></div></li><li class="posts__post"><div class="posts__post-main-topic topic-code">Code</div><div class="posts__post-primary-category"><a class="posts__post-primary-category-link topic-code" href="http://code.tutsplus.com/categories/web-development">Web Development</a></div><a class="posts__post-title" href="/tutorials/refactoring-legacy-code-part-5-games-testable-methods--cms-21213">Refactoring Legacy Code: Part 5 - Game&#39;s Testable Methods</a><a class="posts__post-preview " href="/tutorials/refactoring-legacy-code-part-5-games-testable-methods--cms-21213"><img alt="Refactoring wide retina preview" class="posts__post-preview-image posts__post-preview-image--regular" src="https://cms-assets.tutsplus.com/uploads/users/45/posts/21213/preview_image/refactoring-wide-retina-preview.png" /><span class="posts__post-meta"><span class="posts__post-meta-label">Difficulty:</span>Intermediate<span class="posts__post-meta-label">Completion Time:</span>Long</span></a><div class="posts__post-details"><div class="posts__post-publication-meta"><span class="posts__post-author"><a class="posts__post-author-link" href="http://tutsplus.com/authors/patkos-csaba">Patkos Csaba</a></span><time class="posts__post-publication-date posts__post-publication-date--relative" datetime="2014-05-23T19:00:08Z" title="23 May 2014">23 May 2014</time><time class="posts__post-publication-date posts__post-publication-date--formatted" datetime="2014-05-23T19:00:08Z">23 May 2014</time></div><div class="posts__post-teaser">Learn techniques for how to deal with complex and complicated unknown legacy code, how to underst...</div><div class="posts__post-summary">Learn techniques for how to deal with complex and complicated unknown legacy code, how to understand it, and finally writing the Golden Master tests for future changes.<a class="posts__post-link posts__post-read-more-link" href="/tutorials/refactoring-legacy-code-part-5-games-testable-methods--cms-21213">Read More…</a></div></div></li><li class="posts__post"><div class="posts__post-main-topic topic-webdesign">Web Design</div><div class="posts__post-primary-category"><a class="posts__post-primary-category-link topic-webdesign" href="http://webdesign.tutsplus.com/categories/html-css">HTML &amp; CSS</a></div><a class="posts__post-title" href="/tutorials/create-and-theme-an-evernote-powered-blog-with-postachio--cms-21063">Create and Theme an Evernote Powered Blog With Postach.io</a><a class="posts__post-preview " href="/tutorials/create-and-theme-an-evernote-powered-blog-with-postachio--cms-21063"><img alt="Postachio" class="posts__post-preview-image posts__post-preview-image--regular" src="https://cms-assets.tutsplus.com/uploads/users/30/posts/21063/preview_image/postachio.png" /><span class="posts__post-meta"><span class="posts__post-meta-label">Difficulty:</span>Intermediate<span class="posts__post-meta-label">Completion Time:</span>Long</span></a><div class="posts__post-details"><div class="posts__post-publication-meta"><span class="posts__post-author"><a class="posts__post-author-link" href="http://tutsplus.com/authors/kezz-bracey">Kezz Bracey</a></span><time class="posts__post-publication-date posts__post-publication-date--relative" datetime="2014-05-20T12:01:04Z" title="20 May 2014">20 May 2014</time><time class="posts__post-publication-date posts__post-publication-date--formatted" datetime="2014-05-20T12:01:04Z">20 May 2014</time></div><div class="posts__post-teaser">In this tutorial we&#39;ll be learning how to setup your own Postach.io/Evernote powered blog and how...</div><div class="posts__post-summary">In this tutorial we'll be learning how to setup your own Postach.io/Evernote powered blog and how to create a custom theme for it.<a class="posts__post-link posts__post-read-more-link" href="/tutorials/create-and-theme-an-evernote-powered-blog-with-postachio--cms-21063">Read More…</a></div></div></li><li class="posts__post"><div class="posts__post-main-topic topic-gamedevelopment">Game Development</div><div class="posts__post-primary-category"><a class="posts__post-primary-category-link topic-gamedevelopment" href="http://gamedevelopment.tutsplus.com/categories/implementation">Implementation</a></div><a class="posts__post-title" href="/tutorials/write-once-publish-everywhere-with-haxepunk-making-a-game--gamedev-14071">Write Once, Publish Everywhere With HaxePunk: Making a Game</a><a class="posts__post-preview posts__post-preview--cropped" href="/tutorials/write-once-publish-everywhere-with-haxepunk-making-a-game--gamedev-14071"><img alt="Previewretinaimage" class="posts__post-preview-image posts__post-preview-image--cropped" src="https://cdn.tutsplus.com/gamedev/uploads/2014/02/previewretinaimage.png" /><span class="posts__post-meta"><span class="posts__post-meta-label">Difficulty:</span>Intermediate<span class="posts__post-meta-label">Completion Time:</span>Medium</span></a><div class="posts__post-details"><div class="posts__post-publication-meta"><span class="posts__post-author"><a class="posts__post-author-link" href="http://tutsplus.com/authors/jacob-white">Jacob White</a></span><time class="posts__post-publication-date posts__post-publication-date--relative" datetime="2014-02-22T15:30:25Z" title="22 Feb 2014">22 Feb 2014</time><time class="posts__post-publication-date posts__post-publication-date--formatted" datetime="2014-02-22T15:30:25Z">22 Feb 2014</time></div><div class="posts__post-teaser">You&#39;ve probably had this experience before: you hear about an awesome game, but then you find out...</div><div class="posts__post-summary">You've probably had this experience before: you hear about an awesome game, but then you find out that it's only coming out on the one platform that you don't own. It doesn't have to be this way. In this tutorial, you will learn how to use Haxe to make a game in one development platform that can target multiple gaming platforms, including Linux, Mac, Windows, iOS, Android, and Flash.<a class="posts__post-link posts__post-read-more-link" href="/tutorials/write-once-publish-everywhere-with-haxepunk-making-a-game--gamedev-14071">Read More…</a></div></div></li></ul></div><footer class="post__footer"><div class="post__comments" id="comments"><div id="disqus_thread" name="disqus_thread"></div><script type="text/javascript">var disqus_shortname  = "activetuts";
var disqus_identifier = "11117 http://active.tutsplus.com/?p=11117";
var disqus_title      = "How to Build a Python Bot That Can Play Web Games";

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();

(function () {
  var s = document.createElement('script'); s.async = true;
  s.type = 'text/javascript';
  s.src = '//' + disqus_shortname + '.disqus.com/count.js';
  (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
}());</script></div><div class="post__footer-sidebar"><div class="post__ad"><div class="ad view"><div class="ad__wrapper"><div class="ad__content" id="div-gpt-1379650407131-0" style="width: 300px; height: 250px;"></div><div class="ad__label">Advertisement</div></div></div></div></div></footer></article></main></div></div><footer class="page-footer"><div class="page-footer__content"><div class="page-footer__tuts-brand"><img alt="Tuts+" class="page-footer__tuts-logo-image tuts-logo" src="http://static.tutsplus.com/assets/tuts_logo-79176000c077f4191a2cfcc3b312b7ed.svg" /><span class="page-footer__tuts-brand-text">Teaching skills to millions worldwide.</span><ul><li><i class="page-footer__icon fa fa-file-text-o"></i><a class="page-footer__link" href="http://tutorials.tutsplus.com/">Tutorials</a></li><li><i class="page-footer__icon fa fa-film"></i><a class="page-footer__link" href="http://courses.tutsplus.com/">Courses</a></li><li><i class="page-footer__icon fa fa-book"></i><a class="page-footer__link" href="http://ebooks.tutsplus.com/">eBooks</a></li><li><i class="page-footer__icon fa fa-briefcase"></i><a class="page-footer__link" href="http://jobs.tutsplus.com">Jobs</a></li><li><i class="page-footer__icon fa fa-file"></i><a class="page-footer__link" href="http://blog.tutsplus.com">Blog</a></li></ul></div><div class="page-footer__follow-us"><h3>Follow Us</h3><ul><li><i class="page-footer__icon fa fa-file"></i><a class="page-footer__link" href="http://blog.tutsplus.com">Subscribe to Blog</a></li><li><i class="page-footer__icon fa fa-twitter"></i><a class="page-footer__link" href="https://twitter.com/tutsplus">Follow us on Twitter</a></li><li><i class="page-footer__icon fa fa-facebook"></i><a class="page-footer__link" href="https://www.facebook.com/tutsplus">Be a fan on Facebook</a></li><li><i class="page-footer__icon fa fa-google-plus"></i><a class="page-footer__link" href="https://plus.google.com/108971748263060947124/posts">Circle us on Google+</a></li><li><i class="page-footer__icon fa fa-rss"></i><a class="page-footer__link" href="http://tutorials.tutsplus.com/posts.atom">RSS Feed</a></li></ul></div><div class="page-footer__envato-products"><div class="page-footer__envato-product"><a href="http://codecanyon.net/category/wordpress"><img alt="Build more with plugins" class="page-footer__envato-product-image page-footer__envato-product-image--marketplaces" src="http://static.tutsplus.com/assets/wp-build-more-with-plugins-140x112-d5dba247b7e380d4421658d955eea756.png" /></a><div class="page-footer__envato-product-description">Add more features to your website such as user profiles, payment
gateways, image galleries and more. </div><div class="page-footer__envato-product-action-call"><a class="page-footer__link page-footer__envato-product-link" href="http://codecanyon.net/category/wordpress">Browse WordPress Plugins</a></div></div><div class="page-footer__envato-product"><a href="http://studio.envato.com/?utm_source=tutsfooter&amp;utm_medium=banner&amp;utm_campaign=tutsfooter"><img alt="OPEN. New Services!" class="page-footer__envato-product-image page-footer__envato-product-image--studio" src="http://static.tutsplus.com/assets/open-new-services-140x112-6490b13ca24157e79db19df2e18abf87.png" /></a><div class="page-footer__envato-product-description">Microlancer is now Envato Studio! Custom digital services like
logo design, WordPress installaton, video production and more. </div><div class="page-footer__envato-product-action-call"><a class="page-footer__link page-footer__envato-product-link" href="http://studio.envato.com/?utm_source=tutsfooter&amp;utm_medium=banner&amp;utm_campaign=tutsfooter">Check out Envato Studio</a></div></div></div><nav class="page-footer__links"><ul class="page-footer__link-list"><li class="page-footer__link-list-item"><a class="page-footer__link" href="http://tutsplus.com/about">About</a></li><li class="page-footer__link-list-item"><a class="page-footer__link" href="http://tutsplus.com/blog">Blog</a></li><li class="page-footer__link-list-item"><a class="page-footer__link" href="http://tutsplus.com/pricing">Pricing</a></li><li class="page-footer__link-list-item"><a class="page-footer__link" href="http://tutsplus.com/faq">FAQ</a></li><li class="page-footer__link-list-item"><a class="page-footer__link" href="http://tutsplus.com/support">Support</a></li><li class="page-footer__link-list-item"><a class="page-footer__link" href="http://tutsplus.com/write-for-us">Write For Us</a></li><li class="page-footer__link-list-item"><a class="page-footer__link" href="http://tutsplus.com/advertise">Advertise</a></li><li class="page-footer__link-list-item"><a class="page-footer__link" href="http://tutsplus.com/privacy-policy">Privacy Policy</a></li><li class="page-footer__link-list-item"><a class="page-footer__link" href="http://tutsplus.com/terms-of-use">Terms of Use</a></li></ul><ul class="page-footer__social-links"><li class="page-footer__social-link-item"><a class="page-footer__social-link page-footer__link" href="https://www.facebook.com/tutsplus"><i class="fa fa-facebook"></i></a></li><li class="page-footer__social-link-item"><a class="page-footer__social-link page-footer__link" href="https://twitter.com/tutsplus"><i class="fa fa-twitter"></i></a></li><li class="page-footer__social-link-item"><a class="page-footer__social-link page-footer__link" href="https://plus.google.com/108971748263060947124/posts" rel="publisher"><i class="fa fa-google-plus"></i></a></li></ul></nav></div><div class="page-footer__envato-bar"><div class="page-footer__envato-bar-content"><div class="page-footer__copyright">© 2014 Envato Pty Ltd.</div><div class="page-footer__envato-logo"><a class="page-footer__envato-logo-link" href="http://www.envato.com/"><img alt="envato" class="page-footer__envato-logo-image" src="http://static.tutsplus.com/assets/envato_logo-bea126b87a05d98d331259dee204aac6.svg" /></a></div></div></div></footer><script async="async" src="http://static.tutsplus.com/assets/body-92fb549d1d858ecd079258ab8bab2276.js"></script><script async="async" src="http://static.tutsplus.com/assets/viglinks_loader-e66c19f4778c8bf9ea543d208bddb7e2.js"></script></body></html>