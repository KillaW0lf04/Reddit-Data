<!DOCTYPE html>
<!--[if IEMobile 7 ]><html class="no-js iem7"><![endif]-->
<!--[if lt IE 9]><html class="no-js lte-ie8"><![endif]-->
<!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!--><html class="no-js" lang="en"><!--<![endif]-->
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <link href='/css/jeffknupp.min.css' rel='stylesheet' type='text/css'>
  <meta name=viewport content="width=device-width, initial-scale=1">
  <link href='http://fonts.googleapis.com/css?family=Roboto:400,100,300,500,900' rel='stylesheet' type='text/css'>
  <link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">
  <title>Starting a Django 1.6 Project the Right Way</title>
  <meta name="author" content="Jeff Knupp">
  <meta name="description" content=""> 
  <link rel="icon" href="/images/favicon.png" >
  <link rel="alternate" href="http://feeds.feedblitz.com/hackersgonnahack" title="Python Programming" type="application/atom+xml">

  
<style>
td.linenos { background-color: #f0f0f0; padding-right: 10px; }
span.lineno { background-color: #f0f0f0; padding: 0 5px 0 5px; }
table.codehilitetable .hll, .codehilite pre .hll { background-color: #ffffcc }
table.codehilitetable, .codehilite  { background: #f8f8f8; }
table.codehilitetable .c, .codehilite pre .c { color: #408080; font-style: italic } /* Comment */
table.codehilitetable .err, .codehilite pre .err { border: 1px solid #FF0000 } /* Error */
table.codehilitetable .k, .codehilite pre .k { color: #008000; font-weight: bold } /* Keyword */
table.codehilitetable .o, .codehilite pre .o { color: #666666 } /* Operator */
table.codehilitetable .cm, .codehilite pre .cm { color: #408080; font-style: italic } /* Comment.Multiline */
table.codehilitetable .cp, .codehilite pre .cp { color: #BC7A00 } /* Comment.Preproc */
table.codehilitetable .c1, .codehilite pre .c1 { color: #408080; font-style: italic } /* Comment.Single */
table.codehilitetable .cs, .codehilite pre .cs { color: #408080; font-style: italic } /* Comment.Special */
table.codehilitetable .gd, .codehilite pre .gd { color: #A00000 } /* Generic.Deleted */
table.codehilitetable .ge, .codehilite pre .ge { font-style: italic } /* Generic.Emph */
table.codehilitetable .gr, .codehilite pre .gr { color: #FF0000 } /* Generic.Error */
table.codehilitetable .gh, .codehilite pre .gh { color: #000080; font-weight: bold } /* Generic.Heading */
table.codehilitetable .gi, .codehilite pre .gi { color: #00A000 } /* Generic.Inserted */
table.codehilitetable .go, .codehilite pre .go { color: #808080 } /* Generic.Output */
table.codehilitetable .gp, .codehilite pre .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
table.codehilitetable .gs, .codehilite pre .gs { font-weight: bold } /* Generic.Strong */
table.codehilitetable .gu, .codehilite pre .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
table.codehilitetable .gt, .codehilite pre .gt { color: #0040D0 } /* Generic.Traceback */
table.codehilitetable .kc, .codehilite pre .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
table.codehilitetable .kd, .codehilite pre .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
table.codehilitetable .kn, .codehilite pre .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
table.codehilitetable .kp, .codehilite pre .kp { color: #008000 } /* Keyword.Pseudo */
table.codehilitetable .kr, .codehilite pre .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
table.codehilitetable .kt, .codehilite pre .kt { color: #B00040 } /* Keyword.Type */
table.codehilitetable .m, .codehilite pre .m { color: #666666 } /* Literal.Number */
table.codehilitetable .s, .codehilite pre .s { color: #BA2121 } /* Literal.String */
table.codehilitetable .na, .codehilite pre .na { color: #7D9029 } /* Name.Attribute */
table.codehilitetable .nb, .codehilite pre .nb { color: #008000 } /* Name.Builtin */
table.codehilitetable .nc, .codehilite pre .nc { color: #0000FF; font-weight: bold } /* Name.Class */
table.codehilitetable .no, .codehilite pre .no { color: #880000 } /* Name.Constant */
table.codehilitetable .nd, .codehilite pre .nd { color: #AA22FF } /* Name.Decorator */
table.codehilitetable .ni, .codehilite pre .ni { color: #999999; font-weight: bold } /* Name.Entity */
table.codehilitetable .ne, .codehilite pre .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
table.codehilitetable .nf, .codehilite pre .nf { color: #0000FF } /* Name.Function */
table.codehilitetable .nl, .codehilite pre .nl { color: #A0A000 } /* Name.Label */
table.codehilitetable .nn, .codehilite pre .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
table.codehilitetable .nt, .codehilite pre .nt { color: #008000; font-weight: bold } /* Name.Tag */
table.codehilitetable .nv, .codehilite pre .nv { color: #19177C } /* Name.Variable */
table.codehilitetable .ow, .codehilite pre .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
table.codehilitetable .w, .codehilite pre .w { color: #bbbbbb } /* Text.Whitespace */
table.codehilitetable .mf, .codehilite pre .mf { color: #666666 } /* Literal.Number.Float */
table.codehilitetable .mh, .codehilite pre .mh { color: #666666 } /* Literal.Number.Hex */
table.codehilitetable .mi, .codehilite pre .mi { color: #666666 } /* Literal.Number.Integer */
table.codehilitetable .mo, .codehilite pre .mo { color: #666666 } /* Literal.Number.Oct */
table.codehilitetable .sb, .codehilite pre .sb { color: #BA2121 } /* Literal.String.Backtick */
table.codehilitetable .sc, .codehilite pre .sc { color: #BA2121 } /* Literal.String.Char */
table.codehilitetable .sd, .codehilite pre .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
table.codehilitetable .s2, .codehilite pre .s2 { color: #BA2121 } /* Literal.String.Double */
table.codehilitetable .se, .codehilite pre .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
table.codehilitetable .sh, .codehilite pre .sh { color: #BA2121 } /* Literal.String.Heredoc */
table.codehilitetable .si, .codehilite pre .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
table.codehilitetable .sx, .codehilite pre .sx { color: #008000 } /* Literal.String.Other */
table.codehilitetable .sr, .codehilite pre .sr { color: #BB6688 } /* Literal.String.Regex */
table.codehilitetable .s1, .codehilite pre .s1 { color: #BA2121 } /* Literal.String.Single */
table.codehilitetable .ss, .codehilite pre .ss { color: #19177C } /* Literal.String.Symbol */
table.codehilitetable .bp, .codehilite pre .bp { color: #008000 } /* Name.Builtin.Pseudo */
table.codehilitetable .vc, .codehilite pre .vc { color: #19177C } /* Name.Variable.Class */
table.codehilitetable .vg, .codehilite pre .vg { color: #19177C } /* Name.Variable.Global */
table.codehilitetable .vi, .codehilite pre .vi { color: #19177C } /* Name.Variable.Instance */
table.codehilitetable .il, .codehilite pre .il { color: #666666 } /* Literal.Number.Integer.Long */
</style>
  <style>
body {
    font-family: 'Roboto', sans-serif;
    font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", 'Roboto', Arial, "Lucida Grande", sans-serif;
    font-size: 18px;
    font-weight: 300;
}
.nav {
    text-align: right;
    padding-bottom: 20px;
}

.nav a {
    padding-right: 2em;
    color: black;
    font-size: 14px;
}

.title {
   width: 100%; 
   text-align: center; 
   border-bottom: 1px solid #000; 
   line-height: 0.1em;
   margin: 10px 0 40px; 
} 

.title span { 
    background:#fff; 
    padding:0 20px; 
}

/* Side notes for calling out things
-------------------------------------------------- */
 
/* Base styles (regardless of theme) */
.bs-callout {
  margin: 20px 0;
  padding: 15px 30px 15px 15px;
  border-left: 5px solid #eee;
}
.bs-callout h4 {
  margin-top: 0;
}
.bs-callout p:last-child {
  margin-bottom: 0;
}
.bs-callout code,
.bs-callout .highlight {
  background-color: #fff;
}
 
/* Themes for different contexts */
.bs-callout-danger {
  background-color: #fcf2f2;
  border-color: #dFb5b4;
}
.bs-callout-warning {
  background-color: #fefbed;
  border-color: #f1e7bc;
}
.bs-callout-info {
  background-color: #f0f7fd;
  border-color: #d0e3f0;
}
.bs-callout-danger h4 {
color: #B94A48;
}

.bs-callout-warning h4 {
color: #C09853;
}

.bs-callout-info h4 {
color: #3A87AD;
}
</style>

  
  
  <!-- Google Analytics -->
  <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-12615441-1', 'jeffknupp.com');
    ga('send', 'pageview');
  </script>
  <!-- Google Plus Author Link -->
  <link href="https://plus.google.com/102786441324515866525" rel="publisher" />

</head>

<body itemscope itemtype="http://schema.org/Blog">
<header id="header">
    <img src="/images/jeff.jpg" class="circular center-block">
    <h1>Jeff Knupp</h1>
    <h2>PYTHON PROGRAMMER</h2>
    <nav>
        <a href="/">BLOG</a>
        <span itemprop="author" itemscope itemtype="http://schema.org/Person"><a itemprop="url" href="/about-me/" itemprop="url">ABOUT</a></span>
        <a href="/blog/archives">ARCHIVES</a>
        <a href="/python-tutoring" title="python-tutoring">TUTORING</a>
        <a href="https://www.jeffknupp.com/writing-idiomatic-python-ebook/">BOOK</a>
    </nav>
</header>
<div class="container-fluid content">
    <h2 class="text-center"><span itemprop="name">Everything I know about Python...</span></h2>
    <div class="col-md-8 col-md-offset-2 col-xs-12">
        <div class="bs-callout bs-callout-danger">
            <h4 class="text-center">Learn to Write Pythonic Code!</h4>
            <p class="text-center"><a href="https://www.jeffknupp.com/writing-idiomatic-python-ebook/">
                Check out the book <em>Writing Idiomatic Python</em>!</a></p>
        </div>
        <div id="content">
            
<article itemscope itemtype="http://schema.org/BlogPosting">
<header>
    <h1 class="post-title"><a href="/blog/2013/12/18/starting-a-django-16-project-the-right-way"><span itemprop="headline">Starting a Django 1.6 Project the Right Way</span></a><br/>
</header>

<div class="entry-content" itemprop="articleBody">
    
        <p><em>Back in February of 2012, I wrote an article titled <a href="http://www.jeffknupp.com/blog/2012/02/09/starting-a-django-project-the-right-way/">'Starting a Django Project the Right Way'</a>, and later followed up with <a href="http://www.jeffknupp.com/blog/2012/10/24/starting-a-django-14-project-the-right-way/">'Starting a Django 1.4 Project the Right Way'</a>.  Both of these articles still draw a consistent audience and are referenced in numerous StackOverflow answers, corporate wikis, and tweets. With 1.5 </em>and<em> 1.6 already out, now seems like an appropriate time to update the article again.</em></p>
<p>The beginning of a project is a critical time, when choices are made that have long
term consequences. There are a number of tutorials about how to get started with
the Django framework, but few that discuss how to use Django in a professional
way, using industry accepted best practices to make sure your project's
development practices scale as your application grows. 
A small bit of planning goes a <em>long</em> way towards making your life (and the lives of any coworkers)
easier in the future.</p>
<p>By the end of this post, you will have</p>
<ol>
<li>A fully functional Django 1.6 project</li>
<li>All resources under source control (with git or Mercurial)</li>
<li>Automated regression and unit testing (using the unittest library)</li>
<li>An environment independent install of your project (using virtualenv)</li>
<li>Automated deployment and testing (using Fabric)</li>
<li>Automatic database migrations (using South)</li>
<li>A development work flow that scales with your site.</li>
</ol>
<p>None of these steps, except for perhaps the first, are covered in the
official tutorial. <strong>They should be</strong>. If you're looking to start a new,
production ready Django 1.6 project, look no further.</p>
<!--more-->

<h2>Prerequisites</h2>
<p>A working knowledge of Python is assumed. Also, some prior experience
with Django would be incredibly helpful, but not strictly necessary.
You'll need <a href="http://www.git-scm.com">git</a> or <a href="http://mercurial.selenic.com/">Mercurial</a> for version control. That's
it!</p>
<h2>Preparing To Install</h2>
<p>I'm assuming you have Python installed. If you don't head over to
<a href="http://www.python.org">python.org</a> and find the install instructions
for your architecture/os. I'll be running on a 64-bit Arch server installation hosted by <a href="http://www.linode.com/?r=ae1808f234f8e219de24842336fada09ef81d52f">Linode</a>, with whom I'm very happy.</p>
<p>So, what's the first step? Install Django, right? Not quite. One common
problem with installing packages directly to your current site-packages
area is that, if you have more than one project or use Python on your
machine for things other than Django, you may run into dependency
issues between your applications and the installed packages. For this
reason, we'll be using <a href="http://pypi.python.org/pypi/virtualenv">virtualenv</a> and the excellent
extension <a href="http://virtualenvwrapper.readthedocs.org/en/latest/">virtualenvwrapper</a> to manage our
Django installation. This is common, recommended practice among
Python and Django users alike.</p>
<p>If you're using pip to install packages (and I can't see why you wouldn't), you
can get both virtualenv and virtualenvwrapper by simply installing the latter.</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip install virtualenvwrapper
</pre></div>


<p>After it's installed, add the following lines to your shell's start-up file
(.zshrc, .bashrc, .profile, etc).</p>
<div class="codehilite"><pre><span class="nb">export </span><span class="nv">WORKON_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/.virtualenvs
<span class="nb">export </span><span class="nv">PROJECT_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/directory-you-do-development-in
<span class="nb">source</span> /usr/local/bin/virtualenvwrapper.sh
</pre></div>


<p>Reload your start up file (e.g. <code>source .zshrc</code>) and you're ready to go.</p>
<h2>Creating a New Environment</h2>
<p>Creating a virtual environment is simple. Just type</p>
<div class="codehilite"><pre><span class="nv">$ </span>mkvirtualenv django_project
</pre></div>


<p>where <code>django_project</code> is whatever name you give to your project.</p>
<p>You'll notice a few things happen right away:</p>
<ul>
<li>Your shell is prepended by <code>(django_project)</code></li>
<li>distribute and pip were automatically installed</li>
</ul>
<p>This is an extremely helpful part of virtualenvwrapper: it automatically
prepares your environment in a way that lets you start installing packages using
pip right away. The <code>django_project</code> portion is a reminder that you're using a
virtualenv instead of your system's Python installation. To exit the virtual
environment, simply type <code>deactivate</code>. When you want to resume work on your
project, it's as easy as <code>workon django_project</code>. Note that unlike the vanilla
virtualenv tool, <em>where</em> you run these commands doesn't matter.</p>
<h2>Installing Django</h2>
<p>"Wait, 'Installing Django'? I already have Django installed!" Fantastic.
You aren't going to use it. Instead, we'll use one managed by virtualenv
that can't be messed up by other users (or yourself) working elsewhere
on the machine. To install Django under virtualenv, just type:</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip install django
</pre></div>


<p>This should give you the latest version of Django which will be installed in your
virtualenv area. You can confirm this by doing:</p>
<div class="codehilite"><pre><span class="nv">$ </span>which django-admin.py
</pre></div>


<p>Which should point to your <code>$HOME/.virtualenvs/</code> directory. If it doesn't,
make sure you see <code>django_project</code> before your prompt. If you don't, activate
the virtualenv using <code>workon django_project</code>.</p>
<h2>Setting Up The Project</h2>
<p>Before we actually start the project, we need to have a little talk. 
I've consulted on a number of Django/Python projects and spoken to numerous developers
in the last few years. Overwhelmingly, the ones having the most difficulty are
those that do not use any form of version control. It may sound unbelievable
(considering the popularity of <a href="http://www.github.com">GitHub</a>), but
developers have simply never been exposed to version control. Others think that
since "this is a small project," that it's not necessary. <strong>Wrong</strong>.</p>
<p><strong>None of the tools listed here will pay greater dividends then the use of a version control system.</strong></p>
<p>Previously, I only mentioned git as a (D)VCS. However, this project being in
Python, Mercurial is a worthy Python based alternative. Both are popular enough
that learning resources abound online. Make sure you have either git or
Mercurial installed. Both are almost certainly available via your distro's
packaging system.</p>
<p>If you plan on using git, <a href="http://www.github.com">GitHub</a> is an obvious choice
for keeping a remote repository. With Mercurial, Atlassian's 
<a href="https://bitbucket.org/">Bitbucket</a> is a fine choice (it supports git as well, 
so you could use it in either case).</p>
<h2>(source) Controlling Your Environment</h2>
<p>Even though we haven't actually done anything yet, we know we're going to 
want everything under source control. We have two types of 'things' we're going 
to be committing: our code itself (including templates, etc) and supporting
files like database fixtures, South migrations (more on that later), and a
<code>requirements.txt</code> file, which lists all of the packages your project depends on
and allows automated construction of environments (without your having to <code>pip
install</code> everything again).</p>
<p>Let's go ahead and create our project directory. Use the <code>startproject</code>
command supplied by <code>django-admin.py</code> to get it set up.</p>
<div class="codehilite"><pre><span class="nv">$ </span>django-admin.py startproject django_project
</pre></div>


<p>We'll see a single directory created: <code>django_project</code>. Within the
<code>django_project</code> directory, we'll see <em>another</em> <code>django_project</code> directory
containing the usual suspects: <code>settings.py</code>, <code>urls.py</code>, and <code>wsgi.py</code>. At the same
level as the second <code>django_project</code> directory is <code>manage.py</code>.</p>
<h3>Intermezzo: Projects vs. Apps</h3>
<p>You may be wondering why, back in Django 1.4, the <code>startproject</code> command was added alongside the
pre-existing <code>startapp</code> command. The answer lies in the difference between
Django "projects" and Django "apps". Briefly, a <em>project</em> is an entire web site or 
application. An "app" is a small, (hopefully) self-contained Django application 
that can be used in any Django project. If you're building a blogging application 
called "Super Blogger", then "Super Blogger" is your Django project. If "Super Blogger" supports
reader polls, "polls" would be an Django app used by "Super Blogger". The idea is that
your polls app should reusable in any Django project requiring
polls, not just within "Super Blogger". A project is a collection of apps, along
with project specific logic. An app can be used in multiple projects.</p>
<p>While your natural inclination might be to include a lot of "Super Blogger"
specific code and information within your "polls" app, avoiding this has a
number of benefits. Based on the principle of <em>loose coupling</em>, writing your
apps as standalone entities prevents design decisions and bugs in your project
directly affecting your app. It also means that, if you wanted to, you could
pass of the development of any of your apps to another developer without them
needing to access or make changes to your main project. </p>
<p>Like many things in software development, it takes a bit of effort up-front 
but pays huge dividends later.</p>
<h2>Setting Up Our Repos</h2>
<p>Since we have some "code" in our project now (really just some stock scripts and
empty config files, but bear with me), now is as good a time as any to
initialize our repositories in source control. Here's how to do that in
git and Mercurial.</p>
<h4>git</h4>
<div class="codehilite"><pre><span class="nv">$ </span>git init
</pre></div>


<p>This creates a git repository in the current directory. Lets stage all of
our files to git to be committed.</p>
<div class="codehilite"><pre><span class="nv">$ </span>git add django_project
</pre></div>


<p>Now we actually commit them to our new repo:</p>
<div class="codehilite"><pre><span class="nv">$ </span>git commit -m <span class="s1">&#39;Initial commit of django_project&#39;</span>
</pre></div>


<h4>Mercurial</h4>
<div class="codehilite"><pre><span class="nv">$ </span>hg init
</pre></div>


<p>This creates a Mercurial repository in the current directory. Lets stage all of
our files to git to be committed.</p>
<div class="codehilite"><pre><span class="nv">$ </span>hg add django_project
</pre></div>


<p>Now we actually commit them to our new repo:</p>
<div class="codehilite"><pre><span class="nv">$ </span>hg commit -m <span class="s1">&#39;Initial commit of django_project&#39;</span>
</pre></div>


<p>If you plan on using a service like GitHub or Bitbucket, now would be a
good time to push to them.</p>
<h2>Using South for Database Migrations</h2>
<p>One of the most frustrating aspects of Django is
managing changes to models and the associated changes to the database.
With the help of <a href="http://south.readthedocs.org">South</a>, you can realistically create an entire
application without ever writing database specific code. Changes to your
models are detected and automatically made in the database through a
<em>migration file</em> that South creates. This lets you both migrate the
database forward for your new change and <strong>backwards</strong> to undo a change
or series of changes. It makes your life so much easier, it's a wonder
it's not included in the Django distribution.</p>
<h3>When to begin using South</h3>
<p>In previous articles, I recommended using South from the very beginning of your
project. For relatively simple projects, this is fine. If, however, you have a
ton of models that are changing rapidly as you prototype, now is not the time to
use South. Rather, just blow away and re-create the database whenever you need
to. You can write scripts to populate the database with some test data and edit
them as needed. Once your models stop changing, however, make the move to South
ASAP. It's as easy as <code>./manage.py convert_to_south &lt;app_name&gt;</code>.</p>
<h3>Installation and Setup</h3>
<p>Still in our virtualenv, install South like so:</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip install south
</pre></div>


<p>We setup South by adding it to our<code>INSTALLED_APPS</code>in the <code>settings.py</code>
file for the project. Add that now, as well as your database settings
for the project, then run <code>python manage.py syncdb</code>.
You'll be prompted for a superuser name and password (which you can go
ahead and enter). More importantly, South has setup the database with
the tables it needs.</p>
<p>You may have noticed that we just ran <code>syncdb</code> without having adding an app to the project. We do this first so that South is installed from the beginning. All migrations to our own apps will be done using South, including the "initial" migration.</p>
<p>Since we've just made some pretty big changes, now would be a good time
to commit. You should get used to committing frequently, as the
more granular the commit, the more freedom you have in choosing
something to revert to if things go wrong.</p>
<p>To commit, lets see what has changed.</p>
<h4>(git)</h4>
<div class="codehilite"><pre><span class="nv">$ </span>git status
<span class="c"># On branch master</span>
<span class="c"># Changes not staged for commit:</span>
<span class="c">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span>
<span class="c">#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span>
<span class="c">#</span>
<span class="c">#       modified:   django_project/settings.py</span>
<span class="c">#</span>
<span class="c"># Untracked files:</span>
<span class="c">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span>
<span class="c">#</span>
<span class="c">#       django_project/.settings.py.swp</span>
<span class="c">#       django_project/__init__.pyc</span>
<span class="c">#       django_project/settings.pyc</span>
</pre></div>


<h4>(Mercurial)</h4>
<div class="codehilite"><pre><span class="nv">$ </span>hg status
M django_project/django_project/settings.py
? django_project/django_project/.settings.py.swp
? django_project/django_project/__init__.pyc
? django_project/django_project/settings.pyc
</pre></div>


<p>With both git and Mercurial, you may notice files you don't ever want committed,
like the compiled Python .pyc files and vim swap .swp files above. To ignore
these files, create a <code>.gitignore</code> or <code>.hgignore</code> file in your root
project directory and add a shell glob pattern to match files you <em>don't</em> want
to be tracked. For example, the contents of my file might be </p>
<div class="codehilite"><pre><span class="o">*</span><span class="p">.</span><span class="n">pyc</span>
<span class="p">.</span><span class="o">*</span><span class="n">swp</span>
</pre></div>


<p>Before we commit, we have one more piece of information to track: our installed
Python packages. We want to track the name <em>and version</em> of the Python packages
we're using so that we can seamlessly recreate our environment in our production
area. Helpfully, pip has a command that does exactly what we need.</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip freeze &gt; requirements.txt
</pre></div>


<p>I piped the output to a file called <code>requirements.txt</code>, which we'll add to
source control so we always have an updated list of what packages are being used.</p>
<p>Let's stage and commit our settings.py and requirements.txt files to be committed by running </p>
<div class="codehilite"><pre><span class="nv">$ </span><span class="o">(</span>git/hg<span class="o">)</span> add django_project/settings.py requirements.txt
<span class="nv">$ </span><span class="o">(</span>git/hg<span class="o">)</span> commit -m <span class="s1">&#39;Added South for database migrations&#39;</span>
</pre></div>


<h2>New-Style Settings</h2>
<p>As developers become more comfortable with Django and Python, they realize that
the <code>settings.py</code> file is simply a Python script, and can thus be "programmed".
One common pattern is for the <code>settings.py</code> file to be moved from the rather
curious project directory to a new directory called <code>conf</code> or <code>config</code>. Just be
aware you'll need to make a slight change to <code>manage.py</code> to accommodate the move.</p>
<p>Within <code>settings.py</code>,<code>INSTALLED_APPS</code>can quickly grow into a morass of
third-party packages, in house django apps, and project specific apps. I like to
divide<code>INSTALLED_APPS</code>into three categories: </p>
<ul>
<li>DEFAULT_APPS: Django framework apps installed as part of the default Django install (like the admin)</li>
<li>THIRD_PARTY_APPS: Like South</li>
<li>LOCAL_APPS: The applications you create</li>
</ul>
<p>This makes it much easier to see what third-party applications you're using and
what is home-grown. Just remember to eventually have a line similar to the
following:</p>
<div class="codehilite"><pre><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="n">DEFAULT_APPS</span> <span class="o">+</span> <span class="n">THIRD_PARTY_APPS</span> <span class="o">+</span> <span class="n">LOCAL_APPS</span>
</pre></div>


<p>Otherwise, Django will complain about not having <code>INSTALLED_APPS</code> defined.</p>
<h2>Creating Our App</h2>
<p>Use <code>manage.py</code> to create an app in the normal way (<code>python manage.py
startapp myapp</code>) and add it under <code>INSTALLED_APPS</code>. Also, take the time to make <code>manage.py</code>
executable (<code>chmod +x manage.py</code>) so you can just type <code>./manage.py &lt;command&gt;</code>
rather than needing to type <code>python manage.py &lt;command&gt;</code> all the time. Honestly,
so few developers do this. I can't for the life of me figure out why.</p>
<p>The first thing we'll do, before adding models, is tell South we want South to manage changes to our models
in the form of migrations:</p>
<div class="codehilite"><pre><span class="nv">$ </span>python manage.py schemamigration myapp --initial
</pre></div>


<p>This creates a migration file that can be used to apply our model changes (if
we had any) to the database without needing to completely destroy and rebuild it. It also
also allows us to <em>revert</em> changes if things go sideways on us. We use the migration file 
to  <em>migrate</em> the database changes (even though there are none) using :</p>
<div class="codehilite"><pre><span class="nv">$ </span>python manage.py migrate myapp
</pre></div>


<p>South is smart enough to know where to look for migration files, as well
as remember the last migration we did. You can specify
individual migration files, but it's usually not necessary.</p>
<p>When we eventually make changes to our model, we ask South to create a
migration using:</p>
<div class="codehilite"><pre><span class="nv">$ </span>python manage.py schemamigration myapp --auto
</pre></div>


<p>This will inspect the models in <code>myapp</code> and automatically add, delete,
or modify the database tables accordingly. Changes can then be applied to the
database using the migrate command as above.</p>
<h2>Our Development Area</h2>
<p>A good habit to get into is to write and test your code separately from where
you're serving your files from, so that you don't accidentally bring down your
site via a coding error when you're adding new functionality, for example.
git and Mercurial make this simple. Just create a directory somewhere other than 
where <code>django_project</code> is installed for your development area (I just call it <code>dev</code>). </p>
<p>In your development (<code>dev</code>) directory, clone the current project using git or Mercurial:</p>
<div class="codehilite"><pre><span class="nv">$ </span><span class="o">(</span>git/hg<span class="o">)</span> clone /path/to/my/project/
</pre></div>


<p>Both tools will create an exact copy of the <strong>entire</strong> repository. All changes,
branches, and history will be available here. From here on out, you
should be working from your development directory.</p>
<p>Since branching with both git and Mercurial is so easy and cheap, create branches
as you work on new, orthogonal changes to your site. Here's how to do it each tool:</p>
<h4>(git)</h4>
<div class="codehilite"><pre><span class="nv">$ </span>git checkout -b &lt;branchname&gt;
</pre></div>


<p>Which will both create a new branch named <branchname> and check it out.
Almost all of your development should be done on a branch, so that
<code>master</code> mimics the "production" (or "version live on your site") <code>master</code> and can be used for recovery at
any time.</p>
<h4>(Mercurial)</h4>
<div class="codehilite"><pre><span class="nv">$ </span>hg branch &lt;branchname&gt;
</pre></div>


<p>Note that branching is kind of a contentious topic within the Mercurial
community, as there are a number of options available but no "obviously correct"
choice. Here, I use a named branch, which is probably the safest and most
informative style of branching. Any commits after the branch command are done on
the <branchname> branch.</p>
<h2>Using Fabric for Deployment</h2>
<p>So we have the makings of a Django application. How do we deploy it?
<strong><a href="http://www.fabfile.org">Fabric</a></strong>. For a reasonable sized project, discussing anything else is a 
waste of time. Fabric can be used for a number of purposes, but it really shines
in deployments.</p>
<div class="codehilite"><pre><span class="nv">$ </span>pip install fabric
</pre></div>


<p>Fabric expects a <em>fabfile</em> named <code>fabfile.py</code> which defines all of the actions we
can take. Let's create that now. Put the following in <code>fabfile.py</code> in your project's root directory.</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">local</span>

<span class="k">def</span> <span class="nf">prepare_deployment</span><span class="p">(</span><span class="n">branch_name</span><span class="p">):</span>
    <span class="n">local</span><span class="p">(</span><span class="s">&#39;python manage.py test django_project&#39;</span><span class="p">)</span>
    <span class="n">local</span><span class="p">(</span><span class="s">&#39;git add -p &amp;&amp; git commit&#39;</span><span class="p">)</span> <span class="c"># or local(&#39;hg add &amp;&amp; hg commit&#39;)</span>
</pre></div>


<p>This will run the tests and commit your changes, <em>but only if your tests pass</em>.
At this point, a simple "pull" in your production area
becomes your deployment. Lets add a bit more to actually deploy. Add
this to your fabfile.py:</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">lcd</span><span class="p">,</span> <span class="n">local</span>

<span class="k">def</span> <span class="nf">deploy</span><span class="p">():</span>
    <span class="k">with</span> <span class="n">lcd</span><span class="p">(</span><span class="s">&#39;/path/to/my/prod/area/&#39;</span><span class="p">):</span>

        <span class="c"># With git...</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;git pull /my/path/to/dev/area/&#39;</span><span class="p">)</span>

        <span class="c"># With Mercurial...</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;hg pull /my/path/to/dev/area/&#39;</span><span class="p">)</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;hg update&#39;</span><span class="p">)</span>

        <span class="c"># With both</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;python manage.py migrate myapp&#39;</span><span class="p">)</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;python manage.py test myapp&#39;</span><span class="p">)</span>
        <span class="n">local</span><span class="p">(</span><span class="s">&#39;/my/command/to/restart/webserver&#39;</span><span class="p">)</span>
</pre></div>


<p>This will pull your changes from the development master branch, run any
migrations you've made, run your tests, and restart your web server.
All in one simple command from the command line. If one of those steps
fails, the script stops and reports what happened. Once you fix the
issue, there is no need to run the steps manually. Since they're idempotent, you
can simply rerun the deploy command and all will be well.</p>
<p>Note that the code above assumes you're developing on the same machine you
deploy on. If that's not the case, the file would be mostly the same but would
use Fabric's <code>run</code> function instead of <code>local</code>. See <a href="http://docs.fabfile.org/">the Fabric documentation</a> for details.</p>
<p>So now that we have our <code>fabfile.py</code> created, how do we actually deploy?
Simple. Just run:</p>
<div class="codehilite"><pre><span class="nv">$ </span>fab prepare_deployment
<span class="nv">$ </span>fab deploy
</pre></div>


<p>Technically, these could be combined into a single command, but I find
it's better to explicitly prepare your deployment and then deploy as it
makes you focus a bit more on what you're doing.</p>
<h2>Setting Up Unit Tests</h2>
<p>If you know anything about me, you probably know I'm crazy about automated
tests. Too many Django projects are written without <em>any</em> tests whatsoever. This
is another one of those things that costs a bit of time up-front but pays
<em>enormous</em> dividends down the road. If you've ever found yourself debugging
your app using <code>print</code> statements, having proper tests in place could have saved
you a lot of time.</p>
<p>For Django, the Python <code>unittest</code> module is perfectly sufficient. The following
is a minimal example of tests for a single app:</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">datetime</span>

<span class="kn">from</span> <span class="nn">django.test</span> <span class="kn">import</span> <span class="n">TestCase</span>
<span class="kn">from</span> <span class="nn">myapp.models</span> <span class="kn">import</span> <span class="n">Post</span>

<span class="k">class</span> <span class="nc">BlogPostTestCase</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> 
            <span class="n">title</span><span class="o">=</span><span class="s">&#39;Starting a Django 1.6 Project the Right Way&#39;</span><span class="p">,</span> 
            <span class="n">date</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(),</span>
            <span class="n">category</span><span class="o">=</span><span class="s">&#39;Django&#39;</span><span class="p">)</span>
        <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> 
            <span class="n">title</span><span class="o">=</span><span class="s">&#39;Python</span><span class="se">\&#39;</span><span class="s">s Hardest Problem&#39;</span><span class="p">,</span> 
            <span class="n">date</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(),</span>
            <span class="n">category</span><span class="o">=</span><span class="s">&#39;Python&#39;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_posts_have_category</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Animals that can speak are correctly identified&quot;&quot;&quot;</span>
        <span class="n">first_post</span> <span class="o">=</span> <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">second_post</span> <span class="o">=</span> <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">first_post</span><span class="o">.</span><span class="n">category</span><span class="p">,</span> <span class="s">&#39;Django&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">second_post</span><span class="o">.</span><span class="n">category</span><span class="p">,</span> <span class="s">&#39;Python&#39;</span><span class="p">)</span>
</pre></div>


<p>You would put this code in a file called <code>test_&lt;appname&gt;.py</code> and place it in the
same directory as the app it is testing. To run the tests for an app, simply run
<code>./manage.py test &lt;appname&gt;</code>. The fabfile we created already knows to run the
tests before deployment, so no need to make any other changes.</p>
<h3>Enjoy Your New Django Application</h3>
<p>That's it! You're ready to start your actual development. Now is when the real
fun begins. Just remember: commit often, test everything, and don't write code
where you serve it from. Regardless of what happens from here on out, you've definitely
started a Django 1.6 project the right way!</p>
        
<small>Posted on <time datetime="2013-12-18 12:50:00" pubdate data-updated="true" itemprop="datePublished">Dec 18, 2013</time> by <span itemprop="author"> Jeff Knupp</span></small> </h1>
<div class="sharing">
    <div class="row">
    <p class="meta" style="padding-top: 20px;">
    <a class="basic-alignment left" href="/blog/2013/12/11/improve-your-python-the-seminar" title="Previous Post: Improve Your Python: The Seminar">&laquo; Improve Your Python: The Seminar</a>
    </p>
    
    <div id="mc_embed_signup" class="well">
<form action="http://jeffknupp.us6.list-manage1.com/subscribe/post?u=51d2d98cf34cbcc20db22e5fa&amp;id=f15bb537ad" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
  <h4>Like this article?</h4>
  <p>Why not sign up for <strong>Python Tutoring</strong>? Sessions can be held
  remotely using Google+/Skype or in-person if you're in the NYC area. <a href="mailto:jeff@jeffknupp.com">Email jeff@jeffknupp.com</a> if interested.</p>
  <p><strong>Sign up for the free jeffknupp.com email newsletter.</strong> Sent roughly once a month, it focuses on Python programming, scalable web development, and growing your freelance consultancy. And of course, you'll never be spammed, your privacy is protected, and you can opt out at any time.</p>
<div class="mc-field-group">
	<label for="mce-EMAIL">Email Address</label>
	<input type="email" value="" name="EMAIL" class="required email" id="mce-EMAIL">
</div>
	<div id="mce-responses" class="clear">
		<div class="response" id="mce-error-response" style="display:none"></div>
		<div class="response" id="mce-success-response" style="display:none"></div>
	</div>	<div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
</form>
</div>
    
  </footer>
</article>
</div>
<section>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Leaderboard -->
<ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-2922325862575361"
     data-ad-slot="6191597138"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
        <div id="disqus_thread"></div>
<script type="text/javascript">
            var disqus_shortname = 'hackersgonnahack';

            (function() {
                var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
 
  </section>
  </div>
    
</div>
</article>

        </div>
        <div id="footer" class="text-center">
        
            <footer role="contentinfo">
                <p>Copyright &copy; 2014 - Jeff Knupp- <span class="credit">Powered by <a href="http://www.github.com/jeffknupp/blug">Blug</a></span> </p>
            </footer>
         
    </div>

<a title="Web Analytics" href="http://clicky.com/66535137"><img alt="Web Analytics" src="//static.getclicky.com/media/links/badge.gif" border="0" /></a>
<script type="text/javascript">
var clicky_site_ids = clicky_site_ids || [];
clicky_site_ids.push(66535137);
(function() {
  var s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  s.src = '//static.getclicky.com/js';
  ( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild( s );
})();
</script>
<noscript><p><img alt="Clicky" width="1" height="1" src="//in.getclicky.com/66535137ns.gif" /></p></noscript> 
</div>
</html>