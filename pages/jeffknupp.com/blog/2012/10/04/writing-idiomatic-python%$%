<!DOCTYPE html>
<!--[if IEMobile 7 ]><html class="no-js iem7"><![endif]-->
<!--[if lt IE 9]><html class="no-js lte-ie8"><![endif]-->
<!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!--><html class="no-js" lang="en"><!--<![endif]-->
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <link href='/css/jeffknupp.min.css' rel='stylesheet' type='text/css'>
  <meta name=viewport content="width=device-width, initial-scale=1">
  <link href='http://fonts.googleapis.com/css?family=Roboto:400,100,300,500,900' rel='stylesheet' type='text/css'>
  <link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">
  <title>Writing Idiomatic Python</title>
  <meta name="author" content="Jeff Knupp">
  <meta name="description" content=""> 
  <link rel="icon" href="/images/favicon.png" >
  <link rel="alternate" href="http://feeds.feedblitz.com/hackersgonnahack" title="Python Programming" type="application/atom+xml">

  
<style>
td.linenos { background-color: #f0f0f0; padding-right: 10px; }
span.lineno { background-color: #f0f0f0; padding: 0 5px 0 5px; }
table.codehilitetable .hll, .codehilite pre .hll { background-color: #ffffcc }
table.codehilitetable, .codehilite  { background: #f8f8f8; }
table.codehilitetable .c, .codehilite pre .c { color: #408080; font-style: italic } /* Comment */
table.codehilitetable .err, .codehilite pre .err { border: 1px solid #FF0000 } /* Error */
table.codehilitetable .k, .codehilite pre .k { color: #008000; font-weight: bold } /* Keyword */
table.codehilitetable .o, .codehilite pre .o { color: #666666 } /* Operator */
table.codehilitetable .cm, .codehilite pre .cm { color: #408080; font-style: italic } /* Comment.Multiline */
table.codehilitetable .cp, .codehilite pre .cp { color: #BC7A00 } /* Comment.Preproc */
table.codehilitetable .c1, .codehilite pre .c1 { color: #408080; font-style: italic } /* Comment.Single */
table.codehilitetable .cs, .codehilite pre .cs { color: #408080; font-style: italic } /* Comment.Special */
table.codehilitetable .gd, .codehilite pre .gd { color: #A00000 } /* Generic.Deleted */
table.codehilitetable .ge, .codehilite pre .ge { font-style: italic } /* Generic.Emph */
table.codehilitetable .gr, .codehilite pre .gr { color: #FF0000 } /* Generic.Error */
table.codehilitetable .gh, .codehilite pre .gh { color: #000080; font-weight: bold } /* Generic.Heading */
table.codehilitetable .gi, .codehilite pre .gi { color: #00A000 } /* Generic.Inserted */
table.codehilitetable .go, .codehilite pre .go { color: #808080 } /* Generic.Output */
table.codehilitetable .gp, .codehilite pre .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
table.codehilitetable .gs, .codehilite pre .gs { font-weight: bold } /* Generic.Strong */
table.codehilitetable .gu, .codehilite pre .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
table.codehilitetable .gt, .codehilite pre .gt { color: #0040D0 } /* Generic.Traceback */
table.codehilitetable .kc, .codehilite pre .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
table.codehilitetable .kd, .codehilite pre .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
table.codehilitetable .kn, .codehilite pre .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
table.codehilitetable .kp, .codehilite pre .kp { color: #008000 } /* Keyword.Pseudo */
table.codehilitetable .kr, .codehilite pre .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
table.codehilitetable .kt, .codehilite pre .kt { color: #B00040 } /* Keyword.Type */
table.codehilitetable .m, .codehilite pre .m { color: #666666 } /* Literal.Number */
table.codehilitetable .s, .codehilite pre .s { color: #BA2121 } /* Literal.String */
table.codehilitetable .na, .codehilite pre .na { color: #7D9029 } /* Name.Attribute */
table.codehilitetable .nb, .codehilite pre .nb { color: #008000 } /* Name.Builtin */
table.codehilitetable .nc, .codehilite pre .nc { color: #0000FF; font-weight: bold } /* Name.Class */
table.codehilitetable .no, .codehilite pre .no { color: #880000 } /* Name.Constant */
table.codehilitetable .nd, .codehilite pre .nd { color: #AA22FF } /* Name.Decorator */
table.codehilitetable .ni, .codehilite pre .ni { color: #999999; font-weight: bold } /* Name.Entity */
table.codehilitetable .ne, .codehilite pre .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
table.codehilitetable .nf, .codehilite pre .nf { color: #0000FF } /* Name.Function */
table.codehilitetable .nl, .codehilite pre .nl { color: #A0A000 } /* Name.Label */
table.codehilitetable .nn, .codehilite pre .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
table.codehilitetable .nt, .codehilite pre .nt { color: #008000; font-weight: bold } /* Name.Tag */
table.codehilitetable .nv, .codehilite pre .nv { color: #19177C } /* Name.Variable */
table.codehilitetable .ow, .codehilite pre .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
table.codehilitetable .w, .codehilite pre .w { color: #bbbbbb } /* Text.Whitespace */
table.codehilitetable .mf, .codehilite pre .mf { color: #666666 } /* Literal.Number.Float */
table.codehilitetable .mh, .codehilite pre .mh { color: #666666 } /* Literal.Number.Hex */
table.codehilitetable .mi, .codehilite pre .mi { color: #666666 } /* Literal.Number.Integer */
table.codehilitetable .mo, .codehilite pre .mo { color: #666666 } /* Literal.Number.Oct */
table.codehilitetable .sb, .codehilite pre .sb { color: #BA2121 } /* Literal.String.Backtick */
table.codehilitetable .sc, .codehilite pre .sc { color: #BA2121 } /* Literal.String.Char */
table.codehilitetable .sd, .codehilite pre .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
table.codehilitetable .s2, .codehilite pre .s2 { color: #BA2121 } /* Literal.String.Double */
table.codehilitetable .se, .codehilite pre .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
table.codehilitetable .sh, .codehilite pre .sh { color: #BA2121 } /* Literal.String.Heredoc */
table.codehilitetable .si, .codehilite pre .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
table.codehilitetable .sx, .codehilite pre .sx { color: #008000 } /* Literal.String.Other */
table.codehilitetable .sr, .codehilite pre .sr { color: #BB6688 } /* Literal.String.Regex */
table.codehilitetable .s1, .codehilite pre .s1 { color: #BA2121 } /* Literal.String.Single */
table.codehilitetable .ss, .codehilite pre .ss { color: #19177C } /* Literal.String.Symbol */
table.codehilitetable .bp, .codehilite pre .bp { color: #008000 } /* Name.Builtin.Pseudo */
table.codehilitetable .vc, .codehilite pre .vc { color: #19177C } /* Name.Variable.Class */
table.codehilitetable .vg, .codehilite pre .vg { color: #19177C } /* Name.Variable.Global */
table.codehilitetable .vi, .codehilite pre .vi { color: #19177C } /* Name.Variable.Instance */
table.codehilitetable .il, .codehilite pre .il { color: #666666 } /* Literal.Number.Integer.Long */
</style>
  <style>
body {
    font-family: 'Roboto', sans-serif;
    font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", 'Roboto', Arial, "Lucida Grande", sans-serif;
    font-size: 18px;
    font-weight: 300;
}
.nav {
    text-align: right;
    padding-bottom: 20px;
}

.nav a {
    padding-right: 2em;
    color: black;
    font-size: 14px;
}

.title {
   width: 100%; 
   text-align: center; 
   border-bottom: 1px solid #000; 
   line-height: 0.1em;
   margin: 10px 0 40px; 
} 

.title span { 
    background:#fff; 
    padding:0 20px; 
}

/* Side notes for calling out things
-------------------------------------------------- */
 
/* Base styles (regardless of theme) */
.bs-callout {
  margin: 20px 0;
  padding: 15px 30px 15px 15px;
  border-left: 5px solid #eee;
}
.bs-callout h4 {
  margin-top: 0;
}
.bs-callout p:last-child {
  margin-bottom: 0;
}
.bs-callout code,
.bs-callout .highlight {
  background-color: #fff;
}
 
/* Themes for different contexts */
.bs-callout-danger {
  background-color: #fcf2f2;
  border-color: #dFb5b4;
}
.bs-callout-warning {
  background-color: #fefbed;
  border-color: #f1e7bc;
}
.bs-callout-info {
  background-color: #f0f7fd;
  border-color: #d0e3f0;
}
.bs-callout-danger h4 {
color: #B94A48;
}

.bs-callout-warning h4 {
color: #C09853;
}

.bs-callout-info h4 {
color: #3A87AD;
}
</style>

  
  
  <!-- Google Analytics -->
  <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-12615441-1', 'jeffknupp.com');
    ga('send', 'pageview');
  </script>
  <!-- Google Plus Author Link -->
  <link href="https://plus.google.com/102786441324515866525" rel="publisher" />

</head>

<body itemscope itemtype="http://schema.org/Blog">
<header id="header">
    <img src="/images/jeff.jpg" class="circular center-block">
    <h1>Jeff Knupp</h1>
    <h2>PYTHON PROGRAMMER</h2>
    <nav>
        <a href="/">BLOG</a>
        <span itemprop="author" itemscope itemtype="http://schema.org/Person"><a itemprop="url" href="/about-me/" itemprop="url">ABOUT</a></span>
        <a href="/blog/archives">ARCHIVES</a>
        <a href="/python-tutoring" title="python-tutoring">TUTORING</a>
        <a href="https://www.jeffknupp.com/writing-idiomatic-python-ebook/">BOOK</a>
    </nav>
</header>
<div class="container-fluid content">
    <h2 class="text-center"><span itemprop="name">Everything I know about Python...</span></h2>
    <div class="col-md-8 col-md-offset-2 col-xs-12">
        <div class="bs-callout bs-callout-danger">
            <h4 class="text-center">Learn to Write Pythonic Code!</h4>
            <p class="text-center"><a href="https://www.jeffknupp.com/writing-idiomatic-python-ebook/">
                Check out the book <em>Writing Idiomatic Python</em>!</a></p>
        </div>
        <div id="content">
            
<article itemscope itemtype="http://schema.org/BlogPosting">
<header>
    <h1 class="post-title"><a href="/blog/2012/10/04/writing-idiomatic-python"><span itemprop="headline">Writing Idiomatic Python</span></a><br/>
</header>

<div class="entry-content" itemprop="articleBody">
    
        <p>As someone who evangelizes Python at work, I read a lot of code written by
professional programmers new to Python. I've written a good amount of Python
code in my time, but I've certainly <em>read</em> far more. The single quickest way to
increase maintainability and decrease 'simple' bugs is to strive to write
<em>idiomatic</em> Python. Whereas some dynamic languages embrace the idea there being
no 'right' way to solve a problem, the Python community generally appreciates
the liberal use of 'Pythonic' solutions to problems. 'Pythonic' refers to the
principles laid out in 'The Zen of Python' (try typing 'import this' in an
interpreter...). One of those principles is </p>
<div class="codehilite"><pre><span class="err">&#39;</span><span class="n">There</span> <span class="n">should</span> <span class="n">be</span> <span class="n">one</span><span class="o">--</span> <span class="n">and</span> <span class="n">preferably</span> <span class="n">only</span> <span class="n">one</span> <span class="o">--</span><span class="n">obvious</span> <span class="n">way</span> <span class="n">to</span> <span class="k">do</span> <span class="n">it</span><span class="err">&#39;</span>
                                                <span class="o">-</span><span class="n">from</span> <span class="err">&#39;</span><span class="n">The</span> <span class="n">Zen</span> <span class="n">of</span> <span class="n">Python</span><span class="err">&#39;</span> <span class="n">by</span> <span class="n">Tim</span> <span class="n">Peters</span>
</pre></div>


<p>In that vein, I've begun compiling a list of Python idioms that programmers
coming from other languages may find helpful. I know there are a ton of things
not on here; it's merely a skeleton list that I'll add to over time. If you have
a specific idiom you think should be added, let me know in the comments and I'll
add it with attribution to the name you use in your comment. </p>
<!--more-->

<p>This list will temporarily live here as a blog post, but I have an interesting
idea for its final home. More on that next week.</p>
<h3>Update: The 'Writing Idiomatic Python' e-Book is here!</h3>
<p><a href="http://www.jeffknupp.com/writing-idiomatic-python-ebook/">See here</a> for details!</p>
<p><em>Update 10/05/12: Add context managers, PEP8, itertools, string join(), dict.get()
default values</em></p>
<h1>Idioms</h1>
<h2>Formatting</h2>
<p>Python has a language-defined standard set of formatting rules known as <a href="http://www.python.org/dev/peps/pep-0008/">PEP8</a>. If you're browsing commit messages on Python projects, you'll likely find them littered with references to PEP8 cleanup. The reason is simple: if we all agree on a common set of naming and formatting conventions, Python code as a whole becomes instantly more accessible to both novice and experienced developers.  PEP8 is perhaps the most explicit example of idioms within the Python community.  Read the PEP, install a PEP8 style-checking plugin for your editor (they all have one), and start writing your code in a way that other Python developers will appreciate. Listed below are a few examples.</p>
<table>
<thead>
<tr>
<th><strong>Identifier Type</strong></th>
<th><strong>Format</strong></th>
<th><strong>Example</strong></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Class</td>
<td>Camel case</td>
<td>class StringManipulator:</td>
<td></td>
</tr>
<tr>
<td>Variable</td>
<td>Words joined by underscore</td>
<td>words_joined_by_underscore = True</td>
<td></td>
</tr>
<tr>
<td>Function</td>
<td>Words joined by underscore</td>
<td>def are_words_joined_by_underscore(words):</td>
<td></td>
</tr>
<tr>
<td>'Internal' class members/functions</td>
<td>Prefixed by single underscore</td>
<td>def _update_statistics(self):</td>
<td></td>
</tr>
</tbody>
</table>
<p><em>Unless wildly unreasonable, abbreviations should not be used (acronyms are fine if in common use, like 'HTTP')</em></p>
<h2>Working With Data</h2>
<h4>Avoid using a temporary variable when swapping two variables</h4>
<p>There is no reason to swap using a temporary variable in Python. We can use
tuples to make our intention more clear.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">temp</span> <span class="o">=</span> <span class="n">foo</span>
<span class="n">foo</span> <span class="o">=</span> <span class="n">bar</span>
<span class="n">bar</span> <span class="o">=</span> <span class="n">temp</span>
</pre></div>


<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="n">bar</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">bar</span><span class="p">,</span> <span class="n">foo</span><span class="p">)</span>
</pre></div>


<h4>Use tuples to unpack data</h4>
<p>In Python, it is possible to 'unpack' data for multiple assignment. Those familiar with LISP may know this as 'desctructuring bind'.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">list_from_comma_separated_value_file</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;dog&#39;</span><span class="p">,</span> <span class="s">&#39;Fido&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span> 
<span class="n">animal</span> <span class="o">=</span> <span class="n">list_from_comma_separated_value_file</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">name</span> <span class="o">=</span> <span class="n">list_from_comma_separated_value_file</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">age</span> <span class="o">=</span> <span class="n">list_from_comma_separated_value_file</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</pre></div>


<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="n">list_from_comma_separated_value_file</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;dog&#39;</span><span class="p">,</span> <span class="s">&#39;Fido&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span> 
<span class="p">(</span><span class="n">animal</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span> <span class="o">=</span> <span class="n">list_from_comma_separated_value_file</span>
</pre></div>


<h4>Use ''.join when creating a single string for list elements</h4>
<p>It's faster, uses less memory, and you'll see it everywhere anyway. Note that
the two quotes represent the delimiter between list elements in the string we're
creating.<code>''</code>just means we mean to concatenate the elements with no characters
between them.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">result_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;True&#39;</span><span class="p">,</span> <span class="s">&#39;False&#39;</span><span class="p">,</span> <span class="s">&#39;File not found&#39;</span><span class="p">]</span>
<span class="n">result_string</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
<span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">result_list</span><span class="p">:</span>
    <span class="n">result_string</span> <span class="o">+=</span> <span class="n">result</span>
</pre></div>


<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="n">result_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;True&#39;</span><span class="p">,</span> <span class="s">&#39;False&#39;</span><span class="p">,</span> <span class="s">&#39;File not found&#39;</span><span class="p">]</span>
<span class="n">result_string</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">result_list</span><span class="p">)</span>
</pre></div>


<h4>Use the 'default' parameter of dict.get() to provide default values</h4>
<p>Often overlooked in the <code>get()</code> definition is the <code>default</code> parameter. Without
using <code>default</code> (or the <code>collections.defaultdict</code> class), your code will be
littered with confusing if statements. Remember, strive for clarity.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">log_severity</span> <span class="o">=</span> <span class="bp">None</span>
<span class="k">if</span> <span class="s">&#39;severity&#39;</span> <span class="ow">in</span> <span class="n">configuration</span><span class="p">:</span>
    <span class="n">log_severity</span> <span class="o">=</span> <span class="n">configuration</span><span class="p">[</span><span class="s">&#39;severity&#39;</span><span class="p">]</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">log_severity</span> <span class="o">=</span> <span class="n">log</span><span class="o">.</span><span class="n">Info</span>
</pre></div>


<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="n">log_severity</span> <span class="o">=</span> <span class="n">configuration</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;severity&#39;</span><span class="p">,</span> <span class="n">log</span><span class="o">.</span><span class="n">Info</span><span class="p">)</span>
</pre></div>


<h4>Use Context Managers to ensure resources are properly managed</h4>
<p>Similar to the RAII principle in languages like C++ and D, context managers
(objects meant to be used with the <code>with</code> statement) can make resource
management both safer and more explicit. The canonical example is file IO.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">file_handle</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">path_to_file</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">file_handle</span><span class="o">.</span><span class="n">readlines</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">some_function_that_throws_exceptions</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
        <span class="c"># do something</span>
<span class="n">file_handle</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>


<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path_to_file</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file_handle</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">file_handle</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">some_function_that_throws_exceptions</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
            <span class="c"># do something</span>
<span class="c"># No need to explicitly call &#39;close&#39;. Handled by the File context manager</span>
</pre></div>


<p>In the Harmful code above, what happens if <code>some_function_that_throws_exceptions</code> does, in fact, throw an exception? Since we haven't caught it in the code listed, it will propagate up the stack. We've hit an exit point in our code that might have been overlooked, and we now have no way to close the opened file. In addition to those in the standard libraries (for working with things like file IO, synchronization, managing mutable state) developers are free to create their own.</p>
<h4>Learn the contents of the itertools module</h4>
<p>If you frequent sites like StackOverflow, you may notice that the answer to questions of the form "Why doesn't Python have the following obviously useful library function?" almost always references the itertools module. The functional programming stalwarts that itertools provides should be seen as fundamental building blocks. What's more, the documentation for itertools <a href="http://docs.python.org/library/itertools.html#recipes">has a 'Recipes' section</a> that provides idiomatic implementations of common functional programming constructs, all created using the itertools module.  For some reason, a vanishingly small number of Python developers seem to be aware of the 'Recipes' section and, indeed, the itertools module in general (hidden gems in the Python documentation is actually a recurring theme). Part of writing idiomatic code is knowing when you're reinventing the wheel.</p>
<h2>Control Structures</h2>
<h3>If Statement</h3>
<h4>Avoid placing conditional branch on the same line as the colon</h4>
<p>Using indentation to indicate scope (like you already do everywhere
else in Python) makes it easy to determine what will be executed as part of a
conditional statement.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="k">if</span> <span class="n">name</span><span class="p">:</span> <span class="k">print</span> <span class="p">(</span><span class="n">name</span><span class="p">)</span>
<span class="k">print</span> <span class="n">address</span>
</pre></div>


<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="k">if</span> <span class="n">name</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">name</span><span class="p">)</span>
<span class="k">print</span> <span class="n">address</span>
</pre></div>


<h4>Avoid having multiple statements on a single line</h4>
<p>Though the language definition allows one to use a semi-colon to delineate
statements, doing so without reason makes one's code harder to read. Typically
violated with the previous rule.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="k">if</span> <span class="n">this_is_bad_code</span><span class="p">:</span> <span class="n">rewrite_code</span><span class="p">();</span> <span class="n">make_it_more_readable</span><span class="p">();</span>
</pre></div>


<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="k">if</span> <span class="n">this_is_bad_code</span><span class="p">:</span> 
    <span class="n">rewrite_code</span><span class="p">()</span>
    <span class="n">make_it_more_readable</span><span class="p">()</span>
</pre></div>


<h4>Avoid repeating variable name in compound if Statement</h4>
<p>When one wants to check against a number of values, repeatedly listing the
variable whose value is being checked is unnecessarily verbose. Using a temporary
collection makes the intention clear.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="s">&#39;Tom&#39;</span> <span class="ow">or</span> <span class="n">name</span> <span class="o">==</span> <span class="s">&#39;Dick&#39;</span> <span class="ow">or</span> <span class="n">name</span> <span class="o">==</span> <span class="s">&#39;Harry&#39;</span><span class="p">:</span>
    <span class="n">is_generic_name</span> <span class="o">=</span> <span class="bp">True</span>
</pre></div>


<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;Tom&#39;</span><span class="p">,</span> <span class="s">&#39;Dick&#39;</span><span class="p">,</span> <span class="s">&#39;Harry&#39;</span><span class="p">):</span>
    <span class="n">is_generic_name</span> <span class="o">=</span> <span class="bp">True</span>
</pre></div>


<h4>Use list comprehensions to create lists that are subsets of existing data</h4>
<p>List comprehensions, when used judiciously, increase clarity in code that
builds a list from existing data. Especially when data is both checked for some
condition <em>and</em> transformed in some way, list comprehensions make it clear
what's happening. There are also (usually) performance benefits to using list
comprehensions (or alternately, set comprehensions) due to optimizations in the
CPython interpreter.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">some_other_list</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">my_weird_list_of_numbers</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
<span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">some_other_list</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">element</span><span class="p">):</span>
        <span class="n">my_weird_list_of_numbers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">element</span><span class="o">+</span><span class="mi">5</span><span class="p">)</span>
</pre></div>


<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="n">some_other_list</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">my_weird_list_of_numbers</span> <span class="o">=</span> <span class="p">[</span><span class="n">element</span> <span class="o">+</span> <span class="mi">5</span> <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">some_other_list</span> <span class="k">if</span> <span class="n">is_prime</span><span class="p">(</span><span class="n">element</span><span class="p">)]</span>
</pre></div>


<h3>Loops</h3>
<h4>Use the <em>in</em> keyword to iterate over an Iterable</h4>
<p>Programmers coming languages lacking a for_each style construct are used to
iterating over a container by accessing elements via index. Python's <code>in</code>
keyword handles this gracefully.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Larry&#39;</span><span class="p">,</span> <span class="s">&#39;Moe&#39;</span><span class="p">,</span> <span class="s">&#39;Curly&#39;</span><span class="p">]</span>
<span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">my_list</span><span class="p">):</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">my_list</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
    <span class="n">index</span><span class="o">+=</span><span class="mi">1</span>
</pre></div>


<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Larry&#39;</span><span class="p">,</span> <span class="s">&#39;Moe&#39;</span><span class="p">,</span> <span class="s">&#39;Curly&#39;</span><span class="p">]</span>
<span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">element</span>
</pre></div>


<h4>Use the <em>enumerate</em> function in loops instead of creating an 'index' variable</h4>
<p>Programmers coming from other languages are used to explicitly declaring a
variable to track the index of a container in a loop. For example, in C++:</p>
<div class="codehilite"><pre><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">container</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Do stuff</span>
<span class="p">}</span>
</pre></div>


<p>In Python, the <code>enumerate</code> built-in function handles this role.</p>
<h6>Harmful</h6>
<div class="codehilite"><pre><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">my_container</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
    <span class="n">index</span><span class="o">+=</span><span class="mi">1</span>
</pre></div>


<h6>Idiomatic</h6>
<div class="codehilite"><pre><span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">element</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">my_container</span><span class="p">):</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</pre></div>
        
<small>Posted on <time datetime="2012-10-04 14:00:00" pubdate data-updated="true" itemprop="datePublished">Oct 04, 2012</time> by <span itemprop="author"> Jeff Knupp</span></small> </h1>
<div class="sharing">
    <div class="row">
    <p class="meta" style="padding-top: 20px;">
    <a class="basic-alignment left" href="/blog/2012/10/02/software-optimization-a-systematic-approach-part-two" title="Previous Post: Software Optimization: A Systematic Approach, Part Two">&laquo; Software Optimization: A Systematic Approach, Part Two</a>
    </p>
    
    <div id="mc_embed_signup" class="well">
<form action="http://jeffknupp.us6.list-manage1.com/subscribe/post?u=51d2d98cf34cbcc20db22e5fa&amp;id=f15bb537ad" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
  <h4>Like this article?</h4>
  <p>Why not sign up for <strong>Python Tutoring</strong>? Sessions can be held
  remotely using Google+/Skype or in-person if you're in the NYC area. <a href="mailto:jeff@jeffknupp.com">Email jeff@jeffknupp.com</a> if interested.</p>
  <p><strong>Sign up for the free jeffknupp.com email newsletter.</strong> Sent roughly once a month, it focuses on Python programming, scalable web development, and growing your freelance consultancy. And of course, you'll never be spammed, your privacy is protected, and you can opt out at any time.</p>
<div class="mc-field-group">
	<label for="mce-EMAIL">Email Address</label>
	<input type="email" value="" name="EMAIL" class="required email" id="mce-EMAIL">
</div>
	<div id="mce-responses" class="clear">
		<div class="response" id="mce-error-response" style="display:none"></div>
		<div class="response" id="mce-success-response" style="display:none"></div>
	</div>	<div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
</form>
</div>
    
  </footer>
</article>
</div>
<section>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Leaderboard -->
<ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-2922325862575361"
     data-ad-slot="6191597138"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
        <div id="disqus_thread"></div>
<script type="text/javascript">
            var disqus_shortname = 'hackersgonnahack';

            (function() {
                var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
 
  </section>
  </div>
    
</div>
</article>

        </div>
        <div id="footer" class="text-center">
        
            <footer role="contentinfo">
                <p>Copyright &copy; 2014 - Jeff Knupp- <span class="credit">Powered by <a href="http://www.github.com/jeffknupp/blug">Blug</a></span> </p>
            </footer>
         
    </div>

<a title="Web Analytics" href="http://clicky.com/66535137"><img alt="Web Analytics" src="//static.getclicky.com/media/links/badge.gif" border="0" /></a>
<script type="text/javascript">
var clicky_site_ids = clicky_site_ids || [];
clicky_site_ids.push(66535137);
(function() {
  var s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  s.src = '//static.getclicky.com/js';
  ( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild( s );
})();
</script>
<noscript><p><img alt="Clicky" width="1" height="1" src="//in.getclicky.com/66535137ns.gif" /></p></noscript> 
</div>
</html>