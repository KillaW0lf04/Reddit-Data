<html lang="en">
<head>

	<!-- STYLES. -->
	<link rel="stylesheet" type="text/css" href="/theme/css/style.css">
	<link rel="stylesheet" href="/theme/css/sortable-theme-minimal.css" />
	<link rel="stylesheet" type="text/css" href="/theme/css/bigfoot-default.css">

	<!-- SCRIPTS. -->
	<script src="/theme/js/jquery.js" type="text/javascript"></script>
	<script src="/theme/js/main.js" type="text/javascript"></script>
	<script type="text/javascript" src="/theme/js/bigfoot.js"></script>

	<!-- FAVICON. -->
	<link rel="icon" href="/static/favicon.ico" type="image/x-icon" />

	<!-- FONTS. -->
	<link href='http://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
	<link href='http://fonts.googleapis.com/css?family=Inconsolata:400,700' rel='stylesheet' type='text/css'>

	<!-- RSS. -->
	<link href="http://jmduke.com/" type="application/atom+xml" rel="alternate" title="Justin Duke ATOM Feed" />

	<!-- SEARCH. -->
		<link rel="stylesheet" type="text/css" href="/theme/css/autocomplete.css"/>
		<link rel="stylesheet" type="text/css" href="/theme/css/style.css"/>

		<script src="/theme/js/jquery.swiftype.autocomplete.js"></script>
		<script src="/theme/js/jquery.ba-hashchange.min.js"></script>
		<script src="/theme/js/jquery.swiftype.search.js"></script>

	<!-- META TAGS. -->
	<!-- for Google -->
	<meta name="description" content="" />
	<meta name="keywords" content="Data,Music,Python," />
	<meta name="author" content="Justin Duke" />

	<!-- for Facebook -->          
	<meta property="og:title" content="Analysing Pitchfork using Pandas" />
	<meta property="og:type" content="article" />
	<meta property="og:url" content="http://jmduke.com/posts/analysing-pitchfork-using-pandas/" />
	<meta property="og:description" content="" />

	<!-- for Twitter -->          
	<meta name="twitter:card" content="summary" />
	<meta name="twitter:title" content="Justin Duke" />
	<meta name="twitter:description" content="" />
	<meta name="twitter:creator" content="@justinmduke">

	<!-- for SubList -->
	<script>
	  (function(s,u,b,hh,uu,bb){
	    uu=document.createElement(u);
	    uu.setAttribute('data-sublist',hh);
	    uu.setAttribute('data-panel',true);
	    uu.async=1;uu.src=b;
	    bb=s.getElementsByTagName(u)[0];
	    bb.parentNode.insertBefore(uu,bb);
	  })(document, 'script',
	    'https://assets.sublist.io/v1/sublist.js',
	    '7a4e8b93-1820-4f0e-a98d-1030d4679c19');
	</script>


	<title>	Analysing Pitchfork using Pandas
</title>
	<meta charset="utf-8" />
	
</head>

<body>
	<section id="sidebar">
		<div class="user_meta">
			<h1 id="user"><a href="/" class="">Justin Duke</a></h1>
			<h2></h2>
			<ul>
					<li><a href="/tag/data">Data</a></li>
					<li><a href="/tag/tutorial">Tutorials</a></li>
					<li><a href="/tag/essay">Essays</a></li>
					<li><a href="&nbsp;">&nbsp;</a></li>
					<li><a href="/feeds/all.atom.xml">RSS</a></li>
						<li><a href="http://jmduke.com/"></a></li>
						<li><a href="http://jmduke.com/about/">About</a></li>
						<li><a href="http://jmduke.com/resume/">Resume</a></li>
			</ul><ul class='social'>
					<li><a href="https://github.com/jmduke">GitHub</a></li>
					<li><a href="http://www.twitter.com/justinmduke">Twitter</a></li>
					<li><a href="http://www.linkedin.com/pub/justin-duke/71/8a1/443">LinkedIn</a></li>
			</ul>

				<form>
				  <input type="text" id="st-search-input" class="st-search-input" />
				</form>
				<script type="text/javascript">
				var Swiftype = window.Swiftype || {};
				  (function() {
				    Swiftype.key = '62zsey8qopNXHSqAJSdX';

				    /** DO NOT EDIT BELOW THIS LINE **/
				    var script = document.createElement('script'); script.type = 'text/javascript'; script.async = true;
				    script.src = "//s.swiftypecdn.com/embed.js";
				    var entry = document.getElementsByTagName('script')[0];
				    entry.parentNode.insertBefore(script, entry);
				  }());
				</script>
		</div>
	</section>

	<section id="posts">
	<div class='internalcontent'>
	<header>
		<h5>Tue 24 December 2013</h5>
	</header>
	<article>
		
		<script src="/theme/js/sortable.min.js"></script>
		

		<h1 id="title">
			<a href="http://jmduke.com/posts/analysing-pitchfork-using-pandas/" rel="bookmark"
				title="Permalink to Analysing Pitchfork using Pandas">Analysing Pitchfork using Pandas</a>
		</h1>
		<div id="article_meta">
				Tags: 
					<a href="http://jmduke.com/tag/data/">Data</a>
						Â·
					<a href="http://jmduke.com/tag/music/">Music</a>
						Â·
					<a href="http://jmduke.com/tag/python/">Python</a>
		</div>

		<p>I spend a likely-unhealthy amount of time on <a href="http://www.pitchfork.com">Pitchfork</a>, its where I get my music news and I can usually rely on their reviews to decide whether or not an album is worth a listen.  Still, they often come under fire as being â amongst other things â self-serious and overly critical: allegations have been made that their albums are graded on a too-harsh scale, with their reviews being motivated by commercial reasons as much as musical ones.</p>

<p>So, naturally, I downloaded <a href='https://classic.scraperwiki.com/scrapers/pitchfork_review_data/'>all of them.</a></p>

<p><hr />
<p>I decided to load the thing into Python (using the wonderful <a href="http://pandas.pydata.org/">pandas</a> library) and poke around.</p>
<pre><code>import pandas as pd
DATE_INDEX = -2
review_data = pd.read_csv('./pitchfork_review_data.csvâ, parse_dates=[DATE_INDEX])
</code></pre>
<p>The immediate curiosity for me was that of score distribution: Pitchfork grades on a 0.0 â 10.0 scale, so one would expect that the average is 5.0, right?</p>
<p>Well, letâs take a look:</p>
<pre><code>review_data[âscoreâ].describe()
</code></pre>
<table>
<thead>
<tr>
<th></th>
<th>score</th>
</tr>
</thead>
<tbody>
<tr>
<td>count</td>
<td>14919.000000</td>
</tr>
<tr>
<td>mean</td>
<td>6.969562</td>
</tr>
<tr>
<td>std</td>
<td>1.356199</td>
</tr>
<tr>
<td>min</td>
<td>0.000000</td>
</tr>
<tr>
<td>25%</td>
<td>6.400000</td>
</tr>
<tr>
<td>50%</td>
<td>7.200000</td>
</tr>
<tr>
<td>75%</td>
<td>7.800000</td>
</tr>
<tr>
<td>max</td>
<td>10.000000</td>
</tr>
</tbody>
</table>
<p><strong>Out of all 14900 reviews, the average is 6.97 â talk about grading on a curve.</strong>  Additionally, half of all reviews fall between a 6.4 and a 7.8 â a pretty significant window considering the general sense of outrage given to reviews that throw out scores less than a 5.0 and the general âking makingâ power of a Best New Music accolade (generally given to artists that score an 8.2 or higher).</p>
<p>Actually, speaking of Best New Music, letâs take a look at that.</p>
<pre><code>review_data[review_data.accolade == ' Best New Music '].describe()
</code></pre>
<table>
<thead>
<tr>
<th></th>
<th>score</th>
</tr>
</thead>
<tbody>
<tr>
<td>count</td>
<td>500.000000</td>
</tr>
<tr>
<td>mean</td>
<td>8.619400</td>
</tr>
<tr>
<td>std</td>
<td>0.328602</td>
</tr>
<tr>
<td>min</td>
<td>7.800000</td>
</tr>
<tr>
<td>25%</td>
<td>8.400000</td>
</tr>
<tr>
<td>50%</td>
<td>8.500000</td>
</tr>
<tr>
<td>75%</td>
<td>8.800000</td>
</tr>
<tr>
<td>max</td>
<td>10.000000</td>
</tr>
</tbody>
</table>
<pre><code>''' head() will give us the five lowest scoring reviews '''
review_data[review_data.accolade == ' Best New Music '].sort('score').head()  <br />
''' tail() will give us the five highest '''
review_data[review_data.accolade == ' Best New Music '].sort('scoreâ).tail()
</code></pre>
<p>Looks like the lowest score given to a BNM is 7.8 (given to <a href="http://pitchfork.com/reviews/albums/1766-me-and-giuliani-down-by-the-school-yard-a-true-story-ep/">!!!âs Me and Giuliani Down by the Schoolyard</a>, a groan-inducing name if Iâve heard of one.  Conversely, the three highest scores handed down to new music are 9.6, 9.7, and a controversial 10.0 to <em>The Fiery Furnaces</em>, <em>Arcade Fire</em>, and <em>Kanye West</em> respectively.</p>
<p>Back to the overall score distribution, though, percentile data only gives us one perspective at the data.  Graphing the rounded  scores yields some interesting results:</p>
<pre><code>import matplotlib as plt
import matplotlib.pyplot as pyplt
pyplt.hist(review_data['score'])
pyplt.show()
</code></pre>
<p><img alt="" src="http://i.imgur.com/uahiyEM.png" /></p>
<p>As expected, thereâs a clustering of reviews in the 6-8 range, with a long tail approaching 0 and a steep drop off to 10.  But if we increase the granularity:</p>
<pre><code>pyplt.hist(review_data['scoreâ], bins=20)
pyplt.show()
</code></pre>
<p><img alt="" src="http://i.imgur.com/Gd8IYC3.png" /></p>
<pre><code>pyplt.hist(review_data['scoreâ], bins=50)
pyplt.show()
</code></pre>
<p><img alt="" src="http://i.imgur.com/C6wnpJW.png" /></p>
<p>We get a much more interesting perspective.  In particular, Pitchfork loves their 7.5s and 8.2s.  Also revealing is the relative frequency of perfect scores: mainly reserved for Beatles and jazz reissues, one can imagine the backlash if a reviewer deems <em>Kind of Blue</em> less than perfect.</p>
<p>--â</p>
<p>Another charge often levied at <em>Pitchfork</em> is that their standards have diminished as theyâve gained a larger viewership.    We can try simply plotting the reviews against their publish date, but itâs not much help:</p>
<pre><code>daily_data = review_data.groupby("publish_date")['score'].mean()
daily_data.plot()
pyplt.show()
</code></pre>
<p><img alt="" src="http://i.imgur.com/SsVUbka.png" /></p>
<p>Thereâs too much noise to get a good impression of any overall trends: while it looks like things tend to oscillate around the 7.0 mark, we can try plotting the mean review score of each month to get a clearer picture.</p>
<pre><code>monthly_data = daily_data.resample('M', how='mean')
monthly_data.plot()
pyplt.show()
</code></pre>
<p><img alt="" src="http://i.imgur.com/Ra3kjXg.png" /></p>
<p>Quite a bit clearer: we can attribute the early flux to the fact that Pitchforkâs first few years, they were only publishing one or two reviews per week as opposed to five a day.  It looks like  averages were relatively steady, with a slight dip from 2007 â 2010, but we can run a regression to make sure: </p>
<pre><code>monthly_data.plot()
monthly_frame = monthly_data.reset_index()
total_points = len(monthly_data)
model = pd.ols(y=monthly_frame[0], x=pd.DataFrame(range(0, total_points)), intercept=True)
</code></pre>
<p>Wow: with a RMSE of .6757 (not great, but not awful), we get a line with an intercept of <strong>6.977</strong> and slope of <strong>.000037</strong> â as in, barely any change at all.<br />
</p>
<p>--â</p>
<p>Lastly, letâs take a look at the reviewers themselves: itâs not exactly out of the realm of possibility that certain critics are sticklers and others are more generous (I mean, anyone who gave <em>Merriweather Post Pavilion</em> a 9.6 canât have the highest standards, right?)</p>
<pre><code>reviewer_data = review_data.groupby('reviewer')['score']
aggregated_reviewers = reviewer_data.mean()
aggregated_reviewers.sort(âmeanâ)
</code></pre>
<p>Skipping over group reviews, the strongest authors at either extreme:</p>
<table>
<thead>
<tr>
<th>reviewer</th>
<th>average score</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bob O. McMillan</td>
<td>3.5</td>
</tr>
<tr>
<td><a href="http://en.wikipedia.org/wiki/Alan_Smithee">Alan Smithee</a></td>
<td>4.0</td>
</tr>
<tr>
<td>Adam Ohler</td>
<td>4.2</td>
</tr>
<tr>
<td>â¦</td>
<td>â¦</td>
</tr>
<tr>
<td>Carl Wilson</td>
<td>8.5</td>
</tr>
<tr>
<td>Philip Welsh</td>
<td>8.6</td>
</tr>
<tr>
<td>Drew Daniel</td>
<td>8.6</td>
</tr>
</tbody>
</table>
<hr />
<p>Thatâs all Iâve got for now â I hope you found it interesting, either from a programming perspective or a musical one!  Feel free to download the <a href="https://classic.scraperwiki.com/scrapers/pitchfork_review_data/">csv</a> and play around with it yourself â if there are any questions youâd like me to answer (or suggestions for further analysis), please let me know via email or comment.</p></p>

	<div>

	    <div class='tweet'>
	        <b>You should <a href="https://twitter.com/justinmduke" class="twitter-follow" data-show-count="false" data-lang="en" data-size="large" target="_blank">follow me on Twitter</a>.</b>

	        <br /><br />

	        <a href="https://twitter.com/share?count=vertical" class="twitter-share-button" data-lang="en">Tweet</a>
	        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>

	        <!-- Place this tag where you want the +1 button to render. -->
	        <div class="g-plusone" data-size="tall"></div>

	        <!-- Place this tag after the last +1 button tag. -->
	        <script type="text/javascript">
	        (function() {
	        var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
	        po.src = 'https://apis.google.com/js/platform.js';
	        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
	        })();
	        </script>
	    </div>

	</div>



		<div id="comments">
			<h3>Comments</h3>
			<div id="disqus_thread"></div>
			<script type="text/javascript">
				var disqus_identifier = "posts/analysing-pitchfork-using-pandas/";
				(function() {
					var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
					dsq.src = 'http://jmduke.disqus.com/embed.js';
					(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
				})();

			    $.bigfoot();    
			</script>
			<noscript>Please enable JavaScript to view <a href="http://disqus.com/?ref_noscript">comments</a>.</noscript>
		</div>
	</article>

	<footer>
		<a href="http://jmduke.com/" class="button_accent">&larr;&nbsp;&nbsp;&nbsp;Back to blog</a>
	</footer>

	</div>
	</section>

<script type="text/javascript">
	var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
	document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
	</script>
	<script type="text/javascript">
		try {
			var pageTracker = _gat._getTracker("UA-46749927-1");
			pageTracker._trackPageview();
		} catch(err) {}</script>

    <meta name="google-site-verification" content="_cGC3XAaplZVpDh4XHxBvn4yAagl2tUTKPsAD5n1nas" />
</body>
</html>