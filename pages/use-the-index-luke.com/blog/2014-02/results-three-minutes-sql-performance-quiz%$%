<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"   prefix="og: http://ogp.me/ns#">
<head>
<title>Results of the SQL Performance Quiz: 60% fail</title>
<meta property="og:title" content="Results of the SQL Performance Quiz: 60% fail" />
<meta property="og:description" content="No wonder people believe SQL is slow, if more than 60% fail to apply basic indexing techniques." />
<meta property="og:image" content="http://Use-The-Index-Luke.com/img/3minresult.og.png" />
<meta property="og:url" content="http://Use-The-Index-Luke.com/blog/2014-02/results-three-minutes-sql-performance-quiz" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="description" content="No wonder people believe SQL is slow, if more than 60% fail to apply basic indexing techniques." />
<meta name="keywords" content="sql,database,index,ProSQL" />
<link rel="canonical" href="http://Use-The-Index-Luke.com/blog/2014-02/results-three-minutes-sql-performance-quiz" />
<meta name="revisit-after" content="1 day" />
<link rel="alternate" type="application/rss+xml" title="RSS - Use The Index, Luke blog" href="/blog/feed" /><link type="text/css" rel="stylesheet" media="all" href="/files/css/css_f2bc0d181dbc50e4c17aa2819c2b6784.css" />
<!--[if IE]>
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/util/css/ie.css?w" />
<![endif]-->
<!--[if lte IE 6]>
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/util/css/ie6.css?w" />
<![endif]-->
<meta name="robots" content="follow, all" /> 
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-31584582-1']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<meta name="twitter:site" content="@SQLPerfTips">
<meta name="twitter:creator" content="@MarkusWinand">
</head>
<body class="page not-front not-logged-in node-type-blog i18n-en page-blog-2014-02-results-three-minutes-sql-performance-quiz section-blog two-sidebars dbtype_default langtype_default">
<div id="page-wrapper"><div id="page">
<div id="header"><div class="section clearfix">
<div id="name-and-slogan">
<div id="site-name"><strong>
<a href="/" title="Home" rel="home"><span>Use The Index, Luke!</span></a>
</strong></div>
</div> 
<div class="region region-header">
  <div id="block-menu-primary-links" class="block block-menu first region-odd even region-count-1 count-10 ">
<div class="content">
<ul class="menu"><li class="leaf first"><a href="/blog/2013-07/about-query-optimizer-hints" title="">About Optimizer Hints</a></li>
<li class="leaf"><a href="/services/sql-performance-training/August-2013-EU-Oracle-SQL-Server" title="">August 12–22: Online Training (EU shift)</a></li>
<li class="leaf"><a href="/blog/2014-01/unreasonable-defaults-primary-key-clustering-key">Clustered Indexes Dirty Secret</a></li>
<li class="leaf"><a href="/newsletter/2014-05/big-gaps-in-understanding-sql-indexing">Didn’t you know?</a></li>
<li class="leaf"><a href="/services/sql-performance-training/enrollment">Enrollment</a></li>
<li class="leaf"><a href="/blog/2013-02/fosdem-impressions" title="">FOSDEM Impressions</a></li>
<li class="leaf"><a href="/services/sql-performance-training/July-2013-EU-PostgreSQL-MySQL" title="">June 8–18: Online Training (US shift)</a></li>
<li class="leaf"><a href="/blog/2013-10-01/mysql-is-to-sql-like-mongodb-to-nosql" title="">MySQL is to SQL like ??? to NoSQL</a></li>
<li class="leaf"><a href="/non-monetary-micro-sponsoring" title="">Non-monetary micro sponsoring</a></li>
<li class="leaf"><a href="/services/sql-performance-training/November-2013-PostgreSQL-MySQL-FrankfurtMain" title="">November 11-12 in Frankfurt am Main</a></li>
<li class="leaf"><a href="/services/sql-performance-training-online">Online-Training in July and August</a></li>
<li class="leaf"><a href="/services/sql-performance-training/October-2013-Oracle-PostgreSQL-FrankfurtMain">Oracle + PostgreSQL</a></li>
<li class="leaf"><a href="/leistungen/sql-performance-kurs/April-2014-oracle-performance-tuning-bootcamp-wien" title="">Oracle Bootcamp</a></li>
<li class="leaf"><a href="/book/pdf-registration">PDF Registration</a></li>
<li class="leaf"><a href="/blog/2013-03/Party-Time" title="">Party time</a></li>
<li class="leaf"><a href="/blog/2013-02/better-performance-with-postgresql-conference" title="">PostgreSQL Performance Event</a></li>
<li class="leaf active-trail"><a href="/blog/2014-02/results-three-minutes-sql-performance-quiz" class="active">Quiz Results</a></li>
<li class="leaf"><a href="/leistungen/sql-performance-kurs/Juni-2013-Stuttgart" title="">SQL Server Performance Kurs in Stuttgart</a></li>
<li class="leaf"><a href="/services/sql-performance-training/June-2013-London">SQL Server performance training in London</a></li>
<li class="leaf"><a href="/blog/2014-05/what-i-learned-about-sqlite-at-a-postgresql-conference" title="">SQLite learnings from PgCon</a></li>
<li class="leaf"><a href="/book/shipping-terms">Shipping Terms</a></li>
<li class="leaf"><a href="/newsletter/2014-02/onsite-training-savings">Springtime for SQL</a></li>
<li class="leaf"><a href="/blog/2013-04/the-two-top-performance-problems-caused-by-ORM-tools" title="">The two top performance problems caused by ORM tools</a></li>
<li class="leaf"><a href="/blog/2013-02/top-tweets" title="">Top Tweets January 2013</a></li>
<li class="leaf"><a href="/services/sql-performance-training/survey">Training Survey</a></li>
<li class="leaf"><a href="/blog/2013-05/training-and-conference-dates" title="">Training and Conference Dates</a></li>
<li class="leaf"><a href="http://use-the-index-luke.com/" class="book" title="SQL Indexing Tutorial">Use The Index, Luke</a></li>
<li class="leaf"><a href="http://Ask.Use-The-Index-Luke.com/" class="ask" title="Ask the community for help">Ask</a></li>
<li class="collapsed last"><a href="http://winand.at/home" class="consulting" title="Tuning, Training and Coaching by Markus Winand">Consulting</a></li>
</ul></div>
</div> 
<div id="block-block-3" class="block block-block region-even odd region-count-2 count-11 ">
<div class="content">
<a href="/" title="slogan">A Guide to Database Performance by Markus Winand</a></div>
</div> 
<div id="block-lang_dropdown-0" class="block block-lang_dropdown last region-odd even region-count-3 count-12 ">
<div class="content">
<form action="/blog/2014-02/results-three-minutes-sql-performance-quiz"  accept-charset="UTF-8" method="post" id="lang-dropdown-form">
<div><div class="form-item" id="edit-lang-dropdown-select-wrapper">
 <select name="lang_dropdown_select" style="width:109px" class="form-select" id="edit-lang-dropdown-select" ><option value="http://Use-The-Index-Luke.com/blog/2014-02/results-three-minutes-sql-performance-quiz" selected="selected">English</option><option value="http://Use-The-Index-Luke.com/de/blog/2014-02/ergebnisse-des-3-minuten-sql-performance-quizes">Deutsch</option></select>
</div>
<noscript><div>
<input type="submit" name="op" id="edit-submit" value="Go"  class="form-submit" />

</div></noscript><input type="hidden" name="form_build_id" id="form-LFF9L4-w8Y28r6BzYj_J034EHXRV3MtKBFkyoJSf8u8" value="form-LFF9L4-w8Y28r6BzYj_J034EHXRV3MtKBFkyoJSf8u8"  />
<input type="hidden" name="form_id" id="edit-lang-dropdown-form" value="lang_dropdown_form"  />

</div></form>
</div>
</div> 
</div><!-- /.region -->
</div></div> 
<div id="main-wrapper"><div id="main" class="clearfix">
<div id="content" class="column"><div class="section">
<div id="breadcrumb-wrapper">
<div class="breadcrumb"><a href="/blog">Blogs</a> › <a href="/blog/">Use The Index, Luke blog</a> › </div></div>
<div id="drupal-messages"></div>
<h1 class="title">
<span class="submitted" title="Updated: 2014-02-20">2014-02-20</span>Results of the SQL Performance Quiz: 60% fail</h1>
<hr/>
<div id="content-area">
<div id="node-924" class="node node-type-blog build-mode-full clearfix">
<!--
<div class="meta">
<div class="terms terms-inline"><ul class="links inline"><li class="taxonomy_term_9 first"><a href="/taxonomy/term/9" rel="tag" title="large ads on both sides">large</a></li>
<li class="taxonomy_term_1 last"><a href="/taxonomy/term/1" rel="tag" title="">Use The Index, Luke</a></li>
</ul></div>
</div>
-->
<div class="content">
<div class="book-page-wrapper"><p>In 2011, I’ve launched the “<a class="ulink" href="http://use-the-index-luke.com/3-minute-test" >The 3-Minute Test: What do you know about SQL performance.</a>” It consists of five questions that follow a simple pattern: each question shows a query/index pair and asks if it demonstrates proper indexing or not. Till today, this test has become one of the most popular features on <a class="ulink" href="http://use-the-index-luke.com/" >Use The Index, Luke</a> and has been completed more than 28,000 times.</p>
<div class="note-wrapper"><div class="note"  title="Note"><h3 class="title">Note</h3><p>Just in case you got curious, please be aware that this article is a spoiler. You might want to <a class="ulink" href="http://use-the-index-luke.com/3-minute-test" >do the quiz yourself</a> before continuing.</p></div></div>
<p>Although the quiz was created for educational purposes, I was wondering if I could get some interesting figures out of these 28,000 results. And I think I could. However, there are several things to keep in mind when looking at these figures. First, the quiz uses the surprise factor to catch attention. That means, three questions show cases that look fine, but aren’t. One question does it the other way around and shows an example that might look dangerous, but isn’t. There is only one question where the correct answer is in line with the first impression. Another effect that might affect the significance of the results is that there was no representative selection of participants. Everybody can take the quiz. You can even do it multiple times and will probably get a better result the second time. Just keep in mind that the quiz was never intended to be used for scientific research upon the indexing knowledge in the field. Nevertheless, I think that the size of the dataset is still good enough to get an impression.</p>
<p>Below I’ll show two different statistics for each question. First, the average rate at which this question was correctly answered. Second, how this figure varies for users of MySQL, Oracle, PostgreSQL and SQL Server databases. In other word, it says if e.g. MySQL users are more knowledgeable about indexing as PostgreSQL users. Spoiler: It’s the other way around. The only reason I’m in the lucky position to have this data is that the test sometimes uses vendor specific syntax. For example, what is <span class="command"><strong>LIMIT</strong></span> in MySQL and PostgreSQL is <span class="command"><strong>TOP</strong></span> in SQL Server. Therefore, the participants have to select a database at the beginning so that the questions are shown in the native syntax of that product.</p>
<h2 class="title" id="idp38650656">Question 1: Functions in the WHERE Clause</h2>
<div class="blockquote"><blockquote class="blockquote"><p>Is the following SQL good or bad practice from a performance perspective?</p><p>Searching for all rows of the year 2012:</p><pre class="programlisting">CREATE INDEX tbl_idx ON tbl (date_column);

SELECT text, date_column
  FROM tbl
 WHERE TO_CHAR(date_column, &#39;YYYY&#39;) = &#39;2012&#39;;</pre></blockquote></div>
<p>This is an example where the code uses functions specific to the Oracle and PostgreSQL databases. For MySQL, the question uses <code class="code">YEAR(date_column)</code> and for SQL Server <code class="code">datepart(yyyy, date_column)</code>. Of course, I could have used <code class="code">EXTRACT(YEAR date_column)</code>, but I thought it is better to use the most common syntax.</p>
<p>The participants have these options:</p>
<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p class="short">Good practice — There is no major improvement possible.</p></li><li class="listitem"><p>Bad practice — There is a major improvement possible.</p></li></ul></div>
<p>The correct answer is “bad practice” because the index on <code class="code">date_column</code> cannot be used when searching on something derived from <code class="code">date_column</code>. If you don’t believe that, please have a look at the <a class="ulink" href="http://use-the-index-luke.com/sql/example-schema/postgresql/3-minute-test#quiz-pg-q1" >proof scripts</a> or the <a class="ulink" href="http://use-the-index-luke.com/s/rMnmivH7" >explanations shown at the end of the test</a>. They also contain links to the <a class="ulink" href="http://use-the-index-luke.com/" >Use The Index, Luke</a> pages explaining it in more detail.</p>
<p>However, if you didn’t know how functions effectively “disable” indexes, you are not alone. Only about two-thirds gave the correct answer. And as for every multiple choice test, there is a certain probably to pick the correct answer by chance. In this cases it’s a 50/50 chance — by no means negligible. I’ve marked this “guessing score” in the figure to emphasize that.</p>
<div class="informalfigure"><img height="67" src="http://use-the-index-luke.com//img/q1_total_20140212.png" style="padding: 1em 0" width="510" /></div>
<p>This is one of the most common problems I see in my everyday work. The same problem can also hit you with <code class="code">VARCHAR</code> fields when using <code class="code">UPPER</code>, <code class="code">TRIM</code> or the like. Please keep in mind: whenever you are applying functions on columns in the <span class="command"><strong>where</strong></span> clause, an index on the column itself is no longer useful for this query.</p>
<p>Although this result is quite disappointing — I mean it’s just 17% better than guessing — it is no surprise to me. What is a surprise for me is how the result differs amongst the users of different databases.</p>
<div class="informalfigure"><img height="159" src="http://use-the-index-luke.com//img/q1_bydb_20140212.png" style="padding: 1em 0" width="300" /></div>
<p>As a matter of fact, MySQL users just score 55% — almost as low as the “guessing score”. PostgreSQL users, on the other hand, get a score of 83%.</p>
<p>An effect that might explain this result is that MySQL doesn’t support <a class="ulink" href="http://use-the-index-luke.com/sql/where-clause/functions/case-insensitive-search" >function-based indexes</a> while Oracle and PostgreSQL do. Function-based indexes allow you to index expressions like <code class="code">TO_CHAR(date_column, &#39;YYYY&#39;)</code>. Although it is not the <a class="ulink" href="http://use-the-index-luke.com/sql/where-clause/obfuscation/dates" >recommended solution</a> for this case, the pure existence of this feature might make users of the Oracle and PostgreSQL database more aware of this problem. SQL Server offers a similar feature: although it cannot index expressions directly, you can create a so-called computed column on expressions, which in turn can be indexed.</p>
<p>Although support for function-based indexes might explain why MySQL users underperformed, it is still no excuse. The shown query/index pair is bad — no matter whether the database supports function-based indexes or not. And the major improvement is also possible without function-based indexes:</p>
<pre class="programlisting">SELECT text, date_column
  FROM tbl
 WHERE date_column &gt;= TO_DATE(&#39;2012-01-01&#39;, &#39;YYYY-MM-DD&#39;)
   AND date_column &lt;  TO_DATE(&#39;2013-01-01&#39;, &#39;YYYY-MM-DD&#39;);</pre>
<p>The index doesn’t need to be changed. This solution is very flexible because it supports queries for different ranges too — e.g. by week or month. This is the recommended solution.</p>
<p>As a curious guy, I’d love to know how many of the people who correctly answered this question were thinking of the sub-optimal solution to use a function-based index. I’d rate this solution half-correct at best.</p>
<h2 class="title" id="idp38678400">Question 2: Indexed Top-N Queries</h2>
<div class="blockquote"><blockquote class="blockquote"><p>Is the following SQL good or bad practice from a performance perspective?</p><p>To find the most recent row:</p><pre class="programlisting">CREATE INDEX tbl_idx ON tbl (a, date_column);

SELECT id, a, date_column
  FROM tbl
 WHERE a = ? 
 ORDER BY date_column DESC
 LIMIT 1;</pre></blockquote></div>
<p>Note that the question mark is a placeholder, because I always encourage developers to use <a class="ulink" href="http://use-the-index-luke.com/sql/where-clause/bind-parameters" >bind parameters</a>.</p>
<p>As participant, you have these two options again:</p>
<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p class="short">Good practice — There is no major improvement possible.</p></li><li class="listitem"><p>Bad practice — There is a major improvement possible.</p></li></ul></div>
<p>This is the question that is supposed to look dangerous, but isn’t. Generally, it seems like people believe <span class="command"><strong>order by</strong></span> must always sort the data. This index, however, eliminates the need to sort the data entirely so that the query is basically as fast as a unique index lookup. Please find a detailed explanation of this trick <a class="ulink" href="http://use-the-index-luke.com/sql/partial-results/top-n-queries" >here</a>.</p>
<p>The result is very close to the “guessing score” which I interpret as “people don’t have a clue about it.”</p>
<div class="informalfigure"><img height="67" src="http://use-the-index-luke.com//img/q2_total_20140212.png" style="padding: 1em 0" width="510" /></div>
<p>This result is particularly sad because I’ve seen people building caching tables, regularly refilled by a cron jobs, to avoid queries like this. Interestingly, the cron job tends to cause performance problems because it is running in rather short intervals to make sure the cache table has fresh data. However, the right index is often the better option in the first place.</p>
<div class="informalfigure"><img height="159" src="http://use-the-index-luke.com//img/q2_bydb_20140212.png" style="padding: 1em 0" width="300" /></div>
<p>Here I have to mention that the Oracle database needs the most special syntax for this trick. Up till version 12c released in 2013, the Oracle database did not offer a handy shortcut such as <code class="code">LIMIT</code> or <code class="code">TOP</code>. Instead, you have to use the <code class="code">ROWNUM</code> pseudo-column like this:</p>
<pre class="programlisting">SELECT *
  FROM (
        SELECT id, date_column
          FROM tbl
         WHERE a = :a
         ORDER BY date_column DESC
       )
 WHERE rownum &lt;= 1;</pre>
<p>The extra complexity of this query might have pushed Oracle users more heavily towards the wrong answer — actually below guessing score!</p>
<p>Another argument I’m getting in response to this question is that including the <code class="code">ID</code> column in the index would allow an <a class="ulink" href="http://use-the-index-luke.com/sql/clustering/index-only-scan-covering-index" >index-only scan</a>. Although this is correct, I don’t consider not doing so a “bad practice” because the query touches only one row anyway. An index-only scan could just avoid a single table access. Obviously there are cases were you need that improvement, but in the general case I’d consider it a premature optimization. But that’s just my opinion. However, following this argument might give us an idea why PostgreSQL users got the best score (again): PostgreSQL did not have index-only scans until version 9.2, which was released in September 2012. As a result, PostgreSQL users could not fall into this trap of thinking an index-only scan can bring major improvements in this case. Undoubtedly, the term “major” is troublesome in this context.</p>
<h2 class="title" id="idp38699296">Question 3: Index Column Order</h2>
<div class="blockquote"><blockquote class="blockquote"><p>Is the following SQL good or bad practice from a performance perspective?</p><p>Two queries, searching by a common column:</p><pre class="programlisting">CREATE INDEX tbl_idx ON tbl (a, b);

SELECT id, a, b
  FROM tbl
 WHERE a = ?
   AND b = ?;


SELECT id, a, b
  FROM tbl
 WHERE b = ?;</pre></blockquote></div>
<p>The same options:</p>
<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p class="short">Good practice — There is no major improvement possible.</p></li><li class="listitem"><p>Bad practice — There is a major improvement possible.</p></li></ul></div>
<p>The answer is “bad practice,” because the second query cannot use the index properly. Changing the index column order to <code class="code">(b, a)</code> would, however, allow both queries to use this index in the most efficient way. You can find a full explanation <a class="ulink" href="http://use-the-index-luke.com/sql/where-clause/the-equals-operator/concatenated-keys" >here</a>. Adding a second index on <code class="code">(b)</code> would be a poor solution due to the overhead it adds for no reason. Unfortunately, I don’t know how many would have done that.</p>
<p>The result is disappointing, but in line with my expectations — just 12.5% above guessing score.</p>
<div class="informalfigure"><img height="67" src="http://use-the-index-luke.com//img/q3_total_20140212.png" style="padding: 1em 0" width="510" /></div>
<p>This is also a problem I see almost every day. People just don’t understand how multi-column indexes work.</p>
<div class="informalfigure"><img height="159" src="http://use-the-index-luke.com//img/q3_bydb_20140212.png" style="padding: 1em 0" width="300" /></div>
<p>All the per-database results are pretty close together. Maybe because there is no syntactic difference or well-known database features that could have a major influence the answer. Less known features like Oracle’s <code class="code">SKIP SCAN</code> could have a minor impact, of course. Generally, the index-only scan could have a influence too, but it pushes the participants to the “right” answer this time.</p>
<p>After all, this result might just say that users of some databases know more about indexing than others. Interestingly, PostgreSQL users get the best score for the third time.</p>
<h2 class="title" id="idp38716224">Question 4: LIKE Searches</h2>
<div class="blockquote"><blockquote class="blockquote"><p>Is the following SQL troublesome or bulletproof from a performance perspective?</p><p>Searching within a string:</p><pre class="programlisting">CREATE INDEX tbl_idx ON tbl (text);

SELECT id, text
  FROM tbl
 WHERE text LIKE &#39;%TERM%&#39;;</pre></blockquote></div>
<p>I’ve phrased the options differently this time:</p>
<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p class="short">Bulletproof: It will always run fast.</p></li><li class="listitem"><p>Troublesome: There is high risk for performance problems.</p></li></ul></div>
<p>And the correct answer is “troublesome” because the <code class="code">LIKE</code> pattern uses a leading wild card. Otherwise, if it would use the pattern <code class="code">&#39;TERM%&#39;</code>, it could use the index very efficiently. Have a look at this <a class="ulink" href="http://use-the-index-luke.com/sql/where-clause/searching-for-ranges/like-performance-tuning" >visual explanation</a> for details.</p>
<p>The results of this question are promising. Here I feel safe to say most people know that <code class="code">LIKE</code> is not for full-text search.</p>
<div class="informalfigure"><img height="67" src="http://use-the-index-luke.com//img/q4_total_20140212.png" style="padding: 1em 0" width="510" /></div>
<p>The segregated results are also within a very narrow corridor:</p>
<div class="informalfigure"><img height="159" src="http://use-the-index-luke.com//img/q4_bydb_20140212.png" style="padding: 1em 0" width="300" /></div>
<p>It is, however, strange that PostgreSQL users under performed at this question. A closer look at how the question is presented to PostgreSQL users might give an explanation:</p>
<pre class="programlisting">CREATE INDEX tbl_idx ON tbl (text <span class="emphasis"><em>varchar_pattern_ops</em></span>);

SELECT id, text
  FROM tbl
 WHERE text LIKE &#39;%TERM%&#39;;</pre>
<p>Note the addition to the index (<code class="code">varchar_pattern_ops</code>). In PostgreSQL, this special operator class is required to make the index usable for postfix wild card searches (e.g. <code class="code">&#39;TERM%&#39;</code>). I added this because I aimed to find out if people know about the problem of leading wild cards in <code class="code">LIKE</code> expressions. Without the operator class, there are two reasons why it doesn’t work: (1) the leading wild card; (2) the missing operator class. I though that would be too obvious. Retrospectivley, I believe some participants interpreted this operator class as “magic that makes it work” and thus took the wrong answer.</p>
<h2 class="title" id="idp38734672">Question 5a: Index-Only Scan</h2>
<p>Question five is a little bit tricky, because PostgreSQL did not support <a class="ulink" href="http://use-the-index-luke.com/sql/clustering/index-only-scan-covering-index" >index-only scans</a> when the quiz was created. For that reason, there are two variants of question five: one about index-only scans for users of MySQL, Oracle and SQL Server databases. And another question about index column order for PostgresSQL users. Both results are presented here, but the segregated data is limited for obvious reasons. We start with the question about index-only scans:</p>
<div class="blockquote"><blockquote class="blockquote"><p>How will the change affect query performance?</p><p>Current situation, selecting about hundred rows out of a million:</p><pre class="programlisting">CREATE INDEX tab_idx ON tbl (a, date_column);

SELECT date_column, count(*)
  FROM tbl
 WHERE a = 123
 GROUP BY date_column;</pre><p>Changed query, selecting about ten rows out of a million:</p><pre class="programlisting">SELECT date_column, count(*)
  FROM tbl
 WHERE a = 123
   <span class="emphasis"><em>AND b = 42</em></span>
 GROUP BY date_column;</pre></blockquote></div>
<p>Note the added <span class="command"><strong>where</strong></span> clause in the second query.</p>
<p>This question is also special because it offers four options:</p>
<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p class="short">Query performance will roughly stay the same (+/- 10%)</p></li><li class="listitem"><p class="short">Depends on the data.</p></li><li class="listitem"><p class="short">The query will be much slower (impact &gt;10%)</p></li><li class="listitem"><p>The query will be much faster (impact &gt;10%)</p></li></ul></div>
<p>When I created the quiz, I was well aware that 50/50 questions have a tendency to render the score meaningless. This question is a trade-off between keeping the questions easy to gasp and answer (questions 1–4) and giving a more accurate result.</p>
<p>To make it short, the correct answer is “the query will be much slower.” The reason is that the original query could use an index-only scan — that is, the query could be answered only using data from the index without fetching any data from the actual table. The second query, however, needs to check column <code class="code">B</code> too, which is not in the index. Consequently, the database must take some extra effort to fetch the candidate rows from the table to evaluate the expression on <code class="code">B</code> That is, it must fetch at least 100 rows from the table — the number of rows returned by the first query. Due to the <span class="command"><strong>group by</strong></span> there are probably more rows to fetch. A quite considerable extra effort that will make the query much slower. A more exhaustive explanation is <a class="ulink" href="http://use-the-index-luke.com/sql/clustering/index-only-scan-covering-index" >here</a>.</p>
<p>With that number of options, the overall score drops significantly to about 39% or 14% above guessing score.</p>
<div class="informalfigure"><img height="67" src="http://use-the-index-luke.com//img/q5_total_20140212.png" style="padding: 1em 0" width="510" /></div>
<p>Still I think saying that about 39% of participants knew the right answers is wrong. They gave the right answer, but there was still a probability of 25% that they gave the right answer without knowing it.</p>
<p>The segregation by database is quite boring. Conspicuously boring.</p>
<div class="informalfigure"><img height="127" src="http://use-the-index-luke.com//img/q5_by3db_20140212.png" style="padding: 1em 0" width="300" /></div>
<p>However, with four options, it is also interesting to see how people actually answered.</p>
<div class="informalfigure"><img height="150" src="http://use-the-index-luke.com//img/q5_byanswer_20140212.png" style="padding: 1em 0" width="310" /></div>
<p>That caught me by surprise. Both options “roughly the same” and “depends on the data” got about 25% — the guessing probably. Does this mean half of the participants were guessing? As it is the last question some participants might have picked a random option just to get through. Quite possible. However, the correct option “much slower” got 38.8% at the cost of the “much faster” option, which got just 10.9%.</p>
<p>My intention with this question was to trap people into the “much faster” option because fetching less data should be faster — except when breaking an index-only scan. The only hypothesis I have for this result is that people might have got the idea that the obvious answer isn’t the correct one. That, however, would mean the 39% score doesn’t prove anything about the knowledge of this phenomenon in the field.</p>
<p>Another effect that I expected to have an impact is that “it is always depending on the data.” Of course there are edge cases where the performance impact might roughly stay the same — e.g., when all inspected rows are in the same table block. However, this is rather unlikely — just because there would be no point in adding the <code class="code">date_column</code> for an index-only scan in the first place.</p>
<h2 class="title" id="idp38764304">Question 5b: Index Column Order and Range Operators</h2>
<p>This question is only shown to PostgreSQL users.</p>
<div class="blockquote"><blockquote class="blockquote"><p>Is the following SQL good or bad practice from a performance perspective?</p><p>Searching for entries in state X, not older than 5 years.</p><pre class="programlisting">CREATE INDEX tbl_idx ON tbl (date_column, state);

SELECT id, date_column, state
  FROM tbl
 WHERE date_column &gt;= CURRENT_DATE - INTERVAL &#39;5&#39; YEAR
   AND state = &#39;X&#39;;

(365 rows)</pre><p>The data distribution is as follows:</p><pre class="programlisting">SELECT count(*)
  FROM tbl
 WHERE date_column &gt;= CURRENT_DATE - INTERVAL &#39;5&#39; YEAR;

 count 
-------
  1826

SELECT count(*)
  FROM tbl
 WHERE state = &#39;X&#39;;

 count 
-------
 10000</pre></blockquote></div>
<p>There is an index with two columns and a query that filters on both of them. One filter uses an equals operator, the other a greater than or equal operator. When using each filter individually the query returns many more rows as when combining both filters.</p>
<p>The options are:</p>
<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p class="short">Good practice — There is no major improvement possible.</p></li><li class="listitem"><p>Bad practice — There is a major improvement possible.</p></li></ul></div>
<p>And the correct answer is “bad practice” because the column order in the index is the wrong way around. The general rule is that index columns can be used efficiently from the left hand side as long as they are used with equals operators. Further, one column can be used efficiently with a range operator. However, the first range operator effectively cuts off the index so that further columns cannot be used efficiently anymore. With efficiently I mean as an index access predicate. Please find a visualization <a class="ulink" href="http://use-the-index-luke.com/sql/where-clause/searching-for-ranges/greater-less-between-tuning-sql-access-filter-predicates" >here</a>.</p>
<p>With the original index shown above, the query has to fetch 1826 entries from the index (those matching the <code class="code">date_column</code> filter) and check each of them for the value of the <code class="code">state</code> column. If we turn the index column order around, the database can use both filters efficiently (= as access predicate) and directly limit the index access to those 365 rows of interest.</p>
<p>And this is how people answered:</p>
<div class="informalfigure"><img height="67" src="http://use-the-index-luke.com//img/q5_postgres_20140212.png" style="padding: 1em 0" width="510" /></div>
<p>Wait a moment, that’s below the guessing score! It’s not just people don’t know, they believe the wrong thing. However, I must admit that the term “major” is very problematic again. When I run this example, the speed-up I get is just 70%. Not even twice as fast.</p>
<h2 class="title" id="idp38780032">Overall Score: How Many Passed the Test?</h2>
<p>Looking at each question individually is interesting, but doesn’t tell us how many participants managed to answer all five questions correctly, for example. The following chart has that information.</p>
<div class="informalfigure"><img height="200" src="http://use-the-index-luke.com//img/correct_answers_given.png" style="padding: 1em 0" width="250" /></div>
<p>Finally, I’d like to boil this chart down to a single figure: how many participants “passed” the test?</p>
<p>Considering that the test has only five questions, out of which four are 50/50 questions, I think it is fair to say three correct answers isn’t enough to pass the test. Requiring five correct answers would quite obviously be asking for too much. Requiring four correct answers to “pass” the test is therefore the only sensible choice I see. Using this definition, only <span class="ul">38.2% passed the test</span>. The chance to pass the test by guessing is still 12.5%.</p>
<p><span class="emphasis"><em>If you like this article and want to learn about proper indexing, <a class="ulink" href="http://sql-performance-explained.com/" target="_blank">SQL Performance Explained</a> is for you.</em></span></p>
<div class="linkbox-wrapper"><div class="linkbox" id="links-quiz-results"  title="Links"><h3 class="title">Links</h3><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p class="short"><a class="ulink" href="http://use-the-index-luke.com/img/raw_quiz_results_20140212.txt.gz" >Raw results</a> (.txt.gz, 1.1 MB, explanations included)</p><p>To verify my analysis and/or draw your own conclusions. Also includes data that I haven’t used. Especially timestamps that might allow to filter for guessing (e.g. question answered in less than X seconds).</p></li><li class="listitem"><p class="short"><a class="ulink" href="http://use-the-index-luke.com/blog/2013-07/indexes-the-neglected-performance-all-rounder" >Indexes: The neglected performance all-rounder</a></p><p class="short">Analysis why developers know very little about SQL indexing.</p></li></ul></div></div></div>
</div></div>
</div> 
</div>
<div class="region region-content-bottom">
  <div id="block-block-28" class="block block-block first region-odd odd region-count-1 count-7 ">
<div class="content">
<p class="center darkblue" style="margin:0">
<em>Stay connected:</em>
<br/>
<a title="Subscribe RSS" href="/blog/feed" class="rss_feed piclink"><span>RSS Feed</span></a>
&nbsp;&nbsp;
<a title="Like on Facebook" rel="/social/fb" href="/social/fb2" class="fb_like cluetip piclink"><span>Like on Facebook</span></a>
&nbsp;&nbsp;
<a rel="/social/tw_follow" title="Follow on Twitter" href="http://twitter.com/MarkusWinand" class="tw_follow piclink cluetip"><span>Follow me on Twitter</span></a>
<a title="Google+" rel="/social/gplus-frm" href="/social/gplus" class="gplus piclink cluetip"><span>Share at Google+</span></a>
</p>

<form action="http://winand.us7.list-manage.com/subscribe/post?u=0144e9d4699c960039a90ad24&amp;id=a88100f1ab" 
           method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="simplenews-subscribe center" target="_blank" style="margin-bottom:1em" novalidate>
	<input type="email" placeholder="E-mail address" name="EMAIL" id="edit-mail" size="15" style="font-size:12px">
       <input type="hidden" value="2" name="group[441][2]" id="mce-group[441]-441-1">
<input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="form-submit" style="display: inline-block">
</form></div>
</div> 
<div id="block-views-authorsbio-block_1" class="block block-views region-even even region-count-2 count-8 ">
<h2 class="title">
About the Author</h2>
<div class="content">
<div class="views_view view view-authorsbio view-id-authorsbio view-display-id-block_1 authorsbio view-dom-id-1">
  
  
  
  
      <div class="view-content">
        <div class="views-row views-row-1 views-row-odd views-row-first views-row-last">
      
  <div class="views-field-picture">
                <div class="field-content"><div class="picture clearfix">
  <img src="/files/pictures/picture-1.jpg" width="85" height="85">
</div></div>
  </div>
  
  <div class="views-field-value">
                <div class="field-content"><div class="clearfix">As an author, trainer, and coach Markus Winand specializes in helping developers cope with SQL performance issues. He also published the book <a href="http://sql-performance-explained.com?utm_source=UTIL&amp;utm_medium=bio&amp;utm_campaign=bio" onclick="_gaq.push(['_trackEvent', 'sql-performance-explained.com', 'follow', 'bio']);"><em>SQL Performance Explained</em></a> and tweets his best performance tips via <a href="http://twitter.com/SQLPerfTips" onclick="_gaq.push(['_trackEvent', '@SQLPerfTips', 'follow', 'bio']);"><em>@SQLPerfTips</em></a>.<a class="home-link" href="http://winand.at?utm_source=UTIL&amp;utm_medium=bio&amp;utm_campaign=bio" onclick="_gaq.push(['_trackEvent', 'winand.at', 'follow', 'bio']);">http://winand.at/</a>
</div></div>
  </div>
  </div>
    </div>
  
  
  
  
  
  
</div><!-- /.view -->
</div>
</div> 
<div id="block-block-201" class="block block-block last region-odd odd region-count-3 count-9 ">
<div class="content">
 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'usetheindexluke'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    </div>
</div> 
</div><!-- /.region -->
</div></div> 
<div class="region region-sidebar-first column sidebar"><div class="section">
  <div id="block-block-32" class="block block-block first region-odd odd region-count-1 count-1 ">
<h2 class="title">
<a href="/3-minute-test" title="The 3-Minute Test" class="title"><span>
The 3-Minute Test</span></a>
</h2>
<div class="content">
<div id="icn-3-minute-test"></div>
<p id="menu-3-minute-test"><a href="/3-minute-test">Expert, competent, or just a greenhorn? Test your SQL performance skills in just three minutes. &rsaquo;</a></p></div>
</div> 
<div id="block-book-0" class="block block-book region-even even region-count-2 count-2 ">
<h2 class="title">
<a href="/sql/table-of-contents" title="Table of Contents" class="title"><span>
Table of Contents</span></a>
</h2>
<div class="content">
<div id="book-block-menu-12" class="book-block-menu">
  <ul class="menu"><li class="leaf first"><a href="/sql/preface">Preface</a></li>
<li class="collapsed"><a href="/sql/anatomy">Anatomy of an Index</a></li>
<li class="collapsed"><a href="/sql/where-clause">The Where Clause</a></li>
<li class="collapsed"><a href="/sql/testing-scalability">Performance and Scalability</a></li>
<li class="collapsed"><a href="/sql/join">The Join Operation</a></li>
<li class="collapsed"><a href="/sql/clustering">Clustering Data</a></li>
<li class="collapsed"><a href="/sql/sorting-grouping">Sorting and Grouping</a></li>
<li class="collapsed"><a href="/sql/partial-results">Partial Results</a></li>
<li class="collapsed"><a href="/sql/dml">Insert, Delete and Update</a></li>
<li class="collapsed"><a href="/sql/explain-plan">Execution Plans</a></li>
<li class="collapsed"><a href="/sql/myth-directory">Myth Directory</a></li>
<li class="collapsed"><a href="/sql/glossary">Glossary</a></li>
<li class="collapsed last"><a href="/sql/example-schema">Example Schema</a></li>
</ul></div>
</div>
</div> 
<div id="block-blog-0" class="block block-blog last region-odd odd region-count-3 count-3 ">
<h2 class="title">
<a href="/blog" title="Latest Blog Posts" class="title"><span>
Latest Blog Posts</span></a>
</h2>
<div class="content">
<div class="item-list"><ul><li class="first"><a href="/blog/2014-05/what-i-learned-about-sqlite-at-a-postgresql-conference">What I learned about SQLite…at a PostgreSQL conference</a></li>
<li><a href="/blog/2013-04/whats-left-of-nosql">What’s left of NoSQL?</a></li>
<li><a href="/blog/2014-04-01/thank-you-mysql-we-will-miss-you">Thank You MySQL, We’ll Miss You!</a></li>
<li><a href="/blog/2014-02/results-three-minutes-sql-performance-quiz">Results of the SQL Performance Quiz: 60% fail</a></li>
<li><a href="/blog/2014-01/unreasonable-defaults-primary-key-clustering-key">Unreasonable Defaults: Primary Key as Clustering Key</a></li>
<li><a href="/blog/2013-10-01/mysql-is-to-sql-like-mongodb-to-nosql">MongoDB is to NoSQL like MySQL to SQL — in the most harmful way</a></li>
<li><a href="/blog/2013-08/its-not-about-the-star-stupid">Myth: Select * is bad</a></li>
<li><a href="/blog/2013-08/try-online-at-sqlfiddle">Try it online!</a></li>
<li><a href="/blog/2013-07/about-query-optimizer-hints">About Optimizer Hints</a></li>
<li class="last"><a href="/blog/2013-07/pagination-done-the-postgresql-way">Pagination Done the Right Way </a></li>
</ul></div><div class="more-link"><a href="/blog" title="Read the latest blog entries.">more</a></div></div>
</div> 
</div></div><!-- /.section, /.region -->
<div class="region region-sidebar-second column sidebar"><div class="section">
  <div id="block-block-103" class="block block-block first region-odd even region-count-1 count-4 ">
<div class="content">
<div class="dashed-border-bottom"><p class="center" style="margin: 2px 0 15px 0 ">English version by<br/><a href="http://winand.at/" target="_blank">Markus Winand</a>.</p></div></div>
</div> 
<div id="block-block-22" class="block block-block region-even odd region-count-2 count-5 ">
<div class="content">
<form action="http://winand.us7.list-manage.com/subscribe/post?u=0144e9d4699c960039a90ad24&amp;id=a88100f1ab" 
           method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="simplenews-subscribe" target="_blank" style="padding: 1em 0 0 0" novalidate>
	<input type="email" placeholder="E-mail address" name="EMAIL" id="edit-mail" size="12">
       <input type="hidden" value="2" name="group[441][2]" id="mce-group[441]-441-1">
<input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="form-submit">
</form>


<div id="social_links">

<p class="justify"><a class="rss_feed piclink" href="/blog/feed" title="Subscribe RSS"><span>RSS Feed</span></a><a class="flattr_button cluetip piclink" href="http://flattr.com/thing/55720/Use-The-Index-Luke" rel="/social/flattr" title="Support with Flattr"><span>Flattr this!</span></a>

<a class="tw_follow piclink cluetip" href="http://twitter.com/MarkusWinand" title="Follow on Twitter" rel="/social/tw_follow"><span>Follow me on Twitter</span></a

><a class="gplus piclink cluetip" href="/social/gplus" rel="/social/gplus-frm" title="Google+"><span>Share at Google+</span></a

><a class="fb_like cluetip piclink" href="/social/fb2" rel="/social/fb" title="Like on Facebook"><span>Like on Facebook</span></a

></p>

</div></div>
</div> 
<div id="block-block-181" class="block block-block last region-odd even region-count-3 count-6 ">
<div class="content">
<img src="/img/sqlfiddleinfo.png" width="120" height="300" alt="Click on the SQLFiddle logo to try the examples online"></div>
</div> 
</div></div><!-- /.section, /.region -->
</div></div> 
<div id="footer"><div class="section">
<div class="region region-footer">
  <div id="block-block-105" class="block block-block first last region-odd odd region-count-1 count-13 ">
<div class="content">
<a  class="sidebar2-bottom" href="http://sql-performance-explained.com/?utm_source=UTIL&amp;utm_medium=theessences&amp;utm_campaign=rightbottombanner">
<img src="http://sql-performance-explained.com/img/ad_120x600_en.jpg" alt="SQL Performance Explained — The essence – everything else you can google">
</a>

<!--
<iframe class="sidebar2-bottom" src="/block/spe-eng-banner-120x600" style="width:120px;height:600px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>--></div>
</div> 
</div><!-- /.region -->
</div></div> 
</div></div> 
<div id="page-closure">
<div class="region region-page-closure">
  <div id="block-askutil-0" class="block block-askutil first region-odd even region-count-1 count-14 ">
<h2 class="title">
<a href="http://Ask.Use-The-Index-Luke.com/" title="Recent Questions at Ask.Use-The-Index-Luke.com" class="title"><span>
Recent Questions at Ask.Use-The-Index-Luke.com</span></a>
</h2>
<div class="content">
<div id="AskUseTheIndexLuke" style="position: relative; width: 710px; height: 81px; overflow: hidden;">




<div id="listA">
    
<div class="short-summary">
    <div class="counts">
        <div class="votes">
            <div class="item-count">0</div>
            <div>votes</div>
        </div >
        <div  class="status  answered">
            <div class="item-count">1</div>
            <div>answer</div>
        </div>
        <div class="views">
             <div class="item-count">643</div>
             <div>views</div>
        </div>
    </div>

    <div class="question-summary-wrapper">
        <h2><a title="I think you should mention about specific features of some DBMS. This features can boost some queries." href="http://Ask.Use-The-Index-Luke.com/questions/127/included-columns-and-indexed-views-in-sql-server">Included columns and indexed views in SQL Server</a></h2>
        <div class="userinfo">
            <span class="relativetime" title="2014-06-30 15:56:56">yesterday</span>
            klaus triendl <span class="score" title="1 karma">1</span>

        </div>

        <div class="tags">
            <span class="tag">sqlserver</span>
            <span class="tag">features</span>
        </div>
    </div>

</div>

    
<div class="short-summary">
    <div class="counts">
        <div class="votes">
            <div class="item-count">0</div>
            <div>votes</div>
        </div >
        <div  class="status  unanswered">
            <div class="item-count">0</div>
            <div>answers</div>
        </div>
        <div class="views">
             <div class="item-count">60</div>
             <div>views</div>
        </div>
    </div>

    <div class="question-summary-wrapper">
        <h2><a title="Hi Team,
I have very good configuration server dedicated only for PostgresSql.
Server is 16 Core 122 GB RAM on Linux machine.
select version();
PostgreSQL 9.3.4 on x86_64-unknown-linux-gnu, 
compiled by gcc (GCC) 4.8.2 20131212 (Red Hat 4.8.2-7), 64-bit
I have set the following parameter
show segmen" href="http://Ask.Use-The-Index-Luke.com/questions/188/performance-very-bad-in-postgresql-93">Performance very bad in Postgresql 9.3</a></h2>
        <div class="userinfo">
            <span class="relativetime" title="2014-06-25 08:22:49">Jun 25 at 08:22</span>
            Noor Ahmed <span class="score" title="1 karma">1</span>

        </div>

        <div class="tags">
            <span class="tag">performance</span>
            <span class="tag">issue</span>
        </div>
    </div>

</div>

    
<div class="short-summary">
    <div class="counts">
        <div class="votes">
            <div class="item-count">0</div>
            <div>votes</div>
        </div >
        <div  class="status  answered">
            <div class="item-count">1</div>
            <div>answer</div>
        </div>
        <div class="views">
             <div class="item-count">333</div>
             <div>views</div>
        </div>
    </div>

    <div class="question-summary-wrapper">
        <h2><a title="Hi,
I need to optimize some queries (postgresql used). One of them looks like the following query:
SELECT UPPER(colors.name) as filter_name, colors.code as filter_color
  FROM &quot;item_features&quot;
 INNER JOIN &quot;colors&quot; ON &quot;colors&quot;.&quot;id&quot; = &quot;item_features&quot;.&quot;color_id&quot;
WHERE (feature like &#39;%arbe:%&#39;) AND (item_" href="http://Ask.Use-The-Index-Luke.com/questions/185/select-in-where-like-arbe">SELECT .... IN(....) WHERE ... LIKE %arbe% ....</a></h2>
        <div class="userinfo">
            <span class="relativetime" title="2014-05-27 12:17:40">May 27 at 12:17</span>
            Markus Winand ♦♦ <span class="score" title="541 karma">541</span>

        </div>

        <div class="tags">
            <span class="tag">performance</span>
            <span class="tag">postgresql</span>
        </div>
    </div>

</div>
</div>


</div></div>
</div> 
<div id="block-block-2" class="block block-block last region-even odd region-count-2 count-15 ">
<div class="content">
<div id="footer-copyright">
“Use The Index, Luke” by <a href="http://winand.at/home">Markus Winand</a> is licensed under a Creative Commons <br/>Attribution-Noncommercial-No Derivative Works 3.0 Unported License.
</div>
<div id="footer-links"><a href="/about">About</a> | <a href="/contact">Contact</a> | <a href="/faq">FAQ</a> | <a href="/faq#privacy">Privacy</a> | <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/3.0/">Creative Commons License</a></div></div>
</div> 
</div><!-- /.region -->
</div>
<script type="text/javascript" src="/files/js/js_5dbaef6e39e9f05efd445a05d64052c4.js"></script>
<script type="text/javascript">
/* <![CDATA[ */
var google_conversion_id = 1048578523;
var google_conversion_language = "en";
var google_conversion_format = "3";
var google_conversion_color = "ffffff";
var google_conversion_label = "d3QBCJfwrgIQ25OA9AM";
var google_conversion_value = 0;
/* ]]> */
</script>
<script type="text/javascript" src="http://www.googleadservices.com/pagead/conversion.js">
</script>
<noscript>
<div style="display:inline;">
<img height="1" width="1" style="border-style:none;" alt="" src="http://www.googleadservices.com/pagead/conversion/1048578523/?label=d3QBCJfwrgIQ25OA9AM&amp;guid=ON&amp;script=0"/>
</div>
</noscript>
</body>
</html>
