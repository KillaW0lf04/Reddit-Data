<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" /> 
    <title>For modern development Javascript indeed is a s̶h̶i̶t̶ dissapointing language</title>
	<link rel="alternate" type="application/atom+xml" href="/feed.atom.xml" title="Atom feed for Julik Live">
	<link rel="stylesheet" type='text/css' media='screen' href='/tooling/a.css' />
	<link rel="stylesheet" type='text/css' media="handheld, only screen and (max-device-width: 480px)" href="/tooling/iPhone.css" />
	<link rel="stylesheet" type='text/css' media='screen' href='/tooling/github.css' />

	<link rel="prev" title="Checklist for custom form controls in your wep app" href="/2013/03/custom-controls-just-say-no-one-more-time" />

	<link rel="next" title="Tracksperanto is fully Ruby 2.0 ready" href="/2013/05/xperanto-on-ruby-2-point-oh" />
          
    <script src="/tooling/highlight.pack.js"></script>
    <script>
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
    </script>
	
	<meta name="viewport" content="initial-scale=1, width=320" />
	<link rel="alternate" type="application/atom+xml" title="Blog entries" href="/feed.atom.xml" />
    
</head>
<body>

<div id="sitemeta"><ul id="updown"><li class="pr"><a href="/2013/03/custom-controls-just-say-no-one-more-time">Checklist for custom form controls in your wep app</a></li><li class="cur"></li><li class="pr"><a href="/2013/05/xperanto-on-ruby-2-point-oh">Tracksperanto is fully Ruby 2.0 ready</a></li></ul></div>
<div id="wrp">
    <h1><img src="http://www.gravatar.com/avatar/3494c51ae32711dc7428334ef1cafa02?width=64" width="64" />&#160;&#160;julik live</h1>
    
    <div id="main">
      <div class="article">
  <h2>
      For modern development Javascript indeed is a s̶h̶i̶t̶ dissapointing language
  </h2>
  
  <p>I'm sorry, but the Crockford arguments do not cut it.</p>

<p>Javascript is so bad, on so many levels - it's not even funny. This is why I am so surprised everyone jumped on the node bandwagon with such excitement - yes, Node is faster than Ruby, but it's unfathomable to me that someone in his clear mind would want to rewrite his app in Node without being 100% focused on the evented model.</p>

<p>JS has <em>inherent</em>, <em>deep</em> issues. They are not solvable by making a new ECMA spec. They are not solvable by wrapping a better syntax around it like Coffeescript does. They are not solvable by standardizing on a <code>require</code> implementation or by introducing <code>classes</code>. There is an ECMA language with classes - it's called ActionScript and it's just as shitty as JS itself. These warts just are - and as long as the masses accept it as the status quo it's going to be exactly like the PHP framework landscape to this day: everyone and their mother will be spending man-years trying to create an infrastructure of tools around a shit language that will resist those efforts every single second.</p>

<p>Let me explain why I say that JS is awful. Of course, there are nice things in it - but the problem is that their utility is disputable. Prototypal inheritance, for example, is <em>severly</em> limited in utility - because all it offers you are function overrides. The "everything is a function" approach, while also gimmicky (look ma, I can also call this!), is also not particularly useful - because a function is not an object, not a datastructure that can carry data.</p>

<p>And then the real warts begin. Let's simply enumerate:</p>

<h3>JS has callable attributes</h3>

<p>This is a <a href="http://live.julik.nl/2012/08/messages-versus-slots">shitty design decision</a> which most of the languages have made right at the start. In retrospect, it's difficult to blame the designers because they might have had performance issues - and, to boot, if you are not used to message-passing language the whole idea of "some attributes are callable and some are not" seems absolutely legal.</p>

<h3>Hobjects are unusable for stable keys</h3>

<p>The mixup between objects and hashes is also a very bad idea, because it defies the premise that objects can have metadata on them - which alllow you to establish a rudimentary type system or at least any kind of introspection.</p>

<h3>Fobjects are unusable for type systems since an object does not carry any type information.</h3>

<p>This one is a biggie. Even in the Ruby world, where everything is happily quacking like a duck, we often use the <code>Object#class</code> to get information about an object. A fairly standard procedure of styling an HTML element to a certain model object for example:</p>

<pre><code>    &lt;div class='&lt;%= model.class %&gt;' id='&lt;%= [model.class, model.id].join %&gt;' &gt;…
</code></pre>

<p>is impossible in JS because the only types offered are 'Object', 'function' and primitives. It's awful in all the ways Java is awful, and then some.</p>

<h3>Null everywhere</h3>

<p>Trying to use a constant with a wrong name by mistake?</p>

<pre><code> MyApp.SYNC // should have been MyApp.SYNC_FETCH
</code></pre>

<p>Nothing will happen. Since ojects are hashes, and the language provides <em>zero</em> facilities for constants, our constant with the wrong key will be undefined, and will happily bleed into the callee. This makes stack traces huge.</p>

<h3>Callback hell</h3>

<p>JS lacks a decent facility for deferreds. It's created for evented execution, which is fundamentally <em>not</em> multithreaded. Your calls are interspersed with event callbacks - when your code is idling, callbacks are executed. However, JS lacks a simple facility for doing this:</p>

<pre><code> var res = await AjaxReq.fetch('/long-request')
 // because you are waiting for a result, here the runtime would
  // schedule event handling, DOM redraws and whatever else it can 
  // squeeze in while you await
 res.name // this will be only executed once res is available
</code></pre>

<p>Of course the JS community is doing exactly what the PHP community has been doing all along - they try to fix a bad language with even worser tooling. How? By using <em>more callbacks</em> and, on a good day, callback chains</p>

<pre><code>when(&lt;ERMAGHERD RIDICULOUSLY LONG CALLBACK&gt;
 // 48 lines of code down
).then(&lt;HOLYSHIT WHEN WILL THIS BE OVER&gt;
// 23 lines down
).then(&lt;GIVE ME SOME COFFEE ALREADY&gt;)
</code></pre>

<p>In a normal situation this would have been fixed simply by adding a
wait primitive to the language which would schedule the events when the
result is still being fetched.</p>

<p>The proliferation of callbacks leads to the programming style where everything is async, but as a matter of fact 80 percent of the code you
write has to be synchronuous. Simply because 80 percent of the programming is about <strong>doing one motherfucking thing with another motherfucking thing</strong> and you need <strong>both of them</strong> to complete the action.</p>

<h2>Terrible exception handling</h2>

<p>Exception handling in JS is terrible. It exists, but in a rudimentary form - you can see the call stack (that's going to consist of a dozen anonymous functions and one function that is named - that on a good day), and you can see an error message. Since I am not bashing on the DOM, I will only mention two most often encountered errors:</p>

<pre><code>    undefined is not a function
    cannot call property 'xyz' of undefined
</code></pre>

<p>Both of these stem from the fact that fu(ck)bjects in JS have no defined methods - they only have properties. The JS runtime will never have a way to know whether your fubject is supposed to have a method that can be called, or a property of a certain name - it will just assume it being a missing hash key. It just doesn't know any better!</p>

<p>I remember people in the Ruby community complaining about Ruby's backtraces and error messages being not good enough - and Rubinius went to address this. You know where error messages are particularly fucked up? In fucking Javascript. Because the two absolutely basic, crucial exceptions that you want to get and see <em>every single time</em> - <code>NameError</code> (when you are adressing a class-ish or constant-ish something which is not defined) and 'NoMethodError' are simply impossible with the sloppy way the language is built.</p>

<p>And yes, functions are nice, and prototypes are nice and all that - but if you want to build a JS app having any kind of reasonable complexity, you will be bound to write code like this:</p>

<pre><code>var cv = Marionette.CollectionView.extend({
  itemView: MyApp.Views.WidgetView;
});
</code></pre>

<p>What is the error that you will get if <code>MyApp.Views.WidgetView</code> is not defined yet? <code>undefined is not a function</code> of course! Where will you get it? When the <code>CollectionView</code> will try to instantiate your item view. Not when you define the variable <code>cv</code>, no no! It will explode <em>later</em>, and rest assured - you will be tearing your hair out for a couple of minutes until you see where the error came from.</p>

<p>And why? Simply because everything is a hash and the language is incapable of doing any kind of introspection.</p>

<p>It absolutely perplexes me that people who have used Ruby are moving to Node and calling it a good tool. Node might be great. The language running in it is shit though, and until this gets at least marginally better I will do without Node just fine, thank you.</p>

<p>I can understand that some people wanted to escape the MRI infrastructure by going Node, because - you know - learning Japanese is hard. If you don't speak Japanese, your chances of making a noticeable improvement in MRI approach zero - you will not be treated nicely.</p>

<p>JS is shit, and if we care at least a tiny bit we should do everything in our power to either sunset it, or to move it into the 'assembler for the web' realm where it would be a vehicle for decent languages that can actually get the job done without driving you up the wall. Being nice will not help it, and CoffeeScript is not radical enough. <a href="https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS">Support your local transpiler initiative today.</a></p>

<p><strong>Update:</strong> nice to know that <a href="http://www.ramen.io/post/46936028144/we-are-switching-to-dart-why">I am not alone in this.</a></p>


  
      <p class="tags">
      <b>Suspects: </b>
          <a href="http://live.julik.nl/webdev">Веб-стройка</a>
    </p>
  
  <div id="disqus_thread">&#160;</div>
  <script type="text/javascript">
      var disqus_shortname = 'juliklive';
      /* * * DON'T EDIT BELOW THIS LINE * * */
      (function() {
          var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
          dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
          (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
      })();
  </script>
  <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
  <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
</div><!-- end entry -->
    </div>
</div>

<div id="aux">
  <ul>
    <li><a href="/on-topic/kunst">Кунст</a></li>
    <li><a href="/on-topic/nl">Голландские штучки</a></li>
    <li><a href="/on-topic/random">Случайное</a></li>
    <li><a href="/on-topic/webdev">Веб-стройка</a></li>
    <li><a href="/on-topic/mac">Mac</a></li>
    <li><a href="/on-topic/design">Дизайн</a></li>
    <li><a href="/on-topic/favorites">Любимое</a></li>
    <li><a href="/on-topic/practical-css">CSS на практике</a></li>
    <li><a href="/on-topic/unicode">Юникод</a></li>
    <li><a href="/on-topic/brievenbus">Из писем и газет</a></li>
    <li>"..and many other interesting things"</li>
  </ul>
  <p><small>Aspirine not included.</small></p>
</div>

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-184764-1', 'julik.nl');
  ga('send', 'pageview');
</script>

</body>
</html>
