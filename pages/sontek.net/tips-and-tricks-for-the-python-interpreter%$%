<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" type="text/css" href="http://sontek.net/static/css/svbtle.css">
  <!--<link rel="stylesheet/less" type="text/css" href="/theme/css/style.less">-->
  <!--<script src="/theme/js/less.js" type="text/javascript"></script>-->
  <link href="http://sontek.net/static/css/sourcehighlight.css" rel="stylesheet">
  <link href="http://sontek.net/static/css/main.css" rel="stylesheet">
  <link rel="alternate" type="application/rss+xml" title="RSS" href="http://sontek.net/blog/rss/index.rss">


  

  <title>sontek's humble adode - John Anderson</title>
  <meta charset="utf-8" />
</head>
<body>
  <section id="sidebar">
    <figure id="user_logo">
        <img src="http://s.gravatar.com/avatar/848c8fa8f54256aa570becc90123bee2?s=130" />
    </figure>

    <div class="user_meta">
      <h1 id="user"><a href="#" class="">John Anderson</a></h1>
      <a class="rss" href="http://sontek.net/blog/rss/index.rss"><img src="http://sontek.net/static/img/rss.png" /></a>
      <h2>Open Source Hacker</h2>
      <ul>
          <li><a href="http://sontek.net/">Home</a></li>
          <li><a href="http://sontek.net/blog/category/tech">Tech Blog</a></li>
          <li><a href="http://sontek.net/blog/category/personal">Personal Blog</a></li>
          <li><a href="http://sontek.net/projects">Projects</a></li>
          <li><a href="http://sontek.net/resume">Resum√©</a></li>
          <li><a href="http://sontek.net/about">About</a></li>
      </ul>
    </div>
    <footer>
      <address>
        Powered by <a href="https://github.com/eventray/hiero">Hiero</a>
      </address>
    </footer>
  </section>

  <section id="posts">
    



<div class="blog-body">
   
  <a href="http://sontek.net/blog/detail/tips-and-tricks-for-the-python-interpreter"><h1 class="entry-title">Tips and Tricks for the Python Interpreter</h1></a>
  <p class="entry-metadata">
    Posted by sontek on 2010-12-28 09:28:34
  </p>
  <div class="entry-content">
    <p>I have seen a lot of people switch over to using ipython, bpython, etc to get auto-complete support without realizing that the standard interpreter does have this functionality.</p>
<p>To enable auto-complete support in the python interpreter you need to create a python startup file that enables readline support. A python startup file is just a bunch of python code that gets executed at startup of the interpreter. To do this you just setup PYTHONSTARTUP in your ~/.bashrc and then create a ~/.pythonrc.py file:</p>
<div class="codehilite"><pre><span class="c">#.bashrc</span>
<span class="n">PYTHONSTARTUP</span><span class="o">=~/.</span><span class="n">pythonrc</span><span class="o">.</span><span class="n">py</span>
<span class="n">export</span> <span class="n">PYTHONSTARTUP</span>

<span class="c">#.pythonrc.py</span>
<span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">readline</span>
<span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Module readline not available.&quot;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">rlcompleter</span>
    <span class="n">readline</span><span class="o">.</span><span class="n">parse_and_bind</span><span class="p">(</span><span class="s">&quot;tab: complete&quot;</span><span class="p">)</span>
</pre></div>


<p>Now when you are in python you have tab completion on importing, calling methods on a module, etc.</p>
<div class="codehilite"><pre><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">o</span>
<span class="nb">object</span><span class="p">(</span>  <span class="nb">oct</span><span class="p">(</span>     <span class="nb">open</span><span class="p">(</span>    <span class="ow">or</span>       <span class="nb">ord</span><span class="p">(</span>     <span class="n">os</span>
</pre></div>


<p>I always end up using the pretty print module for viewing long lists and strings in the interpreter so I prefer to just use it by default:</p>
<div class="codehilite"><pre><span class="c"># Enable Pretty Printing for stdout</span>
<span class="kn">import</span> <span class="nn">pprint</span>
<span class="k">def</span> <span class="nf">my_displayhook</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">value</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="kn">import</span> <span class="nn">__builtin__</span>
            <span class="n">__builtin__</span><span class="o">.</span><span class="n">_</span> <span class="o">=</span> <span class="n">value</span>
        <span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
            <span class="n">__builtins__</span><span class="o">.</span><span class="n">_</span> <span class="o">=</span> <span class="n">value</span>

        <span class="n">pprint</span><span class="o">.</span><span class="n">pprint</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>

<span class="n">sys</span><span class="o">.</span><span class="n">displayhook</span> <span class="o">=</span> <span class="n">my_displayhook</span>
</pre></div>


<p>It is also very useful to be able to load up your favorite editor to edit lines of code from the interpreter, you can do this by adding the following into your ~/.pythonrc.py:</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">code</span> <span class="kn">import</span> <span class="n">InteractiveConsole</span>
<span class="kn">from</span> <span class="nn">tempfile</span> <span class="kn">import</span> <span class="n">mkstemp</span>

<span class="n">EDITOR</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;EDITOR&#39;</span><span class="p">,</span> <span class="s">&#39;vi&#39;</span><span class="p">)</span>
<span class="n">EDIT_CMD</span> <span class="o">=</span> <span class="s">&#39;\e&#39;</span>

<span class="k">class</span> <span class="nc">EditableBufferInteractiveConsole</span><span class="p">(</span><span class="n">InteractiveConsole</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">last_buffer</span> <span class="o">=</span> <span class="p">[]</span> <span class="c"># This holds the last executed statement</span>
        <span class="n">InteractiveConsole</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">runsource</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">last_buffer</span> <span class="o">=</span> <span class="p">[</span> <span class="n">source</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;latin-1&#39;</span><span class="p">)</span> <span class="p">]</span>
        <span class="k">return</span> <span class="n">InteractiveConsole</span><span class="o">.</span><span class="n">runsource</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">raw_input</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
        <span class="n">line</span> <span class="o">=</span> <span class="n">InteractiveConsole</span><span class="o">.</span><span class="n">raw_input</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">line</span> <span class="o">==</span> <span class="n">EDIT_CMD</span><span class="p">:</span>
            <span class="n">fd</span><span class="p">,</span> <span class="n">tmpfl</span> <span class="o">=</span> <span class="n">mkstemp</span><span class="p">(</span><span class="s">&#39;.py&#39;</span><span class="p">)</span>
            <span class="n">os</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">last_buffer</span><span class="p">))</span>
            <span class="n">os</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">)</span>
            <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">EDITOR</span><span class="p">,</span> <span class="n">tmpfl</span><span class="p">))</span>
            <span class="n">line</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">tmpfl</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
            <span class="n">os</span><span class="o">.</span><span class="n">unlink</span><span class="p">(</span><span class="n">tmpfl</span><span class="p">)</span>
            <span class="n">tmpfl</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
            <span class="n">lines</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span> <span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span> <span class="bp">self</span><span class="o">.</span><span class="n">push</span><span class="p">(</span> <span class="n">lines</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">)</span>
            <span class="n">line</span> <span class="o">=</span> <span class="n">lines</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">line</span>

<span class="n">c</span> <span class="o">=</span> <span class="n">EditableBufferInteractiveConsole</span><span class="p">(</span><span class="nb">locals</span><span class="o">=</span><span class="nb">locals</span><span class="p">())</span>
<span class="n">c</span><span class="o">.</span><span class="n">interact</span><span class="p">(</span><span class="n">banner</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>

<span class="c"># Exit the Python shell on exiting the InteractiveConsole</span>
<span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</pre></div>


<p>For Django developers when you load up the ./manage.py shell it is nice to have access to all your models and settings for testing:</p>
<div class="codehilite"><pre><span class="c"># If we&#39;re working with a Django project, set up the environment</span>
<span class="k">if</span> <span class="s">&#39;DJANGO_SETTINGS_MODULE&#39;</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">:</span>
    <span class="kn">from</span> <span class="nn">django.db.models.loading</span> <span class="kn">import</span> <span class="n">get_models</span>
    <span class="kn">from</span> <span class="nn">django.test.client</span> <span class="kn">import</span> <span class="n">Client</span>
    <span class="kn">from</span> <span class="nn">django.test.utils</span> <span class="kn">import</span> <span class="n">setup_test_environment</span><span class="p">,</span> <span class="n">teardown_test_environment</span>
    <span class="kn">from</span> <span class="nn">django.conf</span> <span class="kn">import</span> <span class="n">settings</span> <span class="k">as</span> <span class="n">S</span>

    <span class="k">class</span> <span class="nc">DjangoModels</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Loop through all the models in INSTALLED_APPS and import them.&quot;&quot;&quot;</span>
        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">get_models</span><span class="p">():</span>
                <span class="nb">setattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>

    <span class="n">A</span> <span class="o">=</span> <span class="n">DjangoModels</span><span class="p">()</span>
    <span class="n">C</span> <span class="o">=</span> <span class="n">Client</span><span class="p">()</span>
</pre></div>


<p>After these tweaks the python interpreter is a lot more powerful and you really lose the need for the more interactive shells like ipython and bpython. All of these settings work in both python2 and python3.</p>
<p>If you want to see my complete ~/.pythonrc.py you can get it on <a href="https://github.com/sontek/dotfiles/blob/master/_pythonrc.py">github</a></p>
  </div>

</div>

  </section>
  <script type="text/javascript">

    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-9376946-2']);
    _gaq.push(['_trackPageview']);

    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();

  </script>
</body>
</html>
