<!DOCTYPE html>
<html>
  <head>
    <title>Big-O Algorithm Complexity Cheat Sheet</title>
    <!-- Bootstrap -->
    <link href="css/bootstrap.min.css" rel="stylesheet" media="screen">
    <link href="css/bootstrap-responsive.min.css" rel="stylesheet" media="screen">
    <link href="css/main.css" rel="stylesheet">
    
  </head>
  <body>
    <div class="navbar navbar-inverse navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container">
          <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </a>
          <a class="brand" href="#">Big-O Cheat Sheet</a>
          <div class="nav-collapse collapse">
            <ul class="nav">
              <li><a href="#searching">Searching</a></li>
              <li><a href="#sorting">Sorting</a></li>
              <li><a href="#data-structures">Data Structures</a></li>
              <li><a href="#heaps">Heaps</a></li>
              <li><a href="#graphs">Graphs</a></li>
              <li><a href="#chart">Chart</a></li>
              <li><a href="#comments">Comments</a></li>
            </ul>
          </div><!--/.nav-collapse -->
        </div>
      </div>
    </div>

    <!-- Part 1: Wrap all page content here -->
    <div id="wrap">

      <!-- Begin page content -->
      
    <div class="container">

<div id="header-ad">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-8154832549041429";
/* BigO Header */
google_ad_slot = "1064631020";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>

          <div id="socialContainer">  
            <!-- TWITTER BUTTON -->
            <div> 
              <a href="https://twitter.com/share" class="twitter-share-button" data-text="" data-hashtags="html5" data-count="vertical" data-via="ericdrowell">Tweet</a><script type="text/javascript" src="//platform.twitter.com/widgets.js"></script>
            </div>  
            <!-- GOOGLE BUTTON -->
            <div>
              <!-- Place this tag where you want the +1 button to render -->
              <g:plusone size="tall"></g:plusone>
              
              <!-- Place this render call where appropriate -->
              <script type="text/javascript">
                (function() {
                  var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
                  po.src = 'https://apis.google.com/js/plusone.js';
                  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
                })();
              </script>
            </div>
            <!-- FACEBOOK BUTTON -->
            <div id="facebookContainer">
              <div id="fb-root"></div>
              <script>(function(d, s, id) {
                var js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id)) {return;}
                js = d.createElement(s); js.id = id;
                js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
                fjs.parentNode.insertBefore(js, fjs);
              }(document, 'script', 'facebook-jssdk'));</script>
              
              <div class="fb-like" data-send="false" data-layout="box_count" data-width="" data-show-faces="false"></div> 
            </div>
            
<script data-gittip-username="ericdrowell"
src="https://www.gittip.com/assets/widgets/0002.js">
</script>

          </div>


        
      <h1>Know Thy Complexities!</h1>
      <p>Hi there!&nbsp; This webpage covers the space and time Big-O complexities of common algorithms used in Computer Science.&nbsp; When preparing for technical interviews in the past, I found myself spending hours crawling the internet putting together the best, average, and worst case complexities for search and sorting algorithms so that I wouldn't be stumped when asked about them.&nbsp; Over the last few years, I've interviewed at several Silicon Valley startups, and also some bigger companies, like Yahoo, eBay, LinkedIn, and Google, and each time that I prepared for an interview, I thought to myself "Why oh why hasn't someone created a nice Big-O cheat sheet?".&nbsp; So, to save all of you fine folks a ton of time, I went ahead and created one.&nbsp; Enjoy!</p>

<table class="table table-bordered table-striped" id="legend">
  <tbody>
    <tr>
      <td><code class="green">Good</code></td>
      <td><code class="yellow">Fair</code></td>
      <td><code class="red">Poor</code></td>
    </tr>
  </tbody>
</table>

<h2 id="searching">Searching</h2>
<table class="table table-bordered table-striped">
  <thead>
    <tr>
      <th>Algorithm</th>
      <th>Data Structure</th>
      <th colspan="2">Time Complexity</th>
      <th colspan="3">Space Complexity</th>
    </tr>
    <tr>
      <th></th>
      <th></th>
      <th>Average</th>  
      <th>Worst</th> 
      <th>Worst</th>                
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Depth-first_search">Depth First Search (DFS)</a></td>
      <td>Graph of |V| vertices and |E| edges</td>
      <td><code>-</code></td>
      <td><code class="green">O(|E| + |V|)</code></td>
      <td><code class="green">O(|V|)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Breadth-first_search">Breadth First Search (BFS)</a></td>
      <td>Graph of |V| vertices and |E| edges</td>
      <td><code>-</code></td>
      <td><code class="green">O(|E| + |V|)</code></td>
      <td><code class="green">O(|V|)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Binary_search_algorithm">Binary search</a></td>
      <td>Sorted array of n elements</td>
      <td> 
        <code class="green">O(log(n))</code>
      </td>
      <td>
        <code class="green">O(log(n))</code>
      </td>
      <td>
        <code class="green">O(1)</code>
      </td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Brute-force_search">Linear (Brute Force)</a></td>
      <td>Array</td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="green">O(1)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Dijkstra's_algorithm">Shortest path by Dijkstra,<br>using a Min-heap as priority queue</a></td>
      <td>Graph with |V| vertices and |E| edges</td>
      <td><code class="yellow">O((|V| + |E|) log |V|)</code></td>
      <td><code class="yellow">O((|V| + |E|) log |V|)</code></td>
      <td><code class="yellow">O(|V|)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Dijkstra's_algorithm">Shortest path by Dijkstra,<br>using an unsorted array as priority queue</a></td>
      <td>Graph with |V| vertices and |E| edges</td>
      <td><code class="yellow">O(|V|^2)</code></td>
      <td><code class="yellow">O(|V|^2)</code></td>
      <td><code class="yellow">O(|V|)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm">Shortest path by Bellman-Ford</a></td>
      <td>Graph with |V| vertices and |E| edges</td>
      <td><code class="yellow">O(|V||E|)</code></td>
      <td><code class="yellow">O(|V||E|)</code></td>
      <td><code class="yellow">O(|V|)</code></td>
    </tr>
  </tbody>
</table>

<div id="moreCheatSheets">
  <h2>More Cheat Sheets</h2>
  
  <ul class="clearfix">
    <li>
      <a href="http://cheatsheetworld.com/entertainment/game-of-thrones-cheat-sheet/">
        <img width ="300" height="150" src="http://www.cheatsheetworld.com/img/game-of-thrones.jpg" alt="Game of Thrones Cheat Sheet" />
      </a>
    </li>
    
    <li>
      <a href="http://cheatsheetworld.com/programming/html5-canvas-cheat-sheet/">
        <img width ="300" height="150" src="http://www.cheatsheetworld.com/img/html5-canvas.png" alt="HTML5 Canvas Cheat Sheet" />
      </a>
    </li>
    
    <li>
      <a href="http://cheatsheetworld.com/programming/unix-linux-cheat-sheet/">
        <img width ="300" height="150" src="http://www.cheatsheetworld.com/img/unix-linux.png" alt="HTML5 Canvas Cheat Sheet" />
      </a>
    </li>
    
  </ul>
</div>
<h2 id="sorting">Sorting</h2>
<table class="table table-bordered table-striped">
  <thead>
    <tr>
      <th>Algorithm</th>
      <th>Data Structure</th>
      <th colspan="3">Time Complexity</th>
      <th colspan="3">Worst Case Auxiliary Space Complexity</th>
    </tr>
    <tr>
      <th></th>
      <th></th>
      <th>Best</th>
      <th>Average</th>  
      <th>Worst</th>  
      <th>Worst</th>                
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Quicksort">Quicksort</a></td>
      <td>Array</td>
      <td><code class="yellow">O(n log(n))</code></td>
      <td><code class="green">O(n log(n))</code></td>
      <td><code class="red">O(n^2)</code></td>
      <td><code class="yellow">O(n)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Merge_sort">Mergesort</a></td>
      <td>Array</td>
      <td><code class="yellow">O(n log(n))</code></td>
      <td><code class="green">O(n log(n))</code></td>
      <td><code class="green">O(n log(n))</code></td>
      <td><code class="red">O(n)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Heapsort">Heapsort</a></td>
      <td>Array</td>
      <td><code class="yellow">O(n log(n))</code></td>
      <td><code class="green">O(n log(n))</code></td>
      <td><code class="green">O(n log(n))</code></td>
      <td><code class="green">O(1)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Bubble_sort">Bubble Sort</a></td>
      <td>Array</td>
      <td><code class="green">O(n)</code></td>
      <td><code class="red">O(n^2)</code></td>
      <td><code class="red">O(n^2)</code></td>
      <td><code class="green">O(1)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Insertion_sort">Insertion Sort</a></td>
      <td>Array</td>
      <td><code class="green">O(n)</code></td>
      <td><code class="red">O(n^2)</code></td>
      <td><code class="red">O(n^2)</code></td>
      <td><code class="green">O(1)</code></td>
    </tr>
  <tr>
      <td><a href="http://en.wikipedia.org/wiki/Selection_sort">Select Sort</a></td>
      <td>Array</td>
      <td><code class="red">O(n^2)</code></td>
      <td><code class="red">O(n^2)</code></td>
      <td><code class="red">O(n^2)</code></td>
      <td><code class="green">O(1)</code></td>
    </tr>
    <tr>
      <td><a rel="tooltip" title="Only for integers with range k" href="http://en.wikipedia.org/wiki/Bucket_sort">Bucket Sort</a></td>
      <td>Array</td>
      <td><code class="green">O(n+k)</code></td>
      <td><code class="green">O(n+k)</code></td>
      <td><code class="red">O(n^2)</code></td>
      <td><code class="yellow">O(nk)</code></td>
    </tr>
    <tr>
      <td><a rel="tooltip" title="Constant number of digits 'k'" href="http://en.wikipedia.org/wiki/Radix_sort">Radix Sort</a></td>
      <td>Array</td>
      <td><code class="green">O(nk)</code></td>
      <td><code class="green">O(nk)</code></td>
      <td><code class="green">O(nk)</code></td>
      <td><code class="yellow">O(n+k)</code></td>
    </tr>
  </tbody>
</table>

<h2 id="data-structures">Data Structures</h2>
<table class="table table-bordered table-striped">
  <thead>
    <tr>
      <th>Data Structure</th>
      <th colspan="8">Time Complexity</th>
      <th>Space Complexity</th>
    </tr>
    <tr>
      <th></th>
      <th colspan="4">Average</th>  
      <th colspan="4">Worst</th>                
      <th>Worst</th>                
    </tr>
    <tr>
      <th></th>
      <th>Indexing</th>
      <th>Search</th>
      <th>Insertion</th>  
      <th>Deletion</th>  
      <th>Indexing</th>
      <th>Search</th>
      <th>Insertion</th>  
      <th>Deletion</th>  
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Array_data_structure">Basic Array</a></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code>-</code></td>
      <td><code>-</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code>-</code></td>
      <td><code>-</code></td>
      <td><code class="yellow">O(n)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Dynamic_array">Dynamic Array</a></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="yellow">O(n)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Singly_linked_list#Singly_linked_lists">Singly-Linked List</a></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="yellow">O(n)</code></td>
    </tr> 
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Doubly_linked_list">Doubly-Linked List</a></td>

      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="yellow">O(n)</code></td>
    </tr> 
  <tr>
      <td><a href="http://en.wikipedia.org/wiki/Skip_list">Skip List</a></td>

    <td><code class="yellow">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
    <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
    <td><code class="red">O(n log(n))</code></td>
    </tr> 
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Hash_table">Hash Table</a></td>
      <td><code>-</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code>-</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="yellow">O(n)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Binary_search_tree">Binary Search Tree</a></td>
      <td><code class="yellow">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="yellow">O(n)</code></td>
    </tr>
    <tr>
      <td><a href="https://en.wikipedia.org/wiki/Cartesian_tree">Cartresian Tree</a></td>
      <td><code>-</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code>-</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="red">O(n)</code></td>
      <td><code class="yellow">O(n)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/B_tree">B-Tree</a></td>
      <td><code class="yellow">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="yellow">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="yellow">O(n)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Red-black_tree">Red-Black Tree</a></td>
      <td><code class="yellow">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="yellow">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="yellow">O(n)</code></td>
    </tr>
    <tr>
      <td><a href="https://en.wikipedia.org/wiki/Splay_tree">Splay Tree</a></td>
      <td><code>-</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code>-</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="yellow">O(n)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/AVL_tree">AVL Tree</a></td>
      <td><code class="yellow">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="yellow">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="green">O(log(n))</code></td>
      <td><code class="yellow">O(n)</code></td>
    </tr>
  </tbody>
</table>

<h2 id="heaps">Heaps</h2>
<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Heaps</th>
            <th colspan="7">Time Complexity</th>
        </tr>
        <tr>
            <th></th>
            <th>Heapify</th>
            <th>Find Max</th>  
            <th>Extract Max</th>  
            <th>Increase Key</th>
            <th>Insert</th>
            <th>Delete</th>
            <th>Merge</th>  
            <th></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><a href="http://en.wikipedia.org/wiki/Linked_list">Linked List (sorted)</a></td>
            <td><code>-</code></td> <!-- heapify -->
            <td><code class="green">O(1)</code></td> <!-- Find max -->
            <td><code class="green">O(1)</code></td> <!-- Extract max -->
            <td><code class="red">O(n)</code></td> <!-- Increase -->
            <td><code class="red">O(n)</code></td> <!-- insert -->
            <td><code class="green">O(1)</code></td> <!-- delete -->
            <td><code class="red">O(m+n)</code></td> <!-- merge -->
        </tr>
        <tr>
            <td><a href="http://en.wikipedia.org/wiki/Linked_list">Linked List (unsorted)</a></td>
            <td><code>-</code></td> <!-- heapify -->
            <td><code class="red">O(n)</code></td> <!-- Find max -->
            <td><code class="red">O(n)</code></td> <!-- Extract max -->
            <td><code class="green">O(1)</code></td> <!-- Increase -->
            <td><code class="green">O(1)</code></td> <!-- insert -->
            <td><code class="green">O(1)</code></td> <!-- delete -->
            <td><code class="green">O(1)</code></td> <!-- merge -->
        </tr>
        <tr>
            <td><a href="http://en.wikipedia.org/wiki/Binary_heap">Binary Heap</a></td>
            <td><code class="yellow">O(n)</code></td>
            <td><code class="green">O(1)</code></td>
            <td><code class="yellow">O(log(n))</code></td>
            <td><code class="yellow">O(log(n))</code></td>
            <td><code class="yellow">O(log(n))</code></td>
            <td><code class="yellow">O(log(n))</code></td>
            <td><code class="red">O(m+n)</code></td>
        </tr>
        <tr>
            <td><a href="http://en.wikipedia.org/wiki/Binomial_heap">Binomial Heap</a></td>
            <td><code>-</code></td>
            <td><code class="yellow">O(log(n))</code></td>
            <td><code class="yellow">O(log(n))</code></td>
            <td><code class="yellow">O(log(n))</code></td>
            <td><code class="yellow">O(log(n))</code></td>
            <td><code class="yellow">O(log(n))</code></td>
            <td><code class="yellow">O(log(n))</code></td>
        </tr>
        <tr>
            <td><a href="http://en.wikipedia.org/wiki/Fibonacci_heap">Fibonacci Heap</a></td>
            <td><code>-</code></td>
            <td><code class="green">O(1)</code></td>
            <td><code rel="tooltip" title="Amortized" class="yellow">O(log(n))*</code></td>
            <td><code rel="tooltip" title="Amortized" class="green">O(1)*</code></td>
            <td><code class="green">O(1)</code></td>
            <td><code rel="tooltip" title="Amortized" class="yellow">O(log(n))*</code></td>
            <td><code class="green">O(1)</code></td>
        </tr>
        </tbody>
    </table>

<h2 id="graphs">Graphs</h2>
<table class="table table-bordered table-striped">
  <tbody>
    <tr>
      <th>Node / Edge Management</th>
      <th>Storage</th>
      <th>Add Vertex</th>
      <th>Add Edge</th>
      <th>Remove Vertex</th>
      <th>Remove Edge</th>
      <th>Query</th>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Adjacency_list">Adjacency list</a></td>
      <td><code class="yellow">O(|V|+|E|)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="yellow">O(|V| + |E|)</code></td>
      <td><code class="yellow">O(|E|)</code></td>
      <td><code class="yellow">O(|V|)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Incidence_list">Incidence list</a></td>
      <td><code class="yellow">O(|V|+|E|)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="yellow">O(|E|)</code></td>
      <td><code class="yellow">O(|E|)</code></td>
      <td><code class="yellow">O(|E|)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Adjacency_matrix">Adjacency matrix</a></td>
      <td><code class="red">O(|V|^2)</code></td>
      <td><code class="red">O(|V|^2)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="red">O(|V|^2)</code></td>
      <td><code class="green">O(1)</code></td>
      <td><code class="green">O(1)</code></td>
    </tr>
    <tr>
      <td><a href="http://en.wikipedia.org/wiki/Incidence_matrix">Incidence matrix</a></td>
      <td><code class="red">O(|V| &sdot; |E|)</code></td>
      <td><code class="red">O(|V| &sdot; |E|)</code></td>
      <td><code class="red">O(|V| &sdot; |E|)</code></td>
      <td><code class="red">O(|V| &sdot; |E|)</code></td>
      <td><code class="red">O(|V| &sdot; |E|)</code></td>
      <td><code class="yellow">O(|E|)</code></td>
    </tr>
  </tbody>
</table>

<h2 id="growth">Notation for asymptotic growth</h2>
<table class="table table-bordered table-striped">
  <tr>
    <th>letter</th>
    <th>bound</th>  
    <th>growth</th>
  </tr>
  <tr>
    <td>(theta) &#920;</td>
    <td>upper and lower, tight<a href="#footnote-1"><sup>[1]</sup></a></td>
    <td>equal<a href="#footnote-1"><sup>[2]</sup></a></td>
  </tr>
  <tr>
    <td>(big-oh) O</td>
    <td>upper, tightness unknown</td>
    <td>less than or equal<a href="#footnote-1"><sup>[3]</sup></a></td>
  </tr>
  <tr>
    <td>(small-oh) o</td>
    <td>upper, not tight</td>
    <td>less than</td>
  </tr>
  <tr>
    <td>(big omega) &#937;</td>
    <td>lower, tightness unknown</td>
    <td>greater than or equal</td>
  </tr>
  <tr>
    <td>(small omega) &#969;</td>
    <td>lower, not tight</td>
    <td>greater than</td>
  </tr> 
</table>

<p id="footnote-1">[1] Big O is the upper bound, while Omega is the lower bound. Theta requires both Big O and Omega, so that's why it's referred to as a tight bound (it must be both the upper and lower bound). For example, an algorithm taking Omega(n log n) takes at least n log n time but has no upper limit. An algorithm taking Theta(n log n) is far preferential since it takes AT LEAST n log n (Omega n log n) and NO MORE THAN n log n (Big O n log n).<sup><a href="http://stackoverflow.com/a/464081/412916">SO</a></sup></p>
<p id="footnote-2">[2] f(x)=&#920;(g(n)) means f (the running time of the algorithm) grows exactly like g when n (input size) gets larger. In other words, the growth rate of f(x) is asymptotically proportional to g(n).</p>
<p id="footnote-1">[3] Same thing. Here the growth rate is no faster than g(n). big-oh is the most useful because represents the worst-case behavior.</p>


In short, if algorithm is __ then its performance is __ 
<table class="table table-bordered table-striped">
  <tr>
    <th>algorithm</th>
    <th>performance</th>  
  </tr>
  <tr>
    <td>o(n)</td>
    <td>&lt; n</td>
  </tr>
  <tr>
    <td>O(n)</td>
    <td>&#8804; n</td>
  </tr>
  <tr>
    <td>&#920;(n)</td>
    <td>= n</td>
  </tr>
  <tr>
    <td>&#937;(n)</td>
    <td>&#8805; n</td>
  </tr>
  <tr>
    <td>&#969;(n)</td>
    <td>&gt; n</td>
  </tr> 
</table>
<div id="middle-ad">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-8154832549041429";
/* BigO Middle */
google_ad_slot = "4018097420";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>



          
    	<h2 id="chart">Big-O Complexity Chart</h2>  
    	<p>This interactive chart, created by our friends over at <a href="http://www.meteorcharts.com" target="_blank">MeteorCharts</a>, shows the number of operations (y axis) required to obtain a result as the number of elements (x axis) increase.&nbsp; O(n!) is the worst complexity which requires 720 operations for just 6 elements, while O(1) is the best complexity, which only requires a constant number of operations for any number of elements.</p>
    	<div id="meteorcharts-container"></div>
    	<!--<img src="img/big-o-complexity.png" alt="Big O Complexity Graph" title="Big O Complexity Graph">-->
    
    <div id="contribute-container">
      <h2>Contributors</h2>
      
      <a href="https://github.com/ericdrowell/BigOCheatSheet/blob/master/Tables.html">Edit these tables!</a><br><br>
      
      <ol>
        <li><a href="https://github.com/ericdrowell">Eric Rowell</a></li>
        <li><a href="https://github.com/qpleple">Quentin Pleple</a></li>
        <li><a href="https://github.com/ndizazzo">Nick Dizazzo</a></li>
        <li><a href="https://github.com/vault">Michael Abed</a></li>
        <li><a href="https://github.com/agfor">Adam Forsyth</a></li> 
        <li><a href="https://github.com/jay754">Jay Engineer</a></li>
        <li><a href="https://github.com/jdavis">Josh Davis</a></li>
        <li><a href="https://github.com/makosblade">makosblade</a></li>
        <li><a href="https://github.com/j4n0">Alejandro Ramirez</a></li>
        <li><a href="https://github.com/jfriedly">Joel Friedly</a></li>
        <li><a href="https://github.com/sharpobject">Robert Burke</a></li>
        <li><a href="https://github.com/wiz3kid">David Dorfman</a></li>
        <li><a href="https://github.com/elefevre">Eric Lefevre-Ardant</a></li>
        <li><a href="https://github.com/thomasahle">Thomas Dybdahl Ahle</a></li>
      </ol>
    </div>
    
   

    	<div class="container" id="comments">
    	<div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'bigocheatsheet'; // required: replace example with your forum shortname

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function() {
                var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        
        </div>
    	</div> <!-- /container -->
    
      <div id="push"></div>
    </div>

    <div class="container">
<div id="bottom-ad">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-8154832549041429";
/* BigOBottom */
google_ad_slot = "8454970220";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
    </div>

    <div id="footer">
      <div class="container">
        <p class="muted credit">
        	Page styling via <a href="http://twitter.github.com/bootstrap/" rel="nofollow">Bootstrap</a><br>
        	Comments via <a href="http://disqus.com/" rel="nofollow">Disqus</a><br>
        	Algorithm detail via <a href="http://www.wikipedia.com" rel="nofollow">Wikipedia</a><br>
        	Big-O complexity chart via <a href="http://www.meteorcharts.com">MeteorCharts</a><br>
        	Table source hosted on <a href="https://github.com/ericdrowell/BigOCheatSheet/blob/master/Tables.html" rel="nofollow">Github</a><br>
        	Mashup via <a href="https://twitter.com/ericdrowell">@ericdrowell</a><br>

        </p> 
      </div>
    </div>
    
  
    
    <script src="http://code.jquery.com/jquery-latest.js"></script>
    <script src="js/bootstrap.min.js"></script>
    
	<script type="text/javascript">
	
	  var _gaq = _gaq || [];
	  _gaq.push(['_setAccount', 'UA-10955171-12']);
	  _gaq.push(['_trackPageview']);
	
	  (function() {
	    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
	    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
	    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	  })();
	
	</script>

  <script src="http://d3lp1msu2r81bx.cloudfront.net/kjs/js/lib/kinetic-v4.7.4.min.js"></script>
  <script src="js/moment.min.js"></script>
  <script src="http://d3lp1msu2r81bx.cloudfront.net/mc/js/lib/meteorcharts-v0.0.11.min.js"></script>

	<script type="text/javascript">
    $("[rel=tooltip]").tooltip();
    
    function Grapher(config) {
      var minX = config.minX,
          minY = config.minY,
          maxX = config.maxX,
          maxY = config.maxY,
          increment = config.increment,
          equations = config.equations,
          len = equations.length,
          series = [],
          n, x, equation, currentSeries, func, y;

      for (n=0; n<len; n++) {
        equation = equations[n];
        func = equation.func;
        currentSeries = {
          title: equation.title,
          points: []
        };

        for (x=minX; x<=maxX; x+=increment) {
          y = Math.round(func(x) * 1) / 1;
          if (y>=minY && y<=maxY) {
            currentSeries.points.push({
              x: x,
              y: y
            });
          }
        }

        series.push(currentSeries);
      }

      return series;
    }

    var series = Grapher({
      minX: 0,
      minY: 0,
      maxX: 100,
      maxY: 6000,
      increment: 1,
      equations: [
        {
          title: 'O(n!)',
          func: function(x) {
            var rval=1;
            for (var i = 2; i <= x; i++) {
              rval = rval * i;
            }
            return rval;
          }
        },

        {
          title: 'O(2^n)',
          func: function(x) {
            return Math.pow(2, x);
          }
        },
   
        {
          title: 'O(n^2)',
          func: function(x) {
            return x * x;
          }
        },

        {
          title: 'O(n log(n))',
          func: function(x) {
            return x * Math.log(x);
          }
        },

        {
          title: 'O(n)',
          func: function(x) {
            return x;
          }
        },

        {
          title: 'O(log(n))',
          func: function(x) {
            return Math.log(x);
          }
        },

        {
          title: 'O(1)',
          func: function(x) {
            return 1;
          }
        }
      ]
    });

    //console.log(series)

    var lineChart = new MeteorCharts.Line({
      container: 'meteorcharts-container',
      view: {
        xAxis: {
          formatter: 'Number',
          min: 0,
          max: 100
        },
        yAxis: {
          min: 0,
          max: 1024
        }
      },
      model: {
        title: 'Big-O Complexity Chart',
        series: series
      }
    });
	</script>

  </body>
</html>
