<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US" xml:lang="en-US" prefix="og: http://ogp.me/ns#">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>Whose bug is this anyway?!? - Code Of Honor</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<!-- This site is optimized with the Yoast WordPress SEO plugin v1.5.3.2 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway" />
<link rel="author" href="https://plus.google.com/118231948365696288884/posts"/>
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Whose bug is this anyway?!? - Code Of Honor" />
<meta property="og:description" content="At a certain point in every programmer&#8217;s career we each find a bug that seems impossible because the code is right, dammit! So it must be the operating system, the tools or the computer that&#8217;s causing the problem. Right?!? Today&#8217;s story is about some of those bugs I&#8217;ve discovered in my career. This bug is &hellip;" />
<meta property="og:url" content="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway" />
<meta property="og:site_name" content="Code Of Honor" />
<meta property="article:tag" content="debugging" />
<meta property="article:tag" content="Guild Wars" />
<meta property="article:tag" content="Starcraft" />
<meta property="article:section" content="Programming" />
<meta property="article:published_time" content="2012-12-18T17:56:21+00:00" />
<meta property="article:modified_time" content="2012-12-26T07:57:08+00:00" />
<meta property="og:updated_time" content="2012-12-26T07:57:08+00:00" />
<!-- / Yoast WordPress SEO plugin. -->

<link rel="alternate" type="application/rss+xml" title="Code Of Honor &raquo; Feed" href="http://www.codeofhonor.com/blog/feed" />
<link rel="alternate" type="application/rss+xml" title="Code Of Honor &raquo; Comments Feed" href="http://www.codeofhonor.com/blog/comments/feed" />

            <script type="text/javascript">//<![CDATA[
            // Google Analytics for WordPress by Yoast v4.3.5 | http://yoast.com/wordpress/google-analytics/
            var _gaq = _gaq || [];
            _gaq.push(['_setAccount', 'UA-19385215-1']);
				            _gaq.push(['_trackPageview']);
            (function () {
                var ga = document.createElement('script');
                ga.type = 'text/javascript';
                ga.async = true;
                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';

                var s = document.getElementsByTagName('script')[0];
                s.parentNode.insertBefore(ga, s);
            })();
            //]]></script>
			<link rel="alternate" type="application/rss+xml" title="Code Of Honor &raquo; Whose bug is this anyway?!? Comments Feed" href="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway/feed" />
<link rel='stylesheet' id='eleven40-theme-css'  href='http://www.codeofhonor.com/blog/wp-content/themes/eleven40/style.css?ver=2.0.2' type='text/css' media='all' />
<link rel='stylesheet' id='jetpack-widgets-css'  href='http://www.codeofhonor.com/blog/wp-content/plugins/jetpack/modules/widgets/widgets.css?ver=20121003' type='text/css' media='all' />
<link rel='stylesheet' id='sharedaddy-css'  href='http://www.codeofhonor.com/blog/wp-content/plugins/jetpack/modules/sharedaddy/sharing.css?ver=3.0.1' type='text/css' media='all' />
<link rel='stylesheet' id='genericons-css'  href='http://www.codeofhonor.com/blog/wp-content/plugins/jetpack/_inc/genericons/genericons.css?ver=3.0.3' type='text/css' media='all' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.codeofhonor.com/blog/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 3.9.1" />
<link rel='shortlink' href='http://wp.me/p20pJ0-8x' />
<style type='text/css'>img#wpstats{display:none}</style><link rel="Shortcut Icon" href="http://www.codeofhonor.com/blog/wp-content/themes/eleven40/images/favicon.ico" type="image/x-icon" />
<meta name="google-site-verification" content="PzEwpWYtvtcdBjkcI4Xz7-xUS9UK2C28-KILhf7jSEs" /><style type="text/css">.broken_link, a.broken_link {
	text-decoration: line-through;
}</style></head>
<body class="single single-post postid-529 single-format-standard sidebar-content-sidebar"><div id="wrap"><div id="header"><div class="wrap"><div id="title-area"><p id="title"><a href="http://www.codeofhonor.com/blog/" title="Code Of Honor">Code Of Honor</a></p><p id="description">Game design, programming and more</p></div><div class="widget-area header-widget-area"><div id="nav_menu-3" class="widget widget_nav_menu"><div class="widget-wrap"><div class="menu-primary-navigation-container"><ul id="menu-primary-navigation" class="menu genesis-nav-menu js-superfish"><li id="menu-item-226" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-226"><a href="http://www.codeofhonor.com/blog/" >Home</a></li>
<li id="menu-item-323" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-323"><a href="http://www.codeofhonor.com/blog/archives" >Archives</a></li>
<li id="menu-item-227" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-227"><a href="http://www.codeofhonor.com/blog/about-me" >About me</a></li>
<li id="menu-item-247" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-247"><a href="mailto:pat@codeofhonor.com?subject=Code%20of%20Honor%20blog%20comment">Email me</a></li>
<li id="menu-item-514" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-514"><a href="http://eepurl.com/rQU2f" onclick="javascript:_gaq.push(['_trackEvent','outbound-menu','http://eepurl.com']);">Subscribe</a></li>
</ul></div></div></div>
</div></div></div><div id="inner"><div class="wrap"><div class="page-title widget-area"><div id="text-3" class="widget widget_text"><div class="widget-wrap"><h4 class="widget-title widgettitle">Game design, game programming and more</h4>
			<div class="textwidget"></div>
		</div></div>
</div><div id="content-sidebar-wrap"><div id="content" class="hfeed"><div class="post-529 post type-post status-publish format-standard hentry category-programming tag-debugging tag-guild-wars tag-starcraft entry"><h1 class="entry-title">Whose bug is this anyway?!?</h1> 
<div class="post-info"><span class="date published time" title="2012-12-18T17:56:21+00:00">December 18, 2012</span>  by <span class="author vcard"><span class="fn"><a href="http://www.codeofhonor.com/blog/author/patrick-wyatt" title="Patrick Wyatt" rel="author">Patrick Wyatt</a></span></span> <span class="post-comments"><a href="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway#comments"><span class="dsq-postid" rel="529 http://www.codeofhonor.com/blog/?p=529">94 Comments</span></a></span> </div><div class="entry-content"><p>At a certain point in every programmer&#8217;s career we each find a bug that seems impossible because the code is right, dammit! So it <em>must</em> be the operating system, the tools or the computer that&#8217;s causing the problem. Right?!?</p>
<p>Today&#8217;s story is about some of those bugs I&#8217;ve discovered in my career.</p>
<h3>This bug is Microsoft&#8217;s fault&#8230; or not</h3>
<p>Several months after the launch of Diablo in late 1995, the StarCraft team put on the hustle and started working extra long hours to get the game done. Since the game was &#8220;only two months from launch&#8221; it seemed to make sense to work more hours every day (and some weekends too). There was much to do because, even though the team started with the Warcraft II game engine almost every system needed rework. All of the scheduling estimates were willfully wrong (my own included), so this extra effort kept on for over a year.</p>
<p>I wasn&#8217;t originally part of the StarCraft dev team, but after Diablo launched, when it became clear that StarCraft needed more &#8220;resources&#8221; (AKA people), I joined the effort. Because I came aboard late I didn&#8217;t have a defined role, so instead I just &#8220;used the force&#8221; to figure out what needed to happen to move the project forward (<a href="http://www.codeofhonor.com/blog/tough-times-on-the-road-to-starcraft" >more details in a previous post on this blog</a>).</p>
<p>I got to write fun features like implementing parts of the computer AI, which was largely developed by Bob Fitch. One was a system to determine the best place to create &#8220;strong-points&#8221; &#8212; places that AI players would gather units for defense and staging areas for attacks. I was fortunate because there were already well-designed APIs that I could query to learn which map areas were joined together by the path-finding algorithm and where concentrations of enemy units were located in order to select good strong-points, as it would otherwise be embarrassing to fortify positions that could be trivially bypassed by opponents.</p>
<p>I re-implemented some components like the &#8220;fog of war&#8221; system I had written for previous incarnations of the &#8216;Craft series. StarCraft deserved to have a better fog-of-war system than its predecessor, Warcraft II, with finer resolution in the fog-map, and we meant to include line-of-sight visibility calculations so that units on higher terrain would be invisible to those on lower terrain, greatly increasing the tactical complexity of the game: when you can&#8217;t see what the enemy is doing the game is far more complicated. Similarly, units around a corner would be out of sight and couldn&#8217;t be detected.</p>
<p>The new fog of war was the most enjoyable part of the project for me as I needed to do some quick learning to make the system functional and fast. Earlier efforts by another programmer were graphically displeasing and moreover, ran so slowly as to be unworkable. I learned about <a href="http://lodev.org/cgtutor/filtering.html" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://lodev.org']);">texture filtering algorithms</a> and <a href="http://en.wikipedia.org/wiki/Gouraud_shading" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://en.wikipedia.org']);">Gouraud shading</a>, and wrote the best x386 assembly language of my career &#8212; a skill now almost unnecessary for modern game development. Like many others I hope that StarCraft is eventually open-sourced, in my case so I can look with fondness on my coding efforts, though perhaps my memories are better than seeing the actual code!</p>
<p>But my greatest contribution to the StarCraft code was fixing defects. With so many folks working extreme hours writing brand new code the entire development process was haunted by bugs: two steps forward, one step back. While most of the team coded new features, I spent my days hunting down the problems identified by our Quality Assurance (QA) test team.</p>
<p>The trick for effective bug-fixing is to discover how to reliably reproduce a problem. Once you know how to replicate a bug it&#8217;s possible to discover why the bug occurs, and then it&#8217;s often straightforward to fix. Unfortunately reproducing a &#8220;will o&#8217; the wisp&#8221; bug that only occasionally deigns to show up can take days or weeks of work. Even worse is that it is difficult or impossible to determine beforehand how long a bug will take to fix, so long hours investigating were the order of the day. My terse status updates to the team were along the lines of &#8220;yeah, still looking for it&#8221;. I&#8217;d sit down in the morning and basically spend all day cracking on, sometimes fixing hundreds of issues, but many times fixing none.</p>
<p>One day I came across some code that wasn&#8217;t working: it was supposed to choose a behavior for a game unit based on the unit&#8217;s class (&#8220;harvesting unit&#8221;, &#8220;flying unit&#8221;, &#8220;ground unit&#8221;, etc.) and state (&#8220;active&#8221;, &#8220;disabled&#8221;, &#8220;under attack&#8221;, &#8220;busy&#8221;, &#8220;idle&#8221;, etc.). I don&#8217;t remember the specifics after so many years, but something along the lines of this:</p>
<pre><code>if (UnitIsHarvester(unit))
    return X;

if (UnitIsFlying(unit)) {
    if (UnitCannotAttack(unit))
        return Z;
    return Y;
}

... many more lines

if (! UnitIsHarvester(unit))    // "!" means "not"
    return Q;

return R;   &lt;&lt;&lt; BUG: this code is never reached!
</code></pre>
<p>After staring at the problem for too many hours I guessed it might be a compiler bug, so I looked at the assembly language code.</p>
<p>For the non-programmers out there, compilers are tools that take the code that programmers write and convert it into &#8220;machine code&#8221;, which are the individual instructions executed by the CPU.</p>
<pre><code>// Add two numbers in C, C#, C++ or Java
A = B + C

; Add two numbers in 80386 assembly
mov     eax, [B]    ; move B into a register
add     eax, [C]    ; add C to that register
mov     [A], eax    ; save results into A
</code></pre>
<p>After looking at the assembly code I concluded that the compiler was generating the wrong results, and sent a bug report off to Microsoft &#8212; the first compiler bug report I&#8217;d ever submitted. And I received a response in short order, which in retrospect is surprising: considering that Microsoft wrote the most popular compiler in the world it&#8217;s hard to imagine that my bug report got any attention at all, much less a quick reply!</p>
<p>You can probably guess &#8212; it wasn&#8217;t a bug, there was a trivial error I had been staring at all along but didn&#8217;t notice. In my exhaustion &#8212; weeks of 12+ hour days &#8212; I had failed to see that it was impossible for the code to work properly. It&#8217;s not possible for a unit to be neither &#8220;a harvester&#8221; nor &#8220;not a harvester&#8221;. The Microsoft tester who wrote back politely explained my mistake. I felt crushed and humiliated at the time, only slightly mitigated by the knowledge that the bug was now fixable.</p>
<p>Incidentally, this is one of the reasons that crunch time is a failed development methodology, as I&#8217;ve mentioned in past posts on this blog; developers get tired and start making stupid mistakes. It&#8217;s far more effective to work reasonable hours, go home, have a life, and come back fresh the next day.</p>
<p>When I started ArenaNet with two of my friends the &#8220;no crunch&#8221; philosophy was a cornerstone of our development effort, and one of the reasons we didn&#8217;t buy foozball tables and arcade machines for the office. Work, go home at a reasonable time, come back fresh!</p>
<h3>This bug is actually Microsoft&#8217;s fault</h3>
<p>Several years later, while working on Guild Wars, we discovered a catastrophic bug that caused game servers to crash on startup. Unfortunately, this bug didn&#8217;t occur in the &#8220;dev&#8221; (&#8220;development&#8221;) branch that the programming team used for everyday work, nor did it occur in the &#8220;stage&#8221; (&#8220;staging&#8221;) branch used by the game testers for final verification, it only occurred in the &#8220;live&#8221; branch which our players used to play the game. We had &#8220;pushed&#8221; a new build out to end-users, and now none of them could play the game! WTF!</p>
<p>Having thousands of angry players amps up the pressure to get that kind of problem fixed quickly. Fortunately we were able to &#8220;roll back&#8221; the code changes and restore the previous version of the code in short order, but now we needed to understand how we broke the build. Like many problems in programming, it turned out that several issues taken together conspired to cause the bug.</p>
<p>There was a compiler bug in Microsoft Visual Studio 6 (MSVC6), which we used to build the game. Yes! Not our fault! Well, except that our testing failed to uncover the problem. Whoops.</p>
<p>Under certain circumstances the compiler would generate incorrect results when processing templates. What are templates? <a href="http://yosefk.com/c++fqa/templates.html" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://yosefk.com']);">They&#8217;re useful, but they&#8217;ll blow your mind; read this if you dare</a>.</p>
<p>C++ is a complex programming language so it is no surprise that compilers that implement the language have their own bugs. In fact the C++ language is far more complicated than other mainstream languages, <a href="http://cpprocks.com/cpp-ruby-coffeescript-language-complexity/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://cpprocks.com']);">as shown in this article that visualizes the complexity of C++ compared to the Ruby language</a>. Ruby is a complex and fully-featured language, but as the diagram shows C++ is twice as complex, so we would expect it to have twice as many bugs, all other things being equal.</p>
<p>When we researched the compiler bug it turned out to be one that we already knew about, and that had already fixed by the Microsoft dev team in MSVC6 Service Pack 5 (SP5). In fact all of the programmers had already upgraded to SP5. Sadly, though we had each updated our work computers we neglected to upgrade the build server, which is the computer that gathers the code, artwork, game maps and other assets and turns them into a playable game. So while the game would run perfectly on each programmers&#8217; computer, it would fail horribly when built by the build server. But only in the live branch!</p>
<p>Why only in live? Hmmm&#8230; Well, ideally all branches (dev, stage, live) would be identical to eliminate the opportunity for bugs just like this one, but in fact there were a number of differences. For a start we disabled many debugging capabilities for the live branch that were used by the programming and test teams. These capabilities could be used to create gold and items, or spawn monsters, or even crash the game.</p>
<p>We wanted to make sure that the ArenaNet and NCsoft staff didn&#8217;t have access to cheat functions because we wanted to create a level playing field for all players. Many MMO companies have had to fire folks who abused their godlike &#8220;GM&#8221; powers so we thought to eliminate that problem by removing capability.</p>
<p>A further change was to eliminate some of the &#8220;sanity checking&#8221; code that&#8217;s used to validate that the game is functioning properly. This type of code, known as asserts or assertions by programmers, is used to ensure that the game state is proper and correct before and after a computation. These assertions come with a cost, however: each additional check that has to be performed takes time; with enough assertions embedded in the code the game can run quite slowly. We had decided to disable assertions in the live code to reduce the CPU utilization of the game servers, but this had the unintended consequence of causing the C++ compiler to generate the incorrect results which led to the game crash. A program that doesn&#8217;t run uses a lot less CPU, but that wasn&#8217;t actually the desired result.</p>
<p>The bug was easily fixed by upgrading the build server, but in the end we decided to leave assertions enabled even for live builds. The anticipated cost-savings in CPU utilization (or more correctly, the anticipated savings from being able to purchase fewer computers in the future) were lost due to the programming effort required to identify the bug, so we felt it better to avoid similar issues in future.</p>
<p>Lesson learned: everyone, programmers and build servers alike, should be running the same version of the tools!</p>
<h3>Your computer is broken</h3>
<p>After my experience reporting a non-bug to the folks at Microsoft, I was notably more shy about suggesting that bugs might be caused by anything other than the code I or one of my teammates wrote.</p>
<p>During the development of Guild Wars (GW) I had occasion to review many bug reports sent in from players&#8217; computers. As GW players may remember, in the (hopefully unlikely) event that the game crashed it would offer to send the bug report back to our &#8220;lab&#8221; for analysis. When we received those bug reports we triaged to determine who should handle each report, but of course bugs come in all manner of shapes and sizes and some don&#8217;t have a clear owner, so several of us would take turns at fixing these bugs.</p>
<p>Periodically we&#8217;d come across bugs that defied belief and we&#8217;d be left scratching our heads. While it wasn&#8217;t impossible for the bugs to occur, and we could construct hypothetically plausible explanations that didn&#8217;t involve redefining the space-time continuum, they just &#8220;shouldn&#8217;t&#8221; have occurred. It was possible they could be memory corruption or thread race issues, but given the information we had it just seemed unlikely.</p>
<p>Mike O&#8217;Brien, one of the co-founders and a crack programmer, eventually came up with the idea that they were related to computer hardware failures rather than programming failures. More importantly he had the bright idea for how to test that hypothesis, which is the mark of an excellent scientist.</p>
<p>He wrote a module (&#8220;OsStress&#8221;) which would allocate a block of memory, perform calculations in that memory block, and then compare the results of the calculation to a table of known answers. He encoded this stress-test into the main game loop so that the computer would perform this verification step about 30-50 times per second.</p>
<p>On a properly functioning computer this stress test should never fail, but surprisingly we discovered that on about 1% of the computers being used to play Guild Wars it did fail! One percent might not sound like a big deal, but when one million gamers play the game on any given day that means 10,000 would have at least one crash bug. Our programming team could spend weeks researching the bugs for just one day at that rate!</p>
<p>When the stress test failed Guild Wars would alert the user by closing the game and launching a web browser to a <a href="http://www.guildwars.com/support/en-hardwarefailure.php" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.guildwars.com']);">Hardware Failure page</a> which detailed the several common causes that we discovered over time:</p>
<ul>
<li>Memory failure: in the early days of the IBM PC, when hardware failures were more common, computers used to have <a href="http://en.wikipedia.org/wiki/RAM_parity" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://en.wikipedia.org']);">&#8220;RAM parity bits&#8221;</a> so that in the event a portion of the memory failed the computer hardware would be able to detect the problem and halt computation, but parity RAM fell out of favor in the early &#8217;90s. Some computers use <a href="http://en.wikipedia.org/wiki/ECC_memory" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://en.wikipedia.org']);">&#8220;Error Correcting Code&#8221; (ECC) memory</a>, but because of the additional cost it is more commonly found on servers rather than desktop computers. Related articles: <a href="http://news.cnet.com/8301-30685_3-10370026-264.html" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://news.cnet.com']);">Google: Computer memory flakier than expected</a> and <a href="http://www.sc.edu/news/newsarticle.php?nid=5371" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.sc.edu']);">doctoral student unravels ‘tin whisker’ mystery</a>.</li>
<p></p>
<li><a href="http://en.wikipedia.org/wiki/Overclock" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://en.wikipedia.org']);">Overclocking</a>: while less common these days, many gamers used to buy lower <a href="http://en.wikipedia.org/wiki/Clock_rate" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://en.wikipedia.org']);">clock rate</a> &#8212; and hence less expensive &#8212; CPUs for their computers, and would then increase the clock frequency to improve performance. Overclocking a CPU from 1.8 GHz to 1.9 GHz might work for one particular chip but not another. I&#8217;ve overclocked computers myself without experiencing an increase in crash-rate, but some users ratchet up the clock frequency so high as to cause spectacular crashes as the signals bouncing around inside the CPU don&#8217;t show up at the right time or place.</li>
<p></p>
<li>Inadequate power supply: many gamers purchase new computers every few years, but purchase new graphics cards more frequently. Graphics cards are an inexpensive system upgrade which generate remarkable improvements in game graphics quality. During the era when Guild Wars was released many of these newer graphics cards had substantially higher power needs than their predecessors, and in some cases a computer power supply was unable to provide enough power when the computer was &#8220;under load&#8221;, as happens when playing games.</li>
<p></p>
<li>Overheating: Computers don&#8217;t much like to be hot and malfunction more frequently in those conditions, which is why computer datacenters are usually cooled to 68-72F (20-22C). Computer games try to maximize video frame-rate to create better visual fidelity; that increase in frame-rate can cause computer temperatures to spike beyond the tolerable range, causing game crashes.</li>
<p>
</ul>
<p>In college I had an external hard-drive on my Mac that would frequently malfunction during spring and summer when it got too hot. I purchased a six-foot SCSI cable that was long enough to reach from my desk to the mini-fridge (nicknamed Julio), and kept the hard-drive in the fridge year round. No further problems!</p>
<p>Once the Guild Wars tech support team was alerted to the overheating issue they had success fixing many otherwise intractable crash bugs. When they received certain types of crash reports they encouraged players to create more air flow by relocating furniture, adding external fans, or just blowing out the accumulated dust that builds up over years, and that solved many problems.</p>
<p>While implementing the computer stress test solution seems beyond the call of duty it had a huge payoff: we were able to identify computers that were generating bogus bug reports and ignore their crashes. When millions of people play a game in any given week, even a low defect rate can result in more bug reports than the programming team can field. By focusing our efforts on the bugs that were actually our fault the programming team was able to spend time creating features that players wanted instead of triaging unfixable bugs.</p>
<h3>Ever more bugs</h3>
<p>I don&#8217;t think that we&#8217;ll ever reach a stage where computer programs don&#8217;t have bugs &#8212; the increase in the expectations from users is rising faster than the technical abilities of programmers. The Warcraft 1 code base was approximately 200,000 lines of code (including in-house tools), whereas Guild Wars 1 eventually grew to 6.5 million lines of code (including tools). Even if it&#8217;s possible to write fewer bugs per line of code, the vast increase in the number of lines of code means it is difficult to reduce the total bug count. But we&#8217;ll keep trying.</p>
<p>To close out this post I wanted to share one of my favorite tongue-in-cheek quotes from Bob Fitch, who I worked with back in my Blizzard days. He posited that &#8220;all programs can be optimized, and all programs have bugs; therefore all programs can be optimized to one line that doesn&#8217;t work.&#8221; And that&#8217;s why we have bugs.</p>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-email"><a rel="nofollow" class="share-email sd-button no-icon" href="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway?share=email"  target="_blank" title="Click to email this to a friend"><span>Email</span></a></li><li class="share-reddit"><a rel="nofollow" class="share-reddit sd-button no-icon" href="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway?share=reddit"  target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-twitter"><a rel="nofollow" class="share-twitter sd-button no-icon" href="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway?share=twitter"  target="_blank" title="Click to share on Twitter" id="sharing-twitter-529"><span>Twitter</span></a></li><li class="share-google-plus-1"><a rel="nofollow" class="share-google-plus-1 sd-button no-icon" href="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway?share=google-plus-1"  target="_blank" title="Click to share on Google+" id="sharing-google-529"><span>Google</span></a></li><li class="share-facebook"><a rel="nofollow" class="share-facebook sd-button no-icon" href="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway?share=facebook"  target="_blank" title="Share on Facebook" id="sharing-facebook-529"><span>Facebook</span></a></li><li><a href="#" class="sharing-anchor sd-button share-more"><span>More</span></a></li><li class="share-end"></li></ul><div class="sharing-hidden"><div class="inner" style="display: none;"><ul><li class="share-digg"><a rel="nofollow" class="share-digg sd-button no-icon" href="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway?share=digg"  target="_blank" title="Click to Digg this post"><span>Digg</span></a></li><li class="share-linkedin"><a rel="nofollow" class="share-linkedin sd-button no-icon" href="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway?share=linkedin"  target="_blank" title="Click to share on LinkedIn" id="sharing-linkedin-529"><span>LinkedIn</span></a></li><li class="share-end"></li><li class="share-tumblr"><a rel="nofollow" class="share-tumblr sd-button no-icon" href="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway?share=tumblr"  target="_blank" title="Click to share on Tumblr"><span>Tumblr</span></a></li><li class="share-stumbleupon"><a rel="nofollow" class="share-stumbleupon sd-button no-icon" href="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway?share=stumbleupon"  target="_blank" title="Click to share on StumbleUpon"><span>StumbleUpon</span></a></li><li class="share-end"></li><li class="share-pinterest"><a rel="nofollow" class="share-pinterest sd-button no-icon" href="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway?share=pinterest"  target="_blank" title="Click to share on Pinterest"><span>Pinterest</span></a></li><li class="share-print"><a rel="nofollow" class="share-print sd-button no-icon" href="http://www.codeofhonor.com/blog/whose-bug-is-this-anyway#print"  target="_blank" title="Click to print"><span>Print</span></a></li><li class="share-end"></li><li class="share-end"></li></ul></div></div></div></div></div></div><div class="post-meta"><span class="categories">Filed Under: <a href="http://www.codeofhonor.com/blog/category/programming" title="View all posts in Programming" rel="category tag">Programming</a></span> <span class="tags">Tagged With: <a href="http://www.codeofhonor.com/blog/tag/debugging" rel="tag">debugging</a>, <a href="http://www.codeofhonor.com/blog/tag/guild-wars" rel="tag">Guild Wars</a>, <a href="http://www.codeofhonor.com/blog/tag/starcraft" rel="tag">Starcraft</a></span></div></div><div class="author-box"><div><img alt='' src='http://1.gravatar.com/avatar/18dc5791826756ab6b22beb27ff2f92f?s=70&amp;d=retro&amp;r=G' class='avatar avatar-70 photo' height='70' width='70' /> <strong>About Patrick Wyatt</strong><br /><p>As a game developer with more than 22 years in the industry I have helped build small companies into big ones (VP of Blizzard, Founder of ArenaNet, COO of En Masse Entertainment); lead the design and development efforts for best-selling game series (Warcraft, Diablo, Starcraft, Guild Wars); written code for virtually every aspect of game development (networking, graphics, AI, pathing, sound, tools, installers, servers, databases, ecommerce, analytics, crypto, dev-ops, etc.); designed many aspects of the games I've shipped; run platform services teams (datacenter operations, customer support, billing/accounts, security, analytics); and developed state-of-the-art technologies required to compete in the AAA+ game publishing business.</p>
</div></div>
<div id="disqus_thread">
                    <div id="dsq-content">


            <ul id="dsq-comments">
                    <li class="comment even thread-even depth-1" id="dsq-comment-808">
        <div id="dsq-comment-header-808" class="dsq-comment-header">
            <cite id="dsq-cite-808">
                <span id="dsq-author-user-808">Marcin Jaczewski</span>
            </cite>
        </div>
        <div id="dsq-comment-body-808" class="dsq-comment-body">
            <div id="dsq-comment-message-808" class="dsq-comment-message"><p>Another great article, this OsStress is great idea, but what computing its does?<br />
It can be anything or something specify to cache failures ?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-809">
        <div id="dsq-comment-header-809" class="dsq-comment-header">
            <cite id="dsq-cite-809">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-809">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-809" class="dsq-comment-body">
            <div id="dsq-comment-message-809" class="dsq-comment-message"><p>Since I don&#8217;t work at ArenaNet any more I can&#8217;t peek at the source code,<br />
 but I expect the code does some cache-busting so that the computations<br />
occur mostly in main memory instead of the L1 or L2 cache.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-812">
        <div id="dsq-comment-header-812" class="dsq-comment-header">
            <cite id="dsq-cite-812">
http://twitter.com/fritzy                <span id="dsq-author-user-812">fritzy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-812" class="dsq-comment-body">
            <div id="dsq-comment-message-812" class="dsq-comment-message"><p>Here&#8217;s another great (recent) article on this problem by the guy who writes Redis (the memory store database)  <a href="http://antirez.com/news/43" onclick="javascript:_gaq.push(['_trackEvent','outbound-comment','http://antirez.com']);" rel="nofollow">http://antirez.com/news/43</a> and includes a section on avoiding the CPU cache.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-810">
        <div id="dsq-comment-header-810" class="dsq-comment-header">
            <cite id="dsq-cite-810">
                <span id="dsq-author-user-810">Marius Gedminas</span>
            </cite>
        </div>
        <div id="dsq-comment-body-810" class="dsq-comment-body">
            <div id="dsq-comment-message-810" class="dsq-comment-message"><p>Will you tell us more about the details of the AI code in StarCraft?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-811">
        <div id="dsq-comment-header-811" class="dsq-comment-header">
            <cite id="dsq-cite-811">
http://twitter.com/LongSteve                <span id="dsq-author-user-811">Steve Longhurst</span>
            </cite>
        </div>
        <div id="dsq-comment-body-811" class="dsq-comment-body">
            <div id="dsq-comment-message-811" class="dsq-comment-message"><p>I must say, this is probably the best programming blog article I&#8217;ve read all year, I really enjoyed it.  Particularly the OsStress module, genius.  There&#8217;s an old phrase that comes to mind, &#8220;select isn&#8217;t broken&#8221;.  Google it for similar stories.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-813">
        <div id="dsq-comment-header-813" class="dsq-comment-header">
            <cite id="dsq-cite-813">
                <span id="dsq-author-user-813">wtpayne</span>
            </cite>
        </div>
        <div id="dsq-comment-body-813" class="dsq-comment-body">
            <div id="dsq-comment-message-813" class="dsq-comment-message"><p>Nice article. Great to hear stories from the trenches.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-815">
        <div id="dsq-comment-header-815" class="dsq-comment-header">
            <cite id="dsq-cite-815">
                <span id="dsq-author-user-815">Aaron Opfer</span>
            </cite>
        </div>
        <div id="dsq-comment-body-815" class="dsq-comment-body">
            <div id="dsq-comment-message-815" class="dsq-comment-message"><p>Is it possible that people who were using game hacks could have generated some of those bug reports? Buggy hacks will crash games too. And if the devs look at the bug reports and see insanity in the call stack (i.e, &#8220;why is our SelectUnit function being called directly by an unknown module?&#8221;) then I imagine lots of head-scratching and beard-stroking.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-837">
        <div id="dsq-comment-header-837" class="dsq-comment-header">
            <cite id="dsq-cite-837">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-837">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-837" class="dsq-comment-body">
            <div id="dsq-comment-message-837" class="dsq-comment-message"><p>Oh sure, I expect so; game hacks can cause some crashes. But some of the bugs were downright spooky:</p>
<p>xor eax, eax ; clear register<br />
mov esi, [something]<br />
mov al, [esi]<br />
&lt;&lt;&gt;&gt;<br />
WTF!</p>
<p>Now this could be a thread-race condition or memory corruption of the stack, but we didn&#8217;t think so after a lot of research.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-853">
        <div id="dsq-comment-header-853" class="dsq-comment-header">
            <cite id="dsq-cite-853">
                <span id="dsq-author-user-853">Emjayen</span>
            </cite>
        </div>
        <div id="dsq-comment-body-853" class="dsq-comment-body">
            <div id="dsq-comment-message-853" class="dsq-comment-message"><p>It&#8217;s possible it was an actual processor bug; I vaguely recall a few bugs relating to usage of the string instructions in Intel&#8217;s x86 implementation. A race condition seems most likely; I&#8217;ve been left scratching my head while looking at absurd register values during debugging only to find that the exception handler was preempted and some thread trashed everything.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-3" id="dsq-comment-854">
        <div id="dsq-comment-header-854" class="dsq-comment-header">
            <cite id="dsq-cite-854">
                <span id="dsq-author-user-854">Morten Ofstad</span>
            </cite>
        </div>
        <div id="dsq-comment-body-854" class="dsq-comment-body">
            <div id="dsq-comment-message-854" class="dsq-comment-message"><p>In this case the first thing I would check was if the return address of a function had been corrupted and we had ended up returning into the middle of another function&#8230; It&#8217;s clear the xor instruction hasn&#8217;t been executed so there must be something funky going on with the control flow, right?</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-3" id="dsq-comment-886">
        <div id="dsq-comment-header-886" class="dsq-comment-header">
            <cite id="dsq-cite-886">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-886">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-886" class="dsq-comment-body">
            <div id="dsq-comment-message-886" class="dsq-comment-message"><p>You&#8217;re right that it could have been a corrupted return address. We receive stack-traces and partial memory dumps in crash reports and could validate that the stack looked good.</p>
<p>If you look at several hundred bugs with crazy problems like this you eventually find several with enough data to indicate that stack corruption does not appear to be the case. </p>
<p>We didn&#8217;t go looking for OS/hardware problems but after months of looking into these issues Mike&#8217;s testable hypothesis and subsequent testing proved it was.</p>
<p>It&#8217;s funny but customers who contacted support just wouldn&#8217;t believe us at first &#8212; &#8220;blow out the dust, are you kidding?&#8221; But it worked!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-3" id="dsq-comment-872">
        <div id="dsq-comment-header-872" class="dsq-comment-header">
            <cite id="dsq-cite-872">
                <span id="dsq-author-user-872">Kevin T</span>
            </cite>
        </div>
        <div id="dsq-comment-body-872" class="dsq-comment-body">
            <div id="dsq-comment-message-872" class="dsq-comment-message"><p>My last job included a lot of assembly, kernel debugging &amp; crash dump work.  As crazy as some of the stuff we had to look at could get, we never found a MS bug in my time there.  It was generally memory corruption, race conditions, etc. that were causing the issue.  I did find quite a few bugs in other companies&#8217; application code &amp; drivers though!  It&#8217;s kind of neat to email someone what their probable source code bug was, starting only from a binary image.  (You cast a COM object received from an external interface to your internal implementation type, didn&#8217;t you?  Fess up!)</p>
<p>One interesting skill that came out of my time there was that I could start debugging my own blue screens at home.  I once found an &#8220;impossible&#8221; dump state in the graphics driver stack &#8212; the register value was one or two bits off from what had been calculated a few instructions before.  Cleaning the dust out of the machine was the correct bugfix.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-817">
        <div id="dsq-comment-header-817" class="dsq-comment-header">
            <cite id="dsq-cite-817">
                <span id="dsq-author-user-817">Ryan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-817" class="dsq-comment-body">
            <div id="dsq-comment-message-817" class="dsq-comment-message"><p>Did you drill hols in your mini-fridge to get the external HDD in there?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-830">
        <div id="dsq-comment-header-830" class="dsq-comment-header">
            <cite id="dsq-cite-830">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-830">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-830" class="dsq-comment-body">
            <div id="dsq-comment-message-830" class="dsq-comment-message"><p>Actually didn&#8217;t have to drill holes; the rubber door seal compresses enough so that none of the bits got stuck passing through the SCSI cable.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-836">
        <div id="dsq-comment-header-836" class="dsq-comment-header">
            <cite id="dsq-cite-836">
                <span id="dsq-author-user-836">Roy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-836" class="dsq-comment-body">
            <div id="dsq-comment-message-836" class="dsq-comment-message"><p>Hah! &#8220;Bits.&#8221; I get it!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-818">
        <div id="dsq-comment-header-818" class="dsq-comment-header">
            <cite id="dsq-cite-818">
                <span id="dsq-author-user-818">thecodist</span>
            </cite>
        </div>
        <div id="dsq-comment-body-818" class="dsq-comment-body">
            <div id="dsq-comment-message-818" class="dsq-comment-message"><p>Games for some reason generate the most interesting bugs. Working at an MMO company was probably the hardest code I&#8217;ve ever worked on. I covered one that took me a week to fix: <a href="http://thecodist.com/article/fixing_a_nasty_physically_modeled_engine_bug_in_an_fps_game" onclick="javascript:_gaq.push(['_trackEvent','outbound-comment','http://thecodist.com']);" rel="nofollow">http://thecodist.com/article/fixing_a_nasty_physically_modeled_engine_bug_in_an_fps_game</a></p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-885">
        <div id="dsq-comment-header-885" class="dsq-comment-header">
            <cite id="dsq-cite-885">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-885">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-885" class="dsq-comment-body">
            <div id="dsq-comment-message-885" class="dsq-comment-message"><p>Great story; thanks for sharing!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-819">
        <div id="dsq-comment-header-819" class="dsq-comment-header">
            <cite id="dsq-cite-819">
                <span id="dsq-author-user-819">KevBru</span>
            </cite>
        </div>
        <div id="dsq-comment-body-819" class="dsq-comment-body">
            <div id="dsq-comment-message-819" class="dsq-comment-message"><p>Your first example is confusing or incomplete. The return value UnitIsHarvester() certainly can change mid function based on the state of the object, so there is no way the compiler could infer what your implying. Even const wouldn&#8217;t help. Imagine a case mid function where UnitBecomesHarvester() is called.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-826">
        <div id="dsq-comment-header-826" class="dsq-comment-header">
            <cite id="dsq-cite-826">
http://www.facebook.com/NaibStilgar                <span id="dsq-author-user-826">Stilgar Naib</span>
            </cite>
        </div>
        <div id="dsq-comment-body-826" class="dsq-comment-body">
            <div id="dsq-comment-message-826" class="dsq-comment-message"><p>In this case it was not a compiler bug. It was a very simple bug he missed because he was tired.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-831">
        <div id="dsq-comment-header-831" class="dsq-comment-header">
            <cite id="dsq-cite-831">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-831">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-831" class="dsq-comment-body">
            <div id="dsq-comment-message-831" class="dsq-comment-message"><p>The code snippet wasn&#8217;t clear enough, sorry. The UnitIsHarvester function always returns the same value for a given unit. That is, an SCV is *always* a harvester.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-856">
        <div id="dsq-comment-header-856" class="dsq-comment-header">
            <cite id="dsq-cite-856">
http://www.facebook.com/SuperMegaLodewyk                <span id="dsq-author-user-856">Lodewyk Duminy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-856" class="dsq-comment-body">
            <div id="dsq-comment-message-856" class="dsq-comment-message"><p>It was pretty clear, the function name was clear and concise :)</p>
<p>I had a similar problem earlier this week. After 30 minutes of stepping through the code and not finding the problem, a co-worker peeked over my shoulder and pointed it out.</p>
<p>I was embarrassed! You make a very good point &#8211; crunch time isn&#8217;t effective, not only because programmers get tired, but because they get tired while they are under a lot of pressure.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-3" id="dsq-comment-863">
        <div id="dsq-comment-header-863" class="dsq-comment-header">
            <cite id="dsq-cite-863">
http://twitter.com/frosted                <span id="dsq-author-user-863">Chuck G</span>
            </cite>
        </div>
        <div id="dsq-comment-body-863" class="dsq-comment-body">
            <div id="dsq-comment-message-863" class="dsq-comment-message"><p>That&#8217;s one of the best ways I find of solving problems myself.  I use what I call a &#8220;cardboard programmer&#8221;.  Once I explain what I am doing and the problem, the (usually trivial) problem jumps out at me.  If no one is around i try to go through the exercise on my own, but having another pair of eyes on the code is a good thing, especially when they ask questions.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-3" id="dsq-comment-869">
        <div id="dsq-comment-header-869" class="dsq-comment-header">
            <cite id="dsq-cite-869">
                <span id="dsq-author-user-869">Kevin T</span>
            </cite>
        </div>
        <div id="dsq-comment-body-869" class="dsq-comment-body">
            <div id="dsq-comment-message-869" class="dsq-comment-message"><p>I heard once from a coworker that at a prior job of his, someone often kept a dog in the office, that became known as the &#8220;code dog&#8221;.  Describing your problem out loud to the code dog would often be enough to help solve it.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-3" id="dsq-comment-875">
        <div id="dsq-comment-header-875" class="dsq-comment-header">
            <cite id="dsq-cite-875">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-875">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-875" class="dsq-comment-body">
            <div id="dsq-comment-message-875" class="dsq-comment-message"><p>Yes &#8212; exactly! That&#8217;s &#8220;rubber ducking&#8221; &#8211; <a href="http://en.wikipedia.org/wiki/Rubber_duck_debugging" onclick="javascript:_gaq.push(['_trackEvent','outbound-comment','http://en.wikipedia.org']);" rel="nofollow">http://en.wikipedia.org/wiki/Rubber_duck_debugging</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-3" id="dsq-comment-874">
        <div id="dsq-comment-header-874" class="dsq-comment-header">
            <cite id="dsq-cite-874">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-874">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-874" class="dsq-comment-body">
            <div id="dsq-comment-message-874" class="dsq-comment-message"><p>Having a second set of eyes (or ears) for a problem can be soooo helpful!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-3" id="dsq-comment-902">
        <div id="dsq-comment-header-902" class="dsq-comment-header">
            <cite id="dsq-cite-902">
                <span id="dsq-author-user-902">Walt Sellers</span>
            </cite>
        </div>
        <div id="dsq-comment-body-902" class="dsq-comment-body">
            <div id="dsq-comment-message-902" class="dsq-comment-message"><p>Very often, finding anything depends on how observant you can be (ie &#8220;powers of observation&#8221;.)  And that ability diminishes rapidly as you get tired.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-820">
        <div id="dsq-comment-header-820" class="dsq-comment-header">
            <cite id="dsq-cite-820">
http://twitter.com/hobbified                <span id="dsq-author-user-820">hobbified</span>
            </cite>
        </div>
        <div id="dsq-comment-body-820" class="dsq-comment-body">
            <div id="dsq-comment-message-820" class="dsq-comment-message"><p>#11907 Looking for a compiler bug is the strategy of LAST resort. LAST resort.</p>
<p>- MJD&#8217;s Good Advice and Maxims for Programmers</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-821">
        <div id="dsq-comment-header-821" class="dsq-comment-header">
            <cite id="dsq-cite-821">
                <span id="dsq-author-user-821">Jovan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-821" class="dsq-comment-body">
            <div id="dsq-comment-message-821" class="dsq-comment-message"><p>Do you remember how the fog of war was implemented?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-835">
        <div id="dsq-comment-header-835" class="dsq-comment-header">
            <cite id="dsq-cite-835">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-835">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-835" class="dsq-comment-body">
            <div id="dsq-comment-message-835" class="dsq-comment-message"><p>More or less; it wasn&#8217;t that complicated:</p>
<p>1. Every time a unit moves, use a circular bitmask to mark the adjacent tiles around the unit in the visibility map. Tricky part: perform line of sight calculations based on the terrain map, which included flags for altitude (low/high) and &#8220;can&#8217;t see through&#8221;. This was more or less ray-casting, and was written in assembly language for speed.</p>
<p>2. Use a filter function to smooth the visibility map to achieve a less jagged edges.</p>
<p>3. Use Gouraud shading to smoothly render the fog of war on top of the terrain map.</p>
<p>4. Periodically mark the entire visibility map invisible to close up areas where no units are stationed.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-3" id="dsq-comment-841">
        <div id="dsq-comment-header-841" class="dsq-comment-header">
            <cite id="dsq-cite-841">
                <span id="dsq-author-user-841">nick k</span>
            </cite>
        </div>
        <div id="dsq-comment-body-841" class="dsq-comment-body">
            <div id="dsq-comment-message-841" class="dsq-comment-message"><p>ah yes of course &#8212; simple</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-3" id="dsq-comment-847">
        <div id="dsq-comment-header-847" class="dsq-comment-header">
            <cite id="dsq-cite-847">
http://www.facebook.com/brian.fitzgerald.923171                <span id="dsq-author-user-847">Brian Fitzgerald</span>
            </cite>
        </div>
        <div id="dsq-comment-body-847" class="dsq-comment-body">
            <div id="dsq-comment-message-847" class="dsq-comment-message"><p>What I&#8217;m sad about is that the first version was REALLY FREAKING COOL but had to be cut back to something more sane for CPU budget reasons. If I&#8217;m remembering correctly, that is.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-3" id="dsq-comment-877">
        <div id="dsq-comment-header-877" class="dsq-comment-header">
            <cite id="dsq-cite-877">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-877">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-877" class="dsq-comment-body">
            <div id="dsq-comment-message-877" class="dsq-comment-message"><p>The first version of fog of war which I alluded to in the article had finer resolution but looked awful. For static screenshots it looked good, but when units moved they caused the fog-of-war outline to &#8220;shiver&#8221;. You should go back in source control and try to build that version to see how it looked :)</p>
<p>Also, that code was slow even without the line-of-sight and terrain-height computations; it could never have been optimized enough to include those features.</p>
<p>To make my version near as pretty as the static screenshots of the initial version I had to do visibility-map smoothing with texture filtering *and* Gouraud shading.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-3" id="dsq-comment-888">
        <div id="dsq-comment-header-888" class="dsq-comment-header">
            <cite id="dsq-cite-888">
                <span id="dsq-author-user-888">Jovan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-888" class="dsq-comment-body">
            <div id="dsq-comment-message-888" class="dsq-comment-message"><p>Fantastic response Patrick, thanks a lot :)</p>
<p>From what I remember, the fog of war is only recalculated every Nth frame isn&#8217;t it?</p>
<p>I imagine doing the full on calculations every frame would be a performance issue, and possibly explains why the fog of war lags behind the units by a few seconds in elder RTS games &#8212; just a hunch.</p>
<p>What&#8217;s your take on using an LUT of precomputed shading ramps[1] as opposed to calculating the shading on the fly?</p>
<p>[1] <a href="http://www.appsizematters.com/2010/07/how-to-implement-a-fog-of-war-part-2-smooth/" onclick="javascript:_gaq.push(['_trackEvent','outbound-comment','http://www.appsizematters.com']);" rel="nofollow">http://www.appsizematters.com/2010/07/how-to-implement-a-fog-of-war-part-2-smooth/</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-3" id="dsq-comment-892">
        <div id="dsq-comment-header-892" class="dsq-comment-header">
            <cite id="dsq-cite-892">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-892">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-892" class="dsq-comment-body">
            <div id="dsq-comment-message-892" class="dsq-comment-message"><p>My recollection is that every time a unit changes its tile location (tiles are 32&#215;32 pixels) it updates the visibility map, which means that the update cost is minimal since, in any given game loop, only a few units cross a tile border. Periodically, when the whole map is wiped back to black, all units update the visibility map.</p>
<p>I read the link you provided regarding using precalculated lookup tables (LUT). It looks *much* more computationally intensive than what StarCraft does because he uses a finer resolution for his tables.</p>
<p>In the original StarCraft there are up to 1600 game units active so efficiently marking and rendering the visibility map (on a Pentium-class computer of the day) was critical to having a good frame-rate while leaving enough CPU left over for AI, path-finding and rendering the other layers.</p>
<p>StarCraft marks visibility only for each 32&#215;32 tile. The combination of texture filtering to smush the visibility values makes for a smoother tile-visibility map, then Gouraud shading interpolates those values on a per-pixel basis. This creates a graphically different look &#8212; StarCraft gets a more uniformly smooth shading, whereas the precomputed LUT solution has more rounded shadows.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-822">
        <div id="dsq-comment-header-822" class="dsq-comment-header">
            <cite id="dsq-cite-822">
                <span id="dsq-author-user-822">Steven Hauwsz</span>
            </cite>
        </div>
        <div id="dsq-comment-body-822" class="dsq-comment-body">
            <div id="dsq-comment-message-822" class="dsq-comment-message"><p>I recall devastating, game-wrecking exploits that were widely used in both multiplayer Warcraft II and Starcraft I which often took months for Blizzard to fix, if at all. Has Blizzard or the rest of the game industry learned from and responded to this phenomenon by releasing more bulletproof products at launch?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-833">
        <div id="dsq-comment-header-833" class="dsq-comment-header">
            <cite id="dsq-cite-833">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-833">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-833" class="dsq-comment-body">
            <div id="dsq-comment-message-833" class="dsq-comment-message"><p>In regards to fixing exploits quickly, Blizzard had patch paralysis. StarCraft 1.08, which included game-recording, was finished a month before I left Blizzard in Feburary 2000 but wasn&#8217;t released for many months afterwards.</p>
<p>My co-founders and I aimed to address this problem by engineering the development culture at ArenaNet to focus on iteration. Starting in around April 2001 we pushed live builds to our external alpha testers (eventually numbering thousands of folks) every day. Over the four years until launch we pushed on average 20 builds per weekday.</p>
<p>When you can iterate that fast it becomes easy to fix exploits, but only a few companies put in the effort to build that type of development pipeline.</p>
<p>Part of the issue is that, for MMO projects, the dev team only gets one &#8220;at bat&#8221; every five years, so the learning cycle is much slower than for other online games.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-823">
        <div id="dsq-comment-header-823" class="dsq-comment-header">
            <cite id="dsq-cite-823">
                <span id="dsq-author-user-823">Ben Tilly</span>
            </cite>
        </div>
        <div id="dsq-comment-body-823" class="dsq-comment-body">
            <div id="dsq-comment-message-823" class="dsq-comment-message"><p>There is a quote attributed to Ken Arnold that I think predates Bob Fitch&#8217;s version that you presented.  &#8220;Every program has at least one bug and can be shortened by at least one instruction — from which, by induction, it is evident that every program can be reduced to one instruction that does not work.*</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-832">
        <div id="dsq-comment-header-832" class="dsq-comment-header">
            <cite id="dsq-cite-832">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-832">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-832" class="dsq-comment-body">
            <div id="dsq-comment-message-832" class="dsq-comment-message"><p>Huh, hadn&#8217;t heard that one. I wonder if Bob came up with his thought independently or dredged up Ken&#8217;s quote from some subconscious remembrance. </p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-825">
        <div id="dsq-comment-header-825" class="dsq-comment-header">
            <cite id="dsq-cite-825">
http://twitter.com/cthonctic                <span id="dsq-author-user-825">Cthonctic</span>
            </cite>
        </div>
        <div id="dsq-comment-body-825" class="dsq-comment-body">
            <div id="dsq-comment-message-825" class="dsq-comment-message"><p>Awesome article, very entertaining and enlightening.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-827">
        <div id="dsq-comment-header-827" class="dsq-comment-header">
            <cite id="dsq-cite-827">
                <span id="dsq-author-user-827">Andy Lee</span>
            </cite>
        </div>
        <div id="dsq-comment-body-827" class="dsq-comment-body">
            <div id="dsq-comment-message-827" class="dsq-comment-message"><p>What a fantastic read. Thank you for writing it.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-829">
        <div id="dsq-comment-header-829" class="dsq-comment-header">
            <cite id="dsq-cite-829">
http://www.facebook.com/laurens.rodriguez.oscanoa                <span id="dsq-author-user-829">Laurens Rodriguez</span>
            </cite>
        </div>
        <div id="dsq-comment-body-829" class="dsq-comment-body">
            <div id="dsq-comment-message-829" class="dsq-comment-message"><p>Open sourcing Starcraft would be epic, please please please! :D</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-870">
        <div id="dsq-comment-header-870" class="dsq-comment-header">
            <cite id="dsq-cite-870">
http://twitter.com/agmcleod                <span id="dsq-author-user-870">Aaron McLeod</span>
            </cite>
        </div>
        <div id="dsq-comment-body-870" class="dsq-comment-body">
            <div id="dsq-comment-message-870" class="dsq-comment-message"><p>It would for sure. But obviously that would be up to blizzard, not him ;)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-1114">
        <div id="dsq-comment-header-1114" class="dsq-comment-header">
            <cite id="dsq-cite-1114">
                <span id="dsq-author-user-1114">Cleroth Sun</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1114" class="dsq-comment-body">
            <div id="dsq-comment-message-1114" class="dsq-comment-message"><p>It&#8217;ll be opensource&#8230; when it no longer serves any purpose.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-834">
        <div id="dsq-comment-header-834" class="dsq-comment-header">
            <cite id="dsq-cite-834">
                <span id="dsq-author-user-834">Gabriel Friedmann</span>
            </cite>
        </div>
        <div id="dsq-comment-body-834" class="dsq-comment-body">
            <div id="dsq-comment-message-834" class="dsq-comment-message"><p>Today my story was one of bug-hunting a feature failure to end up finding a compiler bug. I was doing some pretty gnarly things with Mono.Cecil to edit .NET intermediary language (similar to java bytecode). Bonus part of the story: the lame case was so abstract that i was still able to use Mono.Cecil to edit the bug out of itself so i could recompile my initial target without bug manifestation. </p>
<p>Also, the hyperlink in this article to &#8220;overclocking&#8221; is broken.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-839">
        <div id="dsq-comment-header-839" class="dsq-comment-header">
            <cite id="dsq-cite-839">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-839">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-839" class="dsq-comment-body">
            <div id="dsq-comment-message-839" class="dsq-comment-message"><p>Thanks Gabe; link fixed!</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-838">
        <div id="dsq-comment-header-838" class="dsq-comment-header">
            <cite id="dsq-cite-838">
                <span id="dsq-author-user-838">mm0zct</span>
            </cite>
        </div>
        <div id="dsq-comment-body-838" class="dsq-comment-body">
            <div id="dsq-comment-message-838" class="dsq-comment-message"><p>I must confess it took me far too long to realize that your first bug was that the code was NOT being reached, I usually put something in that case to flag up if we get into &#8220;unreachable&#8221; state to catch bugs, it didn&#8217;t occur to me that you expected it to be able to reach that line. The dangers of sleep deprived programming.</p>
<p>It is similar in a way to the if( foo =! 0 ) bug that I took a good hour or two to find once though. My brain refused to read that as anything other than the (foo != 0) that was intended.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-840">
        <div id="dsq-comment-header-840" class="dsq-comment-header">
            <cite id="dsq-cite-840">
http://www.facebook.com/people/Dan-Kaminsky/515164691                <span id="dsq-author-user-840">Dan Kaminsky</span>
            </cite>
        </div>
        <div id="dsq-comment-body-840" class="dsq-comment-body">
            <div id="dsq-comment-message-840" class="dsq-comment-message"><p>This is fantastic.  So few people have any context for large scale software development.  Thank you so much for your time spent writing!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-843">
        <div id="dsq-comment-header-843" class="dsq-comment-header">
            <cite id="dsq-cite-843">
http://www.ericfleischman.com/                <span id="dsq-author-user-843">Eric Fleischman</span>
            </cite>
        </div>
        <div id="dsq-comment-body-843" class="dsq-comment-body">
            <div id="dsq-comment-message-843" class="dsq-comment-message"><p>You haven&#8217;t lived until you talk to guys @ Intel and start the conversation with &#8220;what i&#8217;m seeing doesn&#8217;t make sense, I think it&#8217;s a bug in your layer, but I can&#8217;t prove that.&#8221; I feel your pain. Spending a few years debugging random problems @ Microsoft was a ton of fun.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-845">
        <div id="dsq-comment-header-845" class="dsq-comment-header">
            <cite id="dsq-cite-845">
                <span id="dsq-author-user-845">paperino</span>
            </cite>
        </div>
        <div id="dsq-comment-body-845" class="dsq-comment-body">
            <div id="dsq-comment-message-845" class="dsq-comment-message"><p>I found a compiler bug myself in the glorious Borland C++ for Windows 3.1. Under certain conditions, the optimizer would double generate the code for the postincrement operator. The hardest part was trying to figure it out, since debugging or adding instrumentation, would alter the conditions around the optimizer&#8230;..</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-848">
        <div id="dsq-comment-header-848" class="dsq-comment-header">
            <cite id="dsq-cite-848">
                <span id="dsq-author-user-848">Wim Rijnders</span>
            </cite>
        </div>
        <div id="dsq-comment-body-848" class="dsq-comment-body">
            <div id="dsq-comment-message-848" class="dsq-comment-message"><p>&#8220;&#8230;the “no crunch” philosophy was a cornerstone of our development effort&#8230;. Work, go home at a reasonable time, come back fresh!&#8221;</p>
<p>So true. Wish I could stop forgetting it so often!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-849">
        <div id="dsq-comment-header-849" class="dsq-comment-header">
            <cite id="dsq-cite-849">
                <span id="dsq-author-user-849">M</span>
            </cite>
        </div>
        <div id="dsq-comment-body-849" class="dsq-comment-body">
            <div id="dsq-comment-message-849" class="dsq-comment-message"><p>Wonderful post again, I really enjoy reading them.<br />
However, I miss the sense, from previous posts, of an article written by a programmer for programmers. Does the audience that requires terms like &#8220;push&#8221; to be double-quoted actually want to read such code-centric stories?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-884">
        <div id="dsq-comment-header-884" class="dsq-comment-header">
            <cite id="dsq-cite-884">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-884">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-884" class="dsq-comment-body">
            <div id="dsq-comment-message-884" class="dsq-comment-message"><p>Finding the right level of technical detail in my articles is the biggest challenge I have in telling these stories.</p>
<p>Should I tell stories that all Warcraft/StarCraft/Guild Wars players can read, or aim for the technical folks?</p>
<p>Who *is* my audience? I have no idea. So I write the article and then &#8212; during the editing phase &#8212; add bits and pieces to explain the jargon, hence &#8220;push&#8221; and &#8220;what is a compiler&#8221;.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-890">
        <div id="dsq-comment-header-890" class="dsq-comment-header">
            <cite id="dsq-cite-890">
                <span id="dsq-author-user-890">Jovan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-890" class="dsq-comment-body">
            <div id="dsq-comment-message-890" class="dsq-comment-message"><p>Really digging the technical side of the articles though! There simply aren&#8217;t enough journals out there about how game development was done during the 90s.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-850">
        <div id="dsq-comment-header-850" class="dsq-comment-header">
            <cite id="dsq-cite-850">
                <span id="dsq-author-user-850">Dorjan</span>
            </cite>
        </div>
        <div id="dsq-comment-body-850" class="dsq-comment-body">
            <div id="dsq-comment-message-850" class="dsq-comment-message"><p>You sir, are a legend and a decent writer to boot. Jealous :)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-851">
        <div id="dsq-comment-header-851" class="dsq-comment-header">
            <cite id="dsq-cite-851">
                <span id="dsq-author-user-851">Emjayen</span>
            </cite>
        </div>
        <div id="dsq-comment-body-851" class="dsq-comment-body">
            <div id="dsq-comment-message-851" class="dsq-comment-message"><p>It&#8217;s a shame you don&#8217;t work at ArenaNet anymore. There was a bug  in Guild Wars 2 causing a fatal crash that took them a good 2 months and several patches to fix even though I submitted multiple reports of increasing clarity on how to fix the very simple problem (insufficient working set size manifested as an &#8220;out of memory&#8221; error)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-852">
        <div id="dsq-comment-header-852" class="dsq-comment-header">
            <cite id="dsq-cite-852">
                <span id="dsq-author-user-852">Michel</span>
            </cite>
        </div>
        <div id="dsq-comment-body-852" class="dsq-comment-body">
            <div id="dsq-comment-message-852" class="dsq-comment-message"><p>I don&#8217;t understand what was so hard about the first bug. Of course I&#8217;m just a small time hobby programmer and your tools and workflows will be way more complicated, but if you had just added a (conditional) breakpoint or a &#8220;cout&#8221; there, you would have immediately seen that the code was not reached. Then you could start setting breakpoints further up to figure out which parts were reached, and you would have rapidly solved the bug. I&#8217;m assuming you have oversimplified the example and it was a bit more complicated than that?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-857">
        <div id="dsq-comment-header-857" class="dsq-comment-header">
            <cite id="dsq-cite-857">
http://www.facebook.com/SuperMegaLodewyk                <span id="dsq-author-user-857">Lodewyk Duminy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-857" class="dsq-comment-body">
            <div id="dsq-comment-message-857" class="dsq-comment-message"><p>It would most likely have been more complicated than that, and there was code between the 2 points, making it slightly harder to actually see the problem.</p>
<p>I think the problem was also that he was tired at the time, and as a result not focusing properly.</p>
<p>This rarely happens where I work, because we have a test-driven development environment. Testcases would have alerted us of the bug and made it easier to fix. The obvious downside of this is that development is a lot slower, making it an undesirable way to produce games, I guess.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-858">
        <div id="dsq-comment-header-858" class="dsq-comment-header">
            <cite id="dsq-cite-858">
http://www.facebook.com/NaibStilgar                <span id="dsq-author-user-858">Stilgar Naib</span>
            </cite>
        </div>
        <div id="dsq-comment-body-858" class="dsq-comment-body">
            <div id="dsq-comment-message-858" class="dsq-comment-message"><p>The whole point is that he was tired. Also sometimes even if you are not tired you get stuck in some code and just can&#8217;t see the obvious. If I get stuck especially on &#8220;impossible&#8221; bugs for more than 2 hours I always call a coworker to take a look.</p>
<p>On a side note it turns that verbally explaining the problem helps you solve the problem. It is often the case that you look at a problem for days then you try to explain it to a coworker using actual words and magically you know the solution. Rumor has it that the great Alan Turing had a teddy bear and he explained problems with his work to it just to verbalize the problem and get &#8220;unstuck&#8221;</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-2" id="dsq-comment-883">
        <div id="dsq-comment-header-883" class="dsq-comment-header">
            <cite id="dsq-cite-883">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-883">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-883" class="dsq-comment-body">
            <div id="dsq-comment-message-883" class="dsq-comment-message"><p>Correct; the example was much more complicated than I&#8217;ve shown.</p>
<p>1. It was a spaghetti function that had been hacked on by every programmer on the project.<br />
2. I had thousands of bugs (not *my* bugs, mostly) to triage and tried to fix them as fast as possible. I&#8217;m sure spending more time would have helped.<br />
3. When you think you&#8217;re two months from launch you&#8217;ll make unbelievable sacrifices to finish the game &#8212; we all worked ridiculous hours. But we were two months from launch for a year, and that took a massive toll on our bodies and intellects.</p>
<p>To give you an idea about what it was like, I remember walking into James Phinney&#8217;s (lead designer of StarCraft) office to ask him a question late at night. He said &#8220;wait a second&#8221;, leaned over and barfed in a trash can from exhaustion and sickness, then answered my question and went back to work. At the time I didn&#8217;t think much of it, but in retrospect it was *CRAZY* that we were doing that.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-859">
        <div id="dsq-comment-header-859" class="dsq-comment-header">
            <cite id="dsq-cite-859">
http://www.facebook.com/sharkinu                <span id="dsq-author-user-859">Sparky Sharkinu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-859" class="dsq-comment-body">
            <div id="dsq-comment-message-859" class="dsq-comment-message"><p>&#8220;We wanted to make sure that the ArenaNet and NCsoft staff didn’t have<br />
access to cheat functions because we wanted to create a level playing<br />
field for all players.&#8221;</p>
<p>So this ( <a href="http://wiki.guildwars.com/wiki/BAMPH" onclick="javascript:_gaq.push(['_trackEvent','outbound-comment','http://wiki.guildwars.com']);" rel="nofollow">http://wiki.guildwars.com/wiki/BAMPH</a>! ) was never usable on the live servers?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-881">
        <div id="dsq-comment-header-881" class="dsq-comment-header">
            <cite id="dsq-cite-881">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-881">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-881" class="dsq-comment-body">
            <div id="dsq-comment-message-881" class="dsq-comment-message"><p>Correct.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-860">
        <div id="dsq-comment-header-860" class="dsq-comment-header">
            <cite id="dsq-cite-860">
http://twitter.com/Code_Analysis                <span id="dsq-author-user-860">Andrey Karpov</span>
            </cite>
        </div>
        <div id="dsq-comment-body-860" class="dsq-comment-body">
            <div id="dsq-comment-message-860" class="dsq-comment-message"><p>The compiler is to blame for everything &#8211; <a href="http://www.viva64.com/en/b/0161/" onclick="javascript:_gaq.push(['_trackEvent','outbound-comment','http://www.viva64.com']);" rel="nofollow">http://www.viva64.com/en/b/0161/</a> :-)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-861">
        <div id="dsq-comment-header-861" class="dsq-comment-header">
            <cite id="dsq-cite-861">
                <span id="dsq-author-user-861">Saurabh</span>
            </cite>
        </div>
        <div id="dsq-comment-body-861" class="dsq-comment-body">
            <div id="dsq-comment-message-861" class="dsq-comment-message"><p>&gt;&gt;&gt; I had failed to see that it was impossible for the code to work properly. It’s not possible for a unit to be neither “a harvester” nor “not a harvester”</p>
<p>That might have been true for your code. But can compiler assume such stuff? Where is the guarantee that any of the functions that you call in &#8220;the many lines of code&#8221; cannot modify the value of &#8220;unit&#8221;. Even if unit is a variable on stack what if the caller set a global pointer to the address of unit and some of the function modified it. In my opinion compiler writers make far too many aggressive optimizations that really do not help.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-880">
        <div id="dsq-comment-header-880" class="dsq-comment-header">
            <cite id="dsq-cite-880">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-880">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-880" class="dsq-comment-body">
            <div id="dsq-comment-message-880" class="dsq-comment-message"><p>To clear up the UnitIsHarvester function, it probably looked something like this:</p>
<p>bool UnitIsHarvester (Unit * u) {<br />
  return u-&gt;type == SCV || u-&gt;type == DRONE || u-&gt;type == PROBE;<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-905">
        <div id="dsq-comment-header-905" class="dsq-comment-header">
            <cite id="dsq-cite-905">
                <span id="dsq-author-user-905">CdrJameson</span>
            </cite>
        </div>
        <div id="dsq-comment-body-905" class="dsq-comment-body">
            <div id="dsq-comment-message-905" class="dsq-comment-message"><p>&#8230;but it might be complex enough to stop a static analyzer like Lint automatically picking up this kind of bug.</p>
<p>const bool IsHarvester = UnitIsHarvester();</p>
<p>if (IsHarvester) return A;<br />
&#8230;<br />
if (!IsHarvester) return B;</p>
<p>return C;</p>
<p>&#8230;Would generate an &#8216;unreachable code&#8217; error for the &#8216;return C&#8217; line.</p>
<p>If (UnitIsHarvester()) return A;<br />
&#8230;<br />
If (!UnitIsHarvester()) return B;</p>
<p>return C;</p>
<p>&#8230;may not, as the compiler/analyzer may not know whether any of the lines between the calls change the return value of the function.</p>
<p>Fortunately, these days we all use static analyzers to find this kind of bug. Don&#8217;t we?</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-862">
        <div id="dsq-comment-header-862" class="dsq-comment-header">
            <cite id="dsq-cite-862">
http://twitter.com/MrPatrickWright                <span id="dsq-author-user-862">Patrick Wright</span>
            </cite>
        </div>
        <div id="dsq-comment-body-862" class="dsq-comment-body">
            <div id="dsq-comment-message-862" class="dsq-comment-message"><p>Great post!!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-864">
        <div id="dsq-comment-header-864" class="dsq-comment-header">
            <cite id="dsq-cite-864">
                <span id="dsq-author-user-864">Terje Mathisen</span>
            </cite>
        </div>
        <div id="dsq-comment-body-864" class="dsq-comment-body">
            <div id="dsq-comment-message-864" class="dsq-comment-message"><p>Nice article!</p>
<p>You&#8217;ve probably heard (from John Cash?) about the HW problem id Software had when developing Quake:</p>
<p>An intermittent glitch where a single pixel would flash, for a single frame.</p>
<p>After lots &amp; lots of debugging Mike Abrash found out that they had been sold an overclocked Pentium (90-&gt;100 MHz) and the fp unit would sometimes not quite finish all fp operations. :-(</p>
<p>Personally I was involved with the Pentium FDIV debacle, making the first public post about the bug and then writing most of the sw workaround code.</p>
<p>I still think it was quite neat that we could make faulty hardware generate exact results, at a very small (1% or less for most programs) slowdown cost.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-876">
        <div id="dsq-comment-header-876" class="dsq-comment-header">
            <cite id="dsq-cite-876">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-876">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-876" class="dsq-comment-body">
            <div id="dsq-comment-message-876" class="dsq-comment-message"><p>Hadn&#8217;t heard the Quake overclocking story; thanks for sharing.</p>
<p>In regard to the FDIV bug in the Pentium, one thing that surprises me about computer chips is how many &#8220;errata&#8221; (AKA bugs) exist. While FDIV was the most widely publicized, there are many others that software developers (particularly compiler and OS vendors) have to work around!</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-900">
        <div id="dsq-comment-header-900" class="dsq-comment-header">
            <cite id="dsq-cite-900">
                <span id="dsq-author-user-900">Terje Mathisen</span>
            </cite>
        </div>
        <div id="dsq-comment-body-900" class="dsq-comment-body">
            <div id="dsq-comment-message-900" class="dsq-comment-message"><p>Oh Yes, &#8220;erratas&#8221; are very common, but there are definitely a huge step between those that can be (and often has to be) handled by the OS, with no impact at all on any user-mode application, and those (like FDIV) where there is no way for the OS to trap any (possibly) faulty operation and do a fixup.</p>
<p>The FOOF bug was in the former cathegory, I know that the Linux kernel guys found a fix for this that caused effectively zero overhead for all programs.</p>
<p>The most common form of the OS-level erratas are those that are caused by race conditions when updating TLBs, page mapping or other OS-level strucures.</p>
<p>Even pretty severe bugs of this type can be allowed to stay in production chips as long as there is a documented OS-level workaround.</p>
<p>The userland bugs however are far more serious, and much more likely to cause cpu recalls. Compiler workarounds are only useful on architectures with very little actual binary code already in use.</p>
<p>I.e. Linux on a brand new platform can live well for quite a while if a gcc fix and recompile suffices, while Windows will crash &amp; burn in the same scenario.</p>
<p>Similarly, any Android smart phone can use the Dalvik virtual machine to work around many hw glitches.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-865">
        <div id="dsq-comment-header-865" class="dsq-comment-header">
            <cite id="dsq-cite-865">
                <span id="dsq-author-user-865">Zavie</span>
            </cite>
        </div>
        <div id="dsq-comment-body-865" class="dsq-comment-body">
            <div id="dsq-comment-message-865" class="dsq-comment-message"><p>That idea of checking some results to detect faulty hardware is brilliant. I&#8217;ll keep it in my toolbox. Thanks for the very interesting read.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-866">
        <div id="dsq-comment-header-866" class="dsq-comment-header">
            <cite id="dsq-cite-866">
                <span id="dsq-author-user-866">mwkaufmann</span>
            </cite>
        </div>
        <div id="dsq-comment-body-866" class="dsq-comment-body">
            <div id="dsq-comment-message-866" class="dsq-comment-message"><p>And this is the reason why I love working in Software Development. It&#8217;s because of people like Patrick. There is hardly another field where people are so modest and honest about their errors after they have accomplished so much.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-867">
        <div id="dsq-comment-header-867" class="dsq-comment-header">
            <cite id="dsq-cite-867">
                <span id="dsq-author-user-867">Martin</span>
            </cite>
        </div>
        <div id="dsq-comment-body-867" class="dsq-comment-body">
            <div id="dsq-comment-message-867" class="dsq-comment-message"><p>&gt;&gt; It’s not possible for a unit to be neither “a harvester” nor “not a harvester”. </p>
<p>not at the same time, but in many lines of code between the 2 checks, the state of the unit object might have changed, or the unit variable might be reused to point to a new object</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-879">
        <div id="dsq-comment-header-879" class="dsq-comment-header">
            <cite id="dsq-cite-879">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-879">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-879" class="dsq-comment-body">
            <div id="dsq-comment-message-879" class="dsq-comment-message"><p>Those cases would be classified as bugs in StarCraft; units couldn&#8217;t convert types on the fly.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-868">
        <div id="dsq-comment-header-868" class="dsq-comment-header">
            <cite id="dsq-cite-868">
                <span id="dsq-author-user-868">Joshua Burns</span>
            </cite>
        </div>
        <div id="dsq-comment-body-868" class="dsq-comment-body">
            <div id="dsq-comment-message-868" class="dsq-comment-message"><p>Absolutely excellent article thanks for taking the time to write this! It&#8217;s interesting to have an inside view of the development process to one of my favorite games of all time (Star Craft).</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-871">
        <div id="dsq-comment-header-871" class="dsq-comment-header">
            <cite id="dsq-cite-871">
                <span id="dsq-author-user-871">Nagling Considered Harmful</span>
            </cite>
        </div>
        <div id="dsq-comment-body-871" class="dsq-comment-body">
            <div id="dsq-comment-message-871" class="dsq-comment-message"><p>Then there&#8217;s the bug that was a feature decades ago: Nagle&#8217;s Algorithm. Many online games don&#8217;t turn off Nagling despite it increasing latency. For interactive stuff, throughput should be secondary to lower latency. Nagling belongs in the past &#8211; it attempts to fix application/protocol level bugs at the wrong layer. On modern networks Nagling combined with selective acknowledgement may have caused more network performance problems than they have solved.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-878">
        <div id="dsq-comment-header-878" class="dsq-comment-header">
            <cite id="dsq-cite-878">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-878">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-878" class="dsq-comment-body">
            <div id="dsq-comment-message-878" class="dsq-comment-message"><p>Oh, Nagle&#8217;s Algorithm is still important, but you&#8217;re right that it should be disabled for game-traffic.</p>
<p>For Guild Wars we left Nagling on for file-patching and server-to-server traffic, but turned it off for client-&gt;server and server-&gt;client traffic. There was some special case code I barely remember where the game server turned on Nagling under some circumstances (high latency, I believe), and it improved throughput by reducing packets-in-flight and hence per-message-overhead, for modem players.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-3" id="dsq-comment-887">
        <div id="dsq-comment-header-887" class="dsq-comment-header">
            <cite id="dsq-cite-887">
                <span id="dsq-author-user-887">Nagling Considered Harmful</span>
            </cite>
        </div>
        <div id="dsq-comment-body-887" class="dsq-comment-body">
            <div id="dsq-comment-message-887" class="dsq-comment-message"><p>Sure that&#8217;s right? If there&#8217;s high latency make latency worse? I guess that explains my trans-Pacific GW1 ping! I can understand turning it on for bulk-transfers, but seems bad for anything that&#8217;s latency sensitive, whether server-server, or modem comms, unless bandwidth is extremely constrained. Not sure how many 56k GW modem players there were/are, but having a semi-random 200+ milliseconds added on top of a 200ms link doesn&#8217;t make mesmers happy ;). In my opinion if messages should be grouped together it&#8217;s a &#8220;bug&#8221; that should be fixed at the application layer not the network/transport level. So whose bug is this anyway? :)</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-3" id="dsq-comment-912">
        <div id="dsq-comment-header-912" class="dsq-comment-header">
            <cite id="dsq-cite-912">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-912">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-912" class="dsq-comment-body">
            <div id="dsq-comment-message-912" class="dsq-comment-message"><p>I wish I had access to the code so I could tell you more; I wrote low-level async socket code and mid-level application protocol, but did not write the code that enables/disables Nagling &#8212; that part was in the application layer.</p>
<p>You&#8217;re right that enabling Nagling would add semi-random 200+ millisecond gaps between sends, which would increase latency. The default was that Nagling was off for server-&gt;client code, but would occasionally be turned on by the application layer code. In my previous post I said it was turned on for &#8220;high latency&#8221;, but a better guess is that the code was trying to detect congestion and turning on Nagling to reduce the number of packets, at the expense of increasing sending time (because messages get queued by the OS until the Nagling delay expires). Wish I could tell you more but that&#8217;s about all I can dredge up from code that written back in 2004 by someone else!</p>
<p>However &#8230; Guild Wars actually plays really well on modems and low-bandwidth connections. Our two &#8220;torture tests&#8221; were three players in Australia sharing a 56K modem and playing on our Los Angeles servers, and eight players in India sharing a 110K DSL line playing on those same Los Angeles servers, and in both cases the game worked well.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even depth-3" id="dsq-comment-916">
        <div id="dsq-comment-header-916" class="dsq-comment-header">
            <cite id="dsq-cite-916">
                <span id="dsq-author-user-916">Nagling Considered Harmful</span>
            </cite>
        </div>
        <div id="dsq-comment-body-916" class="dsq-comment-body">
            <div id="dsq-comment-message-916" class="dsq-comment-message"><p>Thanks very much for your response. Yes Guild Wars does work on low-bandwidth connections. I&#8217;m just unhappy with the random additional 200 ms latency I seem to be getting &#8211; I have a 10Mbps connection that&#8217;s 200ms away from the GW servers, but I get 200-400+ ping.  I do understand that 7 years ago a lot more gamers had 56k modems. But I hope that newer games won&#8217;t do this sort of thing, or they&#8217;d turn Nagling off server side and make Nagling configurable on the client side (since for most low bandwidth clients upload bandwidth is less than download). An extra 40 bytes 60 times a second (60fps) is only an additional 19.2Kbps. That would likely be a bad case scenario too.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-873">
        <div id="dsq-comment-header-873" class="dsq-comment-header">
            <cite id="dsq-cite-873">
                <span id="dsq-author-user-873">rktsci</span>
            </cite>
        </div>
        <div id="dsq-comment-body-873" class="dsq-comment-body">
            <div id="dsq-comment-message-873" class="dsq-comment-message"><p>In my programming career, I found a compiler bug in the IBM PL/I compiler for the 370 series mainframe in subscripted labels. (Yes, you could do a &#8220;goto label(x);&#8221;. I was messing around with the compiler on a summer job.)<br />
I also found a very subtle bug in Perkin-Elmer&#8217;s OS/32, while working on a device driver for a custom I/O board. The PE hardware had a DMA controller you could hand off data transfers to via a well-developed API. If a DMA transfer was going from a block of memory that had been loaded into the same physical address as it&#8217;s virtual address, the subroutine assumed that the transfer was being done on behalf of the OS, not a user program, and the transfer was done without virtual address translation. So it would transfer to the wrong location in the machine and cause a crash. I found this one by putting a unique data pattern into the source location, doing the transfer, getting a dump of all 16 meg of the system memory, finding the data pattern, having an ah-ha moment, and talking to PE. Our workaround was to tell the linker to put the data blocks outside the physical address limits of the machine, upt at the top of the virtual address space.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-882">
        <div id="dsq-comment-header-882" class="dsq-comment-header">
            <cite id="dsq-cite-882">
http://www.facebook.com/crysalim                <span id="dsq-author-user-882">Chris Riccobono</span>
            </cite>
        </div>
        <div id="dsq-comment-body-882" class="dsq-comment-body">
            <div id="dsq-comment-message-882" class="dsq-comment-message"><p>This is a fantastic article, not only because of the content but the references you cite.  In particular, the documents on templates and language complexity are awesome (especially to a novice/intermediate programmer like me)</p>
<p>Being on the other side of the fence has shown me how weird troubleshooting hardware problems can be.  There&#8217;s one bug I have run into 3 or 4 times in particular that is absolutely beyond me: if I alt-tab too many times in Windows 7, especially while playing World of Warcraft, my computer can freeze.</p>
<p>This ends up not being a normal freeze &#8211; the computer can&#8217;t even boot correctly afterwards!  The specific error says &#8220;BOOTMGR is missing, ctrl del alt to restart&#8221;, and can only be rectified with a repair from an install dvd.</p>
<p>It can be something with my computer in general, with all games, with my habit of alt tabbing too much and too often, or something else completely.  I hope one day to actually figure it out though.. haha.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-889">
        <div id="dsq-comment-header-889" class="dsq-comment-header">
            <cite id="dsq-cite-889">
                <span id="dsq-author-user-889">Guilherme Gibertoni</span>
            </cite>
        </div>
        <div id="dsq-comment-body-889" class="dsq-comment-body">
            <div id="dsq-comment-message-889" class="dsq-comment-message"><p>Great post. I&#8217;ve stumbled to bugs that &#8217;til today I don&#8217;t know what was going on.<br />
The best solution for me is to explain my code to someone and eventually rewrite it, module by module and observing its effects.<br />
I prefer &#8220;losing&#8221; time in rewriting the code exactly how it is than looking lines up and down and not figuring out the problem.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-891">
        <div id="dsq-comment-header-891" class="dsq-comment-header">
            <cite id="dsq-cite-891">
http://twitter.com/LyndonArmitage                <span id="dsq-author-user-891">Lyndon Armitage</span>
            </cite>
        </div>
        <div id="dsq-comment-body-891" class="dsq-comment-body">
            <div id="dsq-comment-message-891" class="dsq-comment-message"><p>Really good article! Thanks for sharing your insight!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-895">
        <div id="dsq-comment-header-895" class="dsq-comment-header">
            <cite id="dsq-cite-895">
                <span id="dsq-author-user-895">Gunther</span>
            </cite>
        </div>
        <div id="dsq-comment-body-895" class="dsq-comment-body">
            <div id="dsq-comment-message-895" class="dsq-comment-message"><p>TL;DR.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-897">
        <div id="dsq-comment-header-897" class="dsq-comment-header">
            <cite id="dsq-cite-897">
http://www.doc.ic.ac.uk/~lwy08                <span id="dsq-author-user-897">Lee Wei Yeong</span>
            </cite>
        </div>
        <div id="dsq-comment-body-897" class="dsq-comment-body">
            <div id="dsq-comment-message-897" class="dsq-comment-message"><p>Any idea where the OsStress module is hosted? github?</p>
</div>
        </div>

    <ul class="children">
    <li class="comment odd alt depth-2" id="dsq-comment-911">
        <div id="dsq-comment-header-911" class="dsq-comment-header">
            <cite id="dsq-cite-911">
http://www.codeofhonor.com/blog                <span id="dsq-author-user-911">Patrick Wyatt</span>
            </cite>
        </div>
        <div id="dsq-comment-body-911" class="dsq-comment-body">
            <div id="dsq-comment-message-911" class="dsq-comment-message"><p>The source code is part of the Guild Wars code base owned by ArenaNet, and is not public, I&#8217;m afraid.</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-913">
        <div id="dsq-comment-header-913" class="dsq-comment-header">
            <cite id="dsq-cite-913">
                <span id="dsq-author-user-913">Paul</span>
            </cite>
        </div>
        <div id="dsq-comment-body-913" class="dsq-comment-body">
            <div id="dsq-comment-message-913" class="dsq-comment-message"><p>In addition to the technical insight I gained from your articles, I&#8217;ve had some good laughs. Thanks for sharing, Patrick!</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-914">
        <div id="dsq-comment-header-914" class="dsq-comment-header">
            <cite id="dsq-cite-914">
                <span id="dsq-author-user-914">CiC</span>
            </cite>
        </div>
        <div id="dsq-comment-body-914" class="dsq-comment-body">
            <div id="dsq-comment-message-914" class="dsq-comment-message"><p>A related blog about how redis detects memory errors:<br />
<a href="http://antirez.com/news/43" onclick="javascript:_gaq.push(['_trackEvent','outbound-comment','http://antirez.com']);" rel="nofollow">http://antirez.com/news/43</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-918">
        <div id="dsq-comment-header-918" class="dsq-comment-header">
            <cite id="dsq-cite-918">
                <span id="dsq-author-user-918">xboi209</span>
            </cite>
        </div>
        <div id="dsq-comment-body-918" class="dsq-comment-body">
            <div id="dsq-comment-message-918" class="dsq-comment-message"><p>I feel like I can relate a bit to this article, I do some of coding in Javascript and some CSS and when people don&#8217;t update their web browsers(GRR IE6!!!) they get different results which however I test it with my updated web browser, I get perfectly good results :D</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-936">
        <div id="dsq-comment-header-936" class="dsq-comment-header">
            <cite id="dsq-cite-936">
                <span id="dsq-author-user-936">Justin</span>
            </cite>
        </div>
        <div id="dsq-comment-body-936" class="dsq-comment-body">
            <div id="dsq-comment-message-936" class="dsq-comment-message"><p>I can&#8217;t wait for the story on how pro SC players effected your work.  You made it sound as if it had a profound impact in you how crazy those players were at the game.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-1115">
        <div id="dsq-comment-header-1115" class="dsq-comment-header">
            <cite id="dsq-cite-1115">
                <span id="dsq-author-user-1115">Cleroth Sun</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1115" class="dsq-comment-body">
            <div id="dsq-comment-message-1115" class="dsq-comment-message"><p>Affected*</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-937">
        <div id="dsq-comment-header-937" class="dsq-comment-header">
            <cite id="dsq-cite-937">
http://twitter.com/soy_yuma                <span id="dsq-author-user-937">Alejandro Cámara</span>
            </cite>
        </div>
        <div id="dsq-comment-body-937" class="dsq-comment-body">
            <div id="dsq-comment-message-937" class="dsq-comment-message"><p>It would have been terrific if you had taken statistics on the amount of bug reports in summer vs winter (on the North Hemisphere) to see the heat impact on HW.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-940">
        <div id="dsq-comment-header-940" class="dsq-comment-header">
            <cite id="dsq-cite-940">
                <span id="dsq-author-user-940">Mai Hanafy</span>
            </cite>
        </div>
        <div id="dsq-comment-body-940" class="dsq-comment-body">
            <div id="dsq-comment-message-940" class="dsq-comment-message"><p>thanks ..</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-1107">
        <div id="dsq-comment-header-1107" class="dsq-comment-header">
            <cite id="dsq-cite-1107">
                <span id="dsq-author-user-1107">KamronBennett</span>
            </cite>
        </div>
        <div id="dsq-comment-body-1107" class="dsq-comment-body">
            <div id="dsq-comment-message-1107" class="dsq-comment-message"><p>Loved the article. As a beginner sometimes you think you made some silly newbie mistake when in fact it is something else but this has motivated me into continuing because it is in fact possible for the machine to fail and not always me. Loved it!</p>
</div>
        </div>

    </li><!-- #comment-## -->
            </ul>


        </div>

    </div>

<script type="text/javascript">
/* <![CDATA[ */
    var disqus_url = 'http://www.codeofhonor.com/blog/whose-bug-is-this-anyway';
    var disqus_identifier = '529 http://www.codeofhonor.com/blog/?p=529';
    var disqus_container_id = 'disqus_thread';
    var disqus_domain = 'disqus.com';
    var disqus_shortname = 'codeofhonor';
    var disqus_title = "Whose bug is this anyway?!?";
        var disqus_config = function () {
        var config = this; // Access to the config object
        config.language = '';

        /*
           All currently supported events:
            * preData — fires just before we request for initial data
            * preInit - fires after we get initial data but before we load any dependencies
            * onInit  - fires when all dependencies are resolved but before dtpl template is rendered
            * afterRender - fires when template is rendered but before we show it
            * onReady - everything is done
         */

        config.callbacks.preData.push(function() {
            // clear out the container (its filled for SEO/legacy purposes)
            document.getElementById(disqus_container_id).innerHTML = '';
        });
                config.callbacks.onReady.push(function() {
            // sync comments in the background so we don't block the page
            var script = document.createElement('script');
            script.async = true;
            script.src = '?cf_action=sync_comments&post_id=529';

            var firstScript = document.getElementsByTagName( "script" )[0];
            firstScript.parentNode.insertBefore(script, firstScript);
        });
                    };
/* ]]> */
</script>

<script type="text/javascript">
/* <![CDATA[ */
    var DsqLocal = {
        'trackbacks': [
        ],
        'trackback_url': "http:\/\/www.codeofhonor.com\/blog\/whose-bug-is-this-anyway\/trackback"    };
/* ]]> */
</script>

<script type="text/javascript">
/* <![CDATA[ */
(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.' + 'disqus.com' + '/embed.js?pname=wordpress&pver=2.74';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
/* ]]> */
</script>
</div><div id="sidebar" class="sidebar widget-area"><div id="user-profile-2" class="widget user-profile"><div class="widget-wrap"><h4 class="widget-title widgettitle">About Me</h4>
<p><span class="alignleft"><img alt='' src='http://1.gravatar.com/avatar/18dc5791826756ab6b22beb27ff2f92f?s=125&amp;d=retro&amp;r=G' class='avatar avatar-125 photo' height='125' width='125' /></span>I'm Patrick Wyatt, a longtime game developer, and this is my blog. <a class="pagelink" href="http://www.codeofhonor.com/blog/about-me">[Read More …]</a></p>
</div></div>
<div id="nav_menu-4" class="widget widget_nav_menu"><div class="widget-wrap"><div class="menu-social-links-container"><ul id="menu-social-links" class="menu"><li id="menu-item-632" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-632"><a href="http://webcoyote.github.io/" onclick="javascript:_gaq.push(['_trackEvent','outbound-menu','http://webcoyote.github.io']);">GitHub projects overview</a></li>
<li id="menu-item-228" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-228"><a href="https://github.com/webcoyote" onclick="javascript:_gaq.push(['_trackEvent','outbound-menu','http://github.com']);">GitHub projects page</a></li>
<li id="menu-item-229" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-229"><a href="http://www.linkedin.com/in/patrickwyatt" onclick="javascript:_gaq.push(['_trackEvent','outbound-menu','http://www.linkedin.com']);">LinkedIn profile</a></li>
<li id="menu-item-230" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-230"><a href="http://www.mobygames.com/developer/sheet/view/developerId,1019/" onclick="javascript:_gaq.push(['_trackEvent','outbound-menu','http://www.mobygames.com']);">MobyGames rapsheet</a></li>
<li id="menu-item-231" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-231"><a href="http://en.wikipedia.org/wiki/Patrick_Wyatt" onclick="javascript:_gaq.push(['_trackEvent','outbound-menu','http://en.wikipedia.org']);">Wikipedia profile</a></li>
</ul></div></div></div>
<div id="meta-3" class="widget widget_meta"><div class="widget-wrap"><h4 class="widget-title widgettitle">Meta</h4>
			<ul>
						<li><a rel="nofollow" href="https://www.codeofhonor.com/blog/wp-login.php">Log in</a></li>
			<li><a href="http://www.codeofhonor.com/blog/feed" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="http://codeofhonor.disqus.com/latest.rss" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
<li><a href="https://wordpress.org/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>			</ul>
</div></div>
</div></div><div id="sidebar-alt" class="sidebar widget-area"><div id="text-4" class="widget widget_text"><div class="widget-wrap"><h4 class="widget-title widgettitle">Get Code of Honor blog posts sent directly to your inbox</h4>
			<div class="textwidget"><a href="http://eepurl.com/rQU2f" onclick="javascript:_gaq.push(['_trackEvent','outbound-widget','http://eepurl.com']);">Sign me up!</a></div>
		</div></div>
<div id="search-3" class="widget widget_search"><div class="widget-wrap"><form method="get" class="searchform search-form" action="http://www.codeofhonor.com/blog/" role="search" ><input type="text" value="Search this website&#x2026;" name="s" class="s search-input" onfocus="if (&#039;Search this website&#x2026;&#039; === this.value) {this.value = &#039;&#039;;}" onblur="if (&#039;&#039; === this.value) {this.value = &#039;Search this website&#x2026;&#039;;}" /><input type="submit" class="searchsubmit search-submit" value="Search" /></form></div></div>
</div></div></div><div id="footer" class="footer"><div class="wrap"><div class="gototop">
    <p><a href="#wrap" rel="nofollow">Return to top of page</a></p>
</div>
<div class="creds">
    <p>Copyright &copy; 2014 &middot; <a href="http://www.codeofhonor.com/blog/" title="Code of Honor">Code of Honor</a> by Patrick Wyatt</p>
</div></div></div></div>    <script type="text/javascript">
    // <![CDATA[
        var disqus_shortname = 'codeofhonor';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) url = url[0];
                    else url = url[1]
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + 'disqus.com/forums/' + disqus_shortname + '/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
    //]]>
    </script>

	<script type="text/javascript">
		WPCOM_sharing_counts = {"http:\/\/www.codeofhonor.com\/blog\/whose-bug-is-this-anyway":529}	</script>
	<div id="sharing_email" style="display: none;">
		<form action="/blog/whose-bug-is-this-anyway" method="post">
			<label for="target_email">Send to Email Address</label>
			<input type="email" name="target_email" id="target_email" value="" />

			
				<label for="source_name">Your Name</label>
				<input type="text" name="source_name" id="source_name" value="" />

				<label for="source_email">Your Email Address</label>
				<input type="email" name="source_email" id="source_email" value="" />

			
			
			<img style="float: right; display: none" class="loading" src="http://www.codeofhonor.com/blog/wp-content/plugins/jetpack/modules/sharedaddy/images/loading.gif" alt="loading" width="16" height="16" />
			<input type="submit" value="Send Email" class="sharing_send" />
			<a href="#cancel" class="sharing_cancel">Cancel</a>

			<div class="errors errors-1" style="display: none;">
				Post was not sent - check your email addresses!			</div>

			<div class="errors errors-2" style="display: none;">
				Email check failed, please try again			</div>

			<div class="errors errors-3" style="display: none;">
				Sorry, your blog cannot share posts by email.			</div>
		</form>
	</div>
		<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-twitter' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-google-plus-1' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomgoogle-plus-1', 'menubar=1,resizable=1,width=480,height=550' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-facebook' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-linkedin' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomlinkedin', 'menubar=1,resizable=1,width=580,height=450' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-tumblr' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomtumblr', 'menubar=1,resizable=1,width=450,height=450' );
				return false;
			});
		});
		</script>
							<script type="text/javascript">
			jQuery(document).on('ready', function(){
				jQuery('body').on('click', 'a.share-pinterest', function(e){
					e.preventDefault();

					// Load Pinterest Bookmarklet code
					var s = document.createElement("script");
					s.type = "text/javascript";
					s.src = window.location.protocol + "//assets.pinterest.com/js/pinmarklet.js?r=" + ( Math.random() * 99999999 );
					var x = document.getElementsByTagName("script")[0];
					x.parentNode.insertBefore(s, x);

					// Trigger Stats
					var s = document.createElement("script");
					s.type = "text/javascript";
					s.src = this + ( this.toString().indexOf( '?' ) ? '&' : '?' ) + 'js_only=1';
					var x = document.getElementsByTagName("script")[0];
					x.parentNode.insertBefore(s, x);
				});
			});
			</script>
		<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201425'></script>
<script type='text/javascript' src='http://www.codeofhonor.com/blog/wp-includes/js/comment-reply.min.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=1.7.2'></script>
<script type='text/javascript' src='http://www.codeofhonor.com/blog/wp-content/themes/genesis/lib/js/menu/superfish.min.js?ver=1.7.4'></script>
<script type='text/javascript' src='http://www.codeofhonor.com/blog/wp-content/themes/genesis/lib/js/menu/superfish.args.min.js?ver=2.0.2'></script>
<script type='text/javascript' src='http://www.codeofhonor.com/blog/wp-content/themes/genesis/lib/js/menu/superfish.compat.min.js?ver=2.0.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var recaptcha_options = {"lang":"en"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.codeofhonor.com/blog/wp-content/plugins/jetpack/modules/sharedaddy/sharing.js?ver=20121205'></script>

	<script src="http://stats.wordpress.com/e-201425.js" type="text/javascript"></script>
	<script type="text/javascript">
	st_go({v:'ext',j:'1:3.0.1',blog:'29651562',post:'529',tz:'0'});
	var load_cmc = function(){linktracker_init(29651562,529,2);};
	if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
	else load_cmc();
	</script></body>
</html>

<!-- Dynamic page generated in 0.559 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-06-17 23:17:25 -->

<!-- Compression = gzip -->