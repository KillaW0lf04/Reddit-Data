<!DOCTYPE html>
<html lang="en">
<head>

        <title>30 Python Language Features and Tricks You May Not Know About</title>
        <meta charset="utf-8" />
<link href="http://sahandsaba.com/feeds/all.atom.xml" type="application/atom+xml" rel="alternate" title="Math &cup; Code - by Sahand Saba Full Atom Feed" />
<link href="http://sahandsaba.com/feeds/python.atom.xml" type="application/atom+xml" rel="alternate" title="Math &cup; Code - by Sahand Saba Categories Atom Feed" />

        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
        <meta name="description" content="A list of Python tips and tricks. See how many of them you already know. Coding, mathematics, and problem solving - by Sahand Saba." />
        <link rel="shortcut icon" href="http://sahandsaba.com/images/favicon.ico" />

<link rel="stylesheet" href="http://sahandsaba.com/theme/css/gumby.css">
<link rel="stylesheet" href="http://sahandsaba.com/theme/css/pygments.css">
<link rel="stylesheet" href="http://sahandsaba.com/theme/css/main.css">
<link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Droid+Sans+Mono|Open+Sans:300,400,500,600,700">
<script src='//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js' type='text/javascript'></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/modernizr/2.7.1/modernizr.min.js"></script>

<!-- <script src="http://sahandsaba.com/theme/js/libs/modernizr.js"></script> -->
<!-- <script src="http://sahandsaba.com/theme/js/libs/gumby.js"></script> -->
<!-- <script src="http://sahandsaba.com/theme/js/plugins.js"></script> -->

<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      jax: ["input/TeX","input/MathML","output/HTML-CSS","output/NativeMML"],
      extensions: ["tex2jax.js","mml2jax.js","MathMenu.js","MathZoom.js"],
      TeX: {
        extensions: ["AMSmath.js","AMSsymbols.js","noErrors.js","noUndefined.js"]
      },
      showProcessingMessages: true,
      "HTML-CSS": {
          // mtextFontInherit: true,
          availableFonts: ["TeX"],
      },
      config: ["MMLorHTML.js"],
    });
</script>

<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
</head>

<body id="index" class="home">
    <div class="container">
        <div class="row">
<header id="banner" class="eleven columns">
    <h1>
        <a href="http://sahandsaba.com">
            Math &cup; Code <strong> by Sahand Saba </strong>
        </a>
    </h1>
    <ul>
        <li>
            <a href="http://sahandsaba.com/">
                Blog
            </a>
        </li>
        <li>
            <a href="http://sahandsaba.com/pages/about.html">
                About
            </a>
        </li>
    </ul>
</header><div class='row'>
    <div class='fourteen columns'>
        <section id="content" class="body" itemscope itemtype="http://schema.org/Article">
            <header>
                <h2 class="entry-title">
                    <span itemprop="name">30 Python Language Features and Tricks You May Not Know About</span>
                </h2>
            </header>

            <footer class="post-info">
                Posted on 
                    <abbr class="published" 
                    title="2014-03-05T19:57:00" 
                    itemprop="datePublished" 
                    content="2014-03-05">
                        Mar 05, 2014
                    </abbr>

, last modified on
                        <abbr class="published" 
                              title="2014-05-19T10:28:00"
                              itemprop="datePublished" 
                              content="2014-05-19">
                            May 19, 2014
                        </abbr>

                    <address class="vcard author">, by <span itemprop="author" itemscope itemtype="http://schema.org/Person">
                           <span itemprop="name"> Sahand Saba </span>
                        </span>
                    </address>
                    -
                    <a href="http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html" 
                       rel="bookmark"
                       title="Permalink to 30 Python Language Features and Tricks You May Not Know About">
                       Permanent link
                    </a>
            </footer>

            <div class="entry-content">
              <div class="section" id="introduction">
<h2>1&nbsp;&nbsp;&nbsp;Introduction</h2>
<p>Since I started learning Python, I decided to maintain an often
visited list of &quot;tricks&quot;. Any time I saw a piece of code (in an example, on
Stack Overflow, in open source software, etc.) that made me think
&quot;Cool!  I didn't know you could do that!&quot; I experimented with it until I
understood it and then added it to the list. This post is part of that list,
after some cleaning up. If you are an experienced Python programmer, chances
are you already know most of these, though you might still find a few that you
didn't know about. If you are a C, C++ or Java programmer who is learning
Python, or just brand new to programming, then you might find quite a few of
them surprisingly useful, like I did.</p>
<p>Each trick or language feature is demonstrated only through examples,
with no explanation. While I tried my best to make the examples clear,
some of them might still appear cryptic depending on your familiarity level. So
if something still doesn't make sense after looking at the examples, the title
should be clear enough to allow you to use Google for more information on it.</p>
<p>The list is very roughly ordered by difficulty, with the easier and more
commonly known language features and tricks appearing first.</p>
<p>A <a class="reference internal" href="#table-of-contents">table of contents</a> is given at the end.</p>
<dl class="docutils">
<dt><em>Update - April 9th, 2014</em></dt>
<dd>As you can see the article has been growing with currently 38 items in it,
mostly thanks to comments from readers. As such the number 30 in the title
is no longer accurate. However, I chose to leave it as is since that's the
original title the article was shared as, making it more recognizable and
easier to find.</dd>
<dt><em>Update - March 14th, 2014</em></dt>
<dd><a class="reference external" href="http://roycoding.github.io">Roy Keyes</a> made a great suggestion of
turning this article into a GitHub repository to allow readers to make
improvements or additions through pull requests. The repository is now at
<a class="reference external" href="https://github.com/sahands/python-by-example">https://github.com/sahands/python-by-example</a>. Feel free to fork, add
improvements or additions and submit pull requests. I will update this
page periodically with the new additions.</dd>
<dt><em>Update - March 8th, 2014</em></dt>
<dd><p class="first">This article generated a lot of good discussion on Reddit
(<a class="reference external" href="http://redd.it/1zv3q3">http://redd.it/1zv3q3</a>), Hacker News
(<a class="reference external" href="https://news.ycombinator.com/item?id=7365410">https://news.ycombinator.com/item?id=7365410</a>), and in the comments below,
with many readers suggesting great alternatives and improvements. I have
updated the list below to include many of the improvements suggested, and
added a few new items based on suggestions that made me
have one of those &quot;Cool! I didn't know you could do that!&quot; moments. In
particular, I did not know about <tt class="docutils literal">itertools.chain.from_iterable</tt>, and
dictionary comprehensions.</p>
<p class="last">There was also a very interesting discussion about the possibility of some
of the techniques below leading to harder to debug code. My say on it is
that as far as I can see, none of the items below are inherently harder to
debug.  But I can definitely see how they can be taken too far, resulting
in hard to debug, maintain and understand code. Use your best judgment and
if it feels like how short and smart your code is is outweighing how
readable and maintainable it is, then break it down and simplify it. For
example, I think list comprehensions can be very readable and rather easy
to debug and maintain. But a list comprehension inside another list
comprehension that is then passed to <tt class="docutils literal">map</tt> and then to
<tt class="docutils literal">itertools.chain</tt>?  Probably not the best idea!</p>
</dd>
</dl>
<div class="section" id="unpacking">
<h3>1.1&nbsp;&nbsp;&nbsp;Unpacking</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span>
<span class="go">(1, 2, 3)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span>
<span class="go">(1, 2, 3)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span>
<span class="go">(1, 3, 5)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">,</span> <span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">),</span> <span class="n">d</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="mi">4</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span>
<span class="go">1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span>
<span class="go">2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">c</span>
<span class="go">3</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">d</span>
<span class="go">4</span>
</pre></div>
</div>
<div class="section" id="unpacking-for-swapping-variables">
<h3>1.2&nbsp;&nbsp;&nbsp;Unpacking for swapping variables</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">,</span> <span class="n">b</span>
<span class="go">(2, 1)</span>
</pre></div>
</div>
<div class="section" id="extended-unpacking-python-3-only">
<h3>1.3&nbsp;&nbsp;&nbsp;Extended unpacking (Python 3 only)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span>
<span class="go">1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span>
<span class="go">[2, 3, 4]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">c</span>
<span class="go">5</span>
</pre></div>
</div>
<div class="section" id="negative-indexing">
<h3>1.4&nbsp;&nbsp;&nbsp;Negative indexing</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="go">10</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span>
<span class="go">8</span>
</pre></div>
</div>
<div class="section" id="list-slices-a-start-end">
<h3>1.5&nbsp;&nbsp;&nbsp;List slices (<tt class="docutils literal">a[start:end]</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">8</span><span class="p">]</span>
<span class="go">[2, 3, 4, 5, 6, 7]</span>
</pre></div>
</div>
<div class="section" id="list-slices-with-negative-indexing">
<h3>1.6&nbsp;&nbsp;&nbsp;List slices with negative indexing</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
<span class="go">[7, 8]</span>
</pre></div>
</div>
<div class="section" id="list-slices-with-step-a-start-end-step">
<h3>1.7&nbsp;&nbsp;&nbsp;List slices with step (<tt class="docutils literal">a[start:end:step]</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">[::</span><span class="mi">2</span><span class="p">]</span>
<span class="go">[0, 2, 4, 6, 8, 10]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">[::</span><span class="mi">3</span><span class="p">]</span>
<span class="go">[0, 3, 6, 9]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">8</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
<span class="go">[2, 4, 6]</span>
</pre></div>
</div>
<div class="section" id="list-slices-with-negative-step">
<h3>1.8&nbsp;&nbsp;&nbsp;List slices with negative step</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="go">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">[::</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
<span class="go">[10, 8, 6, 4, 2, 0]</span>
</pre></div>
</div>
<div class="section" id="list-slice-assignment">
<h3>1.9&nbsp;&nbsp;&nbsp;List slice assignment</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span>
<span class="go">[1, 2, 0, 0, 4, 5]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span>
<span class="go">[1, 8, 9, 2, 0, 0, 4, 5]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span>
<span class="go">[1, 5]</span>
</pre></div>
</div>
<div class="section" id="naming-slices-slice-start-end-step">
<h3>1.10&nbsp;&nbsp;&nbsp;Naming slices (<tt class="docutils literal">slice(start, end, step)</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">LASTTHREE</span> <span class="o">=</span> <span class="nb">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">LASTTHREE</span>
<span class="go">slice(-3, None, None)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">[</span><span class="n">LASTTHREE</span><span class="p">]</span>
<span class="go">[3, 4, 5]</span>
</pre></div>
</div>
<div class="section" id="iterating-over-list-index-and-value-pairs-enumerate">
<h3>1.11&nbsp;&nbsp;&nbsp;Iterating over list index and value pairs (<tt class="docutils literal">enumerate</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Hello&#39;</span><span class="p">,</span> <span class="s">&#39;world&#39;</span><span class="p">,</span> <span class="s">&#39;!&#39;</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">print</span> <span class="s">&#39;{}: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">0: Hello</span>
<span class="go">1: world</span>
<span class="go">2: !</span>
</pre></div>
</div>
<div class="section" id="iterating-over-dictionary-key-and-value-pairs-dict-iteritems">
<h3>1.12&nbsp;&nbsp;&nbsp;Iterating over dictionary key and value pairs (<tt class="docutils literal">dict.iteritems</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">m</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
<span class="gp">... </span>    <span class="k">print</span> <span class="s">&#39;{}: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">a: 1</span>
<span class="go">c: 3</span>
<span class="go">b: 2</span>
<span class="go">d: 4</span>
</pre></div>
<p>Note: use <tt class="docutils literal">dict.items</tt> in Python 3.</p>
</div>
<div class="section" id="zipping-and-unzipping-lists-and-iterables">
<h3>1.13&nbsp;&nbsp;&nbsp;Zipping and unzipping lists and iterables</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">z</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">z</span>
<span class="go">[(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">z</span><span class="p">)</span>
<span class="go">[(1, 2, 3), (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)]</span>
</pre></div>
</div>
<div class="section" id="grouping-adjacent-list-items-using-zip">
<h3>1.14&nbsp;&nbsp;&nbsp;Grouping adjacent list items using zip</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c"># Using iterators</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">group_adjacent</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="p">([</span><span class="nb">iter</span><span class="p">(</span><span class="n">a</span><span class="p">)]</span> <span class="o">*</span> <span class="n">k</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">group_adjacent</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="go">[(1, 2, 3), (4, 5, 6)]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">group_adjacent</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="go">[(1, 2), (3, 4), (5, 6)]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">group_adjacent</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="go">[(1,), (2,), (3,), (4,), (5,), (6,)]</span>


<span class="gp">&gt;&gt;&gt; </span><span class="c"># Using slices</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">islice</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">group_adjacent</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">islice</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span><span class="p">)))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">group_adjacent</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="go">[(1, 2, 3), (4, 5, 6)]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">group_adjacent</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="go">[(1, 2), (3, 4), (5, 6)]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">group_adjacent</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="go">[(1,), (2,), (3,), (4,), (5,), (6,)]</span>
</pre></div>
</div>
<div class="section" id="sliding-windows-n-grams-using-zip-and-iterators">
<h3>1.15&nbsp;&nbsp;&nbsp;Sliding windows (<span class="math">\(n\)</span>
-grams) using zip and iterators</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">islice</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">n_grams</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
<span class="gp">... </span>    <span class="n">z</span> <span class="o">=</span> <span class="p">(</span><span class="n">islice</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">z</span><span class="p">)</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">n_grams</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="go">[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">n_grams</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="go">[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">n_grams</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="go">[(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6)]</span>
</pre></div>
</div>
<div class="section" id="inverting-a-dictionary-using-zip">
<h3>1.16&nbsp;&nbsp;&nbsp;Inverting a dictionary using zip</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
<span class="go">[(&#39;a&#39;, 1), (&#39;c&#39;, 3), (&#39;b&#39;, 2), (&#39;d&#39;, 4)]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">zip</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">values</span><span class="p">(),</span> <span class="n">m</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
<span class="go">[(1, &#39;a&#39;), (3, &#39;c&#39;), (2, &#39;b&#39;), (4, &#39;d&#39;)]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mi</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">values</span><span class="p">(),</span> <span class="n">m</span><span class="o">.</span><span class="n">keys</span><span class="p">()))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mi</span>
<span class="go">{1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;}</span>
</pre></div>
</div>
<div class="section" id="flattening-lists">
<h3>1.17&nbsp;&nbsp;&nbsp;Flattening lists:</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">chain</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="go">[1, 2, 3, 4, 5, 6]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="p">[])</span>
<span class="go">[1, 2, 3, 4, 5, 6]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">a</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">l</span><span class="p">]</span>
<span class="go">[1, 2, 3, 4, 5, 6]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]],</span> <span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">]]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">l1</span> <span class="ow">in</span> <span class="n">a</span> <span class="k">for</span> <span class="n">l2</span> <span class="ow">in</span> <span class="n">l1</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">l2</span><span class="p">]</span>
<span class="go">[1, 2, 3, 4, 5, 6, 7, 8]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">]]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">flatten</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">[</span><span class="n">y</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">x</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">flatten</span><span class="p">(</span><span class="n">l</span><span class="p">)]</span> <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="ow">is</span> <span class="nb">list</span> <span class="k">else</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">flatten</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="go">[1, 2, 3, 4, 5, 6, 7, 8]</span>
</pre></div>
<p>Note: according to Python's <a class="reference external" href="http://docs.python.org/2.7/library/functions.html#sum">documentation</a> on <tt class="docutils literal">sum</tt>,
<tt class="docutils literal">itertools.chain.from_iterable</tt> is the preferred method for this.</p>
</div>
<div class="section" id="generator-expressions">
<h3>1.18&nbsp;&nbsp;&nbsp;Generator expressions</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">g</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
<span class="go">0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
<span class="go">1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
<span class="go">4</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
<span class="go">9</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">(</span><span class="n">x</span> <span class="o">**</span> <span class="mi">3</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
<span class="go">2025</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">(</span><span class="n">x</span> <span class="o">**</span> <span class="mi">3</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
<span class="go">408</span>
</pre></div>
</div>
<div class="section" id="dictionary-comprehensions">
<h3>1.19&nbsp;&nbsp;&nbsp;Dictionary comprehensions</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span>
<span class="go">{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="s">&#39;A&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span>
<span class="go">{0: &#39;A0&#39;, 1: &#39;A1&#39;, 2: &#39;A2&#39;, 3: &#39;A3&#39;, 4: &#39;A4&#39;, 5: &#39;A5&#39;, 6: &#39;A6&#39;, 7: &#39;A7&#39;, 8: &#39;A8&#39;, 9: &#39;A9&#39;}</span>
</pre></div>
</div>
<div class="section" id="inverting-a-dictionary-using-a-dictionary-comprehension">
<h3>1.20&nbsp;&nbsp;&nbsp;Inverting a dictionary using a dictionary comprehension</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span>
<span class="go">{&#39;d&#39;: 4, &#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">{</span><span class="n">v</span><span class="p">:</span> <span class="n">k</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">m</span><span class="o">.</span><span class="n">items</span><span class="p">()}</span>
<span class="go">{1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;}</span>
</pre></div>
</div>
<div class="section" id="named-tuples-collections-namedtuple">
<h3>1.21&nbsp;&nbsp;&nbsp;Named tuples (<tt class="docutils literal">collections.namedtuple</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">Point</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">namedtuple</span><span class="p">(</span><span class="s">&#39;Point&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="s">&#39;y&#39;</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">2.0</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span>
<span class="go">Point(x=1.0, y=2.0)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span><span class="o">.</span><span class="n">x</span>
<span class="go">1.0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span><span class="o">.</span><span class="n">y</span>
<span class="go">2.0</span>
</pre></div>
</div>
<div class="section" id="inheriting-from-named-tuples">
<h3>1.22&nbsp;&nbsp;&nbsp;Inheriting from named tuples:</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">class</span> <span class="nc">Point</span><span class="p">(</span><span class="n">collections</span><span class="o">.</span><span class="n">namedtuple</span><span class="p">(</span><span class="s">&#39;PointBase&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="s">&#39;y&#39;</span><span class="p">])):</span>
<span class="gp">... </span>    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">()</span>
<span class="gp">... </span>    <span class="k">def</span> <span class="nf">__add__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
<span class="gp">... </span>            <span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">2.0</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">q</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">2.0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">3.0</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span> <span class="o">+</span> <span class="n">q</span>
<span class="go">Point(x=3.0, y=5.0)</span>
</pre></div>
</div>
<div class="section" id="sets-and-set-operations">
<h3>1.23&nbsp;&nbsp;&nbsp;Sets and set operations</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span>
<span class="go">set([1, 2, 3])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">B</span> <span class="o">=</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">B</span>
<span class="go">set([3, 4, 5, 6, 7])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">|</span> <span class="n">B</span>
<span class="go">set([1, 2, 3, 4, 5, 6, 7])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">&amp;</span> <span class="n">B</span>
<span class="go">set([3])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">-</span> <span class="n">B</span>
<span class="go">set([1, 2])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">B</span> <span class="o">-</span> <span class="n">A</span>
<span class="go">set([4, 5, 6, 7])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">^</span> <span class="n">B</span>
<span class="go">set([1, 2, 4, 5, 6, 7])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">(</span><span class="n">A</span> <span class="o">^</span> <span class="n">B</span><span class="p">)</span> <span class="o">==</span> <span class="p">((</span><span class="n">A</span> <span class="o">-</span> <span class="n">B</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">B</span> <span class="o">-</span> <span class="n">A</span><span class="p">))</span>
<span class="go">True</span>
</pre></div>
</div>
<div class="section" id="multisets-and-multiset-operations-collections-counter">
<h3>1.24&nbsp;&nbsp;&nbsp;Multisets and multiset operations (<tt class="docutils literal">collections.Counter</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">B</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span>
<span class="go">Counter({2: 2, 1: 1})</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">B</span>
<span class="go">Counter({2: 2, 3: 1})</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">|</span> <span class="n">B</span>
<span class="go">Counter({2: 2, 1: 1, 3: 1})</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">&amp;</span> <span class="n">B</span>
<span class="go">Counter({2: 2})</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">+</span> <span class="n">B</span>
<span class="go">Counter({2: 4, 1: 1, 3: 1})</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">-</span> <span class="n">B</span>
<span class="go">Counter({1: 1})</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">B</span> <span class="o">-</span> <span class="n">A</span>
<span class="go">Counter({3: 1})</span>
</pre></div>
</div>
<div class="section" id="most-common-elements-in-an-iterable-collections-counter">
<h3>1.25&nbsp;&nbsp;&nbsp;Most common elements in an iterable (<tt class="docutils literal">collections.Counter</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span>
<span class="go">Counter({3: 4, 1: 2, 2: 2, 4: 1, 5: 1, 6: 1, 7: 1})</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="go">[(3, 4)]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="go">[(3, 4), (1, 2), (2, 2)]</span>
</pre></div>
</div>
<div class="section" id="double-ended-queue-collections-deque">
<h3>1.26&nbsp;&nbsp;&nbsp;Double-ended queue (<tt class="docutils literal">collections.deque</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">Q</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">deque</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Q</span><span class="o">.</span><span class="n">appendleft</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Q</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Q</span><span class="o">.</span><span class="n">extendleft</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Q</span>
<span class="go">deque([6, 5, 2, 1, 3, 4])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Q</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
<span class="go">4</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Q</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>
<span class="go">6</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Q</span>
<span class="go">deque([5, 2, 1, 3])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Q</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Q</span>
<span class="go">deque([2, 1, 3, 5])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Q</span><span class="o">.</span><span class="n">rotate</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Q</span>
<span class="go">deque([5, 2, 1, 3])</span>
</pre></div>
</div>
<div class="section" id="double-ended-queue-with-maximum-length-collections-deque">
<h3>1.27&nbsp;&nbsp;&nbsp;Double-ended queue with maximum length (<tt class="docutils literal">collections.deque</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">last_three</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">deque</span><span class="p">(</span><span class="n">maxlen</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
<span class="gp">... </span>    <span class="n">last_three</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="gp">... </span>    <span class="k">print</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">last_three</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">0</span>
<span class="go">0, 1</span>
<span class="go">0, 1, 2</span>
<span class="go">1, 2, 3</span>
<span class="go">2, 3, 4</span>
<span class="go">3, 4, 5</span>
<span class="go">4, 5, 6</span>
<span class="go">5, 6, 7</span>
<span class="go">6, 7, 8</span>
<span class="go">7, 8, 9</span>
</pre></div>
</div>
<div class="section" id="ordered-dictionaries-collections-ordereddict">
<h3>1.28&nbsp;&nbsp;&nbsp;Ordered dictionaries (<tt class="docutils literal">collections.OrderedDict</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">((</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
<span class="go">1, 0, 3, 2, 5, 4, 7, 6, 9, 8</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">OrderedDict</span><span class="p">((</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
<span class="go">0, 1, 2, 3, 4, 5, 6, 7, 8, 9</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">OrderedDict</span><span class="p">((</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
<span class="go">10, 9, 8, 7, 6, 5, 4, 3, 2, 1</span>
</pre></div>
</div>
<div class="section" id="default-dictionaries-collections-defaultdict">
<h3>1.29&nbsp;&nbsp;&nbsp;Default dictionaries (<tt class="docutils literal">collections.defaultdict</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">]</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
<span class="gr">KeyError</span>: <span class="n">&#39;a&#39;</span>
<span class="go">&gt;&gt;&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">]</span>
<span class="go">0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="p">[</span><span class="s">&#39;b&#39;</span><span class="p">]</span>
<span class="go">0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">]</span>
<span class="go">&#39;&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="p">[</span><span class="s">&#39;b&#39;</span><span class="p">]</span> <span class="o">+=</span> <span class="s">&#39;a&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="p">[</span><span class="s">&#39;b&#39;</span><span class="p">]</span>
<span class="go">&#39;a&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="s">&#39;[default value]&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">]</span>
<span class="go">&#39;[default value]&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="p">[</span><span class="s">&#39;b&#39;</span><span class="p">]</span>
<span class="go">&#39;[default value]&#39;</span>
</pre></div>
</div>
<div class="section" id="using-default-dictionaries-to-represent-simple-trees">
<h3>1.30&nbsp;&nbsp;&nbsp;Using default dictionaries to represent simple trees</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">json</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tree</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="n">tree</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">root</span> <span class="o">=</span> <span class="n">tree</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">root</span><span class="p">[</span><span class="s">&#39;menu&#39;</span><span class="p">][</span><span class="s">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;file&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">root</span><span class="p">[</span><span class="s">&#39;menu&#39;</span><span class="p">][</span><span class="s">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;File&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">root</span><span class="p">[</span><span class="s">&#39;menu&#39;</span><span class="p">][</span><span class="s">&#39;menuitems&#39;</span><span class="p">][</span><span class="s">&#39;new&#39;</span><span class="p">][</span><span class="s">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;New&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">root</span><span class="p">[</span><span class="s">&#39;menu&#39;</span><span class="p">][</span><span class="s">&#39;menuitems&#39;</span><span class="p">][</span><span class="s">&#39;new&#39;</span><span class="p">][</span><span class="s">&#39;onclick&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;new();&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">root</span><span class="p">[</span><span class="s">&#39;menu&#39;</span><span class="p">][</span><span class="s">&#39;menuitems&#39;</span><span class="p">][</span><span class="s">&#39;open&#39;</span><span class="p">][</span><span class="s">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Open&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">root</span><span class="p">[</span><span class="s">&#39;menu&#39;</span><span class="p">][</span><span class="s">&#39;menuitems&#39;</span><span class="p">][</span><span class="s">&#39;open&#39;</span><span class="p">][</span><span class="s">&#39;onclick&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;open();&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">root</span><span class="p">[</span><span class="s">&#39;menu&#39;</span><span class="p">][</span><span class="s">&#39;menuitems&#39;</span><span class="p">][</span><span class="s">&#39;close&#39;</span><span class="p">][</span><span class="s">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Close&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">root</span><span class="p">[</span><span class="s">&#39;menu&#39;</span><span class="p">][</span><span class="s">&#39;menuitems&#39;</span><span class="p">][</span><span class="s">&#39;close&#39;</span><span class="p">][</span><span class="s">&#39;onclick&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;close();&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">sort_keys</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">separators</span><span class="o">=</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">,</span> <span class="s">&#39;: &#39;</span><span class="p">))</span>
<span class="go">{</span>
<span class="go">    &quot;menu&quot;: {</span>
<span class="go">        &quot;id&quot;: &quot;file&quot;,</span>
<span class="go">        &quot;menuitems&quot;: {</span>
<span class="go">            &quot;close&quot;: {</span>
<span class="go">                &quot;onclick&quot;: &quot;close();&quot;,</span>
<span class="go">                &quot;value&quot;: &quot;Close&quot;</span>
<span class="go">            },</span>
<span class="go">            &quot;new&quot;: {</span>
<span class="go">                &quot;onclick&quot;: &quot;new();&quot;,</span>
<span class="go">                &quot;value&quot;: &quot;New&quot;</span>
<span class="go">            },</span>
<span class="go">            &quot;open&quot;: {</span>
<span class="go">                &quot;onclick&quot;: &quot;open();&quot;,</span>
<span class="go">                &quot;value&quot;: &quot;Open&quot;</span>
<span class="go">            }</span>
<span class="go">        },</span>
<span class="go">        &quot;value&quot;: &quot;File&quot;</span>
<span class="go">    }</span>
<span class="go">}</span>
</pre></div>
<p>(See <a class="reference external" href="https://gist.github.com/hrldcpr/2012250">https://gist.github.com/hrldcpr/2012250</a> for more on this.)</p>
</div>
<div class="section" id="mapping-objects-to-unique-counting-numbers-collections-defaultdict">
<h3>1.31&nbsp;&nbsp;&nbsp;Mapping objects to unique counting numbers (<tt class="docutils literal">collections.defaultdict</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">itertools</span><span class="o">,</span> <span class="nn">collections</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">value_to_numeric_map</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">count</span><span class="p">()</span><span class="o">.</span><span class="n">next</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">value_to_numeric_map</span><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">]</span>
<span class="go">0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">value_to_numeric_map</span><span class="p">[</span><span class="s">&#39;b&#39;</span><span class="p">]</span>
<span class="go">1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">value_to_numeric_map</span><span class="p">[</span><span class="s">&#39;c&#39;</span><span class="p">]</span>
<span class="go">2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">value_to_numeric_map</span><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">]</span>
<span class="go">0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">value_to_numeric_map</span><span class="p">[</span><span class="s">&#39;b&#39;</span><span class="p">]</span>
<span class="go">1</span>
</pre></div>
</div>
<div class="section" id="largest-and-smallest-elements-heapq-nlargest-and-heapq-nsmallest">
<h3>1.32&nbsp;&nbsp;&nbsp;Largest and smallest elements (<tt class="docutils literal">heapq.nlargest</tt> and <tt class="docutils literal">heapq.nsmallest</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="k">for</span> <span class="n">__</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100</span><span class="p">)]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">heapq</span><span class="o">.</span><span class="n">nsmallest</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
<span class="go">[3, 3, 5, 6, 8]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">heapq</span><span class="o">.</span><span class="n">nlargest</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
<span class="go">[100, 100, 99, 98, 98]</span>
</pre></div>
</div>
<div class="section" id="cartesian-products-itertools-product">
<h3>1.33&nbsp;&nbsp;&nbsp;Cartesian products (<tt class="docutils literal">itertools.product</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">product</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]):</span>
<span class="go">(1, 4)</span>
<span class="go">(1, 5)</span>
<span class="go">(2, 4)</span>
<span class="go">(2, 5)</span>
<span class="go">(3, 4)</span>
<span class="go">(3, 5)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">product</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">print</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">p</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">0000</span>
<span class="go">0001</span>
<span class="go">0010</span>
<span class="go">0011</span>
<span class="go">0100</span>
<span class="go">0101</span>
<span class="go">0110</span>
<span class="go">0111</span>
<span class="go">1000</span>
<span class="go">1001</span>
<span class="go">1010</span>
<span class="go">1011</span>
<span class="go">1100</span>
<span class="go">1101</span>
<span class="go">1110</span>
<span class="go">1111</span>
</pre></div>
</div>
<div class="section" id="combinations-and-combinations-with-replacement-itertools-combinations-and-itertools-combinations-with-replacement">
<h3>1.34&nbsp;&nbsp;&nbsp;Combinations and combinations with replacement (<tt class="docutils literal">itertools.combinations</tt> and <tt class="docutils literal">itertools.combinations_with_replacement</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">combinations</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="mi">3</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">print</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">c</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">123</span>
<span class="go">124</span>
<span class="go">125</span>
<span class="go">134</span>
<span class="go">135</span>
<span class="go">145</span>
<span class="go">234</span>
<span class="go">235</span>
<span class="go">245</span>
<span class="go">345</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">combinations_with_replacement</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="mi">2</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">print</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">c</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">11</span>
<span class="go">12</span>
<span class="go">13</span>
<span class="go">22</span>
<span class="go">23</span>
<span class="go">33</span>
</pre></div>
</div>
<div class="section" id="permutations-itertools-permutations">
<h3>1.35&nbsp;&nbsp;&nbsp;Permutations (<tt class="docutils literal">itertools.permutations</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">permutations</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]):</span>
<span class="gp">... </span>    <span class="k">print</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">p</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">1234</span>
<span class="go">1243</span>
<span class="go">1324</span>
<span class="go">1342</span>
<span class="go">1423</span>
<span class="go">1432</span>
<span class="go">2134</span>
<span class="go">2143</span>
<span class="go">2314</span>
<span class="go">2341</span>
<span class="go">2413</span>
<span class="go">2431</span>
<span class="go">3124</span>
<span class="go">3142</span>
<span class="go">3214</span>
<span class="go">3241</span>
<span class="go">3412</span>
<span class="go">3421</span>
<span class="go">4123</span>
<span class="go">4132</span>
<span class="go">4213</span>
<span class="go">4231</span>
<span class="go">4312</span>
<span class="go">4321</span>
</pre></div>
</div>
<div class="section" id="chaining-iterables-itertools-chain">
<h3>1.36&nbsp;&nbsp;&nbsp;Chaining iterables (<tt class="docutils literal">itertools.chain</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">chain</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">combinations</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">itertools</span><span class="o">.</span><span class="n">combinations</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">3</span><span class="p">)):</span>
<span class="gp">... </span>    <span class="k">print</span> <span class="n">p</span>
<span class="gp">...</span>
<span class="go">(1, 2)</span>
<span class="go">(1, 3)</span>
<span class="go">(1, 4)</span>
<span class="go">(2, 3)</span>
<span class="go">(2, 4)</span>
<span class="go">(3, 4)</span>
<span class="go">(1, 2, 3)</span>
<span class="go">(1, 2, 4)</span>
<span class="go">(1, 3, 4)</span>
<span class="go">(2, 3, 4)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">subset</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">chain</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">combinations</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
<span class="gp">... </span>    <span class="k">print</span> <span class="n">subset</span>
<span class="gp">...</span>
<span class="go">()</span>
<span class="go">(1,)</span>
<span class="go">(2,)</span>
<span class="go">(3,)</span>
<span class="go">(4,)</span>
<span class="go">(1, 2)</span>
<span class="go">(1, 3)</span>
<span class="go">(1, 4)</span>
<span class="go">(2, 3)</span>
<span class="go">(2, 4)</span>
<span class="go">(3, 4)</span>
<span class="go">(1, 2, 3)</span>
<span class="go">(1, 2, 4)</span>
<span class="go">(1, 3, 4)</span>
<span class="go">(2, 3, 4)</span>
<span class="go">(1, 2, 3, 4)</span>
</pre></div>
</div>
<div class="section" id="grouping-rows-by-a-given-key-itertools-groupby">
<h3>1.37&nbsp;&nbsp;&nbsp;Grouping rows by a given key (<tt class="docutils literal">itertools.groupby</tt>)</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">itemgetter</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">itertools</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;contactlenses.csv&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">infile</span><span class="p">:</span>
<span class="gp">... </span>    <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">infile</span><span class="p">]</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">print_data</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;{: &lt;16}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">row</span><span class="p">)</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">)</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">print_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="go">young               myope                   no                      reduced                 none</span>
<span class="go">young               myope                   no                      normal                  soft</span>
<span class="go">young               myope                   yes                     reduced                 none</span>
<span class="go">young               myope                   yes                     normal                  hard</span>
<span class="go">young               hypermetrope            no                      reduced                 none</span>
<span class="go">young               hypermetrope            no                      normal                  soft</span>
<span class="go">young               hypermetrope            yes                     reduced                 none</span>
<span class="go">young               hypermetrope            yes                     normal                  hard</span>
<span class="go">pre-presbyopic      myope                   no                      reduced                 none</span>
<span class="go">pre-presbyopic      myope                   no                      normal                  soft</span>
<span class="go">pre-presbyopic      myope                   yes                     reduced                 none</span>
<span class="go">pre-presbyopic      myope                   yes                     normal                  hard</span>
<span class="go">pre-presbyopic      hypermetrope            no                      reduced                 none</span>
<span class="go">pre-presbyopic      hypermetrope            no                      normal                  soft</span>
<span class="go">pre-presbyopic      hypermetrope            yes                     reduced                 none</span>
<span class="go">pre-presbyopic      hypermetrope            yes                     normal                  none</span>
<span class="go">presbyopic          myope                   no                      reduced                 none</span>
<span class="go">presbyopic          myope                   no                      normal                  none</span>
<span class="go">presbyopic          myope                   yes                     reduced                 none</span>
<span class="go">presbyopic          myope                   yes                     normal                  hard</span>
<span class="go">presbyopic          hypermetrope            no                      reduced                 none</span>
<span class="go">presbyopic          hypermetrope            no                      normal                  soft</span>
<span class="go">presbyopic          hypermetrope            yes                     reduced                 none</span>
<span class="go">presbyopic          hypermetrope            yes                     normal                  none</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">data</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">itemgetter</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">value</span><span class="p">,</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">r</span><span class="p">:</span> <span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]):</span>
<span class="gp">... </span>    <span class="k">print</span> <span class="s">&#39;-----------&#39;</span>
<span class="gp">... </span>    <span class="k">print</span> <span class="s">&#39;Group: &#39;</span> <span class="o">+</span> <span class="n">value</span>
<span class="gp">... </span>    <span class="n">print_data</span><span class="p">(</span><span class="n">group</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">-----------</span>
<span class="go">Group: hard</span>
<span class="go">young               myope                   yes                     normal                  hard</span>
<span class="go">young               hypermetrope            yes                     normal                  hard</span>
<span class="go">pre-presbyopic      myope                   yes                     normal                  hard</span>
<span class="go">presbyopic          myope                   yes                     normal                  hard</span>
<span class="go">-----------</span>
<span class="go">Group: none</span>
<span class="go">young               myope                   no                      reduced                 none</span>
<span class="go">young               myope                   yes                     reduced                 none</span>
<span class="go">young               hypermetrope            no                      reduced                 none</span>
<span class="go">young               hypermetrope            yes                     reduced                 none</span>
<span class="go">pre-presbyopic      myope                   no                      reduced                 none</span>
<span class="go">pre-presbyopic      myope                   yes                     reduced                 none</span>
<span class="go">pre-presbyopic      hypermetrope            no                      reduced                 none</span>
<span class="go">pre-presbyopic      hypermetrope            yes                     reduced                 none</span>
<span class="go">pre-presbyopic      hypermetrope            yes                     normal                  none</span>
<span class="go">presbyopic          myope                   no                      reduced                 none</span>
<span class="go">presbyopic          myope                   no                      normal                  none</span>
<span class="go">presbyopic          myope                   yes                     reduced                 none</span>
<span class="go">presbyopic          hypermetrope            no                      reduced                 none</span>
<span class="go">presbyopic          hypermetrope            yes                     reduced                 none</span>
<span class="go">presbyopic          hypermetrope            yes                     normal                  none</span>
<span class="go">-----------</span>
<span class="go">Group: soft</span>
<span class="go">young               myope                   no                      normal                  soft</span>
<span class="go">young               hypermetrope            no                      normal                  soft</span>
<span class="go">pre-presbyopic      myope                   no                      normal                  soft</span>
<span class="go">pre-presbyopic      hypermetrope            no                      normal                  soft</span>
<span class="go">presbyopic          hypermetrope            no                      normal                  soft</span>
</pre></div>
</div>
<div class="section" id="start-a-static-http-server-in-any-directory">
<h3>1.38&nbsp;&nbsp;&nbsp;Start a static HTTP server in any directory</h3>
<div class="highlight"><pre><span class="o">[</span>10:26<span class="o">]</span> <span class="nv">$ </span>python -m SimpleHTTPServer 5000
Serving HTTP on 0.0.0.0 port 5000 ...
</pre></div>
</div>
<div class="section" id="learn-the-zen-of-python">
<h3>1.39&nbsp;&nbsp;&nbsp;Learn the Zen of Python</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">this</span>
<span class="go">The Zen of Python, by Tim Peters</span>

<span class="go">Beautiful is better than ugly.</span>
<span class="go">Explicit is better than implicit.</span>
<span class="go">Simple is better than complex.</span>
<span class="go">Complex is better than complicated.</span>
<span class="go">Flat is better than nested.</span>
<span class="go">Sparse is better than dense.</span>
<span class="go">Readability counts.</span>
<span class="go">Special cases aren&#39;t special enough to break the rules.</span>
<span class="go">Although practicality beats purity.</span>
<span class="go">Errors should never pass silently.</span>
<span class="go">Unless explicitly silenced.</span>
<span class="go">In the face of ambiguity, refuse the temptation to guess.</span>
<span class="go">There should be one-- and preferably only one --obvious way to do it.</span>
<span class="go">Although that way may not be obvious at first unless you&#39;re Dutch.</span>
<span class="go">Now is better than never.</span>
<span class="go">Although never is often better than *right* now.</span>
<span class="go">If the implementation is hard to explain, it&#39;s a bad idea.</span>
<span class="go">If the implementation is easy to explain, it may be a good idea.</span>
<span class="go">Namespaces are one honking great idea -- let&#39;s do more of those!</span>
</pre></div>
</div>
<div class="section" id="use-c-style-braces-instead-of-indentation-to-denote-scopes">
<h3>1.40&nbsp;&nbsp;&nbsp;Use C-Style Braces Instead of Indentation to Denote Scopes</h3>
<div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">braces</span>
</pre></div>
</div>
</div>
<div class="section" id="id1">
<h2>2&nbsp;&nbsp;&nbsp;<span class="target" id="table-of-contents">Table of contents</span></h2>
<div class="contents topic" id="list-of-language-features-and-tricks-in-this-article">
<p class="topic-title first">List of language features and tricks in this article:</p>
<ul class="auto-toc simple">
<li><a class="reference internal" href="#introduction" id="id2">1&nbsp;&nbsp;&nbsp;Introduction</a><ul class="auto-toc">
<li><a class="reference internal" href="#unpacking" id="id3">1.1&nbsp;&nbsp;&nbsp;Unpacking</a></li>
<li><a class="reference internal" href="#unpacking-for-swapping-variables" id="id4">1.2&nbsp;&nbsp;&nbsp;Unpacking for swapping variables</a></li>
<li><a class="reference internal" href="#extended-unpacking-python-3-only" id="id5">1.3&nbsp;&nbsp;&nbsp;Extended unpacking (Python 3 only)</a></li>
<li><a class="reference internal" href="#negative-indexing" id="id6">1.4&nbsp;&nbsp;&nbsp;Negative indexing</a></li>
<li><a class="reference internal" href="#list-slices-a-start-end" id="id7">1.5&nbsp;&nbsp;&nbsp;List slices (<tt class="docutils literal">a[start:end]</tt>)</a></li>
<li><a class="reference internal" href="#list-slices-with-negative-indexing" id="id8">1.6&nbsp;&nbsp;&nbsp;List slices with negative indexing</a></li>
<li><a class="reference internal" href="#list-slices-with-step-a-start-end-step" id="id9">1.7&nbsp;&nbsp;&nbsp;List slices with step (<tt class="docutils literal">a[start:end:step]</tt>)</a></li>
<li><a class="reference internal" href="#list-slices-with-negative-step" id="id10">1.8&nbsp;&nbsp;&nbsp;List slices with negative step</a></li>
<li><a class="reference internal" href="#list-slice-assignment" id="id11">1.9&nbsp;&nbsp;&nbsp;List slice assignment</a></li>
<li><a class="reference internal" href="#naming-slices-slice-start-end-step" id="id12">1.10&nbsp;&nbsp;&nbsp;Naming slices (<tt class="docutils literal">slice(start, end, step)</tt>)</a></li>
<li><a class="reference internal" href="#iterating-over-list-index-and-value-pairs-enumerate" id="id13">1.11&nbsp;&nbsp;&nbsp;Iterating over list index and value pairs (<tt class="docutils literal">enumerate</tt>)</a></li>
<li><a class="reference internal" href="#iterating-over-dictionary-key-and-value-pairs-dict-iteritems" id="id14">1.12&nbsp;&nbsp;&nbsp;Iterating over dictionary key and value pairs (<tt class="docutils literal">dict.iteritems</tt>)</a></li>
<li><a class="reference internal" href="#zipping-and-unzipping-lists-and-iterables" id="id15">1.13&nbsp;&nbsp;&nbsp;Zipping and unzipping lists and iterables</a></li>
<li><a class="reference internal" href="#grouping-adjacent-list-items-using-zip" id="id16">1.14&nbsp;&nbsp;&nbsp;Grouping adjacent list items using zip</a></li>
<li><a class="reference internal" href="#sliding-windows-n-grams-using-zip-and-iterators" id="id17">1.15&nbsp;&nbsp;&nbsp;Sliding windows (<span class="math">\(n\)</span>
-grams) using zip and iterators</a></li>
<li><a class="reference internal" href="#inverting-a-dictionary-using-zip" id="id18">1.16&nbsp;&nbsp;&nbsp;Inverting a dictionary using zip</a></li>
<li><a class="reference internal" href="#flattening-lists" id="id19">1.17&nbsp;&nbsp;&nbsp;Flattening lists:</a></li>
<li><a class="reference internal" href="#generator-expressions" id="id20">1.18&nbsp;&nbsp;&nbsp;Generator expressions</a></li>
<li><a class="reference internal" href="#dictionary-comprehensions" id="id21">1.19&nbsp;&nbsp;&nbsp;Dictionary comprehensions</a></li>
<li><a class="reference internal" href="#inverting-a-dictionary-using-a-dictionary-comprehension" id="id22">1.20&nbsp;&nbsp;&nbsp;Inverting a dictionary using a dictionary comprehension</a></li>
<li><a class="reference internal" href="#named-tuples-collections-namedtuple" id="id23">1.21&nbsp;&nbsp;&nbsp;Named tuples (<tt class="docutils literal">collections.namedtuple</tt>)</a></li>
<li><a class="reference internal" href="#inheriting-from-named-tuples" id="id24">1.22&nbsp;&nbsp;&nbsp;Inheriting from named tuples:</a></li>
<li><a class="reference internal" href="#sets-and-set-operations" id="id25">1.23&nbsp;&nbsp;&nbsp;Sets and set operations</a></li>
<li><a class="reference internal" href="#multisets-and-multiset-operations-collections-counter" id="id26">1.24&nbsp;&nbsp;&nbsp;Multisets and multiset operations (<tt class="docutils literal">collections.Counter</tt>)</a></li>
<li><a class="reference internal" href="#most-common-elements-in-an-iterable-collections-counter" id="id27">1.25&nbsp;&nbsp;&nbsp;Most common elements in an iterable (<tt class="docutils literal">collections.Counter</tt>)</a></li>
<li><a class="reference internal" href="#double-ended-queue-collections-deque" id="id28">1.26&nbsp;&nbsp;&nbsp;Double-ended queue (<tt class="docutils literal">collections.deque</tt>)</a></li>
<li><a class="reference internal" href="#double-ended-queue-with-maximum-length-collections-deque" id="id29">1.27&nbsp;&nbsp;&nbsp;Double-ended queue with maximum length (<tt class="docutils literal">collections.deque</tt>)</a></li>
<li><a class="reference internal" href="#ordered-dictionaries-collections-ordereddict" id="id30">1.28&nbsp;&nbsp;&nbsp;Ordered dictionaries (<tt class="docutils literal">collections.OrderedDict</tt>)</a></li>
<li><a class="reference internal" href="#default-dictionaries-collections-defaultdict" id="id31">1.29&nbsp;&nbsp;&nbsp;Default dictionaries (<tt class="docutils literal">collections.defaultdict</tt>)</a></li>
<li><a class="reference internal" href="#using-default-dictionaries-to-represent-simple-trees" id="id32">1.30&nbsp;&nbsp;&nbsp;Using default dictionaries to represent simple trees</a></li>
<li><a class="reference internal" href="#mapping-objects-to-unique-counting-numbers-collections-defaultdict" id="id33">1.31&nbsp;&nbsp;&nbsp;Mapping objects to unique counting numbers (<tt class="docutils literal">collections.defaultdict</tt>)</a></li>
<li><a class="reference internal" href="#largest-and-smallest-elements-heapq-nlargest-and-heapq-nsmallest" id="id34">1.32&nbsp;&nbsp;&nbsp;Largest and smallest elements (<tt class="docutils literal">heapq.nlargest</tt> and <tt class="docutils literal">heapq.nsmallest</tt>)</a></li>
<li><a class="reference internal" href="#cartesian-products-itertools-product" id="id35">1.33&nbsp;&nbsp;&nbsp;Cartesian products (<tt class="docutils literal">itertools.product</tt>)</a></li>
<li><a class="reference internal" href="#combinations-and-combinations-with-replacement-itertools-combinations-and-itertools-combinations-with-replacement" id="id36">1.34&nbsp;&nbsp;&nbsp;Combinations and combinations with replacement (<tt class="docutils literal">itertools.combinations</tt> and <tt class="docutils literal">itertools.combinations_with_replacement</tt>)</a></li>
<li><a class="reference internal" href="#permutations-itertools-permutations" id="id37">1.35&nbsp;&nbsp;&nbsp;Permutations (<tt class="docutils literal">itertools.permutations</tt>)</a></li>
<li><a class="reference internal" href="#chaining-iterables-itertools-chain" id="id38">1.36&nbsp;&nbsp;&nbsp;Chaining iterables (<tt class="docutils literal">itertools.chain</tt>)</a></li>
<li><a class="reference internal" href="#grouping-rows-by-a-given-key-itertools-groupby" id="id39">1.37&nbsp;&nbsp;&nbsp;Grouping rows by a given key (<tt class="docutils literal">itertools.groupby</tt>)</a></li>
<li><a class="reference internal" href="#start-a-static-http-server-in-any-directory" id="id40">1.38&nbsp;&nbsp;&nbsp;Start a static HTTP server in any directory</a></li>
<li><a class="reference internal" href="#learn-the-zen-of-python" id="id41">1.39&nbsp;&nbsp;&nbsp;Learn the Zen of Python</a></li>
<li><a class="reference internal" href="#use-c-style-braces-instead-of-indentation-to-denote-scopes" id="id42">1.40&nbsp;&nbsp;&nbsp;Use C-Style Braces Instead of Indentation to Denote Scopes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id1" id="id43">2&nbsp;&nbsp;&nbsp;Table of contents</a></li>
</ul>
</div>
</div>

            </div>

<div class="comments">
    <h3>Comments</h3>
    <div id="disqus_thread"></div>
    <script type="text/javascript">
        var disqus_identifier = "thirty-python-language-features-and-tricks-you-may-not-know.html";
        (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://sahandsaba.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
</div>

                <div class="related-posts">
                    <h1>Recommended Articles</h1>
                    <ul>
                            <li>
                                <a href="http://sahandsaba.com/python-iterators-generators.html" 
                                   rel="bookmark"
                                   title="Permalink to A Study of Python's More Advanced Features Part I: Iterators, Generators, itertools">
                                   <span itemprop="name">
                                       A Study of Python's More Advanced Features Part I: Iterators, Generators, itertools
                                   </span>
                                </a>
                            </li>
                            <li>
                                <a href="http://sahandsaba.com/programmers-guide-to-setting-up-a-mac.html" 
                                   rel="bookmark"
                                   title="Permalink to Programmer's Guide to Setting Up a Mac OS X Machine">
                                   <span itemprop="name">
                                       Programmer's Guide to Setting Up a Mac OS X Machine
                                   </span>
                                </a>
                            </li>
                            <li>
                                <a href="http://sahandsaba.com/interview-question-facebook-anagrams.html" 
                                   rel="bookmark"
                                   title="Permalink to Interview Question: Grouping Word Anagrams (Facebook)">
                                   <span itemprop="name">
                                       Interview Question: Grouping Word Anagrams (Facebook)
                                   </span>
                                </a>
                            </li>
                            <li>
                                <a href="http://sahandsaba.com/understanding-sat-by-implementing-a-simple-sat-solver-in-python.html" 
                                   rel="bookmark"
                                   title="Permalink to Understanding SAT by Implementing a Simple SAT Solver in Python">
                                   <span itemprop="name">
                                       Understanding SAT by Implementing a Simple SAT Solver in Python
                                   </span>
                                </a>
                            </li>
                            <li>
                                <a href="http://sahandsaba.com/interview-question-facebook-primes.html" 
                                   rel="bookmark"
                                   title="Permalink to Interview Question: All Possible Products of a List of Primes (Facebook)">
                                   <span itemprop="name">
                                       Interview Question: All Possible Products of a List of Primes (Facebook)
                                   </span>
                                </a>
                            </li>
                    </ul>
                </div>

        </section>
    </div>
</div>
       </div>
    </div>

<div class="container.nopad bg">
    <footer id="credits" class="row">
        <div class="twelve columns left-center">
            <address class="vcard body">
                Copyright &copy; 2014 Sahand Saba
            </address>
        </div>
    <div class="row"> 
        <div class="twelve columns left">
            <address id="about" class="vcard body">
                Proudly powered by <a href="http://getpelican.com/">Pelican</a>,
                which takes great advantage of <a href="http://python.org">Python</a>.
            </address>
        </div> 
    </div>
    </footer>
</div><script type="text/javascript">
    var disqus_shortname = 'sahandsaba';
    (function () {
        var s = document.createElement('script'); s.async = true;
        s.type = 'text/javascript';
        s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
        (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
    }());
</script>
<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-42691650-1', 'sahandsaba.com');
    ga('send', 'pageview');

</script>
</body>
</html>