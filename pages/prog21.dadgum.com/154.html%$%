<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Do You Really Want to be Doing This When You're 50?</title>
<link rel="stylesheet" type="text/css" href="p21.css"/>
<link rel="alternate" type="application/atom+xml" title="Atom feed" href="atom.xml"/>
</head>
<body>
<div id="top"><div id="header">
<a href="/" id="home">programming in the<br/>twenty-first century</a>
<p id="tag">It's not about technology for its own sake. It's about being able to implement your ideas.</p>
</div></div>
<div id="main">
<div id="right">
<p class="stuff">
<a href="index.html">Newest Entry</a><br/>
<a href="archives.html">Complete Archives</a><br/>
<p class="about">I'm a <a href="56.html">recovering programmer</a> who has been designing video games since the 1980s, doing things that seem baroquely hardcore in retrospect, like writing Super Nintendo games entirely in assembly language. These days I use whatever tools are the most fun and give me the biggest advantage.</p>
<p><b>james.hague @ gmail.com</b></p>
<p>Where are <a href="57.html">the comments</a>?</p>
<p><a href="atom.xml">atom feed (for news readers)</a></p>
</div>
<div id="left">
<h1>Do You Really Want to be Doing This When You're 50?</h1>When I was still a professional programmer, my office-mate once asked out of the blue, "Do you really want to be doing this kind of work when you're fifty?"
<br/><br/>I have to say that made me stop and think.
<br/><br/>To me, there's an innate frustration in programming. It doesn't stem from having to work out the solutions to difficult problems. That takes careful thought, but it's the same kind of thought a novelist uses to organize a story or to write dialog that rings true. That kind of problem-solving is satisfying, even fun.
<br/><br/>But that, unfortunately, is not what most programming is about. It's about trying to come up with a working solution in a problem domain that you don't fully understand and don't have time to understand.
<br/><br/>It's about skimming <a href="129.html">great oceans of APIs</a> that you could spend years studying and learning, but the market will have moved on by then and that's no fun anyway, so you cut and paste from examples and manage to get by without a full picture of the architecture supporting your app.
<br/><br/>It's about reading between the lines of documentation and guessing at how edge cases are handled and whether or not your assumptions will still hold true two months or two years from now.
<br/><br/>It's about the constant evolutionary changes that occur in the language definition, the compiler, the libraries, the application framework, and the underlying operating system, that all snowball together and keep you in maintenance mode instead of making real improvements. 
<br/><br/>It's about getting derailed by hairline fractures in otherwise reliable tools, and apparently being the first person to discover that a PNG image with four bits-per-pixel and an alpha channel crashes the decoder, then having to work around that.
<br/><br/>One approach is to dig in and power through all the obstacles. If you're fresh out of school, there are free Starbucks lattes down the hall, and all your friends are still at the office at 2 AM, too...well, that works. But then you have to do it again. And again. It's always a last second skid at 120 miles per hour with brakes smoking and tires shredding that makes all the difference between success and failure, but you pulled off another miracle and survived to do it again.
<br/><br/>I still like to build things, and if there's no one else to do it, then I'll do it myself. I keep improving the <a href="77.html">the tiny Perl script</a> that puts together this site, because that tiny Perl script is unobtrusive and reliable and lets me focus on writing. I have a handy little image compositing tool that's less than 28 kilobytes of C and Erlang source. I know how it works inside and out, and I can make changes to it in less time than than it takes to coax what I want out of ImageMagick.
<br/><br/>But large scale, high stress coding? I may have to admit that's a young man's game.
<div id="footer"><a href="154.html" id="permalink">permalink</a> October 3, 2012</div><div id="prev"><h1>Previously</h1><a href="153.html">Digging Out from Years of Homogeneous Computing</a><br/><a href="152.html">What's Your Hidden Agenda?</a><br/><a href="151.html">Minimalism in an Age of Tremendous Hardware</a><br/><a href="150.html">The Goal is to be Like a Bad Hacker Movie</a><br/><a href="149.html">Hopefully More Controversial Programming Opinions</a><br/></div></div></div></body></html>