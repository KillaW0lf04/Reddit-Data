<!DOCTYPE html>
<html lang="en">
  <head>

    <link href='http://fonts.googleapis.com/css?family=Lato:300, 700|Merriweather:400,300' rel='stylesheet' type='text/css'>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title> Python Best Practice Patterns by Vladimir Keleshev (Notes) | stevenloria.com </title>

    <link rel="stylesheet" href="../theme/css/style.css" type="text/css" />
    <link rel="stylesheet" href="../theme/css/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../theme/css/font-awesome.css" type="text/css"/>
  </head>
  <body>
    <div class="container">
    <div class="header">
        <a href="..">stevenloria.com</a>
    </div>

      <div class="navigation">
        <ul>
            <li><a href="../">about</a> </li>
            <li><a href="../projects">projects</a> </li>
            <li><a href="../archives.html">scribbles</a> </li>
        </ul>
      </div>
      <div class="separator"></div>
    <h1 class="title"> Python Best Practice Patterns by Vladimir Keleshev (Notes)</h1>
    <p class=date> May 09, 2013 </p>

    <article>
      <div class="content article-content">
        <p><em>Edit March 14, 2014</em>: Fix conditional in Composed Method section. Thanks Rufus Smith.</p>
<p><em>Edit February 28, 2014</em>: <code>__eq__</code> returns <code>NotImplemented</code> to avoid asymmetric comparison. Thanks Daniel Smith.</p>
<p><em>Edit February 28, 2014</em>: Removed <code>enumerate</code> usage in  "Interesting Return Value" section. Thanks Hugh Brown and Paul Winkler.</p>
<p><em>Edit September 5, 2013</em>: Fixed error in Sorted Collection. Thanks Frank Sievertsen.</p>
<p><em>Edit September 4, 2013</em>: Fixed typo in Choosing Message gist. <code>instanceof()</code> should be <code>isinstance()</code>. Thanks to <code>richardborcsik</code> for catching this.</p>
<p><em>Edit July 30, 2013</em>: Fixed typo in Sorted Collection gist. <code>__lt__(self, other)</code> needs two arguments. Thanks to Tiago Oliveira for catching this.</p>
<hr />
<p>These are my notes from Vladimir Keleshev's talk entitled "Python Best Practice Patterns", given on May 2, 2013 at the Python Meetup in Denmark. The original video is <a href="http://youtu.be/GZNUfkVIHAY">here</a> (about 38 minutes long).</p>
<p><strong>NOTE</strong>: Some of the code examples have been has been modified from the original presentation based on readers' feedback (see edits above).</p>
<p><strong>NOTE</strong>: As Keleshev points out in the video, the code examples are written for <strong>Python 3</strong>, so all classes are new-style, even if they do not explicitly subclass from <code>object</code>.</p>
<h2>Composed method</h2>
<ul>
<li>Divide program into methods that perform one task<ul>
<li>Keep <em>all</em> operation in a method at the same level of abstraction</li>
</ul>
</li>
<li>
<p>Use many methods only a few lines long</p>
</li>
<li>
<p>Different levels of abstraction: bitmaps, filesystem operations, playing sounds...</p>
</li>
</ul>
<script src="https://gist.github.com/sloria/5895673.js"> </script>

<ul>
<li><code>safety_check</code> deals with temp and pressure</li>
<li><code>alarm</code> deals with files and sound</li>
<li><code>pressure</code> deals with bits and converting them</li>
</ul>
<h2>Constructor method</h2>
<ul>
<li>provide constructors that create well-formed instances<ul>
<li>Pass all required parameters to them</li>
</ul>
</li>
</ul>
<script src="https://gist.github.com/sloria/5895677.js"> </script>

<ul>
<li>Can use class methods to make multiple constructors<ul>
<li>Example: Using Cartesian or polar coordinates</li>
</ul>
</li>
</ul>
<script src="https://gist.github.com/sloria/5895679.js"> </script>

<h2>Method objects</h2>
<ul>
<li>How do you code a method where many lines of code share many arguments and temporary variables?</li>
</ul>
<script src="https://gist.github.com/sloria/5895682.js"> </script>

<ul>
<li>Can't be solved by making many small methods (would use more code)</li>
</ul>
<script src="https://gist.github.com/sloria/5895686.js"> </script>

<h2>Execute around method (in Python: Context manager)</h2>
<ul>
<li>How do you represent pairs of actions that should be taken together?</li>
</ul>
<script src="https://gist.github.com/sloria/5895687.js"> </script>

<h2>Debug printing method</h2>
<ul>
<li><code>__str__</code> for users<ul>
<li>e.g. <code>print(point)</code></li>
</ul>
</li>
<li><code>__repr__</code> for debugging/interactive mode</li>
</ul>
<h2>Method comment</h2>
<ul>
<li>small methods can be more effective than comments</li>
</ul>
<script src="https://gist.github.com/sloria/5895694.js"> </script>

<h2>Choosing message</h2>
<script src="https://gist.github.com/sloria/5895717.js"> </script>

<h2>Intention revealing message</h2>
<ul>
<li>How do you communicate your intent when implementation is simple?</li>
<li>Use for methods that do the same thing (for readability)</li>
</ul>
<script src="https://gist.github.com/sloria/5895726.js"> </script>

<h2>Constant method (constant class variable)</h2>
<script src="https://gist.github.com/sloria/5895732.js"> </script>

<ul>
<li>Depends if you are designing to make your class subclassable</li>
</ul>
<h2>Direct and indirect variable access</h2>
<ul>
<li>Direct<ul>
<li>no need for getters and setters</li>
</ul>
</li>
</ul>
<script src="https://gist.github.com/sloria/5895737.js"> </script>

<h2>Enumeration (iteration) method</h2>
<script src="https://gist.github.com/sloria/5895749.js"> </script>

<h2>Temporary variable</h2>
<script src="https://gist.github.com/sloria/5895751.js"> </script>

<h2>Sets</h2>
<ul>
<li>Can often use sets instead of combination of <code>for</code> loops</li>
</ul>
<script src="https://gist.github.com/sloria/5895758.js"> </script>

<h2>Equality method</h2>
<p><script src="https://gist.github.com/sloria/5895762.js"> </script> </p>
<ul>
<li>Probably the only case to check <code>isinstance()</code></li>
</ul>
<h2>Hashing method</h2>
<p><script src="https://gist.github.com/sloria/5895766.js"> </script></p>
<h2>Sorted collection</h2>
<p><script src="https://gist.github.com/sloria/5895768.js"> </script></p>
<h2>Concatenation</h2>
<p><script src="https://gist.github.com/sloria/5895770.js"> </script></p>
<h2>Simple enumeration parameter</h2>
<ul>
<li>When you can't come up with an iteration param that makes sense, just use <code>each</code></li>
</ul>
<script src="https://gist.github.com/sloria/5895773.js"> </script>

<h2>Cascades</h2>
<ul>
<li>Instead of writing methods without return values, make them return self<ul>
<li>allows cascading of methods</li>
</ul>
</li>
</ul>
<script src="https://gist.github.com/sloria/5895776.js"> </script>

<h2>Interesting return value</h2>
<script src="https://gist.github.com/sloria/5895782.js"> </script>

<ul>
<li>Explicit better than implicit</li>
<li>Include return value if it's interesting (even if it's <code>None</code>)</li>
</ul>
<h3>Further reading</h3>
<ul>
<li><a href="http://www.amazon.com/Smalltalk-Best-Practice-Patterns-ebook/dp/B00BBDLIME/ref=dp_kinw_strp_1">Smalltalk Best Practice Patterns</a><ul>
<li>Not just for Smalltalk: applicable to Python, Ruby, and many other languages</li>
</ul>
</li>
</ul>
      </div>
    </article>


    <p class=tags>tagged in
      <a href="../tag/python.html">python</a>
      <a href="../tag/notes.html">notes</a>
    </p>

    <section class="meta">
      <p>Please send comments by
      <a href="mailto:sloria1@gmail.com">email</a>. I welcome your feedback, advice, and criticism.</p>
    </section>

<div class=footer>
  <p>&copy; Copyright <script language="JavaScript">var date = new Date(); document.write(date.getFullYear());</script> by Steven Loria</p>
  <p>All content is licensed under the <a href="https://creativecommons.org/licenses/by/4.0/">CC-BY 4.0 License</a>.</p>
<!--   <p> Powered by <a href="http://pypi.python.org/pypi/pelican/" target="_blank">Pelican</a>.
    <a href="https://github.com/fjavieralba/flasky">Theme</a>  by <a href="http://fjavieralba.com">fjavieralba</a>
  </p>  -->
  <p>
    <div class=social style="font-size: 27px;">
      <ul>
        <script language="JavaScript">
          u = 'sloria1';
          s = 'gmail.com';
          document.write('<a href=\"mailto:' + u + '@' + s + '\" target=\"_blank\">');
        </script>
            <li><i class="icon-envelope icon-large"></i> </li>
        </a>
        <a href="http://twitter.com/sloria1" target="_blank"> <li> <i class="icon-twitter-sign icon-large"> </li></i> </a>
        <a href="http://www.linkedin.com/in/sloria/"><li><i class="icon-linkedin-sign icon-large" ></i></li></a>
        <a href="http://github.com/sloria" target="_blank"> <li> <i class="icon-github-sign icon-large"></i> </li> </a>
        <a href="../feeds/all.rss.xml" rel="alternate" title="Recent Blog Posts"><li> <i class="icon-rss icon-large"></i> </li></a>
      </ul>
    </div>
  </p>
</div>    </div>
    <script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-39544608-1']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
    </script>
  </body>
</html>
