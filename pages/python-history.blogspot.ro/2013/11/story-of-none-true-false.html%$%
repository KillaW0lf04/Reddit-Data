<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html dir='ltr'>
<head>
<meta content='text/html; charset=UTF-8' http-equiv='Content-Type'/>
<script type="text/javascript">(function() { var b=window,f="chrome",g="tick",k="jstiming";(function(){function d(a){this.t={};this.tick=function(a,d,c){var e=void 0!=c?c:(new Date).getTime();this.t[a]=[e,d];if(void 0==c)try{b.console.timeStamp("CSI/"+a)}catch(h){}};this[g]("start",null,a)}var a;b.performance&&(a=b.performance.timing);var n=a?new d(a.responseStart):new d;b.jstiming={Timer:d,load:n};if(a){var c=a.navigationStart,h=a.responseStart;0<c&&h>=c&&(b[k].srt=h-c)}if(a){var e=b[k].load;0<c&&h>=c&&(e[g]("_wtsrt",void 0,c),e[g]("wtsrt_","_wtsrt",h),e[g]("tbsd_","wtsrt_"))}try{a=null,
b[f]&&b[f].csi&&(a=Math.floor(b[f].csi().pageT),e&&0<c&&(e[g]("_tbnd",void 0,b[f].csi().startE),e[g]("tbnd_","_tbnd",c))),null==a&&b.gtbExternal&&(a=b.gtbExternal.pageT()),null==a&&b.external&&(a=b.external.pageT,e&&0<c&&(e[g]("_tbnd",void 0,b.external.startE),e[g]("tbnd_","_tbnd",c))),a&&(b[k].pt=a)}catch(p){}})();b.tickAboveFold=function(d){var a=0;if(d.offsetParent){do a+=d.offsetTop;while(d=d.offsetParent)}d=a;750>=d&&b[k].load[g]("aft")};var l=!1;function m(){l||(l=!0,b[k].load[g]("firstScrollTime"))}b.addEventListener?b.addEventListener("scroll",m,!1):b.attachEvent("onscroll",m);
 })();</script>
<meta content='blogger' name='generator'/>
<link href='http://python-history.blogspot.ro/favicon.ico' rel='icon' type='image/x-icon'/>
<link href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html' rel='canonical'/>
<link rel="alternate" type="application/atom+xml" title="The History of Python - Atom" href="http://python-history.blogspot.com/feeds/posts/default" />
<link rel="alternate" type="application/rss+xml" title="The History of Python - RSS" href="http://python-history.blogspot.com/feeds/posts/default?alt=rss" />
<link rel="service.post" type="application/atom+xml" title="The History of Python - Atom" href="http://www.blogger.com/feeds/8699431508730375743/posts/default" />

<link rel="alternate" type="application/atom+xml" title="The History of Python - Atom" href="http://python-history.blogspot.com/feeds/5526235131217291440/comments/default" />
<!--[if IE]> <script> (function() { var html5 = ("abbr,article,aside,audio,canvas,datalist,details," + "figure,footer,header,hgroup,mark,menu,meter,nav,output," + "progress,section,time,video").split(','); for (var i = 0; i < html5.length; i++) { document.createElement(html5[i]); } try { document.execCommand('BackgroundImageCache', false, true); } catch(e) {} })(); </script> <![endif]-->
<title>The History of Python: The story of None, True and False (and an explanation of literals, keywords and builtins thrown in)</title>
<link type='text/css' rel='stylesheet' href='https://www.blogger.com/static/v1/widgets/3841957138-widget_css_bundle.css' />
<link type='text/css' rel='stylesheet' href='https://www.blogger.com/dyn-css/authorization.css?targetBlogID=8699431508730375743&zx=f6eb76f1-3c5f-493d-ac53-29f4d752e33e' />
<style id='page-skin-1' type='text/css'><!--
/*
Blogger Template Style
Name:     TicTac
Date:     1 March 2004
Updated by: Blogger Team
*/
/* Variable definitions
====================
<Variable name="textcolor" description="Text Color"
type="color" default="#333">
<Variable name="pagetitlecolor" description="Page Header Color"
type="color" default="#FFF">
<Variable name="datecolor" description="Date Header Color"
type="color" default="#f93">
<Variable name="titlecolor" description="Post Title Color"
type="color" default="#f63">
<Variable name="footercolor" description="Post Footer Color"
type="color" default="#999">
<Variable name="sidebartextcolor" description="Sidebar Text Color"
type="color" default="#999">
<Variable name="sidebarcolor" description="Sidebar Title Color"
type="color" default="#666">
<Variable name="linkcolor" description="Link Color"
type="color" default="#69c">
<Variable name="visitedlinkcolor" description="Visited Link Color"
type="color" default="#666699">
<Variable name="bodyfont" description="Text Font"
type="font"
default="normal normal 100% Verdana, sans-serif">
<Variable name="pagetitlefont" description="Page Header Font"
type="font" default="normal normal 100% 'Lucida Grande','Trebuchet MS'">
<Variable name="titlefont" description="Post Title Font"
type="font" default="normal bold 130% 'Lucida Grande','Trebuchet MS'">
<Variable name="sidebarheaderfont" description="Sidebar Title Font"
type="font" default="normal bold 130% 'Lucida Grande','Trebuchet MS'">
<Variable name="startSide" description="Start side in blog language"
type="automatic" default="left">
<Variable name="endSide" description="End side in blog language"
type="automatic" default="right">
*/
/* ---( page defaults )--- */
body {
margin: 0;
padding: 0;
font-size: small;
text-align: center;
color: #333333;
background: #e0e0e0;
}
blockquote {
margin-top: 0;
margin-right: 0;
margin-bottom: 0;
margin-left: 30px;
padding-top: 10px;
padding-right: 0;
padding-bottom: 0;
padding-left: 20px;
font-size: 88%;
line-height: 1.5em;
color: #666;
/* background: url(http://www.blogblog.com/tictac/quotes.gif) no-repeat top left; */
}
blockquote p {
margin-top: 0;
}
abbr, acronym {
cursor: help;
font-style: normal;
border-bottom: 1px dotted;
}
code {
color: #f63;
}
hr {
display: none;
}
img {
border: none;
}
/* unordered list style */
ul {
list-style: none;
margin-left: 10px;
padding: 0;
}
li {
list-style: none;
padding-left: 14px;
margin-bottom: 3px;
background: url(http://www.blogblog.com/tictac/tictac_orange.gif) no-repeat left 6px;
}
/* links */
a:link {
color: #6699cc;
}
a:visited {
color: #666699;
}
a:hover {
color: #693;
}
a:active {
color: #cc3333;
text-decoration: none;
}
/* ---( layout structure )---*/
#outer-wrapper {
width: 847px;
margin: 0px auto 0;
text-align: left;
font: normal normal 100% Verdana, sans-serif;
background: url(http://www.blogblog.com/tictac/tile_left.gif) repeat-y;
}
#content-wrapper {
margin-left: 42px; /* to avoid the border image */
width: 763px;
}
#main {
float: left;
width: 460px;
margin-top: 20px;
margin-right: 0;
margin-bottom: 0;
margin-left: 0;
padding-top: 0;
padding-right: 0;
padding-bottom: 0;
padding-left: 1em;
line-height: 1.5em;
word-wrap: break-word; /* fix for long text breaking sidebar float in IE */
overflow: hidden;     /* fix for long non-text content breaking IE sidebar float */
}
#sidebar {
float: right;
width: 259px;
padding-top: 20px;
padding-right: 0px;
padding-bottom: 0;
padding-left: 0;
font-size: 85%;
line-height: 1.4em;
color: #999999;
background: url(http://www.blogblog.com/tictac/sidebar_bg.gif) no-repeat left top;
word-wrap: break-word; /* fix for long text breaking sidebar float in IE */
overflow: hidden;     /* fix for long non-text content breaking IE sidebar float */
}
/* ---( header and site name )--- */
#header-wrapper {
margin: 0;
padding: 0;
font: normal normal 100% 'Lucida Grande','Trebuchet MS';
background: #e0e0e0 url(http://www.blogblog.com/tictac/top_div_left.gif) no-repeat left top;
}
#header {
margin: 0;
padding-top: 25px;
padding-right: 60px;
padding-bottom: 35px;
padding-left: 160px;
color: #FFFFFF;
background: url(http://www.blogblog.com/tictac/top_h1.gif) no-repeat bottom left;
}
#header h1 {
font-size: 200%;
text-shadow: #81A75B 2px 2px 2px;
}
#header h1 a {
text-decoration: none;
color: #FFFFFF;
}
#header h1 a:hover {
color: #eee;
}
/* ---( main column )--- */
h2.date-header {
margin-top: 0;
padding-left: 14px;
font-size: 90%;
color: #ff9933;
background: url(http://www.blogblog.com/tictac/date_icon.gif) no-repeat left 50%;
}
.post h3 {
margin-top: 0;
font: normal bold 130% 'Lucida Grande','Trebuchet MS';
letter-spacing: -1px;
color: #ff6633;
}
.post {
margin-top: 0;
margin-right: 0;
margin-bottom: 1.5em;
margin-left: 0;
padding-top: 0;
padding-right: 0;
padding-bottom: 1.5em;
padding-left: 14px;
border-bottom: 1px solid #ddd;
}
.post h3 a,
.post h3 a:visited {
color: #ff6633;
text-decoration: none;
}
.post-footer {
margin: 0;
padding-top: 0;
padding-right: 0;
padding-bottom: 0;
padding-left: 14px;
font-size: 88%;
color: #999999;
background: url(http://www.blogblog.com/tictac/tictac_grey.gif) no-repeat left 8px;
}
.post img, table.tr-caption-container {
padding: 6px;
border-top: 1px solid #ddd;
border-left: 1px solid #ddd;
border-bottom: 1px solid #c0c0c0;
border-right: 1px solid #c0c0c0;
}
.tr-caption-container img {
border: none;
padding: 0;
}
.feed-links {
clear: both;
line-height: 2.5em;
}
#blog-pager-newer-link {
float: left;
}
#blog-pager-older-link {
float: right;
}
#blog-pager {
text-align: center;
}
/* comment styles */
#comments {
padding: 10px 10px 0px 10px;
font-size: 85%;
line-height: 1.5em;
color: #666;
background: #eee url(http://www.blogblog.com/tictac/comments_curve.gif) no-repeat top left;
}
#comments h4 {
margin-top: 20px;
margin-right: 0;
margin-bottom: 15px;
margin-left: 0;
padding-top: 8px;
padding-right: 0;
padding-bottom: 0;
padding-left: 40px;
font-family: "Lucida Grande", "Trebuchet MS";
font-size: 130%;
color: #666;
background: url(http://www.blogblog.com/tictac/bubbles.gif) no-repeat 10px 0;
height: 29px !important; /* for most browsers */
height /**/:37px; /* for IE5/Win */
}
#comments ul {
margin-left: 0;
}
#comments li {
background: none;
padding-left: 0;
}
.comment-body {
padding-top: 0;
padding-right: 10px;
padding-bottom: 0;
padding-left: 25px;
background: url(http://www.blogblog.com/tictac/tictac_orange.gif) no-repeat 10px 5px;
}
.comment-body p {
margin-bottom: 0;
}
.comment-author {
margin-top: 4px;
margin-right: 0;
margin-bottom: 0;
margin-left: 0;
padding-top: 0;
padding-right: 10px;
padding-bottom: 0;
padding-left: 60px;
color: #999;
background: url(http://www.blogblog.com/tictac/comment_arrow.gif) no-repeat 44px 2px;
}
.comment-footer {
border-bottom: 1px solid #ddd;
padding-bottom: 1em;
}
.deleted-comment {
font-style:italic;
color:gray;
}
/* ---( sidebar )--- */
.sidebar h2 {
margin-top: 0;
margin-right: 0;
margin-bottom: 0;
margin-left: 0;
padding-top: 25px;
padding-right: 0;
padding-bottom: 0;
padding-left: 40px;
font: normal bold 130% 'Lucida Grande','Trebuchet MS';
color: #666666;
height: 32px;
background: url(http://www.blogblog.com/tictac/sidebar_icon.gif) no-repeat 10px 15px;
height: 32px !important; /* for most browsers */
height /**/:57px; /* for IE5/Win */
}
.sidebar .widget {
margin: 0;
padding-top: 0;
padding-right: 0;
padding-bottom: 10px;
padding-left: 10px;
border-bottom: 1px solid #ddd;
}
.sidebar li {
background: url(http://www.blogblog.com/tictac/tictac_green.gif) no-repeat left 5px;
}
.profile-textblock {
clear: both;
margin-left: 0;
}
.profile-img {
float: left;
margin-top: 0;
margin-right: 5px;
margin-bottom: 5px;
margin-left: 0;
border: 1px solid #ddd;
padding: 4px;
}
/* ---( footer )--- */
.clear { /* to fix IE6 padding-top issue */
clear: both;
}
#footer-wrapper {
margin: 0;
padding-top: 0;
padding-right: 0;
padding-bottom: 9px;
padding-left: 0;
font-size: 85%;
color: #ddd;
background: url(http://www.blogblog.com/tictac/bottom_sill.gif) no-repeat bottom left;
}
#footer {
margin: 0;
padding-top: 20px;
padding-right: 320px;
padding-bottom: 20px;
padding-left: 95px;
background: url(http://www.blogblog.com/tictac/bottom_sash_left.gif) no-repeat top left;
}
/** Page structure tweaks for layout editor wireframe */
body#layout #outer-wrapper,
body#layout #main,
body#layout #sidebar {
padding-top: 0;
margin-top: 0;
}
body#layout #outer-wrapper,
body#layout #content-wrapper {
width: 740px;
}
body#layout #sidebar {
margin-right: 0;
margin-bottom: 1em;
}
body#layout #header,
body#layout #footer,
body#layout #main {
padding: 0;
}
body#layout #content-wrapper {
margin: 0px;
}

--></style>
<script type="text/javascript">var a="indexOf",b="&m=1",e="(^|&)m=",f="?",g="?m=1";function h(){var c=window.location.href,d=c.split(f);switch(d.length){case 1:return c+g;case 2:return 0<=d[1].search(e)?null:c+b;default:return null}}var k=navigator.userAgent;if(-1!=k[a]("Mobile")&&-1!=k[a]("WebKit")&&-1==k[a]("iPad")||-1!=k[a]("Opera Mini")||-1!=k[a]("IEMobile")){var l=h();l&&window.location.replace(l)};
</script><script type="text/javascript">
if (window.jstiming) window.jstiming.load.tick('headEnd');
</script></head>
<body>
<div class='navbar section' id='navbar'><div class='widget Navbar' id='Navbar1'><script type="text/javascript">
    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener('load',
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent('onload', function(){ object[attribute] = val; });
      }
    }
  </script>
<div id="navbar-iframe-container"></div>
<script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script>
<script type="text/javascript">
        gapi.load("gapi.iframes:gapi.iframes.style.bubble", function() {
          if (gapi.iframes && gapi.iframes.getContext) {
            gapi.iframes.getContext().openChild({
                url: 'https://www.blogger.com/navbar.g?targetBlogID\758699431508730375743\46blogName\75The+History+of+Python\46publishMode\75PUBLISH_MODE_BLOGSPOT\46navbarType\75BLUE\46layoutType\75LAYOUTS\46searchRoot\75http://python-history.blogspot.com/search\46blogLocale\75en\46v\0752\46homepageUrl\75http://python-history.blogspot.com/\46targetPostID\0755526235131217291440\46blogPostOrPageUrl\75http://python-history.blogspot.com/2013/11/story-of-none-true-false.html\46vt\75-6351758330291227302',
                where: document.getElementById("navbar-iframe-container"),
                id: "navbar-iframe"
            });
          }
        });
      </script><script type="text/javascript">
(function() {
var script = document.createElement('script');
script.type = 'text/javascript';
script.src = '//pagead2.googlesyndication.com/pagead/js/google_top_exp.js';
var head = document.getElementsByTagName('head')[0];
if (head) {
head.appendChild(script);
}})();
</script>
</div></div>
<div id='outer-wrapper'><div id='wrap2'>
<!-- skip links for text browsers -->
<span id='skiplinks' style='display:none;'>
<a href='#main'>skip to main </a> |
      <a href='#sidebar'>skip to sidebar</a>
</span>
<div id='header-wrapper'>
<div class='header section' id='header'><div class='widget Header' id='Header1'>
<div id='header-inner'>
<div class='titlewrapper'>
<h1 class='title'>
<a href='http://python-history.blogspot.ro/'>The History of Python</a>
</h1>
</div>
<div class='descriptionwrapper'>
<p class='description'><span>A series of articles on the history of the Python programming language and its community.</span></p>
</div>
</div>
</div></div>
</div>
<div id='content-wrapper'>
<div id='crosscol-wrapper' style='text-align:center'>
<div class='crosscol section' id='crosscol'></div>
</div>
<div id='main-wrapper'>
<div class='main section' id='main'><div class='widget Blog' id='Blog1'>
<div class='blog-posts hfeed'>
<!-- google_ad_section_start(name=default) -->

          <div class="date-outer">
        
<h2 class='date-header'><span>Sunday, November 10, 2013</span></h2>

          <div class="date-posts">
        
<div class='post-outer'>
<div class='post hentry uncustomized-post-template' itemprop='blogPost' itemscope='itemscope' itemtype='http://schema.org/BlogPosting'>
<meta content='8699431508730375743' itemprop='blogId'/>
<meta content='5526235131217291440' itemprop='postId'/>
<a name='5526235131217291440'></a>
<h3 class='post-title entry-title' itemprop='name'>
The story of None, True and False (and an explanation of literals, keywords and builtins thrown in)
</h3>
<div class='post-header'>
<div class='post-header-line-1'></div>
</div>
<div class='post-body entry-content' id='post-body-5526235131217291440' itemprop='description articleBody'>
I received an interesting question in the mail recently:<br />
<blockquote class="tr_bq">
<i>What is the difference between keywords and literals? Why are True and False keywords rather than literals in python3?</i> </blockquote>
<blockquote class="tr_bq">
<i>I was horrified recently to find that assigning to True/False works in 
python2. So I went digging, and found that True and False were created 
to be 'constants' like None in PEP 285. Assignment to None was 
disallowed in 2.4, but not to True/False until python3. Was there a 
reason None was originally built as a variable rather than a literal? </i></blockquote>
Let's start with the first question: keywords and literals.<br />
<br />
A keyword, in the context of defining the syntax of a language, also known as a reserved word, is something that looks like an identifier in the language, but from the parser's point of view act like a token of the language. An identifier is defined as a sequence of one or more letters, digits and underscores, not starting with a digit. (This is Python's definition, but many languages, like C or Java, use the same or a very similar definition.)<br />
<br />
The important thing to remember about keywords is that a keyword cannot be used to name a variable (or function, class, etc.). Some well-known keywords in Python include 'if', 'while', 'for', 'and', 'or'.<br />
<br />
A literal, on the other hand, is an element of an expression that describes a constant value. Examples of literals are numbers (e.g. 42, 3.14, or 1.6e-10) and strings (e.g. "Hello, world"). Literals are recognized by the parser, and the exact rules for how literals are parsed are often quite subtle. For example, these are all numeric literals in Python 3:<br />
<blockquote class="tr_bq">
123<br />
1.0<br />
1.<br />
.01e10<br />
.1e+42<br />
123.456e-100<br />
0xfffe<br />
0o755</blockquote>
but these are not:<br />
<blockquote class="tr_bq">
. (dot)<br />
e10 (identifier)<br />
0y12 (the literal 0 followed by the identifier y12)<br />
0xffe+10 (the literal 0xffe followed by a plus sign and and the number 10)</blockquote>
Note the distinction between a constant and a literal. We often write code defining "constants", e.g.<br />
<blockquote class="tr_bq">
MAX_LEVELS = 15</blockquote>
Here, 15 is a literal, but MAX_LEVELS is not -- it is an identifier, and the all-caps form of the name suggests to the reader that it is probably not changed anywhere in the code, which means that we can consider it a constant -- but this is just a convention, and the Python parser doesn't know about that convention, nor does it enforce it.<br />
<br />
On the other hand, the parser won't let you write<br />
<blockquote>
15 = MAX_LEVELS</blockquote>
This is because the left-hand side of the assignment operator (=) must be a variable, and a literal is not a variable. (The exact definition of variable is complex, since some things that look like expressions are also considered to be variables, such as d[k], (a, b), and foo.bar -- but not f() or () or 42. This definition of variable is also used by the "del" statement.)<br />
<br />
Now on to None, True and False.<br />
<br />
Let's begin with None, because it has always been in the language. (True and False were relatively recent additions -- they first made their appearance in Python 2.2.1, to be precise.) None is a singleton object (meaning there is only one None), used in many places in the language and library to represent the absence of some other value. For example, if d is a dictionary, d.get(k) will return d[k] if it exists, but None if d has no key k. In earlier versions of Python, None was just a "built-in name". The parser had no special knowledge of None -- just like it doesn't have special knowledge of built-in types like int, float or str, or built-in exceptions like KeyError or ZeroDivisionError. All of these are treated by the parser as identifiers, and when your code is being interpreted they are looked up just like any other names (e.g. the functions and variables you define yourself). So from the parser's perspective, the following are treated the same, and the parse tree it produces (&lt;name&gt; = &lt;name&gt;) is the same in each case:<br />
<blockquote class="tr_bq">
x = None<br />
x = int<br />
x = foobar</blockquote>
On the other hand, the following  produce different parse trees (&lt;name&gt; = &lt;literal&gt;):<br />
<blockquote class="tr_bq">
x = 42<br />
x = 'hello'</blockquote>
because the parser treats numeric and string literals as different from identifiers. Combining this with the earlier MAX_LEVEL examples, we can see that if we swap the left and right hand sides, the first three will still be accepted by the parser (&lt;name&gt; = &lt;name&gt;), while the swapped version of the second set will be rejected (&lt;literal&gt; = &lt;name&gt; is invalid).<br />
<br />
The practical consequence is that, if you really want to mess with your readers, you can write code that reassigns built-ins; for example, you could write:<br />
<blockquote class="tr_bq">
int = float<br />
def parse_string(s):<br />
&nbsp;&nbsp;&nbsp; return int(s)<br />
print(parse_string('42'))&nbsp;&nbsp;&nbsp; # Will print '42.0'</blockquote>
Some of you may respond to this with "So what? Reasonable programmers don't write such code." Others may react in the opposite way, saying "Why on earth does the language allow assignment to a built-in name like 'int' at all?!"<br />
<br />
The answer is subtle, and has to do with consistency and evolution of the language. I bet that without looking it up you won't be able to give a complete list all built-in names defined by Python. (I know I can't.) Moreover, I bet that many of you won't recognize every single name on that list. (To see the list, try typing dir(__builtins__) at the Python command prompt.)<br />
<br />
Take for example the weird built-ins named copyright, credits or license. They exist so that we can mention them in the greeting shown when you start Python interactively:<br />
<blockquote class="tr_bq">
<span style="font-size: x-small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">Python 3.4.0a4+ (default:0917f6c62c62, Oct 22 2013, 10:55:35)<br />[GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)] on darwin<br />Type "help", "copyright", "credits" or "license" for more information.<br />&gt;&gt;&gt; credits<br />Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands<br />for supporting Python development.&nbsp; See www.python.org for more information.<br />&gt;&gt;&gt;&nbsp;</span></span></blockquote>
&nbsp;In order for this to work, we made them built-ins. But does this mean you shouldn't be allowed to use 'credits' as a variable or parameter name? I think not. Certainly many people don't realize that these esoteric built-ins even exist, and they would be surprised if they were prevented from using them as variable names. From here, it's just a gradual path. Many people write functions or methods with arguments named str or len, or with names like compile or format. Moreover, suppose you wrote some Python 2.5 code where you used bytes as a variable name. In Python 2.6, we added a built-in function named 'bytes' (it's an alias for str, actually). Should your code now be considered invalid? There's no reason for that, and in fact your code will be fine. (Even in Python 3, where bytes is one of the fundamental types.)<br />
<br />
On the other hand, you cannot have a variable named 'if' or 'try', because these are reserved words (keywords) that are treated special by the parser. Because you cannot use these as variable or function names anywhere, ever, in any Python program, everyone using Python has to know about all the reserved words in the language, even if they don't have any need for them. For this reason, we try to keep the list of reserved words small, and the core developers hem and haw a lot before adding a new reserved word to the language.<br />
<br />
In fact, many proposed new features have been killed  because they would require a new keyword; others have been modified to avoid that need. Also, when we do decide to add a new keyword, we  start a deprecation campaign at least one release before the new keyword is introduced, warning developers to choose a different name for their variables. (There's also a trick to allow developers to choose to use the new keyword right away; this is why we have e.g. "from __future__ import with_statement".)<br />
<br />
There's no such concern for built-ins. Code that happens to use the name of a new built-in as a variable or function name will continue to function (as long as you don't also try to use the new built-in in the same function). While we still try to be conservative with the introduction of new built-ins, at least we don't have to worry about breaking working code by merely adding something to the language. The (small) price we pay for this is the possibility that some joker intentionally redefines a built-in just to confuse others. But there are tons of other ways to write unreadable code, and I don't see this as a particularly bad problem.<br />
<br />
So, after this long detour about built-ins vs. keywords, back to None. Why  did we eventually make None a reserved word? Frankly, the reasons were perhaps mostly social. Unlike some built-ins and many exceptions, None is so central to using Python that you really can't be using Python without knowing about None. So people were (like our question-asker) "horrified" when they found that assignment to None was actually allowed at all. Worse, there was the concern (whether founded or not) that the way name lookup in Python works, "evaluating" the expression None is slow, because it requires at least two dictionary lookups (all names are looked up in the globals dict before being looked up in the built-ins dict).<br />
<br />
In the end we decided that there was no downside to making None a keyword (there is no code that actually assigns to it) and it might make some code a tiny bit faster, or catch rare typos. There was still a one-time cost to the developer community (changes to the parser and documentation) but this was small enough that we din't hesitate very long.<br />
<br />
The situation for True/False is a little different. They weren't always part of the language, and many people had invented their own convention. People would define constants named true and false, True and False, or TRUE and FALSE, and use those consistently throughout their code. I don't recall which spelling was most popular, but when we introduced True and False into the language, we definitely did not want to break any packages that were defining their own True and False constants. (One concern was that those packages would have to have a way to continue to run on previous Python versions.)<br />
<br />
So, essentially our hand was forced in this case, and we had to introduce True and False as built-in constants, not as keywords. But over time, code defining its own versions of True and False (by whichever name) became more and more frowned upon, and by the time Python 3 came around, when we looked at opportunities for cleaning up the language, we found that it was logical to make True and False keywords, by analogy to None.<br />
<br />
And there you have it. It's all completely logical, once you understand the context. :-) Sorry for the long response; I hope it's been educational.<br />
<br />
<b>UPDATE:</b> I still forgot to answer whether None/True/False are literals or keywords. My answer is that they are both. They are keywords because that's how the parser recognizes them. They 
are literals because that's their role in expressions and because they 
stand for constant values. One could argue about whether things like 
{'foo': 42} are literals; personally I'd prefer to give these some other
 name, because otherwise what would you call {'foo': x+1}? The <a href="http://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries" target="_blank">language reference</a> calls both of these "displays".
<div style='clear: both;'></div>
</div>
<div class='post-footer'>
<div class='post-footer-line post-footer-line-1'>
<span class='post-author vcard'>
Posted by
<span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'>
<meta content='http://www.blogger.com/profile/12821714508588242516' itemprop='url'/>
<a class='g-profile' href='http://www.blogger.com/profile/12821714508588242516' rel='author' title='author profile'>
<span itemprop='name'>Guido van Rossum</span>
</a>
</span>
</span>
<span class='post-timestamp'>
at
<meta content='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html' itemprop='url'/>
<a class='timestamp-link' href='http://python-history.blogspot.ro/2013/11/story-of-none-true-false.html' rel='bookmark' title='permanent link'><abbr class='published' itemprop='datePublished' title='2013-11-10T14:40:00-08:00'>2:40 PM</abbr></a>
</span>
<span class='reaction-buttons'>
</span>
<span class='star-ratings'>
</span>
<span class='post-comment-link'>
</span>
<span class='post-backlinks post-comment-link'>
</span>
<span class='post-icons'>
<span class='item-control blog-admin pid-1067882746'>
<a href='http://www.blogger.com/post-edit.g?blogID=8699431508730375743&postID=5526235131217291440&from=pencil' title='Edit Post'>
<img alt='' class='icon-action' height='18' src='http://img2.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/>
</a>
</span>
</span>
<div class='post-share-buttons goog-inline-block'>
</div>
</div>
<div class='post-footer-line post-footer-line-2'>
<span class='post-labels'>
Labels:
<a href='http://python-history.blogspot.ro/search/label/False' rel='tag'>False</a>,
<a href='http://python-history.blogspot.ro/search/label/keywords' rel='tag'>keywords</a>,
<a href='http://python-history.blogspot.ro/search/label/literals' rel='tag'>literals</a>,
<a href='http://python-history.blogspot.ro/search/label/None' rel='tag'>None</a>,
<a href='http://python-history.blogspot.ro/search/label/python' rel='tag'>python</a>,
<a href='http://python-history.blogspot.ro/search/label/reserved%20words' rel='tag'>reserved words</a>,
<a href='http://python-history.blogspot.ro/search/label/True' rel='tag'>True</a>
</span>
</div>
<div class='post-footer-line post-footer-line-3'>
<span class='post-location'>
</span>
</div>
</div>
</div>
<div class='comments' id='comments'>
<a name='comments'></a>
<h4>15 comments:</h4>
<div class='comments-content'>
<script async='async' src='//www.blogblog.com/dynamicviews/4224c15c4e7c9321/js/comments.js' type='text/javascript'></script>
<script type='text/javascript'>
    (function() {
      var items = [{'id': '1503706890205495501', 'body': 'It is false that this post has not been educational. \74br /\76(Forgive me, couldn\46#39;t resist.)', 'timestamp': '1384123710962', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751384123710962#c1503706890205495501', 'author': {'name': 'Steve', 'avatarUrl': 'http://3.bp.blogspot.com/_QxeyqfUWMqE/SaxgALlMMGI/AAAAAAAAABM/T_Y5zfdwsZs/S45/sb.JPG', 'profileUrl': 'http://www.blogger.com/profile/00852288711042186044'}, 'displayTime': 'November 10, 2013 at 2:48 PM', 'deleteclass': 'item-control blog-admin pid-1561469049'}, {'id': '7341523384564611380', 'body': 'Moral of the story: When first designing a new language, always make True/False as keywords.', 'timestamp': '1384140846078', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751384140846078#c7341523384564611380', 'author': {'name': 'Bryan Chen', 'avatarUrl': 'http://img2.blogblog.com/img/b16-rounded.gif', 'profileUrl': 'http://www.blogger.com/profile/02740978942945469849'}, 'displayTime': 'November 10, 2013 at 7:34 PM', 'deleteclass': 'item-control blog-admin pid-1868454281'}, {'id': '2534820018740190640', 'body': '@Bryan Chen:\74br /\76That is definitely not the moral of this story. The moral is that languages and their use evolve over time and therefore it is good practice to design and maintain your language to allow for change/improvement.\74br /\76 \74br /\76In retrospect True/False could have been keywords. By using keywords sparingly and incorporating mechanisms like __future__, the designers left room to fix this.', 'timestamp': '1384161208321', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751384161208321#c2534820018740190640', 'author': {'name': 'Snirp', 'avatarUrl': 'http://img2.blogblog.com/img/b16-rounded.gif', 'profileUrl': 'http://www.blogger.com/profile/03522173226688201303'}, 'displayTime': 'November 11, 2013 at 1:13 AM', 'deleteclass': 'item-control blog-admin pid-1861494570'}, {'id': '1081650870299425848', 'body': 'Having \46quot;credits\46quot;, etc., be variables has always seemed very icky to me.  The REPL could have recognised invalid Python as its own commands to provide access to them, similar to SQL REPLs;  few expect &#171;python -c \46#39;print credits\46#39;&#187; to work.\74br /\76\74br /\76Worse, http://bugs.python.org/issue8220 shows how exit() exists without importing sys.  I\46#39;ve had others use site.py\46#39;s exit thinking they were using sys\46#39;s.', 'timestamp': '1384174187058', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751384174187058#c1081650870299425848', 'author': {'name': 'Ralph Corderoy', 'avatarUrl': '//lh5.googleusercontent.com/-N5d70Z5pZjY/AAAAAAAAAAI/AAAAAAAAAPY/PnCrk9UKejo/s512-c/photo.jpg', 'profileUrl': 'http://www.blogger.com/profile/13140975971019765573'}, 'displayTime': 'November 11, 2013 at 4:49 AM', 'deleteclass': 'item-control blog-admin pid-1239653326'}, {'id': '2859039765215019853', 'body': 'Isn\46#39;t there an inherent gain for C code that also needs to deal with these values?', 'timestamp': '1384177019186', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751384177019186#c2859039765215019853', 'author': {'name': 'patrys', 'avatarUrl': 'http://img2.blogblog.com/img/b16-rounded.gif', 'profileUrl': 'http://www.blogger.com/profile/12826298786973085887'}, 'displayTime': 'November 11, 2013 at 5:36 AM', 'deleteclass': 'item-control blog-admin pid-211093024'}, {'id': '5492441039329026892', 'body': 'Small typo:\74br /\76\46gt;\46gt;\46gt; x \75 0xfffe\74br /\76\46gt;\46gt;\46gt; x\74br /\07665534\74br /\76\46gt;\46gt;\46gt; x \75 0xfffe+10\74br /\76\46gt;\46gt;\46gt; x\74br /\07665544\74br /\76\46gt;\46gt;\46gt;\74br /\076', 'timestamp': '1384200811586', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751384200811586#c5492441039329026892', 'author': {'name': 'Tom Kent', 'avatarUrl': 'http://img2.blogblog.com/img/b16-rounded.gif', 'profileUrl': 'http://www.blogger.com/profile/00443552278549079958'}, 'displayTime': 'November 11, 2013 at 12:13 PM', 'deleteclass': 'item-control blog-admin pid-1887804053'}, {'id': '5430787516797055725', 'parentId': '5492441039329026892', 'body': 'It isn\46#39;t a literal, but unlike all the others is valid.', 'timestamp': '1384200916427', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751384200916427#c5430787516797055725', 'author': {'name': 'Tom Kent', 'avatarUrl': 'http://img2.blogblog.com/img/b16-rounded.gif', 'profileUrl': 'http://www.blogger.com/profile/00443552278549079958'}, 'displayTime': 'November 11, 2013 at 12:15 PM', 'deleteclass': 'item-control blog-admin pid-1887804053'}, {'id': '2035063363271747818', 'body': 'Some time ago I asked @ Stackoverflow why Python\46#39;s built-ins methods can\46#39;t be overridden or why can\46#39;t you add new methods to built-ins?\74br /\76\74br /\76Best answer I got was that if it were allowed, libraries that use these built-ins might give bad results because it breaks the assumptions those libraries made about the built-ins. But since you say yourself that built-ins variables such as int, str... CAN be overridden, I see no reason why they can\46#39;t be just extended with new methods, or override their default behaviour. Further more, I believe that libraries (external modules), have their own namespace and once a function is defined inside a module to use a certain object, it can\46#39;t be overridden from another module:\74br /\76\74br /\76module1.py:\74br /\76print(int)\74br /\76\74br /\76module2.py:\74br /\76int \75 5\74br /\76import module1\74br /\76\74br /\76This will print \46quot;\46quot;, (which is the int class string representation), and not \46quot;5\46quot;.\74br /\76\74br /\76Here is my question @ SO (it starts with a different question in mind, but very soon I got to the point I made here):\74br /\76http://stackoverflow.com/questions/19083160/can-literals-in-python-be-overridden\74br /\76\74br /\76Guido, I\46#39;d love to get your statement on that matter.', 'timestamp': '1384201542425', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751384201542425#c2035063363271747818', 'author': {'name': 'RB14', 'avatarUrl': 'http://img2.blogblog.com/img/b16-rounded.gif', 'profileUrl': 'http://www.blogger.com/profile/11991922948769076950'}, 'displayTime': 'November 11, 2013 at 12:25 PM', 'deleteclass': 'item-control blog-admin pid-889984898'}, {'id': '5425012881131614657', 'body': '@RB14: It\46#39;s not the same. When you reassign e.g. \46#39;str\46#39;, you are messing only with your *own* code (the scope of the assignment). When you redefine the built-in itself, you are messing with *everyone\46#39;s* code.', 'timestamp': '1384216454817', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751384216454817#c5425012881131614657', 'author': {'name': 'Guido van Rossum', 'avatarUrl': 'http://2.bp.blogspot.com/_FG9t5W1SJ14/SZdIM5ZxpgI/AAAAAAAAD5Q/49Kj8K7N2Og/S45/IMG_2192.jpg', 'profileUrl': 'http://www.blogger.com/profile/12821714508588242516'}, 'displayTime': 'November 11, 2013 at 4:34 PM', 'deleteclass': 'item-control blog-admin pid-1067882746'}, {'id': '1555591939471937813', 'parentId': '5425012881131614657', 'body': 'Well, clearly I didn\46#39;t think this through. I mistakenly mixed up variables and objects... Thanks for clarifying.', 'timestamp': '1384255850947', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751384255850947#c1555591939471937813', 'author': {'name': 'RB14', 'avatarUrl': 'http://img2.blogblog.com/img/b16-rounded.gif', 'profileUrl': 'http://www.blogger.com/profile/11991922948769076950'}, 'displayTime': 'November 12, 2013 at 3:30 AM', 'deleteclass': 'item-control blog-admin pid-889984898'}, {'id': '7034943272158871910', 'body': 'Brilliant! ', 'timestamp': '1384576377535', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751384576377535#c7034943272158871910', 'author': {'name': 'abdulapopoola', 'avatarUrl': 'http://img2.blogblog.com/img/b16-rounded.gif', 'profileUrl': 'http://www.blogger.com/profile/16731604352756053121'}, 'displayTime': 'November 15, 2013 at 8:32 PM', 'deleteclass': 'item-control blog-admin pid-660514719'}, {'id': '615792459705593946', 'body': 'Very educational indeed, thanks Guido.', 'timestamp': '1384836895579', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751384836895579#c615792459705593946', 'author': {'name': 'Gathogo', 'avatarUrl': 'http://img2.blogblog.com/img/b16-rounded.gif', 'profileUrl': 'http://www.blogger.com/profile/14124702144506645078'}, 'displayTime': 'November 18, 2013 at 8:54 PM', 'deleteclass': 'item-control blog-admin pid-1487967488'}, {'id': '7890833944309761676', 'body': 'Tangental question (maybe better asked at StackOverflow):\74br /\76\74br /\76I was quiet surprised that:\74br /\76\74br /\76for x in None :\74br /\76   print x\74br /\76\74br /\76raised: TypeError: \46#39;NoneType\46#39; object is not iterable\74br /\76\74br /\76My (naive) expectation was the loop would work like \46#39;for x in () :\46#39; aka pass right over nothing.\74br /\76\74br /\76Why would I do this?  Well it\46#39;s quite common (AFAICT) to return None in functions.  It\46#39;s also common to iterate over the results of a function.  It\46#39;d be \46#39;nice\46#39; if I could:\74br /\76\74br /\76for x in function_possibly_returning_None :\74br /\76    print x\74br /\76\74br /\76rather than \74br /\76\74br /\76myiterable \75 function_possibly_returning_None\74br /\76if myiterable :\74br /\76    for x in myiterable :\74br /\76        print x\74br /\076', 'timestamp': '1384959165523', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751384959165523#c7890833944309761676', 'author': {'name': 'Jason', 'avatarUrl': 'http://img2.blogblog.com/img/b16-rounded.gif', 'profileUrl': 'http://www.blogger.com/profile/18040872212781301984'}, 'displayTime': 'November 20, 2013 at 6:52 AM', 'deleteclass': 'item-control blog-admin pid-772928031'}, {'id': '8938963681642505392', 'body': 'Jason, it seems wrong that a function could either return an iterable, e.g. list, or None.  Why would it not return an empty list, tuple, etc?  A function returning None to indicate none probably returns a non-iterable for non-none.', 'timestamp': '1384961155213', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751384961155213#c8938963681642505392', 'author': {'name': 'Ralph Corderoy', 'avatarUrl': '//lh5.googleusercontent.com/-N5d70Z5pZjY/AAAAAAAAAAI/AAAAAAAAAPY/PnCrk9UKejo/s512-c/photo.jpg', 'profileUrl': 'http://www.blogger.com/profile/13140975971019765573'}, 'displayTime': 'November 20, 2013 at 7:25 AM', 'deleteclass': 'item-control blog-admin pid-1239653326'}, {'id': '5549153359870155417', 'body': 'To Jason\46#39;s question, I wonder how the BDFL would view:\74br /\76\74br /\76for x in None or (): print(x)\74br /\76\74br /\76as a workaround.', 'timestamp': '1395163671725', 'permalink': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment\0751395163671725#c5549153359870155417', 'author': {'name': 'Aaron Hall', 'avatarUrl': 'http://2.bp.blogspot.com/_yJLNx613MNI/SYKvpmPrhgI/AAAAAAAAAAk/FRg894B_qbs/S45/ahall.jpg', 'profileUrl': 'http://www.blogger.com/profile/04750451514384953771'}, 'displayTime': 'March 18, 2014 at 10:27 AM', 'deleteclass': 'item-control blog-admin pid-1298830961'}];
      var msgs = {'loadMore': 'Load more...', 'loading': 'Loading...', 'loaded': 'No more!', 'addComment': 'Add comment', 'reply': 'Reply', 'delete': 'Delete'};
      var config = {'blogId': '8699431508730375743', 'postId': '5526235131217291440', 'feed': 'http://python-history.blogspot.com/feeds/5526235131217291440/comments/default', 'authorName': 'Guido van Rossum', 'authorUrl': 'http://www.blogger.com/profile/12821714508588242516', 'baseUri': 'http://www.blogger.com', 'maxThreadDepth': 2};

// <![CDATA[
      var cursor = null;
      if (items && items.length > 0) {
        cursor = parseInt(items[items.length - 1].timestamp) + 1;
      }

      var bodyFromEntry = function(entry) {
        if (entry.gd$extendedProperty) {
          for (var k in entry.gd$extendedProperty) {
            if (entry.gd$extendedProperty[k].name == 'blogger.contentRemoved') {
              return '<span class="deleted-comment">' + entry.content.$t + '</span>';
            }
          }
        }
        return entry.content.$t;
      }

      var parse = function(data) {
        cursor = null;
        var comments = [];
        if (data && data.feed && data.feed.entry) {
          for (var i = 0, entry; entry = data.feed.entry[i]; i++) {
            var comment = {};
            // comment ID, parsed out of the original id format
            var id = /blog-(\d+).post-(\d+)/.exec(entry.id.$t);
            comment.id = id ? id[2] : null;
            comment.body = bodyFromEntry(entry);
            comment.timestamp = Date.parse(entry.published.$t) + '';
            if (entry.author && entry.author.constructor === Array) {
              var auth = entry.author[0];
              if (auth) {
                comment.author = {
                  name: (auth.name ? auth.name.$t : undefined),
                  profileUrl: (auth.uri ? auth.uri.$t : undefined),
                  avatarUrl: (auth.gd$image ? auth.gd$image.src : undefined)
                };
              }
            }
            if (entry.link) {
              if (entry.link[2]) {
                comment.link = comment.permalink = entry.link[2].href;
              }
              if (entry.link[3]) {
                var pid = /.*comments\/default\/(\d+)\?.*/.exec(entry.link[3].href);
                if (pid && pid[1]) {
                  comment.parentId = pid[1];
                }
              }
            }
            comment.deleteclass = 'item-control blog-admin';
            if (entry.gd$extendedProperty) {
              for (var k in entry.gd$extendedProperty) {
                if (entry.gd$extendedProperty[k].name == 'blogger.itemClass') {
                  comment.deleteclass += ' ' + entry.gd$extendedProperty[k].value;
                } else if (entry.gd$extendedProperty[k].name == 'blogger.displayTime') {
                  comment.displayTime = entry.gd$extendedProperty[k].value;
                }
              }
            }
            comments.push(comment);
          }
        }
        return comments;
      };

      var paginator = function(callback) {
        if (hasMore()) {
          var url = config.feed + '?alt=json&v=2&orderby=published&reverse=false&max-results=50';
          if (cursor) {
            url += '&published-min=' + new Date(cursor).toISOString();
          }
          window.bloggercomments = function(data) {
            var parsed = parse(data);
            cursor = parsed.length < 50 ? null
                : parseInt(parsed[parsed.length - 1].timestamp) + 1
            callback(parsed);
            window.bloggercomments = null;
          }
          url += '&callback=bloggercomments';
          var script = document.createElement('script');
          script.type = 'text/javascript';
          script.src = url;
          document.getElementsByTagName('head')[0].appendChild(script);
        }
      };
      var hasMore = function() {
        return !!cursor;
      };
      var getMeta = function(key, comment) {
        if ('iswriter' == key) {
          var matches = !!comment.author
              && comment.author.name == config.authorName
              && comment.author.profileUrl == config.authorUrl;
          return matches ? 'true' : '';
        } else if ('deletelink' == key) {
          return config.baseUri + '/delete-comment.g?blogID='
               + config.blogId + '&postID=' + comment.id;
        } else if ('deleteclass' == key) {
          return comment.deleteclass;
        }
        return '';
      };

      var replybox = null;
      var replyUrlParts = null;
      var replyParent = undefined;

      var onReply = function(commentId, domId) {
        if (replybox == null) {
          // lazily cache replybox, and adjust to suit this style:
          replybox = document.getElementById('comment-editor');
          if (replybox != null) {
            replybox.height = '250px';
            replybox.style.display = 'block';
            replyUrlParts = replybox.src.split('#');
          }
        }
        if (replybox && (commentId !== replyParent)) {
          document.getElementById(domId).insertBefore(replybox, null);
          replybox.src = replyUrlParts[0]
              + (commentId ? '&parentID=' + commentId : '')
              + '#' + replyUrlParts[1];
          replyParent = commentId;
        }
      };

      var hash = (window.location.hash || '#').substring(1);
      var startThread, targetComment;
      if (/^comment-form_/.test(hash)) {
        startThread = hash.substring('comment-form_'.length);
      } else if (/^c[0-9]+$/.test(hash)) {
        targetComment = hash.substring(1);
      }

      // Configure commenting API:
      var configJso = {
        'maxDepth': config.maxThreadDepth
      };
      var provider = {
        'id': config.postId,
        'data': items,
        'loadNext': paginator,
        'hasMore': hasMore,
        'getMeta': getMeta,
        'onReply': onReply,
        'rendered': true,
        'initComment': targetComment,
        'initReplyThread': startThread,
        'config': configJso,
        'messages': msgs
      };

      var render = function() {
        if (window.goog && window.goog.comments) {
          var holder = document.getElementById('comment-holder');
          window.goog.comments.render(holder, provider);
        }
      };

      // render now, or queue to render when library loads:
      if (window.goog && window.goog.comments) {
        render();
      } else {
        window.goog = window.goog || {};
        window.goog.comments = window.goog.comments || {};
        window.goog.comments.loadQueue = window.goog.comments.loadQueue || [];
        window.goog.comments.loadQueue.push(render);
      }
    })();
// ]]>
</script>
<div id='comment-holder'>
<div id='bc_0_16C' kind='c'><div id='bc_0_16CT'><div id='bc_0_15T' class='comment-thread' kind='r'  t='0' u='0'><ol id='bc_0_15TB'><li id='bc_0_0B' class='comment' kind='b'><div class='avatar-image-container'><img src='http://3.bp.blogspot.com/_QxeyqfUWMqE/SaxgALlMMGI/AAAAAAAAABM/T_Y5zfdwsZs/S45/sb.JPG'></img></div><div id='c1503706890205495501' class='comment-block'><div id='bc_0_0M' class='comment-header' kind='m'><cite class='user'><a rel='nofollow' href='http://www.blogger.com/profile/00852288711042186044'>Steve</a></cite><span class='icon user'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1384123710962#c1503706890205495501'>November 10, 2013 at 2:48 PM</a></span></div><p id='bc_0_0MC' class='comment-content'>It is false that this post has not been educational. <br />(Forgive me, couldn&#39;t resist.)</p><span id='bc_0_0MN' class='comment-actions secondary-text' kind='m'><a kind='i' href='javascript:;' target='_self' o='r'>Reply</a><span class='item-control blog-admin pid-1561469049'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=1503706890205495501'>Delete</a></span></span></div><div id='bc_0_0BR' class='comment-replies'></div><div id='bc_0_0B_box' class='comment-replybox-single'></div></li><li id='bc_0_1B' class='comment' kind='b'><div class='avatar-image-container'><img src='http://img2.blogblog.com/img/b36-rounded.png'></img></div><div id='c7341523384564611380' class='comment-block'><div id='bc_0_1M' class='comment-header' kind='m'><cite class='user'><a rel='nofollow' href='http://www.blogger.com/profile/02740978942945469849'>Bryan Chen</a></cite><span class='icon user'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1384140846078#c7341523384564611380'>November 10, 2013 at 7:34 PM</a></span></div><p id='bc_0_1MC' class='comment-content'>Moral of the story: When first designing a new language, always make True/False as keywords.</p><span id='bc_0_1MN' class='comment-actions secondary-text' kind='m'><a kind='i' href='javascript:;' target='_self' o='r'>Reply</a><span class='item-control blog-admin pid-1868454281'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=7341523384564611380'>Delete</a></span></span></div><div id='bc_0_1BR' class='comment-replies'></div><div id='bc_0_1B_box' class='comment-replybox-single'></div></li><li id='bc_0_2B' class='comment' kind='b'><div class='avatar-image-container'><img src='http://img2.blogblog.com/img/b36-rounded.png'></img></div><div id='c2534820018740190640' class='comment-block'><div id='bc_0_2M' class='comment-header' kind='m'><cite class='user'><a rel='nofollow' href='http://www.blogger.com/profile/03522173226688201303'>Snirp</a></cite><span class='icon user'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1384161208321#c2534820018740190640'>November 11, 2013 at 1:13 AM</a></span></div><p id='bc_0_2MC' class='comment-content'>@Bryan Chen:<br />That is definitely not the moral of this story. The moral is that languages and their use evolve over time and therefore it is good practice to design and maintain your language to allow for change/improvement.<br /> <br />In retrospect True/False could have been keywords. By using keywords sparingly and incorporating mechanisms like __future__, the designers left room to fix this.</p><span id='bc_0_2MN' class='comment-actions secondary-text' kind='m'><a kind='i' href='javascript:;' target='_self' o='r'>Reply</a><span class='item-control blog-admin pid-1861494570'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=2534820018740190640'>Delete</a></span></span></div><div id='bc_0_2BR' class='comment-replies'></div><div id='bc_0_2B_box' class='comment-replybox-single'></div></li><li id='bc_0_3B' class='comment' kind='b'><div class='avatar-image-container'><img src='//lh5.googleusercontent.com/-N5d70Z5pZjY/AAAAAAAAAAI/AAAAAAAAAPY/PnCrk9UKejo/s512-c/photo.jpg'></img></div><div id='c1081650870299425848' class='comment-block'><div id='bc_0_3M' class='comment-header' kind='m'><cite class='user'><a rel='nofollow' href='http://www.blogger.com/profile/13140975971019765573'>Ralph Corderoy</a></cite><span class='icon user'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1384174187058#c1081650870299425848'>November 11, 2013 at 4:49 AM</a></span></div><p id='bc_0_3MC' class='comment-content'>Having &quot;credits&quot;, etc., be variables has always seemed very icky to me.  The REPL could have recognised invalid Python as its own commands to provide access to them, similar to SQL REPLs;  few expect &#171;python -c &#39;print credits&#39;&#187; to work.<br /><br />Worse, http://bugs.python.org/issue8220 shows how exit() exists without importing sys.  I&#39;ve had others use site.py&#39;s exit thinking they were using sys&#39;s.</p><span id='bc_0_3MN' class='comment-actions secondary-text' kind='m'><a kind='i' href='javascript:;' target='_self' o='r'>Reply</a><span class='item-control blog-admin pid-1239653326'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=1081650870299425848'>Delete</a></span></span></div><div id='bc_0_3BR' class='comment-replies'></div><div id='bc_0_3B_box' class='comment-replybox-single'></div></li><li id='bc_0_4B' class='comment' kind='b'><div class='avatar-image-container'><img src='http://img2.blogblog.com/img/b36-rounded.png'></img></div><div id='c2859039765215019853' class='comment-block'><div id='bc_0_4M' class='comment-header' kind='m'><cite class='user'><a rel='nofollow' href='http://www.blogger.com/profile/12826298786973085887'>patrys</a></cite><span class='icon user'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1384177019186#c2859039765215019853'>November 11, 2013 at 5:36 AM</a></span></div><p id='bc_0_4MC' class='comment-content'>Isn&#39;t there an inherent gain for C code that also needs to deal with these values?</p><span id='bc_0_4MN' class='comment-actions secondary-text' kind='m'><a kind='i' href='javascript:;' target='_self' o='r'>Reply</a><span class='item-control blog-admin pid-211093024'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=2859039765215019853'>Delete</a></span></span></div><div id='bc_0_4BR' class='comment-replies'></div><div id='bc_0_4B_box' class='comment-replybox-single'></div></li><li id='bc_0_6B' class='comment' kind='b'><div class='avatar-image-container'><img src='http://img2.blogblog.com/img/b36-rounded.png'></img></div><div id='c5492441039329026892' class='comment-block'><div id='bc_0_6M' class='comment-header' kind='m'><cite class='user'><a rel='nofollow' href='http://www.blogger.com/profile/00443552278549079958'>Tom Kent</a></cite><span class='icon user'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1384200811586#c5492441039329026892'>November 11, 2013 at 12:13 PM</a></span></div><p id='bc_0_6MC' class='comment-content'>Small typo:<br />&gt;&gt;&gt; x = 0xfffe<br />&gt;&gt;&gt; x<br />65534<br />&gt;&gt;&gt; x = 0xfffe+10<br />&gt;&gt;&gt; x<br />65544<br />&gt;&gt;&gt;<br /></p><span id='bc_0_6MN' class='comment-actions secondary-text' kind='m'><a kind='i' href='javascript:;' target='_self' o='r'>Reply</a><span class='item-control blog-admin pid-1887804053'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=5492441039329026892'>Delete</a></span></span></div><div id='bc_0_6BR' class='comment-replies'><span id='bc_0_6b+seedkXEZD' kind='d'><div id='bc_0_5T' class='comment-thread inline-thread' kind='t'   t='0' u='0'><span id='bc_0_5TT' class='thread-toggle thread-expanded' kind='g'><span id='bc_0_5TA' class='thread-arrow'></span><span id='bc_0_5TN' class='thread-count'><span id='bc_0_5TNT' style='display: none;'></span><span id='bc_0_5TNU' style='display: none;'></span><a href='javascript:;' target='_self'>Replies</a><div id='bc_0_5TD' class='thread-dropContainer thread-expanded'><span class='thread-drop'></span></div></span></span><ol id='bc_0_5TC' class='thread-chrome thread-expanded'><div><li id='bc_0_5B' class='comment' kind='b'><div class='avatar-image-container'><img src='http://img2.blogblog.com/img/b36-rounded.png'></img></div><div id='c5430787516797055725' class='comment-block'><div id='bc_0_5M' class='comment-header' kind='m'><cite class='user'><a rel='nofollow' href='http://www.blogger.com/profile/00443552278549079958'>Tom Kent</a></cite><span class='icon user'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1384200916427#c5430787516797055725'>November 11, 2013 at 12:15 PM</a></span></div><p id='bc_0_5MC' class='comment-content'>It isn&#39;t a literal, but unlike all the others is valid.</p><span id='bc_0_5MN' class='comment-actions secondary-text' kind='m'><span class='item-control blog-admin pid-1887804053'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=5430787516797055725'>Delete</a></span></span></div><div id='bc_0_5BR' class='comment-replies'></div><div id='bc_0_5B_box' class='comment-replybox-single'></div></li></div><div id='bc_0_5I' class='continue' kind='ci'><a href='javascript:;' target='_self'>Reply</a></div></ol><div id='bc_0_5T_box' class='comment-replybox-thread'></div></div></span></div><div id='bc_0_6B_box' class='comment-replybox-single'></div></li><li id='bc_0_7B' class='comment' kind='b'><div class='avatar-image-container'><img src='http://img2.blogblog.com/img/b36-rounded.png'></img></div><div id='c2035063363271747818' class='comment-block'><div id='bc_0_7M' class='comment-header' kind='m'><cite class='user'><a rel='nofollow' href='http://www.blogger.com/profile/11991922948769076950'>RB14</a></cite><span class='icon user'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1384201542425#c2035063363271747818'>November 11, 2013 at 12:25 PM</a></span></div><p id='bc_0_7MC' class='comment-content'>Some time ago I asked @ Stackoverflow why Python&#39;s built-ins methods can&#39;t be overridden or why can&#39;t you add new methods to built-ins?<br /><br />Best answer I got was that if it were allowed, libraries that use these built-ins might give bad results because it breaks the assumptions those libraries made about the built-ins. But since you say yourself that built-ins variables such as int, str... CAN be overridden, I see no reason why they can&#39;t be just extended with new methods, or override their default behaviour. Further more, I believe that libraries (external modules), have their own namespace and once a function is defined inside a module to use a certain object, it can&#39;t be overridden from another module:<br /><br />module1.py:<br />print(int)<br /><br />module2.py:<br />int = 5<br />import module1<br /><br />This will print &quot;&quot;, (which is the int class string representation), and not &quot;5&quot;.<br /><br />Here is my question @ SO (it starts with a different question in mind, but very soon I got to the point I made here):<br />http://stackoverflow.com/questions/19083160/can-literals-in-python-be-overridden<br /><br />Guido, I&#39;d love to get your statement on that matter.</p><span id='bc_0_7MN' class='comment-actions secondary-text' kind='m'><a kind='i' href='javascript:;' target='_self' o='r'>Reply</a><span class='item-control blog-admin pid-889984898'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=2035063363271747818'>Delete</a></span></span></div><div id='bc_0_7BR' class='comment-replies'></div><div id='bc_0_7B_box' class='comment-replybox-single'></div></li><li id='bc_0_9B' class='comment' kind='b'><div class='avatar-image-container'><img src='http://2.bp.blogspot.com/_FG9t5W1SJ14/SZdIM5ZxpgI/AAAAAAAAD5Q/49Kj8K7N2Og/S45/IMG_2192.jpg'></img></div><div id='c5425012881131614657' class='comment-block'><div id='bc_0_9M' class='comment-header' kind='m'><cite class='user blog-author'><a rel='nofollow' href='http://www.blogger.com/profile/12821714508588242516'>Guido van Rossum</a></cite><span class='icon user blog-author'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1384216454817#c5425012881131614657'>November 11, 2013 at 4:34 PM</a></span></div><p id='bc_0_9MC' class='comment-content'>@RB14: It&#39;s not the same. When you reassign e.g. &#39;str&#39;, you are messing only with your *own* code (the scope of the assignment). When you redefine the built-in itself, you are messing with *everyone&#39;s* code.</p><span id='bc_0_9MN' class='comment-actions secondary-text' kind='m'><a kind='i' href='javascript:;' target='_self' o='r'>Reply</a><span class='item-control blog-admin pid-1067882746'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=5425012881131614657'>Delete</a></span></span></div><div id='bc_0_9BR' class='comment-replies'><span id='bc_0_9b+seedkXEcD' kind='d'><div id='bc_0_8T' class='comment-thread inline-thread' kind='t'   t='0' u='0'><span id='bc_0_8TT' class='thread-toggle thread-expanded' kind='g'><span id='bc_0_8TA' class='thread-arrow'></span><span id='bc_0_8TN' class='thread-count'><span id='bc_0_8TNT' style='display: none;'></span><span id='bc_0_8TNU' style='display: none;'></span><a href='javascript:;' target='_self'>Replies</a><div id='bc_0_8TD' class='thread-dropContainer thread-expanded'><span class='thread-drop'></span></div></span></span><ol id='bc_0_8TC' class='thread-chrome thread-expanded'><div><li id='bc_0_8B' class='comment' kind='b'><div class='avatar-image-container'><img src='http://img2.blogblog.com/img/b36-rounded.png'></img></div><div id='c1555591939471937813' class='comment-block'><div id='bc_0_8M' class='comment-header' kind='m'><cite class='user'><a rel='nofollow' href='http://www.blogger.com/profile/11991922948769076950'>RB14</a></cite><span class='icon user'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1384255850947#c1555591939471937813'>November 12, 2013 at 3:30 AM</a></span></div><p id='bc_0_8MC' class='comment-content'>Well, clearly I didn&#39;t think this through. I mistakenly mixed up variables and objects... Thanks for clarifying.</p><span id='bc_0_8MN' class='comment-actions secondary-text' kind='m'><span class='item-control blog-admin pid-889984898'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=1555591939471937813'>Delete</a></span></span></div><div id='bc_0_8BR' class='comment-replies'></div><div id='bc_0_8B_box' class='comment-replybox-single'></div></li></div><div id='bc_0_8I' class='continue' kind='ci'><a href='javascript:;' target='_self'>Reply</a></div></ol><div id='bc_0_8T_box' class='comment-replybox-thread'></div></div></span></div><div id='bc_0_9B_box' class='comment-replybox-single'></div></li><li id='bc_0_10B' class='comment' kind='b'><div class='avatar-image-container'><img src='http://img2.blogblog.com/img/b36-rounded.png'></img></div><div id='c7034943272158871910' class='comment-block'><div id='bc_0_10M' class='comment-header' kind='m'><cite class='user'><a rel='nofollow' href='http://www.blogger.com/profile/16731604352756053121'>abdulapopoola</a></cite><span class='icon user'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1384576377535#c7034943272158871910'>November 15, 2013 at 8:32 PM</a></span></div><p id='bc_0_10MC' class='comment-content'>Brilliant! </p><span id='bc_0_10MN' class='comment-actions secondary-text' kind='m'><a kind='i' href='javascript:;' target='_self' o='r'>Reply</a><span class='item-control blog-admin pid-660514719'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=7034943272158871910'>Delete</a></span></span></div><div id='bc_0_10BR' class='comment-replies'></div><div id='bc_0_10B_box' class='comment-replybox-single'></div></li><li id='bc_0_11B' class='comment' kind='b'><div class='avatar-image-container'><img src='http://img2.blogblog.com/img/b36-rounded.png'></img></div><div id='c615792459705593946' class='comment-block'><div id='bc_0_11M' class='comment-header' kind='m'><cite class='user'><a rel='nofollow' href='http://www.blogger.com/profile/14124702144506645078'>Gathogo</a></cite><span class='icon user'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1384836895579#c615792459705593946'>November 18, 2013 at 8:54 PM</a></span></div><p id='bc_0_11MC' class='comment-content'>Very educational indeed, thanks Guido.</p><span id='bc_0_11MN' class='comment-actions secondary-text' kind='m'><a kind='i' href='javascript:;' target='_self' o='r'>Reply</a><span class='item-control blog-admin pid-1487967488'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=615792459705593946'>Delete</a></span></span></div><div id='bc_0_11BR' class='comment-replies'></div><div id='bc_0_11B_box' class='comment-replybox-single'></div></li><li id='bc_0_12B' class='comment' kind='b'><div class='avatar-image-container'><img src='http://img2.blogblog.com/img/b36-rounded.png'></img></div><div id='c7890833944309761676' class='comment-block'><div id='bc_0_12M' class='comment-header' kind='m'><cite class='user'><a rel='nofollow' href='http://www.blogger.com/profile/18040872212781301984'>Jason</a></cite><span class='icon user'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1384959165523#c7890833944309761676'>November 20, 2013 at 6:52 AM</a></span></div><p id='bc_0_12MC' class='comment-content'>Tangental question (maybe better asked at StackOverflow):<br /><br />I was quiet surprised that:<br /><br />for x in None :<br />   print x<br /><br />raised: TypeError: &#39;NoneType&#39; object is not iterable<br /><br />My (naive) expectation was the loop would work like &#39;for x in () :&#39; aka pass right over nothing.<br /><br />Why would I do this?  Well it&#39;s quite common (AFAICT) to return None in functions.  It&#39;s also common to iterate over the results of a function.  It&#39;d be &#39;nice&#39; if I could:<br /><br />for x in function_possibly_returning_None :<br />    print x<br /><br />rather than <br /><br />myiterable = function_possibly_returning_None<br />if myiterable :<br />    for x in myiterable :<br />        print x<br /></p><span id='bc_0_12MN' class='comment-actions secondary-text' kind='m'><a kind='i' href='javascript:;' target='_self' o='r'>Reply</a><span class='item-control blog-admin pid-772928031'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=7890833944309761676'>Delete</a></span></span></div><div id='bc_0_12BR' class='comment-replies'></div><div id='bc_0_12B_box' class='comment-replybox-single'></div></li><li id='bc_0_13B' class='comment' kind='b'><div class='avatar-image-container'><img src='//lh5.googleusercontent.com/-N5d70Z5pZjY/AAAAAAAAAAI/AAAAAAAAAPY/PnCrk9UKejo/s512-c/photo.jpg'></img></div><div id='c8938963681642505392' class='comment-block'><div id='bc_0_13M' class='comment-header' kind='m'><cite class='user'><a rel='nofollow' href='http://www.blogger.com/profile/13140975971019765573'>Ralph Corderoy</a></cite><span class='icon user'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1384961155213#c8938963681642505392'>November 20, 2013 at 7:25 AM</a></span></div><p id='bc_0_13MC' class='comment-content'>Jason, it seems wrong that a function could either return an iterable, e.g. list, or None.  Why would it not return an empty list, tuple, etc?  A function returning None to indicate none probably returns a non-iterable for non-none.</p><span id='bc_0_13MN' class='comment-actions secondary-text' kind='m'><a kind='i' href='javascript:;' target='_self' o='r'>Reply</a><span class='item-control blog-admin pid-1239653326'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=8938963681642505392'>Delete</a></span></span></div><div id='bc_0_13BR' class='comment-replies'></div><div id='bc_0_13B_box' class='comment-replybox-single'></div></li><li id='bc_0_14B' class='comment' kind='b'><div class='avatar-image-container'><img src='http://2.bp.blogspot.com/_yJLNx613MNI/SYKvpmPrhgI/AAAAAAAAAAk/FRg894B_qbs/S45/ahall.jpg'></img></div><div id='c5549153359870155417' class='comment-block'><div id='bc_0_14M' class='comment-header' kind='m'><cite class='user'><a rel='nofollow' href='http://www.blogger.com/profile/04750451514384953771'>Aaron Hall</a></cite><span class='icon user'></span><span class='datetime secondary-text'><a rel='nofollow' href='http://python-history.blogspot.com/2013/11/story-of-none-true-false.html?showComment=1395163671725#c5549153359870155417'>March 18, 2014 at 10:27 AM</a></span></div><p id='bc_0_14MC' class='comment-content'>To Jason&#39;s question, I wonder how the BDFL would view:<br /><br />for x in None or (): print(x)<br /><br />as a workaround.</p><span id='bc_0_14MN' class='comment-actions secondary-text' kind='m'><a kind='i' href='javascript:;' target='_self' o='r'>Reply</a><span class='item-control blog-admin pid-1298830961'><a o='d' target='_self' href='http://www.blogger.com/delete-comment.g?blogID=8699431508730375743&amp;postID=5549153359870155417'>Delete</a></span></span></div><div id='bc_0_14BR' class='comment-replies'></div><div id='bc_0_14B_box' class='comment-replybox-single'></div></li></ol><div id='bc_0_15I' class='continue' kind='ci'><a href='javascript:;' target='_self'>Add comment</a></div><div id='bc_0_15T_box' class='comment-replybox-thread'></div><div id='bc_0_15L' class='loadmore loaded' kind='rb'><a href='javascript:;' target='_self'>Load more...</a></div></div></div></div>
</div>
</div>
<p class='comment-footer'>
<div class='comment-form'>
<a name='comment-form'></a>
<p>
</p>
<a href='https://www.blogger.com/comment-iframe.g?blogID=8699431508730375743&postID=5526235131217291440' id='comment-editor-src'></a>
<iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'></iframe>
<script type="text/javascript" src="https://www.blogger.com/static/v1/jsbin/313381681-comment_from_post_iframe.js"></script>
<script type='text/javascript'>
      BLOG_CMT_createIframe('https://www.blogger.com/rpc_relay.html', '14514210007109573500');
    </script>
</div>
</p>
<div id='backlinks-container'>
<div id='Blog1_backlinks-container'>
</div>
</div>
</div>
</div>

        </div></div>
      
<!-- google_ad_section_end -->
</div>
<div class='blog-pager' id='blog-pager'>
<span id='blog-pager-newer-link'>
<a class='blog-pager-newer-link' href='http://python-history.blogspot.ro/2013/11/the-history-of-bool-true-and-false.html' id='Blog1_blog-pager-newer-link' title='Newer Post'>Newer Post</a>
</span>
<span id='blog-pager-older-link'>
<a class='blog-pager-older-link' href='http://python-history.blogspot.ro/2013/10/origin-of-metaclasses-in-python.html' id='Blog1_blog-pager-older-link' title='Older Post'>Older Post</a>
</span>
<a class='home-link' href='http://python-history.blogspot.ro/'>Home</a>
</div>
<div class='clear'></div>
<div class='post-feeds'>
<div class='feed-links'>
Subscribe to:
<a class='feed-link' href='http://python-history.blogspot.com/feeds/5526235131217291440/comments/default' target='_blank' type='application/atom+xml'>Post Comments (Atom)</a>
</div>
</div>
<script type="text/javascript">window.___gcfg = {'lang': 'en'};</script>
</div></div>
</div>
<div id='sidebar-wrapper'>
<div class='sidebar section' id='sidebar'><div class='widget Followers' id='Followers2'>
<h2 class='title'>Followers</h2>
<div class='widget-content'>
<div id='Followers2-wrapper'>
<div style='margin-right:2px;'>
<script type="text/javascript">
        if (!window.google || !google.friendconnect) {
          document.write('<script type="text/javascript"' +
              'src="//www.google.com/friendconnect/script/friendconnect.js">' +
              '</scr' + 'ipt>');
        }
      </script>
<script type="text/javascript">
      if (!window.registeredBloggerCallbacks) {
        window.registeredBloggerCallbacks = true;

        

        
        gadgets.rpc.register('requestReload', function() {
          document.location.reload();
        });

        
        gadgets.rpc.register('requestSignOut', function(siteId) {
          
          google.friendconnect.container.openSocialSiteId = siteId;
          google.friendconnect.requestSignOut();
        });
      }
    </script>
<script type="text/javascript">
    
    function registerGetBlogUrls() {
      gadgets.rpc.register('getBlogUrls', function() {
        var holder = {};
        
          
            
            
              holder.currentPost = "http://www.blogger.com/feeds/8699431508730375743/posts/default/5526235131217291440";
            
            
            
              holder.currentComments = "http://www.blogger.com/feeds/8699431508730375743/5526235131217291440/comments/default";
            
            holder.currentPostUrl = "";
            holder.currentPostId = 5526235131217291440
          
          
          
            holder.postFeed = "http://www.blogger.com/feeds/8699431508730375743/posts/default";
          
          
          
            holder.commentFeed = "http://www.blogger.com/feeds/8699431508730375743/comments/default";
          
          holder.currentBlogUrl = "http://python-history.blogspot.com/";
          holder.currentBlogId = "8699431508730375743";
        
        return holder;
      });
    }
  </script>
<script type="text/javascript">
  if (!window.registeredCommonBloggerCallbacks) {
    window.registeredCommonBloggerCallbacks = true;

    gadgets.rpc.register('resize_iframe', function(height) {
      var el = document.getElementById(this['f']);
      if (el) {
        el.style.height = height + 'px';
      }
    });

    
    gadgets.rpc.register('set_pref', function() {});

    registerGetBlogUrls();
  }
  </script>
<div id="div-hzjg0vlgrdil" style="width: 100%; "></div>
<script type="text/javascript">
    var skin = {};
    skin['FACE_SIZE'] = '32';
    skin['HEIGHT'] = "260";
    skin['TITLE'] = "Followers";
    skin['BORDER_COLOR'] = "transparent";
    skin['ENDCAP_BG_COLOR'] = "transparent";
    skin['ENDCAP_TEXT_COLOR'] = "#999999";
    skin['ENDCAP_LINK_COLOR'] = "#6699cc";
    skin['ALTERNATE_BG_COLOR'] = "transparent";
    
    skin['CONTENT_BG_COLOR'] = "transparent";
    skin['CONTENT_LINK_COLOR'] = "#6699cc";
    skin['CONTENT_TEXT_COLOR'] = "#999999";
    skin['CONTENT_SECONDARY_LINK_COLOR'] = "#6699cc";
    skin['CONTENT_SECONDARY_TEXT_COLOR'] = "#000000";
    skin['CONTENT_HEADLINE_COLOR'] = "#ff6633";
    skin['FONT_FACE'] = "normal normal 100% Verdana, sans-serif";
    google.friendconnect.container.setParentUrl("/");
    google.friendconnect.container["renderMembersGadget"](
    {id: "div-hzjg0vlgrdil",
     height: 260,
     
     
     
     site: "14514210007109573500",
     
     locale: 'en' },
     skin);
  </script>
</div>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=8699431508730375743&widgetType=Followers&widgetId=Followers2&action=editWidget&sectionId=sidebar' onclick='return _WidgetManager._PopupConfig(document.getElementById("Followers2"));' target='configFollowers2' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget BlogArchive' id='BlogArchive2'>
<h2>Blog Archive</h2>
<div class='widget-content'>
<div id='ArchiveList'>
<div id='BlogArchive2_ArchiveList'>
<ul class='hierarchy'>
<li class='archivedate expanded'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy toggle-open'>&#9660;&#160;</span>
</a>
<a class='post-count-link' href='http://python-history.blogspot.ro/search?updated-min=2013-01-01T00:00:00-08:00&amp;updated-max=2014-01-01T00:00:00-08:00&amp;max-results=4'>2013</a>
<span class='post-count' dir='ltr'>(4)</span>
<ul class='hierarchy'>
<li class='archivedate expanded'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy toggle-open'>&#9660;&#160;</span>
</a>
<a class='post-count-link' href='http://python-history.blogspot.ro/2013_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(2)</span>
<ul class='posts'>
<li><a href='http://python-history.blogspot.ro/2013/11/the-history-of-bool-true-and-false.html'>The history of bool, True and False</a></li>
<li><a href='http://python-history.blogspot.ro/2013/11/story-of-none-true-false.html'>The story of None, True and False (and an explanat...</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://python-history.blogspot.ro/2013_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://python-history.blogspot.ro/search?updated-min=2011-01-01T00:00:00-08:00&amp;updated-max=2012-01-01T00:00:00-08:00&amp;max-results=1'>2011</a>
<span class='post-count' dir='ltr'>(1)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://python-history.blogspot.ro/2011_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://python-history.blogspot.ro/search?updated-min=2010-01-01T00:00:00-08:00&amp;updated-max=2011-01-01T00:00:00-08:00&amp;max-results=7'>2010</a>
<span class='post-count' dir='ltr'>(7)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://python-history.blogspot.ro/2010_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://python-history.blogspot.ro/2010_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://python-history.blogspot.ro/search?updated-min=2009-01-01T00:00:00-08:00&amp;updated-max=2010-01-01T00:00:00-08:00&amp;max-results=19'>2009</a>
<span class='post-count' dir='ltr'>(19)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://python-history.blogspot.ro/2009_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://python-history.blogspot.ro/2009_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://python-history.blogspot.ro/2009_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://python-history.blogspot.ro/2009_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
</li>
</ul>
</div>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=8699431508730375743&widgetType=BlogArchive&widgetId=BlogArchive2&action=editWidget&sectionId=sidebar' onclick='return _WidgetManager._PopupConfig(document.getElementById("BlogArchive2"));' target='configBlogArchive2' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget Profile' id='Profile2'>
<h2>Contributors</h2>
<div class='widget-content'>
<ul>
<li><a class='profile-name-link g-profile' href='https://plus.google.com/102722482248467575904' style='background-image: url(//www.google.com/images/icons/ui/gprofile_button-16.png);'>Greg Stein</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/12821714508588242516' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Guido van Rossum</a></li>
</ul>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=8699431508730375743&widgetType=Profile&widgetId=Profile2&action=editWidget&sectionId=sidebar' onclick='return _WidgetManager._PopupConfig(document.getElementById("Profile2"));' target='configProfile2' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div></div>
</div>
<!-- spacer for skins that want sidebar and main to be the same height-->
<div class='clear'>&#160;</div>
</div>
<!-- end content-wrapper -->
<div id='footer-wrapper'>
<div class='footer section' id='footer'></div>
</div>
</div></div>
<!-- end outer-wrapper -->
<script type="text/javascript">
if (window.jstiming) window.jstiming.load.tick('widgetJsBefore');
</script><script type="text/javascript" src="https://www.blogger.com/static/v1/widgets/3401484092-widgets.js"></script>
<script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script>
<script type='text/javascript'>
if (typeof(BLOG_attachCsiOnload) != 'undefined' && BLOG_attachCsiOnload != null) { window['blogger_templates_experiment_id'] = "templatesV1";window['blogger_blog_id'] = '8699431508730375743';BLOG_attachCsiOnload('item_'); }_WidgetManager._Init('//www.blogger.com/rearrange?blogID\x3d8699431508730375743','//python-history.blogspot.ro/2013/11/story-of-none-true-false.html','8699431508730375743');
_WidgetManager._SetDataContext([{'name': 'blog', 'data': {'blogId': '8699431508730375743', 'bloggerUrl': 'http://www.blogger.com', 'title': 'The History of Python', 'pageType': 'item', 'postId': '5526235131217291440', 'url': 'http://python-history.blogspot.ro/2013/11/story-of-none-true-false.html', 'canonicalUrl': 'http://python-history.blogspot.com/2013/11/story-of-none-true-false.html', 'canonicalHomepageUrl': 'http://python-history.blogspot.com/', 'homepageUrl': 'http://python-history.blogspot.ro/', 'blogspotFaviconUrl': 'http://python-history.blogspot.ro/favicon.ico', 'enabledCommentProfileImages': true, 'adultContent': false, 'disableAdSenseWidget': false, 'analyticsAccountNumber': '', 'searchLabel': '', 'searchQuery': '', 'pageName': 'The story of None, True and False (and an explanation of literals, keywords and builtins thrown in)', 'pageTitle': 'The History of Python: The story of None, True and False (and an explanation of literals, keywords and builtins thrown in)', 'encoding': 'UTF-8', 'locale': 'en', 'localeUnderscoreDelimited': 'en', 'isPrivate': false, 'isMobile': false, 'isMobileRequest': false, 'mobileClass': '', 'isPrivateBlog': false, 'languageDirection': 'ltr', 'feedLinks': '\74link rel\75\42alternate\42 type\75\42application/atom+xml\42 title\75\42The History of Python - Atom\42 href\75\42http://python-history.blogspot.com/feeds/posts/default\42 /\76\n\74link rel\75\42alternate\42 type\75\42application/rss+xml\42 title\75\42The History of Python - RSS\42 href\75\42http://python-history.blogspot.com/feeds/posts/default?alt\75rss\42 /\76\n\74link rel\75\42service.post\42 type\75\42application/atom+xml\42 title\75\42The History of Python - Atom\42 href\75\42http://www.blogger.com/feeds/8699431508730375743/posts/default\42 /\76\n\n\74link rel\75\42alternate\42 type\75\42application/atom+xml\42 title\75\42The History of Python - Atom\42 href\75\42http://python-history.blogspot.com/feeds/5526235131217291440/comments/default\42 /\76\n', 'meTag': '', 'openIdOpTag': '', 'latencyHeadScript': '\74script type\75\42text/javascript\42\76(function() { var b\75window,f\75\42chrome\42,g\75\42tick\42,k\75\42jstiming\42;(function(){function d(a){this.t\75{};this.tick\75function(a,d,c){var e\75void 0!\75c?c:(new Date).getTime();this.t[a]\75[e,d];if(void 0\75\75c)try{b.console.timeStamp(\42CSI/\42+a)}catch(h){}};this[g](\42start\42,null,a)}var a;b.performance\46\46(a\75b.performance.timing);var n\75a?new d(a.responseStart):new d;b.jstiming\75{Timer:d,load:n};if(a){var c\75a.navigationStart,h\75a.responseStart;0\74c\46\46h\76\75c\46\46(b[k].srt\75h-c)}if(a){var e\75b[k].load;0\74c\46\46h\76\75c\46\46(e[g](\42_wtsrt\42,void 0,c),e[g](\42wtsrt_\42,\42_wtsrt\42,h),e[g](\42tbsd_\42,\42wtsrt_\42))}try{a\75null,\nb[f]\46\46b[f].csi\46\46(a\75Math.floor(b[f].csi().pageT),e\46\0460\74c\46\46(e[g](\42_tbnd\42,void 0,b[f].csi().startE),e[g](\42tbnd_\42,\42_tbnd\42,c))),null\75\75a\46\46b.gtbExternal\46\46(a\75b.gtbExternal.pageT()),null\75\75a\46\46b.external\46\46(a\75b.external.pageT,e\46\0460\74c\46\46(e[g](\42_tbnd\42,void 0,b.external.startE),e[g](\42tbnd_\42,\42_tbnd\42,c))),a\46\46(b[k].pt\75a)}catch(p){}})();b.tickAboveFold\75function(d){var a\0750;if(d.offsetParent){do a+\75d.offsetTop;while(d\75d.offsetParent)}d\75a;750\76\75d\46\46b[k].load[g](\42aft\42)};var l\75!1;function m(){l||(l\75!0,b[k].load[g](\42firstScrollTime\42))}b.addEventListener?b.addEventListener(\42scroll\42,m,!1):b.attachEvent(\42onscroll\42,m);\n })();\74/script\076', 'mobileHeadScript': '', 'view': '', 'dynamicViewsCommentsSrc': '//www.blogblog.com/dynamicviews/4224c15c4e7c9321/js/comments.js', 'dynamicViewsScriptSrc': '//www.blogblog.com/dynamicviews/76f25a6f2e06af76', 'plusOneApiSrc': 'https://apis.google.com/js/plusone.js', 'sf': 'n', 'tf': ''}}, {'name': 'skin', 'data': {'vars': {'sidebartextcolor': '#999999', 'linkcolor': '#6699cc', 'visitedlinkcolor': '#666699', 'textcolor': '#333333', 'pagetitlefont': 'normal normal 100% \47Lucida Grande\47,\47Trebuchet MS\047', 'titlefont': 'normal bold 130% \47Lucida Grande\47,\47Trebuchet MS\047', 'titlecolor': '#ff6633', 'datecolor': '#ff9933', 'pagetitlecolor': '#FFFFFF', 'bodyfont': 'normal normal 100% Verdana, sans-serif', 'endSide': 'right', 'startSide': 'left', 'sidebarcolor': '#666666', 'sidebarheaderfont': 'normal bold 130% \47Lucida Grande\47,\47Trebuchet MS\047', 'footercolor': '#999999'}, 'override': ''}}, {'name': 'view', 'data': {'classic': {'name': 'classic', 'url': '?view\75classic'}, 'flipcard': {'name': 'flipcard', 'url': '?view\75flipcard'}, 'magazine': {'name': 'magazine', 'url': '?view\75magazine'}, 'mosaic': {'name': 'mosaic', 'url': '?view\75mosaic'}, 'sidebar': {'name': 'sidebar', 'url': '?view\75sidebar'}, 'snapshot': {'name': 'snapshot', 'url': '?view\75snapshot'}, 'timeslide': {'name': 'timeslide', 'url': '?view\75timeslide'}}}]);
_WidgetManager._RegisterWidget('_FollowersView', new _WidgetInfo('Followers2', 'sidebar', null, document.getElementById('Followers2'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogArchiveView', new _WidgetInfo('BlogArchive2', 'sidebar', null, document.getElementById('BlogArchive2'), {'languageDirection': 'ltr'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_ProfileView', new _WidgetInfo('Profile2', 'sidebar', null, document.getElementById('Profile2'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HeaderView', new _WidgetInfo('Header1', 'header', null, document.getElementById('Header1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_NavbarView', new _WidgetInfo('Navbar1', 'navbar', null, document.getElementById('Navbar1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogView', new _WidgetInfo('Blog1', 'main', null, document.getElementById('Blog1'), {'cmtInteractionsEnabled': false, 'lightboxEnabled': true, 'lightboxModuleUrl': 'https://www.blogger.com/static/v1/jsbin/1938910137-lbx.js', 'lightboxCssUrl': 'https://www.blogger.com/static/v1/v-css/2392111094-lightbox_bundle.css'}, 'displayModeFull'));
</script>
</body>
</html>