<!DOCTYPE html>

<html>
<head>

<!--
#                 _
#                (_)
#                 _
#                (_)
#        _        _
#       | |      | |
#    ___| | ___ _| |___  ___ _ _ ___  _ ___  ____
#   / __` |/ __` | '__ `/ __` | '__ \| '__ \/ ___|
#  | (__| | (__| | |__|| (__| | |__) | |__) \___ \
#   \___,_|\___,_|_.___,\___,_| .___/| .___/|____/
#                             | |    | |
#                             |_|    |_|
#
#          DESIGN AND BUILD APPLICATIONS
#
-->

    <title>A non-magical introduction to Pip and Virtualenv for Python beginners - DabApps, Brighton, UK</title>

    <meta charset="UTF-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

    <meta name="description" content="One of the hurdles that new Python developers have to get over is understanding the Python packaging ecosystem. This blog post is based on material covered in our Python for Programmers training course, which attempts to explain pip and virtualenv for new Python users. Prerequisites Python for Programmers is aimed ..." />
    <meta name="keywords" content="python, technical" />
    <meta name="author" content="Jamie Matthews" />


    <link rel="stylesheet" type="text/css" href="/static/css/main.76ec19eb9706d4fedc3c9833312b2e2b408f7945.min.css" />

    <script type="text/javascript" src="/static/deps/jquery/js/jquery.min.js">
    </script>
    <script type="text/javascript" src="/static/deps/bootstrap/js/bootstrap.min.js">
    </script>
    <script type="text/javascript" src="/static/js/main.76329ee89aa927fdd4e748cd1f4489e651e443e6.min.js">
    </script>


</head>
<body>

    <div class="wrapper">

        <header>
            <nav class="navbar navbar-static-top">
                <div class="container">
                    <a href="/" class="navbar-brand">
                        <div class="navbar-logo">
                        </div>
                        <h2 class="sr-only">DabApps</h2>
                    </a>

                    <div class="contact-top">
                        <div class="container">
                            <h3 class="fulljustify">
                                Design and Build Applications
                            </h3>

                            <ul>
                                <li class="pull-left">Email: <a href="mailto:hello@dabapps.com">hello@dabapps.com</a></li>
                                <li class="pull-left">Tel: <a href="tel:01273208222">01273 208 222</a></li>
                                <li class="pull-right"><span class="hide">Share this page on LinkedIn</span>
                                    <script src="//platform.linkedin.com/in.js" type="text/javascript">
                                     lang: en_US
                                    </script>
                                    <script type="IN/Share"></script>

                                </li>
                            </ul>
                        </div>
                    </div>

                    <button class="navbar-toggle" data-toggle="collapse" data-target="#NavCollapse">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>

                    <div class="collapse navbar-collapse" id="NavCollapse">
                        <ul class="nav navbar-nav navbar-right">
                            <li><a  href="/how-we-can-help/">How We Can Help</a></li>
                            <li><a  href="/what-we-do/">What We Do</a></li>
                            <li><a  href="/work/">Work</a></li>
                            <li><a  href="/who-we-are/">Who We Are</a></li>
                            <li><a  href="/get-in-touch/">Get In Touch</a></li>
                        </ul>
                    </div>

                </div>
            </nav>
        </header>

        <main class="blog">


<div class="container">
<div class="row">
    <div class="col-xs-12">
        <h1>Blog
            <ul class="navbar-nav secondary-links pull-right">
                <li>
                    <a href="/blog/" class="label label-primary">
                        Blog
                        <span class="glyphicon glyphicon-chevron-right"></span>
                    </a>
                </li>
                <li>
                    <a href="/blog/archive/" class="label label-primary">
                        Archive
                        <span class="glyphicon glyphicon-chevron-right"></span>
                    </a>
                </li>
            </ul>
        </h1>
    </div>
</div>
</div>

<div class="quotebar">
    <div class="container">
        <blockquote><p>One of the hurdles that new Python developers have to get over is understanding the Python packaging ecosystem.</p><small>Jamie Matthews</small></blockquote>
    </div>
</div>

<div class="container">
<div class="row post">

    <div class="col-sm-3">
        <h3><a href="/who-we-are/#jamie-matthews">Jamie Matthews</a></h3>
        <small>Posted 18 April 2013</small>
        <img src="/static/img/pro-pics/jamie-matthews.jpg" alt="Jamie Matthews" />
        <ul>
            <li>
                <a href="/blog/author/jamie-matthews">View more posts by this author.</a>
            </li>
        </ul>
    </div>

    <div class="col-sm-9">
        <h2><a href="/blog/introduction-to-pip-and-virtualenv-python/" >A non-magical introduction to Pip and Virtualenv for Python beginners</a></h2>

        <dl class="tags">
        <dt>Tagged:</dt>
            <dd>
                <a href="/blog/tag/python">
                    python
                </a>
            </dd>
            <dd>
                <a href="/blog/tag/technical">
                    technical
                </a>
            </dd>
        </dl>

        <p>One of the hurdles that new Python developers have to get over is understanding the Python packaging ecosystem. This blog post is based on material covered in our <a href="/services/training/python-for-programmers/">Python for Programmers training course</a>, which attempts to explain <a href="http://pip-installer.org/">pip</a> and <a href="http://www.virtualenv.org/">virtualenv</a> for new Python users.</p>
<h3>Prerequisites</h3>
<p>Python for Programmers is aimed at developers who are already familiar with one or more programming languages, and so we assume a certain amount of technical knowledge. It will help if you're reasonably comfortable with a command line. The examples below use <code>bash</code>, which is the default shell on Macs and most Linux systems. But the commands are simple enough that the concepts should be transferrable to any terminal, such as PowerShell for Windows.</p>
<h3>pip</h3>
<p>Let's dive in. <a href="http://pip-installer.org/">pip</a> is a tool for installing Python packages from the <a href="http://pypi.python.org/">Python Package Index</a>.</p>
<p>PyPI (which you'll occasionally see referred to as <a href="http://stackoverflow.com/questions/5393986/why-is-pypi-called-the-cheese-shop">The Cheeseshop</a>) is a repository for open-source third-party Python packages. It's similar to RubyGems in the Ruby world, PHP's Packagist, CPAN for Perl, and NPM for Node.js.</p>
<p>Python actually has another, more primitive, package manager called <code>easy_install</code>, which is installed automatically when you install Python itself. pip is vastly superior to <code>easy_install</code> for lots of reasons, and so should generally be used instead. You can use <code>easy_install</code> to install pip as follows:</p>
<div class="codehighlight"><pre><span class="nv">$ </span>sudo easy_install pip
</pre></div>


<p>You can then install packages with pip as follows (in this example, we're installing <a href="https://www.djangoproject.com/">Django</a>):</p>
<div class="codehighlight"><pre><span class="c"># DON&#39;T DO THIS</span>
<span class="nv">$ </span>sudo pip install django
</pre></div>


<p>Here, we're installing Django <em>globally</em> on the system. But in most cases, you <strong>shouldn't install packages globally</strong>. Read on to find out why.</p>
<h3>virtualenv</h3>
<p><a href="http://www.virtualenv.org/">virtualenv</a> solves a very specific problem: it allows multiple Python projects that have <em>different</em> (and often <em>conflicting</em>) requirements, to coexist on the same computer.</p>
<h3>What problem does it solve?</h3>
<p>To illustrate this, let's start by pretending virtualenv doesn't exist. Imagine we're  we're going to write a Python program that needs to make HTTP requests to a remote web server. We're going to use the <a href="http://python-requests.org">Requests</a> library, which is brilliant for that sort of thing. As we saw above, we can use pip to install Requests.</p>
<p>But where on your computer does <code>pip</code> install the packages to? Here's what happens if I try to run <code>pip install requests</code>:</p>
<div class="codehighlight"><pre><span class="nv">$ </span>pip install requests
Downloading/unpacking requests
  Downloading requests-1.1.0.tar.gz <span class="o">(</span>337Kb<span class="o">)</span>: 337Kb downloaded
  Running setup.py egg_info <span class="k">for </span>package requests

Installing collected packages: requests
  Running setup.py install <span class="k">for </span>requests

    error: could not create <span class="s1">&#39;/Library/Python/2.7/site-packages/requests&#39;</span>: Permission denied
</pre></div>


<p>Oops! It looks like <code>pip</code> is trying to install the package into <code>/Library/Python/2.7/site-packages/requests</code>. This is a special directory that Python knows about. Anything that's installed in <code>site-packages</code> can be imported by your programs.</p>
<p>We're seeing the error because <code>/Library/</code> (on a Mac) is not usually writeable by "ordinary" users. To fix the error, we can run <code>sudo pip install requests</code> (<code>sudo</code> means "run this command as a superuser"). Then everything will work fine:</p>
<div class="codehighlight"><pre><span class="nv">$ </span>sudo pip install requests
Password:
Downloading/unpacking requests
  Running setup.py egg_info <span class="k">for </span>package requests

Installing collected packages: requests
  Running setup.py install <span class="k">for </span>requests

Successfully installed requests
Cleaning up...
</pre></div>


<p>This time it worked. We can now type <code>python</code> and try importing our new library:</p>
<div class="codehighlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">requests</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;http://dabapps.com&#39;</span><span class="p">)</span>
<span class="go">&lt;Response [200]&gt;</span>
</pre></div>


<p>So, we now know that we can <code>import requests</code> and use it in our program. We go ahead and work feverishly on our new program, using <code>requests</code> (and probably lots of other libraries from PyPI too). The software works brilliantly, we make loads of money, and our clients are so impressed that they ask us to write another program to do something slightly different.</p>
<p>But this time, we find a brand new feature that's been added to <code>requests</code> since we wrote our first program that we <em>really</em> need to use in our second program. So we decide to upgrade the <code>requests</code> library to get the new feature:</p>
<div class="codehighlight"><pre>sudo pip install --upgrade requests
</pre></div>


<p>Everything seems fine, but we've unknowingly created a disaster!</p>
<p>Next time we try to run it, we discover that our original program (the one that made us loads of money) has completely stopped working and is raising errors when we try to run it. Why? Because something in the API of the <code>requests</code> library has <em>changed</em> between the previous version and the one we just upgraded to. It might only be a small change, but it means our code no longer uses the library correctly. Everything is broken!</p>
<p>Sure, we could fix the code in our first program to use the new version of the <code>requests</code> API, but that takes time and distracts us from our new project. And, of course, a seasoned Python programmer won't just have two projects but <em>dozens</em> - and each project might have dozens of dependencies! Keeping them all up-to-date and working with the same versions of <em>every</em> library would be a complete nightmare.</p>
<h3>How does virtualenv help?</h3>
<p>virtualenv solves this problem by creating a completely isolated <em>virtual environment</em> for each of your programs. An environment is simply a directory that contains a complete copy of everything needed to run a Python program, including a copy of the <code>python</code> binary itself, a copy of the entire Python standard library, a copy of the <code>pip</code> installer, and (crucially) a copy of the <code>site-packages</code> directory mentioned above. When you install a package from PyPI using the <em>copy</em> of <code>pip</code> that's created by the <code>virtualenv</code> tool, it will install the package into the <code>site-packages</code> directory <em>inside</em> the virtualenv directory. You can then use it in your program just as before.</p>
<h3>How can I install virtualenv?</h3>
<p>If you already have <code>pip</code>, the easiest way is to install it globally <code>sudo pip install virtualenv</code>. Usually <code>pip</code> and <code>virtualenv</code> are the only two packages you <em>ever</em> need to install globally, because once you've got both of these you can do all your work inside virtual environments.</p>
<p>In fact, <code>virtualenv</code> <em>comes with</em> a copy of <code>pip</code> which gets copied into every new environment you create, so <code>virtualenv</code> is really all you need. You can even install it as a separate standalone package (rather than from PyPI). This might be easier for Windows users. See <a href="http://www.virtualenv.org">virtualenv.org</a> for instructions.</p>
<h3>How do I create a new virtual environment?</h3>
<p>You only need the <code>virtualenv</code> tool itself when you want to <em>create</em> a new environment. This is really simple. Start by changing directory into the root of your project directory, and then use the <code>virtualenv</code> command-line tool to create a new environment:</p>
<div class="codehighlight"><pre><span class="nv">$ </span><span class="nb">cd</span> ~/code/myproject/
<span class="nv">$ </span>virtualenv env
New python executable in env/bin/python
Installing setuptools............done.
Installing pip...............done.
</pre></div>


<p>Here, <code>env</code> is just the name of the directory you want to create your virtual environment inside. It's a common convention to call this directory <code>env</code>, and to put it inside your project directory (so, say you keep your code at <code>~/code/projectname/</code>, the environment will be at <code>~/code/projectname/env/</code> - each project gets its own <code>env</code>). But you can call it whatever you like and put it wherever you like!</p>
<p><strong>Note: if you're using a version control system like <code>git</code>, you shouldn't commit the <code>env</code> directory. Add it to your <code>.gitignore</code> file (or similar).</strong></p>
<h3>How do I use my shiny new virtual environment?</h3>
<p>If you look inside the <code>env</code> directory you just created, you'll see a few subdirectories:</p>
<div class="codehighlight"><pre><span class="nv">$ </span>ls env
bin include lib
</pre></div>


<p>The one you care about the most is <code>bin</code>. This is where the local copy of the <code>python</code> binary and the <code>pip</code> installer exists. Let's start by using the copy of <code>pip</code> to install <code>requests</code> <em>into</em> the virtualenv (rather than globally):</p>
<div class="codehighlight"><pre><span class="nv">$ </span>env/bin/pip install requests
Downloading/unpacking requests
  Downloading requests-1.1.0.tar.gz <span class="o">(</span>337kB<span class="o">)</span>: 337kB downloaded
  Running setup.py egg_info <span class="k">for </span>package requests

Installing collected packages: requests
  Running setup.py install <span class="k">for </span>requests

Successfully installed requests
Cleaning up...
</pre></div>


<p>It worked! Notice that we <em>didn't</em> need to use <code>sudo</code> this time, because we're not installing <code>requests</code> globally, we're just installing it inside our home directory.</p>
<p>Now, instead of typing <code>python</code> to get a Python shell, we type <code>env/bin/python</code>, and then...</p>
<div class="codehighlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">requests</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;http://dabapps.com&#39;</span><span class="p">)</span>
<span class="go">&lt;Response [200]&gt;</span>
</pre></div>


<h3>But that's a lot of typing!</h3>
<p>virtualenv has one more trick up its sleeve. Instead of typing <code>env/bin/python</code> and <code>env/bin/pip</code> every time, we can run a script to <em>activate</em> the environment. This script, which can be executed with <code>source env/bin/activate</code>, simply adjusts a few variables in your shell (temporarily) so that when you type <code>python</code>, you actually get the Python binary <em>inside</em> the virtualenv instead of the global one:</p>
<div class="codehighlight"><pre><span class="nv">$ </span>which python
/usr/bin/python
<span class="nv">$ </span><span class="nb">source </span>env/bin/activate
<span class="nv">$ </span>which python
/Users/jamie/code/myproject/env/bin/python
</pre></div>


<p>So now we can just run <code>pip install requests</code> (instead of <code>env/bin/pip install requests</code>) and <code>pip</code> will install the library into the environment, instead of globally. The adjustments to your shell only last for as long as the terminal is open, so you'll need to remember to rerun <code>source env/bin/activate</code> each time you close and open your terminal window. If you switch to work on a different project (with its own environment) you can run <code>deactivate</code> to stop using one environment, and then <code>source env/bin/activate</code> to activate the other.</p>
<p>Activating and deactivating environments does save a little typing, but it's a bit "magical" and can be confusing. Make your own decision about whether you want to use it.</p>
<h3>Requirements files</h3>
<p>virtualenv and pip make great companions, especially when you use the <code>requirements</code> feature of pip. Each project you work on has its own <code>requirements.txt</code> file, and you can use this to install the dependencies for that project into its virtual environment:</p>
<div class="codehighlight"><pre>env/bin/pip install -r requirements.txt
</pre></div>


<p>See <a href="http://www.pip-installer.org/en/latest/cookbook.html#requirements-files">the pip documentation</a> for more details.</p>
<h3>Recap</h3>
<ul>
<li>pip is a tool for installing packages from the Python Package Index.</li>
<li>virtualenv is a tool for creating isolated Python environments containing their own copy of <code>python</code>, <code>pip</code>, and their own place to keep libraries installed from PyPI.</li>
<li>It's designed to allow you to work on multiple projects with different dependencies at the same time on the same machine.</li>
<li>You can see instructions for installing it at <a href="http://www.virtualenv.org">virtualenv.org</a>.</li>
<li>After installing it, run <code>virtualenv env</code> to create a new environment inside a directory called <code>env</code>.</li>
<li>You'll need one of these environments for each of your projects. Make sure you exclude these directories from your version control system.</li>
<li>To use the versions of <code>python</code> and <code>pip</code> inside the environment, type <code>env/bin/python</code> and <code>env/bin/pip</code> respectively.</li>
<li>You can "activate" an environment with <code>source env/bin/activate</code> and deactivate one with <code>deactivate</code>. This is entirely optional but might make life a little easier.</li>
</ul>
<p>pip and virtualenv are <em>indispensible</em> tools if you're a regular Python user. Both are fairly simple to understand, and we highly recommend getting to grips with them.</p>
<p class="alert alert-warning">If this blog post has sparked your interest in learning Python, check out our <a href="http://dabapps.com/services/training/python-for-programmers">Python for Programmers</a> workshop at DabApps HQ in Brighton.</p>

        <div id="disqus_thread"></div>
        <script type="text/javascript">
            var disqus_developer = 0;
            var disqus_identifier = 'entry-27';
            var disqus_shortname = 'dabapps';

            (function() {
                var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>

    </div>
</div>
</div>


        </main>

    </div>

    <footer class="footer">

        <div class="container">

            <div class="row">

                <div class="col-xs-12 col-md-6">

                    <div class="col-sm-6 col-xs-12">
                        <h5>Contact</h5>
                        <ul>
                            <li>Tel: <a href="tel:01273208222">01273 208 222</a></li>
                            <li>Email: <a href="mailto:hello@dabapps.com">hello@dabapps.com</a></li>
                            <li class="list-break">DabApps Ltd.</li>
                            <li>First Floor, 31 Duke Street</li>
                            <li>Brighton, BN1 1AG</li>
                            <li class="list-break"><a href="/get-in-touch/#contact-form">Contact Form</a></li>
                        </ul>
                    </div>

                    <div class="col-sm-6 col-xs-12">
                        <h5>Community</h5>
                        <ul class="community-links social-media">
                            <li><a class="blog" href="/blog/">Blog</a></li>
                            <li><a href="/news/">DabApps News</a></li>
                            <li><a href="/what-we-do/training/python-for-programmers/">Training</a></li>
                            <li><a href="/open-source/">Open Source</a></li>
                            <li><a href="/community/brightonpy/">BrightonPy</a></li>
                            <!--<li><a href="/careers/">Careers</a></li>-->
                        </ul>
                    </div>

                </div>
                <div class="col-xs-12 col-md-6">

                    <div class="col-sm-6 col-xs-12">
                        <h5>Stay In Touch</h5>
                        <ul class="social-media">
                            <li><a class="twitter" href="https://twitter.com/dabapps">Twitter</a></li>
                            <li><a class="linkedin" href="http://www.linkedin.com/company/1669352/">LinkedIn</a></li>
                            <li><a class="facebook" href="https://www.facebook.com/dabapps">Facebook</a></li>
                        </ul>
                    </div>

                    <div class="col-sm-6 col-xs-12">
                        <h5>Info</h5>
                        <ul>
                            <li><a href="/terms/">Terms &amp; Conditions</a></li>
                            <li class="copyright">&copy; DabApps 2014</li>
                            <!--<li><a href="#">Privacy</a></li>-->
                        </ul>
                    </div>

                </div>

            </div>

        </div>

    </footer>

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-10730880-1', 'dabapps.com');
      ga('send', 'pageview');

    </script>

</body>
</html>
