<!DOCTYPE html>
<!--[if IE 6]>
<html id="ie6" lang="en">
<![endif]-->
<!--[if IE 7]>
<html id="ie7" lang="en">
<![endif]-->
<!--[if IE 8]>
<html id="ie8" lang="en">
<![endif]-->
<!--[if !(IE 6) & !(IE 7) & !(IE 8)]><!-->
<html lang="en">
<!--<![endif]-->
<!--
	generated 1 seconds ago
	generated in 1.570 seconds
	served from batcache in 0.014 seconds
	expires in 299 seconds
-->
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<title>Why I&#8217;m not leaving Python for Go | Ubershmekel&#039;s Uberpython Pythonlog</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="stylesheet" type="text/css" media="all" href="http://s2.wp.com/wp-content/themes/pub/twentyeleven/style.css?m=1398102582g" />
<link rel="pingback" href="http://uberpython.wordpress.com/xmlrpc.php" />
<!--[if lt IE 9]>
<script src="http://s2.wp.com/wp-content/themes/pub/twentyeleven/js/html5.js?m=1394055389g" type="text/javascript"></script>
<![endif]-->
<link rel="alternate" type="application/rss+xml" title="Ubershmekel&#039;s Uberpython Pythonlog &raquo; Feed" href="http://uberpython.wordpress.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Ubershmekel&#039;s Uberpython Pythonlog &raquo; Comments Feed" href="http://uberpython.wordpress.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Ubershmekel&#039;s Uberpython Pythonlog &raquo; Why I&#8217;m not leaving Python for&nbsp;Go Comments Feed" href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
function addLoadEvent(func){var oldonload=window.onload;if(typeof window.onload!='function'){window.onload=func;}else{window.onload=function(){oldonload();func();}}}
/* ]]> */
</script>
<link rel='stylesheet' id='all-css-0' href='http://s0.wp.com/_static/??-eJx9ktFSxCAMRX9IzFY7ji+O38JCltINhIHUTv9e2qq76ypPvZfJuQkpMCdlOApGgTCpRJPzsUAJnnBJmUc0cuseTSkP8DdG/owFRpSkzVlt7q78SOwuADuHlidRJybiGWZvHTZ7ZCQtaFXiIr9cCzOcsZ6HpGWtCGi9RsJQy1pYSC/f1CqHeq/7NjLUnAJpOoLM9WCpwR8YochCqOZUA3bGQ2TxFSs/otXcIStio8VzvDHqRNrn9pbWPVfpoFZd2Ra0LnGPhjLovMJf3/aUEfN+qYv8b0dDD474qKmVuD+Csk2+a+Wyt0pHWx9Vaf6wa9Yx24zabtO8h7euP/Rd9/R6eB4/AXI4HtM=' type='text/css' media='all' />
<script type='text/javascript'>
/* <![CDATA[ */
var LoggedOutFollow = {"invalid_email":"Your subscription did not succeed, please try again with a valid email address."};
/* ]]> */
</script>
<script type='text/javascript' src='http://s2.wp.com/_static/??-eJyFkOsOwiAMhV/IymY08Y/xWXbpSJGbFFz06WVuGp3G/WoL3zmHInoPjbMRbRSKhXE1aYTEGCqZz4Bs59aKVyJzZBudWuQBVOeE4TqVRQAMyVBFXBuyT/gt1TuOBplz5I/bzyiyF8J+EVMYfdWcICDT7cu11k6C10mSZZF7ia1LETqntetFT63EONeY9FIE1HmZFoZ3z6Y/qtH28TljC3UyHqZ1juZQbotity83xUbdAeP9mKg='></script>
<link rel='stylesheet' id='all-css-0' href='http://s2.wp.com/wp-content/mu-plugins/highlander-comments/style.css?m=1377793621g' type='text/css' media='all' />
<!--[if lt IE 8]>
<link rel='stylesheet' id='highlander-comments-ie7-css'  href='http://s2.wp.com/wp-content/mu-plugins/highlander-comments/style-ie7.css?m=1351637563g&#038;ver=20110606' type='text/css' media='all' />
<![endif]-->
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://uberpython.wordpress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://uberpython.wordpress.com/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='Secret societies of&nbsp;reddit' href='http://uberpython.wordpress.com/2012/08/24/secret-societies-of-reddit/' />
<link rel='next' title='Is selling placebos&nbsp;ethical?' href='http://uberpython.wordpress.com/2012/10/07/is-selling-placebos-ethical/' />
<meta name="generator" content="WordPress.com" />
<link rel='canonical' href='http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/' />
<link rel='shortlink' href='http://wp.me/pj9L5-a0' />
<link rel="alternate" type="application/json+oembed" href="https://public-api.wordpress.com/oembed/1.0/?format=json&amp;url=http%3A%2F%2Fuberpython.wordpress.com%2F2012%2F09%2F23%2Fwhy-im-not-leaving-python-for-go%2F&amp;for=wpcom-auto-discovery" /><link rel="alternate" type="application/xml+oembed" href="https://public-api.wordpress.com/oembed/1.0/?format=xml&amp;url=http%3A%2F%2Fuberpython.wordpress.com%2F2012%2F09%2F23%2Fwhy-im-not-leaving-python-for-go%2F&amp;for=wpcom-auto-discovery" />
<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="article" />
<meta property="og:title" content="Why I&#039;m not leaving Python for Go" />
<meta property="og:url" content="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/" />
<meta property="og:description" content="First of all, Go seems like a great language. It has an excellent tutorial which I joyfully went through and found: Go is Fast. Concurrent by design. Typed (important for JIT and IDE&#039;s) but not cum..." />
<meta property="article:published_time" content="2012-09-23T21:45:25+00:00" />
<meta property="article:modified_time" content="2012-09-23T21:57:33+00:00" />
<meta property="article:author" content="http://uberpython.wordpress.com/author/ubershmekel/" />
<meta property="og:site_name" content="Ubershmekel&#039;s Uberpython Pythonlog" />
<meta property="og:image" content="http://wordpress.com/i/blank.jpg?m=1383295312g" />
<meta name="twitter:site" content="@wordpressdotcom" />
<meta name="twitter:card" content="summary" />
<meta property="fb:app_id" content="249643311490" />
<meta property="article:publisher" content="https://www.facebook.com/WordPresscom" />
<link rel="shortcut icon" type="image/x-icon" href="http://s2.wp.com/i/favicon.ico?m=1311975824g" sizes="16x16 24x24 32x32 48x48" />
<link rel="icon" type="image/x-icon" href="http://s2.wp.com/i/favicon.ico?m=1311975824g" sizes="16x16 24x24 32x32 48x48" />
<link rel="apple-touch-icon-precomposed" href="http://s0.wp.com/i/webclip.png?m=1391188133g" />
<link rel='openid.server' href='http://uberpython.wordpress.com/?openidserver=1' />
<link rel='openid.delegate' href='http://uberpython.wordpress.com/' />
<link rel="search" type="application/opensearchdescription+xml" href="http://uberpython.wordpress.com/osd.xml" title="Ubershmekel&#039;s Uberpython Pythonlog" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com" />
<meta name="application-name" content="Ubershmekel&#039;s Uberpython Pythonlog" /><meta name="msapplication-window" content="width=device-width;height=device-height" /><meta name="msapplication-tooltip" content="Python, music, sports, gaming and philosophy." /><meta name="msapplication-task" content="name=Subscribe;action-uri=http://uberpython.wordpress.com/feed/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="title" content="Why I&#8217;m not leaving Python for&nbsp;Go | Ubershmekel&#039;s Uberpython Pythonlog on WordPress.com" />
<meta name="description" content="First of all, Go seems like a great language. It has an excellent tutorial which I joyfully went through and found: Go is Fast. Concurrent by design. Typed (important for JIT and IDE&#039;s) but not cumbersome and ugly like C or C++&#039;s spirals. Duck-type-esque interfaces. The defer mechanism is really nifty. But there&#039;s one problem I can&#039;t&hellip;" />

<script type='text/javascript' src='//partner.googleadservices.com/gampad/google_service.js'>
</script>
<script type='text/javascript'>
if ( typeof GS_googleAddAdSenseService == 'function' ) { GS_googleAddAdSenseService("ca-pub-3443918307802676"); }
if ( typeof GS_googleEnableAllServices == 'function' ) { GS_googleEnableAllServices() };
</script>
<script type="text/javascript" src="//c.amazon-adsystem.com/aax2/amzn_ads.js"></script>
<script type="text/javascript">
try { amznads.getAds("3033","300x250"); } catch(e) { /* ignore */ }
</script>
<script type="text/javascript">
var amznKeys = amznads.getKeys();
if (typeof amznKeys != "undefined" && amznKeys != "") { for (var i =0; i < amznKeys.length; i++) { var key = amznKeys[i]; GA_googleAddAttr("amzn", key);} }
document.close();
</script>
<script type='text/javascript'>
if ( typeof GA_googleAddSlot == 'function' ) { GA_googleAddSlot("ca-pub-3443918307802676", "wpcom_below_post_adsafe"); }
</script>
<script type='text/javascript'>
if ( typeof GA_googleFetchAds == 'function' ) { GA_googleFetchAds(); }
</script>

<script type="text/javascript">
var wpcom_ads = { bid: 4565747, pt: 'permalink', wa: 0, as: 1, domain: 'uberpython.wordpress.com', url: 'http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/', gid: '', };
</script>
<style type="text/css" id="syntaxhighlighteranchor"></style>
<script type="text/javascript">
	window.google_analytics_uacct = "UA-52447-2";
</script>

<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-52447-2']);
	_gaq.push(['_setDomainName', 'wordpress.com']);
	_gaq.push(['_initData']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
	})();
</script>
</head>

<body class="single single-post postid-620 single-format-standard mp6 single-author singular two-column right-sidebar highlander-enabled highlander-light">
<div id="page" class="hfeed">
	<header id="branding" role="banner">
			<hgroup>
				<h1 id="site-title"><span><a href="http://uberpython.wordpress.com/" rel="home">Ubershmekel&#039;s Uberpython Pythonlog</a></span></h1>
				<h2 id="site-description">Python, music, sports, gaming and philosophy.</h2>
			</hgroup>

						<a href="http://uberpython.wordpress.com/">
									<img src="http://s2.wp.com/wp-content/themes/pub/twentyeleven/images/headers/lanterns.jpg?m=1354160568g" width="1000" height="288" alt="" />
							</a>
			
								<form method="get" id="searchform" action="http://uberpython.wordpress.com/">
		<label for="s" class="assistive-text">Search</label>
		<input type="text" class="field" name="s" id="s" placeholder="Search" />
		<input type="submit" class="submit" name="submit" id="searchsubmit" value="Search" />
	</form>
			
			<nav id="access" role="navigation">
				<h3 class="assistive-text">Main menu</h3>
								<div class="skip-link"><a class="assistive-text" href="#content">Skip to primary content</a></div>
												<div class="menu"><ul><li ><a href="http://uberpython.wordpress.com/">Home</a></li><li class="page_item page-item-2"><a href="http://uberpython.wordpress.com/about/">About</a></li></ul></div>
			</nav><!-- #access -->
	</header><!-- #branding -->


	<div id="main">

		<div id="primary">
			<div id="content" role="main">

				
					<nav id="nav-single">
						<h3 class="assistive-text">Post navigation</h3>
						<span class="nav-previous"><a href="http://uberpython.wordpress.com/2012/08/24/secret-societies-of-reddit/" rel="prev"><span class="meta-nav">&larr;</span> Previous</a></span>
						<span class="nav-next"><a href="http://uberpython.wordpress.com/2012/10/07/is-selling-placebos-ethical/" rel="next">Next <span class="meta-nav">&rarr;</span></a></span>
					</nav><!-- #nav-single -->

					
<article id="post-620" class="post-620 post type-post status-publish format-standard hentry category-philosophy category-programming tag-exceptions tag-go tag-programming tag-python">
	<header class="entry-header">
		<h1 class="entry-title">Why I&#8217;m not leaving Python for&nbsp;Go</h1>

				<div class="entry-meta">
						<span class="sep">Posted on </span><a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/" title="21:45" rel="bookmark"><time class="entry-date" datetime="2012-09-23T21:45:25+00:00">September 23, 2012</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="http://uberpython.wordpress.com/author/ubershmekel/" title="View all posts by ubershmekel" rel="author">ubershmekel</a></span></span>		</div><!-- .entry-meta -->
			</header><!-- .entry-header -->

	<div class="entry-content">
		<p>First of all, Go seems like a great language. It has an <a title="Tutorial of go" href="http://tour.golang.org/">excellent tutorial</a> which I joyfully went through and found:</p>
<ul>
<li>Go is Fast.</li>
<li>Concurrent by design.</li>
<li>Typed (important for JIT and IDE&#8217;s) but not cumbersome and ugly like C or C++&#8217;s <a title="C spiral parsing" href="http://c-faq.com/decl/spiral.anderson.html">spirals</a>.</li>
<li>Duck-type-esque interfaces.</li>
<li>The <a title="defer" href="http://golang.org/doc/effective_go.html#defer">defer</a> mechanism is really nifty.</li>
</ul>
<p>But there&#8217;s one problem I can&#8217;t live with. Which is a shame as I was eager to make the leap of faith in the name of concurrency. That problem is <strong>errors are handled in return values</strong>. 70&#8242;s style.</p>
<h2>Verbose and repetitive error handling</h2>
<p>The <a title="Error handling" href="http://blog.golang.org/2011/07/error-handling-and-go.html">designers of go consider this a virtue</a>.</p>
<blockquote><p>In Go, error handling is important. The language&#8217;s design and conventions encourage you to explicitly check for errors where they occur (as distinct from the convention in other languages of throwing exceptions and sometimes catching them). In some cases this makes Go code <strong>verbose</strong>, but fortunately there are some techniques you can use to minimize <strong>repetitive</strong> error handling.</p></blockquote>
<p>This is one of the things I can&#8217;t stand in C. <strong>Every single line requires an if statement </strong>to prevent programs from doing crazy things. This is an official, canonical example from the aforementioned link with perhaps &#8220;minimal repetitive error handling&#8221;:</p>
<pre>    if err := datastore.Get(c, key, record); err != nil {
        return &amp;appError{err, "Record not found", 404}
    }
    if err := viewTemplate.Execute(w, record); err != nil {
        return &amp;appError{err, "Can't display record", 500}
    }</pre>
<p>The correct way to call a function in Go is to wrap it in an if statement. Even <a title="Println error" href="http://golang.org/pkg/fmt/#Println">Println</a> returns an error value that I&#8217;m sure most on the planet will never check. Which brings me to&#8230;</p>
<h2>Errors passing silently &#8211; ticking time bombs to go</h2>
<p>To quote Tim Peters:</p>
<blockquote><p>Errors should never pass silently<br />
Unless explicitly silenced</p></blockquote>
<p>Go isn&#8217;t just stuck with verbose and repetitive error handling. It also makes it easy and tempting to ignore errors. In the following program we would trigger the doomsday device even if we failed protecting the presidential staff.</p>
<pre>func main() {
    http.Get("http://www.nuke.gov/seal_presidential_bunker")
    http.Get("http://www.nuke.gov/trigger_doomsday_device")
}</pre>
<p>What a shame. Oops.</p>
<address>In theory we could require the programmer never ignore returned errors. By static analysis or convention. In practice it&#8217;d be a pain worth enduring only in the most error critical programming tasks. Perhaps that&#8217;s Go&#8217;s purpose.</address>
<h2>panic/recover</h2>
<p>Panic and recover aren&#8217;t good enough as long as the standard library rarely uses them. Why is an array out of bounds any more cause for panic than a bad format string or a broken connection? Go wanted to avoid exceptions entirely but realizing they can&#8217;t &#8211; a few exceptions were tacked on here and there, leaving me confused as to which error happens when.</p>
<h2>Perhaps another time</h2>
<p>So I say this with much regret because Go has a lot of amazing ideas and features, but without modern error handling &#8211; I&#8217;m not <strong>go</strong>ing.</p>
<p>I&#8217;m still waiting for that open source, concurrent, <a title="quad core code shape benchmarks" href="http://shootout.alioth.debian.org/u64q/code-used-time-used-shapes.php">bottom left language</a> to come along. Any suggestions are more than welcome.</p>

<div class="wpa" style="position: relative; width:300px; text-align: center; padding: 0; margin: 10px auto; overflow: hidden; clear: both;">
<a style="position: absolute; text-align: left; display: block; font: 9px/1 sans-serif; text-decoration: underline;" href="http://en.wordpress.com/about-these-ads/" rel="nofollow">About these ads</a>
<script type="text/javascript">
		var wpcom_adclk_hovering = false;
		var wpcom_adclk_recorded = false;
		var wpcom_adclk_theme = "Twenty Eleven";
		var wpcom_adclk_slot = "wpcom_below_post_adsafe";
		var wpcom_adclk_network = ( typeof wpcom_adclk_network === "undefined" ) ? "" : wpcom_adclk_network ;

		jQuery(document).ready( function() {
			function wpcom_adclk_hover_yes() { wpcom_adclk_hovering = true; }
			function wpcom_adclk_hover_no() { wpcom_adclk_hovering = false; }
			jQuery(".wpa").click(wpcom_adclk_click);
			jQuery(".wpa iframe").hover( wpcom_adclk_hover_yes, wpcom_adclk_hover_no );
			jQuery(".wpa object").hover( wpcom_adclk_hover_yes, wpcom_adclk_hover_no );

			jQuery(window).blur( function() {
				if ( wpcom_adclk_hovering ) { wpcom_adclk_click(); }
			});
		});

		function wpcom_adclk_impression() {
			var stat_gif = document.location.protocol + "//stats.wordpress.com/g.gif?v=wpcom-no-pv";
			stat_gif += "&x_ads_imp_theme=" + wpcom_adclk_theme;
			stat_gif += "&x_ads_imp_placement="+wpcom_adclk_slot;
			stat_gif += "&x_ads_imp_network=" + wpcom_adclk_network;
			stat_gif += "&x_ads_imp_theme_network="+wpcom_adclk_theme+"_"+wpcom_adclk_network;
			new Image().src = stat_gif + "&baba=" + Math.random();
			return true;
		}

		function wpcom_adclk_click() {
			if (wpcom_adclk_recorded) { return true; } // no double counting
			var stat_gif = document.location.protocol + "//stats.wordpress.com/g.gif?v=wpcom-no-pv";
			stat_gif += "&x_ads_click_theme=" + wpcom_adclk_theme;
			stat_gif += "&x_ads_click_placement="+wpcom_adclk_slot;
			stat_gif += "&x_ads_click_network=" + wpcom_adclk_network;
			stat_gif += "&x_ads_click_theme_network="+wpcom_adclk_theme+"_"+wpcom_adclk_network;

			new Image().src = stat_gif + "&baba=" + Math.random();
			wpcom_adclk_recorded = true;
			var now=new Date(); var end=now.getTime()+250;
			while(true){now=new Date();if(now.getTime()>end){break;}}
			return true;
		}
	
if ( typeof GA_googleAddAttr == 'function' ) {
GA_googleAddAttr("AdOpt", "1");
GA_googleAddAttr("Origin", "other");
GA_googleAddAttr("LangId", "1");
GA_googleAddAttr("Domain", "uberpython.wordpress.com");
GA_googleAddAttr("BlogId", "4565747");
GA_googleAddAttr("PageURL", "http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/");
GA_googleAddAttr("AdSafe", "1");
GA_googleAddAttr("Autotag", "technology");
GA_googleAddAttr("Autotag", "entertainment");
GA_googleAddAttr("Autotag", "books");
GA_googleAddAttr("Tag", "philosophy");
GA_googleAddAttr("Tag", "programming");
GA_googleAddAttr("Tag", "exceptions");
GA_googleAddAttr("Tag", "go");
GA_googleAddAttr("Tag", "programming");
GA_googleAddAttr("Tag", "python");
GA_googleAddAttr("Partner", "AOL");
GA_googleAddAttr("theme_bg", "ffffff");
GA_googleAddAttr("theme_border", "dddddd");
GA_googleAddAttr("theme_text", "333333");
GA_googleAddAttr("theme_link", "1bafe0");
GA_googleAddAttr("theme_url", "1bafe0");
GA_googleAddAdSensePageAttr("google_page_url", "http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/");
GA_googleFillSlot("wpcom_below_post_adsafe");
}
</script>
</div>
<style type="text/css">
div.wpa>div { margin-top: 1em; } #google_ads_div_wpcom_below_post_adsafe_ad_container { display: block !important; }
</style>
<script type="text/javascript">
jQuery( window ).load( function() {
    if ( jQuery(".wpa script[src*='virool.com']").length > 0 || jQuery(".wpa script[src*='shareth.ru']").length > 0 || jQuery(".wpa iframe[src*='boomvideo.tv']").length > 0 || jQuery(".wpa iframe[src*='viewablemedia.net']").length > 0 || jQuery(".wpa .sharethrough-placement").length > 0 ) {
        jQuery( '.wpa' ).css( 'width', '400px' );
    }
setTimeout(function(){if(typeof GS_googleAddAdSenseService !== 'function'){new Image().src=document.location.protocol+"//stats.wordpress.com/g.gif?v=wpcom-no-pv&x_noads=adblock&baba="+Math.random()}},100);
} );
</script>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-google-plus-1"><a rel="nofollow" class="share-google-plus-1 sd-button share-icon" href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/?share=google-plus-1" title="Click to share on Google+" id="sharing-google-620"><span>Google</span></a></li><li class="share-reddit"><a rel="nofollow" class="share-reddit sd-button share-icon" href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/?share=reddit" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-facebook"><a rel="nofollow" class="share-facebook sd-button share-icon" href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/?share=facebook" title="Share on Facebook" id="sharing-facebook-620"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div>
<div id='jp-relatedposts' class='jp-relatedposts' >
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
</div></div>			</div><!-- .entry-content -->

	<footer class="entry-meta">
		This entry was posted in <a href="http://uberpython.wordpress.com/category/philosophy/" rel="category tag">philosophy</a>, <a href="http://uberpython.wordpress.com/category/programming/" rel="category tag">programming</a> and tagged <a href="http://uberpython.wordpress.com/tag/exceptions/" rel="tag">exceptions</a>, <a href="http://uberpython.wordpress.com/tag/go/" rel="tag">go</a>, <a href="http://uberpython.wordpress.com/tag/programming/" rel="tag">programming</a>, <a href="http://uberpython.wordpress.com/tag/python/" rel="tag">python</a> by <a href="http://uberpython.wordpress.com/author/ubershmekel/">ubershmekel</a>. Bookmark the <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/" title="Permalink to Why I&#8217;m not leaving Python for&nbsp;Go" rel="bookmark">permalink</a>.		
			</footer><!-- .entry-meta -->
</article><!-- #post-620 -->

						<div id="comments">
	
	
			<h2 id="comments-title">
			106 thoughts on &ldquo;<span>Why I&#8217;m not leaving Python for&nbsp;Go</span>&rdquo;		</h2>

		
		<ol class="commentlist">
				<li class="comment even thread-even depth-1 highlander-comment" id="li-comment-687">
		<article id="comment-687" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/8eecf70034e1c339724fd92930fc4d10?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">Michael</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-687"><time datetime="2012-09-23T22:21:10+00:00">September 23, 2012 at 22:21</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>The single thing I hate most about Python programs (or Ruby programs) is the lack of error handling. On COUNTLESS occasions programs have blown up in front of me, and when they are written in Python (or Ruby), I most often just get an unhelpful stacktrace.</p>
<p>I, too, consider it a virtue that Go takes error checking seriously. Whenever I write code, I’d do it that way anyways.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=687#respond' onclick='return addComment.moveForm("comment-687", "687", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-748">
		<article id="comment-748" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/8e17239e5d83041e5dc6a4e16019bb1c?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">Julien</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-748"><time datetime="2012-09-25T03:30:12+00:00">September 25, 2012 at 03:30</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>IMHO The Python tracebacks (i dont know about Ruby ones) are quite verbose and explicits. Also extensive error handling is available to the programmer, only if he decides to use it seriously which is rarely the case i admit <span class='wp-smiley emoji emoji-smile' title=':)'>:)</span></p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=748#respond' onclick='return addComment.moveForm("comment-748", "748", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment byuser comment-author-zenettii even depth-2 highlander-comment" id="li-comment-804">
		<article id="comment-804" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/9569511fbb8c4c4750039aac2037712d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://www.BinaryExistence.co.uk/' rel='external nofollow' class='url'>Rob</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-804"><time datetime="2012-09-28T14:51:07+00:00">September 28, 2012 at 14:51</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>As a fairly new starter to Python, I have to say that the error handling in it is pretty obvious most of the time. Makes things easy to deal with.</p>
<p>Go was my target for a 2nd language to learn, and I&#8217;m still looking forward to it because this one issue that someone has about error handling is nothing to be concerned about. It&#8217;s just a case of accepting change and getting use to i.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=804#respond' onclick='return addComment.moveForm("comment-804", "804", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-808">
		<article id="comment-808" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/87f2efac0ff72169aa6e92fc3c613189?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://gravatar.com/endophage' rel='external nofollow' class='url'>endophage</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-808"><time datetime="2012-09-28T19:47:01+00:00">September 28, 2012 at 19:47</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>The writer is correct in saying returning error codes is 70s error handling.  All they tell you is &#8220;something went wrong&#8221;.  Python&#8217;s exception handling is considerably more verbose and by declaring your own exception classes you can effectively monitor, handle and debug code often by simply looking at the class of exception raised.</p>
<p>Change that move your forward is good. Changes that moves you backward is not so good.  This isn&#8217;t a two steps forward one step back, error code returns are many many steps back as far as exception handling goes.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even depth-2 highlander-comment" id="li-comment-807">
		<article id="comment-807" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/87f2efac0ff72169aa6e92fc3c613189?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://gravatar.com/endophage' rel='external nofollow' class='url'>endophage</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-807"><time datetime="2012-09-28T19:44:20+00:00">September 28, 2012 at 19:44</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Python&#8217;s stack traces, combined with the error message text, typically contain exactly enough information to tell you what went wrong and exactly where the error occurred.  Of course, you have to actually read the stack trace to get anything useful out of it.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=807#respond' onclick='return addComment.moveForm("comment-807", "807", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-815">
		<article id="comment-815" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/ec669061f44c634fe5b1504a6581cf01?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://gravatar.com/ultracrepidarian' rel='external nofollow' class='url'>WarrenP</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-815"><time datetime="2012-09-29T13:49:24+00:00">September 29, 2012 at 13:49</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Exactly. Error returns contain a single integer. I&#8217;ve got this Error 302 here. What should we do? Whereas an Python traceback has the entire context of the failed operation, containing, hopefully enough context for the developer to fix the problem.  Go&#8217;s design expects authors to construct, in 10,000 locations throughout their code, a manual traceback of what went wrong. What a failure by the language designers, and all because of their 70s era Fear of Exceptions.</p>
<p>W</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1 highlander-comment" id="li-comment-688">
		<article id="comment-688" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/ba7f377e8ec4cda486f499b39b6f1d55?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://gravatar.com/tvst3000' rel='external nofollow' class='url'>tvst3000</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-688"><time datetime="2012-09-23T22:28:21+00:00">September 23, 2012 at 22:28</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>What about Panic/Recover?<br />
<a href="http://golang.org/ref/spec#Handling_panics" rel="nofollow">http://golang.org/ref/spec#Handling_panics</a></p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=688#respond' onclick='return addComment.moveForm("comment-688", "688", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-689">
		<article id="comment-689" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/ba7f377e8ec4cda486f499b39b6f1d55?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://gravatar.com/tvst3000' rel='external nofollow' class='url'>tvst3000</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-689"><time datetime="2012-09-23T22:29:06+00:00">September 23, 2012 at 22:29</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Ooops, you mentioned it. Should have read the whole thing first <span class='wp-smiley emoji emoji-smile' title=':)'>:)</span></p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=689#respond' onclick='return addComment.moveForm("comment-689", "689", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1 highlander-comment" id="li-comment-690">
		<article id="comment-690" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i0.wp.com/graph.facebook.com/31402373/picture?q=type%3Dlarge%26_md5%3D575e91512b31fd7aa652c4fbaf641b54&#038;resize=68%2C68' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://www.facebook.com/james.jdunne' rel='external nofollow' class='url'>James Dunne</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-690"><time datetime="2012-09-23T23:06:10+00:00">September 23, 2012 at 23:06</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Exceptions are not a sane error handling strategy; this is. Exceptions may seem fine under a traditional &#8220;OS threads&#8221; concurrency model. Once you move into asynchronous execution territory, exceptions are absolutely terrible to deal with. I must ask, have you ever written truly asynchronous code? I&#8217;m speaking from a .NET developer&#8217;s perspective, primarily focused on writing reliable and highly scalable back-end software.</p>
<p>As in your example with http.Get, why would you assume that a non-200 response from an HTTP server should produce an exception? Yes, the .NET framework does it this way and I completely disagree with that approach. That&#8217;s not exceptional behavior at all, just a detail of the protocol. You *should* handle errors explicitly and figure out sane recovery paths rather than letting your application bomb out with an exception because you didn&#8217;t handle it.</p>
<p>I agree, errors should be explicitly ignored if desired, never implicity. If Go allows one to implicitly ignore `error` returns, then this is indeed bad, but it shouldn&#8217;t deter you completely from using the language. Perhaps they&#8217;ll fix that &#8220;one thing&#8221; in the future. Have you registered a complaint at all? Or did you just decide to go and blog about it?</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=690#respond' onclick='return addComment.moveForm("comment-690", "690", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment byuser comment-author-ubershmekel bypostauthor odd alt depth-2 highlander-comment" id="li-comment-698">
		<article id="comment-698" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/48aae91146c6aa266ff2c9b3d1ab5d8b?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">ubershmekel</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-698"><time datetime="2012-09-24T05:02:46+00:00">September 24, 2012 at 05:02</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>It&#8217;s not just 500 errors, if I disconnect my internet, http.Get still runs and falls through. The problem is a bit beyond complaining. the designers of Go have explicitly stated their position on the subject. I think there&#8217;s nothing left to do about it. Do you believe they&#8217;d mind my objection?</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=698#respond' onclick='return addComment.moveForm("comment-698", "698", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-3 highlander-comment" id="li-comment-736">
		<article id="comment-736" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i0.wp.com/graph.facebook.com/31402373/picture?q=type%3Dlarge%26_md5%3D575e91512b31fd7aa652c4fbaf641b54&#038;resize=39%2C39' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://www.facebook.com/james.jdunne' rel='external nofollow' class='url'>James Dunne</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-736"><time datetime="2012-09-24T15:57:18+00:00">September 24, 2012 at 15:57</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>The complaint I was speaking of was that the compiler allows implicit ignoring of error returns.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-705">
		<article id="comment-705" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/1f5d1e6573fff27a72356d4c03c54142?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">Roger</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-705"><time datetime="2012-09-24T07:01:16+00:00">September 24, 2012 at 07:01</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>When exceptions are true first class objects like in Python then they work just fine in asynchronous code.  You can easily pass them around and you can reraise them, even across processes. How does that make things worse?</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=705#respond' onclick='return addComment.moveForm("comment-705", "705", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-3 highlander-comment" id="li-comment-737">
		<article id="comment-737" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i0.wp.com/graph.facebook.com/31402373/picture?q=type%3Dlarge&#038;resize=39%2C39' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://www.facebook.com/james.jdunne' rel='external nofollow' class='url'>James Dunne</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-737"><time datetime="2012-09-24T16:00:51+00:00">September 24, 2012 at 16:00</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I&#8217;ve never done Python. I was speaking from a .NET perspective where exceptions are tied with the implementation detail of a call-stack, which becomes more-or-less useless in an asynchronous execution context. Wrapping every `await` expression in a try/catch statement makes exceptions quite annoying to deal with, especially when you want fast execution and to not completely halt your thread just to unwind a call stack just to identify something that didn&#8217;t have to be an exception in the first place.</p>
<p>I suppose it looks like I was casting the .NET concept of an exception onto Python exceptions, which I did not intend to do. I did note that I was speaking from a .NET perspective up front.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-722">
		<article id="comment-722" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/5a0829b5d513e9f91a244156e8f24dcc?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">makomk</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-722"><time datetime="2012-09-24T11:56:45+00:00">September 24, 2012 at 11:56</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Python actually has a really decent framework for asynchronous development called Twisted and it handles exceptions just fine. As Roger says, since they&#8217;re first-class objects you can just pass them around and that&#8217;s exactly what Twisted Python does &#8211; exceptions are automatically converted to calls to special callback functions with the exception as a parameter. You don&#8217;t need to add a check to every single function call like in Go, you can install an error callback once and let it handle all the errors in a long chain of asynchronous calls, and if an error happens that goes unhandled Twisted prints out a warning. It&#8217;s quite neat really.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=722#respond' onclick='return addComment.moveForm("comment-722", "722", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-3 highlander-comment" id="li-comment-726">
		<article id="comment-726" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/396e3de53320abf9855d912cd3d9431f?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">sigma</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-726"><time datetime="2012-09-24T13:09:08+00:00">September 24, 2012 at 13:09</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Also, multiprocessing catches and re-raises exceptions exactly because they&#8217;re first class objects. Unfortunately in that case, it takes some hunting to determine where the error comes from because the stack trace is skipped.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-738">
		<article id="comment-738" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i0.wp.com/graph.facebook.com/31402373/picture?q=type%3Dlarge&#038;resize=39%2C39' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://www.facebook.com/james.jdunne' rel='external nofollow' class='url'>James Dunne</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-738"><time datetime="2012-09-24T16:12:38+00:00">September 24, 2012 at 16:12</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Yes, that&#8217;s great and all, but isn&#8217;t Python limited to executing on a single core still due to the global interpreter lock? You&#8217;ll never get full scalability there, async or not. Go gives you this by default without any such silly global locks. If my information is out of date or not applicable to all Python execution engines/environments, please do correct me.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even depth-2 highlander-comment" id="li-comment-1203">
		<article id="comment-1203" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">weberc2</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1203"><time datetime="2013-01-19T21:48:54+00:00">January 19, 2013 at 21:48</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>What are you talking about? There&#8217;s nothing about exceptions that are preventing you from handling them on the spot. You can handle a non 200 http.Get result there, or you can let it automatically propagate up the call stack, and all without polluting your return data anywhere along the way.</p>
<p>Moreover, the difference between &#8220;exceptional&#8221; and &#8220;non-exceptional&#8221; that the Go-folks draw seems to be irrelevant. If an http Get request returns 404, I want to handle it, and if I forget to handle it, I don&#8217;t want my program to continue chugging away on bad data&#8211;I want to be notified with useful information about the error&#8217;s cause. I don&#8217;t see why it would be useful to allow the program to scrape the 404 page when I think I&#8217;m scraping a 200 page. In most contexts, it seems your exceptional/non-exceptional distinction is useless in the worst possible way.</p>
<p>Ada even includes exception handling, and it&#8217;s designed for mission critical realtime applications for crying out loud.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1203#respond' onclick='return addComment.moveForm("comment-1203", "1203", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="li-comment-691">
		<article id="comment-691" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/02ea6cc76baf9c66cb24e8fc1b7bd015?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">J. Lemire</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-691"><time datetime="2012-09-23T23:25:34+00:00">September 23, 2012 at 23:25</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I am not going to Go either but for different reasons.</p>
<p>About the exceptions: You have shaken my belief that exceptions are evil (well, not necessary). But now, I must to reconsider the whole thing. For the time being, I would say that the calls to the 2 urls should be 1 call with a string in a variable, so only 1 after-the-call check.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=691#respond' onclick='return addComment.moveForm("comment-691", "691", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1 highlander-comment" id="li-comment-692">
		<article id="comment-692" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/8cc12a3db6f2d38dcb3308d7ce278d58?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">Jimmy</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-692"><time datetime="2012-09-24T00:37:34+00:00">September 24, 2012 at 00:37</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>This concerns me very deeply, as well. What worries me more, however, is the crowd that has really started hyping Go as of late. This is the same crowd that hyped Ruby on Rails, JavaScript, Node.js and NoSQL in the past.</p>
<p>Now several years on, many of us who aren&#8217;t in that crowd are now cleaning up the messes that have been left behind. They are not pretty messes at all. I fear that the same messes will again be left behind, but this time involving Go. This could be very damaging for Go&#8217;s reputation, and the reputation of anyone claiming to be a Go practitioner. That is why I am keeping my distance.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=692#respond' onclick='return addComment.moveForm("comment-692", "692", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-719">
		<article id="comment-719" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/14d8f99bef950daabe2ae0c5a3968241?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://www.codeotaku.com' rel='external nofollow' class='url'>ioquatix</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-719"><time datetime="2012-09-24T11:26:41+00:00">September 24, 2012 at 11:26</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Putting all these people in the same group might be a bit presumptuous.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=719#respond' onclick='return addComment.moveForm("comment-719", "719", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even depth-2 highlander-comment" id="li-comment-721">
		<article id="comment-721" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/b9a7b48b4e057ce7a919235fb3de4c65?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://www.pointslope.com' rel='external nofollow' class='url'>Christian Romney</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-721"><time datetime="2012-09-24T11:52:52+00:00">September 24, 2012 at 11:52</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>That&#8217;s a bit hyperbolic, Jimmy. Bad code is written in every language, including Python. There are lots of people cleaning up Django code, too. You may not like Rails, but Github is making serious money and solving real problems with it (I don&#8217;t know why I bothered singling them out, they&#8217;re by no means an anomaly) despite shortcomings in the language and framework. In fact, pick almost any language and there are people using it successfully in the &#8220;real world&#8221;. It&#8217;s ok if it doesn&#8217;t fit your programming style or match your aesthetics. That&#8217;s really what most language choices boil down to until you get to the enterprise, and then it&#8217;s the ability to commoditize the developer and the admin.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=721#respond' onclick='return addComment.moveForm("comment-721", "721", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-816">
		<article id="comment-816" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/ec669061f44c634fe5b1504a6581cf01?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://gravatar.com/ultracrepidarian' rel='external nofollow' class='url'>WarrenP</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-816"><time datetime="2012-09-29T13:53:25+00:00">September 29, 2012 at 13:53</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I suppose they are in a group of developers that is More Adventurous Than Me.  That&#8217;s the kind of categories we all seem to like best.  People who are Stuck in the Mud are Less Adventurous than me, and the people who Jump at NoSQL Faster Than Me, are officially nuts, whereas I alone, am sane, and well balanced. (grin).</p>
<p>W</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=816#respond' onclick='return addComment.moveForm("comment-816", "816", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even depth-2 highlander-comment" id="li-comment-1279">
		<article id="comment-1279" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i1.wp.com/pbs.twimg.com/profile_images/2421820198/samurai_me_normal.jpg?resize=39%2C39' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://twitter.com/ondrejkupka' rel='external nofollow' class='url'>Ondřej Kupka (@ondrejkupka)</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1279"><time datetime="2014-01-05T10:13:30+00:00">January 5, 2014 at 10:13</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>No way it&#8217;s they same group of people. I personally never used Ruby and don&#8217;t really like JavaScript or Node.js. I would almost say that the people hyping Go are exactly these that are not hyping Node.js, but that is just a speculation that I somehow observed at work.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1279#respond' onclick='return addComment.moveForm("comment-1279", "1279", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="li-comment-693">
		<article id="comment-693" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i2.wp.com/a0.twimg.com/profile_images/970160969/15016277-e285-4686-9479-8c0cdf3b0201_normal.png?resize=68%2C68' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://twitter.com/elimisteve' rel='external nofollow' class='url'>elimisteve (@elimisteve)</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-693"><time datetime="2012-09-24T01:34:22+00:00">September 24, 2012 at 01:34</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Hmm, I&#8217;m frankly disappointed that the HN crowd let such a misguided post make it to #1 on the home page.</p>
<p>&#8220;Every single line requires an if statement to prevent programs from doing crazy things.&#8221;</p>
<p>This is an absurd overstatement.  I invite your readers to read literally any Go program ever written to see that this statement is the opposite of true.</p>
<p>I appreciate Go because I&#8217;m working hard to become an engineer that builds robust software rather than a sloppy hacker that throws scripts together.  One significant difference between the former and the latter is carefully handling errors versus not.</p>
<p>Python&#8217;s error handling seems much more succinct only because most of us don&#8217;t both handling errors at all!  Every other line throws many exceptions, but we ignore this.</p>
<p>Bottom line:</p>
<p>When I feel like having fun making something simple and getting it done _fast_, I use Python.</p>
<p>When I feel like building anything that _needs_ to work, I use Go.  And yes, that means taking error handling seriously.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=693#respond' onclick='return addComment.moveForm("comment-693", "693", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-2 highlander-comment" id="li-comment-704">
		<article id="comment-704" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i2.wp.com/a0.twimg.com/profile_images/605580877/profile_normal.jpg?resize=39%2C39' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://twitter.com/IanMLewis' rel='external nofollow' class='url'>Ian Lewis (@IanMLewis)</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-704"><time datetime="2012-09-24T06:45:10+00:00">September 24, 2012 at 06:45</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>One of the things that&#8217;s nice about exceptions is that you can catch them at different points in the call stack meaning that you can write code that basically defers error handling to the caller by simply not handling the errors. You can do the same thing in Go but you have to explicitly return the error to the caller which makes things look a bit messier and may have bugs when you miss passing along errors returned from other functions.</p>
<p>Exceptions also crash your program if you don&#8217;t catch them. Error return values do not so you need to crash it yourself explicitly. Having the program crash is actually a desirable outcome in situations where an unhandled error occurs.</p>
<p>Python programmers care about error handling. Go programmers do too but I don&#8217;t think Python programmers are just writing things &#8220;__fast__&#8221;. I gather that Go decided on this kind of error handling explicitly because of the concurrency features and I think you and the OP are comparing apples to oranges.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=704#respond' onclick='return addComment.moveForm("comment-704", "704", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-1204">
		<article id="comment-1204" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">weberc2</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1204"><time datetime="2013-01-19T22:02:44+00:00">January 19, 2013 at 22:02</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Why does the Go crowd (I generally like Go, mind you) insist that exception handling is somehow not taking errors seriously? If you encounter an exception, your program will fail on the spot rather than producing incorrect results or panicking many instructions later. And as someone who is learning Go, much of the code looks like this:</p>
<p>result, err := somefunc()<br />
if err != nil {<br />
    doSmthng()<br />
} else {<br />
    doSmthngEls()<br />
}</p>
<p>when it should look like this:<br />
somefunc()<br />
doSmthng()</p>
<p>or (worst case):<br />
try {<br />
    somefunc()<br />
    doSmthng()<br />
}<br />
catch { doSmthngEls() }</p>
<p>With exceptions, error handling takes place only where necessary. Feel free to provide an example of how exception handling isn&#8217;t &#8220;careful&#8221;. I bet for every example you provide, I can provide the same thing via Go&#8217;s error handling.</p>
<p>Seriously, Ada is the most &#8220;careful&#8221; language I know of, and _even it_ uses exception handling.</p>
<p>Moreover, Go allows a programmer to be careless and fail to handle an error properly, unlike exceptions.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1204#respond' onclick='return addComment.moveForm("comment-1204", "1204", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1 highlander-comment" id="li-comment-694">
		<article id="comment-694" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c8bcce48680b09e5deef0a61ee25f5fc?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">pedantic</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-694"><time datetime="2012-09-24T01:36:07+00:00">September 24, 2012 at 01:36</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>&#8217;70s</p>
<p>FTFY</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=694#respond' onclick='return addComment.moveForm("comment-694", "694", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="li-comment-695">
		<article id="comment-695" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/81609937c20aeab3598aea56f1f4f022?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://www.coderwall.com/runexec' rel='external nofollow' class='url'>Ryan</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-695"><time datetime="2012-09-24T02:05:15+00:00">September 24, 2012 at 02:05</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Give Clojure a spin.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=695#respond' onclick='return addComment.moveForm("comment-695", "695", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1 highlander-comment" id="li-comment-696">
		<article id="comment-696" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/fdd692a907a4b7e2500d83bbcbfcaa47?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://gravatar.com/robertoguerra77' rel='external nofollow' class='url'>robertoguerra77</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-696"><time datetime="2012-09-24T02:25:06+00:00">September 24, 2012 at 02:25</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I just couldn&#8217;t like Go. It feels so inconsistent and awkward. Feels like curved baseball bat. A few examples of its inconsistency. Why leave out the ; and keep the {} ? I couldn&#8217;t understand that.<br />
Secondly, the weird names. What the hell is fmt? And why not println instead of fmt.Println() ?<br />
The for loop is also &#8216;old&#8217;. Even java has nicer looking for loops now, and in Java 8 will include iterators similar to those in Ruby. Why does Go insist in making thing so much like C (without being C and slower than C)?</p>
<p>I found Go to be ugly, cryptic and inconsistent (syntax wise). For it to be successful it has to make developers comfortable and has to be fun to code in. Go isn&#8217;t. It might carve a niche in High Performance arenas, but it won&#8217;t be the language of choice for &#8216;regular apps&#8217;.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=696#respond' onclick='return addComment.moveForm("comment-696", "696", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-700">
		<article id="comment-700" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/f0a3ce9ab4d65f2e2dad6cd0aa63c98a?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://carlhoerberg.com' rel='external nofollow' class='url'>carlhoerberg</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-700"><time datetime="2012-09-24T05:32:51+00:00">September 24, 2012 at 05:32</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>for index, obj := range mySlice {<br />
}<br />
for key, value := range myMap {<br />
}</p>
<p>very readable imho.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=700#respond' onclick='return addComment.moveForm("comment-700", "700", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment byuser comment-author-juliank even depth-3 highlander-comment" id="li-comment-782">
		<article id="comment-782" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c7f8a61543923d9c6d3cd645a0200225?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://jak-linux.org/' rel='external nofollow' class='url'>Julian Andres Klode</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-782"><time datetime="2012-09-26T13:33:36+00:00">September 26, 2012 at 13:33</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>No. It&#8217;s not readable because it looks like an assignment. A keyword such as &#8216;in&#8217; would make the code more readable and the syntax more correct.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-1205">
		<article id="comment-1205" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">weberc2</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1205"><time datetime="2013-01-19T22:04:16+00:00">January 19, 2013 at 22:04</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I agree with Julian, and I actually _like_ Go!</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even depth-2 highlander-comment" id="li-comment-701">
		<article id="comment-701" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/f1340809bc5256fb324be57bb88b88a9?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">Simon Hibbs</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-701"><time datetime="2012-09-24T05:40:28+00:00">September 24, 2012 at 05:40</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>High performance arenas that think a garbage collected language is acceptable, rally aren&#8217;t high performance. Seriously. This is where I think Apple is on to something with ARC. I work for an equities exchange and we&#8217;ve replaced our Java components with C++ due to unacceptable delays due to GC pauses. We measure response times in microseconds, so any GC language is going to have problems.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=701#respond' onclick='return addComment.moveForm("comment-701", "701", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-703">
		<article id="comment-703" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i2.wp.com/a0.twimg.com/profile_images/605580877/profile_normal.jpg?resize=39%2C39' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://twitter.com/IanMLewis' rel='external nofollow' class='url'>Ian Lewis (@IanMLewis)</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-703"><time datetime="2012-09-24T06:36:58+00:00">September 24, 2012 at 06:36</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Most people don&#8217;t work for an equities exchange and the nice thing about Go is not so much that it&#8217;s super fast, than that it&#8217;s &#8220;pretty&#8221; fast and compiles to a statically linked executable that can be deployed anywhere with one file.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even depth-3 highlander-comment" id="li-comment-711">
		<article id="comment-711" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/3c2b0e48cf489f382ef26dbe7517da4a?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">Pete</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-711"><time datetime="2012-09-24T07:57:02+00:00">September 24, 2012 at 07:57</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Performance and guaranteed latency are two different, orthogonal measurements.  In fact, you even can think of them as a tradeoff, as in algorithm design and in compiler optimizations you often can improve performance by sacrificing some latency and vice versa.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-710">
		<article id="comment-710" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/d06f63433d0ca4a9a5c562433ce87966?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">foljs</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-710"><time datetime="2012-09-24T07:56:20+00:00">September 24, 2012 at 07:56</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p><b>I just couldn’t like Go.</b></p>
<p>It&#8217;s not like you tried.</p>
<p><b>A few examples of its inconsistency. Why leave out the ; and keep the {} ? I couldn’t understand that.</b></p>
<p>What is there to understand? ; is superfluous, because a newline does the same thing 99.9% of the time.</p>
<p>As for {}, it is still needed if you want to delimit blocks any way you like. The other solutions would be significant whitespace a la Python (that a lot of people don&#8217;t prefer) or begin / end which is the exact same thing as {}. </p>
<p><b>Secondly, the weird names. What the hell is fmt?</b></p>
<p>A short way to write &#8220;format&#8221;, in the time honored tradition on programming shortnames?</p>
<p><b>And why not println instead of fmt.Println() ?</b></p>
<p>Because they want to it to be part of a package, not a special construct in the language or polluting the global namespace.</p>
<p><b>The for loop is also ‘old’. Even java has nicer looking for loops now, and in Java 8 will include iterators similar to those in Ruby. Why does Go insist in making thing so much like C (without being C and slower than C)?</b></p>
<p>Go has the same kind of for loops Java or Ruby has, in addition the old C-style for loop. Perhaps you should read some more.</p>
<p>Really, those are your objections? Have you been programming more than 2 years?</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=710#respond' onclick='return addComment.moveForm("comment-710", "710", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-3 highlander-comment" id="li-comment-715">
		<article id="comment-715" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i0.wp.com/graph.facebook.com/691362060/picture?q=type%3Dlarge&#038;resize=39%2C39' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://www.facebook.com/slikts' rel='external nofollow' class='url'>Reinis Ivanovs</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-715"><time datetime="2012-09-24T10:18:00+00:00">September 24, 2012 at 10:18</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>&gt; A short way to write “format”, in the time honored tradition on programming shortnames?</p>
<p>Cryptic names may be traditional but they&#8217;re not a good thing: a better solution is to use tools that make it easy to work with longer names (the tool I use for it is usually NetBeans).</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-1145">
		<article id="comment-1145" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/f5b8fb60c6116331da07c65b96a8a1d1?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">joe</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1145"><time datetime="2012-11-14T17:18:08+00:00">November 14, 2012 at 17:18</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>&gt; a better solution is to use tools that make it easy to work with<br />
&gt; longer names</p>
<p>Like this one?</p>
<p>    <a href="http://javadoc.bugaco.com/com/sun/java/swing/plaf/nimbus/InternalFrameInternalFrameTitlePaneInternalFrameTitlePaneMaximizeButtonPainter.html" rel="nofollow">http://javadoc.bugaco.com/com/sun/java/swing/plaf/nimbus/InternalFrameInternalFrameTitlePaneInternalFrameTitlePaneMaximizeButtonPainter.html</a></p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even depth-3 highlander-comment" id="li-comment-1460">
		<article id="comment-1460" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i1.wp.com/lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?resize=39%2C39' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='https://plus.google.com/101924844866754176963' rel='external nofollow' class='url'>Christopher Probst</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1460"><time datetime="2014-03-24T08:46:30+00:00">March 24, 2014 at 08:46</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>The biggest inconsistency is that arrays, slices, channels, maps are generic but there is no way to create custom generic data types. And map-keys a pretty strange, why not allowing a Hashable Interface with equals/hashKey. The thing is that Go is really practically but theoretically it &#8220;sucks&#8221;. There is only one reason generic data types were left out and why there are a couple of builtin generics types: Because generics ARE important, the authors knew that, but they were not smart enough to figure out a way to implement them efficiently so they picked the most important cases and baked them in, for-ever. So if one day generics are added, we have to deal with a probably slow map implementation and can&#8217;t fix it because operator overloading is not allowed. Overall Go is syntactically pretty boring and pretty inconsistent, nobody doubt that. But Go actually _works!_ pretty nice, and that&#8217;s why it&#8217;s so popular right now. Because most other language just &#8220;suck&#8221; at doing network! Yes, I&#8217;m looking at you, nodejs. All modern languages pretty much fucked it up with there non-blocking-callback-shit and async-await stuff like C#/python3.4 is not comparable to Go&#8217;s model. So we just have to live with it, there is just no real alternative for high-performance networking.</p>
<p>@Garbage-Collection guys: Manual garbage collection comes at a cost, too. Go1.2&#8242;s GC is pretty fast and if you do not allocate, than there is no GC. So if you do your high-performance tests just allocate once and reuse objects. It&#8217;s not that difficult. And you aren&#8217;t getting realtime performance  from either C++ and Go because most of the time you are not running on a realtime OS. Modern GC&#8217;s are way faster than usual memory management because memory is allocated/released in batches and often even reused. And hey, no more memory leaks or Segmentation faults <span class='wp-smiley emoji emoji-wink' title=';)'>;)</span></p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-752">
		<article id="comment-752" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/567f158c465d8ed5d5a519800c23533d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">shogg</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-752"><time datetime="2012-09-25T08:52:00+00:00">September 25, 2012 at 08:52</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Go has a built-in println function. It lacks the formating feature of fmt.Println.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=752#respond' onclick='return addComment.moveForm("comment-752", "752", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-3 highlander-comment" id="li-comment-817">
		<article id="comment-817" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/ec669061f44c634fe5b1504a6581cf01?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://gravatar.com/ultracrepidarian' rel='external nofollow' class='url'>WarrenP</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-817"><time datetime="2012-09-29T13:55:47+00:00">September 29, 2012 at 13:55</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>That&#8217;s just ugly.  So is the Python3 change from print to print().</p>
<p>So I call that one a tie.</p>
<p>Warren</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="li-comment-697">
		<article id="comment-697" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/2e95343a1586f64084cff3e0b2680e9f?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">Roger</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-697"><time datetime="2012-09-24T02:30:16+00:00">September 24, 2012 at 02:30</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Hear hear &#8211; I&#8217;ve been making the same complaints about Go&#8217;s error handling on HN and not seeing an adequate response.  Perhaps the best evidence is hello world &#8211; I&#8217;ve yet to see a Go tutorial that checks the println.</p>
<p>Sometimes it is pointed out that exceptions can be done badly, which is correct.  For example Java&#8217;s checked exception make life miserable.  In C++ because exceptions are not ubiquitous they can&#8217;t be used safely. Lisp&#8217;s conditions are great.  Python&#8217;s exceptions are ubiquitous and function well.</p>
<p>Go had a real opportunity to get things right here, but they really screwed up.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=697#respond' onclick='return addComment.moveForm("comment-697", "697", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-2 highlander-comment" id="li-comment-702">
		<article id="comment-702" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/9598ae319be753b20f97f21ed10ca7ed?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://gravatar.com/laanwj' rel='external nofollow' class='url'>Wladimir</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-702"><time datetime="2012-09-24T06:14:21+00:00">September 24, 2012 at 06:14</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Indeed. This article exactly words my reason for not go-ing with go. I really love the concurrency features, and have been hoping for a fast, compiled language without C/C++&#8217;s crufty syntax and unsafeness, but without the inherent verbosity (WidgetManagerFactoryDispatchers) of Java. Go succeeds in this, but the 70&#8242;s error handling really spoiled it for me. </p>
<p>I know that exceptions can be abused, and aren&#8217;t suited for everything,  but going back to old school &#8220;check the return value of every statement&#8221;, is NOT a solution that I like. It is not the golden bullet for safe error handling either, for the reason mentioned: easy to ignore, but also because it breaks the flow of the program, either by prematurely &#8220;return&#8221;ing or nested &#8220;if&#8221;s(), making it harder to see the whole picture / sequence.</p>
<p>*Some* error handling verbosity (compared to say, Python) is fine, if it means that it is more explicit and statically checkable, but you shouldn&#8217;t be forced to Do Repeat Yourself every line. Go throws away the baby with the bath water.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=702#respond' onclick='return addComment.moveForm("comment-702", "702", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-731">
		<article id="comment-731" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/b778d6629c683e80b52c5de444414fa6?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://dowski.com' rel='external nofollow' class='url'>Christian Wyglendowski</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-731"><time datetime="2012-09-24T14:03:09+00:00">September 24, 2012 at 14:03</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Why call Go to a higher standard than Python here? I&#8217;ve never seen a Python &#8220;hello, world&#8221; example wrapped in try/except.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=731#respond' onclick='return addComment.moveForm("comment-731", "731", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-3 highlander-comment" id="li-comment-732">
		<article id="comment-732" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/1f5d1e6573fff27a72356d4c03c54142?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">Roger</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-732"><time datetime="2012-09-24T14:35:30+00:00">September 24, 2012 at 14:35</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>If python&#8217;s hello world has a problem then you would definitely know as a user.  With go you would never know. You do not have to catch every exception &#8211; they should not pass silently is all.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-1206">
		<article id="comment-1206" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">weberc2</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1206"><time datetime="2013-01-19T22:08:34+00:00">January 19, 2013 at 22:08</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>+1 to Roger&#8217;s response. Letting errors pass silently isn&#8217;t taking error handling very seriously, contrary to the claim of the Go-crowd (and I generally like Go).</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1 highlander-comment" id="li-comment-699">
		<article id="comment-699" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/ba833d8f28258a950818a516585326f7?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://gravatar.com/spin6lock' rel='external nofollow' class='url'>spin6lock</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-699"><time datetime="2012-09-24T05:04:12+00:00">September 24, 2012 at 05:04</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I don&#8217;t think exception would be a good idea, because it would make you think that error handling could be done by caller, which means other people usually. I agree with this article about C-Style error handling : <a href="http://www.250bpm.com/blog:4" rel="nofollow">http://www.250bpm.com/blog:4</a></p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=699#respond' onclick='return addComment.moveForm("comment-699", "699", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="post pingback">
		<p>Pingback: <a href='http://diegobasch.com/ill-give-mongodb-another-try-in-ten-years' rel='external nofollow' class='url'>I&#8217;ll Give MongoDB Another Try. In Ten Years. | Diego Basch&#039;s Blog</a></p>
	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="li-comment-707">
		<article id="comment-707" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/30df4f50cbd6d012057a185605c96d3e?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">Jonas</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-707"><time datetime="2012-09-24T07:13:41+00:00">September 24, 2012 at 07:13</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Try it anyway. I find the lack of exceptions refreshing.</p>
<p>If you study your examples closer, I think they in fact speak _against_ using exceptions in code. First, think about what error handling would look like with exceptions. Given your example above, code would stop. Abruptly. That&#8217;s not error handling. That&#8217;s just blowing things up.</p>
<p>Then think about when things blow up. Would they blow up from a 404? Would they blow up from a 302 redirect? Should they? It&#8217;s impossible to tell from your code. That makes for software that behaves very badly when errors happen (and they do).</p>
<p>If you want to handle your errors properly then, and spinkle your two line code with catchers and try blocks. That&#8217;ll do the trick. But then your code is far more unreadable then just checking return values. Error handling is hard. It doesn&#8217;t go away with some magic exception dust. I think the Go way is cleaner and more readable here.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=707#respond' onclick='return addComment.moveForm("comment-707", "707", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-2 highlander-comment" id="li-comment-1207">
		<article id="comment-1207" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">weberc2</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1207"><time datetime="2013-01-19T22:15:43+00:00">January 19, 2013 at 22:15</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>&gt; That’s not error handling. That’s just blowing things up.</p>
<p>As opposed to letting things continue which would be _literally_ blowing things up. The point is exceptions prevent catastrophic results even if they should have been handled. Not so with Go errors.</p>
<p>First of all, try/catch blocks are more readable, because you know at a glance that you&#8217;re handling an exceptional situation. You aren&#8217;t mixing error data with functional data. Secondly, with exceptions, you can wait to handle the error at the appropriate level, rather than having to explicitly return the error (continuing to mix functional and error data) at every level in between.</p>
<p>Error handling _is_ hard, but it doesn&#8217;t have to be Go-hard. Exceptions make error handling obvious, clean, and much easier than the Go-solution. Go is demonstrably messier and more difficult to read.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1207#respond' onclick='return addComment.moveForm("comment-1207", "1207", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 highlander-comment" id="li-comment-708">
		<article id="comment-708" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/302db24de03cf31217361bff44b3f168?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://gravatar.com/zopyx01' rel='external nofollow' class='url'>Andreas Jung</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-708"><time datetime="2012-09-24T07:23:44+00:00">September 24, 2012 at 07:23</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>The subject by itself is nonsense. A good developer has more than one programming language in its pocket and chooses the right one for each project. I have never seen a programming &#8220;giving&#8221; up a language in favor for another one. You may learn a new language as an alternative for the existing one&#8230;</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=708#respond' onclick='return addComment.moveForm("comment-708", "708", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-2 highlander-comment" id="li-comment-1208">
		<article id="comment-1208" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">weberc2</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1208"><time datetime="2013-01-19T22:18:15+00:00">January 19, 2013 at 22:18</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Unfortunately for your point, Go is marketed as competition to Python (I generally prefer Go, personally); however, if Go can&#8217;t successfully solve the same problem sets as Python, it&#8217;s unlikely to dissuade programmers. Therein, the subject is non-nonsense, and your reply looks silly.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1208#respond' onclick='return addComment.moveForm("comment-1208", "1208", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-1241">
		<article id="comment-1241" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/49e80d5fbb4ae645e9b2f0e601426b9f?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">Justin</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1241"><time datetime="2013-03-01T23:50:29+00:00">March 1, 2013 at 23:50</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Go was marketed as being a systems language (replacement for c/c++ etc. NOT python)</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1 highlander-comment" id="li-comment-713">
		<article id="comment-713" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/b3b903cebf8a159641b95248c414c2ef?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">Masklinn</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-713"><time datetime="2012-09-24T08:00:37+00:00">September 24, 2012 at 08:00</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>&gt; That problem is errors are handled in return values. </p>
<p>I&#8217;m of the opinion that it can work. And it does work. In languages which are not Go mostly. Two examples I know rather well being Haskell and Erlang.</p>
<p>First of all, it&#8217;s important that none of these two languages dogmatically shuns exceptions the way Go does (quite the opposite for Erlang, they&#8217;re used a lot&#8230; just in interesting ways). Now for the &#8220;erroneous returns&#8221;</p>
<p>* Haskell uses tagged unions, the closest to what Go does is  Either a b, with two constructors Left a (for errors) and Right b (for values). Haskell has a lot of tools in its box to make this sort of error handling pain-free:</p>
<p>  &#8211; the compiler can check for match completeness (that both correct and error cases are handled)<br />
  &#8211; monadic operations allow using the &#8220;correct&#8221; value and letting the error go through without significant increases in verbosity or complexity (`fmap somefunc eitherValue` will apply `somefunc` to a `Right`, but will return a `Left` without touching it)</p>
<p>* Erlang is much closer to go (or more precisely go is much closer to Erlang): Erlang functions tend to use tuples to return values an errors, explicitly tagging these tuples with the atoms `ok` and `error` e.g. {ok, Value} and {error, Reason}. Now this of course allows for case-based unpacking of both (as in Haskell), but it also allows for very terse *assertion of correct return*: one can use the assignment (actually a match) `{ok, Value} = some_call()` to get the returned Value out *and turn any error return into an exception*. Now of course, as in Go one can always ignore the return value altogether and not check it (this is common for IO functions which don&#8217;t return an actual value). But all in all, I found that it works rather well, it&#8217;s terse enough, quite clean and very explicit.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=713#respond' onclick='return addComment.moveForm("comment-713", "713", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment byuser comment-author-ubershmekel bypostauthor odd alt depth-2 highlander-comment" id="li-comment-744">
		<article id="comment-744" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/48aae91146c6aa266ff2c9b3d1ab5d8b?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">ubershmekel</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-744"><time datetime="2012-09-24T22:12:57+00:00">September 24, 2012 at 22:12</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Explicit = fully and clearly expressed or demonstrated; leaving nothing merely implied.</p>
<p>Ignoring return values is something we do all the time and I don&#8217;t find it very explicit when errors are ignored as return values. But then again I&#8217;m not familiar with Erlang or Haskell.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=744#respond' onclick='return addComment.moveForm("comment-744", "744", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even depth-2 highlander-comment" id="li-comment-757">
		<article id="comment-757" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/b5d85b1d5ee0140398a2bc929362b568?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">CHF</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-757"><time datetime="2012-09-25T13:27:48+00:00">September 25, 2012 at 13:27</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I forgot to mention the matching scheme when discussing Erlang and exceptions earlier, but it&#8217;s an unusual technique that I think works well when a function might or might not yield a value and either way it&#8217;s not exceptional.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=757#respond' onclick='return addComment.moveForm("comment-757", "757", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 highlander-comment" id="li-comment-714">
		<article id="comment-714" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/b5d85b1d5ee0140398a2bc929362b568?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">CHF</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-714"><time datetime="2012-09-24T08:01:49+00:00">September 24, 2012 at 08:01</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>CLU, anciently, and Erlang both have exception-handling systems that work well. CLU has typed exceptions without the Java pain (because unhandled named exceptions are converted to a &#8220;failure&#8221; exception). Erlang is highly concurrent and has been used for some serious business.</p>
<p>Joe Armstrong&#8217;s thesis<br />
[http://pubftp0.availo.se/pub/FreeBSD/distfiles/erlang-doc/r13b01/armstrong_thesis_2003.pdf] describes how to build fault-tolerant software in Erlang. He highlights the &#8220;fail fast&#8221; approach, and also explains why you should have few exception handlers in your program. One style used by Erlang is to distinguish exceptional things (actual or probable errors) from normal results. For example, a table search might have two variants, one that looks for something that might or might not be there (error return), and one that must find something that should certainly be there (because logic elsewhere was supposed to install it in the table) and raises an exception if not found.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=714#respond' onclick='return addComment.moveForm("comment-714", "714", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment byuser comment-author-charlieflowers even thread-odd thread-alt depth-1 highlander-comment" id="li-comment-716">
		<article id="comment-716" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/9916002af7d33da3db56a4d1b3b74ddf?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">charlieflowers</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-716"><time datetime="2012-09-24T10:39:07+00:00">September 24, 2012 at 10:39</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I agree completely! In fact, I said this recently myself: <a href="http://news.ycombinator.com/item?id=4306501" rel="nofollow">http://news.ycombinator.com/item?id=4306501</a></p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=716#respond' onclick='return addComment.moveForm("comment-716", "716", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 highlander-comment" id="li-comment-727">
		<article id="comment-727" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/46c097e65f2b1efd1630de004f61582d?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://gravatar.com/eldarkin' rel='external nofollow' class='url'>Eldar Insafutdinov</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-727"><time datetime="2012-09-24T13:25:05+00:00">September 24, 2012 at 13:25</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Hi! You should check D programming language out. It has all the benefits of Go(compiled, statically typed, nice to use, light weight threads &#8211; Fibers) and offers a lot more &#8211; powerful metaprogramming with templates and compile time function evaluation(CTFE), and you actually can go to the very bottom with pointer arithmetics and inline assembly.</p>
<p>And there is a very promising Vibe web framework. It&#8217;s in its early days, but it already provides a lot of awesome features that take advantage of the goodness of the D &#8211; for example, thanks to the CTFE html templates are compiled to native code at compile time so they perform even faster than serving static files as it is literally writing stuff directly from RAM.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=727#respond' onclick='return addComment.moveForm("comment-727", "727", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-2 highlander-comment" id="li-comment-728">
		<article id="comment-728" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/02ea6cc76baf9c66cb24e8fc1b7bd015?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">J. Lemire</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-728"><time datetime="2012-09-24T13:51:59+00:00">September 24, 2012 at 13:51</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>But language D has exceptions &#8230;<br />
Anyway I&#8217;m going to take a look.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=728#respond' onclick='return addComment.moveForm("comment-728", "728", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-730">
		<article id="comment-730" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/46c097e65f2b1efd1630de004f61582d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://gravatar.com/eldarkin' rel='external nofollow' class='url'>Eldar Insafutdinov</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-730"><time datetime="2012-09-24T13:57:22+00:00">September 24, 2012 at 13:57</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Yes sure, and it is better to use exceptions for error handling. You don&#8217;t clutter your code with error checking and only capture errors where it matters.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1 highlander-comment" id="li-comment-733">
		<article id="comment-733" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/6b34a2a81515583dc95e5c0809db06bb?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://www.craig-wood.com/nick/' rel='external nofollow' class='url'>Nick Craig-Wood</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-733"><time datetime="2012-09-24T15:04:18+00:00">September 24, 2012 at 15:04</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I&#8217;ve been learning Go after a decade of Python programming (and before that a decade of C++ and C!)</p>
<p>The error handling does feel like a step backwards to C.  However what it does do is make you, the programmer, really think about what should happen for each possible error.</p>
<p>With big Python programs you tend not to really know what exceptions can be thrown, and you often have to fix them adding a catch for this exception here and that one there after some time in production.  Go makes you do that thinking up front.</p>
<p>As a Python programmer I find it disappointing to see the result of fmt.Println or more importantly defer f.Close() not checked for errors in most Go programs.  It would be nice if the Go compiler enforced checking the errors, or at least making sure you are deliberately ignoring them with the &#8216;_&#8217; identifier.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=733#respond' onclick='return addComment.moveForm("comment-733", "733", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-735">
		<article id="comment-735" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i1.wp.com/graph.facebook.com/638022467/picture?q=type%3Dlarge%26_md5%3Da5a21ca103471bf54fc00bb9281a20d8&#038;resize=39%2C39' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://www.facebook.com/levi.cook2' rel='external nofollow' class='url'>Levi Cook</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-735"><time datetime="2012-09-24T15:35:14+00:00">September 24, 2012 at 15:35</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>&#8220;I find it disappointing to see the result of fmt.Println or more importantly defer f.Close() not checked for errors in most Go programs.&#8221;</p>
<p>I read a lot of go code, and am not seeing this. There&#8217;s a chance I&#8217;m simply glossing over it. Where are you seeing it? Standard libs? Public repos?</p>
<p>Citations appreciated, mostly interested in improving the status quo. Not interested in casting doubt or aspersions <span class='wp-smiley emoji emoji-smile' title=':)'>:)</span></p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=735#respond' onclick='return addComment.moveForm("comment-735", "735", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-3 highlander-comment" id="li-comment-758">
		<article id="comment-758" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/6b34a2a81515583dc95e5c0809db06bb?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://www.craig-wood.com/nick/' rel='external nofollow' class='url'>Nick Craig-Wood</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-758"><time datetime="2012-09-25T13:38:46+00:00">September 25, 2012 at 13:38</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I think the standard library is OK as it was written by a set of master programmers (I did check!).</p>
<p>If you look at Effective Go for example, you&#8217;ll see `defer f.Close()` being advocated which ignores the error on the `Close()` method</p>
<p><a href="http://golang.org/doc/effective_go.html#defer" rel="nofollow">http://golang.org/doc/effective_go.html#defer</a></p>
<p>Now most of the time it doesn&#8217;t matter if you don&#8217;t check for errors on `Close`, but if `f` happens to be a socket or pipe that you are writing to then it can give errors at that point.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-761">
		<article id="comment-761" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/2e95343a1586f64084cff3e0b2680e9f?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">Roger</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-761"><time datetime="2012-09-25T15:45:50+00:00">September 25, 2012 at 15:45</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>In reply to your later comment, close won&#8217;t only fail on sockets and pipes &#8211; it can also fail for regular files and is often a point at which disk full errors are detected.  The man page for close even has a section about how not checking the result is a common programming error.  Python developers automatically get close checked for them due to exceptions while Go developers have to be extremely diligent and often aren&#8217;t.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=761#respond' onclick='return addComment.moveForm("comment-761", "761", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even depth-2 highlander-comment" id="li-comment-1209">
		<article id="comment-1209" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">weberc2</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1209"><time datetime="2013-01-19T22:23:27+00:00">January 19, 2013 at 22:23</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>&gt; However what it does do is make you, the programmer, really think about what should happen for each possible error.</p>
<p>Exceptions do that (they make it obvious if you aren&#8217;t thinking about every error!), and they don&#8217;t let your program continue when an error is unhandled. Furthermore, Go forces you to pass and handle errors along with functional data, when the two can be cleanly handled separately.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1209#respond' onclick='return addComment.moveForm("comment-1209", "1209", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 highlander-comment" id="li-comment-741">
		<article id="comment-741" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i1.wp.com/graph.facebook.com/562402762/picture?q=type%3Dlarge%26_md5%3D9e5f827892523ff7a319a1687be4b4dd&#038;resize=68%2C68' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://www.facebook.com/profile.php?id=562402762' rel='external nofollow' class='url'>Jim Bob</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-741"><time datetime="2012-09-24T17:47:32+00:00">September 24, 2012 at 17:47</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>My major complaint with go is how unused variables/packages always throw compiler errors that you can&#8217;t bypass and an utter inflexibility among developers to consider giving a compiler flag for these debugging purposes (even something obnoxious like `&#8211;unused_generates_warning_not_error`).  See:</p>
<p><a href="http://golang.org/doc/go_faq.html#unused_variables_and_imports" rel="nofollow">http://golang.org/doc/go_faq.html#unused_variables_and_imports</a><br />
<a href="https://groups.google.com/forum/#!topic/golang-nuts/OBsCksYHPG4/discussion" rel="nofollow">https://groups.google.com/forum/#!topic/golang-nuts/OBsCksYHPG4/discussion</a></p>
<p>I like the fact that unused variables/packages throw an error if declared/imported but not used.  However, if every time I comment out a section/function call during debugging, I have to make sure that I comment out any imports/declarations before rerunning its a needless waste.  Or worse they suggest in the FAQ, to write no-ops statements like `_ := some_package.Function` to silently disable the compiler error.  That suggestion is absolutely the wrong solution, as you can easily forget to remove the no-op statement which can permanently disable the very sane check.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=741#respond' onclick='return addComment.moveForm("comment-741", "741", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1 highlander-comment" id="li-comment-742">
		<article id="comment-742" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/d9eb1ccbe78091888a570dde5d1d715f?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">Olivier</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-742"><time datetime="2012-09-24T19:30:52+00:00">September 24, 2012 at 19:30</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I read a lot about Go. There are lots of good ideas in Go, and the other languages should get some inspiration from Go.<br />
At first, the lack of exceptions and generics really put me off. But I still did the full tutorial, I tried to write some code.<br />
Then, I read more on the opinions of the people who created Go, and I got more insight on how they don&#8217;t miss such basic features of modern languages.</p>
<p>Unfortunately, it was not enough. This cannot work for me.<br />
When something unexpected happens in my code, it&#8217;s mandatory for me to have the error unwind until it gets to some UI where the stacktrace can be shown to the user, without crashing all the program. Exceptions work for this; error codes just don&#8217;t.</p>
<p>About generics, well without them you have to cast every item out of any collection you use. Even Go had to give in and offers a generic array and hash table, else it would be so annoying.<br />
Congrats anyway for getting as far as one language can go without proper support for genericity.</p>
<p>So, no Go.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=742#respond' onclick='return addComment.moveForm("comment-742", "742", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 highlander-comment" id="li-comment-745">
		<article id="comment-745" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/d50a278a1fcff4962144dc186f17af4f?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://gravatar.com/gotxe' rel='external nofollow' class='url'>gothy</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-745"><time datetime="2012-09-24T23:06:03+00:00">September 24, 2012 at 23:06</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I&#8217;m also coming from Python crowd, making a second attempt to like golang. Exploring posts dedicated to golang I found this one about exceptions in Go<br />
<a href="http://dave.cheney.net/2012/01/18/why-go-gets-exceptions-right" rel="nofollow">http://dave.cheney.net/2012/01/18/why-go-gets-exceptions-right</a><br />
There&#8217;re some good points. Although I think\hope that exceptions (or at least !important errors) will be added to Go at some point.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=745#respond' onclick='return addComment.moveForm("comment-745", "745", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-2 highlander-comment" id="li-comment-1210">
		<article id="comment-1210" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">weberc2</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1210"><time datetime="2013-01-19T22:28:52+00:00">January 19, 2013 at 22:28</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I actually read that article before this one, and no, it doesn&#8217;t make any good points. It makes a lot of unsupported or illogical arguments (&#8220;exceptions are bad because sometimes people don&#8217;t use them properly&#8221;&#8211;go doesn&#8217;t prevent this either, &#8220;exceptions pass the error up the call stack&#8221;&#8211;where it should be handled, &#8220;go takes error handling seriously&#8221;&#8211;like letting an errant program continue silently toward a cryptic panic or incorrect result, &#8220;some languages don&#8217;t do exceptions well&#8221;&#8211;not a criticism of exceptions, but of poor implementation).</p>
<p>I have yet to see a valid argument against exceptions.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1210#respond' onclick='return addComment.moveForm("comment-1210", "1210", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-1216">
		<article id="comment-1216" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/02ea6cc76baf9c66cb24e8fc1b7bd015?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">J Lemire</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1216"><time datetime="2013-01-19T22:55:58+00:00">January 19, 2013 at 22:55</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>here a valid argument against exceptions:<br />
There is nothing can you do with an exception, except print a nice error message and exit. And there is nothing can you do with an exception that you cannot do with exceptionless language.</p>
<p>Example: during a long computation, you reach a &#8220;Division by zero&#8221; condition, so what can you do with an exception system &#8230; nothing. In fact your code is cleaner and simpler if you check before the division.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even depth-3 highlander-comment" id="li-comment-1249">
		<article id="comment-1249" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/b08f49c6044542632cb04376a3b1a74a?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">guest</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1249"><time datetime="2013-04-30T23:23:34+00:00">April 30, 2013 at 23:23</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Unfortunately, &#8220;unsupported or illogical arguments&#8221; seem to be the BIGGEST single failure of the Go community.  Take, for example, these discussions:</p>
<p><a href="https://groups.google.com/forum/?fromgroups=#!topicsearchin/golang-nuts/group:golang-nuts$20AND$20subject:Decimal/golang-nuts/1w9daeTwXeM" rel="nofollow">https://groups.google.com/forum/?fromgroups=#!topicsearchin/golang-nuts/group:golang-nuts$20AND$20subject:Decimal/golang-nuts/1w9daeTwXeM</a></p>
<p><a href="https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/KH9KysfS5HQ" rel="nofollow">https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/KH9KysfS5HQ</a></p>
<p>Childish arguments, beating worthwhile contributors down.  The guy was just trying to make a library that would allow him to do some handy physics expressions, as he can do in python already.</p>
<p>And there are many repeats of those discussions, with similarly uninformed, hateful beating down of would-be users/contributors.</p>
<p>There ARE some nice things about Go.  However, is this REALLY the language and community that you want to be betting your business/career on?  Not me.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="li-comment-747">
		<article id="comment-747" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/b06f467e93b8430ba3db0fb7f92bb569?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">GMc</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-747"><time datetime="2012-09-25T02:25:19+00:00">September 25, 2012 at 02:25</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>This is a really bland post. The poster won&#8217;t use Go because of some admittedly presumptive objections about Go&#8217;s error handling. In preference to Go, the poster prefers Python, a much slower scripting language that has exceptions. Fine. If exceptions are that exceptional, stick with Python. Python&#8217;s great. As for me, I just finished my last two Web projects with Go. These were projects that normally would have called for Django, my previous go-to Web framework. For one project I did use the mgo mongo driver, and for both projects I used the gocheck testing library. Other than those two &#8220;outside&#8221; packages, the projects were built entirely with Go. No Django, no virtualenv, no pile of pip packages. Just Go. For templating I used Go&#8217;s html/template, a standard library package. And the apps are fast.</p>
<p>Still, I can see that Go isn&#8217;t for everyone. It would probably help to have some reasonable familiarity with C in order to appreciate some of Go&#8217;s subtler points. And if you&#8217;re not interested in concurrent programming &#8212; that is, you&#8217;re building fairly straightforward Web apps satisfied by Django&#8217;s (or Rails&#8217;) gotcha-covered stack or Flask&#8217;s (or Sinatra&#8217;s) simple file-piles, for Nodejs&#8217;s Javascriptcentricity &#8212; then you&#8217;ll be less likely to appreciate the toys found on one of Go&#8217;s cooler playgrounds. And why would you? But this is where the problem comes up, because Go isn&#8217;t simply a drop-in replacement for Python or Ruby or whatever. It&#8217;s a different and very powerful tool that can, absolutely, fly around in Pythonspace, but which also can do some things that, quite frankly, Python or Ruby can&#8217;t do nearly as fast or as well, exceptions be damned. If you&#8217;re usage doesn&#8217;t call for those things, then you&#8217;re missing nothing.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=747#respond' onclick='return addComment.moveForm("comment-747", "747", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment byuser comment-author-ubershmekel bypostauthor even depth-2 highlander-comment" id="li-comment-753">
		<article id="comment-753" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/48aae91146c6aa266ff2c9b3d1ab5d8b?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">ubershmekel</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-753"><time datetime="2012-09-25T08:56:34+00:00">September 25, 2012 at 08:56</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>5 years of my life I&#8217;d spent writing C for a living. Both Go and Python are different tools for different jobs. I think for me, Go could have taken care of a lot more of the problems I use Python for if only it had embraced a different error handling model. That&#8217;s all.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=753#respond' onclick='return addComment.moveForm("comment-753", "753", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-1211">
		<article id="comment-1211" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">weberc2</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1211"><time datetime="2013-01-19T22:35:00+00:00">January 19, 2013 at 22:35</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I love Go. I think much of it is great; however, I&#8217;m not going to pretend that letting an errant program chug along silently is a good idea. Go error handling is a half baked idea. The arguments against it are based on specific implementations, improper uses, or some misguided idea that mixing error and regular data several times per function is somehow a good idea.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1211#respond' onclick='return addComment.moveForm("comment-1211", "1211", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1 highlander-comment" id="li-comment-750">
		<article id="comment-750" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/b4ba45154845c24ea410f172325e3051?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://gravatar.com/pedrogfrancisco' rel='external nofollow' class='url'>Pedro F.</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-750"><time datetime="2012-09-25T08:40:23+00:00">September 25, 2012 at 08:40</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I thought twice about leaving here a comment since I don&#8217;t know Python nor Go. I won&#8217;t defend either&#8217;s error handling but I wish to call your attention for the third option of handling errors: <a href="http://en.wikipedia.org/wiki/Design_by_contract" rel="nofollow">Design by Contract</a> (DbC). For me, what&#8217;s more interesting about DbC is this: you can either say your program is using DbC or you can say your program isn&#8217;t. There is no way you can escape it once you are in the mindset of it, you can&#8217;t fool yourself saying &#8216;I&#8217;ll patch this later&#8217;. Also, note Eiffel language is the one who truly implements DbC. It seems all libraries implementing it for other languages fail at some point to convey the thoughtfulness of Eiffel&#8217;s DbC.<br />
P.S.: FYI, I&#8217;ve heard Eiffel&#8217;s support for multi-threading is safe but not very efficient internally.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=750#respond' onclick='return addComment.moveForm("comment-750", "750", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="li-comment-775">
		<article id="comment-775" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/aa73a479cf5cec03df7f1b416b5e7a25?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://www.cl.cam.ac.uk/~mgk25/' rel='external nofollow' class='url'>Markus Kuhn</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-775"><time datetime="2012-09-26T09:41:56+00:00">September 26, 2012 at 09:41</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Recall the &#8220;Ariane 5 flight 501 failure report&#8221;, regarding a very big rocket that exploded because of an Ada exception (overflow in float64-&gt;int16 conversion) that developpers has forgotten to handle. As a result, a navigation computer sent a stack trace to an engine controller, which interpreted the gibberish as a command to fully deflect the nozzles of the main engine and solid-fuel booser rockets, with catastrophic results.</p>
<p><a href="http://www.di.unito.it/~damiani/ariane5rep.html" rel="nofollow">http://www.di.unito.it/~damiani/ariane5rep.html</a></p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=775#respond' onclick='return addComment.moveForm("comment-775", "775", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-2 highlander-comment" id="li-comment-789">
		<article id="comment-789" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/83f49a8da1dc030d9f671f521839aecc?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">zorg</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-789"><time datetime="2012-09-27T08:07:02+00:00">September 27, 2012 at 08:07</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>couldn&#8217;t you forget to check the returned error value in Go, too ?</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=789#respond' onclick='return addComment.moveForm("comment-789", "789", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-1212">
		<article id="comment-1212" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">weberc2</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1212"><time datetime="2013-01-19T22:37:44+00:00">January 19, 2013 at 22:37</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Yes, and Go errors are much more likely to go unnoticed because they can continue chugging along toward an incorrect result. Moreover, Ada can compile without exception-handling if you really believe silent failure is a better alternative.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment byuser comment-author-ubershmekel bypostauthor even depth-2 highlander-comment" id="li-comment-819">
		<article id="comment-819" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/48aae91146c6aa266ff2c9b3d1ab5d8b?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">ubershmekel</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-819"><time datetime="2012-09-29T14:11:56+00:00">September 29, 2012 at 14:11</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Both exceptions and error codes can lead to programmatic tragedies. I liked how yosefk put it: <a href="http://www.yosefk.com/blog/error-codes-vs-exceptions-critical-code-vs-typical-code.html" rel="nofollow">http://www.yosefk.com/blog/error-codes-vs-exceptions-critical-code-vs-typical-code.html</a></p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=819#respond' onclick='return addComment.moveForm("comment-819", "819", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-1213">
		<article id="comment-1213" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">weberc2</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1213"><time datetime="2013-01-19T22:39:42+00:00">January 19, 2013 at 22:39</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Feel free to explain how failing to handle this error in Go would have prevented the rocket from crashing. No, exceptions don&#8217;t prevent all mistakes, but they go a lot farther toward preventing them (and producing clearer code, and making errors more obvious, etc) than Go&#8217;s solution.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1213#respond' onclick='return addComment.moveForm("comment-1213", "1213", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-3 highlander-comment" id="li-comment-1267">
		<article id="comment-1267" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i1.wp.com/a0.twimg.com/sticky/default_profile_images/default_profile_3_normal.png?resize=39%2C39' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://twitter.com/storm14k' rel='external nofollow' class='url'>PhilH (@storm14k)</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1267"><time datetime="2013-08-18T15:33:54+00:00">August 18, 2013 at 15:33</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Off the top of my head I&#8217;d say what if the code throwing the exception wasn&#8217;t mission critical and could have thrown out bad data that would be corrected on a future iteration. The data might be checked for tolerance somewhere else and discarded before its used. Letting the error go unhandled in Go might have saved the rocket. This might be what the Go authors mean about thinking about errors though they said you shouldn&#8217;t let one go. Maybe you should check your data instead of counting on an exception somewhere else to bail you out.</p>
<p>I think this example really makes the case for Go. In fact for the first time I actually understand the argument of exceptions being lazy. Don&#8217;t count on exception handling to validate data. If you validate then a missed error doesn&#8217;t hurt. But a missed exception can kill your program in a scenario where there is no chance for a restart. Does this make for more code/&#8221;ugly&#8221; code? It might. But its lazy to think &#8220;well if I miss some of this at least the app will crash&#8221; which seems to be the mentality here.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 highlander-comment" id="li-comment-814">
		<article id="comment-814" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/06711b2c5a9146ca09f52d32a07de8e9?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://gravatar.com/mortdeus' rel='external nofollow' class='url'>mortdeus</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-814"><time datetime="2012-09-29T12:39:45+00:00">September 29, 2012 at 12:39</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>OMGERD!!!</p>
<p>_ := mygergaderkaderk()</p>
<p>1.) You dont have to handle errors. Its smart too (consider the fact that your returning an error interface and thus can create custom Errors however you want.</p>
<p>If err := fml.ThisFuncIsAWasteOfMyLifePleaseGiveMeMoarTryCatchPLZ(); err != nil {<br />
return err<br />
}</p>
<p>is seriouly the reason why you dont want to use Go, then&#8230;. We dont care. If you are going to troll Go, atleast find a good reason. (good luck on that)</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=814#respond' onclick='return addComment.moveForm("comment-814", "814", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1 highlander-comment" id="li-comment-831">
		<article id="comment-831" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i2.wp.com/a0.twimg.com/profile_images/1199033651/image_normal.jpg?resize=68%2C68' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://twitter.com/samueljohn_de' rel='external nofollow' class='url'>Samuel John (@samueljohn_de)</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-831"><time datetime="2012-10-03T14:50:00+00:00">October 3, 2012 at 14:50</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I agree to to this post. Exception handling is flexible and beautiful.<br />
Return-value codes? No-go.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=831#respond' onclick='return addComment.moveForm("comment-831", "831", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 highlander-comment" id="li-comment-867">
		<article id="comment-867" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/f6a27aba9787f5a4daad23d561a61808?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://gravatar.com/craniumfr' rel='external nofollow' class='url'>Cranium</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-867"><time datetime="2012-10-15T08:49:54+00:00">October 15, 2012 at 08:49</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>How about Scala ? It&#8217;s a nice OO language with full functional paradigm (important for concurrency) running on JVM. A course is currently going on Coursera.org with its creator Martin Odersky presenting it. A must view !</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=867#respond' onclick='return addComment.moveForm("comment-867", "867", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1 highlander-comment" id="li-comment-1126">
		<article id="comment-1126" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/1d180d9e0368472144840049b3d79448?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://picheta.me' rel='external nofollow' class='url'>Dominik Picheta</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1126"><time datetime="2012-10-31T14:16:56+00:00">October 31, 2012 at 14:16</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Take a look at Nimrod (<a href="http://nimrod-code.org/" rel="nofollow">http://nimrod-code.org/</a>), the syntax is far better than Go&#8217;s and is quite similar to Python. And you get exceptions of course. There are many other great features like macros, a soft real-time GC and more.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1126#respond' onclick='return addComment.moveForm("comment-1126", "1126", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment byuser comment-author-ubershmekel bypostauthor odd alt depth-2 highlander-comment" id="li-comment-1141">
		<article id="comment-1141" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/48aae91146c6aa266ff2c9b3d1ab5d8b?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">ubershmekel</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1141"><time datetime="2012-11-13T09:39:35+00:00">November 13, 2012 at 09:39</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>The website is butt-ugly though I&#8217;ll try to look at the language in the near future. Thanks!</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1141#respond' onclick='return addComment.moveForm("comment-1141", "1141", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1 highlander-comment" id="li-comment-1139">
		<article id="comment-1139" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/45ebc247a60af15edfdd093a0ff8d8c0?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">stevewang</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1139"><time datetime="2012-11-13T07:49:07+00:00">November 13, 2012 at 07:49</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Urgly expcetion handling is one of the most reasons that make me dislike python. When progamming in python, I always worry that some unexcepted exceptions will pop up and  startle me. So I make up my mind to stay away from python as possible as I can.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1139#respond' onclick='return addComment.moveForm("comment-1139", "1139", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment byuser comment-author-ubershmekel bypostauthor odd alt depth-2 highlander-comment" id="li-comment-1140">
		<article id="comment-1140" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/48aae91146c6aa266ff2c9b3d1ab5d8b?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">ubershmekel</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1140"><time datetime="2012-11-13T09:10:15+00:00">November 13, 2012 at 09:10</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>If exceptions startle you then what are your feelings toward ignored errors that cause sneaky bugs which require debugging the entire application codebase?</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1140#respond' onclick='return addComment.moveForm("comment-1140", "1140", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-3 highlander-comment" id="li-comment-1142">
		<article id="comment-1142" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/45ebc247a60af15edfdd093a0ff8d8c0?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">stevewang</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1142"><time datetime="2012-11-13T09:59:47+00:00">November 13, 2012 at 09:59</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>By the word &#8220;startle&#8221; I mean I find it hard to expect what exceptions a function will throw, because the children functions called by this function also throw exceptions. But by checking the returned errors, every thing is under my control.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-1215">
		<article id="comment-1215" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">weberc2</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1215"><time datetime="2013-01-19T22:44:05+00:00">January 19, 2013 at 22:44</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>@stevewang Java requires functions to explicitly state the exceptions they might throw. How often do you check fmt.Println for errors? Before this conversation, I didn&#8217;t even know it could produce errors.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even depth-2 highlander-comment" id="li-comment-1214">
		<article id="comment-1214" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">weberc2</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1214"><time datetime="2013-01-19T22:42:27+00:00">January 19, 2013 at 22:42</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Yeah, ignorance is bliss. Go won&#8217;t tell you when you hit an error unless it leads to a panic. With Python at least you&#8217;ll find out when you hit an error. Exceptions make it a lot harder to make errant computations.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1214#respond' onclick='return addComment.moveForm("comment-1214", "1214", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="li-comment-1242">
		<article id="comment-1242" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/49e80d5fbb4ae645e9b2f0e601426b9f?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">Justin</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1242"><time datetime="2013-03-02T00:12:31+00:00">March 2, 2013 at 00:12</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I started using Go about a year ago, for a hobby, and it took me writing a few things to get comfortable with it&#8217;s differences, like error handling. Fast forward a year and we&#8217;re now using Go in production at work. We are diligent on our error checking, and our code doesn&#8217;t look scary at all, and even cleaner looking than a try/catch|except with numerous catch|except lines.</p>
<p>We&#8217;ve just finished an application that does some fairly heavy concurrency. We&#8217;ve had no problems getting errors from our concurrent code (using channels) back up to the main logic. Best thing is that the code, for being so concurrent, isn&#8217;t intimidating.</p>
<p>We also use lots of Python as well. Go wasn&#8217;t a `replacement` for use, just a different tool we can leverage; we use it where it makes sense.</p>
<p>Write some real code in Go, then base your opinion on the experience.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1242#respond' onclick='return addComment.moveForm("comment-1242", "1242", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1 highlander-comment" id="li-comment-1244">
		<article id="comment-1244" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/780a06ae58a5a55d0e608a1e3a85f656?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">Brian</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1244"><time datetime="2013-03-22T20:18:01+00:00">March 22, 2013 at 20:18</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>This thread is well-aged, but I&#8217;d like to add something.  When I started on Go, the reason I fell in love with its error handling style is because of the blatant exception abuse I see in C# every day.  For me, it&#8217;s not &#8220;how SHOULD exceptions be used&#8221; but &#8220;how do they end up being used in many code bases.&#8221;  We can blame bad programmers for these issues, but the fact they happen so often makes me feel we can consider a different approach.  Now, my real-world-hell examples:</p>
<p>- Invalid form input from web layer to BLL-type layer. Validation fails, programmer throws exception.  WTF? How do I know this thing will blow up my web app on bad input?  Sometimes VS intellisense reminds me, often that&#8217;s not documented. (BTW, I hate VS, but that&#8217;s another rant).</p>
<p>- Some smartass decides they need to handle exceptions.  Every layer of a data call (Web -&gt; BLL -&gt; Data) has a try/catch/finally in it.  First, this is verbose coding.  Second, if you don&#8217;t know how to properly throw the exception up, you kill the stacktrace.  Third, if you don&#8217;t throw the exception we either hope you returned some meaningful value and logged it, or we&#8217;re really screwed.  Fourth, when I call something that returns a data value or ID or whatever, I have to now check if that ID is valid.  So I put some if (model != null) or or if (id &gt; 0) and we&#8217;re doing it Go style anyway.</p>
<p>Again, I know these practices may not be the intent of C# design, but they happen. A lot.  I have to litter my high-level code with try/catch then decide what each exception means to me, which isn&#8217;t easy.  </p>
<p>So I found Go and saw that it prevents this bullshit.  I love it.  I&#8217;m hearing the arguments here and I appreciate their validity, but I think some of this is people just don&#8217;t want to change.</p>
<p>One more thing:  to the complaint that Go uses {}.  Please.  Python&#8217;s tabbing seems so cool and clean until you have to share code with someone who uses a different tab/space scheme, platform, copying from the web or something.  Not so fun then.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1244#respond' onclick='return addComment.moveForm("comment-1244", "1244", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="li-comment-1251">
		<article id="comment-1251" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/f2788e8d7b2362a869fd4e73868157c6?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://gravatar.com/peterpetrakis' rel='external nofollow' class='url'>Peter Petrakis</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1251"><time datetime="2013-05-21T14:02:48+00:00">May 21, 2013 at 14:02</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>You might want to try:<br />
<a href="http://blog.golang.org/2011/07/error-handling-and-go.html" rel="nofollow">http://blog.golang.org/2011/07/error-handling-and-go.html</a></p>
<p>Which looks a lot better than the general try catch (maybe) that goes around. Go is funneling you towards this style of error handling, not the 1970 C style rut which you immediately fell into.</p>
<p>I&#8217;ve had it with runtime languages who&#8217;s debugging technique is &#8220;write it correctly the first time&#8221;. There are huge learning curves  associating with jumping into these code bases mid project, debugging tools haven&#8217;t kept up with these high level languages or at least not enough people are using them, and then there&#8217;s the joke of &#8220;writing unit tests to test your runtime&#8221; which get turned off mid project because they just don&#8217;t work anymore.</p>
<p>Yeah, I&#8217;d rather take some more time at the beginning thinking about how I want the error framework to work out than try/catch until the end of time.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1251#respond' onclick='return addComment.moveForm("comment-1251", "1251", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment byuser comment-author-ubershmekel bypostauthor even depth-2 highlander-comment" id="li-comment-1252">
		<article id="comment-1252" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/48aae91146c6aa266ff2c9b3d1ab5d8b?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">ubershmekel</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1252"><time datetime="2013-05-21T14:16:37+00:00">May 21, 2013 at 14:16</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I quote and reply to that link in this article. Specifically the subtitle &#8220;Simplifying repetitive error handling&#8221; just shows another example of repetitive error handling. It&#8217;s just that every error-returning function has to be wrapped in &#8220;if&#8221; and &#8220;return&#8221; if you want your code to be reliable. Yet the wrapping isn&#8217;t even mandatory in some cases.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1252#respond' onclick='return addComment.moveForm("comment-1252", "1252", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment odd alt depth-3 highlander-comment" id="li-comment-1253">
		<article id="comment-1253" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/f2788e8d7b2362a869fd4e73868157c6?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://gravatar.com/peterpetrakis' rel='external nofollow' class='url'>Peter Petrakis</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1253"><time datetime="2013-05-21T15:12:08+00:00">May 21, 2013 at 15:12</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I&#8217;m accustomed to error handling like this:<br />
<a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/drivers/scsi/scsi_error.c#n239" rel="nofollow">https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/drivers/scsi/scsi_error.c#n239</a></p>
<p> I also am a rubyist and am forced to code python.</p>
<p>In this example, handling the protocol with exceptions would be silly, because the events are not exceptional. Exceptions are abused on a regular basis. I&#8217;ve lost count of how many times I&#8217;ve made small try blocks, caught only the general exception, and addressed the most likely error. It&#8217;s not because I&#8217;m lazy, it&#8217;s because the documentation isn&#8217;t efficient (or poor) combined with the cost of testing the additional exception. e.g. the curse of interpreted code, did I even code my error handling correctly?</p>
<p>How about exception handling like this?</p>
<p>    # Write the adminsettings<br />
    connection = MySQLdb.connect(user=user, host=private_address, passwd=password, db=database)<br />
    cursor = connection.cursor()<br />
    do_install = None<br />
    try:<br />
      # Try to create the &#8220;mediawiki_juju_setup&#8221; table and if its already there, skip some things<br />
      cursor.execute(&#8220;create table mediawiki_juju_setup (id int)&#8221;)<br />
      do_install = True<br />
    except Exception as e:<br />
      # If we can&#8217;t create that table, it has likely already been initialized<br />
      print &#8216;Could not create mediawiki_juju_setup: &#8216; + str(e)<br />
      do_install = False</p>
<p>Where&#8217;s it used as a control framework. There&#8217;s no disagreement here that the author should have actually checked if the table to exist to begin with before acting right? This is *average exception use* I see, because people won&#8217;t take the extra time to figure out how the method works so they use the exception side effect to control code.</p>
<p>C has taught me that robust error handling can be yours if you commit to organizing your error handling, perhaps even delegating a task to it.</p>
<p>Commit to the go paradigm and you might actually surprise yourself. If you don&#8217;t commit then the language isn&#8217;t for you.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment byuser comment-author-ubershmekel bypostauthor even depth-3 highlander-comment" id="li-comment-1254">
		<article id="comment-1254" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/48aae91146c6aa266ff2c9b3d1ab5d8b?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">ubershmekel</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1254"><time datetime="2013-05-21T15:55:42+00:00">May 21, 2013 at 15:55</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I&#8217;m accustomed and tired of C error handling. And I&#8217;m not saying all API&#8217;s should be exception based. What I am saying is:</p>
<p>1. Having only return value based errors causes boiler plate. Perhaps macros can alleviate this problem.<br />
2. Not forcing the dev to check every error returned promotes errors passing silently.</p>
<p>In your MySQLdb example you&#8217;re showing what you think is a bad use of exceptions. We can talk about the frequency and severity of exception abuse vs errors passing silently and boilerplate. Your mileage will vary depending on what you&#8217;re programming. Please see <a href="http://www.yosefk.com/blog/error-codes-vs-exceptions-critical-code-vs-typical-code.html" rel="nofollow">http://www.yosefk.com/blog/error-codes-vs-exceptions-critical-code-vs-typical-code.html</a></p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 highlander-comment" id="li-comment-1258">
		<article id="comment-1258" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i0.wp.com/graph.facebook.com/100000209444701/picture?q=type%3Dlarge%26_md5%3Dd39153cdd6198c6092c91b618e10b80b&#038;resize=68%2C68' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://www.facebook.com/tony.constantinides' rel='external nofollow' class='url'>Tony Constantinides</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1258"><time datetime="2013-06-10T00:33:08+00:00">June 10, 2013 at 00:33</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>One of the reasons I like Go is the LACK of features rather than its feature set.<br />
Its not a Kitchen sink language. If you cannot live without try /catch block all over your<br />
code then that your preference. I love that fact that Go authors kept the feature set to a minimal to make the language an absolute pleasure to code in. All other languages seems complex compare to the beauty and simplicity of Go code. The secret of a cool new language is to keep it small and simple to its fun to code in!!!!<br />
That my choice of server language. I use Java on Android for client and wish I could code in Go on the client as well. I love the clean syntax and runtime performance of Go!!!!</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1258#respond' onclick='return addComment.moveForm("comment-1258", "1258", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment even depth-2 highlander-comment" id="li-comment-1283">
		<article id="comment-1283" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://2.gravatar.com/avatar/2d43baa0bca928de9917a0947acb3f5a?s=39&#038;d=identicon&#038;r=G' class='avatar avatar-39' height='39' width='39' /><span class="fn">James</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1283"><time datetime="2014-01-23T10:54:32+00:00">January 23, 2014 at 10:54</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Go&#8217;s approach to error handling is rediculous for a 21st century language (and reminds me of curmudgeonly developers who insist on wrapping code to 80 characters and won&#8217;t use word wrap), but it&#8217;s still a huge improvement over C++ so I&#8217;ve enjoyed using it.  Exceptions can be messy, especially when you are dealing with so much concurrency, but anything would be better than this system where you ignorantly ignore some exceptions and then others get manually shuttled back up the call hierarchy, destroying the call stack in the process.  For my go code I generally use the pattern func check(e error) { if e != nil { panic(e.Error() }} around every system library function call (unless it&#8217;s the unusual case where I am actually handle the problem).</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1283#respond' onclick='return addComment.moveForm("comment-1283", "1283", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="post pingback">
		<p>Pingback: <a href='http://atusell.com/2013/08/empezando-con-golang/' rel='external nofollow' class='url'>Empezando con golang | atusell::</a></p>
	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="li-comment-1272">
		<article id="comment-1272" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/f113893fa3966c310b78b0b1fe7a1db1?s=68&#038;d=identicon&#038;r=G' class='avatar avatar-68' height='68' width='68' /><span class="fn">Tarun Elankath</span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1272"><time datetime="2013-11-27T13:32:55+00:00">November 27, 2013 at 13:32</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I agree with the author. Writing compound-if statements over every function call in Go gets old really fast. There is a reason that exceptions were invented. Just because bad-code bases/bad-libraries abuse exceptions is *not* a reason for getting rid of a valuable language feature. A library that does exceptions correctly:  well-designed exceptions following a exception hierarchy produces elegant, testable and readable code.  </p>
<p>Also no generics = lots of boiler plate code for algos/collections, but that isn&#8217;t the scope of this post&#8230;</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1272#respond' onclick='return addComment.moveForm("comment-1272", "1272", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1 highlander-comment" id="li-comment-1280">
		<article id="comment-1280" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i1.wp.com/pbs.twimg.com/profile_images/2421820198/samurai_me_normal.jpg?resize=68%2C68' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='http://twitter.com/ondrejkupka' rel='external nofollow' class='url'>Ondřej Kupka (@ondrejkupka)</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1280"><time datetime="2014-01-05T10:22:32+00:00">January 5, 2014 at 10:22</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>It is simply bullshit that exceptions in Python let you handle errors in a better way. Actually when you see a function in Python, you have _NO IDEA_ if it can throw or not. Now if you just put catch Exception somewhere high in the call stack, it prevents your program from crashing, but the error is by that time completely not local and you have anyway no idea what happened, so it helps nothing.</p>
<p>With Go, when I see that a function can return an error, I always check how it can fail, I never silently ignore errors. It&#8217;s just a myth that errors get ignored in Go. It&#8217;s not Go that is ignoring errors, it&#8217;s careless programmers. And the point is that you always know that a function can fail in Go, not so much in Python, unless you preventively read all the API documentation&#8230;</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1280#respond' onclick='return addComment.moveForm("comment-1280", "1280", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<ul class="children">
	<li class="comment odd alt depth-2 highlander-comment" id="li-comment-1281">
		<article id="comment-1281" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i1.wp.com/pbs.twimg.com/profile_images/2421820198/samurai_me_normal.jpg?resize=39%2C39' class='avatar avatar-39' height='39' width='39' /><span class="fn"><a href='http://twitter.com/ondrejkupka' rel='external nofollow' class='url'>Ondřej Kupka (@ondrejkupka)</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1281"><time datetime="2014-01-05T10:27:20+00:00">January 5, 2014 at 10:27</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>And actually the fact that Go is checking if you are actually returning something from a function if you define so is also quite nice. How many times have I seen Python code retuning None somewhere accidentally, crashing later on calling a method on None? Go at least forces you to type &#8220;return nil&#8221; and makes you think if you really wanted to do that&#8230;</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1281#respond' onclick='return addComment.moveForm("comment-1281", "1281", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="post pingback">
		<p>Pingback: <a href='http://isecsource.com/vulnerabilities/pathoc-break-all-the-python-webservers/' rel='external nofollow' class='url'>pathoc: break all the Python webservers! | iSEC Source</a></p>
	</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1 highlander-comment" id="li-comment-1412">
		<article id="comment-1412" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://i0.wp.com/lh5.googleusercontent.com/-M6tfPQ8gEEc/AAAAAAAAAAI/AAAAAAAABFA/Bh4AaKOMGjQ/photo.jpg?resize=68%2C68' class='avatar avatar-68' height='68' width='68' /><span class="fn"><a href='https://plus.google.com/114700723766048807422' rel='external nofollow' class='url'>Nir Friedman</a></span> on <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/#comment-1412"><time datetime="2014-03-12T20:59:54+00:00">March 12, 2014 at 20:59</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I&#8217;m not really qualified to talk about exceptions in terms of performance or concurrency. But in terms of straightforward single threaded applications, a lot of people here are just obfuscating the very straightforward advantages of exceptions over error codes.</p>
<p>1) Exceptions cannot be ignored. A lot of people are getting this backwards: that error codes force you to check them. They don&#8217;t, any more than exceptions force you to wrap everything in try catch. But when an exception is thrown, it will crash your program if not handled, which is preferable to it continuing silently.</p>
<p>A common example: I import some code that someone else wrote. I have complete control over its inputs. My code design is such that I should never put the imported code in a bad state. So I do not do exception handling/error codes. Then I run the code, and in fact it does go into a bad state. Maybe my code is buggy, maybe I misunderstood the usage. With exceptions, it crashes and tells you exactly what happened. With error codes, it chugs along silently, and I can only prevent this by checking the error code. Hence your code is either littered with annoying checks, or fails silently. Exceptions offer a way out. They basically combine assertions (crash if condition not met) with error codes (wait, don&#8217;t crash, do this instead).</p>
<p>2) Exceptions (unchecked) propagate up the call stack. Suppose you ask the user for input, and upon input it calls a function, that calls another, and so on, until you are at stack depth of 20. f20, the top of the stack, finds out that it cannot perform some low level procedure like opening a file. f19 is a slightly less low level function. It is just trying to do something, using a file. If the file is not there, it has no idea what to do. If f20 throws an exception, this will pop all the way up to f1, which can inform the user that the input is bad, and request new input. With error codes, you will need to handle the error code and pass it at every single level. This adds 18 if checks.</p>
<p>I really don&#8217;t understand peoples&#8217; objection to exceptions in favor of error codes.</p>
</div>

			<div class="reply">
				<a class='comment-reply-link' href='/2012/09/23/why-im-not-leaving-python-for-go/?replytocom=1412#respond' onclick='return addComment.moveForm("comment-1412", "1412", "respond", "620")'>Reply <span>&darr;</span></a>			</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
		</ol>

		
		
	
									<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2012/09/23/why-im-not-leaving-python-for-go/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://uberpython.wordpress.com/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																										


												<input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="fa7dc6d475" /><input type="hidden" name="_wp_http_referer" value="/2012/09/23/why-im-not-leaving-python-for-go/" />
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest" />

<div class="comment-form-field comment-textarea">
	<label for="comment">Enter your comment here...</label>
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..."></textarea></div>
</div>

<div id="comment-form-identity">

	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" title="Guest">
					<span></span>
				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" title="WordPress.com">
					<span></span>
				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" title="Twitter">
					<span></span>
				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" title="Facebook">
					<span></span>
				</a>
			</li>
			<li>
			<iframe id="googleplus-sign-in" name="googleplus-sign-in" src="https://public-api.wordpress.com/connect/?googleplus-sign-in=http%3A%2F%2Fuberpython.wordpress.com" width="24" height="24" scrolling="no" allowtransparency="true" seamless="seamless" frameborder="0"></iframe>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav" />
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value="" /></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value="" /></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="text" value="" /></div>
				</div>
			</div>
	
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="http://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png?m=1391188133g" alt="WordPress.com Logo" width="25" class="no-grav" />
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="" />
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="" />
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="" />
				<p class="comment-form-posting-as pa-wordpress"><strong></strong> You are commenting using your WordPress.com account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav" />
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="" />
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="" />
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="" />
				<p class="comment-form-posting-as pa-twitter"><strong></strong> You are commenting using your Twitter account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Facebook photo" width="25" class="no-grav" />
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="" />
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="" />
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="" />
				<p class="comment-form-posting-as pa-facebook"><strong></strong> You are commenting using your Facebook account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>

	<div id="comment-form-googleplus" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="http://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Google+ photo" width="25" class="no-grav" />
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="googleplus_avatar" id="googleplus-avatar" class="comment-meta-googleplus" value="" />
				<input type="hidden" name="googleplus_user_id" id="googleplus-user_id" class="comment-meta-googleplus" value="" />
				<input type="hidden" name="googleplus_access_token" id="googleplus-access_token" class="comment-meta-googleplus" value="" />
				<p class="comment-form-posting-as pa-googleplus"><strong></strong> You are commenting using your Google+ account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'googleplus' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p>
			</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

	
</div>

<script type="text/javascript">
var highlander_expando_javascript = function(){
	var input = document.createElement( 'input' ),
	    comment = jQuery( '#comment' );

	if ( 'placeholder' in input ) {
		comment.attr( 'placeholder', jQuery( '.comment-textarea label' ).remove().text() );
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	jQuery( '#comment-form-identity' ).hide();
	jQuery( '#comment-form-subscribe' ).hide();
	jQuery( '#commentform .form-submit' ).hide();

	comment.css( { 'height':'10px' } ).one( 'focus', function() {
		var timer = setInterval( HighlanderComments.resizeCallback, 10 )
		jQuery( this ).animate( { 'height': HighlanderComments.initialHeight } ).delay( 100 ).queue( function(n) { clearInterval( timer ); HighlanderComments.resizeCallback(); n(); } );
		jQuery( '#comment-form-identity' ).slideDown();
		jQuery( '#comment-form-subscribe' ).slideDown();
		jQuery( '#commentform .form-submit' ).slideDown();
	});
}
jQuery(document).ready( highlander_expando_javascript );
</script>

<div id="comment-form-subscribe">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;" tabindex="6"/> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of follow-up comments via email.</label></p></div>

												<p class="form-submit">
							<input name="submit" type="submit" id="comment-submit" value="Post Comment" />
							<input type='hidden' name='comment_post_ID' value='620' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
						</p>
						<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="20a939b262" /></p>
<input type="hidden" name="genseq" value="1404132074" />
<p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="47"/></p>					</form>
							</div><!-- #respond -->
			<div style="clear: both"></div>
</div><!-- #comments -->

				
			</div><!-- #content -->
		</div><!-- #primary -->


	</div><!-- #main -->

	<footer id="colophon" role="contentinfo">

			

			<div id="site-generator">
				<a href="http://theme.wordpress.com/themes/twentyeleven/" title="Learn more about this theme">The Twenty Eleven Theme</a>. <span class="sep"> | </span>				<a href="http://wordpress.com/?ref=footer_blog">Blog at WordPress.com</a>.
			</div>
	</footer><!-- #colophon -->
</div><!-- #page -->

<script type='text/javascript' src='//0.gravatar.com/js/gprofiles.js?ver=201427x'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://s2.wp.com/wp-content/mu-plugins/gravatar-hovercards/wpgroho.js?m=1380573781g'></script>

	<script>
		//initialize and attach hovercards to all gravatars
		jQuery( document ).ready( function( $ ) {
			if ( typeof Gravatar.init !== "function" ) {
				return;
			}			

			Gravatar.profile_cb = function( hash, id ) {
				WPGroHo.syncProfileData( hash, id );
			};
			Gravatar.my_hash = WPGroHo.my_hash;
			Gravatar.init( 'body', '#wp-admin-bar-my-account' );
		});
	</script>

		<div style="display:none">
	<div class="grofile-hash-map-8eecf70034e1c339724fd92930fc4d10">
	</div>
	<div class="grofile-hash-map-8e17239e5d83041e5dc6a4e16019bb1c">
	</div>
	<div class="grofile-hash-map-9569511fbb8c4c4750039aac2037712d">
	</div>
	<div class="grofile-hash-map-87f2efac0ff72169aa6e92fc3c613189">
	</div>
	<div class="grofile-hash-map-ec669061f44c634fe5b1504a6581cf01">
	</div>
	<div class="grofile-hash-map-ba7f377e8ec4cda486f499b39b6f1d55">
	</div>
	<div class="grofile-hash-map-9f41bfc370c185365fea540def0fcd55">
	</div>
	<div class="grofile-hash-map-48aae91146c6aa266ff2c9b3d1ab5d8b">
	</div>
	<div class="grofile-hash-map-1f5d1e6573fff27a72356d4c03c54142">
	</div>
	<div class="grofile-hash-map-5a0829b5d513e9f91a244156e8f24dcc">
	</div>
	<div class="grofile-hash-map-396e3de53320abf9855d912cd3d9431f">
	</div>
	<div class="grofile-hash-map-c2d980bc16657b17b4869229796fcd9d">
	</div>
	<div class="grofile-hash-map-02ea6cc76baf9c66cb24e8fc1b7bd015">
	</div>
	<div class="grofile-hash-map-8cc12a3db6f2d38dcb3308d7ce278d58">
	</div>
	<div class="grofile-hash-map-14d8f99bef950daabe2ae0c5a3968241">
	</div>
	<div class="grofile-hash-map-b9a7b48b4e057ce7a919235fb3de4c65">
	</div>
	<div class="grofile-hash-map-0319f42f02704f574a8d6421585bf878">
	</div>
	<div class="grofile-hash-map-5b450e8e273e2d6020ae894f8af9cc96">
	</div>
	<div class="grofile-hash-map-8016cc3065476ed618aaca59c7d516af">
	</div>
	<div class="grofile-hash-map-c8bcce48680b09e5deef0a61ee25f5fc">
	</div>
	<div class="grofile-hash-map-81609937c20aeab3598aea56f1f4f022">
	</div>
	<div class="grofile-hash-map-fdd692a907a4b7e2500d83bbcbfcaa47">
	</div>
	<div class="grofile-hash-map-f0a3ce9ab4d65f2e2dad6cd0aa63c98a">
	</div>
	<div class="grofile-hash-map-c7f8a61543923d9c6d3cd645a0200225">
	</div>
	<div class="grofile-hash-map-f1340809bc5256fb324be57bb88b88a9">
	</div>
	<div class="grofile-hash-map-3c2b0e48cf489f382ef26dbe7517da4a">
	</div>
	<div class="grofile-hash-map-d06f63433d0ca4a9a5c562433ce87966">
	</div>
	<div class="grofile-hash-map-4aacf7c371b53f2ff8210da56466491a">
	</div>
	<div class="grofile-hash-map-f5b8fb60c6116331da07c65b96a8a1d1">
	</div>
	<div class="grofile-hash-map-927348f4c16e03d3b290bd9b558c1b0d">
	</div>
	<div class="grofile-hash-map-567f158c465d8ed5d5a519800c23533d">
	</div>
	<div class="grofile-hash-map-2e95343a1586f64084cff3e0b2680e9f">
	</div>
	<div class="grofile-hash-map-9598ae319be753b20f97f21ed10ca7ed">
	</div>
	<div class="grofile-hash-map-b778d6629c683e80b52c5de444414fa6">
	</div>
	<div class="grofile-hash-map-ba833d8f28258a950818a516585326f7">
	</div>
	<div class="grofile-hash-map-30df4f50cbd6d012057a185605c96d3e">
	</div>
	<div class="grofile-hash-map-302db24de03cf31217361bff44b3f168">
	</div>
	<div class="grofile-hash-map-49e80d5fbb4ae645e9b2f0e601426b9f">
	</div>
	<div class="grofile-hash-map-b3b903cebf8a159641b95248c414c2ef">
	</div>
	<div class="grofile-hash-map-b5d85b1d5ee0140398a2bc929362b568">
	</div>
	<div class="grofile-hash-map-9916002af7d33da3db56a4d1b3b74ddf">
	</div>
	<div class="grofile-hash-map-46c097e65f2b1efd1630de004f61582d">
	</div>
	<div class="grofile-hash-map-6b34a2a81515583dc95e5c0809db06bb">
	</div>
	<div class="grofile-hash-map-d56ab81905ed7e251b6666692a9e1c3f">
	</div>
	<div class="grofile-hash-map-50cf540ad1455d0e5a395d53beb45367">
	</div>
	<div class="grofile-hash-map-d9eb1ccbe78091888a570dde5d1d715f">
	</div>
	<div class="grofile-hash-map-d50a278a1fcff4962144dc186f17af4f">
	</div>
	<div class="grofile-hash-map-b08f49c6044542632cb04376a3b1a74a">
	</div>
	<div class="grofile-hash-map-b06f467e93b8430ba3db0fb7f92bb569">
	</div>
	<div class="grofile-hash-map-b4ba45154845c24ea410f172325e3051">
	</div>
	<div class="grofile-hash-map-aa73a479cf5cec03df7f1b416b5e7a25">
	</div>
	<div class="grofile-hash-map-83f49a8da1dc030d9f671f521839aecc">
	</div>
	<div class="grofile-hash-map-c4a8f2b80faa9685ccd6090c3b5c203c">
	</div>
	<div class="grofile-hash-map-06711b2c5a9146ca09f52d32a07de8e9">
	</div>
	<div class="grofile-hash-map-af9b6879c1329b637adb22444d8f9df6">
	</div>
	<div class="grofile-hash-map-f6a27aba9787f5a4daad23d561a61808">
	</div>
	<div class="grofile-hash-map-1d180d9e0368472144840049b3d79448">
	</div>
	<div class="grofile-hash-map-45ebc247a60af15edfdd093a0ff8d8c0">
	</div>
	<div class="grofile-hash-map-780a06ae58a5a55d0e608a1e3a85f656">
	</div>
	<div class="grofile-hash-map-f2788e8d7b2362a869fd4e73868157c6">
	</div>
	<div class="grofile-hash-map-e05496428971cd7c9f9c2e8e9be0e0ee">
	</div>
	<div class="grofile-hash-map-2d43baa0bca928de9917a0947acb3f5a">
	</div>
	<div class="grofile-hash-map-f113893fa3966c310b78b0b1fe7a1db1">
	</div>
	<div class="grofile-hash-map-e1305fee562b70958e65b557ce049e31">
	</div>
	</div>
<script type='text/javascript'>
/* <![CDATA[ */
var HighlanderComments = {"loggingInText":"Logging In\u2026","submittingText":"Posting Comment\u2026","postCommentText":"Post Comment","connectingToText":"Connecting to %s","commentingAsText":"%1$s: You are commenting using your %2$s account.","logoutText":"Log Out","loginText":"Log In","connectURL":"http:\/\/uberpython.wordpress.com\/public.api\/connect\/?action=request","logoutURL":"https:\/\/uberpython.wordpress.com\/wp-login.php?action=logout&_wpnonce=a7abb165c8","homeURL":"http:\/\/uberpython.wordpress.com\/","postID":"620","gravDefault":"identicon","enterACommentError":"Please enter a comment","enterEmailError":"Please enter your email address here","invalidEmailError":"Invalid email address","enterAuthorError":"Please enter your name here","gravatarFromEmail":"This picture will show whenever you leave a comment. Click to customize it.","logInToExternalAccount":"Log in to use details from one of these accounts.","change":"Change","changeAccount":"Change Account","comment_registration":"0","userIsLoggedIn":"","isJetpack":"0"};
/* ]]> */
</script>
<script type='text/javascript' src='http://s1.wp.com/_static/??/wp-content/js/jquery/jquery.autoresize.js,/wp-content/mu-plugins/highlander-comments/script.js?m=1403644162j'></script>

	<div id="bit" class="loggedout-follow-normal">
		<a class="bsub" href="javascript:void(0)"><span id='bsub-text'>Follow</span></a>
		<div id="bitsubscribe">

					<h3><label for="loggedout-follow-field">Follow &ldquo;Ubershmekel&#039;s Uberpython Pythonlog&rdquo;</label></h3>

			<form action="https://subscribe.wordpress.com" method="post" accept-charset="utf-8" id="loggedout-follow">
			<p>Get every new post delivered to your Inbox.</p>

			<p id="loggedout-follow-error" style="display: none;"></p>

			
			<p><input type="email" name="email" value="Enter your email address" onfocus='this.value=(this.value=="Enter your email address") ? "" : this.value;' onblur='this.value=(this.value=="") ? "Enter email address" : this.value;'  id="loggedout-follow-field"/></p>

			<input type="hidden" name="action" value="subscribe"/>
			<input type="hidden" name="blog_id" value="4565747"/>
			<input type="hidden" name="source" value="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/"/>
			<input type="hidden" name="sub-type" value="loggedout-follow"/>

			<input type="hidden" id="_wpnonce" name="_wpnonce" value="f96a37a43c" /><input type="hidden" name="_wp_http_referer" value="/2012/09/23/why-im-not-leaving-python-for-go/" />
			<p id='bsub-subscribe-button'><input type="submit" value="Sign me up" /></p>
			</form>
					<div id='bsub-credit'><a href="http://wordpress.com/signup/?ref=lof">Powered by WordPress.com</a></div>
		</div><!-- #bitsubscribe -->
	</div><!-- #bit -->

	<script type="text/javascript">
		WPCOM_sharing_counts = {"http:\/\/uberpython.wordpress.com\/2012\/09\/23\/why-im-not-leaving-python-for-go\/":620}	</script>
		<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-google-plus-1' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomgoogle-plus-1', 'menubar=1,resizable=1,width=480,height=550' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-facebook' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
				return false;
			});
		});
		</script>
		<script type='text/javascript'>
/* <![CDATA[ */
var recaptcha_options = {"lang":"en"};
/* ]]> */
</script>
<script type='text/javascript' src='http://s0.wp.com/_static/??-eJx9jEEOwiAQRS8kTJsmRhbGoxhCaR1kBsJA1duLC7au/uK99+GVlUtcPVcIAqs/0Pn81kFO0BGyi2318mMuEXVNFZ/jRxPykEZPTeXYdmQB+0QhX9WiJ7j3E9hSoT9+TlLVFi0WkIctyPvYHt3oOi/GmNlM50v4AgRVQGc='></script>
<script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script>	<script type="text/javascript">
	var skimlinks_pub_id = "725X584219"
	var skimlinks_sitename = "uberpython.wordpress.com";
	</script>
	<script type="text/javascript" src="http://s.skimresources.com/js/725X1342.skimlinks.js"></script><script src="http://s.stats.wordpress.com/w.js?21" type="text/javascript"></script>
<script type="text/javascript">
st_go({'blog':'4565747','v':'wpcom','tz':'0','user_id':'0','post':'620','subd':'uberpython'});
ex_go({'crypt':'UE5XaGUuOTlwaD85flAmcm1mcmZsaDhkV11YdWtpP0NsWnVkPS9sL0ViLndld3AlSGN8YmRCSmtFZUVGd1czWkgxTVtNeWF4cT1MYVI0LjNbeVEyck5xLjU2SE1kUkdJci1KVXVoVEhVLlhMSno9TmFPSUU/Ri9bRXROXUw/LVk/NVZUWytDdiwsYWd6Wz0mNUJ1d1NXQ1FyXWtWN1lmYmRodHV6W3AsdmVnP3ROVWUxWlZRTWIsUjc0ajliLS5yRkpRZnAucHdmS0QvYXBORVdPMUNmaDFIeUwsbUZ1aG1+b0hRLllXen5nfnVpTGlPeWFfMU9NVGowck9Jc2EvMy9HZyVWY0ZSUk9WTTRjNFcwZ0drfEkyRFYlSnxjX2laNlBoZW9UdFdRVlU9JVFEdkY/WHIrbTU='});
addLoadEvent(function(){linktracker_init('4565747',620);});
	</script>
<noscript><img src="http://stats.wordpress.com/b.gif?v=noscript" style="height:0px;width:0px;overflow:hidden" alt="" /></noscript>
<script>
if ( 'object' === typeof wpcom_mobile_user_agent_info ) {

	wpcom_mobile_user_agent_info.init();
	var mobileStatsQueryString = "";
	
	if( false !== wpcom_mobile_user_agent_info.matchedPlatformName )
		mobileStatsQueryString += "&x_" + 'mobile_platforms' + '=' + wpcom_mobile_user_agent_info.matchedPlatformName;
	
	if( false !== wpcom_mobile_user_agent_info.matchedUserAgentName )
		mobileStatsQueryString += "&x_" + 'mobile_devices' + '=' + wpcom_mobile_user_agent_info.matchedUserAgentName;
	
	if( wpcom_mobile_user_agent_info.isIPad() )
		mobileStatsQueryString += "&x_" + 'ipad_views' + '=' + 'views';

	if( "" != mobileStatsQueryString ) {
		new Image().src = document.location.protocol + '//stats.wordpress.com/g.gif?v=wpcom-no-pv' + mobileStatsQueryString + '&baba=' + Math.random();
	}
	
}
</script>
</body>
</html>