<!DOCTYPE html>
<!--[if IE 6]>
<html id="ie6" lang="en">
<![endif]-->
<!--[if IE 7]>
<html id="ie7" lang="en">
<![endif]-->
<!--[if IE 8]>
<html id="ie8" lang="en">
<![endif]-->
<!--[if !(IE 6) & !(IE 7) & !(IE 8)]><!-->
<html lang="en">
<!--<![endif]-->
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<title>Creative usernames and Spotify account hijacking | Spotify Labs</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="stylesheet" type="text/css" media="all" href="http://s2.wp.com/wp-content/themes/pub/twentyeleven/style.css?m=1398102582g" />
<link rel="pingback" href="http://labs.spotify.com/xmlrpc.php" />
<!--[if lt IE 9]>
<script src="http://s2.wp.com/wp-content/themes/pub/twentyeleven/js/html5.js?m=1394055389g" type="text/javascript"></script>
<![endif]-->
		<script src='//r-login.wordpress.com/remote-login.php?action=js&amp;host=labs.spotify.com&amp;id=45123433&amp;t=1404248396&amp;back=http%3A%2F%2Flabs.spotify.com%2F2013%2F06%2F18%2Fcreative-usernames%2F' type="text/javascript"></script>
		<script type="text/javascript">
		/* <![CDATA[ */
			if ( 'function' === typeof WPRemoteLogin ) {
				document.cookie = "wordpress_test_cookie=test; path=/";
				if ( document.cookie.match( /(;|^)\s*wordpress_test_cookie\=/ ) ) {
					WPRemoteLogin();
				}
			}
		/* ]]> */
		</script>
		<link rel="dns-prefetch" href="//connect.facebook.net" />
<link rel="alternate" type="application/rss+xml" title="Spotify Labs &raquo; Feed" href="http://labs.spotify.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Spotify Labs &raquo; Comments Feed" href="http://labs.spotify.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Spotify Labs &raquo; Creative usernames and Spotify account&nbsp;hijacking Comments Feed" href="http://labs.spotify.com/2013/06/18/creative-usernames/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
function addLoadEvent(func){var oldonload=window.onload;if(typeof window.onload!='function'){window.onload=func;}else{window.onload=function(){oldonload();func();}}}
/* ]]> */
</script>
<link rel='stylesheet' id='all-css-0' href='http://s2.wp.com/_static/??-eJx9UNtuwyAM/aFRN1s07WXatxDiEhLACJxG+fs5ybqt2soT51jnYgNLUoYiY2QIs0p+ti4WKMF5XFOmEQ3fs5Mp5Qn+t3k3YYEROWkzqZ3V5IYyyjwkzZsiYO80egwiq9lCer25NjhI198aHiSnQJo74EUGqwRfMULh1aNakgQcHgeR2ImtfINauUVSnoxmR/GOqIvXLtesGTtPVqAFUf2ij5a/ugQ380Ub7IgmOUDqzJ6w33IKLtZaExU+doMy6Ly1f731MyPm41d+4KM9hxasp077WuLieotc9sUtUZ9R93viR3hv2nPbNM9v55fxEyt+94k=' type='text/css' media='all' />
<script type='text/javascript' src='http://s0.wp.com/_static/??-eJyFzVEKwjAMgOEL2bUbCr6IZ6k1jsQlrU3r0NPbgYKCsKdA8pHfzsmEKAWkWFLL8YQTmKqQ/dh2BuUSO9KNbQ4lTPUMukC6VciP91gFhnHMvkDHKB/8VU1RC4NqS/65/qZQ7gjzKiMoyYeryaD4XL4e+dBvndvt+8EN9AIo5lvB'></script>
<link rel='stylesheet' id='all-css-0' href='http://s2.wp.com/wp-content/mu-plugins/highlander-comments/style.css?m=1377793621g' type='text/css' media='all' />
<!--[if lt IE 8]>
<link rel='stylesheet' id='highlander-comments-ie7-css'  href='http://s2.wp.com/wp-content/mu-plugins/highlander-comments/style-ie7.css?m=1351637563g&#038;ver=20110606' type='text/css' media='all' />
<![endif]-->
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://spotifylabscom.wordpress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://spotifylabscom.wordpress.com/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='Incident Management at&nbsp;Spotify' href='http://labs.spotify.com/2013/06/04/incident-management-at-spotify/' />
<link rel='next' title='Puppetizing the workstations' href='http://labs.spotify.com/2013/07/04/puppetizing-the-workstations/' />
<meta name="generator" content="WordPress.com" />
<link rel='canonical' href='http://labs.spotify.com/2013/06/18/creative-usernames/' />
<link rel='shortlink' href='http://wp.me/p33kFj-4v' />
<link rel="alternate" type="application/json+oembed" href="https://public-api.wordpress.com/oembed/1.0/?format=json&amp;url=http%3A%2F%2Flabs.spotify.com%2F2013%2F06%2F18%2Fcreative-usernames%2F&amp;for=wpcom-auto-discovery" /><link rel="alternate" type="application/xml+oembed" href="https://public-api.wordpress.com/oembed/1.0/?format=xml&amp;url=http%3A%2F%2Flabs.spotify.com%2F2013%2F06%2F18%2Fcreative-usernames%2F&amp;for=wpcom-auto-discovery" /><link rel="shortcut icon" type="image/x-icon" href="http://s2.wp.com/i/favicon.ico?m=1311975824g" sizes="16x16 24x24 32x32 48x48" />
<link rel="icon" type="image/x-icon" href="http://s2.wp.com/i/favicon.ico?m=1311975824g" sizes="16x16 24x24 32x32 48x48" />
<link rel="apple-touch-icon-precomposed" href="http://s0.wp.com/i/webclip.png?m=1391188133g" />
<link rel='openid.server' href='http://spotifylabscom.wordpress.com/?openidserver=1' />
<link rel='openid.delegate' href='http://spotifylabscom.wordpress.com/' />
<link rel="search" type="application/opensearchdescription+xml" href="http://labs.spotify.com/osd.xml" title="Spotify Labs" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com" />
<script type="text/javascript" src="http://zor.livefyre.com/wjs/v3.0/javascripts/livefyre.js"></script><meta name="application-name" content="Spotify Labs" /><meta name="msapplication-window" content="width=device-width;height=device-height" /><meta name="msapplication-tooltip" content="Think it. Build it. Ship it. Tweak it. Blog it." /><meta name="msapplication-task" content="name=Subscribe;action-uri=http://labs.spotify.com/feed/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta property="og:site_name" content="Spotify Labs" />
<meta property="og:type" content="article" />
<meta property="og:locale" content="en_US" />
<meta property="fb:app_id" content="322118224564145" />
<meta property="og:url" content="http://labs.spotify.com/2013/06/18/creative-usernames/" />
<meta property="og:title" content="Creative usernames and Spotify account&nbsp;hijacking" />
<meta property="og:description" content="Usernames a bit too clever for our own good? Spotify supports unicode usernames which we are a bit proud of (not many services allow you to have ☃, the unicode snowman, as a username). However, it has also been a&hellip;" />
<meta property="article:published_time" content="2013-06-18T09:34:04+00:00" />
<meta property="article:modified_time" content="2013-06-18T09:34:04+00:00" />
<meta property="article:author" content="http://labs.spotify.com/author/migo63/" />
<meta property="article:section" content="Labs" />
<meta property="article:tag" content="Security" />
<style type="text/css" id="syntaxhighlighteranchor"></style>
		<link rel="stylesheet" id="custom-css-css" type="text/css" href="http://labs.spotify.com/?custom-css=1&#038;csblog=33kFj&#038;cscache=6&#038;csrev=16" />
		</head>

<body class="single single-post postid-279 single-format-standard custom-background mp6 typekit-enabled singular two-column right-sidebar highlander-enabled highlander-light">
<div id="page" class="hfeed">
	<header id="branding" role="banner">
			<hgroup>
				<h1 id="site-title"><span><a href="http://labs.spotify.com/" rel="home">Spotify Labs</a></span></h1>
				<h2 id="site-description">Think it. Build it. Ship it. Tweak it. Blog it.</h2>
			</hgroup>

						<a href="http://labs.spotify.com/">
									<img src="http://spotifylabscom.files.wordpress.com/2013/01/cropped-hand_coffee_two.jpg" width="1000" height="288" alt="" />
							</a>
			
								<form method="get" id="searchform" action="http://labs.spotify.com/">
		<label for="s" class="assistive-text">Search</label>
		<input type="text" class="field" name="s" id="s" placeholder="Search" />
		<input type="submit" class="submit" name="submit" id="searchsubmit" value="Search" />
	</form>
			
			<nav id="access" role="navigation">
				<h3 class="assistive-text">Main menu</h3>
								<div class="skip-link"><a class="assistive-text" href="#content">Skip to primary content</a></div>
												<div class="menu"><ul><li ><a href="http://labs.spotify.com/">Home</a></li><li class="page_item page-item-1"><a href="http://labs.spotify.com/about/">About</a></li><li class="page_item page-item-469"><a href="http://labs.spotify.com/puzzles/">Puzzles</a></li></ul></div>
			</nav><!-- #access -->
	</header><!-- #branding -->


	<div id="main">

		<div id="primary">
			<div id="content" role="main">

				
					<nav id="nav-single">
						<h3 class="assistive-text">Post navigation</h3>
						<span class="nav-previous"><a href="http://labs.spotify.com/2013/06/04/incident-management-at-spotify/" rel="prev"><span class="meta-nav">&larr;</span> Previous</a></span>
						<span class="nav-next"><a href="http://labs.spotify.com/2013/07/04/puppetizing-the-workstations/" rel="next">Next <span class="meta-nav">&rarr;</span></a></span>
					</nav><!-- #nav-single -->

					
<article id="post-279" class="post-279 post type-post status-publish format-standard hentry category-labs tag-security">
	<header class="entry-header">
		<h1 class="entry-title">Creative usernames and Spotify account&nbsp;hijacking</h1>

				<div class="entry-meta">
						<span class="sep">Posted on </span><a href="http://labs.spotify.com/2013/06/18/creative-usernames/" title="9:34 am" rel="bookmark"><time class="entry-date" datetime="2013-06-18T09:34:04+00:00">June 18, 2013</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="http://labs.spotify.com/author/migo63/" title="View all posts by Mikael Goldmann" rel="author">Mikael Goldmann</a></span></span>		</div><!-- .entry-meta -->
			</header><!-- .entry-header -->

	<div class="entry-content">
		
<div class="fb-social-plugin fb-like" data-font="lucida grande" data-ref="above-post" data-show-faces="true" data-width="450"></div>
<h2>Usernames a bit too clever for our own good?</h2>
<p>Spotify supports unicode usernames which we are a bit proud of (not many services allow you to have ☃, the unicode snowman, as a username). However, it has also been a reliable source of pain over the years. This is the story of one time when it bit us pretty badly and how we spent Easter dealing with it.</p>
<h1>Good Friday gone bad</h1>
<p>Some years ago, late on Good Friday, a user posted on the Spotify support forum that he and a friend could hijack user accounts. Our forum manager challenged the user to take over his account, and within minutes the manager&#8217;s account had a new playlist added and a new password.</p>
<p><span style="color:#000000;font-weight:bold;font-style:inherit;line-height:1.625;">Pwning an account</span></p>
<p>A bunch of us dropped whatever we were working on and scurried to try to understand what was going wrong and how to fix it. From the forum post we knew that taking over an account went something like this:</p>
<ol>
<li>Find a user account to hijack. For the sake of this example let us hijack the account belonging to user bigbird.</li>
<li>Create a new spotify account with username ᴮᴵᴳᴮᴵᴿᴰ (in python this is the string u&#8217;\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30&#8242;).</li>
<li>Send a request for a password reset for your new account.</li>
<li>A password reset link is sent to the email you registered for your new account. Use it to change the password.</li>
<li>Now, instead of logging in to account with username ᴮᴵᴳᴮᴵᴿᴰ, try logging in to account with username bigbird with the new password.</li>
<li>Success! Mission accomplished.</li>
</ol>
<div>
<p>From the log lines associated with the hijacking of the forum manager&#8217;s account it appeared to be a problem with how we derived a <em>canonical username</em> from the username the user chooses at registration, but we were still pretty much in the dark. We had no option except to disable account creation until we could prevent the attack.</p>
<p><em>What the heck was going on?</em></p>
</div>
<p><span style="color:#000000;"><b>Forbidden and equivalent characters in usernames</b></span></p>
<p>If you allow your users to pick their usernames too freely they may accidentally shoot themselves (or you) in the foot. For instance, it is probably good to</p>
<ul>
<li>not allow white space in usernames,</li>
<li>treat &#8220;BigBird&#8221; and &#8220;bigbird&#8221; as the same username.</li>
</ul>
<p>The first is an example of forbidding certain characters in usernames and the second is to treat some characters (&#8216;B&#8217; and &#8216;b&#8217;) as equivalent. The latter is often implemented by <em>canonicalizing</em> the username. If we only allow the letters a-z and A-Z then we could canonicalize a username by mapping all characters to lower case:</p>
<pre>canonical_username = username.lower()  # in python</pre>
<p>So &#8216;BigBird&#8217;, &#8216;Bigbird&#8217; and &#8216;bigbird&#8217; would all be mapped to &#8216;bigbird&#8217;. We refer to &#8216;BigBird&#8217; as the <em>verbatim username</em> and the remapped &#8216;bigbird&#8217; as the canonical username. When an account is created the canonical username needs to be unused, so if one user enters &#8216;BigBird&#8217; and another enters &#8216;bigbird&#8217;, only one of them will be allowed to create the account.</p>
<p>Lower casing has the key property of being idempotent, i.e., that applying it more than once has no effect: x.lower() == x.lower().lower(). So if a username gets passed from service to service and you want to make sure it is in canonical form you can safely apply .lower() and if it was already in canonical form there is no harm done, and it is easy to stay safe.</p>
<h2><span style="font-style:inherit;line-height:1.625;">When Ω is not the same as Ω</span></h2>
<p>If you allow non-ascii characters this becomes even more important, since lots of different characters look very similar. For example it is hard to see the difference between Ω and Ω even though one is obviously a Greek letter and the other is a unit for electrical resistance and in unicode they indeed have different code points. Treating two so similar looking characters as different when used in usernames is likely to cause problems and confusion, so we distinguish between <em>verbatim usernames</em> and <em>canonical usernames</em>. While the Omega and Ohm characters are different when used in verbatim usernames they are mapped to the same character in canonical usernames. Just simple lower casing will not be enough, obviously.</p>
<h2>XMPP&#8217;s nodeprep canonicalization method</h2>
<p><span style="font-style:inherit;line-height:1.625;">Fortunately there was no need to roll our own canonicalization. The problem was already solved in XMPP, and the method was implemented in the python framework twisted which we used for lots of backend services at the time. The code we used was more or less:</span></p>
<pre>from twisted.words.protocols.jabber.xmpp_stringprep import nodeprep
def canonical_username(name):
    return nodeprep.prepare(name)</pre>
<div>XMPP nodeprep is specified in <a href="http://tools.ietf.org/html/draft-ietf-xmpp-nodeprep-03">http://tools.ietf.org/html/draft-ietf-xmpp-nodeprep-03</a> and it clearly says there that it is supposed to be idempotent and handles unicode names.</div>
<p><em>It sounds like this should work, so again, what the heck was going on?</em></p>
<h1>Tracking down the cause</h1>
<p>It was easy to test one of the usernames used in the proof of concept. Let us see what happens when we tried ᴮᴵᴳᴮᴵᴿᴰ.</p>
<pre>&gt;&gt;&gt; canonical_username(u'\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30')
u'BIGBIRD'
&gt;&gt;&gt; canonical_username(canonical_username(u'\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30'))
u'bigbird'</pre>
<p>Not so good since the function apparently was <em>not</em> idempotent, but at least it provided insight into why the attack worked. When you registered an account, canonical_username got applied once, and an account with canonical username &#8216;BIGBIRD&#8217; got registered which was allowed since it did not collide with the existing account with canonical username &#8216;bigbird&#8217;. When resetting the password for &#8216;ᴮᴵᴳᴮᴵᴿᴰ&#8217; canonical_username was applied once, so the email to send the password reset to got sent to the address associated with the newly created account with canonical username &#8216;BIGBIRD&#8217;. However, when the link was used, canonical_username was once again applied, yielding &#8216;bigbird&#8217; so that the new password was instead set for the &#8216;bigbird&#8217; account. We were relying on nodeprep.prepare being idempotent, and it wasn&#8217;t.</p>
<h2>Duct taping the security hole</h2>
<p>At this point, a few hours into the incident, we did reopen registration but with a restriction on the usernames you could register. You were only allowed to register username X if X==canonical_username(X).</p>
<pre>def safe_name(X): return X == canonical_username(X)</pre>
<p>If the new username was already a fixpoint, it should be safe. Still, we wanted to find out what had gone wrong. Could the method for computing canonical usernames based on nodeprep.prepare() be salvaged? If not we would be in trouble since we use canonical usernames in various databases so that changing how to derive them in a non-backwards compatible way would be quite costly.</p>
<h1>Why did nodeprep.prepare() fail to be idempotent?</h1>
<p>First we looked at the source code for the twisted module but as it was closely based on <a href="http://tools.ietf.org/html/draft-ietf-xmpp-nodeprep-03">http://tools.ietf.org/html/draft-ietf-xmpp-nodeprep-03</a> we looked at that as well. The draft describes a relatively complicated transformation of unicode strings to get canonical representations. The draft explains that you may need to iterate the transformation until you reach a fixpoint, but for the convenience of implementors the draft includes tables for how to remap unicode code points and the tables let you look up the fixpoints rather than iterating the mapping.</p>
<p>However, at the very beginning of the draft it says</p>
<pre>o  The character repertoire that is the input and output to
      stringprep: Unicode 3.2, specified in section 2</pre>
<p>Reading on, the draft does specify that you should check that the <em>output</em> you get is admissible, but it never tells you to check that the <em>input</em> is unicode 3.2. The draft does not stress checking the input, nodeprep.prepare did not check the input, and neither did we. It turns out that the code points making up ᴮᴵᴳᴮᴵᴿᴰ are not part of unicode 3.2.</p>
<p><em>So <strong>that</strong> was what the heck was going on.</em></p>
<h1>The final fix</h1>
<p>We reported the problem to the twisted developers, but we couldn&#8217;t wait for a patch so we needed a safe fix that we could apply ourselves. Actually checking that a username only contains unicode 3.2 code points is a bit tedious, and the actual problem was that nodeprep.prepare was not idempotent (albeit outside unicode 3.2). So the fix instead addressed the problem that we don&#8217;t want usernames where nodeprep.prepare is not idempotent. We wrote a small wrapper function around nodeprep.prepare that basically calls the old prepare function twice and rejects a name if old_prepare(old_prepare(name)) != old_prepare(name).</p>
<p>What then remained was some cleanup. Find identify handfull of compromised accounts, which due to the nature of the bug was actually easy. We just needed to find the accounts with incorrect canonical usernames and from them we could find the corresponding, hijacked, accounts.</p>
<p>And that is the end of our story, or so I thought&#8230;</p>
<p><span style="color:#000000;font-style:inherit;font-weight:bold;line-height:1.625;">The final twist</span></p>
<p>When writing this blog post I checked back with the twisted community since it involves an issue in their code base which has security implications, and I found out two things. First, the issue is fixed as of twisted version 11.0.0, and second the bug was not actually there from the start. It came into being when upgrading from python 2.4 to python 2.5.</p>
<p>Twisted&#8217;s code imports the module unicodedata in the standard python library. This module changed between python 2.4 and python 2.5. The python 2.4 version causes the twisted code to (correctly) throw an exception if the input is outside unicode 3.2, whereas no exception is thrown when using unicodedata from python 2.5, instead causing incorrect behavior in twisted&#8217;s implementation of nodeprep.prepare()</p>
<p>So changes in the standard python library from one python version to the next introduced a subtle bug in twisted&#8217;s nodepre.prepare() function which in turn introduced a security issue in Spotify&#8217;s account creation.</p>
<h2>Some take-aways</h2>
<ul>
<li>This stresses the importance of validating user input. In this case we had to peel back quite a few layers to find out what the requirements on the input actually were.</li>
<li>This was not the first or last time that fancy characters in usernames caused us pain, and I&#8217;m confident that it will keep biting us from time to time. However in a global market limiting the alphabet to ASCII is not an attractive option, so if you do decide to bite the bullet and support international characters, be aware that there are plenty of pitfalls and gotchas. Programming language and library support for unicode isn&#8217;t always as mature as one might hope.</li>
<li>When users expose vulnerabilities, avoid antagonizing them if possible. They can probably provide valuable help on how to reproduce and perhaps even how to fix the issue. In this case the two users who posted to the forum where actually rewarded with some Spotify premium months.</li>
<li>Normally, upgrading is a good way to get rid of bugs and security holes, but every once in awhile an upgrade packs a wallop.</li>
</ul>
<p>And finally, the account bigbird was not among the attacked accounts. I just picked that as an example name.</p>

<div class="fb-social-plugin fb-like" data-font="lucida grande" data-ref="below-post" data-show-faces="true" data-width="450"></div>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow" class="share-twitter sd-button share-icon" href="http://labs.spotify.com/2013/06/18/creative-usernames/?share=twitter" title="Click to share on Twitter" id="sharing-twitter-279"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow" class="share-facebook sd-button share-icon" href="http://labs.spotify.com/2013/06/18/creative-usernames/?share=facebook" title="Share on Facebook" id="sharing-facebook-279"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div></div>			</div><!-- .entry-content -->

	<footer class="entry-meta">
		This entry was posted in <a href="http://labs.spotify.com/category/labs/" rel="category tag">Labs</a> and tagged <a href="http://labs.spotify.com/tag/security/" rel="tag">Security</a> by <a href="http://labs.spotify.com/author/migo63/">Mikael Goldmann</a>. Bookmark the <a href="http://labs.spotify.com/2013/06/18/creative-usernames/" title="Permalink to Creative usernames and Spotify account&nbsp;hijacking" rel="bookmark">permalink</a>.		
			</footer><!-- .entry-meta -->
</article><!-- #post-279 -->

					
<div id="comments" class="comments-area">
	<h2 class="comments-title">Comments</h2>	<ol class="comment-list">		<li class="pingback even thread-even depth-1 highlander-comment" id="comment-46">
				<div id="div-comment-46" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://nullsbits.wordpress.com/2013/06/18/hijacking-accounts-using-unicode-magic/' rel='external nofollow' class='url'>Hijacking accounts using unicode magic | Null Bits</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-46">
			June 18, 2013 at 5:57 pm</a>		</div>

		<p>[&#8230;] Creative usernames and Spotify account hijacking. [&#8230;]</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kushalhada odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-48">
				<div id="div-comment-48" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='http://2.gravatar.com/avatar/24b9b90da2974a1f766c7733dd40524a?s=32&#038;d=identicon&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://hadakushal.blogspot.com' rel='external nofollow' class='url'>k</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-48">
			June 18, 2013 at 11:26 pm</a>		</div>

		<p>Reblogged this on <a href="http://andmath.wordpress.com/2013/06/18/creative-usernames-and-spotify-account-hijacking/" rel="nofollow">your favorite topic</a> and commented:<br />
Programming in modules</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oddnoc even thread-even depth-1 highlander-comment" id="comment-49">
				<div id="div-comment-49" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/035cfc664ca98cbd587a454d890cc909?s=32&#038;d=identicon&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://oddnoc.wordpress.com' rel='external nofollow' class='url'>oddnoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-49">
			June 19, 2013 at 9:41 am</a>		</div>

		<p>Reblogged this on <a href="http://oddnoc.wordpress.com/2013/06/19/creative-usernames-and-spotify-account-hijacking/" rel="nofollow">oddnoc &gt; 140 characters</a> and commented:<br />
Really interesting. Sloppy specifications and a regression in Python bite Spotify “ the bum,” as Twitter user @danielsamuels put it.</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zrandi odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-55">
				<div id="div-comment-55" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/a89488737c0e0102a039bcb717da6610?s=32&#038;d=identicon&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://runscene.wordpress.com' rel='external nofollow' class='url'>zrandi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-55">
			June 19, 2013 at 8:27 pm</a>		</div>

		<p>Reblogueó esto en <a href="http://runscene.wordpress.com/2013/06/19/creative-usernames-and-spotify-account-hijacking/" rel="nofollow">RunScene</a>y comentado:<br />
Add your thoughts here&#8230; (optional)</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback even thread-even depth-1 highlander-comment" id="comment-56">
				<div id="div-comment-56" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://bethehacker.net/2013/06/20/mexanika-ugona-akkauntov-spotify-iz-za-baga-v-python-biblioteke/' rel='external nofollow' class='url'>Механика угона аккаунтов Spotify из-за бага в Python-библиотеке | Hacker Info</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-56">
			June 20, 2013 at 3:53 am</a>		</div>

		<p>[&#8230;] музыкального сервиса Spotify рассказали забавную историю, как несколько лет назад пришлось приостановить [&#8230;]</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-57">
				<div id="div-comment-57" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://stevenatkinson.wordpress.com/2013/06/21/how-to-avoid-your-online-accounts-being-hacked/' rel='external nofollow' class='url'>How to Avoid Your Online Accounts Being Hacked | Steve&#039;s Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-57">
			June 21, 2013 at 8:50 am</a>		</div>

		<p>[&#8230;] Viagra emails coming from you.  Why is this happening to you?  Well, unless (like Sony or Spotify) the site was hacked, you were hacked because you chose a bad password.  It&#8217;s your own [&#8230;]</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback even thread-even depth-1 highlander-comment" id="comment-58">
				<div id="div-comment-58" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://zaufanatrzeciastrona.pl/post/weekendowa-lektura-32/' rel='external nofollow' class='url'>Weekendowa Lektura | Zaufana Trzecia Strona</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-58">
			June 21, 2013 at 8:49 pm</a>		</div>

		<p>[&#8230;] Dlaczego znaki unicode w nazwach użytkownika mogą być ryzykowne [&#8230;]</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-59">
				<div id="div-comment-59" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blah.tamagothi.de/2013/06/22/bei-spottifei-diesen-von-presse-gehypten-und-vo/' rel='external nofollow' class='url'>Nachtwächter-Blah &raquo; Bei Spottifei, diesen von Presse gehypten und vo&#8230;</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-59">
			June 22, 2013 at 11:11 am</a>		</div>

		<p>[&#8230;] auf Händis priorisierten Streaming-Anbieter, konnte man übrigens beliebige Accounts pwnen, weil die dort Nutzernamen in Unicode erlauben, es aber verkackt hatten, di&#8230;. Und das wiederum hatte seine Ursache in einem&#8230; ähm&#8230; kleinen Bug in der [&#8230;]</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback even thread-even depth-1 highlander-comment" id="comment-61">
				<div id="div-comment-61" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://cyberoperations.wordpress.com/2013/06/23/security-news-0x45/' rel='external nofollow' class='url'>Security News #0&#215;45 | CyberOperations</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-61">
			June 23, 2013 at 3:14 pm</a>		</div>

		<p>[&#8230;] discussion on the Spotify blog on how hijackers- were able to gain access to accounts by creating specially crafted user names is [&#8230;]</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-63">
				<div id="div-comment-63" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://steinbring.net/2013/week-in-review-061713-062313/' rel='external nofollow' class='url'>Week in review – 06/17/13 – 06/23/13 &#187; STEINBRING.net</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-63">
			June 25, 2013 at 4:21 am</a>		</div>

		<p>[&#8230;] Creative usernames and Spotify account hijacking [&#8230;]</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback even thread-even depth-1 highlander-comment" id="comment-64">
				<div id="div-comment-64" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://svenerikmatzen.wordpress.com/2013/06/25/how-unicode-can-break-your-account-security-but-does-not-have-to/' rel='external nofollow' class='url'>How unicode can break your account security&hellip; but does not have to. | Sven&#039;s Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-64">
			June 25, 2013 at 1:55 pm</a>		</div>

		<p>[&#8230;] are plenty of surprises when dealing with unicode. As Mikael Goldman describes in his blog post “Creative usernames and Spotify account hijacking”, Spotify did have a vulnerability just because allowing users to use unicode characters as user [&#8230;]</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-77">
				<div id="div-comment-77" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mostlyerlang.com/2013/07/24/010-erlang-in-production/' rel='external nofollow' class='url'>010 Erlang in Production | Mostly Erlang</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-77">
			July 24, 2013 at 11:11 am</a>		</div>

		<p>[&#8230;] <a href="http://labs.spotify.com/2013/06/18/creative-usernames/ (Fred)" rel="nofollow">http://labs.spotify.com/2013/06/18/creative-usernames/ (Fred)</a> [&#8230;]</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback even thread-even depth-1 highlander-comment" id="comment-90">
				<div id="div-comment-90" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.is.setec.fr/blog/2014/01/revue-de-presse-telecom-lean' rel='external nofollow' class='url'>Revue de l&#039;actualité Télécom, IT &amp; Lean | Setec IS</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-90">
			January 9, 2014 at 11:03 am</a>		</div>

		<p>[&#8230;] Creative usernames and Spotify account hijacking : s&rsquo;il était besoin de rappeler que la Sécurité est une affaire de détails ; Spoiler : même Unicode peut être un nid à problèmes&#8230; [&#8230;]</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-92">
				<div id="div-comment-92" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://waitingfortheelevator.com/unicode-typography-tricks-and-the-hackers-artists-and-underground-scenesters-that-use-them/' rel='external nofollow' class='url'>Waiting for the Elevator | Unicode Typography Tricks and the Hackers, Artists and Underground Scenesters That Use Them</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-92">
			January 13, 2014 at 4:07 pm</a>		</div>

		<p>[&#8230;] it&#8217;s equivalent ASCII user name, and reset the wrong account&#8217;s password. They&#8217;ve written a great blog summarizing what went wrong that [&#8230;]</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="pingback even thread-even depth-1 highlander-comment" id="comment-98">
				<div id="div-comment-98" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://haruair.com/blog/2037' rel='external nofollow' class='url'>The edge of reason | 자바스크립트 스터디 – Chapter 2 정리</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://labs.spotify.com/2013/06/18/creative-usernames/comment-page-1/#comment-98">
			March 23, 2014 at 8:09 am</a>		</div>

		<p>[&#8230;]  [&#8230;]</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
</ol><div id="respond"><noscript><ol class="commentlist"><li id="comment-206912692795171_1123828" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=1109676946">Nick Coghlan</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2014-03-22T19:22:28+0000">March 22, 2014 at 7:22 pm</time></p><div class="comment-content" itemprop="commentText"><p>Hi, the last section here gives the impression that the failure was ultimately due to a regression in Python 2.5. It was not: Python 2.5 merely upgraded the included Unicode database from 3.2.0 to 4.1.0, adding these new code points.</p>
<p>This change was noted in the Python 2.5 What&#039;s New document (albeit not as prominently as the Unicode database update notices in more recent versions of Python - search for &quot;unicodedata&quot; to find it). A more restricted interface to the database remains available to this day, specifically for use with standards that call out this particular version of the Unicode database: 
http://docs.python.org/2/library/unicodedata.html#unicodedata.ucd_3_2_0</p>
</div></li><li id="comment-206912692795171_669587" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=1377391492">Derek He</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2013-06-18T20:48:15+0000">June 18, 2013 at 8:48 pm</time></p><div class="comment-content" itemprop="commentText"><p>lol Unicode.</p>
</div></li><li id="comment-206912692795171_999405" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=578696859">Gunnar Dalsnes</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2014-01-02T01:28:05+0000">January 2, 2014 at 1:28 am</time></p><div class="comment-content" itemprop="commentText"><p>I&#039;m confused. So this was actually a bug in python 2.5?</p>
</div></li><li id="comment-206912692795171_669753" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=1719563894">Daniel Cormier</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2013-06-19T00:21:56+0000">June 19, 2013 at 12:21 am</time></p><div class="comment-content" itemprop="commentText"><p>&quot;When users expose vulnerabilities, avoid antagonizing them if possible. They can probably provide valuable help on how to reproduce and perhaps even how to fix the issue. In this case the two users who posted to the forum where actually rewarded with some Spotify premium months.&quot;</p>
<p>I think they earned permanent premium accounts.</p>
</div></li><li id="comment-206912692795171_669474" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=610173408">Jonathan Crane</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2013-06-18T18:58:53+0000">June 18, 2013 at 6:58 pm</time></p><div class="comment-content" itemprop="commentText"><p>This is one of more interesting IT related articles I&#039;ve read in a while.  I&#039;m a fan of using Unicode wherever possible, so it was very helpful to me.</p>
</div></li><li id="comment-206912692795171_669591" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=518007830">Matty Larose</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2013-06-18T20:58:21+0000">June 18, 2013 at 8:58 pm</time></p><div class="comment-content" itemprop="commentText"><p>Now that, that is a &quot;good bug&quot;.</p>
</div></li><li id="comment-206912692795171_669675" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=1062056088">Mortimer Neuß</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2013-06-18T22:54:06+0000">June 18, 2013 at 10:54 pm</time></p><div class="comment-content" itemprop="commentText"><p>I think we can all live very good without unicode snowman usernames anyway :)</p>
</div></li><li id="comment-206912692795171_670798" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=1435142475">Alex Ford</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2013-06-19T13:17:49+0000">June 19, 2013 at 1:17 pm</time></p><div class="comment-content" itemprop="commentText"><p>Good article. However, I&#039;m curious: why do you store the canonical username at all?</p>
<p>In applications I&#039;ve written I always store the verbatim username. Then I simply convert the verbatim to canonical wherever necessary. I&#039;m used to MSSQL which is not case sensitive and I can query for the stored verbatim username using whatever the user supplies as input.</p>
<p>Is it the case that your database is case-sensitive so you must store the canonical username and only query using the canonical username? If so then it does make sense to store both the verbatim and canonical names; canonical for querying and verbatim so you can display the username properly as the user intended when signing up. I&#039;m just curious if this is the case or if there is another reason to store canonical usernames.</p>
</div></li><li id="comment-206912692795171_670235" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=1430078421">Ben Lindelof</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2013-06-19T06:29:39+0000">June 19, 2013 at 6:29 am</time></p><div class="comment-content" itemprop="commentText"><p>Wouldn&#039;t the canonical value of unicode strings be the unicode strings themselves? If you are working with unicode strings, it&#039;s best to support unicode instead of trying to re-encode the string.</p>
</div></li><li id="comment-206912692795171_669665" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=1496460004">Stephen Bryant</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2013-06-18T22:43:33+0000">June 18, 2013 at 10:43 pm</time></p><div class="comment-content" itemprop="commentText"><p>While y&#039;all are on the subject of less-common characters, could you fix the inability to login on the website with a backtick in your username? Thanks :)</p>
</div></li><li id="comment-206912692795171_671274" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=590758368">Gordon Wrigley</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2013-06-19T16:38:21+0000">June 19, 2013 at 4:38 pm</time></p><div class="comment-content" itemprop="commentText"><p>Was there a particular reason why you didn&#039;t change it to iterate until it got to a fixed point?</p>
</div></li><li id="comment-206912692795171_669479" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=1008530340">Saad Lambé</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2013-06-18T19:05:44+0000">June 18, 2013 at 7:05 pm</time></p><div class="comment-content" itemprop="commentText"><p>Unicode Symbol Equivalence always was a nightmare. Avoiding it 99% of the time works well.</p>
</div></li><li id="comment-206912692795171_669660" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=1076587596">Samuel Williams</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2013-06-18T22:31:29+0000">June 18, 2013 at 10:31 pm</time></p><div class="comment-content" itemprop="commentText"><p>Isn&#039;t the main take away point here that unit testing is a critical part of any system?</p>
</div></li><li id="comment-206912692795171_849888" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=1185447369">Amanda Spencer</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2013-09-25T03:56:49+0000">September 25, 2013 at 3:56 am</time></p><div class="comment-content" itemprop="commentText"><p>There&#039;s a new website called www.PlaylistHQ.com that allows you to generate spotify playlists for upcoming concerts! It&#039;s a great way to get pumped up before a show! </p>
</div></li><li id="comment-206912692795171_670121" class="comment" itemprop="comment" itemscope itemtype="http://schema.org/UserComments"><p><a rel="nofollow" itemprop="creator" href="https://www.facebook.com/profile.php?id=100005162827530">Marc Dufour</a>:</p><p class="metadata"><time itemprop="commentTime" datetime="2013-06-19T05:24:00+0000">June 19, 2013 at 5:24 am</time></p><div class="comment-content" itemprop="commentText"><p>I&#039;ve seen people use the similarities of some Unicode latin, greek and cyrillic glyphs to impersonate some user accounts on some chat websites….</p>
<p>Michael ≠ Мiсhаеl ≠ Μichael.</p>
</div></li></ol></noscript>
<div class="fb-social-plugin fb-comments" id="commentform" data-href="http://labs.spotify.com/2013/06/18/creative-usernames/" data-width="475" data-num-posts="21" data-order-by="social"></div>
</div></div>

				
			</div><!-- #content -->
		</div><!-- #primary -->

<script type='text/javascript'>
								var _gaq = _gaq || [];
								_gaq.push(['_setAccount', 'UA-5784146-15']);
_gaq.push(['_trackPageview']);

								(function() {
									var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
									ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
									var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
								})();
							</script>

	</div><!-- #main -->

	<footer id="colophon" role="contentinfo">

			

			<div id="site-generator">
				Theme: Twenty Eleven <span class="sep"> | </span>				<a href="http://wordpress.org/" title="Semantic Personal Publishing Platform">Proudly powered by WordPress</a>
			</div>
	</footer><!-- #colophon -->
</div><!-- #page -->

<script type="text/javascript">var lf_config = [{"collectionMeta":"eyJ0eXAiOiJqd3QiLCJhbGciOiJIUzI1NiJ9.eyJ0aXRsZSI6IkNyZWF0aXZlIHVzZXJuYW1lcyBhbmQgU3BvdGlmeSBhY2NvdW50Jm5ic3A7aGlqYWNraW5nIiwidXJsIjoiaHR0cDpcL1wvbGFicy5zcG90aWZ5LmNvbVwvMjAxM1wvMDZcLzE4XC9jcmVhdGl2ZS11c2VybmFtZXNcLyIsInRhZ3MiOiIiLCJjaGVja3N1bSI6ImQzNzBiNWE4NzA3MWJjMTY4NjBjNmJmNWNlNzJkMWRiIiwiYXJ0aWNsZUlkIjoyNzl9.P8uAWBd52EnGyGrANlF67rUH-YwsCNnx97cQyzfKN1c","checksum":"d370b5a87071bc16860c6bf5ce72d1db","siteId":"327936","articleId":279,"betaBanner":false,"el":"comments"}];var conv = fyre.conv.load({}, lf_config);</script><script type='text/javascript' src='//0.gravatar.com/js/gprofiles.js?ver=201427x'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://s2.wp.com/wp-content/mu-plugins/gravatar-hovercards/wpgroho.js?m=1380573781g'></script>

	<script>
		//initialize and attach hovercards to all gravatars
		jQuery( document ).ready( function( $ ) {
			if ( typeof Gravatar.init !== "function" ) {
				return;
			}			

			Gravatar.profile_cb = function( hash, id ) {
				WPGroHo.syncProfileData( hash, id );
			};
			Gravatar.my_hash = WPGroHo.my_hash;
			Gravatar.init( 'body', '#wp-admin-bar-my-account' );
		});
	</script>

		<div style="display:none">
	<div class="grofile-hash-map-24b9b90da2974a1f766c7733dd40524a">
	</div>
	<div class="grofile-hash-map-035cfc664ca98cbd587a454d890cc909">
	</div>
	<div class="grofile-hash-map-a89488737c0e0102a039bcb717da6610">
	</div>
	</div>
<script type='text/javascript'>
/* <![CDATA[ */
var HighlanderComments = {"loggingInText":"Logging In\u2026","submittingText":"Posting Comment\u2026","postCommentText":"Post Comment","connectingToText":"Connecting to %s","commentingAsText":"%1$s: You are commenting using your %2$s account.","logoutText":"Log Out","loginText":"Log In","connectURL":"http:\/\/spotifylabscom.wordpress.com\/public.api\/connect\/?action=request","logoutURL":"https:\/\/spotifylabscom.wordpress.com\/wp-login.php?action=logout&_wpnonce=549b3c572c","homeURL":"http:\/\/labs.spotify.com\/","postID":"279","gravDefault":"identicon","enterACommentError":"Please enter a comment","enterEmailError":"Please enter your email address here","invalidEmailError":"Invalid email address","enterAuthorError":"Please enter your name here","gravatarFromEmail":"This picture will show whenever you leave a comment. Click to customize it.","logInToExternalAccount":"Log in to use details from one of these accounts.","change":"Change","changeAccount":"Change Account","comment_registration":"1","userIsLoggedIn":"","isJetpack":"0"};
/* ]]> */
</script>
<script type='text/javascript' src='http://s1.wp.com/_static/??/wp-content/js/jquery/jquery.autoresize.js,/wp-content/mu-plugins/highlander-comments/script.js?m=1403644162j'></script>

	<script type="text/javascript">
		WPCOM_sharing_counts = {"http:\/\/labs.spotify.com\/2013\/06\/18\/creative-usernames\/":279}	</script>
		<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-twitter' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-facebook' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
				return false;
			});
		});
		</script>
		<script type='text/javascript' src='http://s0.wp.com/_static/??/wp-content/js/devicepx.js,/wp-includes/js/comment-reply.min.js?m=1399919068j'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var FB_WP=FB_WP||{};FB_WP.queue={_methods:[],flushed:false,add:function(fn){FB_WP.queue.flushed?fn():FB_WP.queue._methods.push(fn)},flush:function(){for(var fn;fn=FB_WP.queue._methods.shift();){fn()}FB_WP.queue.flushed=true}};window.fbAsyncInit=function(){FB.init({"channelUrl":"http:\/\/spotifylabscom.wordpress.com\/wp-content\/themes\/vip\/plugins\/facebook\/channel.php","xfbml":true,"appId":"322118224564145"});if(FB_WP && FB_WP.queue && FB_WP.queue.flush){FB_WP.queue.flush()}}
/* ]]> */
</script>
<div id="fb-root"></div><script type="text/javascript">(function(d){var id="facebook-jssdk";if(!d.getElementById(id)){var js=d.createElement("script"),ref=d.getElementsByTagName("script")[0];js.id=id,js.async=true,js.src="http:\/\/connect.facebook.net\/en_US\/all.js",ref.parentNode.insertBefore(js,ref)}})(document)</script>
<script type='text/javascript'>
/* <![CDATA[ */
var recaptcha_options = {"lang":"en"};
/* ]]> */
</script>
<script type='text/javascript' src='http://s2.wp.com/wp-content/mu-plugins/post-flair/sharing/sharing.js?m=1394096990g'></script>
<script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script><script src="http://s.stats.wordpress.com/w.js?21" type="text/javascript"></script>
<script type="text/javascript">
st_go({'blog':'45123433','v':'wpcom','tz':'0','user_id':'0','post':'279','subd':'spotifylabscom'});
function st_vt() {var x=document.createElement("img");x.src="http://stats.wordpress.com/g.gif?blog=45123433&v=wpcomvt&tz=0&user_id=0&post=279&subd=spotifylabscom&rand="+Math.random();}
ex_go({'crypt':'UE40eW5QN0p8M2Y/RE1BNmNJfGhxNCVxUDExYmtib2E/SzdEJm0lUEtbdFU0fFk4cHZvcUFrZT90Tn4yQm1+R3NyNTdsfDEufFhSamwtNSwsMUJbMFhDTGVrR0p3eDhhRCtmXz9SMGhTOXdsSVksbF1wW0w5c3E/cWtBTVloUktfVjREOWlfPVMlTzNQVFk4QjV6YX5aNzBDQm1xT3M9XWRPclttRDBhVCZ3d1o1USwrSThZT01Taks2V3JlZ016TFY1Z2FGOUZlcTRaWTI9aHNMTGM2TnMwNCY3ZGdpNk5jTm9+L0FvTUotZz9Cbj1mODVzaVZaUSZMeUVGT3Z8R2kwaG9iRVtKYX43'});
addLoadEvent(function(){linktracker_init('45123433',279);});
	</script>
<noscript><img src="http://stats.wordpress.com/b.gif?v=noscript" style="height:0px;width:0px;overflow:hidden" alt="" /></noscript>
<script>
if ( 'object' === typeof wpcom_mobile_user_agent_info ) {

	wpcom_mobile_user_agent_info.init();
	var mobileStatsQueryString = "";
	
	if( false !== wpcom_mobile_user_agent_info.matchedPlatformName )
		mobileStatsQueryString += "&x_" + 'mobile_platforms' + '=' + wpcom_mobile_user_agent_info.matchedPlatformName;
	
	if( false !== wpcom_mobile_user_agent_info.matchedUserAgentName )
		mobileStatsQueryString += "&x_" + 'mobile_devices' + '=' + wpcom_mobile_user_agent_info.matchedUserAgentName;
	
	if( wpcom_mobile_user_agent_info.isIPad() )
		mobileStatsQueryString += "&x_" + 'ipad_views' + '=' + 'views';

	if( "" != mobileStatsQueryString ) {
		new Image().src = document.location.protocol + '//stats.wordpress.com/g.gif?v=wpcom-no-pv' + mobileStatsQueryString + '&baba=' + Math.random();
	}
	
}
</script>
</body>
</html>