<!DOCTYPE html>
<html lang="en">
<head>




<script id="before-content" type="text/javascript">
(function () {
    if (typeof window.sdmedia !== 'object') window.sdmedia = {};
    if (typeof window.sdmedia.site !== 'object') window.sdmedia.site = {};

    var site = window.sdmedia.site;
    site.rootdir = "//slashdot.org";
}());

var pageload = {
	pagemark: '60476799443046872',
	before_content: (new Date).getTime()
};
function pageload_done( $, console, maybe ){
	pageload.after_readycode	= (new Date).getTime();
	pageload.content_ready_time	= pageload.content_ready - pageload.before_content;
	pageload.script_ready_time	= pageload.after_readycode - pageload.content_ready;
	pageload.ready_time		= pageload.after_readycode - pageload.before_content;
	// Only report 1% of cases.
	maybe || (Math.random()>0.01) || $.ajax({ data: {
		op: 'page_profile',
		pagemark: pageload.pagemark,
		dom: pageload.content_ready_time,
		js: pageload.script_ready_time
	} });
}
</script>


	<title>Interviews: Guido van Rossum Answers Your Questions - Slashdot</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

	<meta name="description" content="Last week you had a chance to ask Guido van Rossum, Python's BDFL (Benevolent Dictator For Life), about all things Python and his move to Dropbox. Guido wasted no time answering your questions and you'll find his responses below....">
	<meta itemprop="name" content="Interviews: Guido van Rossum Answers Your Questions - Slashdot">
	<meta itemprop="description" content="Last week you had a chance to ask Guido van Rossum, Python's BDFL (Benevolent Dictator For Life), about all things Python and his move to Dropbox. Guido wasted no time answering your questions and you'll find his responses below....">


	<meta property="fb:admins" content="100000696822412">
	<meta property="fb:page_id" content="267995220856">

	<meta name="viewport" content="width=1000, user-scalable=yes, minimum-scale=0, maximum-scale=10.0" />
	<meta name="apple-mobile-web-app-capable" content="yes">
	<meta name="apple-mobile-web-app-status-bar-style" content="black">

	<meta property="og:image" content="http://a.fsdn.com/sd/topics/python_64.png">


	<link rel="canonical" href="http://developers.slashdot.org/story/13/08/25/2115204/interviews-guido-van-rossum-answers-your-questions">


<!--[if IE 8]><link rel="stylesheet" type="text/css" media="screen, projection" href="//a.fsdn.com/sd/ie8-classic.css?release_20140618" ><![endif]-->
<link rel="stylesheet" type="text/css" media="screen, projection" href="//a.fsdn.com/sd/classic.css?release_20140618" >
<!--[if IE 7]><link rel="stylesheet" type="text/css" media="screen, projection" href="//a.fsdn.com/sd/ie7-classic.css?release_20140618" ><![endif]-->







<!--  -->








<script src="//a.fsdn.com/sd/all-minified.js?release_20140618" type="text/javascript"></script>


<script type="text/javascript">
(function(){
var regexp=/\s*(?:\d+|many)\s+more\s*/i;

	
	var auto_more_count = 1;

	function auto_more(){
		var $more_link = $('#more-experiment a');
		$more_link.each(function(){
			var $lastitem = $('#firehoselist>article.fhitem:visible:last');
			if ( Bounds.intersect(window, $lastitem) ) {
			
			
				!--auto_more_count && (auto_more=undefined);
				// don't allow a call till the next paginate gets built and |more_possible|
				$(document).unbind('scroll', call_auto_more);
			}
		});
	};

	function call_auto_more(){ auto_more && auto_more(); }
	

$('#more-experiment a').
	live('more-possible', function( event ){
		var $more_link=$(this);
		if ( regexp.test($more_link.text()) ) {
		
			$(document).bind('scroll', call_auto_more);
		} else {
			$(document).unbind('scroll', call_auto_more);
		
		}
	});
})();
</script>
<!--[if lt IE 9]><script src="//a.fsdn.com/sd/html5.js"></script><![endif]-->


<script type="text/javascript">
(function() {
    if (typeof window.janrain !== 'object') window.janrain = {};
    if (typeof window.janrain.settings !== 'object') window.janrain.settings = {};
    
    /* _______________ can edit below this line _______________ */

    janrain.settings.tokenUrl = 'https://slashdot.org/token_callback.pl';
    janrain.settings.type = 'embed';
    janrain.settings.appId = 'ggidemlconlmjciiohla';
    janrain.settings.appUrl = 'https://login.slashdot.org';
    janrain.settings.providers = ["google","twitter","facebook", "linkedin"];
    janrain.settings.providersPerPage = '4';
    janrain.settings.format = 'one column';
    janrain.settings.actionText = 'Sign in using your account with';
    janrain.settings.showAttribution = false;
    janrain.settings.fontColor = '#666666';
    janrain.settings.fontFamily = 'lucida grande, Helvetica, Verdana, sans-serif';
    janrain.settings.backgroundColor = '#ffffff';
    janrain.settings.width = '308';
    janrain.settings.borderColor = '#C0C0C0';
    janrain.settings.borderRadius = '5';    janrain.settings.buttonBorderColor = '#CCCCCC';
    janrain.settings.buttonBorderRadius = '5';
    janrain.settings.buttonBackgroundStyle = 'gradient';
    janrain.settings.language = 'en';
    janrain.settings.linkClass = 'janrainEngage';

    /* _______________ can edit above this line _______________ */

    function isReady() { janrain.ready = true; };
    if (document.addEventListener) {
      document.addEventListener("DOMContentLoaded", isReady, false);
    } else {
      window.attachEvent('onload', isReady);
    }

    var e = document.createElement('script');
    e.type = 'text/javascript';
    e.id = 'janrainAuthWidget';

    if (document.location.protocol === 'https:') {
      e.src = 'https://rpxnow.com/js/lib/login.slashdot.org/engage.js';
    } else {
      e.src = 'http://widget-cdn.rpxnow.com/js/lib/login.slashdot.org/engage.js';
    }

    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(e, s);
})();
</script>

<script type="text/javascript">
(function() {
    if (typeof window.janrain !== 'object') window.janrain = {};
    if (typeof window.janrain.settings !== 'object') window.janrain.settings = {};
    if (typeof window.janrain.settings.share !== 'object') window.janrain.settings.share = {};
    if (typeof window.janrain.settings.packages !== 'object') janrain.settings.packages = [];
    janrain.settings.packages.push('share');

    /* _______________ can edit below this line _______________ */

    janrain.settings.share.providers = ["facebook","twitter","linkedin"];
    janrain.settings.share.providersEmail = [];
    janrain.settings.share.modes = ["broadcast","contact"];
    janrain.settings.share.attributionDisplay = false;
    janrain.settings.share.message = "";
    janrain.settings.share.title = "";
    janrain.settings.share.url = "";
    janrain.settings.share.description = "";

    // Modal Styles
    janrain.settings.share.modalBackgroundColor = "#000000";
    janrain.settings.share.modalBorderRadius = "5";
    janrain.settings.share.modalOpacity = "0.5";
    janrain.settings.share.modalWidth = "5";

    // Body Styles
    janrain.settings.share.bodyBackgroundColor = "#009DDC";
    janrain.settings.share.bodyBackgroundColorOverride = false;
    janrain.settings.share.bodyColor = "#333333";
    janrain.settings.share.bodyContentBackgroundColor = "#ffffff";
    janrain.settings.share.bodyFontFamily = "Helvetica";
    janrain.settings.share.bodyTabBackgroundColor = "#f8f8f8";
    janrain.settings.share.bodyTabColor = "#000000";

    // Element Styles
    janrain.settings.share.elementBackgroundColor = "#f6f6f6";
    janrain.settings.share.elementBorderColor = "#cccccc";
    janrain.settings.share.elementBorderRadius = "3";
    janrain.settings.share.elementButtonBorderRadius = "6";
    janrain.settings.share.elementButtonBoxShadow = "3";
    janrain.settings.share.elementColor = "#333333";
    janrain.settings.share.elementHoverBackgroundColor = "#eeeeee";
    janrain.settings.share.elementLinkColor = "#009DDC";

    /* _______________ can edit above this line _______________ */

    function isReady() { janrain.ready = true; };
    if (document.addEventListener) {
        document.addEventListener("DOMContentLoaded", isReady, false);
    } else {
        window.attachEvent('onload', isReady);
    }

    var e = document.createElement('script');
    e.type = 'text/javascript';
    e.id = 'janrainWidgets';

    if (document.location.protocol === 'https:') {
      e.src = 'https://rpxnow.com/js/lib/login.slashdot.org/widget.js';
    } else {
      e.src = 'http://widget-cdn.rpxnow.com/js/lib/login.slashdot.org/widget.js';
    }

    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(e, s);
})();

$(document).ready(function(){
    if(janrain) {
        $("a.janrain").live('click', function () {

            var $anchor = $(this);
            var provider = $anchor.attr("data-provider");
            var url = $anchor.attr("data-url");
            var message = $anchor.attr("data-message");
            var title = $anchor.attr("data-title");

            janrain.engage.share.reset();
            janrain.engage.share.showProvider(provider);
            janrain.engage.share.setTitle(title);
            janrain.engage.share.setMessage(message);
            janrain.engage.share.setUrl(url);
            janrain.engage.share.show();
            return false;
         });
    }
});


</script><link rel="top"       title="News for nerds, stuff that matters" href="//slashdot.org/" >
<link rel="search"    title="Search Slashdot" href="//developers.slashdot.org/search.pl">
<link rel="alternate" title="Slashdot RSS" href="http://rss.slashdot.org/Slashdot/slashdotDevelopers" type="application/rss+xml">
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
<!-- load GPT library: synchronous -->
<script type='text/javascript'>
(function() {
	var useSSL = 'https:' === document.location.protocol;
	var src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';
	document.write('<scr' + 'ipt src="' + src + '"></scr' + 'ipt>');
})();
</script>



<!-- prep GPT ads -->
<script type='text/javascript'>
(function() {
	function page_type (loc) {
		/*
		only four page types:
		- Story
		- Poll
		- Homepage (/ only)
		- Other (but AdOps wants 'Homepage' again)
		*/
		var path = loc.pathname;
		var just_the_root = /^\/?$/.test(path);
		var story_or_poll = /^\/(story|submission|poll)\//i.exec(path);

		var page_type = just_the_root ? 'homepage'
		              : story_or_poll ? story_or_poll[1]
		              :                 'other'

		// exceptions
		page_type = page_type.toLowerCase() === 'submission'
		          ? 'story'  // submissions are like stories, right?
		          : page_type
		page_type = page_type.toLowerCase() === 'other'
		          ? 'homepage'  // this one might move out of here
		          : page_type;

		return page_type;
	}
	function page_section (loc) {
		var greek = ['alpha', 'beta', 'gamma', 'delta'].join('|');
		var hostwise = '^([a-z]+)(?:-(?:'+greek+'))?\\.(?:slashdot\\.org|[a-z]+-[0-9]+\\.sb\\.sf\\.net)$';
		var pathwise = '^/(?:(recent|popular|blog)|stories/([^/]+))';
		var rootwise = '^\/?$';

		var hostwisely = new RegExp(hostwise,'i').exec(loc.hostname);
		var pathwisely = new RegExp(pathwise,'i').exec(loc.pathname);
		var rootwisely = new RegExp(rootwise,'i').exec(loc.pathname);

		var all_greek_to_me = new RegExp( '^(' + greek + ')$' ,'i');

		function no_greek_for_me (barbarian) {
			return all_greek_to_me.test(barbarian)
			     ? false
			     : barbarian
			     ;
		}

		var section = (hostwisely && no_greek_for_me(hostwisely[1]))
		           || (rootwisely && 'homepage')
		           || (pathwisely && (pathwisely[1] || pathwisely[2]))
		           || ''
		            ;

                section.replace(/[^_a-z]/ig, '');

		return section;
	}
	function single_size (size) {
		return '' + size[0] + 'x' + size[1];
	}
	function sz_sz (sz) {
		var str = '';
		var sizes = [];
		if (sz[0] instanceof Array) {
			for (size in sz) {
				sizes.push(single_size(sz[size]));
			}
			return sizes.join(',');
		} else {
			return single_size(sz);
		}
	}

	/* LEGEND: 
		- 'sz' = "size"
		- 'npt' = "no page type" in ad unit name
		- 'oops' = "out-of-page slot" for great justice
	*/
	var tags = {

		               '728x90_A': { 'sz': [728, 90], 'oops': 1 }

		,              '728x90_B': { 'sz': [728, 90] }
		,      'HubIcon_200x90_A': { 'sz': [200, 90] }
		,  'PowerSwitch_980x66_A': { 'sz': [980, 66] }
		,              'PollPeel': { 'sz': [200, 90] }
		,   'VideoWidget_300x250': { 'sz': [300, 250], 'npt': 1 }
		,             '300x250_A': { 'sz': [[300, 250], [300, 600]] }
		,             '300x250_B': { 'sz': [[300, 250], [300, 600]] }
		,             '300x250_C': { 'sz': [[300, 250], [300, 600]] }
		,             '300x250_D': { 'sz': [[300, 250], [300, 600]] }
	};

	var network_path = '/4140/ostg.slashdot/';
	var tag_name_prefix = 'SD';
	var tag_name_linkage = '_';
	var tag_name_pagetype = page_type(location);
	var tag_topic = page_section(location);

	var before_tag_pagetyped    = network_path
	                            + tag_name_prefix
	                            + tag_name_linkage
	                            + tag_name_pagetype
	                            + tag_name_linkage
	                            ;
	var before_tag_pagetypeless = network_path
	                            + tag_name_prefix
	                            + tag_name_linkage
	                         /* + tag_name_pagetype */
	                         /* + tag_name_linkage */
	                            ;


	googletag.cmd.push(function() {
		function define_me_a_slot (tag, oops) {
			var sandbox_regex = /[a-z]+-[0-9]+\.sb\.sf\.net$/i;
			var beta_regex = /\b(alpha|beta|gamma|delta)\b/i;
			var full_name = tags[tag].npt  // "no page type"
			              ? before_tag_pagetypeless + tag
			              : before_tag_pagetyped    + tag
			              ;
			var div_id = 'div-gpt-ad-' + tag.toLowerCase();

			var service;
			if (oops) {  // out-of-page slot
				console.log(full_name + ": define out of page slot (" + div_id + "-oops)");
				service = googletag.defineOutOfPageSlot(
					  full_name
					, div_id + '-oops'
				).addService(googletag.pubads());
			} else {
				console.log(full_name + ": define slot (" + div_id + ")");
				service = googletag.defineSlot(
					  full_name
					, tags[tag].sz
					, div_id
				).addService(googletag.pubads());
			}
			if (!oops) {  // no sizes for out-of-page slots
				service.setTargeting('sz', tags[tag].sz);
			}
			service.setTargeting('tpc', tag_topic);
			if (location.hostname.match(sandbox_regex)) {
				service.setTargeting('test', 'adops');
			}
			if (location.hostname.match(beta_regex)) {
				service.setTargeting('site', 'beta');
			}

			// this is a little hackish: if slot has oops:1
			//  then do the same slot one more time,
			//  but set it up as out-of-page
			if (tags[tag].oops) {  // "out-of-page slot"
				tags[tag].oops = 0;  // infinite recursion!
				define_me_a_slot(tag, true);
			}
		}

		for (tag in tags) {
			define_me_a_slot(tag, false);
		}

		googletag.pubads().enableSyncRendering();

		//googletag.pubads().enableSingleRequest();
		googletag.pubads().collapseEmptyDivs();
		googletag.enableServices();
	});
})();
</script>

<script type="text/javascript">
window.google_analytics_uacct = "UA-32013-5";

var _gaq = _gaq || [];





  _gaq.push(['_setAccount', 'UA-36136016-1']);
  _gaq.push(['b._setAccount', 'UA-32013-5']);
  _gaq.push(['_setDomainName', '.slashdot.org']);
  _gaq.push(['b._setDomainName', '.slashdot.org']);

	
		_gaq.push(['_addIgnoredRef', 'slashdot.org']);
		_gaq.push(['b._addIgnoredRef', 'slashdot.org']);
	


  _gaq.push(['_setCustomVar', 1, 'User Type',  'Anon', 3]);
  _gaq.push(['b._setCustomVar', 1, 'User Type',  'Anon', 3]);		
	
	_gaq.push(['_setCustomVar', 2, 'Page','article2', 3]);
	_gaq.push(['b._setCustomVar', 2, 'Page','article2', 3]);

	



// track beta behavior for user
var betamatches = document.cookie.match(/betagroup=(-?\d+)/);

if(betamatches && betamatches[1]) {
  if(betamatches[1] == -1) {
    _gaq.push(['_setCustomVar', 3, 'Beta-Usage','opt-out', 3]);
  } else {
    _gaq.push(['_setCustomVar', 3, 'Beta-Usage','unredirected', 3]);
  }
}



  _gaq.push(['_trackPageview']);
  _gaq.push(['b._trackPageview']);
  _gaq.push(['_trackPageLoadTime']);
  _gaq.push(['b._trackPageLoadTime']);




  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

</head>
<body class="anon firehose ">


	<div id="top_parent"></div>
	<a name="topothepage"></a>

<div id="topadspace">
	<table id="topadtable"><tr><td>
	<div id='div-gpt-ad-728x90_a'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-728x90_a');});</script></div>
	<div id='div-gpt-ad-728x90_a-oops'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-728x90_a-oops');});</script></div>
	</td>
	<td>
	<div id='div-gpt-ad-hubicon_200x90_a'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-hubicon_200x90_a');});</script></div>
	</td></tr></table>
</div>

	<header class="col_wrapper container clearfix h">
            <hgroup>
                <section class="grid_9">
			<div id="logo" >
				<a href="//slashdot.org"><span>Slashdot</span></a>
        			<div id="jump" class="hide">
                			<a href="#main-articles">Stories</a><br>
                			<a href="#blocks">Slash Boxes</a><br>
                			<a href="#comments">Comments</a>
        			</div>
			</div>
         <a class='data-title' href='/slash-stats/week' id='sg_hof_mvtest_title' onclick="showHof('week'); return false;"><span class='ui-icon medal ico-w'></span></a>
		


			<form id="search" method="get" action="//developers.slashdot.org/index2.pl">
				<input type="text" name="fhfilter" value="" id="searchquery">
				<span class="ui-icon search"></span>
				<input type="submit" value="Search">
				
			</form>
			
			
                </section>
                <nav role="top-navigation" class="grid_15">
		<ul class="dropnav">

	<li >
		<a href="//slashdot.org/my/newuser"   onclick="getModalPrefs('newUserModal', 'Create Account', 1); $('#modal_box').addClass('join'); return false;">Join</a>
		
	</li>

	<li >
		<a href="//slashdot.org/my/login"   onclick="show_login_box(); return false;">Login</a>
		
	</li>

	<li >
		<a href="//slashdot.org/submission"    title="Submit a Story to Slashdot">Submit</a>
		
	</li>

	<li >
		<a href="http://beta.slashdot.org/newsletter"  target="_blank"  title="Subscribe to Slashdot Newsletter & Emails">Newsletter</a>
		
	</li>

	<li >
		<a href="//slashdot.org/job_board.pl"   >Jobs</a>
		
	</li>

	<li >
		<a href="//tv.slashdot.org" class="btn link slashtvico"  ><span>SlashTV</span></a>
		
	</li>

</ul>


<!-- dropnavstyle begin -->
<style type="text/css">

.dropnav{
	border:none;
	border:0px;
	margin:0px;
	padding:0px;
	font: "Arial, sans-serif;
	font-size:1em;
	font-weight:bold;
	list-style:none;
	padding-top: 3px;
	padding-bottom: 3px;
	}
.dropnav ul{
	padding-top:10px;
	background:none;
	height:25px;
	list-style:none;
	margin:0;
	padding:0;
	}
	.dropnav li{
		float:right;
		padding:0px;
		}
	.dropnav li a{
		background:none bottom right no-repeat;
		color:#ffffff;
		display:block;
		font-weight:normal;
		line-height:25px;
		margin:0px;
		padding:0px 5px;
		padding-bottom: 6px;
		text-align:center;
		text-decoration:none;
		}
		.dropnav li a:hover, .dropnav ul li:hover a{
			 /* background: #005555 bottom center no-repeat; */
			  color:#FFFFFF;
			  text-decoration:underline; 
			}
	.dropnav li ul{
		background:#004242;
		display:none;
		height:auto;
		min-width:100px;
		margin:0px;
		padding:0px;
		border:0px;
		position:absolute;
		z-index:200;
		/*top:1em;
		/*left:0;*/
		}
	.dropnav li:hover ul{
		display:block;
		
		}
	.dropnav li li {
		display:block;
		float:none;
		min-width:100px;
		margin:0px;
		padding:0px;
		}
	.dropnav li:hover li a{
		background:none;
		
		}
	.dropnav li ul a{
		display:block;
		height:25px;
		font-size:12px;
		font-style:normal;
		margin:0px;
		padding:0px 10px 0px 15px;
		text-align:left;
		}
		.dropnav li ul a:hover, .dropnav li ul li:hover a{
		 	background:#005555 center left no-repeat; 
			border:0px;
			color:#ffffff;
			text-decoration:none;
			}
	.dropnav p{
		clear:left;
		}

	.dropnav li.droparrowneeded>a:after {
		content: "\25BE";
		margin-left: 5px; 
		text-decoration: none;
	}

		
</style>
<!-- dropnavstyle end -->
		
                </nav>
            </hgroup>
        </header>




	<section>
   
      <div id='embbeded_login_modal' class="hide">
<form action="https://slashdot.org/my/login" method="post" onsubmit="if (global_returnto) { this.returnto.value = global_returnto }" class="embedded"><fieldset style="-webkit-border-radius:10px 10px 0 0;border-radius:10px 10px 0 0;-moz-border-radius:10px 10px 0 0">
<div style='height:25px;'>&nbsp;</div>
    <input type="hidden" name="returnto" value="">
    <input type="hidden" name="op" value="userlogin">
    <p>
        <label class="fleft" for="unickname">Nickname:</label>
        <input type="text" name="unickname" value="">
    </p>
    <p>
        <label class="fleft" for="upasswd">Password:</label>
        <input type="password" name="upasswd" placeholder="6-20 characters long">
    </p>
    <label class="checkbox"><input type="checkbox" name="login_temp" value="yes"> Public Terminal</label>
    <br>
    <hr>
    <input type="submit" name="userlogin" value="Log In" class="fno"> <a href="//slashdot.org/my/mailpassword" class="btn link" onclick="getModalPrefs('sendPasswdModal', 'Retrieve Password', 1); return false;">Forgot your password?</a>
</fieldset></form>

<div id="janrainEngageEmbed"></div>
<div class="actions">
 <a class="ico close" onclick="hide_login_slider();" href=""><span>Close</span></a>
</div>
</div>
   
   <div id='div-gpt-ad-powerswitch_980x66_a'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-powerswitch_980x66_a');});</script></div>
		<a name="main-articles"></a><!-- body begin -->






	

	<style type="text/css">
menu, menu * {
	text-decoration:none;
}

menu[type=context] {
	display:none;
	position:absolute;
	z-index:10000;
}

menu[type=context]:not(.brief) {
	background-color:#dfdfdf;
	margin:0;
	padding:2px 0.5em;
	border-style:solid;
	border-width:1px;
	border-color:#eeeeee #aaaaaa #aaaaaa #eeeeee;
	-moz-border-radius-topright:.7em;
	-webkit-border-top-right-radius: 0.7em 0.7em;
}

menu.full[type=context] > a.slash-hover:first-child {
	-moz-border-radius-topright:.6em;
	-webkit-border-top-right-radius: 0.6em 0.6em;
}



menu.brief[type=context] > a {
	-moz-border-radius:.6em;
	-webkit-border-radius: 0.6em;
	color:#ffffff;
	background-color:#000000;
}

/*
span.briefmenu a.tag:not(.datatype) {
    padding-left:.5em;
}
*/




/* #tag-menu a, #feedback-menu a  { */
menu.tag-menu a {
	display:list-item;
	list-style:none;
	text-align:left;
	font-weight:bold;
	color:black;
	padding:0.1em 0.5em;
	margin:-0.1em -0.5em;
	cursor:pointer;
}


.tags .edit-bar { position:relative; }
article aside .share .addthis_toolbox { display:block; width:60px; float:left; }
article aside.view_mode .share { min-width:120px; padding-top:.5em; }
#firehose.list article header h2 {padding-left: 20px; !important}
.novote .vote { display:none; }
.vote > a, .votedup > a, .voteddown > a {border-width:1px; border-style:solid; border-color:rgba(0,0,0,0.25); display:block; height:22px; width:22px; margin:-2px 3px 0 0; color:rgb(255,255,255); text-decoration:none; line-height:22px; text-align:center; font-weight:bold; font-size:14px; float:left; border-width:1px; border-style:solid; border-color:rgba(0,0,0,0.5); }
.vote > a, .votedup > a, .voteddown > a {color:rgb(0,0,0);}
article.fhitem-submission h2 .vote > a, article.fhitem-submission h2 .votedup > a, article.fhitem-submission h2 .voteddown > a { border-color:rgba(0,0,0,0.15); }
.vote .up, .vote .down, .votedup .up, .votedup .down, .voteddown .up, .voteddown .down { border-radius: 4px; -moz-border-radius: 4px; -webkit-border-radius: 4px; text-shadow:0 0 2px #000000; } 
article:not(.fhitem-story) .vote .up,article:not(.fhitem-story) .vote .down,article:not(.fhitem-story) .votedup .up,article:not(.fhitem-story) .votedup .down,article:not(.fhitem-story) .voteddown .up,article:not(.fhitem-story) .voteddown .down { text-shadow:none !important; }
.voteddown .down, .votedup .up { text-indent:2px; line-height:24px; }
article:not(.fhitem-story) .votedup .up,article:not(.fhitem-story) .voteddown .down {background: rgb(174,174,174);background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(174,174,174)), to(rgb(193,193,193)));background-image: -moz-linear-gradient(100% 100% 90deg,rgb(193,193,193), rgb(174,174,174) 100%);color:rgb(0,0,0);}
article.fhitem-story .votedup .up,article.fhitem-story .voteddown .down {background: rgb(0,66,66);background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(0,53,53)), to(rgb(0,102,102)));background-image: -moz-linear-gradient(100% 100% 90deg,rgb(0,102,102), rgb(0,53,53) 100%);}





#tag-menu span.var-tag {
font-weight:normal;
color:#444444;
}

menu.reasons-menu a {
padding:0 .25em 0 .25em;
font-size:80%;
-moz-border-radius:.5em;
-webkit-border-radius:.5em;
cursor:pointer;
}

menu.reasons-menu a:hover {
background:rgb(153,153,153);
background:-moz-linear-gradient(100% 100% 90deg, rgb(102,102,102), rgb(153,153,153) 70%) repeat scroll 0 0 rgb(102,102,102);
background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(153,153,153)), to(rgb(102,102,102)));
color:#fff;
text-decoration:none;
font-weignt:normal;
}

article.fhitem-story menu.reasons-menu a:hover {
background:#002323 !important;
background:-moz-linear-gradient(100% 100% 90deg, #002323, #005353 70%) repeat scroll 0 0 #002323 !important;
background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#005353), to(#002323)) !important;
}


menu.reasons-menu {
	display:none;
	margin:0;
	padding:0;
}

div.fhitem h3 menu.reasons-menu {
margin:0.25em 0 0;
}

div.fhitem h3 menu.reasons-menu a.tag {
font-size:.8em;
}

#tag-menu a.slash-hover,
#feedback-menu a.slash-hover,

.tag-display span.tag:hover,
.tag-display span.tag.trigger {
	color:white;
	background-color:rgb(0, 85, 85);
}

#tag-menu a.slash-hover span.var-tag {
	color:#eee;
}

.tag-entry.default {
        color:#ccc;
}

.brief .nix {
	margin-top:-1.35em;
	margin-left:0px;
	margin-top:-1.15em;
	text-decoration:none;
	line-height:1.35em;
	padding:0 2px;
	-moz-border-radius:.6em 0 0 .6em;
	-webkit-border-radius:.6em 0 0 .6em;
	-o-border-radius:.6em 0 0 .6em;
	border-radius:.6em 0 0 .6em;
    color:#fff !important;
    background:transparent !important;
}

.brief .nix:hover {
    background:rgb(153,153,153) !important;
    background:-moz-linear-gradient(100% 100% 90deg, rgb(102,102,102), rgb(153,153,153) 70%) repeat scroll 0 0 rgb(102,102,102) !important;
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(153,153,153)), to(rgb(102,102,102))) !important;
}

</style>

<menu id="nix-reasons" style="display:none">
	<a class="tag">binspam</a><a class="tag">dupe</a><a class="tag">notthebest</a><a class="tag">offtopic</a><a class="tag">slownewsday</a><a class="tag">stale</a><a class="tag">stupid</a>
</menu>
<menu id="nod-reasons" style="display:none">
	<a class="tag">fresh</a><a class="tag">funny</a><a class="tag">insightful</a><a class="tag">interesting</a><a class="tag">maybe</a>
</menu>
<menu id="comment-nix-reasons" style="display:none">
	<a class="tag">offtopic</a><a class="tag">flamebait</a><a class="tag">troll</a><a class="tag">redundant</a><a class="tag">overrated</a>
</menu>
<menu id="comment-nod-reasons" style="display:none">
	<a class="tag">insightful</a><a class="tag">interesting</a><a class="tag">informative</a><a class="tag">funny</a><a class="tag">underrated</a>
</menu>

<menu id="tag-nod-reasons" style="display:none">
	<a class="tag">descriptive</a>
</menu>
<menu id="feedback-menu" class="tag-menu" type="context">
	<a class="tag">typo</a><a class="tag">dupe</a><a class="tag">error</a>
</menu>
<menu id="tag-menu" class="tag-menu none" type="context">

<!--	<a data-op="!" class="nix">!<span class="var-tag hide"></span></a>-->

</menu>

<script type="text/javascript">
$(function(){
var $CURRENT_MENU, $TAG_MENU=$('#tag-menu'), NOTNOT=/^!!/, IE7=/^7\.0/, TAG_PREFIX=/^\/tag\//;

function get_tag_name( $tag ){
	return ($tag.attr('href') || '').replace(TAG_PREFIX, '') || $tag.text().toLowerCase();
}

function trigger_menu( e, selector, $menu, menu_content ){
	var $target=$(original_target(e, selector)), in_use=$target.is('.trigger');
	if ( $CURRENT_MENU ) {
		$CURRENT_MENU.menu('cancel', e);
		$CURRENT_MENU = null;
	}

	if ( !in_use ) {
		menu_content && $menu.stop(true, true).hide().html(menu_content);
		($CURRENT_MENU=$menu).menu('context', e);
	}
	return !in_use;
}

function open_menu( trigger, $menu ){
	var $trigger=$(trigger), $fhitem=$trigger.closest('.fhitem');
	$fhitem.length && user_intent('interest', $fhitem[0]);

	$menu.appendTo(document.body).css({ opacity:0 }).show();

	var 	right	= $fhitem.offset().left + $fhitem.width(),
		global	= $trigger.offset(),
		local	= $menu.offsetParent().offset();

	// Ugly IE position hack required:
	$.browser.msie && IE7.test($.browser.version) && (local.top = 0);

	// pin the menu (horizontally) on-screen
	global.left = Math.min(global.left, right-$menu.width());

	$trigger.addClass('trigger');
	$menu.css({
		position:	'absolute',
		top:		global.top - local.top + $trigger.height(),
		left:		global.left - local.left,
		opacity:	1
	});
}

function close_menu( trigger, $menu ){
	$menu.hide();
	$(trigger).removeClass('trigger');
	($CURRENT_MENU===$menu) && ($CURRENT_MENU=false);
}

/* T2 tag context-menu */
var $TAG_MENU=$('#tag-menu'), NOTNOT=/^!!/;


    var user_is_admin = 0;

	

$('a[rel=tag]').live('mousedown',function(ea){
    window.open(this.href);
    return false;
})

$('.tag-bar .disagree').live('mousedown',function(ee){
	var fhitem = $(original_target(ee)).closest('.fhitem')[0],
		command = ('!' + $(original_target(ee)).attr("data-tag")).replace(NOTNOT, '');
    try { Tags.submit(fhitem, command); } catch ( err ) {  }
    return false;
})



$('a[rel=tag]').
	live('mousedown', function( e ){
        
            return true;
        

	}).
	live('click', function( e ){
		if ( !logged_in ) {
			var	target	= original_target(e),
				tag	= $(target).text();
			addfhfilter(tag);
		}
		e.preventDefault();
		return false;
	});

$TAG_MENU.menu({
	cssNamespace: 'slash',
	liveTriggers: true,
	clickDuration: 300,

	start: function( e, ui ){
		var	$tag	= $(ui.trigger),
			tag	= get_tag_name($tag),
			context	= firehose_settings && firehose_settings.viewtitle;

		// Insert the tagname into the menu items where needed.
		$TAG_MENU.find('span.var-tag').text(tag);
		$TAG_MENU.find('a.nix').attr('title','not ' + tag);
		

			// non-admins may only delete their own tags
		$TAG_MENU.find('a:[data-op="-"]').toggle($tag.is('.my'));
	

		// *tagname* in *viewtitle*
		$TAG_MENU.find('a:[data-op="="]').toggle(!!context);
		context && $TAG_MENU.find('span.var-view').text(context);

		open_menu($tag, $TAG_MENU);
	},

	select: function( e, ui ){
		var	$tag	= $(ui.trigger),
			tag	= get_tag_name($tag),
			op	= $(ui.select).attr('data-op'),
			fhitem,
			command;

		// Global for positioning other things.
		$related_trigger = $tag;

		switch ( op ) {
			case '=':
				addfhfilter(tag);
				break;

			default:
				fhitem = $tag.closest('.fhitem')[0];
				command = (op + tag).replace(NOTNOT, '');
				try { Tags.submit(fhitem, command); } catch ( err ) {  }
				break;
		}
	},

	stop: function( e, ui ){ close_menu(ui.trigger, $TAG_MENU); }
});




/* T2 feedback context-menu */



/* T2 datatype context-menu (admin-only) */






});
</script>

	


								  <div class="col_1">
									<nav role="sections" id="links" class="left_menu">
										 
										 <ul class="menu" id="fhtablist_new">

			
				
				
				

				
				
					
				
				
				<li class="active Stories">
				
				
				
				<a href="//slashdot.org/stories">Stories</a>
				<span></span>
				</li>
				
				
				
				
				
				<li class="Submissions">
				
				<a href="//slashdot.org/recent">Submissions</a>
				
				</li>
				
				
				
				
				
				<li class="Popular">
				
				<a href="//slashdot.org/popular">Popular</a>
				
				</li>
				
				
				
				
				
				<li class="Blog">
				
				<a href="//slashdot.org/blog">Blog</a>
				
				</li>

		
	</ul>
										 
										<h4 class="hide" id="links-sections-title" >
			
				<a class="data-title" href="//slashdot.org" >Slashdot</a>
				
				
				<script type="data">{ color: "", viewname: "stories", filter: "", name: "Main", id: 13 }</script>

			
		</h4>
	
	
	
	
		<ul id="firehose-sections" role="sections" class="left_menu">
	

	<li class="enhancedspacer"></li>
	 
				

		
		
		<li class="" id="fhsection-askslashdot">
			<a id="fhsectiontitle-4" class="data-title" href="//ask.slashdot.org">Ask Slashdot</a>
			
		</li>
		
	 
				

		
		
		<li class="" id="fhsection-bookreview">
			<a id="fhsectiontitle-6" class="data-title" href="//books.slashdot.org">Book Reviews</a>
			
		</li>
		
	 
				

		
		
		<li class="" id="fhsection-games">
			<a id="fhsectiontitle-10" class="data-title" href="//games.slashdot.org">Games</a>
			
		</li>
		
	 
				

		
		
		<li class="" id="fhsection-idle">
			<a id="fhsectiontitle-28" class="data-title" href="//idle.slashdot.org">Idle</a>
			
		</li>
		
	 
				

		
		
		<li class="" id="fhsection-yro">
			<a id="fhsectiontitle-17" class="data-title" href="//yro.slashdot.org">YRO</a>
			
		</li>
		
	 
				

		
		
		<li class="active" id="fhsection-developers">
			<a id="fhsectiontitle-8" class="data-title" href="//developers.slashdot.org">Developers</a>
			<span></span>
		</li>
		
	
	<li class="enhancedspacer"></li>
	 
				

		
		
		
		<li class="" id="fhsection-cloud">
			<a id="fhsectiontitle-cloud" class="data-title" href="//slashdot.org/stories/cloud">Cloud</a>
			
		</li>
		
	 
				

		
		
		<li class="" id="fhsection-hardware">
			<a id="fhsectiontitle-21" class="data-title" href="//hardware.slashdot.org">Hardware</a>
			
		</li>
		
	 
				

		
		
		<li class="" id="fhsection-linux">
			<a id="fhsectiontitle-19" class="data-title" href="//linux.slashdot.org">Linux</a>
			
		</li>
		
	 
				

		
		
		<li class="" id="fhsection-it">
			<a id="fhsectiontitle-18" class="data-title" href="//it.slashdot.org">Management</a>
			
		</li>
		
	 
				

		
		
		<li class="" id="fhsection-mobile">
			<a id="fhsectiontitle-29" class="data-title" href="//mobile.slashdot.org">Mobile</a>
			
		</li>
		
	 
				

		
		
		<li class="" id="fhsection-science">
			<a id="fhsectiontitle-14" class="data-title" href="//science.slashdot.org">Science</a>
			
		</li>
		
	 
				

		
		
		
		<li class="" id="fhsection-security">
			<a id="fhsectiontitle-security" class="data-title" href="//slashdot.org/stories/security">Security</a>
			
		</li>
		
	 
				

		
		
		
		<li class="" id="fhsection-storage">
			<a id="fhsectiontitle-storage" class="data-title" href="//slashdot.org/stories/storage">Storage</a>
			
		</li>
		
	
	</ul>
									</nav>
								  </div>

								  <div class="col_2">
								     <section id="content" class="grid_24 a2 ">
									<section id="firehose" class="nothumbs">


									    <div id="firehoselist" class="fhroot fleft  grid_24">
										 
										 <article id="firehose-49913257" data-fhid="49913257" data-fhtype="story" class="fhitem fhitem-story article usermode thumbs grid_24">
<span class="sd-info-block" style="display: none">
	<span class="sd-key-firehose-id">49913257</span>
	<span class="type">story</span>
	
</span>

	
	
	
						
						

	<header>
		
			
			<span class="topic" id="topic-49913257">
				<a href="//developers.slashdot.org/index2.pl?fhfilter=python" onclick="return addfhfilter('python');">
			
				<img src="//a.fsdn.com/sd/topics/python_64.png" width="64" height="64" alt="Python" title="Python">
			
		</a>
			</span>
			
		
		<h2 class="story">
				
				
				
			<span id="title-49913257"> <a   href="//developers.slashdot.org/story/13/08/25/2115204/interviews-guido-van-rossum-answers-your-questions">Interviews: Guido van Rossum Answers Your Questions</a></span>
			
			
			<span class="comments commentcnt-49913257" >169</span>
			

                        
		</h2>
		<div class="details" id="details-49913257">
		
		Posted
		by 
	
	
		
			<a href="mailto:samzenpus@slashdot.org" rel="nofollow">samzenpus</a>
		
	
	

	
	
	<time id="fhtime-49913257" datetime="on Monday August 26, 2013 @11:55AM">on Monday August 26, 2013 @11:55AM</time>
	
	
		<br>from the listen-up dept.
	
	</div>
	</header>

	<div class="body" id="fhbody-49913257">

		


			<div id="text-49913257" class="p">
			Last week you had a chance to <a href="http://interviews.slashdot.org/story/13/08/19/1256259/interviews-qa-with-guido-van-rossum?sdsrc=next">ask Guido van Rossum</a>, Python's BDFL (Benevolent Dictator For Life), about all things Python and his move to Dropbox. Guido wasted no time answering your questions and you'll find his responses below.

			</div>

			
			<span class="bodytext"><strong>From Google to Dropbox</strong> <br>
by nurhussein<br> <br> <em>
Hi, What prompted the move from Google to Dropbox? What did you do at Google, and what are you going to do at Dropbox?</em> <br> <br>


<strong>Guido:</strong> After seven years at Google I was just ready for some change in environment, and then the Dropbox offer came along. At a high level, my job hasn't changed much: I still<br> <br>

- spend 50% of my time on whatever I want to do for Python in my BDFL role<br>
- am a regular engineer in the organization (not a manager or even TL)<br>
- do a lot of code reviews, architecture and design work<br>
- handle a lot of email<br>
- do a lot of actual coding for my job, in Python<br> <br>

The specifics differ of course. I really did only two things at Google: the first two years I worked on one of the first online code review tools <a href="http://www.youtube.com/watch?v=sMql3Di4Kgc">Mondrian</a>, which itself was never open-sourced but begat <a href="https://codereview.appspot.com/">Rietveld</a>, which did, and is used amongst others, by the Python, Go and Chromium communities. After that I joined Google App Engine where I did a lot of different things, almost all of them in Python. My last big project there was <a href="https://developers.google.com/appengine/docs/python/ndb/">a new Python database API, NDB</a>.<br> <br>

I've been at Dropbox for 7 months and my main project has been the design of the <a href="https://www.dropbox.com/developers/datastore">Dropbox Datastore API</a> . It's ironic but not my fault that this also uses the "datastore" moniker -- there's little overlap between Dropbox Datastores and the Google App Engine Datastore.<br> <br>

What's even more ironic is that even though I did much of the design, and wrote two prototypes in Python, the SDKs we released last month only support Java, Objective-C and JavaScript. But I am working on a fix, this interview is just slowing me down. :-)<br> <br> <br> <br>


<strong>Why did Python avoid some common "OO" idioms?</strong> <br>
by i_ate_god<br> <br> <em>
Interfaces, abstract classes, private members, etc... Why did python avoid all this?</em> <br> <br>

<strong>Guido:</strong> I can think of two reasons: (a) you don't really need them, and (b) they are hard to do if you have no compile-time type checking. Python started out as a skunkworks project (not endorsed or encouraged by management but not actively prevented), and I wanted results quickly. This led me to remove features that weren't actually needed or urgent; it also led me to do all type checking at run time, which gave me natural constraints on what features Python could support. I also had no religious OO ax to grind -- I just wanted an easy language, and it became OO more or less by accident.<br> <br>

In modern Python there are rough equivalents for all of these, but they don't necessarily work all that well, or they cause a lot of execution overhead, so they are often avoided, but they have their uses and their fans.<br> <br> <br> <br>




<strong>functional programming</strong> <br>
by ebno-10db<br> <br> <em>
Some people claim that Python is, at least partly, a functional language. You disagree, as do I. Simply having a few map and filter type functions does not make for a functional language. As I understand it those functions were added to the libraries by a homesick Lisper, and that several times you've been tempted to eliminate them. In general it seems you're not a fan of functional programming, at least for Python.<br> <br>
Question: do you feel that the functional programming approach is not very useful in general, or simply that it's not appropriate for Python? It would be nice to hear your reasons either way.</em> <br> <br>

<strong>Guido:</strong> I'm not a fan of religiously taking some idea to the extreme, and I try to be pragmatic in my design choices (but not *too* pragmatic, see the start of this sentence :-). I value readability and usefulness for real code. There are some places where map() and filter() make sense, and for other places Python has list comprehensions. I ended up hating reduce() because it was almost exclusively used (a) to implement sum(), or (b) to write unreadable code. So we added builtin sum() at the same time we demoted reduce() from a builtin to something in functools (which is a dumping ground for stuff I don't really care about :-).<br> <br>

If I think of functional programming, I mostly think of languages that have incredibly powerful compilers, like Haskell. For such a compiler, the functional paradigm is useful because it opens up a vast array of possible transformations, including parallelization. But Python's compiler has no idea what your code means, and that's useful too. So, mostly I don't think it makes much sense to try to add "functional" primitives to Python, because the reason those primitives work well in functional languages don't apply to Python, and they make the code pretty unreadable for people who aren't used to functional languages (which means most programmers).<br> <br>

I also don't think that the current crop of functional languages is ready for mainstream. Admittedly I don't know much about the field besides Haskell, but any language *less* popular than Haskell surely has very little practical value, and I haven't heard of functional languages *more* popular than Haskell. As for Haskell, I think it's a great proving ground for all sorts of ideas about compiler technology, but I think its "purity" will always remain in the way of adoption. Having to come to grips with Monads just isn't worth it for most people.<br> <br>

(A similar comment applies to Scala. It may be the best you can do trying to combine functional and OO paradigms in one language, but the result isn't all that easy to use unless you're really smart.)<br> <br> <br> <br>



<strong>Multi-line lambdas</strong> <br>
by NeverWorker1 <br> <br> <em>
One of the most common complaints about Python is the limitations of its lambdas, namely being one line only without the ability to do assignments. Obviously, Python's whitespace treatment is a major part of that (and, IIRC, I've read comments from you to that effect). I've spent quite a bit of time thinking about possible syntax for a multi-line lambda, and the best I've come up with is trying to shoehorn some unused (or little used) symbol into a C-style curly brace, but that's messy at best. Is there a better way, and do you see this functionality ever being added?</em> <br> <br>



<strong>Guido:</strong> Really? I almost never hear that complaint except from people who submit questions to Slashdot interviews. :-)<br> <br>

There is indeed a better way, and that is using the 'def' keyword to define a regular function in a local scope. The defined function object becomes a local variable that has exactly the same semantics as a lambda except that it is bound to a local variable, and it doesn't have any of the syntactic constraints. For example, there is *no* semantic difference between<br> <br>

def make_adder(n):<br>
__def adder(x):<br>
____return x + n<br>
__return adder<br> <br>

and this equivalent using lambda:<br> <br>

def make_adder(n):<br>
__return lambda x: x + n<br> <br>

(except that when you introspect the lambda asking for its name, it will say '' instead of 'adder').<br> <br>

Andrew Koenig once pointed out to me that there's one pattern where lambdas are really much more convenient, and that is if you have a long list or dict (perhaps some kind of switching definition) containing lots of lambdas, since if you wanted to do that without lambda you'd end up first having to define lots of little functions, giving them all names, and then referencing them all by name from inside the list or dict. But in that pattern the lambdas are usually simple enough to be lambdas, and if you have a few exceptions, using 'def' before starting the list or dict is a fine compromise.<br> <br> <br> <br>





<strong>PyPy</strong> <br>
by Btrot69 <br> <br> <em>
Do you see PyPy as the future? Or do you remain unconvinced, and -- if so -- why ?</em> <br> <br>

<strong>Guido:</strong> I'm still unconvinced, for two reasons: (a) they don't support Python 3 (well) yet, and (b) there are lots of extension modules (both third party and in the standard library) that they don't support well. But I hope they'll fix those issues. I think it's competition from projects like PyPy, Jython and IronPython that keeps the CPython project honest and on its toes.<br> <br> <br> <br>



<strong>Python in the browser ?</strong> <br>
by Btrot69 <br> <br> <em>
Over the years, there have been several attempts to create a sandboxed version of python that will safely run in a web browser.Mostly this was because of problems with Javascript. Now that Javascript works -- and we have nice things like CoffeeScript -- is it time to give up on python in the browser ?</em> <br> <br>

<strong>Guido:</strong> I gave up on it in 1995, so yes. And please don't try to compile Python to JavaScript. The semantics are so different that you end up writing most of a Python runtime in JavaScript, which slows things down too much. (CoffeScript's strength is that it is designed to map cleanly to JavaScript, and the two are now co-evolving to make the mapping even cleaner.)<br> <br> <br> <br>



<strong>Python 3</strong> <br>
by MetalliQaZ <br> <br> <em>
How do you feel about the current state of the migration to Python 3 (Py3k)? From a user perspective it seems that the conversion of popular libraries has lagged far behind, which has impeded the transition. In my professional capacity, nearly every single system I use lacks an installed 3.x interpreter. In fact, 2.7 is a rarity. I'd like to get your thoughts.</em> <br> <br>


<strong>Guido:</strong> Curious where you work. I agree that Python 3 migration will still take a long time, but if your systems don't come with Python 2.7 they must be pretty ancient! When I left Google they were about done with the internal transition to Python 2.7 (having successfully migrated from 2.4 to 2.6 over the past few years) and here at Dropbox both the client and the server are using Python 2.7. Both companies are already thinking about Python 3 too.<br> <br>

Back to Python 3 migration, I am actually pretty optimistic. Lots of popular libraries have a working port or are working on one. (The Python Software Foundation also occasionally funds projects to port libraries that are widely used but don't have enough of a community to do a port.) It will take a long time, but I see a lot of progress, and in a few years I expect most new code will be written in Python 3. Totally eradicating Python 2 usage will probably take much longer, but then again, Windows XP isn't quite dead yet either. :-)<br> <br> <br> <br>

<strong>Key question for any language designer</strong> <br>
by dkleinsc <br> <br> <em>
Have the prospects of Python in any way improved <a href="http://c2.com/cgi/wiki?LanguageAuthorBeardPattern">since you grew a beard</a>? To what degree does language success correlate to beard length?</em> <br> <br>
<strong>Guido:</strong> It is absolutely essential. Just look at Perl's fate -- Larry Wall is just too clean-shaven. :-)</span>
			<script type="text/javascript">
				$('#afj2013').hide();
				$('#afj2013').before("<center><a href='' onclick='$(\"#afj2013\").toggle();return false;' style='line-height: 6em'>Click for a FREE PREVIEW of the decrypted version of this story!</a><br></center>");
			</script>
			

		
		
			
		
	</div>
	<aside class="grid_24 view_mode">
	
			<div class="grid_12 cc">
				<p>
				

				<span class="sharethisawrp">
					<span id="sharethis-49913257" class="">
						
                     

		  



	
		<a class="janrain t" href="#" data-provider="twitter" data-message="Interviews: Guido van Rossum Answers Your Questions @slashdot" data-url="http://developers.slashdot.org/story/13/08/25/2115204/interviews-guido-van-rossum-answers-your-questions" data-title="Interviews: Guido van Rossum Answers Your Questions">twitter</a>
		<a class="janrain f fb" href="#" data-provider="facebook" data-url="http://developers.slashdot.org/story/13/08/25/2115204/interviews-guido-van-rossum-answers-your-questions" data-message="Interviews: Guido van Rossum Answers Your Questions" data-title="Interviews: Guido van Rossum Answers Your Questions">facebook</a>
        	<a class="janrain l" href="#" data-provider="linkedin" data-url="http://developers.slashdot.org/story/13/08/25/2115204/interviews-guido-van-rossum-answers-your-questions" data-message="Interviews: Guido van Rossum Answers Your Questions" data-title="Interviews: Guido van Rossum Answers Your Questions">linkedin</a>
	        <a class="g" href="http://plus.google.com/share?url=http://developers.slashdot.org/story/13/08/25/2115204/interviews-guido-van-rossum-answers-your-questions" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="http://www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>
	

						
					</span>
				</span>

				</p>
			</div>
        <div class="grid_24 tright tw">
			<span class="tright tags">
						
			</span>
        </div>





       
       
       
        <section class="grid_24" id="newa2footerv2">
            <div class="grid_6 pr">
                <h3><a title="Previous story" href="//tech.slashdot.org/story/13/08/26/1151205/could-a-grace-hopper-get-hired-in-todays-silicon-valley?sdsrc=prev">&larr;</a></h3>
            </div>
            <div class="grid_12 rl">
                <h3>Related Links</h3>
            </div>
            <div class="grid_6 ns">
                <h3><a title="Next story" href="//tech.slashdot.org/story/13/08/26/1520200/elon-musks-new-hologram-project-invites-iron-man-comparisons?sdsrc=next">&rarr;</a></h3>
            </div>


            <div class="grid_6">
                <span class="c">
					<a href="//tech.slashdot.org/story/13/08/26/1151205/could-a-grace-hopper-get-hired-in-todays-silicon-valley?sdsrc=prev">Could a Grace Hopper Get Hired In Today's Silicon Valley? </a>
				</span>
            </div>
            <div class="grid_12">
                <span class="c">
					
					
						<h3><a href="//interviews.slashdot.org/story/13/08/19/1256259/interviews-qa-with-guido-van-rossum?sdsrc=rel">Interviews: Q&amp;A With Guido van Rossum</a></h3>
					
				</span>
            </div>
            <div class="grid_6">
                <span class="c">
					
						<a href="//tech.slashdot.org/story/13/08/26/1520200/elon-musks-new-hologram-project-invites-iron-man-comparisons?sdsrc=next">Elon Musk's New Hologram Project Invites 'Iron Man' Comparisons</a>
					
				</span>
            </div>
        </section>


	
	</aside>
	
	

</article>
									    </div>
									    
									</section>

									<aside id="slashboxes">
									     
										  <div class="railad">
<div id='div-gpt-ad-300x250_a'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-300x250_a');});</script></div>
</div>
										  <div id="slashboxesin" class="yui-b">
										    
										    
										    
										  </div>
									     
									</aside>

									<section id="comments" class="a2commentwrap">
									   <div>
    									   <a name="comments"></a>
<div class="commentwrap ">
<div class="commentBox notice pcna">
			

		
			
				This discussion has been archived.
			
			No new comments can be posted.
		
	
</div>
</div><a name="comments"></a>

	 <section class="d2incommentspl">
	 <div class="commentwrap" id="commentwrap">

		 
			 <div class="commentBox">
				<div class="title hide">	
					<h4>
						<span class="escape-link"><a href="//developers.slashdot.org/story/13/08/25/2115204/interviews-guido-van-rossum-answers-your-questions" title="Back to Article - Interviews: Guido van Rossum Answers Your Questions">Interviews: Guido van Rossum Answers Your Questions</a></span>
						<span class="commentBoxLinks"><a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_d"></span> More</a>





	<a class="login"  href="//developers.slashdot.org/login.pl" onclick="show_login_box(); return false">Login</a></span>
					</h4>
				</div>
			 </div>
		 

	 



<section class="grid_24" id="d2header"><div>

	<h2 class="commentspl test"><a title="Back to Article - Interviews: Guido van Rossum Answers Your Questions" href="//developers.slashdot.org/story/13/08/25/2115204/interviews-guido-van-rossum-answers-your-questions">Interviews: Guido van Rossum Answers Your Questions</a></h2>

	<nav class="grid_24">
		<div class="grid_14 widthauto">
			
				<button class="btn" disabled="disabled">Archived Discussion</button>
			
			<!-- <a href="//developers.slashdot.org/search.pl?op=comments&amp;sid=4127779" class="btn">Search <span class="totalcommentcnt">169</span> Comments</a> -->
			
				
   					<a href="#" onclick="D2.ajaxFetchComments(0,1,'','',-1); return false" class="btn" id="d2loadall">Load All Comments</a>
				
			
        
		</div>
		<div class="grid_10 d1or2">
		

				 
					 <div id="d2out" class="horizontal rooted grid_15">
								 <div id="d2act" class="hide">
									 <div class="loki" id="gods">
										 <script type="text/javascript">
										 $(function(){
											 D2.slider = new D2.Slider(
												 D2.user_threshold(),
												 D2.user_highlightthresh(),
												 'x'
											 );
										 });
										 </script>
										 <div id="bones" class="grid_12">
											 <div class="ccw-count-container grid_24">
												 <span id="ccw-full-count-text" class="grid_8 ccw-count-text tcenter"><span></span><span id="ccw-full-phrase">&nbsp;Full</span></span>
												 <span id="ccw-abbr-count-text" class="grid_8 ccw-count-text"><span></span><span id="ccw-abbr-phrase">&nbsp;Abbreviated</span></span>
												 <span id="ccw-hide-count-text" class="grid_8 ccw-count-text tleft"><span></span><span id="ccw-hide-phrase">&nbsp;Hidden</span></span>
											 </div>
											 <div id="ccw">
												 <div id="ccw-body" class="ccw-core">
													 <div id="ccw-panel-container" class="ccw-core">
														 <div id="ccw-full-panel" class="ccw-panel">
															 /Sea<div class="ccw-panel-border"></div>
															 <div id="ccw-full-count-pos" class="ccw-core-pos ccw-count-pos"></div>
														 </div>
														 <div id="ccw-abbr-panel" class="ccw-panel">
															 <div class="ccw-panel-border"></div>
															 <div id="ccw-abbr-count-pos" class="ccw-core-pos ccw-count-pos"></div>
														 </div>
														 <div id="ccw-hide-panel" class="ccw-panel">
															 <div id="ccw-hide-count-pos" class="ccw-core-pos ccw-count-pos"></div>
														 </div>
													 </div>								
													 <div id="ccw-control" class="ccw-core">
														 <div id="ccw-centering-rail" class="ccw-core">
															 <div id="ccw-hide-bar-pos" class="ccw-core-pos">
																 <div id="ccw-hide-bar" class="ccw-bar">
																	 <div id="ccw-hide-bar-tab" class="ccw-bar-tab"></div>
																	 <div class="ccwa"></div>
																	 <div class="ccwb"></div>
																	 <div id="ccw-hide-bar-upzone" class="ccw-upzone" onclick="D2.slider.stepTHT(HIDE_BAR, +1)"></div>
																	 <div id="ccw-hide-bar-downzone" class="ccw-downzone" onclick="D2.slider.stepTHT(HIDE_BAR, -1)"></div>
																 </div>
															 </div>
															 <div id="ccw-abbr-bar-pos" class="ccw-core-pos">
																 <div id="ccw-abbr-bar" class="ccw-bar">
																	 <div id="ccw-abbr-bar-tab" class="ccw-bar-tab"></div>
																	 <div class="ccwa"></div>
																	 <div class="ccwb"></div>
																	 <div id="ccw-abbr-bar-upzone" class="ccw-upzone" onclick="D2.slider.stepTHT(ABBR_BAR, +1)"></div>
																	 <div id="ccw-abbr-bar-downzone" class="ccw-downzone" onclick="D2.slider.stepTHT(ABBR_BAR, -1)"></div>
																 </div>
															 </div>
														 </div>
													 </div>
												 </div>
												 <div class="ccw-score-label grid_24">
													 <div class="grid_3"><span class="sc">Score:</span></div>
													 <div class="grid_3">5<span class="lg"></span></div>
													 <div class="grid_3">4<span class="lg"></span></div>
													 <div class="grid_3">3<span class="lg"></span></div>
													 <div class="grid_3">2<span class="lg"></span></div>
													 <div class="grid_3">1<span class="lg"></span></div>
													 <div class="grid_3">0<span class="lg"></span></div>
													 <div class="grid_3">-1<span class="lg"></span></div>
												 </div>
											 </div>
										 </div>
										 <div class="commentControlFooter"><a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_c"></span> More</a>





	<a class="login"  href="//developers.slashdot.org/login.pl" onclick="show_login_box(); return false">Login</a><div id="login_cover" class="hide" onclick="hide_login_box()"></div>
<div id="login_box" class="hide">
	<div id="login_box_content">
		<div id='embbeded_login_modal' class="hide">
<form action="https://slashdot.org/my/login" method="post" onsubmit="if (global_returnto) { this.returnto.value = global_returnto }" class="embedded"><fieldset style="-webkit-border-radius:10px 10px 0 0;border-radius:10px 10px 0 0;-moz-border-radius:10px 10px 0 0">
<div style='height:25px;'>&nbsp;</div>
    <input type="hidden" name="returnto" value="//developers.slashdot.org/comments.pl?sid=4127779">
    <input type="hidden" name="op" value="userlogin">
    <p>
        <label class="fleft" for="unickname">Nickname:</label>
        <input type="text" name="unickname" value="">
    </p>
    <p>
        <label class="fleft" for="upasswd">Password:</label>
        <input type="password" name="upasswd" placeholder="6-20 characters long">
    </p>
    <label class="checkbox"><input type="checkbox" name="login_temp" value="yes"> Public Terminal</label>
    <br>
    <hr>
    <input type="submit" name="userlogin" value="Log In" class="fno"> <a href="//slashdot.org/my/mailpassword" class="btn link" onclick="getModalPrefs('sendPasswdModal', 'Retrieve Password', 1); return false;">Forgot your password?</a>
</fieldset></form>

<div id="janrainEngageEmbed"></div>
<div class="actions">
 <a class="ico close" onclick="hide_login_slider();" href=""><span>Close</span></a>
</div>
</div>
		<div class="actions">
			<a class="ico close" href="#" onclick="hide_login_box(); return false"><span>Close</span></a>
		</div>
	</div>
</div>
<script type="text/javascript">logged_in = 0</script></div>
										 <div id="commentControlBoxStatus" class="hide"></div>
									 </div>
								 </div>
					 </div>
				 
				 



				  <a href="//developers.slashdot.org/search.pl?op=comments&amp;sid=4127779" class="ui-icon search_comments">Search <span class="totalcommentcnt">169</span> Comments</a>




				  <a class="pref ui-icon-w" href="//developers.slashdot.org/users.pl" onclick="show_login_box(); $('#modal_box').addClass('login'); return false;">Log In/Create an Account</a>
				  
		</div>
	</nav>
	<section id="besttabs" class="grid_24">
	    <span class="legend">Comments Filter:</span>
	    <ul class="besttabslist">
	        <li class="active"><a href="//developers.slashdot.org/story/13/08/25/2115204/interviews-guido-van-rossum-answers-your-questions#comments">All</a></li>
		
	        <li ><a href="//developers.slashdot.org/story/13/08/25/2115204/interviews-guido-van-rossum-answers-your-questions/insightful-comments#comments">Insightful</a></li>
		
	        <li ><a href="//developers.slashdot.org/story/13/08/25/2115204/interviews-guido-van-rossum-answers-your-questions/informative-comments#comments">Informative</a></li>
		
	        <li ><a href="//developers.slashdot.org/story/13/08/25/2115204/interviews-guido-van-rossum-answers-your-questions/interesting-comments#comments">Interesting</a></li>
		
	        <li ><a href="//developers.slashdot.org/story/13/08/25/2115204/interviews-guido-van-rossum-answers-your-questions/funny-comments#comments">Funny</a></li>
		
	    </ul>
	</section>
    <aside class="grid_24">
		<p>
			<small><strong>The Fine Print:</strong> The following comments are owned by whoever posted them.  We are not responsible for them in any way.</small>
		</p>
		<a name="topcomment"></a>
    </aside>


</div></section><script src="//a.fsdn.com/sd/comments-minified.js?release_20140618" type="text/javascript"></script>


<script type="text/javascript">
<!--
D2.d2_keybindings_disable()[191] = 1;
D2.boxStatus(1);
D2.comments({ 44679397: { uid: 2484150, pid: 44678093, subject: "Re:whitespace", read: 0, points: 2, kids: [ 44679923 ], opid: 44678093 }, 44684895: { uid: 953524, pid: 44681547, subject: "Re:Summary", read: 0, points: 2, kids: [  ], opid: 44681547 }, 44679681: { uid: 4391, pid: 44677925, subject: "Re:whitespace", read: 0, points: 2, kids: [  ], opid: 44677925 }, 44681899: { uid: 983081, pid: 44677925, subject: "Re:whitespace", read: 0, points: 2, kids: [  ], opid: 44677925 }, 44677979: { uid: 539913, pid: 0, read: 0, points: 4, kids: [ 44678145, 44678379, 44678609, 44679111 ], opid: 0 }, 44678865: { uid: 208483, pid: 44677365, subject: "Re:BAHAHA!!!", read: 0, points: 2, kids: [ 44679935 ], opid: 44677365 }, 44688189: { uid: 15173, pid: 44680049, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 2, kids: [ 44691733 ], opid: 44680049 }, 44677433: { uid: 223110, pid: 0, read: 0, points: 4, kids: [ 44677627, 44677727, 44677907, 44677951, 44679155 ], opid: 0 }, 44678145: { uid: undefined, pid: 44677979, read: 0, points: -2, kids: [ 44678549 ], opid: undefined }, 44679821: { uid: 4391, pid: 44678265, subject: "Re:whitespace", read: 0, points: 2, kids: [ 44681361 ], opid: 44678265 }, 44681361: { uid: undefined, pid: 44679821, read: 0, points: -2, kids: [ 44681771 ], opid: undefined }, 44677867: { uid: undefined, pid: 44677779, read: 0, points: -2, kids: [ 44679481 ], opid: undefined }, 44677951: { uid: undefined, pid: 44677433, read: 0, points: -2, kids: [ 44681473 ], opid: undefined }, 44678379: { uid: 666, pid: 44677979, read: 0, points: 1, kids: [  ], opid: 44677979 }, 44677333: { uid: undefined, pid: 44677315, read: 0, points: -2, kids: [ 44677365, 44677425, 44677779 ], opid: undefined }, 44677811: { uid: 666, pid: 44677561, subject: "Re:whitespace", read: 0, points: 5, kids: [ 44677925, 44677985 ], opid: 44677561 }, 44679055: { uid: 569694, pid: 44678853, subject: "Re:To answer GvR's question", read: 0, points: 1, kids: [ 44683833 ], opid: 44678853 }, 44680935: { uid: 718102, pid: 44677631, subject: "Re:BAHAHA!!!", read: 0, points: 2, kids: [  ], opid: 44677631 }, 44690743: { uid: 7868, pid: 44679111, subject: "Re:To answer GvR's question", read: 0, points: 2, kids: [  ], opid: 44679111 }, 44678465: { uid: 541817, pid: 44678235, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 3, kids: [  ], opid: 44678235 }, 44678549: { uid: 539913, pid: 44678145, subject: "Re:To answer GvR's question", read: 0, points: 2, kids: [ 44678631 ], opid: 44678145 }, 44680827: { uid: 622387, pid: 44677985, subject: "Re:whitespace", read: 0, points: 2, kids: [  ], opid: 44677985 }, 44684207: { uid: undefined, pid: 44681583, read: 0, points: -2, kids: [ 44684849 ], opid: undefined }, 44685021: { uid: 953524, pid: 44681039, subject: "Re:whitespace", read: 0, points: 2, kids: [  ], opid: 44681039 }, 44677779: { uid: 966971, pid: 44677333, subject: "Re:BAHAHA!!!", read: 0, points: 2, kids: [ 44677867 ], opid: 44677333 }, 44680255: { uid: 457657, pid: 44678317, subject: "Re:whitespace", read: 0, points: 2, kids: [ 44681509, 44681569 ], opid: 44678317 }, 44677727: { uid: 622387, pid: 44677433, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 3, kids: [  ], opid: 44677433 }, 44677907: { uid: 666, pid: 44677433, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 1, kids: [ 44680541 ], opid: 44677433 }, 44751303: { uid: 1165421, pid: 44723839, subject: "Re:Summary", read: 0, points: 2, kids: [  ], opid: 44723839 }, 44681869: { uid: undefined, pid: 44681681, read: 0, points: -2, kids: [ 44681963 ], opid: undefined }, 44689541: { uid: 762201, pid: 44684219, subject: "Re:Fate", read: 0, points: 2, kids: [  ], opid: 44684219 }, 44681989: { uid: 622387, pid: 44678807, subject: "Re:Functional programming is no harder than OOP", read: 0, points: 2, kids: [  ], opid: 44678807 }, 44684477: { uid: undefined, pid: 44681963, read: 0, points: -2, kids: [ 44684917 ], opid: undefined }, 44679845: { uid: undefined, pid: 44678681, read: 0, points: -2, kids: [ 44681681 ], opid: undefined }, 44684849: { uid: 718102, pid: 44684207, subject: "Re:whitespace", read: 0, points: 2, kids: [  ], opid: 44684207 }, 44680769: { uid: 2663835, pid: 0, read: 0, points: 1, kids: [  ], opid: 0 }, 44681165: { uid: 718102, pid: 44680541, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 3, kids: [ 44681513, 44690715 ], opid: 44680541 }, 44681513: { uid: 1165421, pid: 44681165, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 2, kids: [ 44683727 ], opid: 44681165 }, 44691733: { uid: 457657, pid: 44688189, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 2, kids: [  ], opid: 44688189 }, 44678215: { uid: 1459097, pid: 44677627, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 3, kids: [ 44678835 ], opid: 44677627 }, 44678835: { uid: 541817, pid: 44678215, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 2, kids: [ 44678937 ], opid: 44678215 }, 44679503: { uid: 762201, pid: 44677783, subject: "Re:Fate", read: 0, points: 2, kids: [ 44680143, 44681187, 44684219 ], opid: 44677783 }, 44678631: { uid: 569694, pid: 44678549, subject: "Re:To answer GvR's question", read: 0, points: 1, kids: [ 44678853, 44679759 ], opid: 44678549 }, 44681187: { uid: undefined, pid: 44679503, read: 0, points: -2, kids: [ 44689539 ], opid: undefined }, 44678531: { uid: 666, pid: 44678265, subject: "Re:whitespace", read: 0, points: 1, kids: [  ], opid: 44678265 }, 44678577: { uid: 622387, pid: 44677977, subject: "Re:face it, it *does* cause problems", read: 0, points: 2, kids: [  ], opid: 44677977 }, 44679111: { uid: 140672, pid: 44677979, subject: "Re:To answer GvR's question", read: 0, points: 5, kids: [ 44690743 ], opid: 44677979 }, 44677977: { uid: undefined, pid: 44677561, read: 0, points: -2, kids: [ 44678577, 44678595, 44678745 ], opid: undefined }, 44681771: { uid: 4391, pid: 44681361, subject: "Re:whitespace", read: 0, points: 2, kids: [  ], opid: 44681361 }, 44677965: { uid: 874524, pid: 44677807, subject: "Re:Summary", read: 0, points: 2, kids: [ 44678105, 44679015 ], opid: 44677807 }, 44678853: { uid: 412335, pid: 44678631, subject: "Re:To answer GvR's question", read: 0, points: 2, kids: [ 44679055 ], opid: 44678631 }, 44680019: { uid: 10202, pid: 44679889, subject: "Re:whitespace", read: 0, points: 3, kids: [ 44682119 ], opid: 44679889 }, 44680143: { uid: 539913, pid: 44679503, subject: "Re:Fate", read: 0, points: 2, kids: [ 44689495 ], opid: 44679503 }, 44678937: { uid: 1459097, pid: 44678835, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 2, kids: [ 44679193 ], opid: 44678835 }, 44689539: { uid: 762201, pid: 44681187, subject: "Re:Fate", read: 0, points: 2, kids: [  ], opid: 44681187 }, 44683727: { uid: 973822, pid: 44681513, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 2, kids: [  ], opid: 44681513 }, 44677487: { uid: 1139593, pid: 0, read: 0, points: 3, kids: [  ], opid: 0 }, 44684195: { uid: undefined, pid: 44682115, read: 0, points: -2, kids: [ 44686509 ], opid: undefined }, 44680879: { uid: 643681, pid: 44679889, subject: "Re:whitespace", read: 0, points: 2, kids: [  ], opid: 44679889 }, 44679155: { uid: 80593, pid: 44677433, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 2, kids: [  ], opid: 44677433 }, 44679193: { uid: 541817, pid: 44678937, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 3, kids: [  ], opid: 44678937 }, 44677783: { uid: undefined, pid: 0, read: 0, points: -2, kids: [ 44679503 ], opid: undefined }, 44679923: { uid: 183847, pid: 44679397, subject: "Re:whitespace", read: 0, points: 2, kids: [ 44680765 ], opid: 44679397 }, 44678745: { uid: 412335, pid: 44677977, subject: "Re:face it, it *does* cause problems", read: 0, points: 2, kids: [  ], opid: 44677977 }, 44678381: { uid: undefined, pid: 0, read: 0, points: -2, kids: [ 44678587, 44678681 ], opid: undefined }, 44684219: { uid: undefined, pid: 44679503, read: 0, points: -2, kids: [ 44689541 ], opid: undefined }, 44680049: { uid: 457657, pid: 44678199, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 5, kids: [ 44688189 ], opid: 44678199 }, 44681023: { uid: 718102, pid: 44678235, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 2, kids: [  ], opid: 44678235 }, 44688153: { uid: 15173, pid: 44678571, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 2, kids: [  ], opid: 44678571 }, 44686509: { uid: 183847, pid: 44684195, subject: "Re:whitespace", read: 0, points: 2, kids: [  ], opid: 44684195 }, 44681547: { uid: 1165421, pid: 44679015, subject: "Re:Summary", read: 0, points: 2, kids: [ 44684895, 44723839 ], opid: 44679015 }, 44680889: { uid: 643681, pid: 44679919, subject: "Re:whitespace", read: 0, points: 2, kids: [  ], opid: 44679919 }, 44678093: { uid: 573825, pid: 44677985, subject: "Re:whitespace", read: 0, points: 1, kids: [ 44678265, 44679397 ], opid: 44677985 }, 44690775: { uid: 643681, pid: 44682115, subject: "Re:whitespace", read: 0, points: 2, kids: [  ], opid: 44682115 }, 44678571: { uid: 541817, pid: 44678199, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 2, kids: [ 44688153 ], opid: 44678199 }, 44681939: { uid: 630646, pid: 44677985, subject: "Re:whitespace", read: 0, points: 2, kids: [  ], opid: 44677985 }, 44678681: { uid: 539913, pid: 44678381, subject: "Re:Functional programming is no harder than OOP", read: 0, points: 3, kids: [ 44679845 ], opid: 44678381 }, 44689495: { uid: 762201, pid: 44680143, subject: "Re:Fate", read: 0, points: 2, kids: [  ], opid: 44680143 }, 44681681: { uid: 718102, pid: 44679845, subject: "Re:Functional programming is no harder than OOP", read: 0, points: 2, kids: [ 44681869 ], opid: 44679845 }, 44678105: { uid: 726671, pid: 44677965, subject: "Re:Summary", read: 0, points: 2, kids: [ 44679579 ], opid: 44677965 }, 44679759: { uid: 4391, pid: 44678631, subject: "Re:To answer GvR's question", read: 0, points: 2, kids: [  ], opid: 44678631 }, 44681583: { uid: 718102, pid: 44677985, subject: "Re:whitespace", read: 0, points: 4, kids: [ 44684207 ], opid: 44677985 }, 44677315: { uid: undefined, pid: 0, read: 0, points: -2, kids: [ 44677333, 44677631 ], opid: undefined }, 44678235: { uid: undefined, pid: 44677627, read: 0, points: -2, kids: [ 44678465, 44681023 ], opid: undefined }, 44680541: { uid: 643681, pid: 44677907, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 2, kids: [ 44681165 ], opid: 44677907 }, 44680859: { uid: 643681, pid: 44679889, subject: "Re:whitespace", read: 0, points: 2, kids: [ 44682115 ], opid: 44679889 }, 44681473: { uid: 718102, pid: 44677951, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 2, kids: [  ], opid: 44677951 }, 44679481: { uid: 762201, pid: 44677867, read: 0, points: 2, kids: [  ], opid: 44677867 }, 44680765: { uid: 643681, pid: 44679923, subject: "Re:whitespace", read: 0, points: 2, kids: [  ], opid: 44679923 }, 44678595: { uid: 539913, pid: 44677977, subject: "Re:face it, it *does* cause problems", read: 0, points: 2, kids: [  ], opid: 44677977 }, 44678265: { uid: undefined, pid: 44678093, read: 0, points: -2, kids: [ 44678531, 44679821 ], opid: undefined }, 44683833: { uid: 973822, pid: 44679055, subject: "Re:To answer GvR's question", read: 0, points: 3, kids: [  ], opid: 44679055 }, 44677985: { uid: 2484150, pid: 44677811, subject: "Re:whitespace", read: 0, points: 5, kids: [ 44678093, 44679889, 44679919, 44680827, 44681583, 44681939 ], opid: 44677811 }, 44690715: { uid: 643681, pid: 44681165, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 2, kids: [  ], opid: 44681165 }, 44679919: { uid: 29480, pid: 44677985, subject: "Re:whitespace", read: 0, points: 1, kids: [ 44680889 ], opid: 44677985 }, 44677561: { uid: 584757, pid: 0, read: 0, points: 3, kids: [ 44677811, 44677977, 44681039 ], opid: 0 }, 44678587: { uid: 622387, pid: 44678381, subject: "Re:Functional programming is no harder than OOP", read: 0, points: 3, kids: [ 44678807 ], opid: 44678381 }, 44681963: { uid: 718102, pid: 44681869, subject: "Re:Functional programming is no harder than OOP", read: 0, points: 2, kids: [ 44684477 ], opid: 44681869 }, 44684917: { uid: 718102, pid: 44684477, subject: "Re:Functional programming is no harder than OOP", read: 0, points: 2, kids: [  ], opid: 44684477 }, 44678337: { uid: 1459097, pid: 44677807, subject: "Re:Summary", read: 0, points: 3, kids: [  ], opid: 44677807 }, 44681569: { uid: 1165421, pid: 44680255, subject: "Re:whitespace", read: 0, points: 2, kids: [  ], opid: 44680255 }, 44681039: { uid: 899435, pid: 44677561, subject: "Re:whitespace", read: 0, points: 2, kids: [ 44685021 ], opid: 44677561 }, 44679015: { uid: 953524, pid: 44677965, subject: "Re:Summary", read: 0, points: 2, kids: [ 44681547 ], opid: 44677965 }, 44677425: { uid: 198444, pid: 44677333, subject: "Re:BAHAHA!!!", read: 0, points: 1, kids: [  ], opid: 44677333 }, 44679935: { uid: 612664, pid: 44678865, subject: "Re:BAHAHA!!!", read: 0, points: 2, kids: [  ], opid: 44678865 }, 44678609: { uid: 569694, pid: 44677979, subject: "Re:To answer GvR's question", read: 0, points: 3, kids: [  ], opid: 44677979 }, 44677631: { uid: undefined, pid: 44677315, read: 0, points: -2, kids: [ 44680935 ], opid: undefined }, 44723839: { uid: undefined, pid: 44681547, read: 0, points: -2, kids: [ 44751303 ], opid: undefined }, 44677515: { uid: 958353, pid: 0, read: 0, points: 1, kids: [ 44677807 ], opid: 0 }, 44677925: { uid: 666, pid: 44677811, subject: "Re:whitespace", read: 0, points: 4, kids: [ 44678317, 44679681, 44681899 ], opid: 44677811 }, 44678317: { uid: 666, pid: 44677925, subject: "Re:whitespace", read: 0, points: 5, kids: [ 44680255 ], opid: 44677925 }, 44681509: { uid: 718102, pid: 44680255, subject: "Re:whitespace", read: 0, points: 2, kids: [  ], opid: 44680255 }, 44677807: { uid: 726671, pid: 44677515, subject: "Re:Summary", read: 0, points: 2, kids: [ 44677965, 44678337 ], opid: 44677515 }, 44682119: { uid: 183847, pid: 44680019, subject: "Re:whitespace", read: 0, points: 3, kids: [  ], opid: 44680019 }, 44678199: { uid: 15173, pid: 44677627, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 2, kids: [ 44678571, 44680049 ], opid: 44677627 }, 44678807: { uid: undefined, pid: 44678587, read: 0, points: -2, kids: [ 44681989 ], opid: undefined }, 44679889: { uid: 183847, pid: 44677985, subject: "Re:whitespace", read: 0, points: 2, kids: [ 44680019, 44680859, 44680879 ], opid: 44677985 }, 44679579: { uid: 4391, pid: 44678105, subject: "Re:Summary", read: 0, points: 2, kids: [  ], opid: 44678105 }, 44677365: { uid: 612664, pid: 44677333, subject: "Re:BAHAHA!!!", read: 0, points: 2, kids: [ 44678865 ], opid: 44677333 }, 44682115: { uid: 183847, pid: 44680859, subject: "Re:whitespace", read: 0, points: 2, kids: [ 44684195, 44690775 ], opid: 44680859 }, 44677627: { uid: 541817, pid: 44677433, subject: "Re:Broaden your functional horizons, Guido!", read: 0, points: 5, kids: [ 44678199, 44678215, 44678235 ], opid: 44677433 } });

D2.thresh_totals({6:{6:{1:100,3:0,2:0}},4:{6:{1:90,3:0,2:10},4:{1:90,3:10,2:0},5:{1:90,3:8,2:2}},1:{6:{1:0,3:0,2:100},4:{1:0,3:12,2:88},1:{1:0,3:100,2:0},3:{1:0,3:24,2:76},2:{1:0,3:92,2:8},5:{1:0,3:8,2:92}},3:{6:{1:76,3:0,2:24},4:{1:76,3:12,2:12},3:{1:76,3:24,2:0},5:{1:76,3:8,2:16}},0:{6:{1:0,3:0,2:100},4:{1:0,3:12,2:88},1:{1:0,3:100,2:0},3:{1:0,3:24,2:76},0:{1:0,3:100,2:0},2:{1:0,3:92,2:8},5:{1:0,3:8,2:92}},2:{6:{1:10,3:0,2:90},4:{1:10,3:12,2:78},3:{1:10,3:24,2:66},2:{1:10,3:90,2:0},5:{1:10,3:8,2:82}},5:{6:{1:94,3:0,2:6},5:{1:94,3:6,2:0}},"-1":{6:{1:0,3:0,2:100},4:{1:0,3:12,2:88},1:{1:0,3:100,2:0},3:{1:0,3:24,2:76},0:{1:0,3:100,2:0},2:{1:0,3:92,2:8},5:{1:0,3:8,2:92},"-1":{1:0,3:100,2:0}}});

D2.root_comment(0);
D2.root_comments([44677433,44677487,44677515,44677561,44677979,44680769,44677315,44678381,44677783]);
D2.root_comments_hash({44677515:1,44677561:1,44677979:1,44677433:1,44677487:1,44680769:1,44677783:1,44677315:1,44678381:1});

D2.d2_comment_order(0);
D2.user_uid(666);
D2.user_is_anon(1);
D2.user_is_admin(0);
D2.user_is_subscriber(0);
D2.user_smallscreen(0);
D2.user_threshold(1);
D2.user_highlightthresh(4);
D2.user_d2asp(0);

D2.discussion_id(4127779);

D2.d2_seen('44677365,60,8,54,28,46,66,100,52,28,4,96,18,40,14,6,108,12,94,16,102,20,42,86,66,18,22,6,10,8,14,22,50,64,90,18,12,72,78,40,56,44,38,204,84,22,76,102,78,62,68,30,4,12,84,30,94,112,286,224,4,58,32,20,10,46,88,16,126,308,36,4,34,22,14,98,90,128,40,24,26,126,4,1608,106,1016,46,22,104,1488,1644,36,1306,44,2,1174,28,32,958,59570');
D2.more_comments_num(69);


//-->
</script>




	
	
	
	
		<ul id="commentlisting" class="d2">
			<li id="tree_44677433" class="comment full contain"><span class="ind"></span>
<div id="comment_status_44677433" class="commentstatus"></div>
<div id="comment_44677433" class="cw">
	<div id="comment_top_44677433" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677433" name="comment_link_44677433" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677433" onclick="return D2.setFocusComment(44677433)" >Broaden your functional horizons, Guido!</a>


		 	<span id="comment_score_44677433" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677433); return false"><span class=opt>Score:</span>4</a>, Interesting)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~EricTheGreen">EricTheGreen</a>  <span class="uid"><a href="//slashdot.org/~EricTheGreen">(223110)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677433">		
		on Monday August 26, 2013 @12:15PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677433">#44677433</a>)
		<small><a href="http://slashdot.org/" title="http://slashdot.org/" class="user_homepage_display">Homepage</a> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677433"><blockquote><div><p>but any language *less* popular than Haskell surely has very little practical value, and I haven't heard of functional languages *more* popular than Haskell.</p></div></blockquote><p>There is this language called Lisp.  Might have heard of it before.</p><p>Erlang, also.</p><p>I understand the kiddies are feeling the Clojure love these days as well (although I suppose that just ends up categorized as a Lisp subset)</p><p>C'mon Guido, you're smarter than this...</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44677433">
	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="janrain t" href="#" data-provider="twitter" data-message="Broaden your functional horizons, Guido! by EricTheGreen @slashdot" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677433" data-title="Broaden your functional horizons, Guido!">twitter</a>
		<a class="janrain f" href="#" data-provider="facebook" data-message="Broaden your functional horizons, Guido! by EricTheGreen" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677433" data-title="Broaden your functional horizons, Guido!">facebook</a>
		<a class="janrain l" href="#" data-provider="linkedin" data-message="Broaden your functional horizons, Guido! by EricTheGreen" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677433" data-title="Broaden your functional horizons, Guido!">linkedin</a>
		<a class="g" href="http://plus.google.com/share?url=http://developers.slashdot.org/comments.pl?sid=4127779%26cid=44677433" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="//www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>
	</div>

</div>
</div>

<div id="replyto_44677433"></div>

<ul id="group_44677433">
	<li id="hiddens_44677433" class="hide"></li>
</ul>

<ul id="commtree_44677433"><li id="tree_44677627" class="comment full contain"><span class="ind"></span>
<div id="comment_status_44677627" class="commentstatus"></div>
<div id="comment_44677627" class="cw">
	<div id="comment_top_44677627" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677627" name="comment_link_44677627" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677627" onclick="return D2.setFocusComment(44677627)" >Re:Broaden your functional horizons, Guido!</a>


		 	<span id="comment_score_44677627" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677627); return false"><span class=opt>Score:</span>5</a>, Insightful)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~DuckDodgers">DuckDodgers</a>  <span class="uid"><a href="//slashdot.org/~DuckDodgers">(541817)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677627">		 &lt;<a href="mailto:keeper_of_the_wolf%40%40%40yahoo...com">keeper_of_the_wolf@@@yahoo...com</a>&gt;
		on Monday August 26, 2013 @12:41PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677627">#44677627</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677627">If Lisp was going to take over the world, or even just be used in as much as 10% of the software created in any given year, it would have done it already.   That, I think, is the entire reason why Clojure ( and before Clojure, Scheme and Racket, <a href="https://en.wikipedia.org/wiki/Racket_(programming_language)" title="wikipedia.org">https://en.wikipedia.org/wiki/Racket_(programming_language)</a> [wikipedia.org], and since Clojure, Hy <a href="http://docs.hylang.org/en/latest/" title="hylang.org">http://docs.hylang.org/en/latest/</a> [hylang.org] ) have been created - attempts to tweak the Lisp formula into something more palatable for the mainstream without losing any of the core features that make the language useful. <br> <br>
I wish Lisp and Clojure were more prevalent.  Most of my work experience is with Java, and now that I've become comfortable with Lisp and Clojure in my spare time I'm chafing at the tools I have to use for work.  There just aren't that many jobs around, at least outside Silicon Valley, that use either language.   So I'm trying to do useful Clojure stuff in my spare time in order to have a portfolio I can show off for a Clojure shop.  <br> <br> But to your point, I think Guido is safe to dismiss Lisp - it's a spectacular functional language, it's one of the most well known functional languages, and at least in original and Common Lisp form it just can't get traction in the mainstream.</div>
	</div>

	<div class="commentSub" id="comment_sub_44677627">
<span class="ind"></span><a class="btn link" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;cid=44677433" onclick="return D2.selectParent(44677433)">Parent</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="janrain t" href="#" data-provider="twitter" data-message="Re:Broaden your functional horizons, Guido! by DuckDodgers @slashdot" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677627" data-title="Re:Broaden your functional horizons, Guido!">twitter</a>
		<a class="janrain f" href="#" data-provider="facebook" data-message="Re:Broaden your functional horizons, Guido! by DuckDodgers" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677627" data-title="Re:Broaden your functional horizons, Guido!">facebook</a>
		<a class="janrain l" href="#" data-provider="linkedin" data-message="Re:Broaden your functional horizons, Guido! by DuckDodgers" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677627" data-title="Re:Broaden your functional horizons, Guido!">linkedin</a>
		<a class="g" href="http://plus.google.com/share?url=http://developers.slashdot.org/comments.pl?sid=4127779%26cid=44677627" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="//www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>
	</div>

</div>
</div>

<div id="replyto_44677627"></div>

<ul id="group_44677627">
	<li id="hiddens_44677627" class="hide"></li>
</ul>

<ul id="commtree_44677627"><li id="tree_44678199" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678199" class="commentstatus"></div>
<div id="comment_44678199" class="cw">
	<div id="comment_top_44678199" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678199" name="comment_link_44678199" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678199" onclick="return D2.setFocusComment(44678199)" >Re:</a>


		 	<span id="comment_score_44678199" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678199); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~HiThere">HiThere</a>  <span class="uid"><a href="//slashdot.org/~HiThere">(15173)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678199"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678199"><p>Lisp doesn't work well without a good IDE...and I don't count EMACS.</p><p>Racket would be ok.  It has a decent IDE.  But it doesn't do multi-processing, even though it has the appropriate language features.</p><p>I don't know Clojure well enough.  The last time I tried it (over a year ago) the install instructions produced an only-partially-working result.  This is probably NetBeans fault rather than Clojure, but I didn't follow this up.  I never got as far as checking how it did on parallel processing.</p><p>Most Scheme's and<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678199">

</div>
</div>

<div id="replyto_44678199"></div>

<ul id="group_44678199">
	<li id="hiddens_44678199" class="hide"></li>
</ul>

<ul id="commtree_44678199"><li id="tree_44678571" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678571" class="commentstatus"></div>
<div id="comment_44678571" class="cw">
	<div id="comment_top_44678571" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678571" name="comment_link_44678571" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678571" onclick="return D2.setFocusComment(44678571)" >Re:</a>


		 	<span id="comment_score_44678571" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678571); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~DuckDodgers">DuckDodgers</a>  <span class="uid"><a href="//slashdot.org/~DuckDodgers">(541817)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678571"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678571">Maybe I was lucky, the first time I tried Clojure was within the past year and the installation worked flawlessly.   My biggest problem with the language is that some error messages from simple mistakes (mis-aligned parenthesis, etc..) are obtuse - I consider that an obstacle to adoption of the language.  I've acquired the patience to work past errors like that, even though they drive me bonkers for the first few weeks I'm learning a new language.  But that kind of thing can and will make the difference bet</div>
	</div>

	<div class="commentSub" id="comment_sub_44678571">

</div>
</div>

<div id="replyto_44678571"></div>

<ul id="group_44678571">
	<li id="hiddens_44678571" class="hide"></li>
</ul>

<ul id="commtree_44678571"><li id="tree_44688153" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44688153" class="commentstatus"></div>
<div id="comment_44688153" class="cw">
	<div id="comment_top_44688153" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44688153" name="comment_link_44688153" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44688153" onclick="return D2.setFocusComment(44688153)" >Re:</a>


		 	<span id="comment_score_44688153" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44688153); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~HiThere">HiThere</a>  <span class="uid"><a href="//slashdot.org/~HiThere">(15173)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44688153"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44688153"><p>D's basic language, and standard library, are excellent and solid.  But they don't cover enough.  This is probably inevitable, but it *IS* a real problem.  The obvious way to solve it is to wrap C libraries with D code, and include them.  This, however, takes the time and effort of skilled people.</p><p>E.g.:  Sqlite3 wrappers are currently included, but they are so thin that calling them wrappers is almost a misnomer.  There have been several attempts to wrap Sqlite3 in the past, but they've all been completed, u<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44688153">

</div>
</div>

<div id="replyto_44688153"></div>

<ul id="group_44688153">
	<li id="hiddens_44688153" class="hide"></li>
</ul>

</li></ul></li><li id="tree_44680049" class="comment full contain"><span class="ind"></span>
<div id="comment_status_44680049" class="commentstatus"></div>
<div id="comment_44680049" class="cw">
	<div id="comment_top_44680049" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44680049" name="comment_link_44680049" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44680049" onclick="return D2.setFocusComment(44680049)" >Re:Broaden your functional horizons, Guido!</a>


		 	<span id="comment_score_44680049" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44680049); return false"><span class=opt>Score:</span>5</a>, Insightful)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Anonymous+Brave+Guy">Anonymous Brave Guy</a>  <span class="uid"><a href="//slashdot.org/~Anonymous+Brave+Guy">(457657)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44680049">		
		on Monday August 26, 2013 @04:39PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44680049">#44680049</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44680049"><p><div class="quote"><p>If you're going to depend on a set of public libraries instead of an included set, they you had better verify them for quality. This is why Python's "batteries included" stance is so good. You can depend on the basic libraries.</p></div><p>Ironically, that's actually one of my biggest concerns about using Python. IME, the included batteries <i>aren't</i> very good, once you get past the first few parts of the library reference that everyone uses all the time. A lot of the later parts -- things like file and directory manipulation, data formats and compression tools, process control, networking, even some of the date/time functionality -- have elements that are horribly slow, platform-dependent, or simply too bug-ridden to trust in production.</p><p>It's unfortunate that package management in Python is such a mess, mostly for historical reasons. There's quite a bit of good stuff on PyPI these days, and if we were starting over, I think we'd do better to limit the standard library to a much smaller set of essential foundations, and to promote the best libraries from outside sources via the standardised package repository and tools.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44680049">
<span class="ind"></span><a class="btn link" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;cid=44678199" onclick="return D2.selectParent(44678199)">Parent</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="janrain t" href="#" data-provider="twitter" data-message="Re:Broaden your functional horizons, Guido! by Anonymous Brave Guy @slashdot" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44680049" data-title="Re:Broaden your functional horizons, Guido!">twitter</a>
		<a class="janrain f" href="#" data-provider="facebook" data-message="Re:Broaden your functional horizons, Guido! by Anonymous Brave Guy" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44680049" data-title="Re:Broaden your functional horizons, Guido!">facebook</a>
		<a class="janrain l" href="#" data-provider="linkedin" data-message="Re:Broaden your functional horizons, Guido! by Anonymous Brave Guy" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44680049" data-title="Re:Broaden your functional horizons, Guido!">linkedin</a>
		<a class="g" href="http://plus.google.com/share?url=http://developers.slashdot.org/comments.pl?sid=4127779%26cid=44680049" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="//www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>
	</div>

</div>
</div>

<div id="replyto_44680049"></div>

<ul id="group_44680049">
	<li id="hiddens_44680049" class="hide"></li>
</ul>

<ul id="commtree_44680049"><li id="tree_44688189" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44688189" class="commentstatus"></div>
<div id="comment_44688189" class="cw">
	<div id="comment_top_44688189" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44688189" name="comment_link_44688189" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44688189" onclick="return D2.setFocusComment(44688189)" >Re:</a>


		 	<span id="comment_score_44688189" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44688189); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~HiThere">HiThere</a>  <span class="uid"><a href="//slashdot.org/~HiThere">(15173)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44688189"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44688189"><p>OK.  I've never encountered that problem.  Did you inform them of your problem?  Ask about it on the list?</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44688189">

</div>
</div>

<div id="replyto_44688189"></div>

<ul id="group_44688189">
	<li id="hiddens_44688189" class="hide"></li>
</ul>

<ul id="commtree_44688189"><li id="tree_44691733" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44691733" class="commentstatus"></div>
<div id="comment_44691733" class="cw">
	<div id="comment_top_44691733" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44691733" name="comment_link_44691733" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44691733" onclick="return D2.setFocusComment(44691733)" >Re:</a>


		 	<span id="comment_score_44691733" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44691733); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Anonymous+Brave+Guy">Anonymous Brave Guy</a>  <span class="uid"><a href="//slashdot.org/~Anonymous+Brave+Guy">(457657)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44691733"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44691733"><p>Assuming you're talking about the standard library rather than package management, unfortunately it's not just one problem. I'd estimate that I've found 20-25 significant library issues over the past few years of using Python on various projects.</p><p>Most of these issues aren't really bugs in the sense that the output is objectively wrong, though. It's more things like OS differences not quite being abstracted away completely so that sometimes running another process needs slightly different presentation of argu<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44691733">

</div>
</div>

<div id="replyto_44691733"></div>

<ul id="group_44691733">
	<li id="hiddens_44691733" class="hide"></li>
</ul>

</li></ul></li></ul></li></ul></li><li id="tree_44678215" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678215" class="commentstatus"></div>
<div id="comment_44678215" class="cw">
	<div id="comment_top_44678215" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678215" name="comment_link_44678215" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678215" onclick="return D2.setFocusComment(44678215)" >Re:</a>


		 	<span id="comment_score_44678215" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678215); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ebno-10db">ebno-10db</a>  <span class="uid"><a href="//slashdot.org/~ebno-10db">(1459097)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678215"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678215"><p>Even though I have mixed feelings about the Lisp family of languages, I wish they would become more popular. I've never been convinced that it's the One True Approach, but for some things they're great.</p><p>Unfortunately, much of the Lisp(s) community is the biggest enemy of the broader adoption of Lisp(s). Part of the problem is that one has  to refer to Lisp(s) in the plural. Common Lisp is clearly the most powerful variant, but it's byzantine in its (unnecessary) complexity and redundant features, as well as<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678215">

</div>
</div>

<div id="replyto_44678215"></div>

<ul id="group_44678215">
	<li id="hiddens_44678215" class="hide"></li>
</ul>

<ul id="commtree_44678215"><li id="tree_44678835" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678835" class="commentstatus"></div>
<div id="comment_44678835" class="cw">
	<div id="comment_top_44678835" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678835" name="comment_link_44678835" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678835" onclick="return D2.setFocusComment(44678835)" >Re:</a>


		 	<span id="comment_score_44678835" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678835); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~DuckDodgers">DuckDodgers</a>  <span class="uid"><a href="//slashdot.org/~DuckDodgers">(541817)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678835"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678835">I'm a Clojure fan, sorry.<nobr> <wbr></nobr>:)  Clojure offers many things, but I think the three most important features it adds to the standard Lisp strengths are:<br> 1.  Variables are immutable by default, though there are mechanisms for traditional mutable variables you have one extra step to use them.  That makes it easier to reason about your code, without forcing every variable to be immutable like Haskell. <br> 2. It's interoperable with Java, so aside from the relatively small Clojure standard library your extended "standa</div>
	</div>

	<div class="commentSub" id="comment_sub_44678835">

</div>
</div>

<div id="replyto_44678835"></div>

<ul id="group_44678835">
	<li id="hiddens_44678835" class="hide"></li>
</ul>

<ul id="commtree_44678835"><li id="tree_44678937" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678937" class="commentstatus"></div>
<div id="comment_44678937" class="cw">
	<div id="comment_top_44678937" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678937" name="comment_link_44678937" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678937" onclick="return D2.setFocusComment(44678937)" >Re:</a>


		 	<span id="comment_score_44678937" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678937); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ebno-10db">ebno-10db</a>  <span class="uid"><a href="//slashdot.org/~ebno-10db">(1459097)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678937"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678937"><p>I agree points 2 and 3 are important. As for point 1, I didn't say that Clojure was a bad language (I don't even know it), just that it was YALV. Even if it's superior to other Lisp(s), it's still another step in the balkanization that has helped keep Lisp(s) in a niche.</p><p>Having many standards is the same as having no standard, and often even a mediocre standard is better than no standard at all.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678937">

</div>
</div>

<div id="replyto_44678937"></div>

<ul id="group_44678937">
	<li id="hiddens_44678937" class="hide"></li>
</ul>

<ul id="commtree_44678937"><li id="tree_44679193" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679193" class="commentstatus"></div>
<div id="comment_44679193" class="cw">
	<div id="comment_top_44679193" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679193" name="comment_link_44679193" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679193" onclick="return D2.setFocusComment(44679193)" >Re:</a>


		 	<span id="comment_score_44679193" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679193); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~DuckDodgers">DuckDodgers</a>  <span class="uid"><a href="//slashdot.org/~DuckDodgers">(541817)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679193"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679193">Right.  But nobody in the Lisp community has the authority to fix the situation - and as you noted, the community is full of people who are opposed to any such fix, so the chances of someone entering the community to fix it is small. <br> <br>
So the best possible solution, weak though it may be, is to create something new that just borrows strengths from Lisp but is intentionally different. Clojure is that kind of attempt at a fresh start, and it breaks some Lisp syntax (using square brackets in some cases) and in</div>
	</div>

	<div class="commentSub" id="comment_sub_44679193">

</div>
</div>

<div id="replyto_44679193"></div>

<ul id="group_44679193">
	<li id="hiddens_44679193" class="hide"></li>
</ul>

</li></ul></li></ul></li></ul></li><li id="tree_44678235" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44678235" class="commentstatus"></div>
<div id="comment_44678235" class="cw">
</div>

<div id="replyto_44678235"></div>

<ul id="group_44678235">
	<li id="hiddens_44678235" class="hide"></li>
</ul>

<ul id="commtree_44678235"><li id="tree_44678465" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678465" class="commentstatus"></div>
<div id="comment_44678465" class="cw">
	<div id="comment_top_44678465" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678465" name="comment_link_44678465" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678465" onclick="return D2.setFocusComment(44678465)" >Re:</a>


		 	<span id="comment_score_44678465" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678465); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~DuckDodgers">DuckDodgers</a>  <span class="uid"><a href="//slashdot.org/~DuckDodgers">(541817)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678465"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678465">Then you and I are using different criteria to measure practicality - though I suspect my criteria line up more closely with Guido's criteria than yours.  <br> <br>
No matter how effective a tool is, if it's not in mainstream use that's a significant mark against its practicality.  Four decent Lisp developers might be able to build a particular piece of business software faster and with fewer errors than fifteen decent Python developers - but if I can't find four decent Lisp developers in the local market, I'm stil</div>
	</div>

	<div class="commentSub" id="comment_sub_44678465">

</div>
</div>

<div id="replyto_44678465"></div>

<ul id="group_44678465">
	<li id="hiddens_44678465" class="hide"></li>
</ul>

</li><li id="tree_44681023" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44681023" class="commentstatus"></div>
<div id="comment_44681023" class="cw">
	<div id="comment_top_44681023" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681023" name="comment_link_44681023" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681023" onclick="return D2.setFocusComment(44681023)" >Re:</a>


		 	<span id="comment_score_44681023" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681023); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Half-pint+HAL">Half-pint HAL</a>  <span class="uid"><a href="//slashdot.org/~Half-pint+HAL">(718102)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681023"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681023"><p><div class="quote"><p>It sounds like you're equating "traction in the mainstream" or "used in as much as 10% of the software created in any given year" with Guido's "very little practical value."</p><p>I think that's nutty.  Practical value and mainstream acceptance don't correlate much.  There are impractical things in the mainstream, and practical things outside of it.</p></div><p>No, he's just using a different sense on the word "practical" from the one you're thinking of. You're thinking "practicality", as in "facilty, ease-of-use, utility and efficiency." Guido, on the other hand means "in practice, in the status quo". It's of little value in the real world if the work isn't there.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44681023">

</div>
</div>

<div id="replyto_44681023"></div>

<ul id="group_44681023">
	<li id="hiddens_44681023" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_44677727" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44677727" class="commentstatus"></div>
<div id="comment_44677727" class="cw">
	<div id="comment_top_44677727" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677727" name="comment_link_44677727" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677727" onclick="return D2.setFocusComment(44677727)" >Re:</a>


		 	<span id="comment_score_44677727" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677727); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~phantomfive">phantomfive</a>  <span class="uid"><a href="//slashdot.org/~phantomfive">(622387)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677727"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677727">FWIW Lisp isn't a functional programming language; it has functional parts, but it's a multi-paradigmatic language that includes object oriented programming. So yeah, it can be used like that,  but modern Lisp is much, much more.<br> <br>
Incidentally, currently my favorite part of Lisp that I wish was in other languages is the way the variable binding allows for easy dependency injection, even in places where it wasn't originally designed that way. It makes unit testing a lot easier.</div>
	</div>

	<div class="commentSub" id="comment_sub_44677727">

</div>
</div>

<div id="replyto_44677727"></div>

<ul id="group_44677727">
	<li id="hiddens_44677727" class="hide"></li>
</ul>

</li><li id="tree_44677907" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44677907" class="commentstatus"></div>
<div id="comment_44677907" class="cw">
	<div id="comment_top_44677907" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677907" name="comment_link_44677907" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677907" onclick="return D2.setFocusComment(44677907)" >Re:</a>


		 	<span id="comment_score_44677907" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677907); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span>Anonymous Coward</span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677907"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677907"><p><div class="quote"><p> Guido, you're smarter than this...</p></div><p>No, he isn't.<br>If he was, Python would not rely on whitespace for scoping.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44677907">

</div>
</div>

<div id="replyto_44677907"></div>

<ul id="group_44677907">
	<li id="hiddens_44677907" class="hide"></li>
</ul>

<ul id="commtree_44677907"><li id="tree_44680541" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44680541" class="commentstatus"></div>
<div id="comment_44680541" class="cw">
	<div id="comment_top_44680541" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44680541" name="comment_link_44680541" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44680541" onclick="return D2.setFocusComment(44680541)" >Re:</a>


		 	<span id="comment_score_44680541" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44680541); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~BasilBrush">BasilBrush</a>  <span class="uid"><a href="//slashdot.org/~BasilBrush">(643681)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44680541"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44680541"><p>Actually, if other language designers were smarter, other languages would use indenting for blocks.*  Eliminating redundancy is a general aim in computing.  Languages that use curly brackets or other delimiters for blocks are unreadable unless they also use indenting. And once you have the redundancy of both delimiters AND whitespace you have the danger that the two may not be in agreement. Which is compounded by the one that the compiler relies on (delimiters) not being the same as the one that stands out<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44680541">

</div>
</div>

<div id="replyto_44680541"></div>

<ul id="group_44680541">
	<li id="hiddens_44680541" class="hide"></li>
</ul>

<ul id="commtree_44680541"><li id="tree_44681165" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44681165" class="commentstatus"></div>
<div id="comment_44681165" class="cw">
	<div id="comment_top_44681165" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681165" name="comment_link_44681165" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681165" onclick="return D2.setFocusComment(44681165)" >Re:</a>


		 	<span id="comment_score_44681165" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681165); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Half-pint+HAL">Half-pint HAL</a>  <span class="uid"><a href="//slashdot.org/~Half-pint+HAL">(718102)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681165"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681165"><p><div class="quote"><p>Actually, if other language designers were smarter, other languages would use indenting for blocks.*  Eliminating redundancy is a general aim in computing.  Languages that use curly brackets or other delimiters for blocks are unreadable unless they also use indenting. And once you have the redundancy of both delimiters AND whitespace you have the danger that the two may not be in agreement. Which is compounded by the one that the compiler relies on (delimiters) not being the same as the one that stands out most to the human (indenting.)</p><p>Using indents for blocks has a drawback in that standard text editors aren't good at matching the indent level when cutting and pasting. But that simply means that only Python aware editors should be used for python code. Not difficult when most programmers use IDEs.</p><p>* (Which is what you actually mean. Scope relies on more than whitespace.)</p></div><p>You have almost achieved enlightment, grasshopper, but you have yet to catch that fly with your chopsticks...</p><p> <b>Q:</b> Why is (for example) C reliant on human intervention for both curly-bracing and indentation? <b>A:</b> Because coders have a fetish for "human-readable" source code that can be used in a "dumb" text editor.</p><p>Now, you state that the solution to the Python copy-and-paste problem is a "Python-aware" editor... so why shouldn't the solution to the braces/indentation redundancy in C, Java etc. be a C-/Java-awar<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44681165">

</div>
</div>

<div id="replyto_44681165"></div>

<ul id="group_44681165">
	<li id="hiddens_44681165" class="hide"></li>
</ul>

<ul id="commtree_44681165"><li id="tree_44681513" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44681513" class="commentstatus"></div>
<div id="comment_44681513" class="cw">
	<div id="comment_top_44681513" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681513" name="comment_link_44681513" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681513" onclick="return D2.setFocusComment(44681513)" >Re:</a>


		 	<span id="comment_score_44681513" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681513); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~mattack2">mattack2</a>  <span class="uid"><a href="//slashdot.org/~mattack2">(1165421)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681513"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681513"><p>The "redundancy" is because we want human-readable source code, as you state.</p><p>But it's not really redundant, because it (should) just be ADDITIONAL information.</p><p>BTW, I like and use Python, but would pay money for a way I could turn off intent == scope *in a way that would work in every Python interpreter I'm likely to find*.  (i.e. not a hack I have to add on and build my own interpreter)</p><p>Copy-paste is one example that often wrecks code.  Also, simply wanting to turn off a conditional check to debug something<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44681513">

</div>
</div>

<div id="replyto_44681513"></div>

<ul id="group_44681513">
	<li id="hiddens_44681513" class="hide"></li>
</ul>

<ul id="commtree_44681513"><li id="tree_44683727" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44683727" class="commentstatus"></div>
<div id="comment_44683727" class="cw">
	<div id="comment_top_44683727" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44683727" name="comment_link_44683727" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44683727" onclick="return D2.setFocusComment(44683727)" >Re:</a>


		 	<span id="comment_score_44683727" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44683727); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~mrvan">mrvan</a>  <span class="uid"><a href="//slashdot.org/~mrvan">(973822)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44683727"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44683727"><p>+1, I'm a big python fan, but I think the whitespace is a mistake, for a number of reasons:</p><p>1) a snippet of whitespace-blocked code has an absolute indentation level; while a piece of curly bracket style code has relative levels. This makes copy paste and refactoring clumsy. A 'python aware editor' does not really solve this since there is not 'end of block' mark except for the indentation</p><p>2) the python whitespace system is redundant in itself by requiring both a colon and a increase-indent token as a block s<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44683727">

</div>
</div>

<div id="replyto_44683727"></div>

<ul id="group_44683727">
	<li id="hiddens_44683727" class="hide"></li>
</ul>

</li></ul></li><li id="tree_44690715" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44690715" class="commentstatus"></div>
<div id="comment_44690715" class="cw">
	<div id="comment_top_44690715" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44690715" name="comment_link_44690715" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44690715" onclick="return D2.setFocusComment(44690715)" >Re:</a>


		 	<span id="comment_score_44690715" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44690715); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~BasilBrush">BasilBrush</a>  <span class="uid"><a href="//slashdot.org/~BasilBrush">(643681)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44690715"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44690715"><p><div class="quote"><p>You have almost achieved enlightment, grasshopper</p></div><p>Yeah. That tactic only really works when you are addressing someone with a higher UID than you.</p><p>"Fetish" is a strange choice of word for humans being more efficient at maintaining easy to read code than hard to read code. And indenting blocks is near the top of the list of most significant aids for readability.</p><p><div class="quote"><p>so why shouldn't the solution to the braces/indentation redundancy in C, Java etc. be a C-/Java-aware editor?</p></div><p>It might be a help. But the fact it hasn't become a common feature in IDEs raises some question marks. (Note to others, there are plenty of IDEs that indent after a curly brace. But few if any that alw<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44690715">

</div>
</div>

<div id="replyto_44690715"></div>

<ul id="group_44690715">
	<li id="hiddens_44690715" class="hide"></li>
</ul>

</li></ul></li></ul></li></ul></li><li id="tree_44679155" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679155" class="commentstatus"></div>
<div id="comment_44679155" class="cw">
	<div id="comment_top_44679155" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679155" name="comment_link_44679155" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679155" onclick="return D2.setFocusComment(44679155)" >Re:</a>


		 	<span id="comment_score_44679155" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679155); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~angel'o'sphere">angel'o'sphere</a>  <span class="uid"><a href="//slashdot.org/~angel'o'sphere">(80593)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679155"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679155"><p>Lips is a multi paradigm language, you hardly can call it functional. (Hint: is Lisp more popular than Haskel anyway?)<br>Erlang certainly is far less used than Haskel, so his point is very valid.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44679155">

</div>
</div>

<div id="replyto_44679155"></div>

<ul id="group_44679155">
	<li id="hiddens_44679155" class="hide"></li>
</ul>

</li><li id="tree_44677951" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44677951" class="commentstatus"></div>
<div id="comment_44677951" class="cw">
</div>

<div id="replyto_44677951"></div>

<ul id="group_44677951">
	<li id="hiddens_44677951" class="hide"></li>
</ul>

<ul id="commtree_44677951"><li id="tree_44681473" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44681473" class="commentstatus"></div>
<div id="comment_44681473" class="cw">
	<div id="comment_top_44681473" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681473" name="comment_link_44681473" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681473" onclick="return D2.setFocusComment(44681473)" >Re:</a>


		 	<span id="comment_score_44681473" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681473); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Half-pint+HAL">Half-pint HAL</a>  <span class="uid"><a href="//slashdot.org/~Half-pint+HAL">(718102)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681473"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681473"><p><div class="quote"><p>eh, the functional guys scream and yell when you call lisp or erlang functional.  I mean, they have side effects!  No, you have to program in lambda calculus or some other gimped language that's not actually capable of doing anything useful.</p></div><p>I think you mean "<i>not actually capable of doing <b>everything</b> useful." Functional programming is a wonderful paradigm for handling a whole lot of serious numerical data. It is clean to the point of being almost bomb-proof. Yes, real user-space applications has interaction as its main goal, so FP's term "side-effect" seems almost insulting.</i><span class="substr"> </span> </p><p>So no, you can't write a whole software package functionally, but if FP was integrated properly into multi-paradigm programming, it would simplify debugging no end. What do I</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44681473">

</div>
</div>

<div id="replyto_44681473"></div>

<ul id="group_44681473">
	<li id="hiddens_44681473" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_44677487" class="comment full contain"><span class="ind"></span>
<div id="comment_status_44677487" class="commentstatus"></div>
<div id="comment_44677487" class="cw">
	<div id="comment_top_44677487" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677487" name="comment_link_44677487" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677487" onclick="return D2.setFocusComment(44677487)" >He did answer one question</a>


		 	<span id="comment_score_44677487" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677487); return false"><span class=opt>Score:</span>3</a>, Funny)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~buchner.johannes">buchner.johannes</a>  <span class="uid"><a href="//slashdot.org/~buchner.johannes">(1139593)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677487">		
		on Monday August 26, 2013 @12:22PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677487">#44677487</a>)
		<small><a href="http://johannes.jakeapp.com/blog/" title="http://johannes.jakeapp.com/blog/" class="user_homepage_display">Homepage</a>
<a href="//slashdot.org/~buchner.johannes/journal/" title="Sunday May 31, 2009 @10:41AM" class="user_journal_display">Journal</a> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677487"><p>He did answer one question once and for all. The smiley closes the bracket.<br><a href="https://xkcd.com/541/" title="xkcd.com">https://xkcd.com/541/</a> [xkcd.com] All hail the BDFL</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44677487">
	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="janrain t" href="#" data-provider="twitter" data-message="He did answer one question by buchner.johannes @slashdot" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677487" data-title="He did answer one question">twitter</a>
		<a class="janrain f" href="#" data-provider="facebook" data-message="He did answer one question by buchner.johannes" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677487" data-title="He did answer one question">facebook</a>
		<a class="janrain l" href="#" data-provider="linkedin" data-message="He did answer one question by buchner.johannes" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677487" data-title="He did answer one question">linkedin</a>
		<a class="g" href="http://plus.google.com/share?url=http://developers.slashdot.org/comments.pl?sid=4127779%26cid=44677487" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="//www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>
	</div>

</div>
</div>

<div id="replyto_44677487"></div>

<ul id="group_44677487">
	<li id="hiddens_44677487" class="hide"></li>
</ul>

</li><li id="tree_44677515" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44677515" class="commentstatus"></div>
<div id="comment_44677515" class="cw">
	<div id="comment_top_44677515" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677515" name="comment_link_44677515" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677515" onclick="return D2.setFocusComment(44677515)" >Summary</a>


		 	<span id="comment_score_44677515" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677515); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~zepo1a">zepo1a</a>  <span class="uid"><a href="//slashdot.org/~zepo1a">(958353)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677515"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677515"><p>"Guido wasted not time answering your questions and you'll find his responses below."</p><p>Just like editor wasted not time editing/checking the summary before posting.</p><p>Zep--</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44677515">

</div>
</div>

<div id="replyto_44677515"></div>

<ul id="group_44677515">
	<li id="hiddens_44677515" class="hide"></li>
</ul>

<ul id="commtree_44677515"><li id="tree_44677807" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44677807" class="commentstatus"></div>
<div id="comment_44677807" class="cw">
	<div id="comment_top_44677807" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677807" name="comment_link_44677807" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677807" onclick="return D2.setFocusComment(44677807)" >Re:</a>


		 	<span id="comment_score_44677807" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677807); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~M.+Baranczak">M. Baranczak</a>  <span class="uid"><a href="//slashdot.org/~M.+Baranczak">(726671)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677807"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677807"><p>"Wasted not" is synonymous with "did not waste". It sounds pretentiously archaic, but it is correct. On the other hand, borking up the whitespace in a <em>Python</em> code sample? That ain't OK at all.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44677807">

</div>
</div>

<div id="replyto_44677807"></div>

<ul id="group_44677807">
	<li id="hiddens_44677807" class="hide"></li>
</ul>

<ul id="commtree_44677807"><li id="tree_44677965" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44677965" class="commentstatus"></div>
<div id="comment_44677965" class="cw">
	<div id="comment_top_44677965" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677965" name="comment_link_44677965" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677965" onclick="return D2.setFocusComment(44677965)" >Re:</a>


		 	<span id="comment_score_44677965" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677965); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~fahrbot-bot">fahrbot-bot</a>  <span class="uid"><a href="//slashdot.org/~fahrbot-bot">(874524)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677965"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677965"><p><div class="quote"><p>On the other hand, borking up the whitespace in a Python code sample? That ain't OK at all.</p></div><p>
Which is borked with respect to the whitespace, the example or Python?  Obviously both and I submit that the latter enables the former which is why it's a horrible language "feature." [ Flame me if you want Python fans, but you know in your hearts I'm right.<nobr> <wbr></nobr>:-) ] [ And, *that*, Randall (https://xkcd.com/541/) is how you terminate a parenthetical with an emoticon<nobr> <wbr></nobr>:-) ]</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44677965">

</div>
</div>

<div id="replyto_44677965"></div>

<ul id="group_44677965">
	<li id="hiddens_44677965" class="hide"></li>
</ul>

<ul id="commtree_44677965"><li id="tree_44678105" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678105" class="commentstatus"></div>
<div id="comment_44678105" class="cw">
	<div id="comment_top_44678105" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678105" name="comment_link_44678105" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678105" onclick="return D2.setFocusComment(44678105)" >Re:</a>


		 	<span id="comment_score_44678105" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678105); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~M.+Baranczak">M. Baranczak</a>  <span class="uid"><a href="//slashdot.org/~M.+Baranczak">(726671)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678105"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678105"><p>Both, of course.</p><p>My point was that removing indents is never OK, with any language, since it makes the code unreadable. In this case, it also made the code uncompilable, but that's just a secondary offense.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678105">

</div>
</div>

<div id="replyto_44678105"></div>

<ul id="group_44678105">
	<li id="hiddens_44678105" class="hide"></li>
</ul>

<ul id="commtree_44678105"><li id="tree_44679579" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679579" class="commentstatus"></div>
<div id="comment_44679579" class="cw">
	<div id="comment_top_44679579" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679579" name="comment_link_44679579" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679579" onclick="return D2.setFocusComment(44679579)" >Re:</a>


		 	<span id="comment_score_44679579" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679579); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~rwa2">rwa2</a>  <span class="uid"><a href="//slashdot.org/~rwa2">(4391)</a></span></a> <a href="/faq/subscriptions.shtml#subscription_other_advantages">*</a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679579"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679579"><p>This.  Though I have to admit, I've often been tempted to insert meaningful <a href="http://en.wikipedia.org/wiki/Whitespace_(programming_language)" title="wikipedia.org">whitespace</a> [wikipedia.org] in there.</p><p>Maybe someday when I submit to the temptation to play with <a href="https://github.com/mame/quine-relay" title="github.com">https://github.com/mame/quine-relay</a> [github.com]</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44679579">

</div>
</div>

<div id="replyto_44679579"></div>

<ul id="group_44679579">
	<li id="hiddens_44679579" class="hide"></li>
</ul>

</li></ul></li><li id="tree_44679015" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679015" class="commentstatus"></div>
<div id="comment_44679015" class="cw">
	<div id="comment_top_44679015" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679015" name="comment_link_44679015" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679015" onclick="return D2.setFocusComment(44679015)" >Re:</a>


		 	<span id="comment_score_44679015" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679015); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~RoccamOccam">RoccamOccam</a>  <span class="uid"><a href="//slashdot.org/~RoccamOccam">(953524)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679015"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679015"><p>Flamebait, but I'll bite.</p><p>
The thing that got me interested in Python at the very beginning was its use of whitespace. So no, in my heart, I don't think you are right (I was a big fan of Occam).  For me, it is clearly the way a programming language should be designed.  I understand that it doesn't suit others; but, interestingly, that feature is one of the key (and overlooked) reasons why Python has become so prevalent.</p><p>There is clearly a (sufficiently) large subset of the programming community that strongly<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44679015">

</div>
</div>

<div id="replyto_44679015"></div>

<ul id="group_44679015">
	<li id="hiddens_44679015" class="hide"></li>
</ul>

<ul id="commtree_44679015"><li id="tree_44681547" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44681547" class="commentstatus"></div>
<div id="comment_44681547" class="cw">
	<div id="comment_top_44681547" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681547" name="comment_link_44681547" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681547" onclick="return D2.setFocusComment(44681547)" >Re:</a>


		 	<span id="comment_score_44681547" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681547); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~mattack2">mattack2</a>  <span class="uid"><a href="//slashdot.org/~mattack2">(1165421)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681547"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681547"><blockquote><div><p>There is clearly a (sufficiently) large subset of the programming community that strongly prefer whitespace scoping. And for those people, what are the other mainstream choices? Personally, I don't know of any (although, I'm sure that there are a few). And new language designers are less likely to follow Python's lead because of outspoken critics, like you.</p></div></blockquote><p>Default to whitespace == scope, fine.  But give a #define or option to turn it off/go back to {} or BEGIN/END or whatever instead...</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44681547">

</div>
</div>

<div id="replyto_44681547"></div>

<ul id="group_44681547">
	<li id="hiddens_44681547" class="hide"></li>
</ul>

<ul id="commtree_44681547"><li id="tree_44684895" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44684895" class="commentstatus"></div>
<div id="comment_44684895" class="cw">
	<div id="comment_top_44684895" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44684895" name="comment_link_44684895" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44684895" onclick="return D2.setFocusComment(44684895)" >Re:</a>


		 	<span id="comment_score_44684895" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44684895); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~RoccamOccam">RoccamOccam</a>  <span class="uid"><a href="//slashdot.org/~RoccamOccam">(953524)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44684895"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44684895">The Zen of Python
<p>by Tim Peters</p><p>
Beautiful is better than ugly.<br>
Explicit is better than implicit.<br>
Simple is better than complex.<br>
Complex is better than complicated.<br>
Flat is better than nested.<br>
Sparse is better than dense.<br>
Readability counts.<br>
Special cases aren't special enough to break the rules.<br>
Although practicality beats purity.<br>
Errors should never pass silently.<br>
Unless explicitly silenced.<br>
In the face of ambiguity, refuse the temptation to guess.<br>
<b>There should be one-- and preferably only one --obvious wa<span class="substr"> </span></b></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44684895">

</div>
</div>

<div id="replyto_44684895"></div>

<ul id="group_44684895">
	<li id="hiddens_44684895" class="hide"></li>
</ul>

</li><li id="tree_44723839" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44723839" class="commentstatus"></div>
<div id="comment_44723839" class="cw">
</div>

<div id="replyto_44723839"></div>

<ul id="group_44723839">
	<li id="hiddens_44723839" class="hide"></li>
</ul>

<ul id="commtree_44723839"><li id="tree_44751303" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44751303" class="commentstatus"></div>
<div id="comment_44751303" class="cw">
	<div id="comment_top_44751303" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44751303" name="comment_link_44751303" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44751303" onclick="return D2.setFocusComment(44751303)" >Re:</a>


		 	<span id="comment_score_44751303" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44751303); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~mattack2">mattack2</a>  <span class="uid"><a href="//slashdot.org/~mattack2">(1165421)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44751303"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44751303"><p>I did learn something new, I learned Python..and for the most part, I like it.. It's more readable (as in sourcecode, not as in indentation) than Perl.</p><p>It's mostly the indent==scope that's so annoying.  There's a couple of other things, like seemingly unnecessary colons in a few places, but those are VERY VERY minor compared to the huge issue that is indentation == scope.</p><p>But I still use Python.  Can't you see that liking something, despite greatly disliking one of its huge distinguishing features, is actuall<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44751303">

</div>
</div>

<div id="replyto_44751303"></div>

<ul id="group_44751303">
	<li id="hiddens_44751303" class="hide"></li>
</ul>

</li></ul></li></ul></li></ul></li></ul></li><li id="tree_44678337" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678337" class="commentstatus"></div>
<div id="comment_44678337" class="cw">
	<div id="comment_top_44678337" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678337" name="comment_link_44678337" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678337" onclick="return D2.setFocusComment(44678337)" >Re:</a>


		 	<span id="comment_score_44678337" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678337); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ebno-10db">ebno-10db</a>  <span class="uid"><a href="//slashdot.org/~ebno-10db">(1459097)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678337"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678337"><p><div class="quote"><p>borking up the whitespace in a <em>Python</em> code sample? That ain't OK at all.</p></div><p>It may have to do with a sloppy HTML conversion by Slashdot or something, but it <i>is</i> ironic.</p><p>P.S. I'm actually a fan of the Python/Haskell whitespace approach.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678337">

</div>
</div>

<div id="replyto_44678337"></div>

<ul id="group_44678337">
	<li id="hiddens_44678337" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_44677561" class="comment full contain"><span class="ind"></span>
<div id="comment_status_44677561" class="commentstatus"></div>
<div id="comment_44677561" class="cw">
	<div id="comment_top_44677561" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677561" name="comment_link_44677561" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677561" onclick="return D2.setFocusComment(44677561)" >whitespace</a>


		 	<span id="comment_score_44677561" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677561); return false"><span class=opt>Score:</span>3</a>, Interesting)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~photonic">photonic</a>  <span class="uid"><a href="//slashdot.org/~photonic">(584757)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677561">		
		on Monday August 26, 2013 @12:34PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677561">#44677561</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677561">I know about all the religious arguments pro or against whitespace as syntax. Personally, I am a happy user of python and I actually like the forced indentation, YMMV. But please slashdot, why do you screw up the indentation when the inventor of a whitespace-as-syntax-language gives a code example? This will be too easy for anyone arguing against the use whitespace of syntax.</div>
	</div>

	<div class="commentSub" id="comment_sub_44677561">
	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="janrain t" href="#" data-provider="twitter" data-message="whitespace by photonic @slashdot" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677561" data-title="whitespace">twitter</a>
		<a class="janrain f" href="#" data-provider="facebook" data-message="whitespace by photonic" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677561" data-title="whitespace">facebook</a>
		<a class="janrain l" href="#" data-provider="linkedin" data-message="whitespace by photonic" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677561" data-title="whitespace">linkedin</a>
		<a class="g" href="http://plus.google.com/share?url=http://developers.slashdot.org/comments.pl?sid=4127779%26cid=44677561" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="//www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>
	</div>

</div>
</div>

<div id="replyto_44677561"></div>

<ul id="group_44677561">
	<li id="hiddens_44677561" class="hide"></li>
</ul>

<ul id="commtree_44677561"><li id="tree_44677811" class="comment full contain"><span class="ind"></span>
<div id="comment_status_44677811" class="commentstatus"></div>
<div id="comment_44677811" class="cw">
	<div id="comment_top_44677811" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677811" name="comment_link_44677811" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677811" onclick="return D2.setFocusComment(44677811)" >Re:whitespace</a>


		 	<span id="comment_score_44677811" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677811); return false"><span class=opt>Score:</span>5</a>, Insightful)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span>Anonymous Coward</span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677811">		
		on Monday August 26, 2013 @12:59PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677811">#44677811</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677811"><p>What do you mean, too easy? That's exactly what's wrong with making indentation part of the syntax. It's too easy to break. It's only fitting that code given by the head honcho of Python falls victim to reformatting. It is literally his own fault.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44677811">
<span class="ind"></span><a class="btn link" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;cid=44677561" onclick="return D2.selectParent(44677561)">Parent</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="janrain t" href="#" data-provider="twitter" data-message="Re:whitespace by Anonymous Coward @slashdot" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677811" data-title="Re:whitespace">twitter</a>
		<a class="janrain f" href="#" data-provider="facebook" data-message="Re:whitespace by Anonymous Coward" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677811" data-title="Re:whitespace">facebook</a>
		<a class="janrain l" href="#" data-provider="linkedin" data-message="Re:whitespace by Anonymous Coward" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677811" data-title="Re:whitespace">linkedin</a>
		<a class="g" href="http://plus.google.com/share?url=http://developers.slashdot.org/comments.pl?sid=4127779%26cid=44677811" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="//www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>
	</div>

</div>
</div>

<div id="replyto_44677811"></div>

<ul id="group_44677811">
	<li id="hiddens_44677811" class="hide"></li>
</ul>

<ul id="commtree_44677811"><li id="tree_44677925" class="comment full contain"><span class="ind"></span>
<div id="comment_status_44677925" class="commentstatus"></div>
<div id="comment_44677925" class="cw">
	<div id="comment_top_44677925" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677925" name="comment_link_44677925" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677925" onclick="return D2.setFocusComment(44677925)" >Re:whitespace</a>


		 	<span id="comment_score_44677925" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677925); return false"><span class=opt>Score:</span>4</a>, Insightful)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span>Anonymous Coward</span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677925">		
		on Monday August 26, 2013 @01:10PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677925">#44677925</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677925"><p>I have found that everyone who complains about The Python Whitespace Thing are people who have convinced themselves that they are <i>special little snowflakes</i> and therefore any attempt to limit their <i>creative output on whitespace use</i> must be some kind of crime against humanity. Any time I get code in a free-whitespace language from someone like that, I need to run it through a code formatter before it's readable.</p><p>You are not special. Your unique ideas about how to indent code are not special, so fucking indent your code according to the standard. The fact that Python mandates proper indentation is a feature, not a bug. The fact that C lets you throw the whole program on one line is a bug, not a feature.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44677925">
<span class="ind"></span><a class="btn link" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;cid=44677811" onclick="return D2.selectParent(44677811)">Parent</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="janrain t" href="#" data-provider="twitter" data-message="Re:whitespace by Anonymous Coward @slashdot" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677925" data-title="Re:whitespace">twitter</a>
		<a class="janrain f" href="#" data-provider="facebook" data-message="Re:whitespace by Anonymous Coward" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677925" data-title="Re:whitespace">facebook</a>
		<a class="janrain l" href="#" data-provider="linkedin" data-message="Re:whitespace by Anonymous Coward" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677925" data-title="Re:whitespace">linkedin</a>
		<a class="g" href="http://plus.google.com/share?url=http://developers.slashdot.org/comments.pl?sid=4127779%26cid=44677925" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="//www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>
	</div>

</div>
</div>

<div id="replyto_44677925"></div>

<ul id="group_44677925">
	<li id="hiddens_44677925" class="hide"></li>
</ul>

<ul id="commtree_44677925"><li id="tree_44678317" class="comment full contain"><span class="ind"></span>
<div id="comment_status_44678317" class="commentstatus"></div>
<div id="comment_44678317" class="cw">
	<div id="comment_top_44678317" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678317" name="comment_link_44678317" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678317" onclick="return D2.setFocusComment(44678317)" >Re:whitespace</a>


		 	<span id="comment_score_44678317" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678317); return false"><span class=opt>Score:</span>5</a>, Insightful)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span>Anonymous Coward</span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678317">		
		on Monday August 26, 2013 @01:47PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678317">#44678317</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678317"><p>You can run my code through a code formatter if you don't like my choice of coding convention. You can not fix the broken code from the story by running it through a code formatter, because the inadvertent reformatting destroyed its meaning.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678317">
<span class="ind"></span><a class="btn link" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;cid=44677925" onclick="return D2.selectParent(44677925)">Parent</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="janrain t" href="#" data-provider="twitter" data-message="Re:whitespace by Anonymous Coward @slashdot" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44678317" data-title="Re:whitespace">twitter</a>
		<a class="janrain f" href="#" data-provider="facebook" data-message="Re:whitespace by Anonymous Coward" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44678317" data-title="Re:whitespace">facebook</a>
		<a class="janrain l" href="#" data-provider="linkedin" data-message="Re:whitespace by Anonymous Coward" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44678317" data-title="Re:whitespace">linkedin</a>
		<a class="g" href="http://plus.google.com/share?url=http://developers.slashdot.org/comments.pl?sid=4127779%26cid=44678317" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="//www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>
	</div>

</div>
</div>

<div id="replyto_44678317"></div>

<ul id="group_44678317">
	<li id="hiddens_44678317" class="hide"></li>
</ul>

<ul id="commtree_44678317"><li id="tree_44680255" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44680255" class="commentstatus"></div>
<div id="comment_44680255" class="cw">
	<div id="comment_top_44680255" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44680255" name="comment_link_44680255" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44680255" onclick="return D2.setFocusComment(44680255)" >Re:</a>


		 	<span id="comment_score_44680255" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44680255); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Anonymous+Brave+Guy">Anonymous Brave Guy</a>  <span class="uid"><a href="//slashdot.org/~Anonymous+Brave+Guy">(457657)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44680255"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44680255"><p><div class="quote"><p>You can run my code through a code formatter if you don't like my choice of coding convention.</p></div><p>Sure you can, as long as you promise to convert it back again perfectly before you commit, so anyone looking at the diffs later doesn't have to wade through 657 whitespace-related changes to spot the one line where you changes some behaviour.</p><p>Languages with syntactic whitespace are vulnerable to misrepresentation, but in practice 99% of that misrepresentation happens under exactly one condition: the code is being presented on a web page by someone who either doesn't know basic HTML or uses a crappy CMS that<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44680255">

</div>
</div>

<div id="replyto_44680255"></div>

<ul id="group_44680255">
	<li id="hiddens_44680255" class="hide"></li>
</ul>

<ul id="commtree_44680255"><li id="tree_44681509" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44681509" class="commentstatus"></div>
<div id="comment_44681509" class="cw">
	<div id="comment_top_44681509" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681509" name="comment_link_44681509" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681509" onclick="return D2.setFocusComment(44681509)" >Re:</a>


		 	<span id="comment_score_44681509" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681509); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Half-pint+HAL">Half-pint HAL</a>  <span class="uid"><a href="//slashdot.org/~Half-pint+HAL">(718102)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681509"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681509">Run diff -w</div>
	</div>

	<div class="commentSub" id="comment_sub_44681509">

</div>
</div>

<div id="replyto_44681509"></div>

<ul id="group_44681509">
	<li id="hiddens_44681509" class="hide"></li>
</ul>

</li><li id="tree_44681569" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44681569" class="commentstatus"></div>
<div id="comment_44681569" class="cw">
	<div id="comment_top_44681569" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681569" name="comment_link_44681569" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681569" onclick="return D2.setFocusComment(44681569)" >Re:</a>


		 	<span id="comment_score_44681569" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681569); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~mattack2">mattack2</a>  <span class="uid"><a href="//slashdot.org/~mattack2">(1165421)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681569"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681569"><blockquote><div><p>Sure you can, as long as you promise to convert it back again perfectly before you commit, so anyone looking at the diffs later doesn't have to wade through 657 whitespace-related changes to spot the one line where you changes some behaviour.</p></div></blockquote><p>I agree with you, but...</p><p>diff  --ignore-space-change</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44681569">

</div>
</div>

<div id="replyto_44681569"></div>

<ul id="group_44681569">
	<li id="hiddens_44681569" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_44679681" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679681" class="commentstatus"></div>
<div id="comment_44679681" class="cw">
	<div id="comment_top_44679681" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679681" name="comment_link_44679681" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679681" onclick="return D2.setFocusComment(44679681)" >Re:</a>


		 	<span id="comment_score_44679681" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679681); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~rwa2">rwa2</a>  <span class="uid"><a href="//slashdot.org/~rwa2">(4391)</a></span></a> <a href="/faq/subscriptions.shtml#subscription_other_advantages">*</a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679681"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679681"><p>... also, they're probably butthurt from their python tweaks not compiling because they don't know how to configure their editor to replace tabs with [248] spaces</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44679681">

</div>
</div>

<div id="replyto_44679681"></div>

<ul id="group_44679681">
	<li id="hiddens_44679681" class="hide"></li>
</ul>

</li><li id="tree_44681899" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44681899" class="commentstatus"></div>
<div id="comment_44681899" class="cw">
	<div id="comment_top_44681899" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681899" name="comment_link_44681899" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681899" onclick="return D2.setFocusComment(44681899)" >Re:</a>


		 	<span id="comment_score_44681899" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681899); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~chrismcb">chrismcb</a>  <span class="uid"><a href="//slashdot.org/~chrismcb">(983081)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681899"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681899"><p><div class="quote"><p>I have found that everyone who complains about The Python Whitespace Thing are people who have convinced themselves that they are <i>special little snowflakes</i> and therefore any attempt to limit their <i>creative output on whitespace use</i> must be some kind of crime against humanity.</p></div><p>I'm not special, and I don't use whitespace creatively. I can't STAND it when code isn't indented properly. And yet I still think Python's whitespace is awful, and it is what makes Python a toy language. For one thing, I had having to visually see my whitespace, yet if you don't, you might accidentally mix tabs and spaces and Python gets unhappy.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44681899">

</div>
</div>

<div id="replyto_44681899"></div>

<ul id="group_44681899">
	<li id="hiddens_44681899" class="hide"></li>
</ul>

</li></ul></li><li id="tree_44677985" class="comment full contain"><span class="ind"></span>
<div id="comment_status_44677985" class="commentstatus"></div>
<div id="comment_44677985" class="cw">
	<div id="comment_top_44677985" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677985" name="comment_link_44677985" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677985" onclick="return D2.setFocusComment(44677985)" >Re:whitespace</a>


		 	<span id="comment_score_44677985" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677985); return false"><span class=opt>Score:</span>5</a>, Insightful)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~countach74">countach74</a>  <span class="uid"><a href="//slashdot.org/~countach74">(2484150)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677985">		
		on Monday August 26, 2013 @01:14PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677985">#44677985</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677985">I do a fair bit of programming in Python and curly-bracket languages (C, C++, JavaScript, PHP, etc.) and interestingly, a forgotten/misplaced curly bracket in any of those various curly-bracket languages seem to break my code vastly more often than indentation issues do. Your code should *always* be indented. Python whitespace should already be there in all of your code (minus an occasional tweak here and there). Why complain about having to write {} less frequently?</div>
	</div>

	<div class="commentSub" id="comment_sub_44677985">
<span class="ind"></span><a class="btn link" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;cid=44677811" onclick="return D2.selectParent(44677811)">Parent</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="janrain t" href="#" data-provider="twitter" data-message="Re:whitespace by countach74 @slashdot" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677985" data-title="Re:whitespace">twitter</a>
		<a class="janrain f" href="#" data-provider="facebook" data-message="Re:whitespace by countach74" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677985" data-title="Re:whitespace">facebook</a>
		<a class="janrain l" href="#" data-provider="linkedin" data-message="Re:whitespace by countach74" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677985" data-title="Re:whitespace">linkedin</a>
		<a class="g" href="http://plus.google.com/share?url=http://developers.slashdot.org/comments.pl?sid=4127779%26cid=44677985" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="//www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>
	</div>

</div>
</div>

<div id="replyto_44677985"></div>

<ul id="group_44677985">
	<li id="hiddens_44677985" class="hide"></li>
</ul>

<ul id="commtree_44677985"><li id="tree_44678093" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678093" class="commentstatus"></div>
<div id="comment_44678093" class="cw">
	<div id="comment_top_44678093" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678093" name="comment_link_44678093" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678093" onclick="return D2.setFocusComment(44678093)" >Re:</a>


		 	<span id="comment_score_44678093" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678093); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~You're+All+Wrong">You're All Wrong</a>  <span class="uid"><a href="//slashdot.org/~You're+All+Wrong">(573825)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678093"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678093">Because your code is more fragile to misrendering or mistransmission by Slashdot, and MS Exchange, and yahoogroups, and google groups, and<nobr> <wbr></nobr>...<br><br>The answer to your question was in your parent post, did you not see it?</div>
	</div>

	<div class="commentSub" id="comment_sub_44678093">

</div>
</div>

<div id="replyto_44678093"></div>

<ul id="group_44678093">
	<li id="hiddens_44678093" class="hide"></li>
</ul>

<ul id="commtree_44678093"><li id="tree_44679397" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679397" class="commentstatus"></div>
<div id="comment_44679397" class="cw">
	<div id="comment_top_44679397" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679397" name="comment_link_44679397" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679397" onclick="return D2.setFocusComment(44679397)" >Re:</a>


		 	<span id="comment_score_44679397" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679397); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~countach74">countach74</a>  <span class="uid"><a href="//slashdot.org/~countach74">(2484150)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679397"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679397">As others have stated, use a proper means of code sharing. It's pretty terrible reading any language when all indentation white space is stripped from it. This is not a problem unique to Python (or other languages with significant white space). Just because the code in question can pass a syntax check does not mean that it is not easily misrendered or mistransmitted.</div>
	</div>

	<div class="commentSub" id="comment_sub_44679397">

</div>
</div>

<div id="replyto_44679397"></div>

<ul id="group_44679397">
	<li id="hiddens_44679397" class="hide"></li>
</ul>

<ul id="commtree_44679397"><li id="tree_44679923" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679923" class="commentstatus"></div>
<div id="comment_44679923" class="cw">
	<div id="comment_top_44679923" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679923" name="comment_link_44679923" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679923" onclick="return D2.setFocusComment(44679923)" >Re:</a>


		 	<span id="comment_score_44679923" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679923); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~AuMatar">AuMatar</a>  <span class="uid"><a href="//slashdot.org/~AuMatar">(183847)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679923"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679923"><p>A website is a proper means of code sharing.  If your language has issues with it, your language is broken and unusable.  There is no excuse for not supporting the most popular method of idea exchange in the last 20 years.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44679923">

</div>
</div>

<div id="replyto_44679923"></div>

<ul id="group_44679923">
	<li id="hiddens_44679923" class="hide"></li>
</ul>

<ul id="commtree_44679923"><li id="tree_44680765" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44680765" class="commentstatus"></div>
<div id="comment_44680765" class="cw">
	<div id="comment_top_44680765" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44680765" name="comment_link_44680765" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44680765" onclick="return D2.setFocusComment(44680765)" >Re:</a>


		 	<span id="comment_score_44680765" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44680765); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~BasilBrush">BasilBrush</a>  <span class="uid"><a href="//slashdot.org/~BasilBrush">(643681)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44680765"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44680765"><p>The fault here is the misuse of HTML, not the language with significant whitespace. After all, any other language would also lose it's indentation in such a situation, which is still not an acceptable representation of the code, regardless of whether it will compile. Code put on web pages are normally snippets used for learning from, not compiling from, and therefore loss of readability is the major problem, and affects all languages.</p><p>Note that Slashdot is also horrendously broken in many other formatting re<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44680765">

</div>
</div>

<div id="replyto_44680765"></div>

<ul id="group_44680765">
	<li id="hiddens_44680765" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_44678265" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44678265" class="commentstatus"></div>
<div id="comment_44678265" class="cw">
</div>

<div id="replyto_44678265"></div>

<ul id="group_44678265">
	<li id="hiddens_44678265" class="hide"></li>
</ul>

<ul id="commtree_44678265"><li id="tree_44678531" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678531" class="commentstatus"></div>
<div id="comment_44678531" class="cw">
	<div id="comment_top_44678531" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678531" name="comment_link_44678531" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678531" onclick="return D2.setFocusComment(44678531)" >Re:</a>


		 	<span id="comment_score_44678531" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678531); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span>Anonymous Coward</span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678531"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678531"><p>See, Guido is wrong again. Shouldn't have used Slashdot.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678531">

</div>
</div>

<div id="replyto_44678531"></div>

<ul id="group_44678531">
	<li id="hiddens_44678531" class="hide"></li>
</ul>

</li><li id="tree_44679821" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679821" class="commentstatus"></div>
<div id="comment_44679821" class="cw">
	<div id="comment_top_44679821" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679821" name="comment_link_44679821" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679821" onclick="return D2.setFocusComment(44679821)" >Re:</a>


		 	<span id="comment_score_44679821" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679821); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~rwa2">rwa2</a>  <span class="uid"><a href="//slashdot.org/~rwa2">(4391)</a></span></a> <a href="/faq/subscriptions.shtml#subscription_other_advantages">*</a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679821"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679821"><p>Slashdot is fine, though not ideal, for posting code stuff, since you have some HTML tags available, such as &lt;pre&gt;<span class="substr"> </span><nobr> <wbr></nobr>:</p><p>def make_adder(n):<br>
  def adder(x):<br>
    return x + n<br>
  return adder</p><p>def make_adder(n):<br>
  return lambda x: x + n</p><p>The full list of HTML that's not filtered out is supposedly somewhere on the <a href="FAQ" title="slashdot.org">http://slashdot.org/faq</a> [slashdot.org] , but I can't <em>find</em> it right now.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44679821">

</div>
</div>

<div id="replyto_44679821"></div>

<ul id="group_44679821">
	<li id="hiddens_44679821" class="hide"></li>
</ul>

<ul id="commtree_44679821"><li id="tree_44681361" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44681361" class="commentstatus"></div>
<div id="comment_44681361" class="cw">
</div>

<div id="replyto_44681361"></div>

<ul id="group_44681361">
	<li id="hiddens_44681361" class="hide"></li>
</ul>

<ul id="commtree_44681361"><li id="tree_44681771" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44681771" class="commentstatus"></div>
<div id="comment_44681771" class="cw">
	<div id="comment_top_44681771" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681771" name="comment_link_44681771" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681771" onclick="return D2.setFocusComment(44681771)" >Re:</a>


		 	<span id="comment_score_44681771" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681771); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~rwa2">rwa2</a>  <span class="uid"><a href="//slashdot.org/~rwa2">(4391)</a></span></a> <a href="/faq/subscriptions.shtml#subscription_other_advantages">*</a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681771"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681771">Huh, strange, I don't get that anymore.  Oh well, I guess I'll bookmark your post<nobr> <wbr></nobr>;)</div>
	</div>

	<div class="commentSub" id="comment_sub_44681771">

</div>
</div>

<div id="replyto_44681771"></div>

<ul id="group_44681771">
	<li id="hiddens_44681771" class="hide"></li>
</ul>

</li></ul></li></ul></li></ul></li></ul></li><li id="tree_44679889" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679889" class="commentstatus"></div>
<div id="comment_44679889" class="cw">
	<div id="comment_top_44679889" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679889" name="comment_link_44679889" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679889" onclick="return D2.setFocusComment(44679889)" >Re:</a>


		 	<span id="comment_score_44679889" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679889); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~AuMatar">AuMatar</a>  <span class="uid"><a href="//slashdot.org/~AuMatar">(183847)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679889"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679889"><p>Funny-  I've lost weeks of my life tracking down python indentation errors, and I've only used it sporadically.  I've used C and C like languages for almost 2 decades and I've lost maybe 2-3 days of my life total on missing }.  It almost never happens, and never happens with a good IDE.  Whereas spacing issues happen whenever you copy paste from a website.</p><p>Guido made 1 major mistake.  It actually wasn't using whitespacing-  it was in not forcing a specific amount of whitespace.  If the language had enforced<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44679889">

</div>
</div>

<div id="replyto_44679889"></div>

<ul id="group_44679889">
	<li id="hiddens_44679889" class="hide"></li>
</ul>

<ul id="commtree_44679889"><li id="tree_44680019" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44680019" class="commentstatus"></div>
<div id="comment_44680019" class="cw">
	<div id="comment_top_44680019" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44680019" name="comment_link_44680019" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44680019" onclick="return D2.setFocusComment(44680019)" >Re:</a>


		 	<span id="comment_score_44680019" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44680019); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~tuffy">tuffy</a>  <span class="uid"><a href="//slashdot.org/~tuffy">(10202)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44680019"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44680019">Or you could've saved weeks of your life by running the <a href="https://pypi.python.org/pypi/pep8" title="python.org">pep8 tool</a> [python.org] on your code, which will tell you all the lines that aren't indented by a multiple of 4, or which lines have tab characters in them, or any number of other formatting problems that aren't recommended by the style guide.</div>
	</div>

	<div class="commentSub" id="comment_sub_44680019">

</div>
</div>

<div id="replyto_44680019"></div>

<ul id="group_44680019">
	<li id="hiddens_44680019" class="hide"></li>
</ul>

<ul id="commtree_44680019"><li id="tree_44682119" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44682119" class="commentstatus"></div>
<div id="comment_44682119" class="cw">
	<div id="comment_top_44682119" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44682119" name="comment_link_44682119" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44682119" onclick="return D2.setFocusComment(44682119)" >Re:</a>


		 	<span id="comment_score_44682119" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44682119); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~AuMatar">AuMatar</a>  <span class="uid"><a href="//slashdot.org/~AuMatar">(183847)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44682119"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44682119"><p>If you have to follow a style guide to get compiling code, your language is broken.  If you have to know of the existence of a one off tool to get compiling code, your language is broken.  The fact that tool even needs to exist is proof of my point.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44682119">

</div>
</div>

<div id="replyto_44682119"></div>

<ul id="group_44682119">
	<li id="hiddens_44682119" class="hide"></li>
</ul>

</li></ul></li><li id="tree_44680859" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44680859" class="commentstatus"></div>
<div id="comment_44680859" class="cw">
	<div id="comment_top_44680859" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44680859" name="comment_link_44680859" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44680859" onclick="return D2.setFocusComment(44680859)" >Re:</a>


		 	<span id="comment_score_44680859" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44680859); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~BasilBrush">BasilBrush</a>  <span class="uid"><a href="//slashdot.org/~BasilBrush">(643681)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44680859"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44680859"><p><div class="quote"><p>Funny- I've lost weeks of my life tracking down python indentation errors, and I've only used it sporadically.</p></div><p>What's your problem? Are you perhaps trying to use a text editor that doesn't understand python for editing python code?</p><p><div class="quote"><p>Whereas spacing issues happen whenever you copy paste from a website.</p></div><p>No it doesn't. Look at stack overflow for example. Any code there will copy'n'paste to a text editor with the indents intact. Any properly written website will be the same. And any website that specializes in coding should work properly in this respect. It's scandalous that slashdot still doesn't.</p><p>Note Slashdot breaks HTML code even worse than it does Python. (In both cases unless you make<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44680859">

</div>
</div>

<div id="replyto_44680859"></div>

<ul id="group_44680859">
	<li id="hiddens_44680859" class="hide"></li>
</ul>

<ul id="commtree_44680859"><li id="tree_44682115" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44682115" class="commentstatus"></div>
<div id="comment_44682115" class="cw">
	<div id="comment_top_44682115" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44682115" name="comment_link_44682115" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44682115" onclick="return D2.setFocusComment(44682115)" >Re:</a>


		 	<span id="comment_score_44682115" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44682115); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~AuMatar">AuMatar</a>  <span class="uid"><a href="//slashdot.org/~AuMatar">(183847)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44682115"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44682115"><p>It doesn't matter how nicely the website renders it-  if it was written with an indent of 3 spaces and you dump it into code with an indent of 4 or tabs, you're going to have problems.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44682115">

</div>
</div>

<div id="replyto_44682115"></div>

<ul id="group_44682115">
	<li id="hiddens_44682115" class="hide"></li>
</ul>

<ul id="commtree_44682115"><li id="tree_44690775" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44690775" class="commentstatus"></div>
<div id="comment_44690775" class="cw">
	<div id="comment_top_44690775" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44690775" name="comment_link_44690775" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44690775" onclick="return D2.setFocusComment(44690775)" >Re:</a>


		 	<span id="comment_score_44690775" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44690775); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~BasilBrush">BasilBrush</a>  <span class="uid"><a href="//slashdot.org/~BasilBrush">(643681)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44690775"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44690775"><p><div class="quote"><p>It doesn't matter how nicely the website renders it- if it was written with an indent of 3 spaces and you dump it into code with an indent of 4 or tabs, you're going to have problems.</p></div><p>Yes. I did a supplementary post to the effect that I agree with this part. And personally I believe the one true indent should have been tabs, such that everyone can have the indent size they want in their text editor, without having to reformat the source. But any single standard for what an indent is would be better than the "anything goes" we have.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44690775">

</div>
</div>

<div id="replyto_44690775"></div>

<ul id="group_44690775">
	<li id="hiddens_44690775" class="hide"></li>
</ul>

</li><li id="tree_44684195" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44684195" class="commentstatus"></div>
<div id="comment_44684195" class="cw">
</div>

<div id="replyto_44684195"></div>

<ul id="group_44684195">
	<li id="hiddens_44684195" class="hide"></li>
</ul>

<ul id="commtree_44684195"><li id="tree_44686509" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44686509" class="commentstatus"></div>
<div id="comment_44686509" class="cw">
	<div id="comment_top_44686509" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44686509" name="comment_link_44686509" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44686509" onclick="return D2.setFocusComment(44686509)" >Re:</a>


		 	<span id="comment_score_44686509" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44686509); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~AuMatar">AuMatar</a>  <span class="uid"><a href="//slashdot.org/~AuMatar">(183847)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44686509"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44686509"><p>And if this was enforced by the compiler as a rule of the language, I might find it silly but I'd be ok with it.  Trying to enforce it by style guides and hoping that the developers know of the existence of a random tool is idiotic.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44686509">

</div>
</div>

<div id="replyto_44686509"></div>

<ul id="group_44686509">
	<li id="hiddens_44686509" class="hide"></li>
</ul>

</li></ul></li></ul></li></ul></li><li id="tree_44680879" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44680879" class="commentstatus"></div>
<div id="comment_44680879" class="cw">
	<div id="comment_top_44680879" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44680879" name="comment_link_44680879" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44680879" onclick="return D2.setFocusComment(44680879)" >Re:</a>


		 	<span id="comment_score_44680879" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44680879); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~BasilBrush">BasilBrush</a>  <span class="uid"><a href="//slashdot.org/~BasilBrush">(643681)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44680879"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44680879"><p><div class="quote"><p>Guido made 1 major mistake. It actually wasn't using whitespacing- it was in not forcing a specific amount of whitespace. If the language had enforced that every indent must be exactly 4 spaces, it wouldn't be an issue. The fact that 4 spaces or 3 spaces or a tab all work is what causes it to break horribly</p></div><p>That part I agree with.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44680879">

</div>
</div>

<div id="replyto_44680879"></div>

<ul id="group_44680879">
	<li id="hiddens_44680879" class="hide"></li>
</ul>

</li></ul></li><li id="tree_44679919" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679919" class="commentstatus"></div>
<div id="comment_44679919" class="cw">
	<div id="comment_top_44679919" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679919" name="comment_link_44679919" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679919" onclick="return D2.setFocusComment(44679919)" >Re:</a>


		 	<span id="comment_score_44679919" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679919); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~31eq">31eq</a>  <span class="uid"><a href="//slashdot.org/~31eq">(29480)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679919"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679919"><p>This is a Python article!  Of course somebody has to complain about whitespace!  When did you ever know a Python article to not start an argument about whitespace?</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44679919">

</div>
</div>

<div id="replyto_44679919"></div>

<ul id="group_44679919">
	<li id="hiddens_44679919" class="hide"></li>
</ul>

<ul id="commtree_44679919"><li id="tree_44680889" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44680889" class="commentstatus"></div>
<div id="comment_44680889" class="cw">
	<div id="comment_top_44680889" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44680889" name="comment_link_44680889" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44680889" onclick="return D2.setFocusComment(44680889)" >Re:</a>


		 	<span id="comment_score_44680889" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44680889); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~BasilBrush">BasilBrush</a>  <span class="uid"><a href="//slashdot.org/~BasilBrush">(643681)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44680889"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44680889"><p>Indeed. It's a bit like the same as people starting iPhone articles with a complaint about the supposed patenting of rounded corners.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44680889">

</div>
</div>

<div id="replyto_44680889"></div>

<ul id="group_44680889">
	<li id="hiddens_44680889" class="hide"></li>
</ul>

</li></ul></li><li id="tree_44680827" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44680827" class="commentstatus"></div>
<div id="comment_44680827" class="cw">
	<div id="comment_top_44680827" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44680827" name="comment_link_44680827" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44680827" onclick="return D2.setFocusComment(44680827)" >Re:</a>


		 	<span id="comment_score_44680827" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44680827); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~phantomfive">phantomfive</a>  <span class="uid"><a href="//slashdot.org/~phantomfive">(622387)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44680827"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44680827"><p><div class="quote"><p>I do a fair bit of programming in Python and curly-bracket languages (C, C++, JavaScript, PHP, etc.) and interestingly, a forgotten/misplaced curly bracket in any of those various curly-bracket languages seem to break my code vastly more often than indentation issues do.</p></div><p>How often does that really happen? Because it's been a long time since I've had a problem with curly brackets. Or with indentation, for that matter. Is either one worth worrying about? Arguing about the topic is silly.<br> <br>
There are multiple solutions to the problem of 'block delineation,' and both of these work fine.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44680827">

</div>
</div>

<div id="replyto_44680827"></div>

<ul id="group_44680827">
	<li id="hiddens_44680827" class="hide"></li>
</ul>

</li><li id="tree_44681583" class="comment full contain"><span class="ind"></span>
<div id="comment_status_44681583" class="commentstatus"></div>
<div id="comment_44681583" class="cw">
	<div id="comment_top_44681583" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681583" name="comment_link_44681583" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681583" onclick="return D2.setFocusComment(44681583)" >Re:whitespace</a>


		 	<span id="comment_score_44681583" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681583); return false"><span class=opt>Score:</span>4</a>, Interesting)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Half-pint+HAL">Half-pint HAL</a>  <span class="uid"><a href="//slashdot.org/~Half-pint+HAL">(718102)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681583">		
		on Monday August 26, 2013 @07:36PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681583">#44681583</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681583"><p><div class="quote"><p>I do a fair bit of programming in Python and curly-bracket languages (C, C++, JavaScript, PHP, etc.) and interestingly, a forgotten/misplaced curly bracket in any of those various curly-bracket languages seem to break my code vastly more often than indentation issues do.</p></div><p>Yes, but there's a rather huge difference: when you forget to close a block in C, your compiler completely flakes out as your {s and }s don't match. Your procedures don't close -- syntax error and fall over. However, if I forget to close a block in Python, this results not in a syntax error, but a logical error that the interpreter is not aware of. The block <i>will</i> be closed, even if only when I define my next class or procedure.</p><p>So you've got to weigh up frequency-of-occurrence against cost-of-incident....</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44681583">
<span class="ind"></span><a class="btn link" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;cid=44677985" onclick="return D2.selectParent(44677985)">Parent</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="janrain t" href="#" data-provider="twitter" data-message="Re:whitespace by Half-pint HAL @slashdot" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44681583" data-title="Re:whitespace">twitter</a>
		<a class="janrain f" href="#" data-provider="facebook" data-message="Re:whitespace by Half-pint HAL" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44681583" data-title="Re:whitespace">facebook</a>
		<a class="janrain l" href="#" data-provider="linkedin" data-message="Re:whitespace by Half-pint HAL" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44681583" data-title="Re:whitespace">linkedin</a>
		<a class="g" href="http://plus.google.com/share?url=http://developers.slashdot.org/comments.pl?sid=4127779%26cid=44681583" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="//www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>
	</div>

</div>
</div>

<div id="replyto_44681583"></div>

<ul id="group_44681583">
	<li id="hiddens_44681583" class="hide"></li>
</ul>

<ul id="commtree_44681583"><li id="tree_44684207" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44684207" class="commentstatus"></div>
<div id="comment_44684207" class="cw">
</div>

<div id="replyto_44684207"></div>

<ul id="group_44684207">
	<li id="hiddens_44684207" class="hide"></li>
</ul>

<ul id="commtree_44684207"><li id="tree_44684849" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44684849" class="commentstatus"></div>
<div id="comment_44684849" class="cw">
	<div id="comment_top_44684849" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44684849" name="comment_link_44684849" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44684849" onclick="return D2.setFocusComment(44684849)" >Re:</a>


		 	<span id="comment_score_44684849" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44684849); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Half-pint+HAL">Half-pint HAL</a>  <span class="uid"><a href="//slashdot.org/~Half-pint+HAL">(718102)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44684849"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44684849">That's precisely the problem. Without any conscious action to end multiple blocks, it's far too easy to get confused...</div>
	</div>

	<div class="commentSub" id="comment_sub_44684849">

</div>
</div>

<div id="replyto_44684849"></div>

<ul id="group_44684849">
	<li id="hiddens_44684849" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_44681939" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44681939" class="commentstatus"></div>
<div id="comment_44681939" class="cw">
	<div id="comment_top_44681939" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681939" name="comment_link_44681939" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681939" onclick="return D2.setFocusComment(44681939)" >Re:</a>


		 	<span id="comment_score_44681939" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681939); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Teckla">Teckla</a>  <span class="uid"><a href="//slashdot.org/~Teckla">(630646)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681939"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681939"><p><div class="quote"><p>I do a fair bit of programming in Python and curly-bracket languages (C, C++, JavaScript, PHP, etc.) and interestingly, a forgotten/misplaced curly bracket in any of those various curly-bracket languages seem to break my code vastly more often than indentation issues do.</p></div><p>Your IDE/editor should have an auto-format feature: use it. If your IDE/editor doesn't have that feature, use better tools. This will result in code formatted correctly for virtually no effort (a key press or two).</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44681939">

</div>
</div>

<div id="replyto_44681939"></div>

<ul id="group_44681939">
	<li id="hiddens_44681939" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_44681039" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44681039" class="commentstatus"></div>
<div id="comment_44681039" class="cw">
	<div id="comment_top_44681039" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681039" name="comment_link_44681039" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681039" onclick="return D2.setFocusComment(44681039)" >Re:</a>


		 	<span id="comment_score_44681039" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681039); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Dadoo">Dadoo</a>  <span class="uid"><a href="//slashdot.org/~Dadoo">(899435)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681039"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681039"><p>Yeah, I don't really have a problem with whitespace as syntax, either.</p><p>What I don't get is that there aren't more people complaining about the syntax for functions like range(), where the lower limit is inclusive, but the upper limit is exclusive. Can anyone explain to me how that makes sense?</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44681039">

</div>
</div>

<div id="replyto_44681039"></div>

<ul id="group_44681039">
	<li id="hiddens_44681039" class="hide"></li>
</ul>

<ul id="commtree_44681039"><li id="tree_44685021" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44685021" class="commentstatus"></div>
<div id="comment_44685021" class="cw">
	<div id="comment_top_44685021" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44685021" name="comment_link_44685021" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44685021" onclick="return D2.setFocusComment(44685021)" >Re:</a>


		 	<span id="comment_score_44685021" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44685021); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~RoccamOccam">RoccamOccam</a>  <span class="uid"><a href="//slashdot.org/~RoccamOccam">(953524)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44685021"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44685021">It winds up making code like this very clean<blockquote><div><p> <tt>&gt;&gt;&gt; x = 'This is a string'<br>&gt;&gt;&gt; p = 4<br>&gt;&gt;&gt; a, b = x[:p], x[p:]<br>&gt;&gt;&gt; a<br>'This'<br>&gt;&gt;&gt; b<br>' is a string'</tt></p></div> </blockquote></div>
	</div>

	<div class="commentSub" id="comment_sub_44685021">

</div>
</div>

<div id="replyto_44685021"></div>

<ul id="group_44685021">
	<li id="hiddens_44685021" class="hide"></li>
</ul>

</li></ul></li><li id="tree_44677977" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44677977" class="commentstatus"></div>
<div id="comment_44677977" class="cw">
</div>

<div id="replyto_44677977"></div>

<ul id="group_44677977">
	<li id="hiddens_44677977" class="hide"></li>
</ul>

<ul id="commtree_44677977"><li id="tree_44678577" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678577" class="commentstatus"></div>
<div id="comment_44678577" class="cw">
	<div id="comment_top_44678577" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678577" name="comment_link_44678577" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678577" onclick="return D2.setFocusComment(44678577)" >Re:</a>


		 	<span id="comment_score_44678577" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678577); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~phantomfive">phantomfive</a>  <span class="uid"><a href="//slashdot.org/~phantomfive">(622387)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678577"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678577">It's like the brace war.......it's silly because you should be able to handle braces at the end of a line, or on a new line. It's not like either one is very hard, so just do it.<br> <br>
Same with space. Personally I don't prefer it, but it's just syntax. There are a hundred other things that are more important about a programming language than block delineation.</div>
	</div>

	<div class="commentSub" id="comment_sub_44678577">

</div>
</div>

<div id="replyto_44678577"></div>

<ul id="group_44678577">
	<li id="hiddens_44678577" class="hide"></li>
</ul>

</li><li id="tree_44678595" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678595" class="commentstatus"></div>
<div id="comment_44678595" class="cw">
	<div id="comment_top_44678595" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678595" name="comment_link_44678595" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678595" onclick="return D2.setFocusComment(44678595)" >Re:</a>


		 	<span id="comment_score_44678595" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678595); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~MetalliQaZ">MetalliQaZ</a>  <span class="uid"><a href="//slashdot.org/~MetalliQaZ">(539913)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678595"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678595"><p>With the broken indentation, would braces really have made it any easier to read?  Barely.</p><p>Whether it was C code, bash, or Lisp, the editors should have used CODE blocks.  That's the problem, not Python.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678595">

</div>
</div>

<div id="replyto_44678595"></div>

<ul id="group_44678595">
	<li id="hiddens_44678595" class="hide"></li>
</ul>

</li><li id="tree_44678745" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678745" class="commentstatus"></div>
<div id="comment_44678745" class="cw">
	<div id="comment_top_44678745" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678745" name="comment_link_44678745" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678745" onclick="return D2.setFocusComment(44678745)" >Re:</a>


		 	<span id="comment_score_44678745" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678745); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~TopherC">TopherC</a>  <span class="uid"><a href="//slashdot.org/~TopherC">(412335)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678745"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678745"><p>I find that copy and paste in Python is very easy to do in any editor that lets you block indent (most do). I've also seen lots of C++ and Java recently that have been cut &amp; pasted with little regard to indentation which makes reading it misleading to say the least. I'm not saying that one syntax (with curly braces or without) is better than another, but curly braces are no panacea. I've uncovered a LOT of bugs in C++ caused by cut &amp; paste with sloppy and wrong attempts to re-balance the braces. I'v<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678745">

</div>
</div>

<div id="replyto_44678745"></div>

<ul id="group_44678745">
	<li id="hiddens_44678745" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_44677979" class="comment full contain"><span class="ind"></span>
<div id="comment_status_44677979" class="commentstatus"></div>
<div id="comment_44677979" class="cw">
	<div id="comment_top_44677979" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677979" name="comment_link_44677979" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677979" onclick="return D2.setFocusComment(44677979)" >To answer GvR's question</a>


		 	<span id="comment_score_44677979" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677979); return false"><span class=opt>Score:</span>4</a>, Informative)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~MetalliQaZ">MetalliQaZ</a>  <span class="uid"><a href="//slashdot.org/~MetalliQaZ">(539913)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677979">		
		on Monday August 26, 2013 @01:14PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677979">#44677979</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677979"><p>I asked the Python 3 question and to answer Guido's question of me; I work at a large conglomerate that does a lot of defense contracting.  In my area we deal with aerospace applications and so our linux systems are not Internet-facing.  They are real-time systems that run simulations and data-acquisition.  As you might expect, they only get upgraded when they really need it.  We had a PDP-11 down in the lab until 2010.</p><p>I'm not sure why I mentioned my workplace other to demonstrate how distant Py3k can seem to be.  My main concern was the apparent lack of 3.x support in the big libraries out there.  PIL is a great example.  Also PyPy.  It seems to me that there are many users that will only upgrade when the 3rd party libraries require it.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44677979">
	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="janrain t" href="#" data-provider="twitter" data-message="To answer GvR's question by MetalliQaZ @slashdot" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677979" data-title="To answer GvR's question">twitter</a>
		<a class="janrain f" href="#" data-provider="facebook" data-message="To answer GvR's question by MetalliQaZ" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677979" data-title="To answer GvR's question">facebook</a>
		<a class="janrain l" href="#" data-provider="linkedin" data-message="To answer GvR's question by MetalliQaZ" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44677979" data-title="To answer GvR's question">linkedin</a>
		<a class="g" href="http://plus.google.com/share?url=http://developers.slashdot.org/comments.pl?sid=4127779%26cid=44677979" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="//www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>
	</div>

</div>
</div>

<div id="replyto_44677979"></div>

<ul id="group_44677979">
	<li id="hiddens_44677979" class="hide"></li>
</ul>

<ul id="commtree_44677979"><li id="tree_44678379" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678379" class="commentstatus"></div>
<div id="comment_44678379" class="cw">
	<div id="comment_top_44678379" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678379" name="comment_link_44678379" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678379" onclick="return D2.setFocusComment(44678379)" >Re: To answer GvR's question</a>


		 	<span id="comment_score_44678379" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678379); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span>Anonymous Coward</span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678379"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678379"><p>You can use Pillow to replace PIL on python 3. Works on python 2 as well.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678379">

</div>
</div>

<div id="replyto_44678379"></div>

<ul id="group_44678379">
	<li id="hiddens_44678379" class="hide"></li>
</ul>

</li><li id="tree_44678609" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678609" class="commentstatus"></div>
<div id="comment_44678609" class="cw">
	<div id="comment_top_44678609" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678609" name="comment_link_44678609" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678609" onclick="return D2.setFocusComment(44678609)" >Re:</a>


		 	<span id="comment_score_44678609" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678609); return false"><span class=opt>Score:</span>3</a>, Informative)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~EvanED">EvanED</a>  <span class="uid"><a href="//slashdot.org/~EvanED">(569694)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678609"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678609"><p>Just to add my input, in the CS department at my university, the Linux that is currently in use is RHEL, the latest version of which (RHEL6) ships with 2.6.6.</p><p>Now that said, we also have several other Python installations available from nonstandard locations, and a [i]python[/i] shell alias for me runs 2.7.3 and [i]python3[/i] runs 3.2. (Huh, 3.3 is available. I should update that.)</p><p>Also, the Python project that I use that it'd be nice to see support Python 3 is SCons, and there's some talk of that going on a<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678609">

</div>
</div>

<div id="replyto_44678609"></div>

<ul id="group_44678609">
	<li id="hiddens_44678609" class="hide"></li>
</ul>

</li><li id="tree_44679111" class="comment full contain"><span class="ind"></span>
<div id="comment_status_44679111" class="commentstatus"></div>
<div id="comment_44679111" class="cw">
	<div id="comment_top_44679111" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679111" name="comment_link_44679111" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679111" onclick="return D2.setFocusComment(44679111)" >Re:To answer GvR's question</a>


		 	<span id="comment_score_44679111" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679111); return false"><span class=opt>Score:</span>5</a>, Informative)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~codealot">codealot</a>  <span class="uid"><a href="//slashdot.org/~codealot">(140672)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679111">		
		on Monday August 26, 2013 @03:04PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679111">#44679111</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679111"><p>I was a little surprised by GvR's answer to this.  RHEL 6 ships with Python 2.6, last I checked, and we don't normally deviate from Red Hat packages without good reason.  Getting the masses off pre-2.7 versions of Python will also entail releasing newer OS distributions and retiring older ones, both of which happen slowly.</p><p>Not everyone can keep up with the latest/greatest versions out there, especially when they have hundreds of servers and big legacy applications to support.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44679111">
<span class="ind"></span><a class="btn link" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;cid=44677979" onclick="return D2.selectParent(44677979)">Parent</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="janrain t" href="#" data-provider="twitter" data-message="Re:To answer GvR's question by codealot @slashdot" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44679111" data-title="Re:To answer GvR's question">twitter</a>
		<a class="janrain f" href="#" data-provider="facebook" data-message="Re:To answer GvR's question by codealot" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44679111" data-title="Re:To answer GvR's question">facebook</a>
		<a class="janrain l" href="#" data-provider="linkedin" data-message="Re:To answer GvR's question by codealot" data-url="http://developers.slashdot.org/comments.pl?sid=4127779&cid=44679111" data-title="Re:To answer GvR's question">linkedin</a>
		<a class="g" href="http://plus.google.com/share?url=http://developers.slashdot.org/comments.pl?sid=4127779%26cid=44679111" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="//www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>
	</div>

</div>
</div>

<div id="replyto_44679111"></div>

<ul id="group_44679111">
	<li id="hiddens_44679111" class="hide"></li>
</ul>

<ul id="commtree_44679111"><li id="tree_44690743" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44690743" class="commentstatus"></div>
<div id="comment_44690743" class="cw">
	<div id="comment_top_44690743" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44690743" name="comment_link_44690743" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44690743" onclick="return D2.setFocusComment(44690743)" >Re:</a>


		 	<span id="comment_score_44690743" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44690743); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~sad_">sad_</a>  <span class="uid"><a href="//slashdot.org/~sad_">(7868)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44690743"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44690743"><p>you can get python 2.7 from redhat for RHEL6 now.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44690743">

</div>
</div>

<div id="replyto_44690743"></div>

<ul id="group_44690743">
	<li id="hiddens_44690743" class="hide"></li>
</ul>

</li></ul></li><li id="tree_44678145" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44678145" class="commentstatus"></div>
<div id="comment_44678145" class="cw">
</div>

<div id="replyto_44678145"></div>

<ul id="group_44678145">
	<li id="hiddens_44678145" class="hide"></li>
</ul>

<ul id="commtree_44678145"><li id="tree_44678549" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678549" class="commentstatus"></div>
<div id="comment_44678549" class="cw">
	<div id="comment_top_44678549" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678549" name="comment_link_44678549" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678549" onclick="return D2.setFocusComment(44678549)" >Re:</a>


		 	<span id="comment_score_44678549" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678549); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~MetalliQaZ">MetalliQaZ</a>  <span class="uid"><a href="//slashdot.org/~MetalliQaZ">(539913)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678549"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678549"><p>Is python really that slow?  I never do anything with Python that has made me notice a slowdown.</p><p>One of the nice things about Python is the really well supported interface for C.  If you have a problem that requires a computationally intensive solution, then you can put the worker code in C and wrap it in Python for the I/O and UI and glue logic.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678549">

</div>
</div>

<div id="replyto_44678549"></div>

<ul id="group_44678549">
	<li id="hiddens_44678549" class="hide"></li>
</ul>

<ul id="commtree_44678549"><li id="tree_44678631" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678631" class="commentstatus"></div>
<div id="comment_44678631" class="cw">
	<div id="comment_top_44678631" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678631" name="comment_link_44678631" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678631" onclick="return D2.setFocusComment(44678631)" >Re:</a>


		 	<span id="comment_score_44678631" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678631); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~EvanED">EvanED</a>  <span class="uid"><a href="//slashdot.org/~EvanED">(569694)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678631"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678631"><p>CPython is... really quite slow. You [i]do[/i] have to do something computationally intensive to notice, of course.</p><p>That point and your parent's question are actually related to the PyPy question in the interview actually. PyPy is a JIT for Python that is able to get significant speedups for computationally-bound code. They run 20 benchmarks comparing PyPy and CPython, they are faster on all 20, and see speedups ranging from about a 27% improvement to a ~30x improvement, on average running 6.2 times faster.<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678631">

</div>
</div>

<div id="replyto_44678631"></div>

<ul id="group_44678631">
	<li id="hiddens_44678631" class="hide"></li>
</ul>

<ul id="commtree_44678631"><li id="tree_44678853" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678853" class="commentstatus"></div>
<div id="comment_44678853" class="cw">
	<div id="comment_top_44678853" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678853" name="comment_link_44678853" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678853" onclick="return D2.setFocusComment(44678853)" >Re:</a>


		 	<span id="comment_score_44678853" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678853); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~TopherC">TopherC</a>  <span class="uid"><a href="//slashdot.org/~TopherC">(412335)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678853"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678853"><p>It all depends on your frame of reference. CPython is a blurry rocket of speed when compared with Jython. And in theory you can write all the compute-expensive routines in C++.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678853">

</div>
</div>

<div id="replyto_44678853"></div>

<ul id="group_44678853">
	<li id="hiddens_44678853" class="hide"></li>
</ul>

<ul id="commtree_44678853"><li id="tree_44679055" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679055" class="commentstatus"></div>
<div id="comment_44679055" class="cw">
	<div id="comment_top_44679055" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679055" name="comment_link_44679055" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679055" onclick="return D2.setFocusComment(44679055)" >Re:</a>


		 	<span id="comment_score_44679055" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679055); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~EvanED">EvanED</a>  <span class="uid"><a href="//slashdot.org/~EvanED">(569694)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679055"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679055"><blockquote><div><p>CPython is a blurry rocket of speed when compared with Jython.</p></div></blockquote><p>Is Jython an order of magnitude slower than CPython? Because that's my rule of thumb for CPython vs C. (Actually the <span class="substr"> </span><a href="http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&amp;lang=python3&amp;lang2=gcc&amp;data=u64q" title="debian.org" rel="nofollow">programming language shootout</a> [debian.org]'s numbers are more like 30-40x slower than C, though that needn't be representative.)</p><blockquote><div><p>And in theory you can write all the compute-expensive routines in C++.</p></div></blockquote><p>Sure, but then that's not Python being fast, it's C++ being fast. "You could write the expensive parts in C or C++" can be said of nearly any langua</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44679055">

</div>
</div>

<div id="replyto_44679055"></div>

<ul id="group_44679055">
	<li id="hiddens_44679055" class="hide"></li>
</ul>

<ul id="commtree_44679055"><li id="tree_44683833" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44683833" class="commentstatus"></div>
<div id="comment_44683833" class="cw">
	<div id="comment_top_44683833" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44683833" name="comment_link_44683833" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44683833" onclick="return D2.setFocusComment(44683833)" >Re:</a>


		 	<span id="comment_score_44683833" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44683833); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~mrvan">mrvan</a>  <span class="uid"><a href="//slashdot.org/~mrvan">(973822)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44683833"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44683833"><p><div class="quote"><p><div class="quote"><p>And in theory you can write all the compute-expensive routines in C++.</p></div><p>Sure, but then that's not Python being fast, it's C++ being fast. "You could write the expensive parts in C or C++" can be said of nearly any language.<nobr> <wbr></nobr>:-)</p></div><p>Not quite. In java and most other languages I know, you would have to make quite some changes to the rest of the code to get it to communicate with something written in C.</p><p>In CPython, you can replace a module and the rest of the code won't notice, e.g. in</p><blockquote><div><p> <tt>import mymodule<br>
<span class="substr"> </span> <br>x = mymodule.compute_answer()</tt> </p></div></blockquote><p>mymodule can be a python module or a c module and you really don't need to know or care. You can build the prototype in python and later replace it with a C module, and unittest and benchmark both. You ca</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44683833">

</div>
</div>

<div id="replyto_44683833"></div>

<ul id="group_44683833">
	<li id="hiddens_44683833" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_44679759" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679759" class="commentstatus"></div>
<div id="comment_44679759" class="cw">
	<div id="comment_top_44679759" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679759" name="comment_link_44679759" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679759" onclick="return D2.setFocusComment(44679759)" >Re:</a>


		 	<span id="comment_score_44679759" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679759); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~rwa2">rwa2</a>  <span class="uid"><a href="//slashdot.org/~rwa2">(4391)</a></span></a> <a href="/faq/subscriptions.shtml#subscription_other_advantages">*</a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679759"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679759"><p>Shoot, I did my master's thesis in python.   Using the psyco JIT engine (sorry, 32-bit only for old python), my stuff ran ~10 - 100x faster by just including one import statement.</p><p>I'll play with running it under PyPy and see how it does nowadays.  But yeah, I find stuff like PyPy essential for a lot of the stuff I like doing.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44679759">

</div>
</div>

<div id="replyto_44679759"></div>

<ul id="group_44679759">
	<li id="hiddens_44679759" class="hide"></li>
</ul>

</li></ul></li></ul></li></ul></li></ul></li><li id="tree_44680769" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44680769" class="commentstatus"></div>
<div id="comment_44680769" class="cw">
	<div id="comment_top_44680769" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44680769" name="comment_link_44680769" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44680769" onclick="return D2.setFocusComment(44680769)" >Smileys and parenthesis</a>


		 	<span id="comment_score_44680769" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44680769); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ericcc65">ericcc65</a>  <span class="uid"><a href="//slashdot.org/~ericcc65">(2663835)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44680769"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44680769"><p>Interesting interview. Surely there were more important topics but if nothing else this interview was useful in that it taught me it's okay to use the parenthesis at the end of a smiley to serve double duty as the end of a parenthetical statement (kind of like this one<nobr> <wbr></nobr>:-). At least when your smiley is left in plain text, that is.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44680769">

</div>
</div>

<div id="replyto_44680769"></div>

<ul id="group_44680769">
	<li id="hiddens_44680769" class="hide"></li>
</ul>

</li><li id="tree_44677315" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44677315" class="commentstatus"></div>
<div id="comment_44677315" class="cw">
</div>

<div id="replyto_44677315"></div>

<ul id="group_44677315">
	<li id="hiddens_44677315" class="hide"></li>
</ul>

<ul id="commtree_44677315"><li id="tree_44677333" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44677333" class="commentstatus"></div>
<div id="comment_44677333" class="cw">
</div>

<div id="replyto_44677333"></div>

<ul id="group_44677333">
	<li id="hiddens_44677333" class="hide"></li>
</ul>

<ul id="commtree_44677333"><li id="tree_44677365" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44677365" class="commentstatus"></div>
<div id="comment_44677365" class="cw">
	<div id="comment_top_44677365" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677365" name="comment_link_44677365" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677365" onclick="return D2.setFocusComment(44677365)" >Re:</a>


		 	<span id="comment_score_44677365" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677365); return false"><span class=opt>Score:</span>2</a>, Troll)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~h4rr4r">h4rr4r</a>  <span class="uid"><a href="//slashdot.org/~h4rr4r">(612664)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677365"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677365"><p>Or maybe someone should consider such silliness when they make a new language.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44677365">

</div>
</div>

<div id="replyto_44677365"></div>

<ul id="group_44677365">
	<li id="hiddens_44677365" class="hide"></li>
</ul>

<ul id="commtree_44677365"><li id="tree_44678865" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678865" class="commentstatus"></div>
<div id="comment_44678865" class="cw">
	<div id="comment_top_44678865" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678865" name="comment_link_44678865" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678865" onclick="return D2.setFocusComment(44678865)" >Re:</a>


		 	<span id="comment_score_44678865" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678865); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~the_B0fh">the_B0fh</a>  <span class="uid"><a href="//slashdot.org/~the_B0fh">(208483)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678865"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678865"><p>Someone should consider what a posting to slashdot would look like when they make a new language...?</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678865">

</div>
</div>

<div id="replyto_44678865"></div>

<ul id="group_44678865">
	<li id="hiddens_44678865" class="hide"></li>
</ul>

<ul id="commtree_44678865"><li id="tree_44679935" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679935" class="commentstatus"></div>
<div id="comment_44679935" class="cw">
	<div id="comment_top_44679935" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679935" name="comment_link_44679935" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679935" onclick="return D2.setFocusComment(44679935)" >Re:</a>


		 	<span id="comment_score_44679935" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679935); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~h4rr4r">h4rr4r</a>  <span class="uid"><a href="//slashdot.org/~h4rr4r">(612664)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679935"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679935"><p>Yeah, I was going for funny but I guess no one got that.</p><p>I dislike whitespace having meaning, but was just trying to make a joke. As you noticed the idea was ridiculous, thus the joke.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44679935">

</div>
</div>

<div id="replyto_44679935"></div>

<ul id="group_44679935">
	<li id="hiddens_44679935" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_44677425" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44677425" class="commentstatus"></div>
<div id="comment_44677425" class="cw">
	<div id="comment_top_44677425" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677425" name="comment_link_44677425" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677425" onclick="return D2.setFocusComment(44677425)" >Re:</a>


		 	<span id="comment_score_44677425" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677425); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Billly+Gates">Billly Gates</a>  <span class="uid"><a href="//slashdot.org/~Billly+Gates">(198444)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677425"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677425"><p><div class="quote"><p>Well, leaving aside the fact that neither of them will compile because of lack of whitespace. Editors, you might want to think about when use of the &lt;pre&gt; tag is appropriate.</p></div><p>I still wish the parrot project took off and combined with Perl. Just imagine the poor joy using Lambda's combined with Perl and white spaces? Sounds like a pure paradise.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44677425">

</div>
</div>

<div id="replyto_44677425"></div>

<ul id="group_44677425">
	<li id="hiddens_44677425" class="hide"></li>
</ul>

</li><li id="tree_44677779" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44677779" class="commentstatus"></div>
<div id="comment_44677779" class="cw">
	<div id="comment_top_44677779" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44677779" name="comment_link_44677779" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44677779" onclick="return D2.setFocusComment(44677779)" >Re:</a>


		 	<span id="comment_score_44677779" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44677779); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~doti">doti</a>  <span class="uid"><a href="//slashdot.org/~doti">(966971)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44677779"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44677779"><p>What is not appropriate is for a language to rely on whitespace.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44677779">

</div>
</div>

<div id="replyto_44677779"></div>

<ul id="group_44677779">
	<li id="hiddens_44677779" class="hide"></li>
</ul>

<ul id="commtree_44677779"><li id="tree_44677867" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44677867" class="commentstatus"></div>
<div id="comment_44677867" class="cw">
</div>

<div id="replyto_44677867"></div>

<ul id="group_44677867">
	<li id="hiddens_44677867" class="hide"></li>
</ul>

<ul id="commtree_44677867"><li id="tree_44679481" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679481" class="commentstatus"></div>
<div id="comment_44679481" class="cw">
	<div id="comment_top_44679481" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679481" name="comment_link_44679481" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679481" onclick="return D2.setFocusComment(44679481)" >Whitespace in Python</a>


		 	<span id="comment_score_44679481" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679481); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~fyngyrz">fyngyrz</a>  <span class="uid"><a href="//slashdot.org/~fyngyrz">(762201)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679481"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679481"><p>Luckily, both of your opinions on whitespace were not, and are not, either significant or involved in Python's design.</p><p>And that's why you two don't have to be dead to me.<nobr> <wbr></nobr>:)</p><p>Plus, you can keep working with whatever it is that you DO like. Imagine that!</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44679481">

</div>
</div>

<div id="replyto_44679481"></div>

<ul id="group_44679481">
	<li id="hiddens_44679481" class="hide"></li>
</ul>

</li></ul></li></ul></li></ul></li><li id="tree_44677631" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44677631" class="commentstatus"></div>
<div id="comment_44677631" class="cw">
</div>

<div id="replyto_44677631"></div>

<ul id="group_44677631">
	<li id="hiddens_44677631" class="hide"></li>
</ul>

<ul id="commtree_44677631"><li id="tree_44680935" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44680935" class="commentstatus"></div>
<div id="comment_44680935" class="cw">
	<div id="comment_top_44680935" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44680935" name="comment_link_44680935" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44680935" onclick="return D2.setFocusComment(44680935)" >Re:</a>


		 	<span id="comment_score_44680935" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44680935); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Half-pint+HAL">Half-pint HAL</a>  <span class="uid"><a href="//slashdot.org/~Half-pint+HAL">(718102)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44680935"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44680935"><p><div class="quote"><p>What makes the one line lambda worse is the fact that in Python, not everything is an expression.



That one change would clean up so much bullshit in the language.</p></div><p>Or perhaps it makes the one-line lambda better...? As per Guido's own example, lambda's are essentially redundant, as you can achieve the same results with a locally-defined function. The one real difference is that certain things aren't permitted in a lambda, because they're not expressions... which makes a lambda an approximation of a true function, rather than a procedure (Python's "functions" are in reality "procedures")....</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44680935">

</div>
</div>

<div id="replyto_44680935"></div>

<ul id="group_44680935">
	<li id="hiddens_44680935" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_44678381" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44678381" class="commentstatus"></div>
<div id="comment_44678381" class="cw">
</div>

<div id="replyto_44678381"></div>

<ul id="group_44678381">
	<li id="hiddens_44678381" class="hide"></li>
</ul>

<ul id="commtree_44678381"><li id="tree_44678587" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678587" class="commentstatus"></div>
<div id="comment_44678587" class="cw">
	<div id="comment_top_44678587" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678587" name="comment_link_44678587" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678587" onclick="return D2.setFocusComment(44678587)" >Re:</a>


		 	<span id="comment_score_44678587" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678587); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~phantomfive">phantomfive</a>  <span class="uid"><a href="//slashdot.org/~phantomfive">(622387)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678587"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678587"><p><div class="quote"><p>But sure, just carry on 'dissing functional programming and alienate some more of your core users.</p></div><p>After that post, I seriously doubt you are a core user.....</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678587">

</div>
</div>

<div id="replyto_44678587"></div>

<ul id="group_44678587">
	<li id="hiddens_44678587" class="hide"></li>
</ul>

<ul id="commtree_44678587"><li id="tree_44678807" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44678807" class="commentstatus"></div>
<div id="comment_44678807" class="cw">
</div>

<div id="replyto_44678807"></div>

<ul id="group_44678807">
	<li id="hiddens_44678807" class="hide"></li>
</ul>

<ul id="commtree_44678807"><li id="tree_44681989" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44681989" class="commentstatus"></div>
<div id="comment_44681989" class="cw">
	<div id="comment_top_44681989" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681989" name="comment_link_44681989" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681989" onclick="return D2.setFocusComment(44681989)" >Re:</a>


		 	<span id="comment_score_44681989" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681989); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~phantomfive">phantomfive</a>  <span class="uid"><a href="//slashdot.org/~phantomfive">(622387)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681989"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681989">Fascinating. What libraries in particular do you like from Python? Serious question.</div>
	</div>

	<div class="commentSub" id="comment_sub_44681989">

</div>
</div>

<div id="replyto_44681989"></div>

<ul id="group_44681989">
	<li id="hiddens_44681989" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_44678681" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44678681" class="commentstatus"></div>
<div id="comment_44678681" class="cw">
	<div id="comment_top_44678681" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44678681" name="comment_link_44678681" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44678681" onclick="return D2.setFocusComment(44678681)" >Re:</a>


		 	<span id="comment_score_44678681" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44678681); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~MetalliQaZ">MetalliQaZ</a>  <span class="uid"><a href="//slashdot.org/~MetalliQaZ">(539913)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44678681"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44678681"><p>Did you read what he said?  He wasn't dissing functional programming.  His point was that FP features require powerful compilers.  Python doesn't have that kind of compiler.  Therefore the features don't have much use to Python.</p><p>By the way, I don't believe they made the print function to be intuitive.  They made it because print had no reason to be a statement.  Also who said that tuples are more important than arrays?  Arrays are really a concept for lower-level languages.  Tuples, lists, and dictionaries a<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44678681">

</div>
</div>

<div id="replyto_44678681"></div>

<ul id="group_44678681">
	<li id="hiddens_44678681" class="hide"></li>
</ul>

<ul id="commtree_44678681"><li id="tree_44679845" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44679845" class="commentstatus"></div>
<div id="comment_44679845" class="cw">
</div>

<div id="replyto_44679845"></div>

<ul id="group_44679845">
	<li id="hiddens_44679845" class="hide"></li>
</ul>

<ul id="commtree_44679845"><li id="tree_44681681" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44681681" class="commentstatus"></div>
<div id="comment_44681681" class="cw">
	<div id="comment_top_44681681" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681681" name="comment_link_44681681" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681681" onclick="return D2.setFocusComment(44681681)" >Re:</a>


		 	<span id="comment_score_44681681" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681681); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Half-pint+HAL">Half-pint HAL</a>  <span class="uid"><a href="//slashdot.org/~Half-pint+HAL">(718102)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681681"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681681">Arrays have no place in a high-level language. An array has no intrinsic meaning, and any externally imposed meaning is non-obvious. You're supposed to define an object that makes its meaning and function obvious. I've been developing some code that started in Javascript and was migrated to Python, and every step of the process involved unpicking my own hacked-together array/list datastructures, working out what the hell I'd been thinking of, then impose some order on the whole thing.</div>
	</div>

	<div class="commentSub" id="comment_sub_44681681">

</div>
</div>

<div id="replyto_44681681"></div>

<ul id="group_44681681">
	<li id="hiddens_44681681" class="hide"></li>
</ul>

<ul id="commtree_44681681"><li id="tree_44681869" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44681869" class="commentstatus"></div>
<div id="comment_44681869" class="cw">
</div>

<div id="replyto_44681869"></div>

<ul id="group_44681869">
	<li id="hiddens_44681869" class="hide"></li>
</ul>

<ul id="commtree_44681869"><li id="tree_44681963" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44681963" class="commentstatus"></div>
<div id="comment_44681963" class="cw">
	<div id="comment_top_44681963" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44681963" name="comment_link_44681963" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44681963" onclick="return D2.setFocusComment(44681963)" >Re:</a>


		 	<span id="comment_score_44681963" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44681963); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Half-pint+HAL">Half-pint HAL</a>  <span class="uid"><a href="//slashdot.org/~Half-pint+HAL">(718102)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44681963"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44681963"><p>Let's start with the (obvious) statement that you don't use a high-level language for its efficiency -- as a C developer you's be appalled at how slow my Python program runs! You use arrays of various dimensionalities to represent cartesian cordinates, vectors, and transformation matrices, because it is a computationally cheaper than using custom datatypes.</p><p>The whole point of high-level languages is to abstract things out to make it easier for the designer to express their thoughts more easily, and to reduce<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_44681963">

</div>
</div>

<div id="replyto_44681963"></div>

<ul id="group_44681963">
	<li id="hiddens_44681963" class="hide"></li>
</ul>

<ul id="commtree_44681963"><li id="tree_44684477" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44684477" class="commentstatus"></div>
<div id="comment_44684477" class="cw">
</div>

<div id="replyto_44684477"></div>

<ul id="group_44684477">
	<li id="hiddens_44684477" class="hide"></li>
</ul>

<ul id="commtree_44684477"><li id="tree_44684917" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44684917" class="commentstatus"></div>
<div id="comment_44684917" class="cw">
	<div id="comment_top_44684917" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44684917" name="comment_link_44684917" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44684917" onclick="return D2.setFocusComment(44684917)" >Re:</a>


		 	<span id="comment_score_44684917" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44684917); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Half-pint+HAL">Half-pint HAL</a>  <span class="uid"><a href="//slashdot.org/~Half-pint+HAL">(718102)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44684917"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44684917"><p>Correct and correct. Never do the compute-intensive stuff in native Python + compute-intensive stuff (eg image manipulation) needs arrays = Python doesn't need arrays.</p><p>Python's lists are a perfectly adequate replacement for a small 1-dimensional array when needed on an ad hoc basis.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44684917">

</div>
</div>

<div id="replyto_44684917"></div>

<ul id="group_44684917">
	<li id="hiddens_44684917" class="hide"></li>
</ul>

</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li id="tree_44677783" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44677783" class="commentstatus"></div>
<div id="comment_44677783" class="cw">
</div>

<div id="replyto_44677783"></div>

<ul id="group_44677783">
	<li id="hiddens_44677783" class="hide"></li>
</ul>

<ul id="commtree_44677783"><li id="tree_44679503" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44679503" class="commentstatus"></div>
<div id="comment_44679503" class="cw">
	<div id="comment_top_44679503" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44679503" name="comment_link_44679503" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44679503" onclick="return D2.setFocusComment(44679503)" >Re:</a>


		 	<span id="comment_score_44679503" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44679503); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~fyngyrz">fyngyrz</a>  <span class="uid"><a href="//slashdot.org/~fyngyrz">(762201)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44679503"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44679503"><p>How about being unable to create a 2D array without jumping through hoops (backwards, on fire, and without your pants)?</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44679503">

</div>
</div>

<div id="replyto_44679503"></div>

<ul id="group_44679503">
	<li id="hiddens_44679503" class="hide"></li>
</ul>

<ul id="commtree_44679503"><li id="tree_44680143" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44680143" class="commentstatus"></div>
<div id="comment_44680143" class="cw">
	<div id="comment_top_44680143" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44680143" name="comment_link_44680143" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44680143" onclick="return D2.setFocusComment(44680143)" >Re:</a>


		 	<span id="comment_score_44680143" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44680143); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~MetalliQaZ">MetalliQaZ</a>  <span class="uid"><a href="//slashdot.org/~MetalliQaZ">(539913)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44680143"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44680143"><p>Create a 2D array, like you would do in C?  That's not pythonic.  If you want C, then use C.</p><p>In Python you don't have to define memory before you can fill it with stuff.  You plan your data structures and the interpreter manages memory.  If you need default data then just go straight to writing the initializer function.  Otherwise use higher level functions like append() or extend() while creating your data.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44680143">

</div>
</div>

<div id="replyto_44680143"></div>

<ul id="group_44680143">
	<li id="hiddens_44680143" class="hide"></li>
</ul>

<ul id="commtree_44680143"><li id="tree_44689495" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44689495" class="commentstatus"></div>
<div id="comment_44689495" class="cw">
	<div id="comment_top_44689495" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44689495" name="comment_link_44689495" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44689495" onclick="return D2.setFocusComment(44689495)" >Re:</a>


		 	<span id="comment_score_44689495" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44689495); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~fyngyrz">fyngyrz</a>  <span class="uid"><a href="//slashdot.org/~fyngyrz">(762201)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44689495"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44689495"><p>it's trivial in python. It's an incredible hoop jump in perl.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44689495">

</div>
</div>

<div id="replyto_44689495"></div>

<ul id="group_44689495">
	<li id="hiddens_44689495" class="hide"></li>
</ul>

</li></ul></li><li id="tree_44681187" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44681187" class="commentstatus"></div>
<div id="comment_44681187" class="cw">
</div>

<div id="replyto_44681187"></div>

<ul id="group_44681187">
	<li id="hiddens_44681187" class="hide"></li>
</ul>

<ul id="commtree_44681187"><li id="tree_44689539" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44689539" class="commentstatus"></div>
<div id="comment_44689539" class="cw">
	<div id="comment_top_44689539" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44689539" name="comment_link_44689539" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44689539" onclick="return D2.setFocusComment(44689539)" >Re:</a>


		 	<span id="comment_score_44689539" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44689539); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~fyngyrz">fyngyrz</a>  <span class="uid"><a href="//slashdot.org/~fyngyrz">(762201)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44689539"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44689539"><p>perl. Go ahead, show me a reasonable 2d (or more) array in perl, lol. I don't think you can do it.</p><p>in python, there's nothing to it, trivial to do and trivial to access. Not in perl, or at least, it hasn't been.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44689539">

</div>
</div>

<div id="replyto_44689539"></div>

<ul id="group_44689539">
	<li id="hiddens_44689539" class="hide"></li>
</ul>

</li></ul></li><li id="tree_44684219" class="comment hidden"><span class="ind"></span>
<div id="comment_status_44684219" class="commentstatus"></div>
<div id="comment_44684219" class="cw">
</div>

<div id="replyto_44684219"></div>

<ul id="group_44684219">
	<li id="hiddens_44684219" class="hide"></li>
</ul>

<ul id="commtree_44684219"><li id="tree_44689541" class="comment oneline"><span class="ind"></span>
<div id="comment_status_44689541" class="commentstatus"></div>
<div id="comment_44689541" class="cw">
	<div id="comment_top_44689541" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_44689541" name="comment_link_44689541" href="//developers.slashdot.org/comments.pl?sid=4127779&amp;cid=44689541" onclick="return D2.setFocusComment(44689541)" >Re:</a>


		 	<span id="comment_score_44689541" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 44689541); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~fyngyrz">fyngyrz</a>  <span class="uid"><a href="//slashdot.org/~fyngyrz">(762201)</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_44689541"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_44689541"><p>yes, wasn't talking about python. Was talking about perl.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_44689541">

</div>
</div>

<div id="replyto_44689541"></div>

<ul id="group_44689541">
	<li id="hiddens_44689541" class="hide"></li>
</ul>

</li></ul></li></ul></li></ul></li>
			<li id="roothiddens" class="hide"></li>
		</ul>
	
	
	
	

<noscript><p><b>There may be more comments in this discussion. Without JavaScript enabled, you might want to <a href="//developers.slashdot.org/users.pl?op=editcomm">turn on Classic Discussion System</a> in your preferences instead.</b></p></noscript>
<div id="discussion_buttons" class="clearfix">






</div>


<div class="newcmnt"><div id="replyto_0"></div></div>


	<script type="text/javascript">
<!--
		D2.currents()['hidden']   = 0;
		D2.currents()['full']     = 12;
		D2.currents()['oneline']  = 88;
		// D2.currents_total(100);

		D2.abbrev_comments({44684895:573,44679821:123,44679055:225,44678465:520,44680255:650,44751303:529,44681165:1475,44691733:522,44681513:535,44678215:521,44678835:538,44678631:521,44683727:529,44679193:520,44678745:515,44688153:522,44678571:512,44678681:522,44680859:777,44680541:514,44681473:631,44680765:522,44683833:626,44690715:757,44681963:522,44679015:528,44678609:529,44678199:536,44679889:521});
		D2.noshow_comments([44678235,44677951,44723839,44678265,44681361,44684195,44684207,44677977,44678145,44677315,44677333,44677867,44677631,44678381,44678807,44679845,44681869,44684477,44677783,44681187,44684219]);
		D2.pieces_comments([44678199,44678571,44688153,44688189,44691733,44678215,44678835,44678937,44679193,44678465,44681023,44677727,44677907,44680541,44681165,44681513,44683727,44690715,44679155,44681473,44677515,44677807,44677965,44678105,44679579,44679015,44681547,44684895,44751303,44678337,44680255,44681509,44681569,44679681,44681899,44678093,44679397,44679923,44680765,44678531,44679821,44681771,44679889,44680019,44682119,44680859,44682115,44690775,44686509,44680879,44679919,44680889,44680827,44684849,44681939,44681039,44685021,44678577,44678595,44678745,44678379,44678609,44690743,44678549,44678631,44678853,44679055,44683833,44679759,44680769,44677365,44678865,44679935,44677425,44677779,44679481,44680935,44678587,44681989,44678681,44681681,44681963,44684917,44679503,44680143,44689495,44689539,44689541]);
		D2.init_hiddens([]);

		D2.finishLoading();



//-->
	</script>


</div>

</section>
									   </div>
									</section>
                                    <section class="grid_24" style="margin-top:20px;">
                                        <div class="railad">
<div id='div-gpt-ad-728x90_b'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-728x90_b');});</script></div>
</div>
                                    </section>
<div id="InRead" style="margin: 10px auto 0px; width:  465px; padding-bottom: 30px; clear:both;"></div>
<script type="text/javascript">
var zflag_parent="InRead";
var zflag_vast_domain="http://xp1.zedo.com/";
var zflag_nid="2340";
var zflag_cid="219";
var zflag_sz="85";
var zflag_sid="76";
var zflag_width="425";
var zflag_height="330";
var zflag_bchan="218";
var zflag_dimension="1";
var zflag_breplay="1";
var zflag_preroll="1";
var zflag_autoclose="1";
</script>
<script type="text/javascript" src="//c5.zedo.com/jsc/c5/frd.js"></script>

								     </section>
								  </div>

	

<script type="text/javascript">
$(function(){
$('#firehose-filter').
	focus(function(event){
		gFocusedText = this;
	}).
	blur(function(event){
		if ( gFocusedText === this ) {
			gFocusedText = null;
		}
	});


apply_updates_when(		'at-end', true);
});
</script>


<!-- body end --></section>





<footer id="fhft" class="grid_24 nf aoc">
	<div id="logo_nf" class="fleft">
		<a href="//slashdot.org"><span>Slashdot</span></a>
	</div>
	<nav role="firehose footer">
			
				
				
				
				

				
					<button class="btn" disabled="disabled">Archived Discussion</button>
				
				<a class="btn hide" id="footer_moderate_button">Moderate</a>
				<a class="btn hide" id="footer_moderatorhelp_button">Moderator Help</a>
				<a class="btn hide" id="footer_delete_button" title="Checked comments will be deleted.">Delete</a>
				<script>
					(function($){
						var old_moderate_btn = $("#discussion_moderate_button");
						if (old_moderate_btn.length) {
							var moderate_btn = $("#footer_moderate_button");
							moderate_btn.click(
								function(){old_moderate_btn.click()}
							);
							moderate_btn.removeClass('hide');
						}

						var old_moderatorhelp_btn = $("#discussion_moderatorhelp_button");
						if (old_moderatorhelp_btn.length) {
							var moderatorhelp_btn = $("#footer_moderatorhelp_button");
							moderatorhelp_btn.click(
								function(){old_moderatorhelp_btn.click()}
							);
							moderatorhelp_btn.attr(
								'href', old_moderatorhelp_btn.attr('href')
							);
							moderatorhelp_btn.removeClass('hide');
						}

						var old_delete_btn = $("#discussion_delete_button");
						if (old_delete_btn.length) {
							var delete_btn = $("#footer_delete_button");
							delete_btn.click(
								function(){old_delete_btn.click()}
							);
							delete_btn.removeClass('hide');
						}

						$('#discussion_buttons').addClass('hide');
					})(Slash.jQuery); // (function($){
				</script>
				<ul class="fleft">
					
					<li class="fleft selected">
   						<span class="nbutton btn hide link reset" id="more_comments_button"><a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_a" class="hide">Get more comments</span></a></span>
					</li>

					
					
					<li class="fleft"><span class="loadedcommentcnt">100</span> of <span class="totalcommentcnt">169</span> loaded</li>
					
				</ul>
				
					<script type="text/javascript">D2.finishLoading()</script>
				

<!-- below markup is for D1
				<ul class="fleft">
					<li class="fleft"><a href="">Moderator help</a></li>
					<li class="fleft"><a href="">Delete</a></li>
					<li class="fleft"><a href="">?</a></li>

					<li class="fleft"><a href="">__1_of_10_loaded__</a></li>

				</ul>
-->

			

	    
        <ul class="fright submitstory">
            <li class="fright"><a href="/submit">Submit<span class="opt"> Story</span></a></li>
        </ul>
	</nav>
</footer>
	<section class="bq"><blockquote class="msg grid_24" cite="http://slashdot.org"><p>We can found no scientific discipline, nor a healthy profession on the
technical mistakes of the Department of Defense and IBM.
		-- Edsger Dijkstra</p><span class="slant"></span></blockquote></section>
<footer id="ft" class="grid_24">
		<nav class="grid_10" role="footer">
		    <ul>
			<li><a href="//slashdot.org/faq">FAQ</a></li>
			<li><a href="//slashdot.org/archive.pl">Story Archive</a></li>
			<li><a href="//slashdot.org/hof.shtml">Hall of Fame</a></li>
			<li><a href="http://slashdotmedia.com/advertising-and-marketing-services/">Advertising</a></li>
			<li><a href="http://slashdot.org/job_board.pl">Jobs</a></li>
			<li><a href="http://slashdotmedia.com/terms-of-use/">Terms</a></li>
			<li><a href="http://slashdotmedia.com/privacy-statement/">Privacy</a></li>
			<li id="teconsent"></li>
			<li><a href="http://slashdotmedia.com/opt-out-choices/">Opt Out Choices</li>
			<li><a href="//slashdot.org/faq/slashmeta.shtml">About</a></li>
			<li><a href="mailto:feedback@slashdot.org">Feedback</a></li>
			<li><a href="http://slashdot.jp">Slashdot Japan</a></li>
			<li><a href="#" onclick="set_mobile_pref('mobile',1);return false;">Mobile View</a></li>
			<li><a href="//slashdot.org/?usebeta=1">Slashdot Beta</a></li>
		    </ul>
		</nav>

<br>
                
	        <div class="grid_14 tright tm">Trademarks property of their respective owners. Comments owned by the poster. <span class="nobr">Copyright &copy; 2014 Dice. All Rights Reserved.</span> <span class="nobr">Slashdot is a <a href="http://www.diceholdingsinc.com/phoenix.zhtml?c=211152&p=irol-landing" title="The Mother Ship">Dice Holdings, Inc.</a> service.</span></div>
</footer>

 
<div class="overlay"></div>
<div class="modal-box">
    <a href="#" id="close-modal">Close</a>
    <article class="modal-content">
    </article>
    <footer>
</div>




<div id="modal_cover" class="hide" onclick="hide_modal_box(); return false;"></div>
<div id="modal_box" class="hide">
      <div id="modal_box_content"></div>
      <header class="n">
                  <span class="fadeout"></span>
                  <span class="fadeoutfade"></span>
		  <span class="pf"><a class="ico close" onclick="hide_modal_box(); return false;" href="#"><span>Close</span></a></span>
		  <h3 class="pf"><div id="logo"><a href="//slashdot.org">Slashdot</a></div><span id="preference_title"></span></h3>
      </header>
</div>

<script type="text/javascript">
COMSCORE.beacon({
  c1:2,
  c2:6035546,
  c3:"",
  c4:"",
  c5:"",
  c6:"",
  c15:""
});
</script>
<noscript><img src="http://b.scorecardresearch.com/p?c1=2&amp;c2=6035546&amp;c3=&amp;c4=&amp;c5=&amp;c6=&amp;c15=&amp;cj=1" alt="comScore2"></noscript>


<!-- Google Remarketing tag -->
<script type="text/javascript">
/* <![CDATA[ */
var google_conversion_id = 1002083962;
var google_conversion_label = "G_uGCOaBlAQQ-qzq3QM";
var google_custom_params = window.google_tag_params;
var google_remarketing_only = true;
/* ]]> */
</script>
<script type="text/javascript" src="//www.googleadservices.com/pagead/conversion.js">
</script>
<noscript>
<div style="display:inline;">
<img height="1" width="1" style="border-style:none;" alt="" src="//googleads.g.doubleclick.net/pagead/viewthroughconversion/1002083962/?value=0&amp;label=G_uGCOaBlAQQ-qzq3QM&amp;guid=ON&amp;script=0"/>
</div>
</noscript>
<script id="after-content" type="text/javascript">
(function( $, fn, console ){
	$ && fn && $(function(){ fn($, console); });
})(window.jQuery, window.pageload_done, window.console);
</script>

<div class="busy genericspinner hide"><span>Working...</span></div>
<script>
  if(typeof(Storage)!=="undefined"){
		window.scrollTo(0,sessionStorage.scrollPos);
			$(window).scroll(function () { 
			//You've scrolled this much:
			sessionStorage.scrollPos = $(window).scrollTop();
		});
	}
	$(function(){
		$('a').click(function(){
			delete sessionStorage.scrollPos;
		})
	});
	// window.onbeforeunload = function () {
	// 	console.log('bakc button clicked');
	// 	delete sessionStorage.scrollPos;
	// }
	window.onpopstate=function() {
		delete sessionStorage.scrollPos;
	}
</script>

</body>
</html>