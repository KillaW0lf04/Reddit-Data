<!DOCTYPE html>

<html>
<head>
    <title>Pre-beta Windows 8.1 WinRT Developer APIs</title>
        <link href="/Content/Site.css" rel="stylesheet" type="text/css" />
    <!--[if IE 7]>
        <link rel="stylesheet" type="text/css" href="/Content/Site_ie7.css">
    <![endif]-->
    <link href="/Content/Sidebar/Sidebar.css" rel="stylesheet" type="text/css" />
    <script src="/Content/HeadJS/head.min.js" type="text/javascript"></script>
    <link href="/Content/Article/Article.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript">
            head.js(
        "http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.6.4.min.js",
        "http://ajax.aspnetcdn.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js",
        "/Content/Sidebar/Sidebar.dynamic.js",
        "/Content/Article/jquery.validate.js",
        "/Content/Article/Article.js",
        function () {
            $.sideBar();
            $.article();

            setTimeout("setupComments()", 2000);
        });

        function setupComments()
        {
            $("#commentInputTemplate").tmpl({
                ID: -1,
                BlogPost: 32
            }).appendTo("#comments");
            
            var comments = [{"ID":462,"BlogPost":32,"name":"Farhan Ghumra","text":"Mindblowing research ! Looking forward to new WinRT APIs","gravatar":"http://www.gravatar.com/avatar/7b653b8dbcd92c01449c0b492a3abd71","comments":[]},{"ID":463,"BlogPost":32,"name":"Ferando Urkijo Cereceda","text":"Very nice article!  I cannot wait to start coding for W8.1!","gravatar":"http://www.gravatar.com/avatar/ec6290dbc7e96281f0aafa8c8ff9ceb7","comments":[]},{"ID":464,"BlogPost":32,"name":"Rigouh","text":"Wow, fantastic article! Thank you so much for all this information!","gravatar":"http://www.gravatar.com/avatar/93861e66f9d2062eac245a42b9acb09e","comments":[]},{"ID":465,"BlogPost":32,"name":"Bek","text":"All these new great stuff and not a single evidence of the much needed \"Notification Center\". #Shame","gravatar":"http://www.gravatar.com/avatar/72af49c1d80e9f8d53a2cdd3886ef8b1","comments":[]},{"ID":466,"BlogPost":32,"name":"Flemming Rosenbrandt","text":"Any news on current XAML limitations like:\u003cbr /\u003e\u003cbr /\u003e1. It is not possible to render a UIElement to a bitmap.\u003cbr /\u003e2. Clipping only accepts rectangle geometries.\u003cbr /\u003e3. No RadialGradient.\u003cbr /\u003e4. There are no pixel shader or bitmap effects.","gravatar":"http://www.gravatar.com/avatar/e034186a98c5a0ba84e2c64df34386d9","comments":[]},{"ID":467,"BlogPost":32,"name":"Xen","text":"Amazing research: it\u0027s great to see Microsoft so committed on improving WinRT\u0027s flexibility.\u003cbr /\u003e\u003cbr /\u003eI don\u0027t know if you could unearth anything about this, but I\u0027m going to ask anyway: have there been any changes to application life-cycle management? In particular, is there more support for background tasks? Currently apps are suspended (with a few exceptions for some specific use cases) as soon as they are no longer on screen, with results like Metro Internet Explorer stopping downloads unless one keeps it on screen.\u003cbr /\u003e\u003cbr /\u003eAre there any indications this is no longer the case? As a prospective user and developer, this is a deal breaker, since so many classes of applications are made useless by such a system.","gravatar":"http://www.gravatar.com/avatar/37c032c1add97c2dc41dd0e999493e35","comments":[]},{"ID":469,"BlogPost":32,"name":"Scott","text":"Great article.\u003cbr /\u003e\u003cbr /\u003eBut, please..\u003cbr /\u003e\u003cbr /\u003e\"// Brazil Dollar, (...)\u003cbr /\u003eCurrencyFormatter(CurrencyIdentifiers.BZD).Format(12345.6));\"\u003cbr /\u003e\u003cbr /\u003eThere isn\u0027t a \"Brazil Dollar\". \"BZD\" stands for \"Belize Dollar\".","gravatar":"http://www.gravatar.com/avatar/e58fb71067daac331aa2d4f4c500040c","comments":[]},{"ID":470,"BlogPost":32,"name":"Ramanathan","text":"very fantastic boss for both next generations windows RT o/s and windows mobility!","gravatar":"http://www.gravatar.com/avatar/216c07841f8014bb60f52b99298febeb","comments":[]},{"ID":471,"BlogPost":32,"name":"Dean Maier","text":"This is absolutely fantastic! Well done MS!","gravatar":"http://www.gravatar.com/avatar/7ee195c869d32b40a1685e0be3f1d230","comments":[]},{"ID":472,"BlogPost":32,"name":"Mark Heath","text":"thanks for this breakdown. Pleased to see MediaStreamSource is in there.","gravatar":"http://www.gravatar.com/avatar/db4b131b1b1519a5a22f84b1e8737f9b","comments":[]},{"ID":474,"BlogPost":32,"name":"MR.404","text":"Wow, Nice Article!","gravatar":"http://www.gravatar.com/avatar/f212feeac84984ae65fa0f06610294ac","comments":[]},{"ID":475,"BlogPost":32,"name":"AitchOfMan","text":"very nice Work - gj!","gravatar":"http://www.gravatar.com/avatar/1162ab2cb8f71a7c9b3f01ff81ffb034","comments":[]},{"ID":476,"BlogPost":32,"name":"Dean","text":"will the smart card and scanner/barcode (point of service api) run on windows surface RT?","gravatar":"http://www.gravatar.com/avatar/cd846e98a205588e51b9ea3cd19d3025","comments":[{"ID":477,"BlogPost":32,"name":"Justin Angel","text":"Yes. ","gravatar":"http://www.gravatar.com/avatar/39f955b1b0e1074c622c0d31b928a4b3","comments":[]}]},{"ID":480,"BlogPost":32,"name":"Diptimaya Patra","text":"Very nice article. Must say, you did a great job here. :)","gravatar":"http://www.gravatar.com/avatar/dc011816cb793e7f43105cb0ebd07480","comments":[]},{"ID":505,"BlogPost":32,"name":"Smithd591","text":"This website was how do you say it? Relevant!! kkkdccdkcdbackgk","gravatar":"http://www.gravatar.com/avatar/7125777ee78a1ff1e3e34313703131d3","comments":[]},{"ID":521,"BlogPost":32,"name":"Smithf924","text":"I really enjoy the blog article.Really looking forward to read more. Fantastic. bfbekgebbeecckak","gravatar":"http://www.gravatar.com/avatar/8468ccd5db6ebdd09a49a82ba9311b69","comments":[]},{"ID":546,"BlogPost":32,"name":"Smithb309","text":"reverse phone lookup cell free I wish to voice my gratitude for your generosity giving support to individuals ggdgcedbcaddcdke","gravatar":"http://www.gravatar.com/avatar/41e02db8ac3a2ab794858a3b36e74d60","comments":[]}];

            $("#commentTemplate").tmpl(comments).appendTo("#comments");

            $.article.refreshAnchor();

            $.article.validatationSetup();        	
        }
    </script>
</head>
<body style="background: url(/Content/Article/ArticleBackground.png) no-repeat center center fixed; background-color: #005490;">
    <article>
        <header>
            <h1 class="websiteTitle">Pre-beta Windows 8.1 WinRT Developer APIs</h1>
            <img class="headshot" src="/Content/headshot.png" alt="Justin Angel picture" />
            <h2 class="nameTitle"><span id="firstName">Justin</span><br /><span id="surName">Angel</span></h2>
        </header>

        <section id="articleContent">
        <p>Hi folks,</p> <p>In this article we’ll review new developer WinRT features that’ll be released in the upcoming Windows 8 release (dubbed “Windows 8.1” / “Windows Blue”). Microsoft <a href="http://blogs.windows.com/windows/b/bloggingwindows/archive/2013/05/07/julie-larson-green-at-the-wired-business-conference.aspx" target="_blank">recently announced</a> that during June 2013’s BUILD conference a developer preview of Windows 8.1 will be released for download. In the meanwhile <a href="http://www.theverge.com/tag/windows-8.1" target="_blank">many Windows 8.1 “leaked” images</a> are available online. These “leaked” images allows us to get a sneak preview of the featuresets that’ll be announced in BUILD conference. For the length of this article we’ll go over those features. </p> <p><img title="Windows 8.1 fake logo" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows 8.1 fake logo" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_10-34-40_a6289cb4-d540-4a60-9232-0f640ab250ab.png" width="590" height="134"></p> <p>&nbsp;</p> <h2>Methodology: How was this research done? </h2> <p>Windows 8.1 images contain <em>WinMD</em> files describing their embedded Windows 8.1 developers APIs. It’s possible to get to Win8.1’s <u><em>WinMD</em></u> files and then compare them to the existing Windows 8 RTM <em>WinMD</em> files. This entire article is based upon using Reflection to see those API differences. </p> <ol> <li>Download the latest Windows 8.1 “leaked” image. This article was based on an image named “<em>9385.0.FBL_PARTNER_OUT17.130415-2049_X86FRE_CLIENT_EN-US-PL-PL-RU-RU.ISO</em>”.  <li>Create a bootable <a href="http://www.ghacks.net/2011/09/14/how-to-install-windows-8-from-usb-key/" target="_blank">USB drive from the ISO file</a> and Install it on a nearby machine.  <li>Win8.1’s <em>WinMD</em> files can be found under the following directory: <strong>C:\Windows\System32\WinMetadata</strong>  <li>Using Microsoft’s <a href="http://archive.msdn.microsoft.com/fds" target="_blank">Framework Design Studio</a> it’s then possible to compare the <em>WinMD </em>files from a WIndows 8.1 “leaked” image and Windows 8 RTM.&nbsp; </li></ol> <p><img title="Framework Design Studio comparing Win8.1 and Win8 APIs" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Framework Design Studio comparing Win8.1 and Win8 APIs" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_10-14-32_652b937e-e1de-43b1-9970-10e5409d33ac.png" width="597" height="670"></p> <p>For your easy reference you can download the aforementioned WinMD folder from here: <a href="http://justinangel.net/storage/windows81/Windows8RTMWinMD.zip" target="_blank">Windows 8 RTM WinMDs</a>, <a href="http://justinangel.net/storage/windows81/Windows81WinMD.zip" target="_blank">Windows 8.1 9385 WinMDs</a>. </p> <p>The resulting comparison between Windows 8 and Windows 8.1 API can be downloaded from @ <a href="http://justinangel.net/storage/windows81/WinMDDelta.zip">http://justinangel.net/storage/windows81/WinMDDelta.zip</a>&nbsp;</p> <p><a name="toc">&nbsp;</a></p> <h2>Table of Contents</h2> <ol> <li><a href="#Bluetooth4" target="_self">Bluetooth 4.0 RfComm and GATT support</a>  <li><a href="#pointofsale" target="_self">Point of sale: Barcode scanners and Magnetic card readers</a>  <li><a href="#smartcards" target="_self">Smart Cards</a>  <li><a href="#lockscreenimage" target="_self">Lock screen Image Apps</a>  <li><a href="#vpn" target="_self">VPN support for Metro apps</a>  <li><a href="#scanners" target="_self">Scanner APIs and apps</a>  <li><a href="#alldevices" target="_self">Support for any External / USB device</a>  <li><a href="#pdf" target="_self">Native PDF rendering in apps</a>  <li><a href="#projection" target="_self">Multiple screens projection support in apps</a>  <li><a href="#resolution" target="_self">XAML/WinJS: New resolution scaling support / Super-high resolution tablets</a>  <li><a href="#lowlag" target="_self">Camera: Low-lag cameras / HDR</a>  <li><a href="#newapps" target="_self">New Metro App Types: Appointments, LockScreen, Contacts and GeoLoc</a>  <li><a href="#geofenced" target="_self">New App Type: GeoFenced activation</a>  <li><a href="#lockscreencall" target="_self">New App Type: Lock screen call</a>  <li><a href="#appointments" target="_self">New App Type: Appointments Provider</a>  <li><a href="#tts" target="_self">Text-to-speech</a>  <li><a href="#knownfolders" target="_self">Read-write access to Camera roll, Saved pictures and playlists</a>  <li><a href="#searchbox" target="_self">XAML/WinJS: new SearchBox control</a>  <li><a href="#hub" target="_self">XAML/WinJS: Hubs for SemanticZoom</a>  <li><a href="#datetimepicker" target="_self">XAML: DatePicker and TimePicker</a>  <li><a href="#flyouts" target="_self">XAML: Flyout, MenuFlyout and SettingsMenuFlyout</a>  <li><a href="#appbar" target="_self">XAML: AppBar simplification</a>  <li><a href="#databinding" target="_self">XAML: DataBinding Improvements</a>  <li><a href="#globalization" target="_self">Globalization: Currencies, Numeral systems and Numerical formatters</a>  <li><a href="#minor" target="_self">Other minor but important Win8.1 features</a>  <li><a href="#csharp" target="_self">How to code Win8.1 C# apps before public beta? </a> <li><a href="#winjs" target="_self">How to develop Win8.1 WinJS apps before public beta?</a>  <li><a href="#disc" target="_self">Disclaimer: Please don’t sue me</a> </li></ol> <p>&nbsp;</p> <p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="Bluetooth4">&nbsp;</a></p> <h2>Bluetooth 4.0 RfComm and GATT support</h2> <p>Windows 8 had no support for developers to interact with external bluetooth-enabled devices. <em>PeerFinder </em>was there but it wasn’t bluetooth capable. It’s a pleasant surprise to see Windows 8.1 support both <a href="http://en.wikipedia.org/wiki/Bluetooth_protocols#Radio_frequency_communication_.28RFCOMM.29" target="_blank">RfComm</a> bluetooth protocol and <a href="http://developer.bluetooth.org/TechnologyOverview/Pages/GATT.aspx" target="_blank">GATT</a> bluetooth profile which are the core of Bluetooth 4.0 support. </p> <p>RfComm is an underlying protocol used for communicating between two bluetooth enabled devices. RfComm is comparable to TCP in that TCP communicates between two WLAN enabled devices and RfComm is communicates between two bluetooth capable devices. RfComm can be used with the majority of bluetooth devices even if those don’t expose their own developer APIs and services. As we can see from these new Windows 8.1 types RfComm is fully supported: </p> <p><img title="Windows.Devices.Bluetooth.Rfcomm namespace class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.Devices.Bluetooth.Rfcomm namespace class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_10-52-15_5cf34351-d5ce-4e7f-9665-9febb3920bb6.png" width="716" height="348"></p> <p>In addition to RfComm Win8.1 will also have comprehensive GATT support. GATT is a core component of supporting the latest generation Bluetooth Low Energy devices. Using GATT Win8.1 can support a <a href="http://developer.bluetooth.org/gatt/Pages/GATT-Specification-Documents.aspx" target="_blank">multitude</a> of long-running low-power devices such as: Heart rate monitors, thermometers, glucose readers, pedometers, running speed monitors, proximity sensors and general notification devices. As we can see from the following classes there’s ample support for GATT in Windows 8.1:</p> <p><img title="Windows.Devices.Bluetooth.GenericAttributeProfile namespace class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.Devices.Bluetooth.GenericAttributeProfile namespace class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_11-02-26_6cffa096-62d7-4644-b728-af9d9de2d74b.png" width="721" height="546"></p> <p>With Bluetooth 4.0 support in Windows 8.1 we’ll see a many external bluetooth-enabled devices connect to WinRT. The aforementioned GattCharacteristicUuids class mentions a lot of those supported devices. </p> <p>&nbsp;</p> <p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="pointofsale">&nbsp;</a></p> <h2>Point of sale: Barcode scanners and Magnetic card readers</h2> <p>It was <a href="http://withinwindows.com/within-windows/2013/4/23/blues-clues-enabling-kiosk-mode" target="_blank">previously revealed</a> that Windows 8.1 will support Kiosk mode. Windows 8.1 has new APIs for Magnetic card readers and barcode scanners. So it’s pretty clear to say Microsoft is aiming for a new class of WinRT cash register apps (“Point of Sale”). </p> <p><img title="Print screen showing Kiosk mode settings in Win8.1" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Print screen showing Kiosk mode settings in Win8.1" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_11-07-20_e41127ca-f750-4685-b16d-41e3215fb59e.png" width="832" height="303"></p> <p>&nbsp;</p> <p>In the following class diagram we can see the new Win8.1 barcode scanner support. It all comes down to the <em>ClaimedBarcodeScanner.DataRecieved</em> event which will provide a byte[] array with the barcode data. </p> <p><img title="Windows.Devices.PointOfService namespace barcode class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.Devices.PointOfService namespace barcode class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_11-13-02_9d43c722-f78d-4c34-b736-c6d8ed87c971.png" width="800" height="497"></p> <p>There’s also a BarcodeSymbologies class partially shown above that claims the API supports the following barcode systems: <font size="1">AusPostal, Aztec, Bookland, CanPostal, Cca, Ccb, Ccc, Chinese2of5, Codabar, Code11, Code128, Code128Parsed, Code32, Code39, Code93, CompositeAB, CompositeC, Coupon, CueCode, DataMatrix, Doccap, DutchPostal, Ean128, Ean13S, Ean8S, EanJan13, EanJan8, ExtendedBase, GS1DataBar, GS1DataBarExpanded, GS1DataBarExpandedStacked, GS1DataBarStackedOmnidirectional, Iata2of5, Image, Isbt128, Itf, JapPostal, Korean3of5, Macromicropdf, Macropdf, Matrix2of5, Maxicode, Micropdf, MicroPdf417, MicroQRCode, Msi, Ocra, Ocrb, Pdf417, QRCode, Rss14, Rssexp, Rsslim, Signature, TF, Tlc39, Trioptic39, UkPostal, Unknown, Upca, Upcas, Upcd1, Upcd2, Upcd3, Upcd4, Upcd5, Upce, Upce0, Upce1, Upces, Us4state, US4statefics, UsPlanet, UsPostNet and Webcode.</font>&nbsp; </p> <p>There’s also a new API for magnetic card readers which we can see below. There’s lots of goodies in this API. Starting from generic Magnetic card reader support with direct access to reading Track1-4 data. There’s also Encryption support for Triple DES blocks. And there’s even built-in support to bank cards and AAMVA vehicle driver data. Overall it seems like a great magnetic card reader API that’ll support everything from store cards, bank cards, AAMVA cards and any custom 3rd party magnetic cards. </p> <p><img title="Windows.Devices.PointOfService magnetic card reader namespace class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.Devices.PointOfService magnetic card reader namespace class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_11-34-02_3b1d8a14-1fe9-4370-ac91-806116cf22ec.png" width="801" height="566"></p> <p>&nbsp;</p> <p>&nbsp;</p> <p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="smartcards">&nbsp;</a></p> <h2>Smart Cards </h2> <p>One of the interesting new security minded features in the Win8.1 APIs is the support for Smart Cards and pin challenges. For those who are unaware “Smart cards” is a generic name for cards with integrated circuits that help uniquely identify cards. Some well known smart cards include credit cards, debit cards, employee cards, public transit payment cards <a href="http://en.wikipedia.org/wiki/Smart_card" target="_blank">and more</a>. </p> <p><img title="integrated circuit on a bank card" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="integrated circuit on a bank card" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_11-58-01_e3fd4f39-8b49-4d12-bbac-ab2bb0e390f2.png" width="395" height="235"></p> <p>&nbsp;</p> <p>The new Smart Card API in Windows 8.1 allows us to iterate over plugged-in smart cards, challenge the user for pin card authorization, reset challenge pins and even to create or destroy cards. As anyone with a bank card knows challenging users for pin codes is quite useful in real-world scenarios. </p> <p><img title="Windows.Security.SmartCards namespace class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.Security.SmartCards namespace class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_11-51-56_1f230d59-fc03-4265-a07d-6fb55d82ce17.png" width="681" height="394"></p> <p>It’s really interesting to see that the Win81 APIs allow for both day-to-day usage of smart cards and managing smart cards. </p> <p><img title="credit card payment terminal issuing a pin challenge for a user." style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="credit card payment terminal issuing a pin challenge for a user. " src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_12-07-26_b3bb2c3b-8b6a-48b1-abfd-8853210c6325.png" width="180" height="289"></p> <p>&nbsp;</p> <p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="lockscreenimage">&nbsp;</a></p> <h2>Lock screen Image Apps</h2> <p>It’s been <a href="http://pureinfotech.com/2013/05/02/windows-8-1-build-9385-leak/" target="_blank">previously reveled</a> that Windows 8.1 apps can now set the lockscreen background image.</p> <p><img title="2013-05-12_12-14-10" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="2013-05-12_12-14-10" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_12-14-10_21986d10-6baf-4c7b-86d2-624d2c6ce1b9.png" width="632" height="500"></p> <p>&nbsp;</p> <p>Windows 8.1 apps can set the lock screen image to a remote feed. While the format of the remote feed is currently unknown (RSS? Media RSS?) it’s likely to be fairly simple to implement. The beautiful part about setting the lock screen to a remote feed is that changing the picture doesn’t require running the app or any custom code on the client side. </p><pre class="code"><span style="background: white; color: blue">namespace </span><span style="background: white; color: black">Windows.System.UserProfile 
{
    </span><span style="background: white; color: blue">public static class </span><span style="background: white; color: #2b91af">LockScreen 
    </span><span style="background: white; color: black">{
        </span><span style="background: white; color: blue">public static </span><span style="background: white; color: black">IAsyncOperation RequestSetImageFeedAsync(</span><span style="background: white; color: blue">void </span><span style="background: white; color: black">syndicationFeedUri);
        </span><span style="background: white; color: blue">public static </span><span style="background: white; color: black">Boolean TryRemoveImageFeed();
    }

    </span><span style="background: white; color: blue">public enum </span><span style="background: white; color: #2b91af">SetImageFeedResult 
    </span><span style="background: white; color: black">{
        Success,
        ChangeDisabled,
        UserCanceled
    }
} </span></pre>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="vpn">&nbsp;</a></p>
<h2>VPN support for Metro apps</h2>
<p>A <a href="http://social.technet.microsoft.com/Forums/en-US/w8itpronetworking/thread/96a7f1ab-1a24-48af-a6ec-6988c116be91/" target="_blank">very common complaint</a> for Windows 8 Metro apps is that they sometimes stop working under most VPN connections. VPNs <a href="http://blog.tuvpn.com/2010/11/vpn-security-mechanisms-%E2%80%93-explanations-in-simple-words/" target="_blank">are critical</a> for many people including Iranian employees and remote dissidents (or is it “Iranian dissidents and remote employees”?). </p>
<p><img title="picture illustrating what VPN is for dummies" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="picture illustrating what VPN is for dummies" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_17-16-51_35d8a155-cddc-4726-afdf-be8d168d2c0f.png" width="471" height="302"></p>
<p>It’s great to see Microsoft adding a whole new <em>Windows.Networking.vpn</em> namespace to help deal with VPNs in WinRT apps.&nbsp; The new VPN API featureset is fundamentally about sending encrypted packets. It also supports VPN routing (what goes in the VPN connection and what doesn’t), multiple VPN authentication methods (username, password, pin, smart card, credentials and more) and support for VPN namespaces. I </p>
<p><img title="Windows.Networking.vpn namespace class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.Networking.vpn namespace class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_17-15-24_0e212800-3bf0-4fc8-9274-759884dd3b4f.png" width="766" height="464">&nbsp;</p>
<p>Despite the plethora of new VPN APIs, an open question remains as to whether WinRT Win8.1 apps will work by default on VPNs. </p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="scanners">&nbsp;</a></p>
<h2>Scanner APIs and apps</h2>
<p>Windows 8 introduced a new type of <a href="http://msdn.microsoft.com/en-us/library/windows/hardware/hh833795.aspx" target="_blank">Metro apps that are associated with printers</a>. Those apps can be used to define a custom printing configuration within the Windows 8 “devices” charm. However, scanners were conspicuously unsupported and didn’t have that level of support. Scanners weren’t usable in Metro apps and the scanner manufacturers couldn’t hook into the Win8 “devices” charm. Well, that’s going to change in Win8.1.&nbsp; </p>
<p><img title="Scanner and windows 8 logo" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Scanner and windows 8 logo" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-19_20-23-01_da416114-2392-41c1-b235-cbb7a3be5e36.png" width="283" height="251"></p>
<p>Using the new <em>Windows.Devices.Scanners </em>namespace apps can automate scanning and customizing documents from flatbed &amp; feeder scanners. Developers can see current scanner configuration, set a few properties (auto cropping, color mode, contrast, resolution, etc) and get image files after scanning. </p>
<p><img title="Windows.Devices.Scanners namespace class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.Devices.Scanners namespace class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_17-23-04_0a5c57ff-941e-455a-a823-b236a50b0a20.png" width="795" height="575"></p>
<p>An open question is whether or not Scanner OEM apps written by device manufacturers will be supported in Windows 8.1. Looking at the impressive API above, I’d be surprised if they won’t be supported. </p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="alldevices">&nbsp;</a></p>
<h2>Support for any IO and USB device</h2>
<p>One of the big limitations of Win8 WinRT apps is their lack of ability to interact with connected and built-in devices unless previously exposed by WinRT. It seems that’s about to change in Windows 8.1 with the introduction of the new <em>Windows.Devices.Usb </em>and <em>Windows.Devices.Custom</em> namespaces.&nbsp; Both of these namespace provide IOutputStream and IInputStream to any USB or IO device. It’s fair to assume it’ll be heavily gated by permissions, but it’s still a great feature that opens up new avenues for Win8.1 apps. </p>
<p><img title="Data comes in, data goes out. You can't explain that. " style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Data comes in, data goes out. You can't explain that. " src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-19_20-30-15_79df5be4-0dc9-408a-8999-3adf1608e117.png" width="450" height="366"></p>
<p>Below we can see the new <em>Windows.Devices.Custom</em> namespace with the Input &amp; Output streams highlighted. The code to use this API would be fairly straightforward. First we’d get a DeviceID or Device selector string from existing Win8 APIs, next we’d get a <em>CustomDevice</em> instance and finally we’ll send over <em>IOControlCodes </em>the device will recognize. </p>
<p><img title=" Windows.Devices.Custom namespace class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt=" Windows.Devices.Custom namespace class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/image_577e28ba-7068-4206-b154-5cf2ab538080.png" width="630" height="419"></p>
<p>Another new API that is more USB specific was introduced is the <em>Windows.Devices.Usb </em>namespace. Below you can see the types of USB devices supported, and where the Output and Input streams can be found.&nbsp; </p>
<p><img title="Windows.Devices.Usb namespace class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.Devices.Usb namespace class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/image_1c3801c8-6d69-43c0-b8de-57052400faeb.png" width="612" height="536"></p>
<p>The new USB namespace is quite verbose so I’ve highlighted only what I felt is the most self explanatory API. </p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="pdf">&nbsp;</a></p>
<h2>Native PDF rendering in apps </h2>
<p>Windows 8 developers hoping to author an alternative PDF viewer Metro app were in for quite a shock. They had to develop their own C++ PDF rendering engine. Obviously, that’s a considerable task and despite being a&nbsp; very common one. That’s why it’s great to see Windows 8.1 introduces built-in support for all apps to render PDF documents. Below we can see the majority of top rated PDF viewer in the Win8 store are all in-fact Desktop apps and not WInRT apps: </p>
<p><img title="majority of top rated PDF viewer in the Win8 store are all in-fact Desktop apps " style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="majority of top rated PDF viewer in the Win8 store are all in-fact Desktop apps " src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/image_d1742696-d0c7-47c7-9174-a953788d9b09.png" width="642" height="471"></p>
<p>The new Win8.1 PDF API starts by loading a PDF file using <em>PdfDocument.LoadFromFileAsync()</em>, getting the total number of pages and then invoking <em>PdfDocument.GetPage(i).RenderToStreamAsync()</em>. Once we have the image stream it should be quite simple to add it into any app UI.</p>
<p><img title="Windows.Data.Pdf namespace class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.Data.Pdf namespace class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_17-57-01_ff125a20-75b8-4628-a726-c196efdde0f0.png" width="755" height="476"></p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="projection">&nbsp;</a></p>
<h2>Multiple screens projection support in apps </h2>
<p>Imagine watching a video on your Win8 atom-based tablet and plugging it into your TV. The tablet could duplicate the content on the TV, but it can’t choose to show one view for the TV and another view for the tablet screen. That for example is the experience for the Netflix iPad app. In windows 8 Metro apps were spectacularly single screened and only had one single active view. It seems that in Windows 8.1 developers can opt-in to create additional alternate views for projection displays. </p>
<p><img title="2013-05-12_18-08-18" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="2013-05-12_18-08-18" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_18-08-18_f8ba9aee-9b19-4b4f-8d1f-6be9e74e1114.png" width="199" height="346"></p>
<p>Windows 8.1 Introduces a <em>ProjectionManager</em> class that allows developers to listen to projection display changes and provide multiple displays with their own unique views. </p><pre class="code"><span style="background: white; color: blue">namespace </span><span style="background: white; color: black">Windows.UI.ViewManagement
{
    </span><span style="background: white; color: blue">public static class </span><span style="background: white; color: #2b91af">ProjectionManager
    </span><span style="background: white; color: black">{
        </span><span style="background: white; color: blue">public static </span><span style="background: white; color: #2b91af">IAsyncAction </span><span style="background: white; color: black">StartProjectingAsync(</span><span style="background: white; color: blue">int </span><span style="background: white; color: black">projectionViewId, </span><span style="background: white; color: blue">int </span><span style="background: white; color: black">anchorViewId);
        </span><span style="background: white; color: blue">public static </span><span style="background: white; color: #2b91af">IAsyncAction </span><span style="background: white; color: black">SwapDisplaysForViewsAsync(</span><span style="background: white; color: blue">int </span><span style="background: white; color: black">projectionViewId, </span><span style="background: white; color: blue">int </span><span style="background: white; color: black">anchorViewId);
        </span><span style="background: white; color: blue">public static </span><span style="background: white; color: #2b91af">IAsyncAction </span><span style="background: white; color: black">StopProjectingAsync(</span><span style="background: white; color: blue">int </span><span style="background: white; color: black">projectionViewId, </span><span style="background: white; color: blue">int </span><span style="background: white; color: black">anchorViewId);
        </span><span style="background: white; color: blue">public static bool </span><span style="background: white; color: black">ProjectionDisplayAvailable { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; }
        </span><span style="background: white; color: blue">public static event </span><span style="background: white; color: #2b91af">EventHandler</span><span style="background: white; color: black">&lt;</span><span style="background: white; color: blue">object</span><span style="background: white; color: black">&gt; ProjectionDisplayAvailableChanged;
    }
}</span></pre>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="resolution">&nbsp;</a></p>
<h2>XAML/WinJS: New resolution scaling support / Super-high resolution tablets</h2>
<p>It’s possible we’ll see Win8.1 WinRT tablets sporting screens with much higher DPI then Apple’s retina even going all the way up to “4k” resolution. </p>
<p>Win8 supports loading different media resources in different DPIs. Essentially making it quite easy to change images and videos and create a DPI-Independent apps.&nbsp; This is done by specifying the same resource in multiple “scaling factors”. You can read more about scaling factors on <a href="http://blogs.msdn.com/b/b8/archive/2012/03/21/scaling-to-different-screens.aspx" target="_blank">Win8’s official blog</a>.&nbsp; It’s interesting that additional scaling factors have been added to Win8.1 showing Microsoft has an expectation for higher-resolution tablets.</p><pre class="code"><span style="background: white; color: black">  </span><span style="background: white; color: blue">public enum </span><span style="background: white; color: #2b91af">ResolutionScale
  </span><span style="background: white; color: black">{
    Invalid = 0,
    Scale100Percent = 100,
    Scale140Percent = 140,
<font color="#008000">    [Version(100859904)] Scale150Percent = 150,
    [Version(100859904)] Scale160Percent = 160,</font>
    Scale180Percent = 180,
    <font color="#008000">[Version(100859904)] Scale225Percent = 225,</font>
  }</span></pre>
<p>As we can see the highest new scaling factor supported is 225%. That’s 25% higher DPI that Microsoft expects to run on Win8.1 WinRT tablets then on Win8 WinRT tablets. <a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh465362.aspx" target="_blank">Current scaling values</a> correspond to real resolution and DPI as follows assuming a 12.5”-13” display: </p>
<p><img title="Windows.Data.Pdf namespace class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="current ScalePercents explained by MSDN" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-16_21-51-52_d19d1869-9f24-42cf-829f-9d43927d4473.png" width="431" height="72"></p>
<p>The existing 180% scaling supports 240DPI in WQHD resolution, so it’s reasonable to assume that 225% scaling would support 300DPI and even higher values. It’s possible we’ll see Win8.1 WinRT tablets sporting screens with much higher DPI then Apple’s retina even going all the way up to “4k” resolution. </p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="lowlag">&nbsp;</a></p>
<h2>Camera: Low-lag cameras / HDR</h2>
<p>There are new Win8.1 APIs introduced to support “Low Lag Cameras” which could indicate Microsoft is expecting HDR capable cameras in WinRT Tablets.</p>
<p>As we can see below Win8.1 introduces a lot of new “Low Lag” media capture APIs: </p>
<p><img title="Windows.Media.Devices naemspace LowLag class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.Media.Devices naemspace LowLag class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-18_16-31-06_5c2da35c-3f54-401e-8d24-bf1ec9f8e3ff.png" width="781" height="548"></p>
<p>As we can see this API will allow developers to take multiple low lag images in sequence which is a prerequisite to HDR custom stitching algorithms. </p>
<p>“Low Lag” cameras could mean a few things. Let’s first try to explain what Camera Lag is. In digital cameras users first see a thumbnail preview of the image being taken, they then click the “take picture” button and finally they see the final picture. The final picture is often different from the thumbnail preview as cameras need a few hundred milliseconds to actually take pictures. That time between clicking the “take picture” button and the time the picture is actually taken is called “camera lag”. Most cellphones and tablets have greater lag then other digital cameras as they don’t have a physical camera shutter. <a href="http://www.pcmag.com/article2/0,2817,2366729,00.asp" target="_blank">PC Magazine</a> has a expanded explanation on this topic and more statistics. </p>
<p><img title="Average Shutter lag in cellphones from PC Magazine" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Average Shutter lag in cellphones from PC Magazine" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-18_16-40-21_26c2a29b-0388-4409-b964-aaa3ecc6fa9c.png" width="332" height="273"></p>
<p>So what’s a “Low Lag" Camera good for? First it’ll let users take better pictures due to the reduced lag. Second, it can be used for HDR. HDR is essentially taking multiple nearly identical pictures in different exposure values and stitching them together.&nbsp; For example, a picture with high exposure will provide better visuals for shadows; and a picture with low exposure will have bright objects such as the sun and lamps look better. By stitching the best part of each exposure value we get a much better digital picture. Low lag cameras are essential for HDR as we can’t have too much time between capturing photos or stitching them won’t be feasible. You can read more about HDR <a href="http://photo.tutsplus.com/articles/hardware/are-cameras-with-built-in-hdr-the-future-of-photography/" target="_blank">here</a>. </p>
<p><img title="HDR Illustrated" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="HDR Illustrated" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-18_16-44-24_c163cf6f-61e9-4792-8bbc-cdf065473d40.png" width="597" height="299"></p>
<p>&nbsp; </p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="newapps">&nbsp;</a></p>
<h2>New Metro App Types: Appointments, LockScreen, Contacts and GeoLoc</h2>
<p>The way Metro apps are launched is often strongly associated&nbsp; with major featuresets in WinRT. Such Win8 featuresets include Search charm integration, Share charm integration, FileOpenPicker/FileOpenPicker integration, app2app file associations, etc. In Win8.1 the list of activation types in WinRT has been expanded to include lock screen calls, appointments provider, contacts provider and geolocation launching. </p><pre class="code"><span style="background: white; color: blue">namespace </span><span style="background: white; color: black">Windows.ApplicationModel.Activation
{
  [Version(100794368)]
  </span><span style="background: white; color: blue">public enum </span><span style="background: white; color: #2b91af">ActivationKind
  </span><span style="background: white; color: black">{
    Launch,
    Search,
    ShareTarget,
    File,
    Protocol,
    FileOpenPicker,
    FileSavePicker,
    CachedFileUpdater,
    ContactPicker,
    Device,
    PrintTaskSettings,
    CameraSettings,
<font color="#008000">    [Version(100859904)] RestrictedLaunch,
    [Version(100859904)] AppointmentsProvider,
    [Version(100859904)] Contact,
    [Version(100859904)] ContactsProvider,
    [Version(100859904)] LockScreenCall,
</font>  }
}</span></pre>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="geofenced">&nbsp;</a></p>
<h2>New App Type: GeoFenced activation</h2>
<p>With WIn8.1 apps can now register to be launched once the user leaves or enters a specific Geolocation area. There are many usecases this can be useful in, for example : keeping tabs that small children don’t stray too far, launching an app once entering a restaurant, etc.</p>
<p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/image_b3334637-4150-47c5-ae88-f1159081d983.png" width="249" height="249"></p>
<p>&nbsp;</p>
<p>The API itself is pretty straightforward. Win8.1 apps that want to be launched due to exiting or entering a GeoFence area first need to register a LocaitonTrigger the same way they’d register any other IBackgroundTrigger. Next apps need to register additional instances of the GeoFence class with a center point and a radius around that point. </p>
<p><img title="Windows.Devices.Geolocation.Geofencing namespace class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.Devices.Geolocation.Geofencing namespace class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_19-55-51_c3bd43f8-e676-441f-9a8c-b25fe9a88685.png" width="764" height="470"></p>
<p>There are a few puzzling open questions about this featureset. Can it be used to Geofence media content? For example, can Netflix use this to limit distribution of just some films to U.S. Markets? Another interesting open question is why limit GeoFencing to circular areas and not rectangular areas? This API seems like it’s got some evolution to do prior to be released to the general public.&nbsp;&nbsp;&nbsp; </p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="lockscreencall">&nbsp;</a></p>
<h2>New App Type: Lock screen call</h2>
<p>Win8.1 will include the capability to launch VoIP apps to start/end phone calls while the OS is locked. Essentially if a user gets a skype audio call under lock screen, you we want them to first unlock their tablet and then answer; we want them to just answer audio calls with a single tap. Which is why the new <em>LockScreenCallActivatedEventArgs</em> makes a lot of sense.&nbsp; Win8.1 apps also be able to set a call title on the lock screen to show up with the default lock screen UI. </p>
<p><img title="Windows.ApplicationModel LockScreenCall  namespace class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.ApplicationModel LockScreenCall  namespace class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_20-10-02_58eab8c5-5929-4535-bd20-608380c0fcdf.png" width="475" height="323"></p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="appointments">&nbsp;</a></p>
<h2>New App Type: Appointments Provider</h2>
<p>Using the new AppointmentsProvider apps can add and manage additional meetings to the shared Win8.1 calendar. Using this functionality developers can integrate 3rd party calendars into the main Win8.1 calendar. The AppointmentsProvider functionality launches the app asking for appointments in a specific time-frame. Appointments may also be sent back to our app to be added, removed, replaced or launched.&nbsp; </p>
<p><img title="Windows.ApplicationModel AppointmentProvider class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.ApplicationModel AppointmentProvider class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_19-13-34_67d76314-f95a-49ce-a489-96db8e5f2338.png" width="798" height="412"></p>
<p>With the new AppointmentProvider the ability to show the built-in calendar and individually ask the user to add, replace or launch appointments from it. </p>
<p><img title="Windows.ApplicationModel.Appointments namespace class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.ApplicationModel.Appointments namespace class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-12_19-16-18_0e53bc18-d4ea-44bd-8fd9-e896b4f849d4.png" width="779" height="544"></p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="tts">&nbsp;</a></p>
<h2>
<p>Text-to-speech</p></h2>
<p>Windows 8 apps that integrated text-to-speech capabilities needed to use a web-based TTS service. That had the disadvantage of requiring a network connection and had some lag associated with it. Win8.1 adds text-to-speech support to WinRT apps using Microsoft’s Speech platform.&nbsp; The API itself is straightforward as you can se below.&nbsp; </p>
<p><img title="Windows.Media.SpeechSynthesis namespace class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.Media.SpeechSynthesis namespace class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-14_20-38-24_c8a0a8ed-6f52-4dca-a7de-1b60d9efe5ed.png" width="438" height="397"></p>
<p>As we can see above Win8.1’s text-to-speech API supports iterating over installed voicces, choosing a voice to speak, using either plain text or SSML and getting back a SpeechSynthesisStream. For example the following code snippet would say “Hello world”. </p><pre class="code"><span style="background: white; color: black">        </span><span style="background: white; color: blue">&lt;</span><span style="background: white; color: #a31515">MediaElement </span><span style="background: white; color: red">x</span><span style="background: white; color: blue">:</span><span style="background: white; color: red">Name</span><span style="background: white; color: blue">="media" /&gt;
</span></pre><pre class="code"><span style="background: white; color: black">        </span><span style="background: white; color: blue">var </span><span style="background: white; color: black">speech = </span><span style="background: white; color: blue">new </span><span style="background: white; color: #2b91af">SpeechSynthesizer</span><span style="background: white; color: black">();
        </span><span style="background: white; color: blue">var </span><span style="background: white; color: black">stream = </span><span style="background: white; color: blue">await </span><span style="background: white; color: black">speech.SynthesizeTextToStreamAsync(</span><span style="background: white; color: #a31515">"Hello World"</span><span style="background: white; color: black">);
        media.SetSource(stream, </span><span style="background: white; color: #a31515">"audio/wav"</span><span style="background: white; color: black">);
        media.Play();</span></pre>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="knownfolders">&nbsp;</a></p>
<h2>Read-write access to Camera roll, Saved pictures and playlists </h2>
<p>The KnownFolders class provides WinRT apps access to many windows folders such as music, pictures, documents and others. In Win8.1 The list of accessible folders expanded to contain the playlists folders, saved pictures and camera roll. That indicates that Metro Win8.1 apps can read and write from those folders.&nbsp; </p><pre class="code"><span style="background: white; color: blue">namespace </span><span style="background: white; color: black">Windows.Storage
{
</span><span style="background: white; color: black">  </span><span style="background: white; color: blue">public static class </span><span style="background: white; color: #2b91af">KnownFolders
  </span><span style="background: white; color: black">{
<strong>    </strong></span><strong><span style="background: white; color: blue">public static </span><span style="background: white; color: black">StorageFolder SavedPictures { </span><span style="background: white; color: blue">get</span></strong><span style="background: white; color: black"><strong>; }</strong>
    </span><span style="background: white; color: blue">public static </span><span style="background: white; color: black">StorageFolder DocumentsLibrary { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; }
    </span><span style="background: white; color: blue">public static </span><span style="background: white; color: black">StorageFolder HomeGroup { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; }
    </span><span style="background: white; color: blue">public static </span><span style="background: white; color: black">StorageFolder MediaServerDevices { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; }
    </span><span style="background: white; color: blue">public static </span><span style="background: white; color: black">StorageFolder MusicLibrary { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; }
    </span><span style="background: white; color: blue">public static </span><span style="background: white; color: black">StorageFolder PicturesLibrary {</span><span style="background: white; color: black"> </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; }
    </span><span style="background: white; color: blue">public static </span><span style="background: white; color: black">StorageFolder RemovableDevices { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; }
    </span><span style="background: white; color: blue">public static </span><span style="background: white; color: black">StorageFolder VideosLibrary { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; }
<strong>    </strong></span><strong><span style="background: white; color: blue">public static </span><span style="background: white; color: black">StorageFolder ApplicationIndexedContent { </span><span style="background: white; color: blue">get</span></strong><strong><span style="background: white; color: black">; }
    </span><span style="background: white; color: blue">public static </span><span style="background: white; color: black">StorageFolder ApplicationSearchContent { </span><span style="background: white; color: blue">get</span></strong><strong><span style="background: white; color: black">; }
    </span><span style="background: white; color: blue">public static </span><span style="background: white; color: black">StorageFolder Playlists { </span><span style="background: white; color: blue">get</span></strong><strong><span style="background: white; color: black">; }
    </span><span style="background: white; color: blue">public static </span><span style="background: white; color: black">StorageFolder CameraRoll { </span><span style="background: white; color: blue">get</span></strong><span style="background: white; color: black"><strong>; }</strong>
  }
}</span></pre>
<p>For example, the following code snippet successfully adds a new playlist to the Xbox Music app on Win8.1. </p><pre class="code"><span style="background: white; color: black">            </span><span style="background: white; color: blue">var </span><span style="background: white; color: black">file = </span><span style="background: white; color: blue">await </span><span style="background: white; color: #2b91af">KnownFolders</span><span style="background: white; color: black">.Playlists.CreateFileAsync(</span><span style="background: white; color: #a31515">"myPlaylist.wpl"</span><span style="background: white; color: black">);
            </span><span style="background: white; color: blue">await </span><span style="background: white; color: #2b91af">FileIO</span><span style="background: white; color: black">.WriteTextAsync(file, </span><span style="background: white; color: #a31515">@"&lt;?wpl version=""1.0""?&gt;
&lt;smil&gt;
      &lt;head&gt;
        &lt;title&gt;My Playlist&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;seq&gt;
            &lt;media src=""C:\Users\Justin\Music\brobob.mp3""/&gt;
        &lt;/seq&gt;
    &lt;/body&gt;
&lt;/smil&gt;"</span><span style="background: white; color: black">);</span></pre>
<p>&nbsp;</p>
<p>After we run this code snippet and open Xbox Music Playlists we can see our new playlist:</p>
<p><img title="2013-05-14_21-09-24" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="2013-05-14_21-09-24" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-14_21-09-24_f76584ca-d497-4db9-9b8d-aa8724fc5f59.png" width="800" height="348"></p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="searchbox">&nbsp;</a></p>
<h2>XAML/WinJS: new SearchBox control</h2>
<p>Win8 apps were encouraged to use the Search Charm for any in-app searching. However, many consumers don’t have any idea the search charm even exists. Microsoft seem to have recognized that trend and provided developers with an inline SearchBox control. </p>
<p><img title="Windows.UI.Xaml namespace SearchBox class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.UI.Xaml namespace SearchBox class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-14_21-16-11_7244d12b-920d-4dba-ac80-cf727b5d4589.png" width="803" height="465">&nbsp;</p>
<p>It’s curious that SearchBox API doesn’t offer a way of entering a list of terms to search. Which either means it’s either just a plain-old-box-of-searching or it automatically hooks up to the Search Contract. Either way in-app searching without using the Search Charm will be a big UX boost for most users. </p>
<p>We can use the SearchBox control either from XAML or HTML. Here’s how to use it in WinJS: </p><pre class="code"><span style="background: white; color: blue">&lt;</span><span style="background: white; color: maroon">div </span><span style="background: white; color: red">data-win-control</span><span style="background: white; color: blue">="WinJS.UI.SearchBox"  </span><span style="background: white; color: red">data-win-options</span><span style="background: white; color: blue">="{ placeholderText  : 'place holder', }"&gt;&lt;/</span><span style="background: white; color: maroon">div</span><span style="background: white; color: blue">&gt;</span></pre>
<p>And when we run this code snippet we can see how the SearchBox looks like with placeholder text and when it’s focused: </p>
<p><img title="2013-05-14_21-27-08" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="2013-05-14_21-27-08" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-14_21-27-08_e82ddaa8-8ea0-4c10-b681-aa40eb8b8730.png" width="327" height="144"></p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="hub">&nbsp;</a></p>
<h2>XAML/WinJS: Hubs for SemanticZoom </h2>
<p>In Win8 coding a UI to support Semantic Zoom was a fairly painful experience. Win8.1 introduces the Hub and HubSection controls to make it easier. The Hub control is essentially a zoomed out view of a Semantic Zoom list. There’s a great screenshot on <a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh465319.aspx" target="_blank">MSDN</a> that shows the expected difference in UI between zoomed-in state and zoomed-out: </p>
<p><img title="print screen from MSDN showing zoomed-in vs. zoomed-out state" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="print screen from MSDN showing zoomed-in vs. zoomed-out state" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-14_21-30-17_7ea8fdf9-90fc-4c5b-86ec-74c905e27f1f.png" width="733" height="299"></p>
<p>Using the new Hub and HubSection controls we can easily build a UI like the zoomed out UI above. Here’s the WinJS code:</p><pre class="code"><span style="background: white; color: black">    </span><span style="background: white; color: blue">&lt;</span><span style="background: white; color: maroon">div </span><span style="background: white; color: red">data-win-control</span><span style="background: white; color: blue">="WinJS.UI.Hub"&gt;
        &lt;</span><span style="background: white; color: maroon">div </span><span style="background: white; color: red">data-win-control</span><span style="background: white; color: blue">="WinJS.UI.HubSection" </span><span style="background: white; color: red">data-win-options</span><span style="background: white; color: blue">="{header: 'Today'}"&gt;
            &lt;</span><span style="background: white; color: maroon">div </span><span style="background: white; color: red">class</span><span style="background: white; color: blue">="myItem"&gt;
                &lt;</span><span style="background: white; color: maroon">div </span><span style="background: white; color: red">class</span><span style="background: white; color: blue">="myText"&gt;</span><span style="background: white; color: black">32</span><span style="background: white; color: blue">&lt;/</span><span style="background: white; color: maroon">div</span><span style="background: white; color: blue">&gt;
            &lt;/</span><span style="background: white; color: maroon">div</span><span style="background: white; color: blue">&gt;
        &lt;/</span><span style="background: white; color: maroon">div</span><span style="background: white; color: blue">&gt;
        &lt;</span><span style="background: white; color: maroon">div </span><span style="background: white; color: red">data-win-control</span><span style="background: white; color: blue">="WinJS.UI.HubSection" </span><span style="background: white; color: red">data-win-options</span><span style="background: white; color: blue">="{header: 'Yesterday'}"&gt;
            &lt;</span><span style="background: white; color: maroon">div </span><span style="background: white; color: red">class</span><span style="background: white; color: blue">="myItem"&gt;
                &lt;</span><span style="background: white; color: maroon">div </span><span style="background: white; color: red">class</span><span style="background: white; color: blue">="myText"&gt;</span><span style="background: white; color: black">57</span><span style="background: white; color: blue">&lt;/</span><span style="background: white; color: maroon">div</span><span style="background: white; color: blue">&gt;
            &lt;/</span><span style="background: white; color: maroon">div</span><span style="background: white; color: blue">&gt;
        &lt;/</span><span style="background: white; color: maroon">div</span><span style="background: white; color: blue">&gt;
        &lt;</span><span style="background: white; color: maroon">div </span><span style="background: white; color: red">data-win-control</span><span style="background: white; color: blue">="WinJS.UI.HubSection" </span><span style="background: white; color: red">data-win-options</span><span style="background: white; color: blue">="{header: 'Last Week'}"&gt;
            &lt;</span><span style="background: white; color: maroon">div </span><span style="background: white; color: red">class</span><span style="background: white; color: blue">="myItem"&gt;
                &lt;</span><span style="background: white; color: maroon">div </span><span style="background: white; color: red">class</span><span style="background: white; color: blue">="myText"&gt;</span><span style="background: white; color: black">99</span><span style="background: white; color: blue">&lt;/</span><span style="background: white; color: maroon">div</span><span style="background: white; color: blue">&gt;
            &lt;/</span><span style="background: white; color: maroon">div</span><span style="background: white; color: blue">&gt;
        &lt;/</span><span style="background: white; color: maroon">div</span><span style="background: white; color: blue">&gt;
    &lt;/</span><span style="background: white; color: maroon">div</span><span style="background: white; color: blue">&gt;</span></pre>
<p>And when we run this we can see how using the Hub and HubSection controls makes building Semantic Zoom enabled UIs much easier.</p>
<p><img title="2013-05-14_21-43-26" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="2013-05-14_21-43-26" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-14_21-43-26_e3cca6d1-6222-41f6-8a03-9dc9b719eac6.png" width="678" height="390"></p>
<p>Here’s the full class diagram for the new Hub and HubSection controls: </p>
<p><img title="Windows.UI.Xaml namespace Hub class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.UI.Xaml namespace Hub class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-14_21-46-57_7b47a8ad-efb1-4b12-9e1b-945e90084539.png" width="701" height="591"></p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="datetimepicker">&nbsp;</a></p>
<h2>XAML: DatePicker and TimePicker</h2>
<p>Win8 didn’t have any built-in XAML controls for DateTime selection, but did have those for WinJS. Those have been back ported to WinRT XAML API. </p>
<p><img title="Windows.UI.Xaml namespace DatePicker and TimePicker class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.UI.Xaml namespace DatePicker and TimePicker class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-14_21-49-05_f1c30ed5-140e-4be3-bcbc-cf6b6328ef78.png" width="446" height="576"></p>
<p>Using these controls will likely render the same UI that’s already available in WinJS for TimePicker and DatePicker controls. </p>
<p><img title="WinJS rendered TimePicker and DatePicker" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="WinJS rendered TimePicker and DatePicker" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-14_21-51-18_206b1090-9069-47b5-9eeb-e8639fea6fd3.png" width="361" height="104"></p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="flyouts">&nbsp;</a></p>
<h2>XAML: Flyout, MenuFlyout and SettingsMenuFlyout</h2>
<p>In Win8 XAML apps, it required a lot of coding to add a custom settings screen or a “hover” flyout. WinJS apps had some of that capability out of the box in Win8, but XAML apps didn’t. In Win8.1 we’ll see new XAML controls to help bridge that gap and make building hover flyouts and settings flyouts easier. </p>
<p><img title="Windows.UI.Xaml namespace flyout class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.UI.Xaml namespace flyout class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-15_21-21-35_7f6965ce-da0c-4d5c-939d-13545f71447f.png" width="853" height="568">&nbsp;&nbsp; </p>
<p>The core of this API is around creating a “Flyout” (whether it’s a MenuFlyout, SettingsFlyout or a custom Flyout). MenuFlyouts can then receive MenuFlyoutItemBase that’ll allow to easily compose menus using this new APIs. Win8’s <a href="http://timheuer.github.io/callisto/" target="_blank">Callisto</a> (a 3rd party project) has a <a href="https://github.com/timheuer/callisto/wiki/Flyout" target="_blank">similar API</a> which probably inspired this API. Here’s a print screen from Callisto on how a Flyout could look like: </p>
<p><img title="print screen from Callisto for a Flyout." style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="print screen from Callisto for a Flyout." src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-15_21-29-40_126588e1-cef0-48e6-88fa-943619c8d15e.png" width="417" height="243"></p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="appbar">&nbsp;</a></p>
<h2>XAML: AppBar simplification </h2>
<p>When coding AppBar buttons in Win8 developers had to dig through approximately 100 custom styles for &lt;Button /&gt; to style the appbar correctly. That was a pain. WinJS on the other hand had AppBarButton with Icons that made it relatively easy to code for. Win8.1 introduces new AppBar controls that’ll make developing a XAML AppBar much easier. </p>
<p><img title="Windows.UI.Xaml.Controls namespace AppBar controls class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.UI.Xaml.Controls namespace AppBar controls class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-15_21-47-02_2c2f0606-586b-4a14-8416-d00f143efaa4.png" width="449" height="387"></p>
<p>As you can see from the code diagram above the new controls include a dedicated AppBarButton, AppBarToggleButton and an AppBarSeperator. AppBarButton and AppBarToggleButton both support an “Icon” which is an instance of the IconElement class. IconElement can be practically anything: Images, XAML markup paths, built-in symbols or any font glyph. </p>
<p><img title="Windows.UI.Xaml.Controls namespace AppBar icons class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.UI.Xaml.Controls namespace AppBar icons class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-15_21-49-01_21059651-db5b-4cc5-9689-b00ba748f4cc.png" width="803" height="560"></p>
<p>Here’s a code sample of how to sue the new XAML AppBar controls: </p><pre class="code"><span style="background: white; color: black">    </span><span style="background: white; color: blue">&lt;</span><span style="background: white; color: #a31515">Page.BottomAppBar</span><span style="background: white; color: blue">&gt;
        &lt;</span><span style="background: white; color: #a31515">AppBar </span><span style="background: white; color: red">x</span><span style="background: white; color: blue">:</span><span style="background: white; color: red">Name</span><span style="background: white; color: blue">="bottomAppBar"</span><span style="background: white; color: blue">&gt;
            &lt;</span><span style="background: white; color: #a31515">Grid</span><span style="background: white; color: blue">&gt;
                &lt;</span><span style="background: white; color: #a31515">AppBarButton </span><span style="background: white; color: red">Content</span><span style="background: white; color: blue">="New Article"&gt;
                    &lt;</span><span style="background: white; color: #a31515">AppBarButton.Icon</span><span style="background: white; color: blue">&gt;
                        &lt;</span><span style="background: white; color: #a31515">SymbolIcon </span><span style="background: white; color: red">Symbol</span><span style="background: white; color: blue">="Add" /&gt;
                    &lt;/</span><span style="background: white; color: #a31515">AppBarButton.Icon</span><span style="background: white; color: blue">&gt;
                &lt;/</span><span style="background: white; color: #a31515">AppBarButton</span><span style="background: white; color: blue">&gt;
                &lt;</span><span style="background: white; color: #a31515">AppBarSeparator </span><span style="background: white; color: blue">/&gt;
            &lt;/</span><span style="background: white; color: #a31515">Grid</span><span style="background: white; color: blue">&gt;
        &lt;/</span><span style="background: white; color: #a31515">AppBar</span><span style="background: white; color: blue">&gt;
    &lt;/</span><span style="background: white; color: #a31515">Page.BottomAppBar</span><span style="background: white; color: blue">&gt;</span></pre>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="databinding">&nbsp;</a></p>
<h2>XAML: DataBinding Improvements</h2>
<p>XAML Databindings in WPF, Silverlight 4 and Windows Phone 8 have additional features that didn’t exist for Win8 and have been backported to WIn8.1. The new properties being introduces are <em>FallbackValue, TargetNullValue </em>and <em>UpdateSourceTrigger</em>. StringFormat will not be included in Win8.1. You can read more about FallBackValue and TargetNullValue on <a href="http://dontcodetired.com/blog/post/FallbackValue-TargetNullValue-StringFormat-in-Silverlight-4.aspx" target="_blank">Jason's blog</a>. </p><pre class="code"><span style="background: white; color: black">        </span><span style="background: white; color: blue">&lt;</span><span style="background: white; color: #a31515">TextBlock </span><span style="background: white; color: red">Text</span><span style="background: white; color: blue">="{</span><span style="background: white; color: #a31515">Binding </span><span style="background: white; color: red">Path</span><span style="background: white; color: blue">=myProperty, 
            </span><span style="background: white; color: red">FallbackValue</span><span style="background: white; color: blue">='myFallbackValue', 
            </span><span style="background: white; color: red">TargetNullValue</span><span style="background: white; color: blue">='myNullValue', 
            </span><span style="background: white; color: red">UpdateSourceTrigger</span><span style="background: white; color: blue">=PropertyChanged}" /&gt;</span></pre>
<p>Win8.1 will also introduce a DataTemplateSelector to support databinding lists to instances of multiple types and rendering different visuals for each type. More on that in <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.datatemplateselector.aspx" target="_blank">MSDN</a>.</p>
<p>&nbsp;</p>
<p><img title="Windows.UI.Xaml.Data namespace changes class diagram" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Windows.UI.Xaml.Data namespace changes class diagram" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-15_21-58-40_aaba7a59-bfff-4883-8c37-02fe9703451a.png" width="513" height="344"></p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="globalization">&nbsp;</a></p>
<h2>Globalization: Currencies, Numeral systems and Numerical formatters</h2>
<p>Win8 has support to formatting dates, times and numbers based on the user’s culture. Win8.1 expands that list to support currencies, non-latin numerical systems and multiple numerical formatting functions. Each of those formatting options sounds simple before you consider the cross-cultural complexity so it’s great to see Microsoft supporting those out of the box. </p>
<p>Here’s an example on how Win8.1 can help our app translate to non-latin numerical systems, format currencies and help print out numbers. </p><pre class="code"><span style="background: white; color: black">    </span><span style="background: white; color: green">// Brazil Dollar, prints out: BZ$12345.60
    </span><span style="background: white; color: #2b91af">Debug</span><span style="background: white; color: black">.WriteLine(</span><span style="background: white; color: blue">new </span><span style="background: white; color: #2b91af">CurrencyFormatter</span><span style="background: white; color: black">(</span><span style="background: white; color: #2b91af">CurrencyIdentifiers</span><span style="background: white; color: black">.BZD).Format(12345.6));

    </span><span style="background: white; color: green">// United Stats Dollar, prints out: $12345.60
    </span><span style="background: white; color: #2b91af">Debug</span><span style="background: white; color: black">.WriteLine(</span><span style="background: white; color: blue">new </span><span style="background: white; color: #2b91af">CurrencyFormatter</span><span style="background: white; color: black">(</span><span style="background: white; color: #2b91af">CurrencyIdentifiers</span><span style="background: white; color: black">.USD).Format(12345.6));

    </span><span style="background: white; color: green">// Iran Rial, prints out: ????12345.60
    </span><span style="background: white; color: #2b91af">Debug</span><span style="background: white; color: black">.WriteLine(</span><span style="background: white; color: blue">new </span><span style="background: white; color: #2b91af">CurrencyFormatter</span><span style="background: white; color: black">(</span><span style="background: white; color: #2b91af">CurrencyIdentifiers</span><span style="background: white; color: black">.IRR).Format(12345.6));

    </span><span style="background: white; color: green">// Arabic numerals, prints out: ??????????
    </span><span style="background: white; color: #2b91af">Debug</span><span style="background: white; color: black">.WriteLine(</span><span style="background: white; color: blue">new </span><span style="background: white; color: #2b91af">NumeralSystemTranslator</span><span style="background: white; color: black">()
                    {
                        NumeralSystem = </span><span style="background: white; color: #2b91af">NumeralSystemIdentifiers</span><span style="background: white; color: black">.Arab
                    }.TranslateNumerals(</span><span style="background: white; color: #a31515">"1234567890"</span><span style="background: white; color: black">));

    </span><span style="background: white; color: green">// Thai numerals, prints out: ??????????
    </span><span style="background: white; color: #2b91af">Debug</span><span style="background: white; color: black">.WriteLine(</span><span style="background: white; color: blue">new </span><span style="background: white; color: #2b91af">NumeralSystemTranslator</span><span style="background: white; color: black">()
                    {
                        NumeralSystem = </span><span style="background: white; color: #2b91af">NumeralSystemIdentifiers</span><span style="background: white; color: black">.Thai
                    }.TranslateNumerals(</span><span style="background: white; color: #a31515">"1234567890"</span><span style="background: white; color: black">));

    </span><span style="background: white; color: green">// percent formatter, prints out: 1236.789 %
    </span><span style="background: white; color: #2b91af">Debug</span><span style="background: white; color: black">.WriteLine(</span><span style="background: white; color: blue">new </span><span style="background: white; color: #2b91af">PercentFormatter</span><span style="background: white; color: black">().Format(12.36789));

    </span><span style="background: white; color: green">// Permille formatter, prints out: 12367.89 ‰
    </span><span style="background: white; color: #2b91af">Debug</span><span style="background: white; color: black">.WriteLine(</span><span style="background: white; color: blue">new </span><span style="background: white; color: #2b91af">PermilleFormatter</span><span style="background: white; color: black">().Format(12.36789));

    </span><span style="background: white; color: green">// Rounding formatter, prints out: 13
    </span><span style="background: white; color: #2b91af">Debug</span><span style="background: white; color: black">.WriteLine(</span><span style="background: white; color: blue">new </span><span style="background: white; color: #2b91af">SignificantDigitsNumberRounder</span><span style="background: white; color: black">()
                    {
                        RoundingAlgorithm = </span><span style="background: white; color: #2b91af">RoundingAlgorithm</span><span style="background: white; color: black">.RoundUp,
                        SignificantDigits = 2
                    }.RoundDouble(12.3));</span></pre>
<p>As we can see each language and formatting algorithm has a certain amount of complexity to it. Currency formatters change base on the currency symbol and the its location; some cultures need to format numbers in non-latin numerals; and formatting percents or rounding is also culturally specific. Having these built-in formatters is going to prove super useful to WinRT developers. Just the <strong>CurrencyFormatter</strong> alone is sure to be used by any Win8.1 app that has in-app purchase enabled for multiple markets. </p>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="minor">&nbsp;</a></p>
<h2>Other minor but important Win8.1 features</h2>
<p>There are additional smaller Win8.1 features that developers might find interesting: </p>
<ul>
<li><strong>XAML:&nbsp; </strong>TextBox, PasswordBox and SearchBox now support Watermarks and Headers. 
<li><strong>XAML: </strong>A &lt;SwapChainPanel /&gt; control will be introduced to improve XAML-to-DirectX interop. It’s likely that this control will support fully interactive, high-performance DirectX “islands” to be embedded in XAML pages. 
<li><strong>XAML: </strong>MediaElement will be get support for MediaStreamSource. MediaStreamSource is the way WPF, Silverlight and Windows Phone support custom media sources. MediaStreamSource was used by many media companies on these platforms. Win8 didn’t support MediaStreamSource instead asking developers to build C++ Media Foundation plugins. Companies with existing MediaStreamSource investments will be able to port them to Win8.1. 
<li><strong>Media:</strong> When recording Audio, Video or Pictures developers can now set preferences such as Auto-focus, Capture Scene, Exposure, Flash, Iso speed, white balance and others. 
<li><strong>Networking</strong>: Win8.1 PeerWatcher class will supplement PeerFinder to provide notifications when new devices are in range. 
<li><strong>Networking: </strong>Win8.1 will provide developers with details about the current connections such as WiFi access point name, 3G data usage, cellular signals bar and more. 
<li><strong>Netwroking: </strong>Hardcoded support for standard HTTP Headers, HTTP Verbs and HTTP protocol components have been introduced in Win8.1. That helps remove magic “http strings” from our code and make coding for REST services a lot easier. 
<li><strong>UI: </strong>All existing Win8 TileTemplateType<strong>&nbsp;</strong>values are now marked as obsolete. All templates for Win8.1 app tiles are in one of three sizes: 150x150 pixels, 310x310 pixels and 310x150 pixels. 
<li>Many other features have been introduced that won’t be covered here. </li></ul>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="csharp">&nbsp;</a></p>
<h2>How to code Win8.1 C# apps before public beta? </h2>
<p>These instructions are only useful before BUILD 2013 conference (June 22nd 2013). After this date simply installing Win8.1 with the development tools will suffice. </p>
<p><img title="Debuggin Win8.1 apps in VS2012" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Debuggin Win8.1 apps in VS2012" src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-18_19-35-16_7fe1b7b9-a280-4e08-b496-86efcdc5643b.png" width="800" height="630"></p>
<p>Here are the instructions to develop on Windows 8 with Visual Studio 2012 and deploy &amp; debug on Win8.1: </p>
<ol>
<li>Install WIn8.1. 
<li>Enable Win8 remote debugging like you would for any Win8 machine. Install <a href="http://www.microsoft.com/visualstudio/eng/downloads" target="_blank">Visual Studio 2012 Remote debugging</a> tools and <a href="http://msdn.microsoft.com/en-us/library/vstudio/bt727f1t.aspx" target="_blank">run them</a>. 
<li>Create a new <em>Windows.WinMD</em> that matches Win8.1 and could then be copied to a Win8 development machine. On your Win8.1 machine run the following command: <br><em>mdmerge -i c:\Windows\System32\WinMetadata\ -o c:\temp\windows.winmd /n 1</em> 
<li>Backup your Win8 <em>Windows.WinMD </em>file so you could return to Win8.0 development if you choose to. The file is located @<br><em>"c:\Program Files (x86)\Windows Kits\8.0\References\CommonConfiguration\Neutral\Windows.winmd"</em> 
<li>Finally replace your Win8 <em>Windows.WinMD</em> file with the Win8.1’s <em>Windows.WinMD </em>file. 
<li>Restart VS2012 and you can now code against Win8.1 APIs on Win8, deploy to a Win8.1 machine and debug.&nbsp; </li></ol>
<p><em></em>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="winjs">&nbsp;</a></p>
<h2>How to develop Win8.1 WinJS apps before public beta? </h2>
<p>These instructions are only useful before BUILD 2013 conference (June 22nd 2013). After this date simply installing Win8.1 with the development tools will suffice.</p>
<p><img title="Debugging WinJS 2.0 apps in VS2012 " style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Debugging WinJS 2.0 apps in VS2012 " src="http://justinangel.net/BlogFiles/Windows-Live-Writer/Prerelease-Window.1-WinRT-Developer-APIs_12AB8/2013-05-18_19-37-36_d715392a-fc13-431b-ad69-4f8232944a2b.png" width="740" height="612"></p>
<p>In order to code, deploy and debug Win8.1 WinJS apps from Win8 and Visual Studio 2012 follow these steps: </p>
<ol>
<li>Find WinJS 2.0 files from your local&nbsp; <em>C:\Program Files\WindowsApps </em>folder. You’ll need to do some <a href="http://justinangel.net/ReverseEngineerWin8Apps" target="_blank">fancy security permission changes</a> and then you’ll be able to copy “Microsoft.WinJS” folders. <br>Or you can download a copy from @ <a href="http://justinangel.net/storage/windows81/WinJS2.0Preview.zip" target="_blank">http://justinangel.net/storage/windows81/WinJS2.0Preview.zip</a> 
<li>Create a new Win8 WinJS project in Visual Studio 2012. 
<li>Add copies of <em>ui.js, base.js and ui-light.css </em>to your project from the aforementioned folders. 
<li>Replace all references to <em>ui.js, base.js and ui-light.css </em>with references to your locally embedded files. 
<li>You can now code against WinJS 2.0 APIs on a Win8 machine, and run &amp; debug on Win8.1. </li></ol>
<p>&nbsp;</p>
<p><em><a href="#toc">Jump back to table of contents</a></em>&nbsp;<a name="disc">&nbsp;</a></p>
<h2>Disclaimer: Please don’t sue me</h2>
<p>The article is written to share original research on the upcoming WinRT goodness with other developers. I have no insider information what-so-ever on Windows 8.1. </p>
<p>This article compromises my personal conclusions from “leaked” Windows 8.1 OS Images. No NDAs were harmed in the making of this article. I do not have and never had any pre-release access to WIndows 8.1 provided to me by Microsoft or anyone else. This article was written and researched on my own time and has no affiliation with my employer.&nbsp; </p>
<p>&nbsp;</p>
<h2>Feedback?</h2>
<p>Questions? Feedback? Other insights? Sound off in the comments. </p>
<p>&nbsp;</p>
<p>Sincerely, <br>-- Justin Angel </p>
        </section>

        <footer id="footerContent">
            Published on 5/20/2013 12:00:00 AM by Justin Angel ©2014. <br /> 
            This work is licensed under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution 3.0 Unported License</a>.
        </footer> 
    
        <br /><br />
        <div id="comments">
            <h2>Comments</h2>
            <script id="commentTemplate" type="text/x-jquery-tmpl">
                <div class="commentContainer">
                    <a name="comment${ID}" />
                    <img class="gravatar" src="${gravatar}?d=identicon"  />
                    <div class="commentContent">
                        <p class="commentTitle">${name} Says:</p>
                        <div>
                            {{html text}}
                        </div>
                        <input class="expandCommentButton cancel" type="button" value="Respond to ${name}" id="expandComment${ID}">
                        <div id="leaveComment${ID}" style="display: none;">
                             {{tmpl "#commentInputTemplate"}}
                        </div>  
                    </div> 
                    {{tmpl(comments) "#commentTemplate"}}
                </div>
            </script>
            <script id="commentInputTemplate" type="text/x-jquery-tmpl">
                <div class="postCommentContainer">
                    <form action="Win81APIs/NewComment" method="post" id="form${ID}">
                        <span class="fieldName">Name:</span>
                        <span class="fieldValue"><input type="text" Name="name" class="required" minlength="2" /></span>
                         
                        <br />
                        <span class="fieldName">Email:</span>
                        <span class="fieldValue"><input type="text" name="Email" /></span>
                        <br />
                        <span class="fieldName" style="vertical-align: top;">Message:</span>
                        <span class="fieldValue"><textarea name="text"></textarea></span>
                        <br />
                        <input type="hidden" name="ID" value="${ID}" />
                        <input type="hidden" name="BlogPost" value="${BlogPost}" />
                        <input class="postButton" type="submit" value="Share My Thoughtful Observations!"  />
                    </form>
                </div> 
            </script>
        </div>
    </article>
    
        <div class="sideBar">
        <div class="sideBarButtons" style="float: left">
            <a id="searchLink" target="_blank" href="http://www.bing.com/search?q=site%3Ahttp%3a%2f%2fjustinangel.net"
                onclick="javascript:return false;">
                <img src="/Content/Sidebar/Icons/Search.png" alt="Search" />
            </a><a id="shareLink" target="_blank" href="https://twitter.com/intent/tweet?text=Pre-beta+Windows+8.1+WinRT+Developer+APIs+by+%40JustinAngel+@+&amp;url=http%3a%2f%2fJustinAngel.net%2fWin81APIs"
                onclick="javascript:return false;">
                <img src="/Content/Sidebar/Icons/Share.png" alt="Share on Twitter" />
            </a><a href="http://justinangel.net">
                <img src="/Content/Sidebar/Icons/home.png" alt="Go Home" />
            </a><a id="rssLink" target="_blank" href="http://justinangel.net/Feed"
                onclick="javascript: return false;">
                <img src="/Content/Sidebar/Icons/RSS.png" alt="RSS" />
            </a><a id="contactLink" target="_blank" href="http://JustinAngel.net/storage/businessCard.png"
                onclick="javascript: return false;">
                <img src="/Content/Sidebar/Icons/Contact.jpg" alt="Business Card" />
            </a>
        </div>
        <div class="sidebarLiveDisplay">
            <div id="sidebarContact">
                <img src="http://JustinAngel.net/storage/businessCard.png" />
            </div>
            <div id="sidebarSearch">
                Search:
                <input type="text" id="sidebarSearchTextbox" />
                <ul id="searchResults">
                </ul>
            </div>
            <div id="sidebarShare">
                <a target="_blank" href="https://twitter.com/intent/tweet?text=Pre-beta+Windows+8.1+WinRT+Developer+APIs+by+%40JustinAngel+@+&amp;url=http%3a%2f%2fJustinAngel.net%2fWin81APIs">
                    <img alt="Share on twitter" src="/Content/Sidebar/Icons/twitter.png" />
                </a><a target="_blank" href="http://www.facebook.com/sharer.php?u=http%3a%2f%2fJustinAngel.net%2fWin81APIs&amp;t=Pre-beta+Windows+8.1+WinRT+Developer+APIs+by+%40JustinAngel">
                    <img alt="Share on facebook" src="/Content/Sidebar/Icons/facebook.png" />
                </a><a target="_blank" href="http://www.reddit.com/submit?url=http%3a%2f%2fJustinAngel.net%2fWin81APIs&amp;title=Pre-beta+Windows+8.1+WinRT+Developer+APIs+by+%40JustinAngel">
                    <img alt="Share on reddit" src="/Content/Sidebar/Icons/reddit.png" />
                </a>
            </div>
            <div id="sidebarRSS">
                <input type="text" readonly="readonly" value="http://justinangel.net/Feed" />
            </div>
<span style="display: none; visibility:hidden;"><a href="https://plus.google.com/u/0/113847075399151320418?rel=author" rel="author">my google+ profile.</a></span>
        </div>
    </div>

<script type="text/javascript">
    var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
    document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
    try {
        var pageTracker = _gat._getTracker("UA-12257058-1");
        pageTracker._setDomainName("none");
        pageTracker._setAllowLinker(true);
        pageTracker._trackPageview();
    } catch (err) { }</script>
</body>
</html>
