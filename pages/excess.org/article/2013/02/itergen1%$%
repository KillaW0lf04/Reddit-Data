<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title>Iterables, Iterators and Generators: Part 1 - excess.org</title>

<link rel="stylesheet" type="text/css" href="/media/xs.css" media="all">
<link rel="stylesheet" type="text/css" href="/media/xs_print.css" media="print">
<link rel="shortcut icon" href="/favicon.ico" type="image/vnd.microsoft.icon">

<!--[if lt IE 7]>
<script defer type="text/javascript" src="/media/pngfix.js"></script>
<style type="text/css">
    .bgover {background-image: none;}
</style>
<![endif]-->



</head>
  <body>
<a href="/"><img title="excess.org" alt="excess.org" height="70" width="600" src="/media/strut.gif" class="topstrut"></a>

<br>

<div class="lcol">
<h1 style="margin: 0 0 1ex 6px;">Ian Ward</h1>

<div class="bgover">
<div class="colh">Consulting</div>
<a href="http://boxkite.ca">Boxkite Inc.</a>
</div>

<div class="bgover" style="margin-top: 6px;">
<div class="colh">Software</div>

<div class="proj">
<a href="http://ckan.org/"><img src="/media/ckan.png" alt="CKAN" title="CKAN"></a>
<span class="smll">contributor/tech lead</span>
</div>

<div class="proj">
<a href="http://pyrf.org/"><img src="/media/pyrf.png" alt="PyRF" title="PyRF"></a></a>
<span class="smll">primary contributor</span>
</div>

<div class="proj">
<a href="http://urwid.org/"><img src="/media/urwid.png" alt="Urwid" title="Urwid"></a>
<span class="smll">author</span>
</div>

<div class="proj">
<a href="/speedometer/"><img alt="Speedometer" title="Speedometer" src="/media/speedometer.png"></a>
<span class="smll">author</span>
</div>

<div class="proj">
<a href="/article/2007/10/xterm-256-colour-chart-20/">xterm colour chart</a>
</div>
<div class="proj">
<a href="/old-projects/">old projects</a>
</div>
<hr/>
<div class="colh">Presentations</div>

<div class="proj">
<a href="/article/2014/05/iasa-esummit/">Contributing to Open Source</a><br>
<span class="smll">IASA E-Summit, 2014-05-16</span>
</div>
<div class="proj">
<a href="/article/2012/11/urwid-applications-pycon-canada/">Urwid Applications</a><br>
<span class="smll">2012-11-14</span>
</div>
<div class="proj">
<a href="/article/2012/01/urwid-python-malaysia/">Urwid Intro</a><br>
<span class="smll">2012-01-22</span>
</div>
<div class="proj">
<a href="/article/2011/12/unfortunate-python/">Unfortunate Python</a><br>
<span class="smll">2011-12-19</span>
</div>
<div class="proj">
<a href="/article/2011/06/python-3-argument-sketch-slides/">Python 3, the Argument Sketch</a><br>
<span class="smll">2011-06-14</span>
</div>
<div class="proj">
<a href="/article/2010/04/nontrivial-django-forms-talk-text/">Nontrivial Django Forms</a><br>
<span class="smll">2010-04-16</span>
</div>
<div class="proj">
<a href="/article/2009/05/django-1-1-talk-text/">Django 1.1</a><br>
<span class="smll">2009-05-16</span>
</div>


<hr/>
<div class="colh">Writing</div>

<div class="proj">
<a href="http://lwn.net/Articles/426906/">Moving to Python 3</a><br>
<span class="smll">2011-02-17</span>
</div>
<div class="proj">
<a href="http://lwn.net/Articles/328487/">Alternatives to SQL Databases</a><br>
<span class="smll">2009-04-16</span>
</div>
<div class="proj">
<a href="http://lwn.net/Articles/293692/">Audio Streaming over Bluetooth</a><br>
<span class="smll">2008-08-15</span>
</div>
<div class="proj">
<a href="http://lwn.net/Articles/291803/">MARS and Cell processor</a><br>
<span class="smll">2008-07-31</span>
</div>
<div class="proj">
<a href="/writing/">Printing with Debian and Windows Mini-HOWTO</a><br>
<span class="smll">2009-03-08 (1.7)</span>
</div>

</div>

<div class="bgover" style="margin-top: 6px; margin-bottom: 15px;">
<div class="colh">Article Tags</div>
<div class="proj" style="line-height: 1.5em;">
<span class="sbut"><a href="/tag/django/">Django</a></span> <span class="sbut"><a href="/tag/templayer/">Templayer</a></span> <span class="sbut"><a href="/tag/urwid/">Urwid</a></span> <span class="sbut"><a href="/tag/ottawa/">Ottawa</a></span> <span class="sbut"><a href="/tag/cycling/">Cycling</a></span> <span class="sbut"><a href="/tag/oclug/">OCLUG</a></span> <span class="sbut"><a href="/tag/ols/">OLS</a></span> <span class="sbut"><a href="/tag/site-news/">Site News</a></span> <span class="sbut"><a href="/tag/mailman/">Mailman</a></span> <span class="sbut"><a href="/tag/php/">PHP</a></span> <span class="sbut"><a href="/tag/hardware/">Hardware</a></span> <span class="sbut"><a href="/tag/software/">Software</a></span> <span class="sbut"><a href="/tag/speedometer/">Speedometer</a></span> <span class="sbut"><a href="/tag/video/">Video</a></span> <span class="sbut"><a href="/tag/linux/">Linux</a></span> <span class="sbut"><a href="/tag/git/">Git</a></span> <span class="sbut"><a href="/tag/python/">Python</a></span> <span class="sbut"><a href="/tag/lwn/">LWN.net</a></span> <span class="sbut"><a href="/tag/fosslc/">FOSSLC</a></span> <span class="sbut"><a href="/tag/opag/">OPAG</a></span> <span class="sbut"><a href="/tag/games/">Games</a></span> <span class="sbut"><a href="/tag/ipv6/">IPv6</a></span>
</div>
</div>

<p>
<a href="/">Home</a>
</p>

<div class="smll">
<p>
Ian Ward's email:<br /> 
first name at this domain
</p>
<p>
<tt>wardi</tt> on OFTC, freenode and
<a href="https://github.com/wardi/">github</a>
</p>
</div>

<a href="http://www3.clustrmaps.com/counter/maps.php?url=http://excess.org" id="clustrMapsLink"><img src="http://www3.clustrmaps.com/counter/index2.php?url=http://excess.org" style="border:0px;" alt="Locations of visitors to this page" title="Locations of visitors to this page" id="clustrMapsImg" onError="this.onError=null; this.src='http://www2.clustrmaps.com/images/clustrmaps-back-soon.jpg'; document.getElementById('clustrMapsLink').href='http://www2.clustrmaps.com'" />
</a>

</div>


<div class="mcol" style="padding-bottom: 0; margin-bottom: -3px;">
<h1 style="margin: 0 0 1ex 6px;">Iterables, Iterators and Generators: Part 1</h1>
</div>


<div class="mcol">
<div class="bgover">
<img align="right" src="/media/image/2013/03/iterable_iterator.png" alt="Iterables and Iterators" title="Iterables and Iterators" 
width="350" height="190"/>

<div class="date">Posted on 2013-02-12.</div>
<div class="document">


<p>This is part one of a talk I gave January 24, 2013 at the Ottawa Python Authors Group</p>
<p><a class="reference external" href="http://excess.org/article/2013/02/itergen2/">Part Two</a> is now also available.</p>
<p>Both parts of this presentation are also available as a <a class="reference external" href="http://raw.github.com/wardi/iterables-iterators-generators/master/Iterables%2C%2520Iterators%2C%2520Generators.ipynb">single IPython Notebook</a>  which you can download and run locally, or view with <a class="reference external" href="http://nbviewer.ipython.org/urls/raw.github.com/wardi/iterables-iterators-generators/master/Iterables%2C%2520Iterators%2C%2520Generators.ipynb">nbviewer.ipython.org</a>.  The complete source is available at <a class="reference external" href="https://github.com/wardi/iterables-iterators-generators">https://github.com/wardi/iterables-iterators-generators</a></p>
</div>
<div class="document">


<div class="section" id="id1">
<span id="a-gentle-introduction"></span><h1><a class="reference internal" href="#a-gentle-introduction">A Gentle Introduction</a></h1>
<p>The first few examples are from Ned Bachelder's Python Iteration Talk <a class="reference external" href="http://bit.ly/pyiter">http://bit.ly/pyiter</a></p>
<p>Coming from another language you might find it natural to create a counter and increment it to iterate over a <tt class="docutils literal">list</tt> in Python</p>
<div class="highlight"><pre><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mf">17</span><span class="p">,</span> <span class="mf">23</span><span class="p">,</span> <span class="mf">47</span><span class="p">,</span> <span class="mf">51</span><span class="p">,</span> <span class="mf">101</span><span class="p">,</span> <span class="mf">173</span><span class="p">,</span> <span class="mf">999</span><span class="p">,</span> <span class="mf">1001</span><span class="p">]</span>

<span class="n">i</span> <span class="o">=</span> <span class="mf">0</span>
<span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">my_list</span><span class="p">):</span>
    <span class="n">v</span> <span class="o">=</span> <span class="n">my_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">print</span> <span class="n">v</span>
    <span class="n">i</span> <span class="o">+=</span> <span class="mf">1</span>
</pre></div>
<pre class="literal-block">
17
23
47
51
101
173
999
1001
</pre>
<p>You might also have been told about <tt class="docutils literal">range()</tt> which almost lets you write a C-style for loop</p>
<div class="highlight"><pre><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">my_list</span><span class="p">)):</span>
    <span class="n">v</span> <span class="o">=</span> <span class="n">my_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">print</span> <span class="n">v</span>
</pre></div>
<pre class="literal-block">
17
23
47
51
101
173
999
1001
</pre>
<p>But neither of the above are natural ways of iterating in python.  We do this instead:</p>
<div class="highlight"><pre><span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">v</span>
</pre></div>
<pre class="literal-block">
17
23
47
51
101
173
999
1001
</pre>
<p>Many types of objects may be iterated over this way.  Iterating over strings produces single characters:</p>
<div class="highlight"><pre><span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="s">&quot;Hello&quot;</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">v</span>
</pre></div>
<pre class="literal-block">
H
e
l
l
o
</pre>
<p>Iterating over a <tt class="docutils literal">dict</tt> produces its keys (in no particular order):</p>
<div class="highlight"><pre><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="mf">1</span><span class="p">,</span>
    <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="mf">2</span><span class="p">,</span>
    <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="mf">3</span><span class="p">,</span>
    <span class="p">}</span>

<span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">v</span>
<span class="c"># Note the strange order!</span>
</pre></div>
<pre class="literal-block">
a
c
b
</pre>
<p>Iterating over a file object produces lines from that file, including the line termination:</p>
<div class="highlight"><pre><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;suzuki.txt&quot;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&quot;&gt;&quot;</span><span class="p">,</span> <span class="n">line</span>
</pre></div>
<pre class="literal-block">
&gt; On education

&gt; &quot;Education has failed in a very serious way to convey the most important lesson science can teach: skepticism.&quot;

&gt; &quot;An educational system isn't worth a great deal if it teaches young people how to make a living but doesn't teach them how to make a life.&quot;
</pre>
<p>Objects that can be iterated over in python are called &quot;Iterables&quot;, and a for loop isn't the only thing that accepts iterables.</p>
<p>The list constructor takes any iterable.  We can use this to make a list of the keys in a <tt class="docutils literal">dict</tt>:</p>
<div class="highlight"><pre><span class="nb">list</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</pre></div>
<pre class="literal-block">
['a', 'c', 'b']
</pre>
<p>Or the characters in a string:</p>
<div class="highlight"><pre><span class="nb">list</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)</span>
</pre></div>
<pre class="literal-block">
['H', 'e', 'l', 'l', 'o']
</pre>
<p>List comprehensions take iterables.</p>
<div class="highlight"><pre><span class="n">ascii</span> <span class="o">=</span> <span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="s">&quot;Hello&quot;</span><span class="p">]</span>
<span class="n">ascii</span>
</pre></div>
<pre class="literal-block">
[72, 101, 108, 108, 111]
</pre>
<p>The <tt class="docutils literal">sum()</tt> function takes any iterable that produces numbers.</p>
<div class="highlight"><pre><span class="nb">sum</span><span class="p">(</span><span class="n">ascii</span><span class="p">)</span>
</pre></div>
<pre class="literal-block">
500
</pre>
<p>The <tt class="docutils literal">str.join()</tt> method takes any iterable that produces strings.</p>
<div class="highlight"><pre><span class="s">&quot;-&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</pre></div>
<pre class="literal-block">
'a-c-b'
</pre>
<p>Iterables can produce any python object.  The <tt class="docutils literal">re.finditer()</tt> function returns an iterable that produces <tt class="docutils literal">re.match</tt> objects.</p>
<div class="highlight"><pre><span class="k">import</span> <span class="nn">re</span>
<span class="n">suzuki</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;suzuki.txt&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
<span class="k">for</span> <span class="n">match</span> <span class="ow">in</span> <span class="n">re</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="s">r&#39;\bs\w+&#39;</span><span class="p">,</span> <span class="n">suzuki</span><span class="p">):</span>
    <span class="k">print</span> <span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mf">0</span><span class="p">)</span>
</pre></div>
<pre class="literal-block">
serious
science
skepticism
system
</pre>
</div>
<div class="section" id="id3">
<span id="a-classic-iterable-class"></span><h1><a class="reference internal" href="#a-classic-iterable-class">A &quot;classic&quot; iterable class</a></h1>
<p>Very old versions of Python supported iteration through the <tt class="docutils literal">__getitem__()</tt> method, and this is still supported.</p>
<div class="highlight"><pre><span class="k">class</span> <span class="nc">Lucky</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">index</span> <span class="o">&gt;</span> <span class="mf">3</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">IndexError</span>
        <span class="k">return</span> <span class="mf">7</span>
</pre></div>
<p><tt class="docutils literal">Lucky</tt> is a class that will return <tt class="docutils literal">7</tt> for any index less than or equal to <tt class="docutils literal">3</tt>:</p>
<div class="highlight"><pre><span class="n">lucky</span> <span class="o">=</span> <span class="n">Lucky</span><span class="p">()</span>

<span class="n">lucky</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span>
</pre></div>
<pre class="literal-block">
7
</pre>
<p>And raise an <tt class="docutils literal">IndexError</tt> for larger indexes:</p>
<div class="highlight"><pre><span class="n">lucky</span><span class="p">[</span><span class="mf">6</span><span class="p">]</span>
</pre></div>
<pre class="literal-block">
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
/home/ian/git/iterables-iterators-generators/&lt;ipython-input-15-5c0a87559915&gt; in &lt;module&gt;()
----&gt; 1 lucky[6]

/home/ian/git/iterables-iterators-generators/&lt;ipython-input-13-bd578dbfbead&gt; in __getitem__(self, index)
      2     def __getitem__(self, index):
      3         if index &gt; 3:
----&gt; 4             raise IndexError
      5         return 7

IndexError:
</pre>
<p>This is a perfectly well-behaved python iterable.  We can loop over it:</p>
<div class="highlight"><pre><span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="n">lucky</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">number</span>
</pre></div>
<pre class="literal-block">
7
7
7
7
</pre>
<p>Or pass it to functions that take iterables:</p>
<div class="highlight"><pre><span class="nb">list</span><span class="p">(</span><span class="n">lucky</span><span class="p">)</span>
</pre></div>
<pre class="literal-block">
[7, 7, 7, 7]
</pre>
<p>Even the <tt class="docutils literal">in</tt> operator works with it:</p>
<div class="highlight"><pre><span class="mf">7</span> <span class="ow">in</span> <span class="n">lucky</span>
</pre></div>
<pre class="literal-block">
True
</pre>
<p>But writing this sort of class it difficult.
You need to be able to return a value for any index passed to <tt class="docutils literal">__getitem__()</tt> but most
of the time you really only want to produce items in order from first to last.</p>
<p>Enter &quot;Iterators&quot;.</p>
</div>
<div class="section" id="id5">
<span id="iterators"></span><h1><a class="reference internal" href="#iterators">Iterators</a></h1>
<p>The naming is confusingly similar here, but it's important to understand the difference
between <em>iterables</em> and <em>iterators</em>.</p>
<p>Iterators are iterables with some kind of 'position' state and a <tt class="docutils literal">.next()</tt> method.
The <tt class="docutils literal">.next()</tt> method may be called to produce the next item and update the internal state.</p>
<p>Iterables are objects that produce an iterator when they are passed to the <tt class="docutils literal">iter()</tt> builtin.</p>
<img alt="Iterators are Iterables with .next()" src="https://raw.github.com/wardi/iterables-iterators-generators/master/iterable_iterator.png" />
<p>Calling <tt class="docutils literal">iter()</tt> on our &quot;classic&quot; iterable object produces a plain <tt class="docutils literal">iterator</tt> instance</p>
<div class="highlight"><pre><span class="n">i</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">lucky</span><span class="p">)</span>
<span class="n">i</span>
</pre></div>
<pre class="literal-block">
&lt;iterator at 0x288cc10&gt;
</pre>
<p>This plain <tt class="docutils literal">iterator</tt> has a counter and the original object as its internal state.
Calling <tt class="docutils literal">.next()</tt> advances the counter and calls our &quot;classic&quot; iterable's <tt class="docutils literal">.__getitem__()</tt> method.</p>
<div class="highlight"><pre><span class="k">print</span> <span class="n">i</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
<span class="k">print</span> <span class="n">i</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
<span class="k">print</span> <span class="n">i</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
<span class="k">print</span> <span class="n">i</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</pre></div>
<pre class="literal-block">
7
7
7
7
</pre>
<p>When we get to the end however, our <tt class="docutils literal">IndexError</tt> exception is turned into a <tt class="docutils literal">StopIteration</tt>
exception.  This is the iterator protocol: when <tt class="docutils literal">.next()</tt> raises <tt class="docutils literal">StopIteration</tt> there are
no more items to be produced.</p>
<div class="highlight"><pre><span class="k">print</span> <span class="n">i</span><span class="o">.</span><span class="n">next</span><span class="p">()</span> <span class="c"># raises StopIteration, *not* IndexError</span>
</pre></div>
<pre class="literal-block">
---------------------------------------------------------------------------
StopIteration                             Traceback (most recent call last)
/home/ian/git/iterables-iterators-generators/&lt;ipython-input-21-b3e04e043095&gt; in &lt;module&gt;()
----&gt; 1 print i.next() # raises StopIteration, *not* IndexError

StopIteration:
</pre>
<p>Remember that an iterator <em>is</em> an iterable, so it can be passed to anything that takes
an iterable.</p>
<p>Be careful, though.  Iterators may only be iterated over once, since they are updating
their internal state as they go.  If we try to iterate twice, the second time will produce
no more items:</p>
<div class="highlight"><pre><span class="n">i</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">lucky</span><span class="p">)</span>
<span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</pre></div>
<pre class="literal-block">
[7, 7, 7, 7]
[]
</pre>
<p>Calling on <tt class="docutils literal">iter()</tt> on an iterable will produce a different iterator object each time.</p>
<div class="highlight"><pre><span class="n">i</span> <span class="ow">is</span> <span class="nb">iter</span><span class="p">(</span><span class="n">lucky</span><span class="p">)</span>
</pre></div>
<pre class="literal-block">
False
</pre>
<p>Also, like other iterables, calling <tt class="docutils literal">iter()</tt> on an iterator works, but it behaves differently!</p>
<p>Calling <tt class="docutils literal">iter()</tt> on an iterator typically returns the exact same iterator.
If you think about it, that's all that can be done because
you can't rewind or duplicate an iterator in the general case.</p>
<div class="highlight"><pre><span class="n">i</span> <span class="ow">is</span> <span class="nb">iter</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</pre></div>
<pre class="literal-block">
True
</pre>
<p>Iterators come in all shapes and sizes.</p>
<p><tt class="docutils literal">xrange()</tt> has a <tt class="docutils literal">rangeiterator</tt>:</p>
<div class="highlight"><pre><span class="nb">iter</span><span class="p">(</span><span class="nb">xrange</span><span class="p">(</span><span class="mf">20</span><span class="p">))</span>
</pre></div>
<pre class="literal-block">
&lt;rangeiterator at 0x2896900&gt;
</pre>
<p><tt class="docutils literal">dict</tt> has a <tt class="docutils literal"><span class="pre">dictionary-keyiterator</span></tt>:</p>
<div class="highlight"><pre><span class="nb">iter</span><span class="p">({</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="mf">1</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="mf">2</span><span class="p">})</span>
</pre></div>
<pre class="literal-block">
&lt;dictionary-keyiterator at 0x2894aa0&gt;
</pre>
<p><tt class="docutils literal">list</tt> doesn't even use the plain <tt class="docutils literal">iterator</tt> type, and instead uses its own more efficient <tt class="docutils literal">listiterator</tt>:</p>
<div class="highlight"><pre><span class="nb">iter</span><span class="p">([</span><span class="mf">4</span><span class="p">,</span> <span class="mf">5</span><span class="p">,</span> <span class="mf">6</span><span class="p">])</span>
</pre></div>
<pre class="literal-block">
&lt;listiterator at 0x28973d0&gt;
</pre>
<p>And some have names that provide no clue what they iterate over:</p>
<div class="highlight"><pre><span class="n">re</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="s">r&#39;\bs\w+&#39;</span><span class="p">,</span> <span class="s">&quot;some text with swords&quot;</span><span class="p">)</span>
</pre></div>
<pre class="literal-block">
&lt;callable-iterator at 0x28971d0&gt;
</pre>
</div>
<div class="section" id="id7">
<span id="a-better-iterable-class"></span><h1><a class="reference internal" href="#a-better-iterable-class">A better iterable class</a></h1>
<p>You can choose the iterator that will be returned by <tt class="docutils literal">iter()</tt> by defining your own
<tt class="docutils literal">.__iter__()</tt> method:</p>
<div class="highlight"><pre><span class="k">class</span> <span class="nc">Countdown</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c"># must return an iterator!</span>
        <span class="k">return</span> <span class="nb">iter</span><span class="p">([</span><span class="mf">5</span><span class="p">,</span> <span class="mf">4</span><span class="p">,</span> <span class="mf">3</span><span class="p">,</span> <span class="mf">2</span><span class="p">,</span> <span class="mf">1</span><span class="p">,</span> <span class="s">&#39;launch&#39;</span><span class="p">])</span>
</pre></div>
<p>The <tt class="docutils literal">for</tt> loop and other places that take iterables internally use <tt class="docutils literal">iter()</tt>, which calls our new
<tt class="docutils literal">.__iter__()</tt> method to create an iterator:</p>
<div class="highlight"><pre><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">Countdown</span><span class="p">():</span>
    <span class="k">print</span> <span class="n">n</span>
</pre></div>
<pre class="literal-block">
5
4
3
2
1
launch
</pre>
</div>
<div class="section" id="id9">
<span id="iterators-the-hard-way"></span><h1><a class="reference internal" href="#iterators-the-hard-way">Iterators the hard way</a></h1>
<p>The example above is fine if we want to reuse an existing iterator
(like the <tt class="docutils literal">listiterator</tt> above), but what if we want to write a new iterator?</p>
<p>We know the protocol, so one approach is to just implement it:</p>
<div class="highlight"><pre><span class="k">class</span> <span class="nc">CountdownIterator</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_remaining</span> <span class="o">=</span> <span class="p">[</span><span class="mf">5</span><span class="p">,</span> <span class="mf">4</span><span class="p">,</span> <span class="mf">3</span><span class="p">,</span> <span class="mf">2</span><span class="p">,</span> <span class="mf">1</span><span class="p">,</span> <span class="s">&#39;launch&#39;</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">_remaining</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">StopIteration</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_remaining</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mf">0</span><span class="p">)</span>
</pre></div>
<p>Our internal 'position' state is a list of items we pop
one at a time when <tt class="docutils literal">.next()</tt> is called.
We implement <tt class="docutils literal">.__iter__()</tt> in the normal way for an iterator: <tt class="docutils literal">&quot;return self&quot;</tt>.
We raise <tt class="docutils literal">StopIteration</tt> when we have nothing left to produce.</p>
<p>This works as expected, but it's rather a lot of code for a simple result.</p>
<div class="highlight"><pre><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">CountdownIterator</span><span class="p">():</span>
    <span class="k">print</span> <span class="n">n</span>
</pre></div>
<pre class="literal-block">
5
4
3
2
1
launch
</pre>
</div>
<div class="section" id="id11">
<span id="generators"></span><h1><a class="reference internal" href="#generators">Generators</a></h1>
<p>A generator function is a simpler way to create an iterator.</p>
<p>Generator functions let you use local
variables and the position of the program counter as state for
a generator object.  A new generator object is created and returned
each time you call a generator function.  The generator object is an iterator.</p>
<img alt="Generators are Iterators created with a generator function or expression" src="https://raw.github.com/wardi/iterables-iterators-generators/master/iterable_iterator_generator.png" />
<p>Here is a generator function that <em>only</em> uses the program counter for state:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">countdown_generator</span><span class="p">():</span>
    <span class="k">yield</span> <span class="mf">5</span>
    <span class="k">yield</span> <span class="mf">4</span>
    <span class="k">yield</span> <span class="mf">3</span>
    <span class="k">yield</span> <span class="mf">2</span>
    <span class="k">yield</span> <span class="mf">1</span>
    <span class="k">yield</span> <span class="s">&#39;launch&#39;</span>
</pre></div>
<p>When we call the generator function it does nothing except create a new generator object.
None of the code in the generator function has been executed yet.</p>
<div class="highlight"><pre><span class="n">countdown_generator</span><span class="p">()</span>
</pre></div>
<pre class="literal-block">
&lt;generator object countdown_generator at 0x289d0f0&gt;
</pre>
<p>As the generator object is iterated over execution starts,
following the generator function definition until the next <tt class="docutils literal">yield</tt> statement.</p>
<p>When it reaches the <tt class="docutils literal">yield</tt> statement execution is paused (the program counter is stored)
and the value on the right of the <tt class="docutils literal">yield</tt> statement is produced as a value from the
generator object.  Execution is resumed from the stored program counter position when
iteration continues.</p>
<p>When the generator function reaches the end, the generator raises a <tt class="docutils literal">StopIteration</tt>
exception just like a normal iterator.  And it behaves just like a normal iterator:</p>
<div class="highlight"><pre><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">countdown_generator</span><span class="p">():</span>
    <span class="k">print</span> <span class="n">n</span>
</pre></div>
<pre class="literal-block">
5
4
3
2
1
launch
</pre>
<p>Now we have a much more concise way of defining our own iterator for an iterable class.
The <tt class="docutils literal">.__iter__()</tt> method of our class can be written as a generator function:</p>
<div class="highlight"><pre><span class="k">class</span> <span class="nc">Countdown</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="p">[</span><span class="mf">5</span><span class="p">,</span> <span class="mf">4</span><span class="p">,</span> <span class="mf">3</span><span class="p">,</span> <span class="mf">2</span><span class="p">,</span> <span class="mf">1</span><span class="p">,</span> <span class="s">&#39;launch&#39;</span><span class="p">]:</span>
            <span class="k">yield</span> <span class="n">n</span>
</pre></div>
<div class="highlight"><pre><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">Countdown</span><span class="p">():</span>
    <span class="k">print</span> <span class="n">n</span>
</pre></div>
<pre class="literal-block">
5
4
3
2
1
launch
</pre>
<p>But, enough about classes.  Let's dig further into how these generators work.</p>
<p>Recall that execution of the code in a generator function does not proceed until
the generator object returned is iterated over.  That lets us put things in a generator
that might be expensive, knowing that we will only have to pay that cost when we actually
ask it to produce the next item.</p>
<p>This generator causes a for loop to slow down between iterations.  First waiting 5 seconds,
then counting down from &quot;5&quot; to &quot;1&quot; with 1 seconds intervals in between:</p>
<div class="highlight"><pre><span class="k">import</span> <span class="nn">time</span>

<span class="k">def</span> <span class="nf">slow_generator</span><span class="p">():</span>
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">5</span><span class="p">)</span>
    <span class="k">yield</span> <span class="mf">5</span>
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">1</span><span class="p">)</span>
    <span class="k">yield</span> <span class="mf">4</span>
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">1</span><span class="p">)</span>
    <span class="k">yield</span> <span class="mf">3</span>
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">1</span><span class="p">)</span>
    <span class="k">yield</span> <span class="mf">2</span>
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">1</span><span class="p">)</span>
    <span class="k">yield</span> <span class="mf">1</span>
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">1</span><span class="p">)</span>

<span class="k">print</span> <span class="s">&quot;starting&quot;</span>
<span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">slow_generator</span><span class="p">():</span>
    <span class="k">print</span> <span class="n">n</span>
<span class="k">print</span> <span class="s">&quot;done&quot;</span>
</pre></div>
<pre class="literal-block">
starting
5
4
3
2
1
done
</pre>
<p>Another way of writing this code is to turn the generator inside-out.</p>
<p>Instead of sleeping inside the generator we can <tt class="docutils literal">yield</tt>
the amount of time we want to sleep.
And instead of <tt class="docutils literal">yield</tt>-ing the countdown we can use a function passed in to
display values to the user.</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">countdown_generator</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
    <span class="k">yield</span> <span class="mf">5</span>
    <span class="n">fn</span><span class="p">(</span><span class="mf">5</span><span class="p">)</span>
    <span class="k">yield</span> <span class="mf">1</span>
    <span class="n">fn</span><span class="p">(</span><span class="mf">4</span><span class="p">)</span>
    <span class="k">yield</span> <span class="mf">1</span>
    <span class="n">fn</span><span class="p">(</span><span class="mf">3</span><span class="p">)</span>
    <span class="k">yield</span> <span class="mf">1</span>
    <span class="n">fn</span><span class="p">(</span><span class="mf">2</span><span class="p">)</span>
    <span class="k">yield</span> <span class="mf">1</span>
    <span class="n">fn</span><span class="p">(</span><span class="mf">1</span><span class="p">)</span>
    <span class="k">yield</span> <span class="mf">1</span>
</pre></div>
<p>A <tt class="docutils literal">show()</tt> function takes the place of the print inside the loop, and the <tt class="docutils literal">time.sleep()</tt>
call is done by the code iterating over the generator.  This puts the code driving the
generator in charge of how (or if) it sleeps for the given time.</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">print</span> <span class="n">n</span>

<span class="k">print</span> <span class="s">&quot;starting&quot;</span>
<span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">countdown_generator</span><span class="p">(</span><span class="n">show</span><span class="p">):</span>
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&quot;done&quot;</span>
</pre></div>
<pre class="literal-block">
starting
5
4
3
2
1
done
</pre>
</div>
<div class="section" id="id13">
<span id="generators-as-coroutines"></span><h1><a class="reference internal" href="#generators-as-coroutines">Generators as coroutines</a></h1>
<p>While a generator object is an iterator, it can also be used for much more.</p>
<p>When paused at a <tt class="docutils literal">yield</tt> statement generator objects can receive data by
using <tt class="docutils literal">.send()</tt> instead of <tt class="docutils literal">.next()</tt>.</p>
<p>When we use <tt class="docutils literal">yield</tt> as an expression or assign it to a variable, the value
passed to <tt class="docutils literal">.send()</tt> is available inside the generator.</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">knock_knock</span><span class="p">():</span>
    <span class="n">name</span> <span class="o">=</span> <span class="k">yield</span> <span class="s">&quot;Who&#39;s there?&quot;</span>
    <span class="k">yield</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s"> who?&quot;</span> <span class="o">%</span> <span class="n">name</span>
    <span class="k">yield</span> <span class="s">&quot;That&#39;s not funny at all&quot;</span>
</pre></div>
<p>We have to switch to manually calling <tt class="docutils literal">.next()</tt> on our generator object, because a
<tt class="docutils literal">for</tt> loop or function that takes an iterable won't be able to call <tt class="docutils literal">.send()</tt> when
we need to.</p>
<div class="highlight"><pre><span class="n">k</span> <span class="o">=</span> <span class="n">knock_knock</span><span class="p">()</span>
<span class="n">k</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</pre></div>
<pre class="literal-block">
&quot;Who's there?&quot;
</pre>
<p>At this point execution is paused at the first <tt class="docutils literal">yield</tt>.  The assignment to the variable
<tt class="docutils literal">name</tt> hasn't happened yet.  But when we <tt class="docutils literal">.send()</tt> a value execution continues:</p>
<div class="highlight"><pre><span class="n">k</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;David&quot;</span><span class="p">)</span>
</pre></div>
<pre class="literal-block">
'David who?'
</pre>
<p>And in the generator object we are at the second <tt class="docutils literal">yield</tt> with <tt class="docutils literal">&quot;David&quot;</tt> assigned to <tt class="docutils literal">name</tt>.</p>
<p>If we send something to a <tt class="docutils literal">yield</tt> that isn't being used as an expression, the value we send
will be ignored:</p>
<div class="highlight"><pre><span class="n">k</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;David the environmentalist&quot;</span><span class="p">)</span>
</pre></div>
<pre class="literal-block">
&quot;That's not funny at all&quot;
</pre>
<p>But execution continues the same as if we called <tt class="docutils literal">.next()</tt>.</p>
<p>This is the end of part 1.</p>
<p>In <a class="reference external" href="http://excess.org/article/2013/02/itergen2/">part 2</a> we build a simple interactive network game with 90% of the code written as
generators.  I will show how breaking down asynchronous code into generators can make
it easy to test, easy to reuse, and (with some practice) easy to understand.</p>
</div>
</div>
<p><span class="tagh">Tags: </span><span class="sbut"><a href="/tag/ottawa/">Ottawa</a></span> <span class="sbut"><a href="/tag/software/">Software</a></span> <span class="sbut"><a href="/tag/python/">Python</a></span> <span class="sbut"><a href="/tag/opag/">OPAG</a></span></p>
</div>
</div>



<br clear="left">
<div class="smll"></div>
</body>
</html>
