<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title>Unfortunate Python - excess.org</title>

<link rel="stylesheet" type="text/css" href="/media/xs.css" media="all">
<link rel="stylesheet" type="text/css" href="/media/xs_print.css" media="print">
<link rel="shortcut icon" href="/favicon.ico" type="image/vnd.microsoft.icon">

<!--[if lt IE 7]>
<script defer type="text/javascript" src="/media/pngfix.js"></script>
<style type="text/css">
    .bgover {background-image: none;}
</style>
<![endif]-->



</head>
  <body>
<a href="/"><img title="excess.org" alt="excess.org" height="70" width="600" src="/media/strut.gif" class="topstrut"></a>

<br>

<div class="lcol">
<h1 style="margin: 0 0 1ex 6px;">Ian Ward</h1>

<div class="bgover">
<div class="colh">Consulting</div>
<a href="http://boxkite.ca">Boxkite Inc.</a>
</div>

<div class="bgover" style="margin-top: 6px;">
<div class="colh">Software</div>

<div class="proj">
<a href="http://ckan.org/"><img src="/media/ckan.png" alt="CKAN" title="CKAN"></a>
<span class="smll">contributor/tech lead</span>
</div>

<div class="proj">
<a href="http://pyrf.org/"><img src="/media/pyrf.png" alt="PyRF" title="PyRF"></a></a>
<span class="smll">primary contributor</span>
</div>

<div class="proj">
<a href="http://urwid.org/"><img src="/media/urwid.png" alt="Urwid" title="Urwid"></a>
<span class="smll">author</span>
</div>

<div class="proj">
<a href="/speedometer/"><img alt="Speedometer" title="Speedometer" src="/media/speedometer.png"></a>
<span class="smll">author</span>
</div>

<div class="proj">
<a href="/article/2007/10/xterm-256-colour-chart-20/">xterm colour chart</a>
</div>
<div class="proj">
<a href="/old-projects/">old projects</a>
</div>
<hr/>
<div class="colh">Presentations</div>

<div class="proj">
<a href="/article/2014/05/iasa-esummit/">Contributing to Open Source</a><br>
<span class="smll">IASA E-Summit, 2014-05-16</span>
</div>
<div class="proj">
<a href="/article/2012/11/urwid-applications-pycon-canada/">Urwid Applications</a><br>
<span class="smll">2012-11-14</span>
</div>
<div class="proj">
<a href="/article/2012/01/urwid-python-malaysia/">Urwid Intro</a><br>
<span class="smll">2012-01-22</span>
</div>
<div class="proj">
<a href="/article/2011/12/unfortunate-python/">Unfortunate Python</a><br>
<span class="smll">2011-12-19</span>
</div>
<div class="proj">
<a href="/article/2011/06/python-3-argument-sketch-slides/">Python 3, the Argument Sketch</a><br>
<span class="smll">2011-06-14</span>
</div>
<div class="proj">
<a href="/article/2010/04/nontrivial-django-forms-talk-text/">Nontrivial Django Forms</a><br>
<span class="smll">2010-04-16</span>
</div>
<div class="proj">
<a href="/article/2009/05/django-1-1-talk-text/">Django 1.1</a><br>
<span class="smll">2009-05-16</span>
</div>


<hr/>
<div class="colh">Writing</div>

<div class="proj">
<a href="http://lwn.net/Articles/426906/">Moving to Python 3</a><br>
<span class="smll">2011-02-17</span>
</div>
<div class="proj">
<a href="http://lwn.net/Articles/328487/">Alternatives to SQL Databases</a><br>
<span class="smll">2009-04-16</span>
</div>
<div class="proj">
<a href="http://lwn.net/Articles/293692/">Audio Streaming over Bluetooth</a><br>
<span class="smll">2008-08-15</span>
</div>
<div class="proj">
<a href="http://lwn.net/Articles/291803/">MARS and Cell processor</a><br>
<span class="smll">2008-07-31</span>
</div>
<div class="proj">
<a href="/writing/">Printing with Debian and Windows Mini-HOWTO</a><br>
<span class="smll">2009-03-08 (1.7)</span>
</div>

</div>

<div class="bgover" style="margin-top: 6px; margin-bottom: 15px;">
<div class="colh">Article Tags</div>
<div class="proj" style="line-height: 1.5em;">
<span class="sbut"><a href="/tag/django/">Django</a></span> <span class="sbut"><a href="/tag/templayer/">Templayer</a></span> <span class="sbut"><a href="/tag/urwid/">Urwid</a></span> <span class="sbut"><a href="/tag/ottawa/">Ottawa</a></span> <span class="sbut"><a href="/tag/cycling/">Cycling</a></span> <span class="sbut"><a href="/tag/oclug/">OCLUG</a></span> <span class="sbut"><a href="/tag/ols/">OLS</a></span> <span class="sbut"><a href="/tag/site-news/">Site News</a></span> <span class="sbut"><a href="/tag/mailman/">Mailman</a></span> <span class="sbut"><a href="/tag/php/">PHP</a></span> <span class="sbut"><a href="/tag/hardware/">Hardware</a></span> <span class="sbut"><a href="/tag/software/">Software</a></span> <span class="sbut"><a href="/tag/speedometer/">Speedometer</a></span> <span class="sbut"><a href="/tag/video/">Video</a></span> <span class="sbut"><a href="/tag/linux/">Linux</a></span> <span class="sbut"><a href="/tag/git/">Git</a></span> <span class="sbut"><a href="/tag/python/">Python</a></span> <span class="sbut"><a href="/tag/lwn/">LWN.net</a></span> <span class="sbut"><a href="/tag/fosslc/">FOSSLC</a></span> <span class="sbut"><a href="/tag/opag/">OPAG</a></span> <span class="sbut"><a href="/tag/games/">Games</a></span> <span class="sbut"><a href="/tag/ipv6/">IPv6</a></span>
</div>
</div>

<p>
<a href="/">Home</a>
</p>

<div class="smll">
<p>
Ian Ward's email:<br /> 
first name at this domain
</p>
<p>
<tt>wardi</tt> on OFTC, freenode and
<a href="https://github.com/wardi/">github</a>
</p>
</div>

<a href="http://www3.clustrmaps.com/counter/maps.php?url=http://excess.org" id="clustrMapsLink"><img src="http://www3.clustrmaps.com/counter/index2.php?url=http://excess.org" style="border:0px;" alt="Locations of visitors to this page" title="Locations of visitors to this page" id="clustrMapsImg" onError="this.onError=null; this.src='http://www2.clustrmaps.com/images/clustrmaps-back-soon.jpg'; document.getElementById('clustrMapsLink').href='http://www2.clustrmaps.com'" />
</a>

</div>


<div class="mcol" style="padding-bottom: 0; margin-bottom: -3px;">
<h1 style="margin: 0 0 1ex 6px;">Unfortunate Python</h1>
</div>


<div class="mcol">
<div class="bgover">

<div class="date">Posted on 2011-12-19, last modified 2012-04-09.</div>
<div class="document">


<style> .red {color:red} </style><p>Python is a wonderful language, but some parts should really have bright <span class="red">WARNING</span> signs all over them.   There are features that just can't be used safely and others are that are useful but people tend to use in the wrong ways.</p>
<p>This is a rough transcript of the talk I gave at <a class="reference external" href="http://opag.ca">my local Python group</a> on November 15, with some of the audience feed back mixed in.  Most of this came from hanging around the Python IRC channel, something I highly recommend.</p>
<p><em>[update 2011-12-19: improved &quot;array&quot; critique, add &quot;python -i&quot; suggestion to &quot;reload&quot; critique, add html targets to sections]</em></p>
<p><em>[update 2011-12-20: include additional links from agentultra and ffrinch]</em></p>
<p><em>[update 2012-01-06: added hasattr and find]</em></p>
<p><em>[update 2012-04-09: some links and syntax highlighting]</em></p>
</div>
<div class="document">


<hr class="docutils">
<div class="section" id="easy-stuff-first">
<span id="deprecated"></span><h1><a class="reference internal" href="http://excess.org/article/2011/12/unfortunate-python/#deprecated">Easy Stuff First</a></h1>
<p>Starting with the non-controversial: Anything that has been marked deprecated should be avoided.  The deprecation warning should have instructions with safe alternatives you can use.</p>
<p>Some of the most frequent offenders are parts of the language that make it difficult to safely call other programs:</p>
<div class="highlight"><pre><span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">()</span>

<span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">()</span>

<span class="k">import</span> <span class="nn">commands</span>
</pre></div>
<p>We have the excellent <a class="reference external" href="http://docs.python.org/library/subprocess.html">subprocess</a> module for these now, use it.</p>
<hr class="docutils">
</div>
<div class="section" id="ducks-in-a-row">
<span id="isinstance"></span><h1><a class="reference internal" href="http://excess.org/article/2011/12/unfortunate-python/#isinstance">Ducks in a Row</a></h1>
<p>Explicitly checking the type of a parameter passed to a function breaks the expected duck-typing convention of Python.  Common type checking includes:</p>
<div class="highlight"><pre><span class="nb">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">X</span><span class="p">)</span>

<span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="n">X</span>
</pre></div>
<p>With <tt class="docutils literal">type()</tt> being the worse of the two.</p>
<p>If you must have different behaviour for different types of objects passed, try treating the object as the first data type you expect, and catching the failure if that type wasn't that type, and then try the second. This allows users to create objects that are close enough to the types you expect and still use your code.</p>
<p>See also <a class="reference external" href="http://www.canonical.org/~kragen/isinstance/">isinstance() considered harmful</a>.</p>
<hr class="docutils">
</div>
<div class="section" id="not-really-a-vegetable">
<span id="pickle"></span><h1><a class="reference internal" href="http://excess.org/article/2011/12/unfortunate-python/#pickle">Not Really a Vegetable</a></h1>
<div class="highlight"><pre><span class="k">import</span> <span class="nn">pickle</span> <span class="c"># or cPickle</span>
</pre></div>
<p>Objects serialized with pickle are tied to their implementations in the code at that time.  Restoring an object after an underlying class has changed will lead to undefined behaviour.  Unserializing pickled data from an untrusted source can lead to remote exploits.  The pickled data itself is opaque binary that can't be easily edited or reviewed.</p>
<p>This leaves only one place where pickle makes sense -- short lived data being passed between processes, just like what the <a class="reference external" href="http://docs.python.org/dev/library/multiprocessing.html">multiprocessing</a> module does.</p>
<p>Anywhere else use a different format.  Use a database or use JSON with a well-defined structure.  Both are restricted to simple data types and are easily verified or updated outside of your Python script.</p>
<hr class="docutils">
</div>
<div class="section" id="toys-are-for-children">
<span id="asyncore"></span><h1><a class="reference internal" href="http://excess.org/article/2011/12/unfortunate-python/#asyncore">Toys are for Children</a></h1>
<p>Many people are drawn to these modules because they are part of Python's standard library.  Some people even try to do serious work with them.</p>
<div class="highlight"><pre><span class="k">import</span> <span class="nn">asyncore</span>

<span class="k">import</span> <span class="nn">asynchat</span>

<span class="k">import</span> <span class="nn">SimpleHTTPServer</span>
</pre></div>
<p>The former resembles a reasonable asynchronous library, until you find out there are no timers.  At all.  Use <a class="reference external" href="http://twistedmatrix.com/">Twisted</a> or <a class="reference external" href="http://www.tornadoweb.org/">Tornado</a> instead.</p>
<p>The latter makes for a neat demo by letting giving you a web server in your pocket with the one command <cite>python -m SimpleHTTPServer</cite>.  But this code was never intended for production use, and certainly not designed to be run as a public web server.  There are plenty of real, hardened web servers out there that will run your python code as a WSGI script.  Choose one of them instead.</p>
<hr class="docutils">
</div>
<div class="section" id="foreign-concepts">
<span id="array"></span><h1><a class="reference internal" href="http://excess.org/article/2011/12/unfortunate-python/#array">Foreign Concepts</a></h1>
<div class="highlight"><pre><span class="k">import</span> <span class="nn">array</span>
</pre></div>
<p>All the flexibility and ease of use of C arrays, now in Python!</p>
<p>If you really <em>really</em> need this you will know.  Interfacing with C code in an extension module is one valid reason.</p>
<p>If you're looking for speed, try just using regular python lists with <a class="reference external" href="http://pypy.org/">PyPy</a> .  Another good choice is <a class="reference external" href="http://numpy.scipy.org/">NumPy</a> for its much more capable arrays types.</p>
<hr class="docutils">
<a name="__del__"></a></div>
<div class="section" id="can-t-be-trusted">
<span id="del"></span><h1><a class="reference internal" href="http://excess.org/article/2011/12/unfortunate-python/#del">Can't be Trusted</a></h1>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">__del__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</pre></div>
<p>The mere existence of this method makes objects that are part of a reference cycle uncollectable by Python's garbage collector and could lead to memory leaks.</p>
<p>Use a <tt class="docutils literal">weakref.ref</tt> object with a callback to run code when an object is being removed instead.</p>
<p>See also <a class="reference external" href="http://docs.python.org/library/gc.html#gc.garbage">Python gc module documentation</a></p>
<hr class="docutils">
</div>
<div class="section" id="split-personality">
<span id="reload"></span><h1><a class="reference internal" href="http://excess.org/article/2011/12/unfortunate-python/#reload">Split Personality</a></h1>
<div class="highlight"><pre><span class="nb">reload</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</pre></div>
<p>It looks like the code you just changed is there, except the old versions of everything is still there too.  Objects created before the reload will still use the code as it was when they were created, leading to situations with interesting effects that are almost impossible to reproduce.</p>
<p>Just re-run your program.  If you're debugging at the interactive prompt consider debugging with a small script and <tt class="docutils literal">python <span class="pre">-i</span></tt> instead.</p>
<hr class="docutils">
</div>
<div class="section" id="almost-reasonable">
<span id="copy"></span><h1><a class="reference internal" href="http://excess.org/article/2011/12/unfortunate-python/#copy">Almost Reasonable</a></h1>
<div class="highlight"><pre><span class="k">import</span> <span class="nn">copy</span>
</pre></div>
<p>The copy module is harmless enough when used on objects that you create and you fully understand.  The problem is once you get in the habit of using it, you might be tempted to use it on objects passed to you by code you don't control.</p>
<p>Copying arbitrary objects is troublesome because you will often copy too little or too much.  If this object has a reference to an external resource it's unclear what copying that even means.  It can also easily lead to subtle bugs introduced into your code by a change outside your code.</p>
<p>If you need a copy of a list or a dict, use <tt class="docutils literal">list()</tt> or <tt class="docutils literal"><span class="pre">dict()``because</span> you can be sure what you will get after they are called.&nbsp; ``copy()</tt>, however might return anything, and that <em>should</em> scare you.</p>
<hr class="docutils">
<a name="__name__"></a></div>
<div class="section" id="admit-you-always-hated-it">
<span id="name"></span><h1><a class="reference internal" href="http://excess.org/article/2011/12/unfortunate-python/#name">Admit You Always Hated It</a></h1>
<div class="highlight"><pre><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
</pre></div>
<p>This little wart has long been a staple of many python introductions.  It lets you treat a python script as a module, or a module as a python script.  Clever, sure, but it's better to keep your scripts and modules separate in the first place.</p>
<p>If you treat a module like a script, then something imports the module you're in trouble: now you have two copies of everything in that module.</p>
<p>I have used this trick to make running tests easier, but setuptools already provides a better hook for running tests.  For scripts setuptools has an answer too, just give it a name and a function to call, and you're done.</p>
<p>My last criticism is that a single line of python should never be 10 alphanumeric characters and 13 punctuation characters.  All those underscores are there as a warning that some special non-obvious language-related thing is going on, and it's not even necessary.</p>
<p>See also <a class="reference external" href="http://packages.python.org/distribute/setuptools.html#automatic-script-creation">setuptools/distribute automatic script creation</a></p>
<p>and also <a class="reference external" href="http://www.python.org/dev/peps/pep-0366/">PEP 366</a> pointed out by <a class="reference external" href="http://news.ycombinator.com/item?id=3373550">agentultra on HN</a></p>
<hr class="docutils">
</div>
<div class="section" id="don-t-emulate-stdlib">
<span id="namedtuple"></span><h1><a class="reference internal" href="http://excess.org/article/2011/12/unfortunate-python/#namedtuple">Don't Emulate stdlib</a></h1>
<p>It's in standard library, it must be well written, right?</p>
<p>May I present the implementation of namedtuple, which is really handy little class that used properly can significantly improve your code's readability.</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">namedtuple</span><span class="p">(</span><span class="n">typename</span><span class="p">,</span> <span class="n">field_names</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">rename</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="c"># Parse and validate the field names.  Validation serves two purposes,</span>
    <span class="c"># generating informative error messages and preventing template injection attacks.</span>
</pre></div>
<p>Wait, what?  "<tt class="docutils literal">preventing template injection attacks</tt>"?</p>
<p>This is followed by 27 lines of code that validates field_names.  And then:</p>
<div class="highlight"><pre><span class="n">template</span> <span class="o">=</span> <span class="s">'''class </span><span class="si">%(typename)s</span><span class="s">(tuple):</span>
<span class="s">   '</span><span class="si">%(typename)s</span><span class="s">(</span><span class="si">%(argtxt)s</span><span class="s">)' </span><span class="se">\n</span><span class="s"></span>
<span class="s">   __slots__ = () </span><span class="se">\n</span><span class="s"></span>
<span class="s">   _fields = %(field_names)r </span><span class="se">\n</span><span class="s"></span>
<span class="s">   def __new__(_cls, </span><span class="si">%(argtxt)s</span><span class="s">):</span>
<span class="s">       'Create new instance of </span><span class="si">%(typename)s</span><span class="s">(</span><span class="si">%(argtxt)s</span><span class="s">)'</span>
<span class="s">       return _tuple.__new__(_cls, (</span><span class="si">%(argtxt)s</span><span class="s">)) </span><span class="se">\n</span><span class="s"></span>
<span class="s">   @classmethod</span>
<span class="s">   def _make(cls, iterable, new=tuple.__new__, len=len):</span>
<span class="s">       'Make a new </span><span class="si">%(typename)s</span><span class="s"> object from a sequence or iterable'</span>
<span class="s">       result = new(cls, iterable)</span>
<span class="s">       if len(result) != </span><span class="si">%(numfields)d</span><span class="s">:</span>
<span class="s">       raise TypeError('Expected </span><span class="si">%(numfields)d</span><span class="s"> arguments, got </span><span class="si">%%</span><span class="s">d' </span><span class="si">%%</span><span class="s"> len(result))</span>
<span class="s">       return result </span><span class="se">\n</span><span class="s"></span>
<span class="s">   def __repr__(self):</span>
<span class="s">       'Return a nicely formatted representation string'</span>
<span class="s">       return '</span><span class="si">%(typename)s</span><span class="s">(</span><span class="si">%(reprtxt)s</span><span class="s">)' </span><span class="si">%%</span><span class="s"> self </span><span class="se">\n</span><span class="s"></span>
<span class="s">   def _asdict(self):</span>
<span class="s">       'Return a new OrderedDict which maps field names to their values'</span>
<span class="s">       return OrderedDict(zip(self._fields, self)) </span><span class="se">\n</span><span class="s"></span>
<span class="s">   __dict__ = property(_asdict) </span><span class="se">\n</span><span class="s"></span>
<span class="s">   def _replace(_self, **kwds):</span>
<span class="s">       'Return a new </span><span class="si">%(typename)s</span><span class="s"> object replacing specified fields with new values'</span>
<span class="s">       result = _self._make(map(kwds.pop, %(field_names)r, _self))</span>
<span class="s">       if kwds:</span>
<span class="s">           raise ValueError('Got unexpected field names: </span><span class="si">%%</span><span class="s">r' </span><span class="si">%%</span><span class="s"> kwds.keys())</span>
<span class="s">       return result </span><span class="se">\n</span><span class="s"></span>
<span class="s">   def __getnewargs__(self):</span>
<span class="s">       'Return self as a plain tuple.  Used by copy and pickle.'</span>
<span class="s">       return tuple(self) </span><span class="se">\n\n</span><span class="s">'''</span> <span class="o">%</span> <span class="nb">locals</span><span class="p">()</span>
</pre></div>
<p>Yes, that's a class definition in a big Python string, filled with variables from <tt class="docutils literal">locals()</tt>.  The result is then <tt class="docutils literal">exec</tt> -ed in the right namespace, and some further magic is applied to "fix" <tt class="docutils literal">copy()</tt> and <tt class="docutils literal">pickle()</tt>.</p>
<p>I believe this code was meant some sort of warning to people that would contribute code to Python --  something like "We make it look like we know what we're doing, but we're really just nuts"  (love ya Raymond)</p>
<p>See also <a class="reference external" href="http://hg.python.org/cpython/file/2.7/Lib/collections.py">collections.py source code</a></p>
<p>and also <a class="reference external" href="http://bugs.python.org/issue3974">an attempted fix</a> pointed out by <a class="reference external" href="http://www.reddit.com/r/Python/comments/nj00d/unfortunate_python_a_bunch_of_things_to_avoid_now/c39l15b">ffrinch on reddit</a></p>
<hr class="docutils">
</div>
<div class="section" id="trying-too-hard">
<span id="hasattr"></span><h1><a class="reference internal" href="http://excess.org/article/2011/12/unfortunate-python/#hasattr">Trying Too Hard</a></h1>
<div class="highlight"><pre><span class="nb">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">'foo'</span><span class="p">)</span>
</pre></div>
<p><tt class="docutils literal">hasattr()</tt> has always been defined to swallow <em>all</em> exceptions, even ones you might be interested in (such as a <tt class="docutils literal">KeyboardInterrupt</tt>) and turn them into a <tt class="docutils literal">False</tt> return value.  This interface just can't be fixed, use <tt class="docutils literal">getattr()</tt> with a sentinel value instead.</p>
<hr class="docutils">
</div>
<div class="section" id="off-by-one">
<span id="find"></span><h1><a class="reference internal" href="http://excess.org/article/2011/12/unfortunate-python/#find">Off by One</a></h1>
<div class="highlight"><pre><span class="s">'hello'</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">'H'</span><span class="p">)</span>
</pre></div>
<p><tt class="docutils literal">str.find()</tt> and <tt class="docutils literal">str.rfind()</tt> return <tt class="docutils literal"><span class="pre">-1</span></tt> on failure.  This can lead to some really hard to find bugs when combined with containers like strings that treat <tt class="docutils literal"><span class="pre">-1</span></tt> as the last element.  Use <tt class="docutils literal">str.index()</tt> and <tt class="docutils literal">str.rindex()</tt> instead.</p>
</div>
<p><span class="tagh">Tags: </span><span class="sbut"><a href="/tag/ottawa/">Ottawa</a></span> <span class="sbut"><a href="/tag/software/">Software</a></span> <span class="sbut"><a href="/tag/python/">Python</a></span> <span class="sbut"><a href="/tag/opag/">OPAG</a></span></p>
</div>
</div>



<br clear="left">
<div class="smll"></div>
</body>
</html>
