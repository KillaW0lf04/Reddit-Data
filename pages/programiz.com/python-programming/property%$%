<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="shortlink" href="http://programiz.com/node/375" />
<link rel="shortcut icon" href="http://programiz.com/sites/tutorial2program/files/favicon.ico" type="image/vnd.microsoft.icon" />
<link rel="canonical" href="http://programiz.com/python-programming/property" />
<meta name="generator" content="Drupal 7 (http://drupal.org)" />
<meta content="Python Property" about="/python-programming/property" property="dc:title" />
<meta name="description" content="Property is a pretty solid concept, a must for object oriented programmer. Learn what they are, how they work and when do we require them in Python." />
  <title>Python Property</title>
<!--[if lt IE 9]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->
<link href='http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic,300,300italic' rel='stylesheet' type='text/css'>
  <link type="text/css" rel="stylesheet" href="http://programiz.com/sites/tutorial2program/files/css/css_pbm0lsQQJ7A7WCCIMgxLho6mI_kBNgznNUWmTWcnfoE.css" media="all" />
<link type="text/css" rel="stylesheet" href="http://programiz.com/sites/tutorial2program/files/css/css_d9fH9PUWTFFU6oJ8Kt4iP9-ofwJenFm_94AUlm6Kaq4.css" media="all" />
<link type="text/css" rel="stylesheet" href="http://programiz.com/sites/tutorial2program/files/css/css_MnXiytJtb186Ydycnpwpw34cuUsHaKc80ey5LiQXhSY.css" media="all" />
<link type="text/css" rel="stylesheet" href="http://programiz.com/sites/tutorial2program/files/css/css_xLjNEIN77oJU43CXpsNjTJ1PBpQ1rQ60Obt6VixmyPo.css" media="all" />
<link type="text/css" rel="stylesheet" href="http://programiz.com/sites/tutorial2program/files/css/css_6j_kM_lFBpjKiiMCcWiOeu7BL5nIp-9slDeauzjyeCM.css" media="screen" />
  <script type="text/javascript" src="http://programiz.com/sites/tutorial2program/files/js/js_xAPl0qIk9eowy_iS9tNkCWXLUVoat94SQT48UBCFkyQ.js"></script>
<script type="text/javascript" src="http://programiz.com/sites/tutorial2program/files/js/js_rv_BKYv7yieH0IgHddhWHDC-bWGan8yiJbusyOpr0mw.js"></script>
<script type="text/javascript">
<!--//--><![CDATA[//><!--
var _gaq = _gaq || [];_gaq.push(["_setAccount", "UA-36675496-1"]);_gaq.push(["_trackPageview"]);(function() {var ga = document.createElement("script");ga.type = "text/javascript";ga.async = true;ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";var s = document.getElementsByTagName("script")[0];s.parentNode.insertBefore(ga, s);})();
//--><!]]>
</script>
<script type="text/javascript" src="http://programiz.com/sites/tutorial2program/files/js/js_XRh2_nyfCXzgO3wpSGIajJWsr8nab42ruFVafQxPfmA.js"></script>
<script type="text/javascript">
<!--//--><![CDATA[//><!--
jQuery.extend(Drupal.settings, {"basePath":"\/","pathPrefix":"","ajaxPageState":{"theme":"programiz","theme_token":"09gUenBvjMpHEf5ht8KimMyXHFoIygaFdaDaDnVde4k","js":{"sites\/all\/libraries\/prettify\/src\/prettify.js":1,"sites\/all\/modules\/prettify\/prettify.loader.js":1,"misc\/jquery.js":1,"misc\/jquery.once.js":1,"misc\/drupal.js":1,"sites\/all\/modules\/google_analytics\/googleanalytics.js":1,"0":1,"sites\/all\/themes\/programiz\/programiz.js":1},"css":{"modules\/system\/system.base.css":1,"modules\/system\/system.menus.css":1,"modules\/system\/system.messages.css":1,"modules\/system\/system.theme.css":1,"modules\/aggregator\/aggregator.css":1,"modules\/field\/theme\/field.css":1,"sites\/all\/modules\/mollom\/mollom.css":1,"modules\/node\/node.css":1,"modules\/user\/user.css":1,"sites\/all\/modules\/views\/css\/views.css":1,"sites\/all\/modules\/ctools\/css\/ctools.css":1,"sites\/all\/themes\/programiz\/programiz.css":1,"sites\/all\/libraries\/prettify\/src\/prettify.css":1}},"prettify":{"linenums":false,"match":".content","nocode":"nocode","custom":[],"markup":{"precode":true,"code":false,"pre":false}},"googleanalytics":{"trackOutbound":1,"trackMailto":1,"trackDownload":1,"trackDownloadExtensions":"7z|aac|arc|arj|asf|asx|avi|bin|csv|doc|exe|flv|gif|gz|gzip|hqx|jar|jpe?g|js|mp(2|3|4|e?g)|mov(ie)?|msi|msp|pdf|phps|png|ppt|qtm?|ra(m|r)?|sea|sit|tar|tgz|torrent|txt|wav|wma|wmv|wpd|xls|xml|z|zip"}});
//--><!]]>
</script>
</head>
<body class="html not-front not-logged-in no-sidebars page-node page-node- page-node-375 node-type-python" >
  <div id="skip-link">
    <a href="#main-content" class="element-invisible element-focusable">Skip to main content</a>
  </div>
    <!-- Header starts -->
<header id="pageHeader" class="cf" role="banner">
<div class="headerWrapper">
<div class="headerContent cf"> <a href="/" title="Home" >Programming Tutorials, Articles and Examples</a>
</div>

</header>
<!-- Header end -->

<!-- Main Navigation starts-->
<nav id="mainNav" role="navigation">
<h2>Main Menu</h2><ul class="expand"><li class="menu-227 first"><a href="/">Home</a></li>
<li class="menu-633"><a href="/c-programming">C Programming</a></li>
<li class="menu-568"><a href="/cpp-programming" title="C++ Programming Tutorial">C++</a></li>
<li class="menu-1647 last"><a href="/python-programming" title="Python Programming Tutorial">Python</a></li>
</ul></nav>
<!-- Main Navigation ends-->

<!-- Fixed navigation slide starts
<div class="fixedNav cf">
  <div class="fixWrapper">
    <div class="fixLogo">Programiz Logo</div>
    <ul class="fixSocial">
      <li><a href="https://www.facebook.com/sharer/sharer.php?u=http://programiz.com/python-programming/property">Share on Facebook</a></li>
      <li><a href="https://twitter.com/share?url=http://programiz.com/python-programming/property">Share on Twitter</a></li>
    </ul>
  </div>
</div> -->

<article id="main" role="main">
  
<div id="content">
	
<!-- Content Top Starts -->	
	<!-- Content Top Ends -->	

    
<!-- Main Content Starts-->
    <section class="mainContent">
	            <h1>Python Property</h1>                
        	<div class="contentInside">
	    	  <div class="region region-content-inside">
      
    <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- programiz (new) -->
<ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-9007421361448641"
     data-ad-slot="8228194420"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>  </div>
 	</div>
				
	 	<div class="tabs"></div>	    		       	  <div class="region region-content">
      
    <div id="node-375" class="node node-python clearfix" about="/python-programming/property" typeof="sioc:Item foaf:Document">
       
  <div class="content">
    <div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even" property="content:encoded"><p>Python has a great concept called <b>property</b>, which makes the life of an object oriented programmer much simpler. Before defining and going into details of what a property in Python is, let us first build an intuition on why it would be needed in the first place.</p><h2>An Example To Begin With</h2><p>Let us assume that one day you decide to make a class that could store the temperature in degree Celsius. It would also implement a method to convert the temperature into degree Fahrenheit. One way of doing this is as follows.</p>
<pre><code>class Celsius:
    def __init__(self, temperature = 0):
        self.temperature = temperature

    def to_fahrenheit(self):
        return (self.temperature * 1.8) + 32</code></pre>
<p>We could make objects out of this class and manipulate the attribute <code>temperature</code>, as we wished.</p>
<pre><code>&gt;&gt;&gt; # create new object
&gt;&gt;&gt; man = Celsius()

&gt;&gt;&gt; # set temperature
&gt;&gt;&gt; man.temperature = 37

&gt;&gt;&gt; # get temperature
&gt;&gt;&gt; man.temperature
37

&gt;&gt;&gt; # get degrees Fahrenheit
&gt;&gt;&gt; man.to_fahrenheit()
98.60000000000001</code></pre>
<p>The extra decimal places when converting into Fahrenheit is due to the floating point arithmetic error (try 1.1 + 2.2 in the Python interpreter). Whenever we assign or retrieve any object attribute like <code>temperature</code>, as show above, Python searches it in the object's <code>__dict__</code> dictionary.</p>
<pre><code>&gt;&gt;&gt; man.__dict__
{'temperature': 37}</code></pre>
<p>Therefore, <code>man.temperature</code> internally becomes <code>man.__dict__['temperature']</code>.</p><p>Now, let's further assume that our class got popular among clients and they started using it in their programs. They did all kinds of assignments to the object. One faithful day, a trusted client came to us and suggested that temperatures cannot go below -273 degree Celsius (students of thermodynamics might argue that it's actually -273.15), also called the absolute zero. He further asked us to implement this value constraint. Being a company that strive for customer satisfaction, we happily heeded the suggestion and released version 1.01, an upgrade of our existing class.</p><h2>Using Getters and Setters</h2><p>An obvious solution to the above constraint will be to hide the attribute <code>temperature</code> (make it private) and define new getter and setter interfaces to manipulate it. This can be done as follows.</p>
<pre><code>class Celsius:
    def __init__(self, temperature = 0):
        self.set_temperature(temperature)

    def to_fahrenheit(self):
        return (self.get_temperature() * 1.8) + 32

    # new update
    def get_temperature(self):
        return self._temperature

    def set_temperature(self, value):
        if value &lt; -273:
            raise ValueError("Temperature below -273 is not possible")
        self._temperature = value</code></pre>
<p>We can see above that new methods <code>get_temperature()</code> and <code>set_temperature()</code> were defined and furthermore, <code>temperature</code> was replaced with <code>_temperature</code>. An underscore (_) at the beginning is used to denote private variables in Python.</p>
<pre><code>&gt;&gt;&gt; c = Celsius(-277)
Traceback (most recent call last):
...
ValueError: Temperature below -273 is not possible

&gt;&gt;&gt; c = Celsius(37)
&gt;&gt;&gt; c.get_temperature()
37
&gt;&gt;&gt; c.set_temperature(10)

&gt;&gt;&gt; c.set_temperature(-300)
Traceback (most recent call last):
...
ValueError: Temperature below -273 is not possible</code></pre>
<p>This update successfully implemented the new restriction. We are no longer allowed to set temperature below -273.</p><p>Please note that private variables don't exist in Python. There are simply norms to be followed. The language itself don't apply any restrictions.</p>
<pre><code>&gt;&gt;&gt; c._temperature = -300
&gt;&gt;&gt; c.get_temperature()
-300</code></pre>
<p>But this is not of great concern. The big problem with the above update is that, all the clients who implemented our previous class in their program have to modify their code from <code>obj.temperature</code> to <code>obj.get_temperature()</code> and all assignments like <code>obj.temperature = val</code> to <code>obj.set_temperature(val)</code>. This refactoring can cause headaches to the clients with hundreds of thousands of lines of codes.</p><p>All in all, our new update was not backward compatible. This is where property comes to rescue.</p><h2>The Power of Property</h2><p>The pythonic way to deal with the above problem is to use property. Here is how we could have achieved it.</p>
<pre><code>class Celsius:
    def __init__(self, temperature = 0):
        self.temperature = temperature

    def to_fahrenheit(self):
        return (self.temperature * 1.8) + 32

    def get_temperature(self):
        print("Getting value")
        return self._temperature

    def set_temperature(self, value):
        if value &lt; -273:
            raise ValueError("Temperature below -273 is not possible")
        print("Setting value")
        self._temperature = value

    temperature = property(get_temperature,set_temperature)</code></pre>
<p>We added a <code>print()</code> function inside <code>get_temperature()</code> and <code>set_temperature()</code> to clearly observe that they are being executed. The last line of the code, makes a property object <code>temperature</code>. Simply put, property attaches some code (<code>get_temperature</code> and <code>set_temperature</code>) to the member attribute accesses (<code>temperature</code>). Any code that retrieves the value of <code>temperature</code> will automatically call <code>get_temperature()</code> instead of a dictionary (__dict__) look-up. Similarly, any code that assigns a value to <code>temperature</code> will automatically call <code>set_temperature()</code>. This is one cool feature in Python. Let's see it in action.</p>
<pre><code>&gt;&gt;&gt; c = Celsius()
Setting value</code></pre>
<p>We can see above that <code>set_temperature()</code> was called even when we created an object. Can you guess why? The reason is that when an object is created, <code>__init__()</code> method gets called. This method has the line <code>self.temperature = temperature</code>. This assignment automatically called <code>set_temperature()</code>.</p>
<pre><code>&gt;&gt;&gt; c.temperature
Getting value
0</code></pre>
<p>Similarly, any access like <code>c.temperature</code> automatically calls <code>get_temperature()</code>. This is what property does. Here are a few more examples.</p>
<pre><code>&gt;&gt;&gt; c.temperature = 37
Setting value

&gt;&gt;&gt; c.to_fahrenheit()
Getting value
98.60000000000001</code></pre>
<p>By using property, we can see that, we modified our class and implemented the value constraint without any change required to the client code. Thus our implementation was backward compatible and everybody is happy.</p><p>Finally note that, the actual temperature value is stored in the private variable <code>_temperature</code>. The attribute <code>temperature</code> is a property object which provides interface to this private variable.</p><h2>Digging Deeper into Property</h2><p>In Python, <code>property()</code> is a built-in function that creates and returns a property object. The signature of this function is</p>
<pre><code>property(fget=None, fset=None, fdel=None, doc=None)</code></pre>
<p>where, <code>fget</code> is function to get value of the attribute, <code>fset</code> is function to set value of the attribute, <code>fdel</code> is function to delete the attribute and <code>doc</code> is a string (like a comment). As seen from the implementation, these function arguments are optional. So, a property object can simply be created as follows.</p>
<pre><code>&gt;&gt;&gt; property()
&lt;property object at 0x0000000003239B38&gt;</code></pre>
<p>A property object has three methods, <code>getter()</code>, <code>setter()</code>, and <code>delete()</code> to specify <code>fget</code>, <code>fset</code> and <code>fdel</code> at a later point. This means, the line</p>
<pre><code>temperature = property(get_temperature,set_temperature)</code></pre>
<p>could have been broken down as</p>
<pre><code># make empty property
temperature = property()
# assign fget
temperature = temperature.getter(get_temperature)
# assign fset
temperature = temperature.setter(set_temperature)</code></pre>
<p>These two pieces of codes are equivalent.</p><p>Programmers familiar with <a href="http://www.programiz.com/python-programming/decorator">decorators in Python</a> can recognize that the above construct can be implemented as decorators. We can further go on and not define names <code>get_temperature</code> and <code>set_temperature</code> as they are unnecessary and pollute the class namespace. For this, we reuse the name <code>temperature</code> while defining our getter and setter functions. This is how it can be done.</p>
<pre><code>class Celsius:
    def __init__(self, temperature = 0):
        self._temperature = temperature

    def to_fahrenheit(self):
        return (self.temperature * 1.8) + 32

    @property
    def temperature(self):
        print("Getting value")
        return self._temperature

    @temperature.setter
    def temperature(self, value):
        if value &lt; -273:
            raise ValueError("Temperature below -273 is not possible")
        print("Setting value")
        self._temperature = value</code></pre>
<p>The above implementation is both, simple and recommended way to make properties. You will most likely encounter these types of constructs when looking for property in Python.</p><p>Well that's it for today.</p></div></div></div>	
</div>


</div>
  </div>
       	    </section>
<!-- Main Content Ends-->

<!-- Content Bottom Starts -->
    <div class="mainBottom">
	    	  <div class="region region-content-bottom">
      
    <div id="bottomAds"><script id="mNCC" language="javascript">  medianet_width='600';  medianet_height= '250';  medianet_crid='741538144';  </script>  <script id="mNSC" src="http://contextual.media.net/nmedianet.js?cid=8CU166D9L" language="javascript"></script></div>  </div>
    </div>

<!-- Content Bottom Ends -->
  </div>

<!-- Left sidebar Starts -->
  <aside id="sidebar" role="complementary">
      <div class="region region-sidebar-left">
      
    <nav role="navigation"><h2>Python Tutorial</h2><ul class="topMenu"><li><h3>Python Introduction</h3><ul class="subMenu"><li><a href="http://www.programiz.com/python-programming/keywords-identifier">Keywords and Identifier</a></li><li><a href="http://www.programiz.com/python-programming/statement-indentation-comments">Statements&nbsp;&amp; Comments</a></li><li><a href="http://www.programiz.com/python-programming/variables-datatypes">Python &nbsp;Datatypes</a></li><li><a href="http://www.programiz.com/python-programming/input-output-import">Python I/O and Import</a></li><li><a href="http://www.programiz.com/python-programming/operators">Python Operators</a></li></ul></li><li><h3>Python Flow Control</h3><ul class="subMenu"><li><a href="http://www.programiz.com/python-programming/if-elif-else" title="Python if, else and elif">Python if...else</a></li><li><a href="http://www.programiz.com/python-programming/for-loop" title="Python for Loop">Python for Loop</a></li><li><a href="http://www.programiz.com/python-programming/while-loop" title="Python while Loop">Python while Loop</a></li><li><a href="http://www.programiz.com/python-programming/break-continue" title="Python break and continue">Python break and continue</a></li><li><a href="http://www.programiz.com/python-programming/pass-statement" title="Python Pass Statement">Python Pass</a></li><li><a href="http://www.programiz.com/python-programming/looping-technique" title="Looping Technique">Looping&nbsp;Technique</a></li></ul></li><li><h3>Python Functions</h3><ul class="subMenu"><li><a href="http://www.programiz.com/python-programming/function" title="Functions in Python Programming">Python Function</a></li><li><a href="http://www.programiz.com/python-programming/function-argument" title="Function Argument in Python">Function Argument</a></li><li><a href="http://www.programiz.com/python-programming/recursion" title="Recursive Function in Python">Python Recursion</a></li><li><a href="http://www.programiz.com/python-programming/anonymous-function" title="Anonymous Function in Python">Anonymous&nbsp;Function</a></li><li><a href="http://www.programiz.com/python-programming/modules" title="Modules in Python Programming">Python Modules</a></li><li><a href="http://www.programiz.com/python-programming/package" title="Package in Python Programming">Python Package</a></li></ul></li><li><h3>Python Native Datatypes</h3><ul class="subMenu"><li><a href="http://www.programiz.com/python-programming/numbers" title="Numbers in Python Programming">Python Numbers</a></li><li><a href="http://www.programiz.com/python-programming/list" title="List in Python Programming">Python List</a></li><li><a href="http://www.programiz.com/python-programming/tuple" title="Tuple in Python Programming">Python Tuple</a></li><li><a href="http://www.programiz.com/python-programming/string" title="String in Python Programming">Python String</a></li><li><a href="http://www.programiz.com/python-programming/set" title="Set in Python Programming">Python Set</a></li><li><a href="http://www.programiz.com/python-programming/dictionary" title="Dictionary in Python Programming">Python Dictionary</a></li></ul></li><li><h3>Python Files</h3><ul class="subMenu"><li><a href="http://www.programiz.com/python-programming/file-operation">Python File Operation</a></li><li><a href="http://www.programiz.com/python-programming/directory">Python Directory</a></li><li><a href="http://www.programiz.com/python-programming/exceptions">Python Exception</a></li><li><a href="http://www.programiz.com/python-programming/exception-handling">Exception Handling</a></li><li><a href="http://www.programiz.com/python-programming/user-defined-exception">User-defined Exception</a></li></ul></li><li><h3>Python Object &amp; Class</h3><ul class="subMenu"><li><a href="http://www.programiz.com/python-programming/namespace" title="Python Programming Namespace">Python Namespace</a></li><li><a href="http://www.programiz.com/python-programming/class" title="Python Programming Class">Python Class</a></li><li><a href="http://www.programiz.com/python-programming/inheritance" title="Python Programming Inheritance">Python Inheritance</a></li><li><a href="http://www.programiz.com/python-programming/multiple-inheritance" title="Multiple Inheritance in Python">Multiple Inheritance</a></li><li><a href="http://www.programiz.com/python-programming/operator-overloading" title="Python Operator Overloading">Operator Overloading</a></li></ul></li><li><h3>Additional Topics</h3><ul class="subMenu"><li><a href="http://www.programiz.com/python-programming/iterator">Python Iterator</a></li><li><a href="http://www.programiz.com/python-programming/generator">Python Generator</a></li><li><a href="http://www.programiz.com/python-programming/closure">Python Closure</a></li><li><a href="http://www.programiz.com/python-programming/decorator" title="Decorators in Python">Python Decorators</a></li><li><a href="http://www.programiz.com/python-programming/property" title="Python programming property">Python Property</a></li><li><a href="http://www.programiz.com/python-programming/examples" title="Source code of Python">Python Examples</a></li></ul></li></ul></nav>  
    <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- medium rectangle latest -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:250px"
     data-ad-client="ca-pub-9007421361448641"
     data-ad-slot="3518793228"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>  
    <section class="social"><h2>Connect With Us</h2><ul><li><a class="facebook" href="http://wwww.facebook.com/programiz">Facebook </a></li><li><a class="twitter" href="http://twitter.com/programiz">Twitter</a></li><li><a class="google" href="https://plus.google.com/+Programiz-official" title="Google+ Programiz Page">Google+</a></li></ul></section>  
    <script id="mNCC" language="javascript">  medianet_width='300';  medianet_height= '250';  medianet_crid='167641353';  </script>  <script id="mNSC" src="http://contextual.media.net/nmedianet.js?cid=8CU166D9L" language="javascript"></script>   
    <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 300 * 600 (sidebar bottom) -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:600px"
     data-ad-client="ca-pub-9007421361448641"
     data-ad-slot="6773310825"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>  </div>
  </aside>
<!-- Left sidebar Ends -->

<!-- Footer Right and Footer Left Starts-->
  <div class="bottom cf">
	</div>
<!-- Footer Right and Footer Left Ends-->
</article>

<footer id="footer">



  <div class="footerContent"> <a href="http://www.programiz.com" class="footerLogo">Programiz - Programming Tutorial</a>
    <ul class="navFooter">
      <li><a href="http://www.programiz.com/about-us">About Us</a></li>
      <li><a href="http://www.programiz.com/contact">Contact Us</a></li>
      <li><a href="http://www.programiz.com/articles">Articles</a></li>
      <li><a href="http://www.programiz.com/advertising">Advertise With Us</a></li>
    </ul>
  </div>
  <div class="copyRight" role="contentinfo">
    <p>Copyright © by Programiz | All rights reserved | <a href="http://www.programiz.com/privacy-policy">Privacy Policy</a></p>
  </div>
</footer>  <script type="text/javascript" src="http://programiz.com/sites/tutorial2program/files/js/js_p4XrdhRxUcPvVFVqUZka6H428DAuEmMbYhsMEYf4Zok.js"></script>
<script type="text/javascript" src="http://programiz.com/sites/tutorial2program/files/js/js_RSIUCcrmRUFMf95PjTZVGDL8QH9jNpz8LNaNofgcAAc.js"></script>

</body>
</html>
