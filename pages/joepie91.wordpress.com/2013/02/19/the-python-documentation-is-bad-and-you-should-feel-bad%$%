<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <title>The Python documentation is bad, and you should feel bad. - joepie91's Ramblings</title>
        <meta name="viewport" content="width=device-width">

        <!-- syntax highlighting CSS -->
        <link rel="stylesheet" href="http://cryto.net/~joepie91/blog/css/syntax.css">

        <!-- Custom CSS -->
        <link rel="stylesheet" href="http://cryto.net/~joepie91/blog/css/main.css">

    </head>
    <body>

        <div class="site">
          <div class="header">
            <h1 class="title"><a href="http://cryto.net/~joepie91/blog/">joepie91's Ramblings</a></h1>
            <a class="extra" href="http://cryto.net/~joepie91/blog/">home</a>
            <a class="rss" href="http://cryto.net/~joepie91/blog/feed.xml">RSS</a>
          </div>

          <h2>The Python documentation is bad, and you should feel bad.</h2>
<p class="meta">19 Feb 2013</p>

<div class="post">
<p>Python is quite often hailed as a language that is great to learn programming, due to its simple and often natural-language-like syntax. But thereâs one big issue that many Python developers conveniently overlook: the documentation.</p>

<p>While PHP is no doubt a terribly inconsistent language that has some very bad language design, the documentation is, perhaps ironically, very good. It misses some information here and there, and even has some incorrect information in it, but overall itâs a very valuable learning resource - especially for people that are new to programming.</p>

<p>In this article, Iâll go into the most important differences between PHP and Python documentation, and how this is seriously affecting the adoption of Python.</p>

<p>Letâs start out with a simple example. Say you are a developer that just started using PHP, and you want to know how to get the current length of an array. You fire up a browser and Google for âPHP array length site:php.netâ. The first result is spot-on, and one minute later, you know that count($arr) will suffice.</p>

<p>Now letâs say that you wish to do the same in Python. In this case, you would Google for âPython list length site:docs.python.orgâ, and the first result is... a page with several chapters on standard types? Itâs entirely unclear how to get the length of a list, and youâll have to scan through a giant amount of text - even ctrl+F will not help you much here - to figure out this very basic operation. Five to ten minutes later, you know that len(lst) is how to do it.</p>

<p>Note that I have added domain restrictions to both queries, to limit the search to the official documentation - after all, that&#39;s what I am discussing here.</p>

<p>This example immediately shows the first issue with the Python documentation: the organization and resulting Googleability. As opposed to the PHP documentation - which is nicely segmented into separate pages for each function and concept - the Python documentation is written like a book, with chapters and paragraphs. Ever tried to look up the exact point where something happened in a novel? It doesn&#39;t work.</p>

<p>When you Google for something, you will end up on a page that explains a lot of things, <em>including</em> what youâre looking for. But how are you supposed to know where on the page it is, or whether itâs even on the page at all? The problem here is that the particular operation you are trying to find documentation on, does not have its own page.</p>

<p>I frequently bring up the above example in conversations with others about the Python documentation. A common response to that is âbut everyone knows how to get the length of a list, that doesnât need its own page!â But consider this: if the documentation doesnât explain how to use the language - especially the core components of it! - then what was the purpose of the documentation to start with? The whole <em>point</em> of the documentation is to explain things to people that do not understand them yet. Which brings us to the second issue...</p>

<h3>The Python community</h3>

<p><em>Update, February 19: Several people have pointed out that Python developers on Reddit and StackOverflow in particular do not really fit the following section, and I have to agree with that. This section refers primarily to communities that consist mostly of Python developers, and do not have a very distinct culture of their own. The two examples given by others - Reddit and StackOverflow - both have a very distinct and &#39;unusual&#39; atmosphere in general, also outside the Python subreddit/category.</em></p>

<p>I will no doubt piss off quite a few people with this statement, but the community around Python is one of the most hostile and unhelpful communities around any programming-related topic that I have <em>ever</em> seen - and with that I am not just referring to #python on Freenode, but to communities with a dense population of Python developers in general. This point actually consists of several separate attitudes and issues.</p>

<p>The general norm for the Python community appears to be that if you are not already familiar with the language, you do not deserve help. If you do something in a less-than-optimal way, other Python developers will shout about how horrible you are without bothering to explain much about what you did wrong. When you ask out of curiosity how a certain thing works, and that thing is considered a bad practice, you will get flamed like thereâs no tomorrow - even if you had no intention of ever implementing it.</p>

<p>Another issue are the very strong elements of fanboyism around various approaches and particular modules. Try asking any kind of question about sockets, and the standard response will be âuse Twistedâ. Try explaining why you do not wish to use Twisted, and no matter how valid the reason, the response will be along the lines of âuse Twisted anywayâ. And itâs not like these are some random people shouting stuff - no-one will even answer the question you asked in the first place, because everyone is too busy telling you to use Twisted.</p>

<p>But one issue in particular bothers me to no end: the assumption that source code is a reasonable replacement for documentation. The documentation on module X is bad? Just read the source. Want to know how the Python interpreter deals with input Y? Read the source. And so on, and so on.</p>

<p>Isnât the purpose of tools to make your job easier, and less time-consuming? Isnât the purpose of a higher level language to abstract away the lower level things you do not want to have to worry about? Then how is it acceptable to expect someone to invest large amounts of time into reading the source code of something to understand how to use it?</p>

<p>Would you expect a plumber to know the exact manufacturing process of his wrench?</p>

<p>But perhaps the biggest issue with the Python community is the ostrich mentality. All of the issues mentioned in this article so far - and all those that will be mentioned later on - are conveniently ignored, waved away, or justified by many Python developers whenever they are brought up. The âread the sourceâ mentality is, in fact, often a clear example of this ostrich mentality - instead of working on fixing the documentation, the lack of good documentation is justified by saying that âyou can read the source anywayâ.</p>

<h3>Incomplete documentation</h3>

<p>Letâs do an experiment. Think of a random function in a random standard library module in Python, visit its documentation entry, and try to find all the error conditions (return values, exceptions, when they happen, ...) without scrolling the page. Didnât work? Thatâs not very surprising.</p>

<p>The Python documentation is incomplete. While not always incomplete in the sense of not carrying all the information, itâs very often incomplete in the sense of not carrying information <em>in all the right places</em>. When you go to look up any function in any Python module, standard library or not, you should have an immediate overview of the accepted arguments, the return values, the error conditions, and when these occur.</p>

<p>Again, PHP shines here, having all of the above in a standardized format, for nearly every single function in PHP. To figure out the error conditions for a Python function, youâll first have to read the function description blurb, then scroll to the top of the chapter, the top of the page, the bottom of the chapter, and the bottom of the page - it may be in any of these places. If youâre very unlucky, the information is not on the page at all, and you have to either Google for it - or even try all permutations of input you can think of, in an interactive shell.</p>

<p>Error handling is important, that is pretty much universally accepted in the Python community. But if error handling is so important, why are you not giving people the tools and information to do so?</p>

<h3>The documentation is unclear</h3>

<p>Yet another problem. In many cases, the Python documentation is simply unclear. Natural language is ambiguous by nature - many sentences can be interpreted in more than one way. This is an absolutely deadly situation for documentation of a programming language, where you can blow up your entire project by doing one thing wrong.</p>

<p>PHP solves this by having examples for every single function and class. If youâre not sure what is meant with a certain sentence in the description, you just look at one of the included examples, and all ambiguity is removed. Itâs immediately obvious how to use things.</p>

<p>In the Python documentation, examples are extremely scarce. If examples are given at all, they are often incomplete, unclear, or lack initialization code or context. More examples are necessary.</p>

<h3>Why is all this important?</h3>

<p>Now, by the time youâve reached this point in the article, you may be thinking to yourself: âbut Iâm doing fine, I have no issues with the documentation as it is, youâre just whining!â</p>

<p>Think about this for a moment. If you are not only reading this article, but you are sufficiently pissed off by it to think something like this - does that not mean that you are already experienced enough not to <em>need</em> solid documentation? If you are an experienced developer, then you are most likely in a very bad position to judge how beginner-friendly the documentation for a language is.</p>

<p>On the one hand, the Python community is trying to actively âspreadâ the word, and is telling people that Python is âso easy to learnâ. On the other hand, both the documentation and the community are very newbie-hostile and unhelpful. Donât you see a problem with this?</p>

<p>If you wish more people would use Python, then start making it possible for them to do so. Restructure the documentation. Think twice about how you respond to a newbie. Respect someones reasons for wanting to do things themselves - as long as you inform them of the associated risks or problems, in an informative manner. Turn Python from a language that pretends to be beginner-friendly, into an actually beginner-friendly language.</p>

<p>Most of all, accept that your personal experiences with Python, as an experienced developer, are not worth very much. Listen to the newbies when they tell you the documentation is hard to read or find stuff in.</p>

<h3>No-one is fixing this</h3>

<p>Some of these problems are very obvious. Others are less obvious, but still exist. With the amount of issues in the Python documentation and community, youâd expect at least some kind of effort to be underway to fix these... but as far as I can determine, there is not a single person or group of people working on fixing these problems. Why not?</p>

<p>This issue will not solve itself. The only way this issue can be solved, is through a cooperative effort of any Python developer that can spare a few minutes. If even half of the experienced Python developers in the general Python community rewrote the documentation for one function or concept, we would have an absolutely golden documentation in less than a month.</p>

<p>Make it happen. Recognize that itâs broken, and fix it. Thatâs what developers do.</p>

<h4>tl;dr</h4>

<p>As this is a tl;dr, it does not include in-depth elaboration and just serves as an overview of the points made in this article. If you&#39;d like to respond to any of these points, please take the time to read the corresponding explanation above first, so you have a complete understanding of the point I am trying to make.</p>

<ul>
<li>The Python documentation is not divided into method- or class-specific pages, and as such is very hard to Google through.</li>
<li>The Python community appears to assume that documentation doesn&#39;t need information about core mechanisms in the language.</li>
<li>The community is generally unhelpful and hostile (save for Reddit and SO, generally). Beginners are often treated as unworthy of help.</li>
<li>The community has strong elements of fanboyism (Sockets? Use Twisted!)</li>
<li>&quot;Read the source&quot; is considered an alternative for documentation.</li>
<li>The documentation is incomplete (lack of error handling, return value, and parameter information).</li>
<li>The documentation is ambiguous (very few examples, unclear descriptions).</li>
</ul>

<p><strong>UPDATE:</strong>Â A reader requested that I provide an example of how the Python documentation could be improved. It took me a while to get around to it, but here goes - I&#39;ve decided to rewrite the documentation for os.path.walk() as an example. The original documentation can be found <a href="http://docs.python.org/2/library/os.path.html#os.path.walk">here</a>, my suggestion can be found <a href="http://cryto.net/%7Ejoepie91/walk.html">here</a>. My version is written using <a href="http://cryto.net/zippydoc">ZippyDoc</a>, the source of the documentation page can be found <a href="http://cryto.net/%7Ejoepie91/walk.zpy">here</a>.</p>

</div>

<div class="donate">
	<strong>Did you like this post?</strong> Consider donating! Any amount is welcome, no matter how small.
	<div class="buttons">
		<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
			<input type="hidden" name="cmd" value="_s-xclick">
			<input type="hidden" name="hosted_button_id" value="7V4CE97VK7GZ2">
			<input class="img" type="image" src="http://cryto.net/~joepie91/blog/attachments/paypal_button.png" border="0" name="submit">
		</form>
		<div class="flattr">
			<script id='fbt3rhq'>(function(i){var f,s=document.getElementById(i);f=document.createElement('iframe');f.src='//api.flattr.com/button/view/?uid=joepie91&button=compact&url='+encodeURIComponent(document.URL);f.title='Flattr';f.height=20;f.width=110;f.style.borderWidth=0;s.parentNode.insertBefore(f,s);})('fbt3rhq');</script>
		</div>
		<div class="bitcoin">
			<a href="bitcoin:1G4JG9oFPmpwzEmSH4gnLCdE8hBprdJuDG">
				<img src="http://cryto.net/~joepie91/blog/attachments/bitcoin_button.png">
				1G4JG9oFPmpwzEmSH4gnLCdE8hBprdJuDG
			</a>
		</div>
	</div>
</div>


          <div class="footer">
            <div class="contact">
              <p>
                Sven Slootweg (joepie91)<br />
                I do things on the internet.<br />
                admin@cryto.net
              </p>
            </div>
            <div class="contact">
              <p>
                <a href="http://cryto.net/~joepie91">cryto.net/~joepie91</a><br />
                <a href="https://github.com/joepie91">github.com/joepie91</a><br />
                <a href="https://twitter.com/joepie91">twitter.com/joepie91</a><br />
              </p>
            </div>
            <div class="subscribe">
                <p>
                    <form style="text-align: left; width: 270px; float: right;" action="http://feedburner.google.com/fb/a/mailverify" method="post" target="popupwindow" onsubmit="window.open('http://feedburner.google.com/fb/a/mailverify?uri=joepie91s-ramblings', 'popupwindow', 'scrollbars=yes,width=550,height=520');return true">
                        Enter your email to subscribe to new posts:<br>
                        <input type="text" style="width:140px" name="email"/>
                        <input type="hidden" value="joepie91s-ramblings" name="uri"/>
                        <input type="hidden" name="loc" value="en_US"/>
                        <input type="submit" value="Subscribe" /><br>
                        Delivered by <a href="http://feedburner.google.com" target="_blank">FeedBurner</a>
                    </form>
                </p>
            </div>
          </div>
        </div>

    </body>
</html>
