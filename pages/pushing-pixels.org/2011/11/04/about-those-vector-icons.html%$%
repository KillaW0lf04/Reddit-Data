<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">

<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<title>About those vector icons &middot;  Pushing Pixels</title>

<link rel="stylesheet" href="http://www.pushing-pixels.org/wp-content/themes/clean-home/reset.css" type="text/css" media="screen" />
<link rel="stylesheet" href="http://www.pushing-pixels.org/wp-content/themes/clean-home/style.css" type="text/css" media="screen" />
<script type="text/javascript">
	if (navigator.userAgent.indexOf("Windows") == -1) {
		document.write('<link rel="stylesheet" href="http://www.pushing-pixels.org/wp-content/themes/clean-home/mac.css" type="text/css" media="screen" />');
	}
</script>
<link href='http://www.pushing-pixels.org/fonts/fonts.css' rel='stylesheet' type='text/css'>
<!--[if IE]><link rel="stylesheet" href="http://www.pushing-pixels.org/wp-content/themes/clean-home/ie.css" type="text/css" media="screen" /><![endif]-->
<link rel="alternate" type="application/rss+xml" title="Pushing Pixels RSS Feed" href="http://www.pushing-pixels.org/feed" />
<link rel="pingback" href="http://www.pushing-pixels.org/xmlrpc.php" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes" />
<link rel="alternate" type="application/rss+xml" title="Pushing Pixels &raquo; About those vector icons Comments Feed" href="http://www.pushing-pixels.org/2011/11/04/about-those-vector-icons.html/feed" />
<link rel='stylesheet' id='yarppWidgetCss-css'  href='http://www.pushing-pixels.org/wp-content/plugins/yet-another-related-posts-plugin/style/widget.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.pushing-pixels.org/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<script type='text/javascript' src='//ajax.googleapis.com/ajax/libs/prototype/1.7.1.0/prototype.js?ver=1.7.1'></script>
<script type='text/javascript' src='//ajax.googleapis.com/ajax/libs/scriptaculous/1.9.0/scriptaculous.js?ver=1.9.0'></script>
<script type='text/javascript' src='//ajax.googleapis.com/ajax/libs/scriptaculous/1.9.0/effects.js?ver=1.9.0'></script>
<script type='text/javascript' src='http://www.pushing-pixels.org/wp-content/plugins/lightbox-2/lightbox.js?ver=1.8'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.pushing-pixels.org/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.pushing-pixels.org/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='Make it look pretty' href='http://www.pushing-pixels.org/2011/10/21/make-it-look-pretty.html' />
<link rel='next' title='Deep dive into responsive mobile design, part 1' href='http://www.pushing-pixels.org/2011/11/08/deep-dive-into-responsive-mobile-design-part-1.html' />
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.pushing-pixels.org/2011/11/04/about-those-vector-icons.html' />
<link rel='shortlink' href='http://www.pushing-pixels.org/?p=6465' />

	<!-- begin lightbox scripts -->
	<script type="text/javascript">
    //<![CDATA[
    document.write('<link rel="stylesheet" href="http://www.pushing-pixels.org/wp-content/plugins/lightbox-2/Themes/Black/lightbox.css" type="text/css" media="screen" />');
    //]]>
    </script>
	<!-- end lightbox scripts -->

</head>

<body>

<div id="wrapper">

	<div id="header">
		<div id="logo">
		<h1><a href="http://www.pushing-pixels.org">Pushing Pixels</a></h1>
		<h2>Leaving no pixel behind</h2>
		</div>
		<div id="nav">
					<div class="textwidget"><ul>
	<li class="navitem"><a href="http://www.pushing-pixels.org/inmotion">In Motion</a></li>
        <li class="navitem">|</li>
	<li class="navitem"><a href="http://www.pushing-pixels.org/atwork">At Work</a></li>
        <li class="navitem">|</li>
        <li class="navitem"><a href="http://www.pushing-pixels.org/terms">Terms</a></li>
        <li class="navitem">|</li>
        <li class="navitem"><a href="http://feeds.feedburner.com/pushingpixels">RSS</a></li>
</ul></div>
		<form role="search" method="get" id="searchform" class="searchform" action="http://www.pushing-pixels.org/">
				<div>
					<label class="screen-reader-text" for="s">Search for:</label>
					<input type="text" value="" name="s" id="s" />
					<input type="submit" id="searchsubmit" value="Search" />
				</div>
			</form>		</div>
	</div>


	<div id="content">

	
				
		<div class="post">
			<div class="posttime">November 4th, 2011</div>
			<h1><a href="http://www.pushing-pixels.org/2011/11/04/about-those-vector-icons.html">About those vector icons</a></h1>
			<p>Why can&#8217;t we just use vector-based icons in our application? This question, in a variety of reinterpretations, keeps on resurfacing in various forums, blogs and articles. It is asked in the context of desktop applications where the same icon is used in different ways, starting from very small 16*16 icons in file lists, up to 128*128 icons used on the dock and all the way to 512*512 icons that mostly serve to highlight the artistic capabilities of icon designers, at least until the computing world is taken over by 1200dpi desktop displays. It is also asked in the context of native mobile applications for the Android platform, where a single vector icon (in SVG format) is proposed as the replacement for multiple versions of the same icon, each optimized for the specific density bucket (usually medium and high).</p>
<p>At first glance, both designers and developers only stand to gain from switching to creating their icons in vector format. A designer is going to create a single version of the icon in his tool of choice, hand it off to the developer to add to the project structure, and have the runtime scale the combined shapes of the icon to whatever context it is used in &#8211; be it the small icons for the action bar, or an extra large icon for the &#8220;about&#8221; page. In fact, a lot of comments on the articles and blog posts referenced later in this entry indicate that this approach works quite well. At least, technically. And so, to summarize the feeling of discontent, Y U NO SVG?</p>
<p>A few days ago I invited one of our visual designers to lunch and asked him about the general process of creating icons for multiple screen resolutions (for the core Android experience). The answer was, at least to me, quite surprising. The first stage happens in a sketchbook or on a whiteboard, where different ideas, shapes and combinations are explored to find the iconography that works well within the overall direction of the platform, while still providing a distinctive shape and form for the specific action or object represented by the icon. Then the flow transitions to the computer, with Adobe Illustrator and Fireworks being the most popular choices. There, the designers create the &#8220;master&#8221; version of the icon - in a vector format. This version is scaled down to all target resolutions (medium, high, sometimes low and, most recently, extra high), and this is where the fun begins. This is where the designer looks at the scaled down version of the icon, for each resolution, and begins a sometimes painstaking process of pixel-perfecting the visuals.</p>
<p>There&#8217;s a lot of art and a lot of craft involved in creating and maintaining a consistent visual iconography language within the specific application, and across the entire platform. Lines should be sharp, rounded corners should have consistent curvature, lighting and gradients should have consistent direction and amplitude. In addition, icons at smaller resolutions should not have too much visual detail, while icons at higher resolutions should not feel too sparse. This is illustrated in the &#8220;<a onclick="javascript:pageTracker._trackPageview('/outgoing/www.firewheeldesign.com/sparkplug/2006/April/icon_design_bitmap_vs_vector.php');"  href="http://www.firewheeldesign.com/sparkplug/2006/April/icon_design_bitmap_vs_vector.php">Icon Design: Bitmap vs Vector</a>&#8221; article by Firewheel design:</p>
<p><img class="alignnone size-full wp-image-6467" title="" src="http://farm7.static.flickr.com/6095/6312477350_5f06b8b39c_m.jpg" alt="" width="240" height="160" /></p>
<p>The top row shows the hand-optimized versions of the same application icon at four different resolutions. The bottom row shows icons mathematically scaled from a single source. If you compare the relative sizes and detail complexity of various parts of the icons in the top row, you will see that they don&#8217;t scale at the same rate. Some parts grow linearly with the icon size, while some grow at a much slower rate. This is further illustrated in &#8220;<a onclick="javascript:pageTracker._trackPageview('/outgoing/mrgan.tumblr.com/post/708404794/ios-app-icon-sizes');"  href="http://mrgan.tumblr.com/post/708404794/ios-app-icon-sizes">All the sizes of iOS app icons</a>&#8221; by Neven Mrgan:</p>
<blockquote><p><strong>It’s simply not possible to create excellent, detailed icons which can be arbitrarily scaled to very small dimensions while preserving clarity.</strong> Small icons are caricatures: they exaggerate some features, drop others, and align shapes to a sharp grid. Even if all icons could be executed as vectors, the largest size would never scale down well.</p>
<p>Here’s the icon for the Pictures folder in Mac OS X:</p>
<p><img class="alignnone size-full wp-image-6468" title="" src="http://farm7.static.flickr.com/6224/6311957505_6f15b6f925.jpg" alt="" width="500" height="204" /><br />
Note that scaling down works to about 64 px; after that, shapes have to be redrawn, simpler and clearer, in order to read. The sidebar version of the icon is entirely different, in fact; since we know it will be shown in the sidebar, it’s not so important that it look like a folder, and other features can be emphasized instead. Creating the large icon as a vector shape –which, to be clear, <em>you should be doing!</em> – won’t help where clarity is really needed: at small sizes. High-resolution displays will in fact make this problem more urgent because <strong>today’s 64 px is tomorrow’s 128 px</strong>. We’ll have to refine ever larger icons.</p></blockquote>
<p>Dave Shea takes a closer look at the mechanics of optimizing the original shapes and lines for smaller size in the &#8220;<a onclick="javascript:pageTracker._trackPageview('/outgoing/www.mezzoblue.com/archives/2007/02/21/icon_design/');"  href="http://www.mezzoblue.com/archives/2007/02/21/icon_design/">Icon Design: Sizing</a>&#8220;:</p>
<blockquote><p><img class="alignnone size-full wp-image-6471" title="" src="http://farm7.static.flickr.com/6101/6312492114_dd05b9e866_z.jpg" alt="" width="595" height="290" /></p>
<p>The solution is to start with the reduced version, and tweak it at the individual pixel level. Make the details fit within the pixel grid, remove extra detail that’s causing blur, or even <em>add</em> extra detail if it helps you get to your end goal. Whatever it takes, the solution is to provide a critical eye to the problem and tweak until you get a result you’re happy with, which is why the size variations are so much extra work.</p>
<p>In the calendar above, you’ll notice what I’ve tweaked the two different sizes so the inner boxes end up with whole pixel values on either side. To do this I’ve had to reduce the size of the boxes at 24&#215;24, and actually create more boxes at 16&#215;16. I couldn’t come up with a combination of 4 columns with a 1 pixel wide border that would fit within the space allotted at that smaller size, the only workable combination I found involved adding an extra column and dropping a row. The icon is a bit different than the 32&#215;32 equivalent, but it’s clearly derived from the larger one and works as an acceptable size variation.</p></blockquote>
<p>Additional examples of small icons moving shapes around and even &#8220;losing&#8221; some of them can be seen in a variety of modern applications and UI toolkits. Here is an example from the widely-lauded <a onclick="javascript:pageTracker._trackPageview('/outgoing/www.iawriter.com/');"  href="http://www.iawriter.com/">iA Writer for Mac</a> application:</p>
<p><img class="alignnone size-full wp-image-6472" title="" src="http://farm7.static.flickr.com/6106/6312492224_e0023a2efd_z.jpg" alt="" width="600" height="472" /></p>
<p>While the central element &#8211; a slanted sky blue caret &#8211; preserves the overall shape, angle and gradient, the text next to it begins &#8220;losing&#8221; characters the closer you get to 32*32 size. The 16*16 icon is just the caret, with no characters next to it.</p>
<p>The same approach to simplifying the shapes, textures, perspective and density can be seen in the system icons <a onclick="javascript:pageTracker._trackPageview('/outgoing/jimmac.musichall.cz/log/?p=1145');"  href="http://jimmac.musichall.cz/log/?p=1145">introduced in GNOME 3.0</a>:</p>
<p><img class="alignnone size-full wp-image-6473" title="" src="http://farm7.static.flickr.com/6095/6312492208_25dd52289d.jpg" alt="" width="400" height="300" /></p>
<p><img class="alignnone size-full wp-image-6474" title="" src="http://farm7.static.flickr.com/6019/6311972205_e42d92f93f.jpg" alt="" width="400" height="300" /></p>
<p><img class="alignnone size-full wp-image-6475" title="" src="http://farm7.static.flickr.com/6232/6311972503_f104e2ab9c.jpg" alt="" width="400" height="300" /></p>
<p>If you trace the progression of the transition to smaller icon sizes across these three icons (and additional icons on <a onclick="javascript:pageTracker._trackPageview('/outgoing/jimmac.musichall.cz/log/?p=1145');"  href="http://jimmac.musichall.cz/log/?p=1145">the original entry</a>), you will see a consistent approach that starts stripping away dimensionality, complexity, textures, gradients and density, preserving not only the overall shape and feel of the icon, but also the consistency of iconography language across all icons of the same size.</p>
<p>If you do not wish to spend extra time to pixel-perfect your icons at smaller sizes, using a single-source vector format as the &#8220;master&#8221; and scaling down to any arbitrary size is a perfect fit for SVG. In this context, <a onclick="javascript:pageTracker._trackPageview('/outgoing/www.svgopen.org/2008/papers/104-SVG_in_KDE/#d4e152');"  href="http://www.svgopen.org/2008/papers/104-SVG_in_KDE/#d4e152">the following quote</a> from the self-titled &#8220;Graphics Ninja&#8221; Zack Rusin talking about SVG in KDE is quite illuminating:</p>
<blockquote><p>The loss of quality in vector graphics at small size is a severe problem. Rendering vector graphics primitives at low resolutions introduces a certain amount of blur into the output. This is mainly caused by horizontal and vertical primitives which happen to fall between pixel boundaries, which in turn makes the anti-aliasing algorithms try to cope with it by rasterizing two, instead of one rows/columns but at a lower color intensity. For primitives which are rendered at small sizes the goals of &#8220;resolution independence&#8221; and &#8220;preserving their good looks across resolutions&#8221; diverges a lot. We have the former, we need the latter.</p>
<p>One of the ways of dealing with this problem is hinting. The problem of hinting vector graphics primitives has been extensively researched by the way of font technologies. Grid-fitting (aka. &#8220;font hinting&#8221;) is a crucial step on the way to produce legible output at small sizes for a lot of fonts. Hinting can be manual (e.g TrueType has a stack-based language for it, each glyph in the font contains its own little hint program and as a result of running that program control points for the outlines can be adjusted in any way the creator of the hints desired) or automatic (as used by FreeType). An interesting medium is described in &#8220;Example-Based Hinting of TrueType Fonts&#8221; paper, in which a method of reusing hints from one font for another are described. All in all it&#8217;s a very common problem for fonts.</p>
<p>The research the engineers from the FreeType project conducted on auto-hinting is outstanding. Right now the way KDE artists go around this problem is by producing certain SVG icons with different viewport sizes. This allows them to manually adjust the rendering for certain native resolutions.</p>
<p>The reality of the situation is that without very high DPI displays the quality of small SVG renderings is going to suffer. A solution would involve introduction of either an auto-hinting algorithm or adding a declarative approach of specifying the hints which the artists could easily utilize. It&#8217;s a problem which affects all SVG users and should be handled in the standard itself.</p></blockquote>
<p>There are a lot of similarities between pixel-perfecting vector graphics and auto-hinting of font glyphs. Both aim to address a very similar problem. Both operate in a flow where the master version is created under extremely high resolutions to look well in booklets, portfolios and promotional material, but versions scaled down to the &#8220;real world&#8221; use suffer from poor grid fitting, detail clutter, detail loss and blurriness. In fact, some designers go as far as proposing to forgo the standalone icons altogether and use the advanced capabilities of type engines instead. Proposed by <a onclick="javascript:pageTracker._trackPageview('/outgoing/net.tutsplus.com/tutorials/html-css-techniques/quick-tip-ever-thought-about-using-font-face-for-icons/');"  href="http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-ever-thought-about-using-font-face-for-icons/">Wayne Helman</a> last year, it was further expanded upon by P.J. Onori in his &#8220;<a onclick="javascript:pageTracker._trackPageview('/outgoing/somerandomdude.com/2010/05/04/font-embedding-icons/');"  href="http://somerandomdude.com/2010/05/04/font-embedding-icons/">Font-Embedding Icons: This Is a Big Deal</a>&#8221; article that goes on to say:</p>
<blockquote><p>The article was well-received, but I was honestly expecting more excitement around this idea. From my view, this now seems like <em>the</em> way to set icons in a site. I feel strongly about the potential of this method, so I thought I would take the time to generate a font set for <a onclick="javascript:pageTracker._trackPageview('/outgoing/somerandomdude.com/work/iconic/');"  href="http://somerandomdude.com/work/iconic/">Iconic</a> and to talk about why we should all be using this method for displaying icons.</p></blockquote>
<p>Listing &#8220;one icon, infinite sizes&#8221; as one of the advantages, it seems to be a great solution, but only for duotone, or more precisely purely black and white, icons. In addition, it completely fails to address the giant elephant in the room &#8211; what to do for complex icons that do not scale well to small sizes? Type engines have two major approaches to solve this problem &#8211; embedding bitmaps and font hinting.</p>
<p>Embedding bitmaps is a rather straightforward approach. You start from a high-resolution master definition of the glyph, and identify those glyphs that do not scale down well past a certain point (lowercase &#8216;m&#8217;, &#8216;s&#8217;, &#8216;a&#8217; and &#8216;g&#8217; are usually among the prime suspects). For those glyphs, you hand-tweak the visuals for all target point sizes, export them as bitmaps and then embed the bitmaps as binary blobs in the font file. In fact, it can work the other way around, <a onclick="javascript:pageTracker._trackPageview('/outgoing/www.will-harris.com/verdana-georgia.htm');"  href="http://www.will-harris.com/verdana-georgia.htm">as detailed</a> by Simon Earshow, a typographer at Microsoft:</p>
<blockquote><p>In the past I&#8217;ve been burned starting from outlines and trying to be extra clever in the hinting. So I finally deciding, ‘I&#8217;m better off grasping the nettle. What&#8217;s most important is to get the bitmaps right at the sizes people use most often.&#8217; <strong><em>So instead of starting with outlines and then working to hint them for the screen, I started by simply making bitmap fonts. No outlines, just bitmaps.</em></strong></p>
<p>Bitmaps are relatively easy to make and they show exactly how the fonts will look on-screen. This allowed us to make decisions about sizes, weights, and distinctions between serif, sans, roman, italic, all viewed in context. Working this way we came up with a definition for a certain number of critical sizes and weights.</p>
<p>Once the key bitmaps were done, I very carefully wrapped an outline around them. I always have in mind that this outline will then be given to the person responsible for hinting&#8211;and they&#8217;ll need to be able to hint outline to get back, pixel for pixel, to the bitmap faces where we started.</p></blockquote>
<p>Embedding bitmaps worked well on CRT monitors, but did not scale into the world of LCD monitors and subpixel rendering. This is where hinting comes into play, as summarized in <a onclick="javascript:pageTracker._trackPageview('/outgoing/www.typotheque.com/articles/hinting');"  href="http://www.typotheque.com/articles/hinting">this great overview</a> by Peter Bil&#8217;ak on Typotheque:</p>
<blockquote><p>This is exactly what hinting is about: programming instructions that fine-tune a font’s rasterisation, the process by which its mathematically ideal outlines are mapped onto a monitor’s pixels. Hinting can control the heights and widths of a font’s uppercase and lowercase letters, the widths of its individual lines, the amount of white space around letters, the size at which uppercase letters start to use different stem-widths from lowercase letters, how the angle of italic characters changes to best fit the pixel grid, and many other extremely technical details, all on a pixel-by-pixel basis. If this sounds like a rather tedious, time-consuming activity, it is, (even for type designers, who are accustomed to tedious, time-consuming activities).</p></blockquote>
<p>The complexities of type hinting are illustrated in &#8220;<a onclick="javascript:pageTracker._trackPageview('/outgoing/www.microsoft.com/typography/tools/trtalr.aspx');"  href="http://www.microsoft.com/typography/tools/trtalr.aspx">The raster tragedy at low resolution</a>&#8221; article by Beat Stamm that gives just a small taste of what it takes to hint a single glyph &#8211; not to mention the implementation complexity of the type engine itself.</p>
<p><img class="alignnone size-full wp-image-6477" title="" src="http://farm7.static.flickr.com/6042/6311957849_7ec364586a.jpg" alt="" width="469" height="286" /></p>
<p><img class="alignnone size-full wp-image-6478" title="" src="http://farm7.static.flickr.com/6056/6311957951_8f290116f3.jpg" alt="" width="469" height="285" /></p>
<p>Beat Stamm even followed up with <a onclick="javascript:pageTracker._trackPageview('/outgoing/www.rastertragedy.com/');"  href="http://www.rastertragedy.com/">RasterTragedy.com</a>, delving much deeper into anti-aliasing, hinting, layout and rendering across a wide spectrum of modern type engines.</p>
<p><img class="alignnone size-full wp-image-6479" title="" src="http://farm7.static.flickr.com/6037/6311972237_cc8da4c639_z.jpg" alt="" width="567" height="289" /></p>
<p>To further appreciate the complexities of creating a type-hinting program for a specific glyph, you can start with <a onclick="javascript:pageTracker._trackPageview('/outgoing/dejavu-fonts.org/wiki/Hinting_tutorial/Example:_Hinting_L');"  href="http://dejavu-fonts.org/wiki/Hinting_tutorial/Example:_Hinting_L">this &#8220;Hello world&#8221; tutorial</a> that hints the uppercase &#8216;L&#8217;,  follow up with <a onclick="javascript:pageTracker._trackPageview('/outgoing/developer.apple.com/fonts/ttrefman/RM03/Chap3.html');"  href="http://developer.apple.com/fonts/ttrefman/RM03/Chap3.html">more complex examples</a> for glyphs with curves, serifs and slanted stems, and finally revel in the <a onclick="javascript:pageTracker._trackPageview('/outgoing/developer.apple.com/fonts/ttrefman/RM05/Chap5.html');"  href="http://developer.apple.com/fonts/ttrefman/RM05/Chap5.html">full TrueType instruction set</a>, the complexity of which rivals, if not exceeds, that of SVG itself.</p>
<p><img class="alignnone size-full wp-image-6480" title="" src="http://farm7.static.flickr.com/6058/6312477932_d36541bbc4.jpg" alt="" width="185" height="254" /></p>
<p>Throughout the article I stayed away from the complexity of the SVG format itself, and its full implementations. There&#8217;s a simple reason &#8211; if the format is powerful enough to address the needs and requirements of designers who pay special attention to pixel-level details, it will provide a natural push to have the full implementation of that format to be included in the UI toolkits and platforms. In its present state, however, SVG is not there. Furthermore, extending SVG with capabilities similar to those of TrueType hinting instructions will not only make the full implementation much more complex. A much more important question is whether it&#8217;s going to make it easier for icon designers to create a single vector-based version of their icons?</p>
<p>If you&#8217;ve followed my reasoning up until now, the simple answer is no, it will not. When each icon line, each icon stroke, each icon shape need to be hinted for precise rendering under small sizes, when you need to go well beyond each individual layer to make sure that they are hinted as one collective assembly, when you need to learn an extra set of tools that will undoubtedly go beyond the current instruction set of type engines as it&#8217;ll need to support lighting, gradients, collapsing and hiding detail &#8211; this is just not a tenable solution.</p>
<p>As to the process of pixel-perfecting icons? Once you scaled down the master version down to all the target sizes, you can do different things. You can start moving pixels directly, at the expense of redoing the same exact thing when you go back and change the master. Or you can go back to the master and create &#8220;secondary&#8221; masters, one for each target size. Each secondary master is not meant to be used at the highest resolution, but is instead optimized to create the best pixel-level version when it is scaled down to the target size. The down side is that once the original master is changed, you have many more tweaks to do.</p>
<p>A final thought about the high-resolution displays and the quote above from Neven Mrgan. Making a leap of faith, let&#8217;s say that in 50 years we&#8217;ll have screens with resolution of 1200dpi (which is &#8220;only&#8221; four times the resolution of iPhone 4 and Galaxy Nexus, but sixteen times as many pixels in a square inch). In such a world, a single grain of sand will cover four 16*16 pixel icons. In fact, all the mentions of small-size icons in this article refer to the physical scale of small &#8211; not the pixel scale. To maintain a usable touch interface, an interface that can be easily scanned with a human eye, you will want to maintain the current physical scale of the icons &#8211; making them much larger on the pixel scale. The smallest icon on such a device with the current UI building blocks will be around 128*128 pixels. However, it does not automatically mean that you can all of a sudden cram all the fine details from your (even higher resolution) master icon into the available pixel space. As each pixel gets smaller, it does not mean that you want to progressively increase the detail complexity and density.</p>
<p>As Neven points out, clarity is king, and in such a future icon designers will have to hand-tweak even more icon sizes. And unless the future is a concept video where everybody is walking around with high-end devices that have seemingly unlimited battery life and connectivity, the feature gap between high-end and low-end devices will be even larger. And in such a future, icon designers will have to maintain multiple versions of the same pixel-size icons, each version pixel-perfected for use on a device with a specific density. But then again, in 50 years there may as well be a completely different way to present information and a completely different technology to interact with.</p>
<p>So no, SVG is definitely not the answer. At least not today.</p>
<div class='yarpp-related'>
<hr><p>Related posts:<ol>
<li><a href="http://www.pushing-pixels.org/2009/01/02/disabled-and-themed-icons-in-substance-51.html" rel="bookmark" title="Disabled and themed icons in Substance 5.1">Disabled and themed icons in Substance 5.1 </a> <small>A few months ago, this posting on the Substance users mailing list has asked for...</small></li>
</ol></p>
</div>
		</div>

				
		
		<div class="navigation">
			<div class="alignleft"></div>
			<div class="alignright"></div>
		</div>

	
	</div>
	
	<div id="sidebar">
	<div class="block text-3 widget_text">			<div class="textwidget"><p><img style="margin: 4px 0px 12px 12px; float: right;" src="http://www.pushing-pixels.org/wp-content/uploads/2010/03/kirill-new_bigger.png" height="73" width="73">Thanks for stopping by. My name is <strong>Kirill Grouchnikov</strong> and I am a user interface engineer. I work at Google on the <a href="http://www.android.com/">Android</a> team. You can also find me on <a href="https://plus.google.com/+KirillGrouchnikov/posts">Google+</a>.</p>
<p><a href="http://www.pushing-pixels.org/about-me">more...</a></p>
</div>
		</div>		<div class="block recent-posts-3 widget_recent_entries">		<h3>Recent Posts</h3>		<ul>
					<li>
				<a href="http://www.pushing-pixels.org/2014/06/24/at-the-intersection-of-the-physical-and-digital-interview-with-michael-goldman.html">At the intersection of the physical and digital &#8211; interview with Michael Goldman</a>
						</li>
					<li>
				<a href="http://www.pushing-pixels.org/2014/05/13/the-craft-of-screen-graphics-and-movie-user-interfaces-interview-with-chris-kieffer.html">The craft of screen graphics and movie user interfaces – interview with Chris Kieffer</a>
						</li>
					<li>
				<a href="http://www.pushing-pixels.org/2014/04/10/avatars-avatars-everywhere.html">Avatars, avatars everywhere</a>
						</li>
					<li>
				<a href="http://www.pushing-pixels.org/2014/04/04/the-craft-of-screen-graphics-and-movie-user-interfaces-interview-with-jorge-almeida.html">The craft of screen graphics and movie user interfaces – interview with Jorge Almeida</a>
						</li>
					<li>
				<a href="http://www.pushing-pixels.org/2014/04/02/cinematography-of-the-truth-about-emanuel-interview-with-polly-morgan.html">Cinematography of “The Truth About Emanuel” – interview with Polly Morgan</a>
						</li>
				</ul>
		</div>	</div>
</div>

<div class="footersearch">
    <form role="search" method="get" id="searchformfooter" action="http://www.pushing-pixels.org/" >
	<div><label class="screen-reader-text" for="s">Search for:</label>
	<input type="text" value="" name="s" id="s" placeholder="Search posts" />
	<input type="submit" id="searchsubmit" value="Search" />
	</div>
    </form>
</div>

<div class="footer">
    <div class="footer_separator"></div>
    <div class="inner_footer">
	<div class="footer_content">
	    
<!-- tracker added by Ultimate Google Analytics plugin v1.6.0: http://www.oratransplant.nl/uga -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2068097-1");
pageTracker._initData();
pageTracker._trackPageview();
</script>
&copy; Copyright 2014 | <a href="http://www.pushing-pixels.org">Pushing Pixels</a> | All Rights Reserved<link rel='stylesheet' id='yarppRelatedCss-css'  href='http://www.pushing-pixels.org/wp-content/plugins/yet-another-related-posts-plugin/style/related.css?ver=3.9.1' type='text/css' media='all' />
	</div>
    </div>
</div>

<!-- Can put web stats code here -->

</body>

</html>
<!-- Dynamic page generated in 0.490 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2014-07-01 13:00:23 -->

<!-- super cache -->