
<!DOCTYPE html>
<html lang="en" class="isUnknown ver00 isAnonymous " prefix="og: http://ogp.me/ns#">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>How to Build an API with Python and Flask - Tech.pro</title>
    
    <link rel="icon" href="http://tech.pro/favicon.ico">
    <link rel="shortcut icon" href="http://tech.pro/favicon.ico">
    <link rel="apple-touch-icon" sizes="57x57" href="//tpstatic.com/img/root/techpro/apple-touch-icon-114x114.png" />
    <link rel="apple-touch-icon" sizes="114x114" href="//tpstatic.com/img/root/techpro/apple-touch-icon-114x114.png" />
    <link rel="apple-touch-icon" sizes="72x72" href="//tpstatic.com/img/root/techpro/apple-touch-icon-144x144.png" />
    <link rel="apple-touch-icon" sizes="144x144" href="//tpstatic.com/img/root/techpro/apple-touch-icon-144x144.png" />
    <link rel="search" type="application/opensearchdescription+xml" title="Tech.pro" href="/opensearch">
    <script type="text/javascript" src="/Scripts/ext/modernizr.js"></script>
    <script type="text/javascript" src="//use.typekit.net/wsf0avv.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>

    <link href="//tpstatic.com/bundles/css/bootstrap?v=pfT5OW9kXDWaj6LD9DsIHJM2wLvIExsAA_6Kl1jBrCg1" rel="stylesheet"/>

    <link href="//tpstatic.com/bundles/css/master?v=nl5uf3N7LMyCS_lZtJPq7X8fEJqlm334pau8OhAW5kU1" rel="stylesheet"/>


    
    <link href="http://tech.pro/tutorial/1213/how-to-build-an-api-with-python-and-flask" rel="canonical" />
    <meta name="twitter:card" value="summary" />
    <meta name="twitter:site" value="@techdotpro" />

    <meta name="twitter:creator" value="@cuttarug" />

    <meta content="How to Build an API with Python and Flask" property="og:title" />
<meta content="http://tech.pro/tutorial/1213/how-to-build-an-api-with-python-and-flask" property="og:url" />
<meta content="article" property="og:type" />
<meta content="http://tpstatic.com/img/usermedia/_l-y8DHBzkSP-5z5j7hnWw/original.png" property="og:image" />
<meta content="363267100458684" property="og:app_id" />
<meta content="Tech.pro" property="og:site_name" />

    <meta content="Lalith Polepeddi" property="og:article:author" />
    <meta content="Tutorial" property="og:article:section" />
<meta content="04/11/2013 20:44:42" property="og:article:published_time" />
    <meta content="Behind every great web app is a great API. In this article, I&#39;ll show you how to design a RESTful API and build it with Python and Flask.

The code used in..." property="og:description" />
    <meta content="Behind every great web app is a great API. In this article, I&#39;ll show you how to design a RESTful API and build it with Python and Flask.

The code used in..." name="description" />
    

<link href="https://plus.google.com/u/0/116226688977668665144" rel="author" />
    
<meta content="API" property="og:article:tag" /><meta content="Python" property="og:article:tag" /><meta content="Flask" property="og:article:tag" />    <meta content="API,Python,Flask" name="keywords" />
    <link href="//tpstatic.com/bundles/css/articles?v=cuE1hqABXa0y8I3goT_aXc_bm7_3vxPjJS4mnf9dTk81" rel="stylesheet"/>


    <script type="text/javascript">window.tprq=[];TP = { ready: function (f) { tprq.push(f); } };</script>
    <!--[if lt IE 9]>
        <script src="//tpstatic.com/scripts/ext/html5shiv.js"></script>
        <script src="//tpstatic.com/scripts/splash/js/vendor/html5-3.6-respond-1.1.0.min.js"></script>
    <![endif]-->
</head>
<body>
    <div id="tp-alerts">
        
    </div>

    <div class="bg-container">
        <span id="mobile_menu_link">Menu</span>
        <div class="container">

            <div id="navbar" class="navbar">

                

<div id="top-nav">
    <span itemscope="" itemtype="http://schema.org/Organization" >
        <a class="logo" href="/" itemprop="url">Tech.pro</a>
        <meta itemprop="img" content="http://tech.pro/apple-touch-icon-144x144.png"/>
    </span>

    <ul id="nav-tools" class="navigation pull-right">
            <li>
                <a id="createProfile" href="/register?returnUrl=%2Ftutorial%2F1213%2Fhow-to-build-an-api-with-python-and-flask&amp;returnTitle=How%20to%20Build%20an%20API%20with%20Python%20and%20Flask" rel="nofollow">Create a Profile</a>
                <span class="muted" style="margin: 0 6px;display: inline-block;">or</span>
                <a class="-login" href="http://tech.pro/login?returnUrl=%2ftutorial%2f1213%2fhow-to-build-an-api-with-python-and-flask" rel="nofollow">Login</a>
            </li>
    </ul>

    <ul id="tp-main-nav" class="navigation">
        <li class="dropdown ">
            <a href="http://tech.pro/register">Profile</a>
            <ul class="dropdown-menu">
                    <li><a href="/register">Create a Profile</a></li>
                    <li><a href="/projects">Projects Directory</a></li>
                    <li><a href="/how-it-works">How Tech.pro Works</a></li>
            </ul>
            <div class="indicator"></div>
        </li>
        <li class="dropdown ">
            <a href="http://tech.pro/profiles">Network</a>
            <ul class="dropdown-menu">
                    <li><a href="/profiles">Search Pros</a></li>
                    <li><a href="/companies">Companies</a></li>
                    <li><a href="/network">My Network</a></li>
                    <li><a href="/account/build-network-start">Invite Your Peers</a></li>
            </ul>
            <div class="indicator"></div>
        </li>
        <li class="dropdown active">
            <a href="http://tech.pro/posts">Posts</a>
            <ul class="dropdown-menu">
                    <li><a href="/authors">Popular Authors</a></li>
                    <li><a href="/tutorials">Tutorials</a></li>
                    <li><a href="/blogs">Blogs</a></li>
                    <li><a href="/links">Links</a></li>
                    <li><a href="/blogs/create">Post a Blog</a></li>
                    <li><a href="/links/submit">Submit a Link</a></li>
            </ul>
            <div class="indicator"></div>
        </li>
        <li class="dropdown ">
            <a href="http://tech.pro/questions">Q&amp;A</a>
            <ul class="dropdown-menu">
                    <li><a href="/questions/trending">Trending</a></li>
                    <li><a href="/questions/new">Most Recent</a></li>
                    <li><a href="/questions/ask">Ask a Question</a></li>
                    <li><a href="/questions/unanswered">Answer a Question</a></li>
            </ul>
            <div class="indicator"></div>
        </li>


        <li class="dropdown ">
            <a href="http://tech.pro/about-us">More</a>
            <ul class="dropdown-menu">
                    <li><a href="/how-it-works">How Tech.pro Works</a></li>
                    <li><a href="/about-us">About Us</a></li>
                    <li><a href="/contact-us">Contact Us</a></li>
                    <li><a href="/sitemap">Sitemap</a></li>
            </ul>
            <div class="indicator"></div>
        </li>

            <li class="mobile-nav"><a href="/login?returnUrl=%2Ftutorial%2F1213%2Fhow-to-build-an-api-with-python-and-flask">Login</a></li>
            <li class="mobile-nav"><a href="/register?returnUrl=%2Ftutorial%2F1213%2Fhow-to-build-an-api-with-python-and-flask">Create a Profile</a></li>
    </ul>
</div>
<div id="sub-nav">
    
    <ul class="navigation pull-right">
        <li><a class="" href="/how-it-works">How Tech.pro Works</a></li>
    </ul>

    

    <!-- ko stopBinding: true -->
    <div id="global-search" class="tp-global-search">
    
        <div>
            <input type="text" class="search-input" placeholder="Search Tech.pro"
                   data-bind="offset: menuPosition, value: query, valueUpdate: 'afterkeydown', event: inputEvents"/>
            
            
        </div>

        <ul class="results-list unstyled" 
            data-bind="position: menuPosition, visible: isMenuVisible, on: listEvents, event: listElementEvents" style="display:none;">
        <!-- ko foreach: items.grouped -->

            <li class="category" data-bind="text: $parent.categories[$data.type]"></li>

            <!-- ko template: { name: 'gs_item_template', foreach: $data } -->
            <!-- /ko -->
        
        <!-- /ko -->
        </ul>
    
    
    
    </div>
    <!-- /ko -->
    

</div>

            </div>
            



<table class="tp-signup-banner" border="0" cellpadding="0" cellspacing="0">
    <tr>
<td class="signup-logo"><img src="//tpstatic.com/img/layout/techpro/joinBannerImage.png" /></td>        <td class="tagline"><span class="tagline-text">The nerd table is now the cool table.</span></td>
        <td class="signup-action">
            <a id="signupbannerjoinnow" class="btn btn-yellow" href="/how-it-works">
                learn more
            </a>
        </td>
    </tr>
</table>
<script>
    TP.ready(function () {
        $("#signupBannerJoinNow").click(function() {
            TP.trackEvent({ category: "join_now_click", action: "The nerd table is now the cool table." });
        });
    })
</script>



<div id="content-wrapper">

    <div class="sidebar-wrapper clearfix">       
        <div class="pane content-pane main-body clearfix">
            



<div itemscope="" itemtype="http://schema.org/Article"  class="-entity" data-tp="{&quot;id&quot;:1213,&quot;type&quot;:&quot;article&quot;,&quot;score&quot;:4}">
    <div class="clearfix -article-profile">
        <div class="pull-right" style="text-align: right; margin: 0 0 8px 0;">

            <ul class="tp-tag-list" itemprop="keywords">
    <a class="tp-tag" data-tp="{&quot;id&quot;:813}" >
        API
    </a>
    <a class="tp-tag" data-tp="{&quot;id&quot;:801}" >
        Python
    </a>
    <a class="tp-tag" data-tp="{&quot;id&quot;:982}" >
        Flask
    </a>
            </ul>

        </div>

            <span class="tp-author-card pull-left" itemscope itemprop="author" itemtype="http://schema.org/Person">
            <a href="http://tech.pro/lpolepeddi" style="width:24px;height:24px" class="tp-gravatar small pull-left" data-tp="{&quot;id&quot;:16109}">
        <img width="24" height="24"  alt="Lalith Polepeddi" src="//tpstatic.com/img/usermedia/3I4Xa76fhkWnYTzttmvTcA/cropped-w24-h24.png"  
            itemprop="image"/>
    </a>

        <span>
            <a class="author" href="http://tech.pro/lpolepeddi" itemprop="url">
                <span itemprop="name">Lalith Polepeddi</span>
            </a>
                <br />
                <span class="post-date">posted <time datetime="2013-04-11T20:44:42" itemprop="datePublished">one year ago</time></span>
        </span>
    </span>


        <span class="tp-entity-tools">

                            <span title="Flag Post" class="-flag -tooltip"><i class="tp-di-icon">K</i> </span> 
        </span>
    </div>


    <div class="tp-article-difficulty beginner detail">
        BEGINNER
    </div>
    <div>
        
        <h1 class="tp-article-title" itemprop="headline">How to Build an API with Python and Flask</h1>
    </div>
    <div class="tp-body clean-type center-images clearfix article-content" itemprop="articleBody">
             <img class="tp-article-image" src="//tpstatic.com/img/usermedia/_l-y8DHBzkSP-5z5j7hnWw/cropped-w220-h220.png" itemprop="image"/>   
        
        <!-- ko stopBinding: true --><p>Behind every great web app is a great API. In this article, I'll show you how to design a RESTful API and build it with Python and Flask.</p>

<p>The code used in this article can be found on <a href="https://github.com/cuttarug/sightings">GitHub</a>. When you see a caption, such as <strong>Checkpoint: 01_sighting_model</strong>, it means that you can switch to the branch named "01_sighting_model" and review what the code looks like at that point in the article.</p>

<h2 id="a_bit_of_jargon">A Bit of Jargon</h2>

<p>An API is a collection of functions that allow a software program to access data from an application. The software program can read or change the application's data by calling these functions.</p>

<p>REST stands for Representational State Transfer. It is a set of rules that clients and servers must follow when communicating with each other. If a communications system follows these rules, it is called RESTful. The most famous RESTful communications protocol is HTTP. This means that the Web itself is built following the REST approach.</p>

<p>In a RESTful service, a URL should identify a piece of information that the user might want to interact with. Each piece of information is termed a resource. Resources can be retrieved and changed using the <a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods">HTTP verbs</a>. Here are four of them and their effect on a resource.</p>

<dl>
  <dt>POST</dt>
  <dd>Creates a new resource</dd>
  <dt>GET</dt>
  <dd>Reads a resource</dd>
  <dt>PUT</dt>
  <dd>Updates an existing resource</dd>
  <dt>DELETE</dt>
  <dd>Deletes a resource</dd>
</dl>

<p>These are simple concepts that you use every day on the Web. A web page is a resource that is represented by a URL. When you type a URL into your address bar and press Enter, your browser issues a GET request on the web page identified by the URL. The host server sends a response back to your browser with the web page so that you can read the resource. Likewise, when you submit a form, your browser issues a POST request on the form page so that a new resource can be created on the host server.</p>

<p>Flask is a web framework for Python that is easy to use and simple to learn. I've written on how to create a simple Flask app containing <a href="http://net.tutsplus.com/tutorials/python-tutorials/an-introduction-to-pythons-flask-framework/">static pages</a> and <a href="http://net.tutsplus.com/tutorials/python-tutorials/intro-to-flask-adding-a-contact-page/">a contact page</a>, so check those out for a deeper look at Flask.</p>

<h2 id="choosing_a_dataset">Choosing a Dataset</h2>

<p>We'll make a places API in this article. The data comes from <a href="http://www.infochimps.com/datasets/60000-documented-ufo-sightings-with-text-descriptions-and-metada">Infochimps's UFO Sightings dataset</a> (I couldn't pass up using it). The dataset has more than 60,000 accounts of UFO sightings reported by location. Here's a sample of what it looks like:</p>

<table class="table table-bordered">
  <thead>
    <tr>
      <th>sighted_at</th>
      <th>reported_at</th>
      <th>location</th>
      <th>shape</th>
      <th>duration</th>
      <th>description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>19951009</td>
      <td>19951009</td>
      <td>Iowa City, IA</td>
      <td></td>
      <td></td>
      <td>Man repts. witnessing &quot;flash, followed by a classic UFO, w/ a tailfin at back.&quot; Red color on top half of tailfin. Became triangular.</td>
    </tr>
    <tr>
      <td>19951010</td>
      <td>19951011</td>
      <td>Milwaukee, WI</td>
      <td></td>
      <td>2 min.</td>
      <td>Man  on Hwy 43 SW of Milwaukee sees large, bright blue light streak by his car, descend, turn, cross road ahead, strobe. Bizarre!</td>
    </tr>
    <tr>
      <td>19950101</td>
      <td>19950103</td>
      <td>Shelton, WA</td>
      <td></td>
      <td></td>
      <td>Telephoned Report:CA woman visiting daughter witness discs and triangular ships over Squaxin Island in Puget Sound. Dramatic.  Written report, with illustrations, submitted to NUFORC.</td>
    </tr>
    <tr>
      <td>19950510</td>
      <td>19950510</td>
      <td>Columbia, MO</td>
      <td></td>
      <td>2 min.</td>
      <td>Man repts. son&apos;s bizarre sighting of small humanoid creature in back yard.  Reptd. in Acteon Journal, St. Louis UFO newsletter.</td>
    </tr>
    <tr>
      <td>19950611</td>
      <td>19950614</td>
      <td>Seattle, WA</td>
      <td></td>
      <td></td>
      <td>Anonymous caller repts. sighting 4 ufo&apos;s in NNE sky, 45 deg. above horizon.  (No other facts reptd.  No return tel. #.)</td>
    </tr>
  </tbody>
</table>

<p>Here's a description of each column:</p>

<ul>
<li><strong>sighted_at</strong> - The date the sighting occurred, formatted as <em>yyyymmdd</em></li>
<li><strong>reported_at</strong> - The date the sighting was reported, formated as <em>yyyymmdd</em></li>
<li><strong>location</strong> - The city and state where the sighting occurred</li>
<li><strong>shape</strong> - A description of the UFO shape</li>
<li><strong>duration</strong> - The duration of the sighting</li>
<li><strong>description</strong> - A description of the sighting</li>
</ul>

<p>I geocoded each <strong>location</strong> field into a latitude and longitude, so here are the same five rows of the dataset with that modification. The full geocoded version of the dataset <a href="https://www.dropbox.com/s/aoim0kwg7v30fii/sightings.tsv">can be found here</a>, and I'll use this version for the rest of the article.</p>

<table class="table table-bordered">
  <thead>
    <tr>
      <th>sighted_at</th>
      <th>reported_at</th>
      <th>location</th>
      <th>shape</th>
      <th>duration</th>
      <th>description</th>
      <th>latitude</th>
      <th>longitude</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>19951009</td>
      <td>19951009</td>
      <td>Iowa City, IA</td>
      <td></td>
      <td></td>
      <td>Man repts. witnessing &quot;flash, followed by a classic UFO, w/ a tailfin at back.&quot; Red color on top half of tailfin. Became triangular.</td>
      <td>41.6611277</td>
      <td>-91.5301683</td>
    </tr>
    <tr>
      <td>19951010</td>
      <td>19951011</td>
      <td>Milwaukee, WI</td>
      <td></td>
      <td>2 min.</td>
      <td>Man  on Hwy 43 SW of Milwaukee sees large, bright blue light streak by his car, descend, turn, cross road ahead, strobe. Bizarre!</td>
      <td>43.0389025</td>
      <td>-87.9064736</td>
    </tr>
    <tr>
      <td>19950101</td>
      <td>19950103</td>
      <td>Shelton, WA</td>
      <td></td>
      <td></td>
      <td>Telephoned Report:CA woman visiting daughter witness discs and triangular ships over Squaxin Island in Puget Sound. Dramatic.  Written report, with illustrations, submitted to NUFORC.</td>
      <td>47.2150945</td>
      <td>-123.1007066</td>
    </tr>
    <tr>
      <td>19950510</td>
      <td>19950510</td>
      <td>Columbia, MO</td>
      <td></td>
      <td>2 min.</td>
      <td>Man repts. son&apos;s bizarre sighting of small humanoid creature in back yard.  Reptd. in Acteon Journal, St. Louis UFO newsletter.</td>
      <td>38.9517053</td>
      <td>-92.3340724</td>
    </tr>
    <tr>
      <td>19950611</td>
      <td>19950614</td>
      <td>Seattle, WA</td>
      <td></td>
      <td></td>
      <td>Anonymous caller repts. sighting 4 ufo&apos;s in NNE sky, 45 deg. above horizon.  (No other facts reptd.  No return tel. #.)</td>
      <td>47.6062095</td>
      <td>-122.3320708</td>
    </tr>
  </tbody>
</table>

<h2 id="designing_the_api">Designing the API</h2>

<p>Now that we have a dataset, we need to make it available so that developers can build on top of it.</p>

<p>One way to do this is to implement a couple functions for the developer to use. Here are some ideas:</p>

<ul>
<li><code>/getSighting</code> will return a specific sighting</li>
<li><code>/findSightingsNearLocation</code> will get all sightings within a certain radius distance of a given latitude and longitude, perhaps the user's current location</li>
<li><code>/addNewSighting</code> will update the database with a new extraterrestrial event</li>
<li><code>/getSightingsLongerThan</code> will filter on the <strong>duration</strong> column to get all sightings longer than some time interval, say 10 minutes</li>
<li><code>/sightingsToday</code> will indicate whether any UFOs have been spotted today</li>
<li><code>/sightingsSince</code> will return all sightings after some date</li>
<li>...</li>
</ul>

<p>The problem with this design is that it is arbitrary and inconsistent. You could have just as easily named the URL in the second bullet <code>/getSightingsNearMe</code>. Furthermore, there is no evident pattern to the URLs - some have verbs while others don't, some perform more specific operations than others, etc. These problems will compound themselves as the API grows in the future and more functions are added. The net result is an API that is difficult to use. Said more bluntly, this is bad API design.</p>

<p>We need to keep things simple and consistent. We can do so by following the REST guidelines. In the design above, I was trying to use URLs to describe actions on resources. The REST approach sets a distinction that URLs should be used only to identify resources, while HTTP verbs should be used to specify actions on those resources. Let's maintain this distinction and design a better API.</p>

<p>In a RESTful API, only two URLs are needed per resource. The first URL is for a collection, which for the UFO sightings dataset is <code>/sightings/</code>. The second URL is for a specific element, which in our case is <code>/sightings/&lt;id&gt;</code>.</p>

<p>When we apply the HTTP verbs to these two resources, we get the following grid:</p>

<table class="table table-bordered">
  <thead>
    <tr>
      <th></th>
      <th>POST</th>
      <th>GET</th>
      <th>PUT</th>
      <th>DELETE</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>/sightings/</code></td>
      <td>Add a new sighting to the collection</td>
      <td>Show all sightings</td>
      <td>Update all sightings</td>
      <td>Delete all sightings</td>
    </tr>
    <tr>
      <td><code>/sightings/&lt;id&gt;</code></td>
      <td>(Error)</td>
      <td>Show &lt;id&gt;</td>
      <td>Update &lt;id&gt; if it exists; else error</td>
      <td>Delete &lt;id&gt;</td>
    </tr>
  </tbody>
</table>

<p>The grid describes the effect each HTTP verb has on the two resources. For instance <code>GET /sightings/</code> should return a list of all UFO sightings while <code>GET /sightings/&lt;id&gt;</code> should display that specific sighting. </p>

<p>The grid is not perfect. First, <code>POST /sightings/&lt;id&gt;</code> translates to "add a new sighting to <code>&lt;id&gt;</code>." This doesn't make sense and therefore should just return an error. It makes more sense to add a new sighting to the collection of sightings, so <code>POST /sightings/</code> should be allowed. Likewise, if you try to update an <code>&lt;id&gt;</code> that does not exist in the database by doing <code>POST /sightings/&lt;id&gt;</code>, it should return an error to avoid unexpected behavior.</p>

<p>Overall the grid lends consistency to the API design. The URLs only represent sightings. They no longer contain arbitrary verbs. Instead, the standard verbs that HTTP provides are used to retrieve and change sightings.</p>

<p>But what about more specific operations, like finding all sightings in a certain location or retrieving all sightings with a duration longer than n minutes? If we add more URLs to express these operations, we'll get back into bad API design territory. Instead, let's leave the two URLs <code>/sightings/</code> and <code>/sightings/&lt;id&gt;</code> alone and add these possibilities as optional parameters in a query string behind the <code>?</code> separator. For example if we wanted to get a list of 10 sightings starting at record 20, we could do <code>GET /sightings/?limit=10&amp;offset=20</code>. If we wanted to get a list of all sightings within a 10 mile radius of a latitude and longitude, we could do <code>GET /sightings/?location=lat,lng&amp;radius=10</code>.</p>

<p>In this article, I'll show you how to implement the GET column of the RESTful grid. In other words, I'll show you how to make a read-only API. I'll also choose JSON as the format for the API to return.</p>

<h2 id="implementing_the_api">Implementing the API</h2>

<p>There were a lot of details in the section above. Fortunately, Flask makes it a cinch to translate the API design into an implementation, so let's get started.</p>

<h3 id="install_mysql">Install MySQL</h3>

<p>First let's install MySQL to manage the raw UFO sightings data. Check to see if your system already has MySQL installed:</p>

<pre><code>$ mysql --version
</code></pre>

<p>If a version number shows up, you're good to go and can skip to the next section. If not, you'll need to install MySQL on your machine. There are several Googleable articles that provide machine-specific installation instructions better than I could, so I'll defer to them. The installation usually consists of running a command or an executable. For example on Ubuntu it is:</p>

<pre><code>$ sudo apt-get install mysql-server mysql-client
</code></pre>

<h3 id="set_up_mysql">Set Up MySQL</h3>

<p>Once MySQL is installed, log in with the <code>--local-infile</code> option set to 1 so that we can import data from a local text file. Make sure to fill in your MySQL username and password.</p>

<pre><code>$ mysql --local-infile=1 -u username -p
</code></pre>

<p>Next, create a new database named "ufosightings" and a table inside of it named "sightings."</p>

<pre><code>&gt; CREATE DATABASE ufosightings;
&gt; USE ufosightings;
&gt; CREATE TABLE sightings (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    sighted_at INT(8),
    reported_at INT(8),
    location VARCHAR(100),
    shape VARCHAR(10),
    duration VARCHAR(10),
    description TEXT,
    lat FLOAT(10, 6),
    lng FLOAT(10, 6)
  ) ENGINE = MYISAM CHARACTER SET utf8 COLLATE utf8_general_ci;
</code></pre>

<p><a href="https://www.dropbox.com/s/aoim0kwg7v30fii/sightings.tsv">Download the raw text file of UFO sightings</a> and import it into the "sightings" table. The import is a sweet one-liner. Make sure that you change the file path to where you downloaded the file.</p>

<pre><code>&gt; LOAD DATA LOCAL INFILE '/path/sightings.tsv' INTO TABLE sightings FIELDS TERMINATED BY '\t' ENCLOSED BY '"' LINES TERMINATED BY '\n';
</code></pre>

<h3 id="install_flask">Install Flask</h3>

<p>Create a new folder named <em>sightings/</em> for the Flask app.</p>

<pre><code>$ mkdir sightings
$ cd sightings/
</code></pre>

<p>Next, let's use virtualenv to create an isolated Python development environment where we can do all our development work. This will create a folder <em>venv/</em> which contains the package manager pip and a clean copy of Python.</p>

<pre><code>$ virtualenv venv
</code></pre>

<p>Now let's activate our development environment and safely install Flask inside of it using pip.</p>

<pre><code>$ . venv/bin/activate
$ pip install flask
</code></pre>

<h3 id="install_flask-sqlalchemy">Install Flask-SQLAlchemy</h3>

<p>Instead of shipping with extra functionality by default, Flask lets you add it on as you need it by using extensions. A Flask extension is a package that adds a specific functionality to your app. There are <a href="http://flask.pocoo.org/extensions/">several Flask extensions</a> available for you to use. We'll use <a href="http://pythonhosted.org/Flask-SQLAlchemy/">Flask-SQLAlchemy</a> which adds database support. Let's install it now.</p>

<pre><code>$ pip install flask-sqlalchemy
</code></pre>

<p>We'll also need a library called MySQLdb so that Python can interface with MySQL, so let's install that too.</p>

<pre><code>$ pip install mysql-python
</code></pre>

<h2 id="configure_flask_and_flask-sqlalchemy">Configure Flask and Flask-SQLAlchemy</h2>

<p>Now that all the installations are complete, the next step is to create a new Flask application and connect it to MySQL using Flask-SQLAlchemy. Let's create a file inside <em>sightings/</em> named <strong>routes.py</strong> and make this happen.</p>

<p><strong>sightings/routes.py</strong></p>

<pre><code>from flask import Flask, request
from flask.ext.sqlalchemy import SQLAlchemy

app = Flask(__name__)
db = SQLAlchemy(app)

app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://your-username:your-password@localhost/ufosightings'

if __name__ == '__main__':
  app.run(debug=True)
</code></pre>

<ol>
<li>First we imported the main Flask class and a class named <code>request</code>. <code>request</code> will let us distinguish between the HTTP verbs.</li>
<li>Next we imported the SQLAlchemy class.</li>
<li>Then we made a variable <code>app</code> containing a usable instance of the Flask class and a variable <code>db</code> containing usable instance of the SQLAlchemy class</li>
<li>Next we connected the Flask app to the MySQL database "ufosightings." We did so by specifying our username, password, server, and desired database as a data URI. Since we're developing locally, the server is localhost. Make sure to change the MySQL username and password to your credentials.</li>
<li>Finally, we used the function <code>app.run()</code> so that we can run our app on a local server later. We'll set the debug flag to 1 so that we can see error messages if anything goes wrong and so that the server automatically reloads after we make changes to the code.</li>
</ol>

<p><strong>-- Checkpoint: 00_configuration --</strong></p>

<p>The UFO sightings data lives in the "sightings" table inside the "ufosightings" database. Let's create a model representing this table so that we can query it from our Flask app.</p>

<p><strong>sightings/routes.py</strong></p>

<pre><code>from flask import Flask, request
.
.
.

class Sighting(db.Model):
  __tablename__ = 'sightings'
  id = db.Column(db.Integer, primary_key = True)
  sighted_at = db.Column(db.Integer)
  reported_at = db.Column(db.Integer)
  location = db.Column(db.String(100))
  shape = db.Column(db.String(10))
  duration = db.Column(db.String(10))
  description = db.Column(db.Text)
  lat = db.Column(db.Float(6))
  lng = db.Column(db.Float(6))


if __name__ == '__main__': 
  ...
</code></pre>

<p>We added a new class named Sighting to <strong>routes.py</strong> and defined an attribute for each column in the "sightings" table. That's all there is to the model. This class will now be our interface to query the "sightings" table.</p>

<p><strong>-- Checkpoint: 01_sighting_model --</strong></p>

<h3 id="set_up_urls">Set Up URLs</h3>

<p>From the API design above, the two URLs we want to support are <code>/sightings/</code> and <code>sighting/&lt;id&gt;</code>. Let's start with the URL <code>/sightings/</code> and create a new URL mapping for it inside <strong>routes.py</strong></p>

<p><strong>sightings/routes.py</strong></p>

<pre><code>from flask import Flask, request, jsonify
.
.
.

@app.route('/sightings/', methods=['GET'])
def sightings():
  if request.method == 'GET':
    results = Sighting.query.limit(10).offset(0).all()

    json_results = []
    for result in results:
      d = {'sighted_at': result.sighted_at,
           'reported_at': result.reported_at,
           'location': result.location,
           'shape': result.shape,
           'duration': result.duration,
           'description': result.description,
           'lat': result.lat,
           'lng': result.lng}
      json_results.append(d)

    return jsonify(items=json_results)


if __name__ == '__main__':
  ...
</code></pre>

<ol>
<li>We start by importing a Flask function named <code>jsonify()</code>. Our API will support JSON, so we can use <code>jsonify()</code> to return a JSON response to the browser. </li>
<li>Next we map the URL <code>/sightings/</code> to the function <code>sightings()</code>. When this URL is visited, the <code>sightings()</code> function will be called. Notice that we've also specified that we want this URL to respond to the HTTP verb GET. Since this is a list, you can simply append the other HTTP verbs that you want to support, eg <code>['GET', 'POST']</code>. I'll just support GET for this read-only API.</li>
<li>Inside <code>sightings()</code> we determine whether a GET request has been issued to the URL. You can support more verbs by using an <code>if..elif..else</code> statement, similar to <a href="http://flask.pocoo.org/docs/quickstart/#http-methods">this example</a>.</li>
<li>Once we've determined that a GET request has been issued, we use <a href="http://pythonhosted.org/Flask-SQLAlchemy/queries.html">Flask-SQLAlchemy's query syntax</a> to retrieve the first 10 records from the "sightings" table. The equivalent SQL statement is <code>SELECT * from sightings LIMIT 10 OFFSET 0;</code></li>
<li>The variable <code>results</code> now contains a list of records returned from the database query. Each record is a SQLAlchemy object. We'll need to convert this list of SQLAlchemy objects into a JSON list so that we can pass it to <code>jsonify()</code>. This is what the next block in <code>sightings()</code> does; it creates a dictionary out of each record in <code>results</code>, and stores a list of dictionaries in the variable <code>json_results</code></li>
<li>Finally, we pass the records in <code>json_results</code> to the <code>jsonify()</code> function in order to return JSON in the browser.</li>
</ol>

<p>We're now ready to see the output of all our hard work. Go to the command line and type</p>

<pre><code>$ python routes.py
</code></pre>

<p>Visit <a href="http://localhost:5000/sightings/">http://localhost:5000/sightings/</a> in your favorite web browser.</p>

<p><img src="http://tpstatic.com/img/usermedia/cTXqxLGvj0OwSg1olvEBkA/original.png" alt="/sightings/" /></p>

<p>That's some good-looking JSON! When we visited <a href="http://localhost:5000/sightings/">http://localhost:5000/sightings/</a>, the code in <strong>routes.py</strong> mapped the URL <code>/sightings/</code> to the function <code>sightings()</code>. <code>sightings()</code> issued a database query for the first 10 records of the "sightings" table and returned it to us as JSON in the browser.</p>

<p><strong>-- Checkpoint: 02_sightings_collection --</strong></p>

<p>Let's do the same thing for the second URL <code>sightings/&lt;id&gt;</code>. Open up <strong>routes.py</strong> and create a new URL mapping.</p>

<p><strong>sightings/routes.py</strong></p>

<pre><code>from flask import Flask, jsonify
.
.
.

@app.route('/sightings/&lt;int:sighting_id&gt;', methods=['GET'])
def sighting(sighting_id):
  if request.method == 'GET':
    result = Sighting.query.filter_by(id=sighting_id).first()

    json_result = {'sighted_at': result.sighted_at,
                   'reported_at': result.reported_at,
                   'location': result.location,
                   'shape': result.shape,
                   'duration': result.duration,
                   'description': result.description,
                   'lat': result.lat,
                   'lng': result.lng}

    return jsonify(items=json_result)


if __name__ == '__main__':
  ...
</code></pre>

<p>This mapping looks very similar to what we did for the <code>/sightings/</code> URL. Let's go through it line by line.</p>

<ol>
<li>Flask lets you capture <a href="http://flask.pocoo.org/docs/quickstart/#variable-rules">variables in a URL</a> by using the syntax <code>/url/&lt;variable_name&gt;</code>. We'll use this to show a sighting with the given ID. Looking at <strong>routes.py</strong> we start by creating a URL for <code>/sightings/&lt;int:sighting_id&gt;</code>. We'll make sure that <code>sighting_id</code> is an integer by using the converter <code>int</code>. Again I'm only supporting GET requests, but you can easily add more HTTP verbs to the list.</li>
<li>Next we map the URL <code>/sightings/&lt;int:sighting_id&gt;</code> to function <code>sighting()</code>, which takes the <code>sighting_id</code> as an input.</li>
<li>Inside <code>sighting()</code>, we run a query to retrieve the sighting with the given ID. For example, <code>Sighting.query.filter_by(id=1).first()</code> would be equivalent to the SQL statement <code>SELECT * from sightings WHERE id=1;</code></li>
<li>The query result is a SQLAlchemy object, so we convert it to a dictionary just like we did in the <code>sightings()</code> function, and then return it to the browser using <code>jsonify()</code>.</li>
</ol>

<p>Switch back to the browser and go to <a href="http://localhost:5000/sightings/1">http://localhost:5000/sightings/1</a></p>

<p><img src="http://tpstatic.com/img/usermedia/EFLX6KvE90CIuop97XhHrg/original.png" alt="/sightings/1" /></p>

<p>When we visited <a href="http://localhost:5000/sightings/1">http://localhost:5000/sightings/1</a>, the URL <code>/sightings/&lt;int:sighting_id&gt;</code> captured the number <code>1</code> and stored it in the variable <code>sighting_id</code>. <code>sighting_id</code> was passed to the function <code>sighting()</code>, which queried the "sightings" table for the record with the matching id. The result was returned to us as JSON in the browser.</p>

<p><strong>-- Checkpoint: 03_sighting_element --</strong></p>

<p>We've accomplished a lot so far. We implemented the two URLs for our API, supported GET requests, and returned that data as JSON. The last item remaining is to make more specific operations possible by adding optional parameters in a query string.</p>

<h2 id="query_parameters">Query Parameters</h2>

<p>In the <code>sightings()</code> function in <strong>routes.py</strong>, we've currently hardcoded the limit to 10 and the offset to 0. Let's make it possible for the developer to control how many records to return by passing his own limit and offset as optional parameters. Flask makes it possible to collect parameters from the URL like this:</p>

<pre><code>lim = request.args.get('limit', 10)
</code></pre>

<p>If a request for <code>/sightings/?limit=20</code> is made, then <code>lim</code> would be set to 20. If the <code>limit</code> parameter is not provided in the URL, then <code>lim</code> would default to 10.</p>

<p>Let's incorporate this into the <code>sightings()</code> function.</p>

<p><strong>sightings/routes.py</strong></p>

<pre><code>@app.route('/sightings/', methods=['GET'])
def sightings():
  if request.method == 'GET':
    lim = request.args.get('limit', 10)
    off = request.args.get('offset', 0)

    results = Sighting.query.limit(lim).offset(off).all()

    json_results = []
    .
    .
    .
</code></pre>

<p>The variables <code>lim</code> and <code>off</code> will read the values of the <code>limit</code> and <code>offset</code> parameters, if they exist. Otherwise they will default to 10 and 0, respectively. <code>lim</code> and <code>off</code> are then passed to the database query to return that portion of the sightings records.</p>

<p>Open up the browser and visit <a href="http://localhost:5000/sightings/?limit=3&amp;offset=30">http://localhost:5000/sightings/?limit=3&amp;offset=30</a>. You'll see a list of three sightings starting at record 30. Specify your own limit and offset to change the result window.</p>

<p><img src="http://tpstatic.com/img/usermedia/uS1Pa1QSUEuZrpWumrS0jQ/original.png" alt="limit offset" /></p>

<p><strong>-- Checkpoint: 04_limit_offset --</strong></p>

<p>Let's add one more specific operation. It would be really cool to return a list of UFO sightings around a certain location. For example, a request for <code>/sightings/?location=33.3942655,-104.5230242&amp;radius=10</code> would return a list of sightings within a 10 mile radius of Roswell, NM.</p>

<p>Let's figure out the database query first. We need some way to select all sightings around a latitude and longitude. The good folks of the Google Geo APIs Team have <a href="https://developers.google.com/maps/articles/phpsqlsearch_v3">shown the way to do this</a>. Here is their SQL statement and its description from their page.</p>

<pre><code>SELECT id, ( 3959 * acos( cos( radians(37) ) * cos( radians( lat ) ) * cos( radians( lng ) - radians(-122) ) + sin( radians(37) ) * sin( radians( lat ) ) ) ) AS distance FROM markers HAVING distance &lt; 25 ORDER BY distance LIMIT 0 , 20;
</code></pre>

<blockquote>
  <p>Here's the SQL statement that will find the closest 20 locations that are within a radius of 25 miles to the 37, -122 coordinate. It calculates the distance based on the latitude/longitude of that row and the target latitude/longitude, and then asks for only rows where the distance value is less than 25, orders the whole query by distance, and limits it to 20 results. To search by kilometers instead of miles, replace 3959 with 6371.</p>
</blockquote>

<p>Let's adapt this SQL statement for our needs. Currently the statement is hardcoded for the coordinates (37, -122), a radius of 25 miles, and a limit of 20 results. Let's replace them with variables that we can fill in with values from the URL query string.</p>

<pre><code>query = "SELECT id,  location, ( 3959 * acos( cos( radians( %(latitude)s ) ) * cos( radians( lat ) ) * cos( radians( lng ) - radians( %(longitude)s ) ) + sin( radians( %(latitude)s ) ) * sin( radians( lat ) ) ) ) AS distance FROM sightings HAVING distance &lt; %(radius)s ORDER BY distance LIMIT %(limit)s" % {"latitude": lat, "longitude": lng, "radius": radius, "limit": lim}
</code></pre>

<p>Now the hardcoded values have been replaced with keys which fetch their values from the string substitution dictionary. Let's go ahead and incorporate this into <strong>routes.py</strong></p>

<p><strong>sightings/routes.py</strong></p>

<pre><code>python
@app.route('/sightings/', methods=['GET'])
def sightings():
  if request.method == 'GET':
    lim = request.args.get('limit', 10)
    off = request.args.get('offset', 0)

    radius = request.args.get('radius', 10)
    location = request.args.get('location', ',')
    lat, lng = location.split(',')

    if lat and lng and radius:
      query = "SELECT id,  location, ( 3959 * acos( cos( radians( %(latitude)s ) ) * cos( radians( lat ) ) * cos( radians( lng ) - radians( %(longitude)s ) ) + sin( radians( %(latitude)s ) ) * sin( radians( lat ) ) ) ) AS distance FROM sightings HAVING distance &lt; %(radius)s ORDER BY distance LIMIT %(limit)s" % {"latitude": lat, "longitude": lng, "radius": radius, "limit": lim}

      results = Sighting.query.from_statement(query).all()

    else:
      results = Sighting.query.limit(lim).offset(off).all()

    json_results = []
    .
    .
    .
</code></pre>

<ol>
<li>Just as we did for the <code>limit</code> and <code>offset</code> parameters, we start by collecting parameters for <code>radius</code> and <code>location</code>, if they exist. The value of the location parameter is a field where latitude and longitude are separated by a comma. I chose to group latitude and longitude this way because they should always be submitted as a pair to the API.</li>
<li>Next, if the <code>lat</code> and <code>lng</code> values from the <code>location</code> parameter, and the <code>radius</code> parameter all exist, then we should prepare the custom SQL statement and execute it. The function <code>from_statement()</code> gives the ability to run raw SQL statements.</li>
<li>If <code>lat</code>, <code>lng</code>, or <code>radius</code> do not exist, then we should execute the SQL query we had before</li>
</ol>

<p>That should do it. Open up the browser and try it out for yourself. Remember that <code>limit</code> parameter can still be used to customize the result window. For example <a href="http://localhost:5000/sightings/?location=37.7749295,-122.4194155&amp;radius=25&amp;limit=3">http://localhost:5000/sightings/?location=37.7749295,-122.4194155&amp;radius=25&amp;limit=3</a> returns the closest three UFO sightings that are within a 25 mile radius of San Francisco, CA.</p>

<p><strong>-- Checkpoint: 05_location_radius --</strong></p>

<h1 id="next_steps">Next Steps</h1>

<p>APIs are awesome. By following the REST guidelines, you can design a logical and powerful web service that others can use. In this article, we built a RESTful API using Python and Flask. The concepts can be extended to create other more complex APIs.</p>

<p>There are several directions to go from here. Some ideas:</p>

<ul>
<li>I just showed how to support GET requests in the API. You could implement the rest of the RESTful grid by adding POST, PUT, and DELETE requests to your API.</li>
<li>I chose to make a JSON API. XML is another commonly used format, so you could make your API available in XML as well so that the developer can choose which format works best for him.</li>
<li><strong>(My favorite)</strong> Create your own API from scratch. Find a cool dataset or use one that you already own and build an API on top of it. Some good sources for finding datasets are:
<ul>
<li><a href="http://www.infochimps.com/marketplace">Infochimps Data Marketplace</a></li>
<li><a href="http://www.factual.com/data-apis/places">Factual Places APIs</a></li>
<li><a href="http://www.programmableweb.com/apis/directory">Programmable Web API Directory</a></li>
</ul></li>
</ul>

<p>So go forth, build a sweet API, and stay RESTful!</p>
<!-- /ko -->
    </div>
    
    
    <span class="hide" itemscope itemprop="publisher" itemtype="http://schema.org/Organization">
        <a href="http://tech.pro/" itemprop="url">Tech.pro</a>
    </span>

    
    

        <table class="tp-like-bar">
        <tr>
            <td class="tp-like-cell">
                <a class="btn btn-large btn-like -vote -article1213 no-tooltip" data-tp='{"id":1213,"type":"article","score":4}'>
                    <span class="icon-thumbs-up icon-white"></span>
                    <span class="unlike-lbl">Unlike this</span>
                    <span class="like-lbl">Like this post</span>
                </a>
            </td>
            <td width="100%" height="45"><hr/></td>
                <td nowrap="true" valign="middle">
                    <div class="social-media">
                        <ul class="social-list unstyled horizontal-list pull-right">
                            <li title="Tweet this Post" class="btn-social twitter -tooltip"></li>
                            <li title="Share on Facebook" class="btn-social facebook -tooltip"></li>
                            <li title="Share on Google+" class="btn-social googleplus -tooltip"></li>
                        </ul>
                    </div>
                </td>
        </tr>
    </table>

    
        <div id="gcgTCEhSSE-ntjWGzsoCYA" class=""></div>
    <script type="text/javascript">
        TP.ready(function () {
            $.get('/ajax/post/related-inline?id=1213&title=How+to+Build+an+API+with+Python+and+Flask', function (response, status) {  
                if(response.length > 0) {
                    $('#gcgTCEhSSE-ntjWGzsoCYA').html(response);
                    TP.minSidebarHeight();
                }
            });
        });
    </script>

    
    
    
    

<div class="tp-inline-register">
    
    <div class="login">
        <form method="POST" action="/login" class="clearfix" onsubmit="TP.trackEvent({category:'user_action',action:'inline_login'})">
            <h3>Login</h3>
            <input type="hidden" name="returnUrl" value="/tutorial/1213/how-to-build-an-api-with-python-and-flask" />
            <div class="control-group">
                <div class="controls">
                    <input class="box-sized-input" type="text" name="email" placeholder="Email Address"/>
                </div>
            </div>
            <div class="control-group">
                <div class="controls">
                    <input class="box-sized-input" name="password" type="password" placeholder="Password" />
                </div>
            </div>
            <div class="control-group">
                <div class="controls">
                    <button type="submit" class="btn btn-primary pull-right">Login</button>
                </div>
            </div>
        </form>
    </div>

    <div class="separator"></div>

    <!-- ko stopBinding: true -->
    <div class="register" id="inlineRegister">
        <form data-bind="submit: register" class="clearfix" onsubmit="TP.trackEvent({category:'user_action',action:'inline_register'})">
            <h3>Register</h3>
            <input type="hidden" name="returnUrl" value="/tutorial/1213/how-to-build-an-api-with-python-and-flask" />
            <div style="display: none; color: red; font-size: 12px; padding: 0 20px;" data-bind="text: errorMessage, visible: !!errorMessage()"></div>
            <div class="control-group">
                <div class="controls">
                    <input class="box-sized-input" type="text" placeholder="Email Address" 
                           data-bind="value: ui.email, valueUpdate: 'afterkeydown', hasfocus: email.hasFocus"/>
                    <span class="message" data-bind="text: email.message, css: email.css"></span>
                </div>
            </div>
            <div class="control-group">
                <div class="controls clearfix">
                    <div class="tb-half-wrapper left">
                        <input class="box-sized-input" type="text" placeholder="First Name" 
                               data-bind="value: ui.firstName, valueUpdate: 'afterkeydown', hasfocus: firstName.hasFocus" />    
                        <span class="message" data-bind="text: firstName.message, css: firstName.css"></span>
                    </div>
                    <div class="tb-half-wrapper right">
                        <input class="box-sized-input" type="text" placeholder="Last Name"
                               data-bind="value: ui.lastName, valueUpdate: 'afterkeydown', hasfocus: lastName.hasFocus" />
                        <span class="message" data-bind="text: lastName.message, css: lastName.css"></span>
                    </div>
                </div>
            </div>
            <div class="control-group">
                <div class="controls">
                    <input class="box-sized-input" type="password" placeholder="Password"
                           data-bind="value: password, valueUpdate: 'afterkeydown', hasfocus: password.hasFocus" />
                    <span class="message" data-bind="text: password.message, css: password.css"></span>
                </div>
            </div>
            
            <div class="control-group">
                <div class="controls">
                    <label class="checkbox pull-left">
                        <input type="checkbox" data-bind="checked: agreesToTerms, hasfocus: agreesToTerms.hasFocus" />
                        I agree to <a href="/terms-and-conditions">Tech.pro's Terms</a> and have read the <a href="/privacy">Privacy Policy</a>
                    </label>

                    <button type="submit" class="btn btn-primary pull-right">Register</button>
                </div>
            </div>
        </form>
    </div>
    <!-- /ko -->
</div>

<script type="text/javascript">
    TP.ready(function () {
        $.getScript("/scripts/vm.register.js").done(function() {
            var registerVM = new RegisterVM({"firstName":null,"lastName":null,"email":null,"username":null,"password":null,"key":"hBL9WLXxvbn6nHRwAifnIrPixbg/A+I0IYMt+DB6oH0=","redirect":"/tutorial/1213/how-to-build-an-api-with-python-and-flask","redirectTitle":"How to Build an API with Python and Flask","code":null,"registrationMessage":null,"trialId":null,"autoUsername":true,"urlSlug":null,"hookTitle":null,"whyJoinText":null,"title1":null,"subtext1":null,"title2":null,"subtext2":null,"title3":null,"subtext3":null,"title4":null,"subtext4":null});
            registerVM.email.hasFocus(false);
            ko.applyBindings(registerVM, document.getElementById("inlineRegister"));
        });
    });
</script>        <div id="comment-container">
                            <h3 class="tp-comment-header">Comments (<span class="-comment-count"></span>)</h3>    
                <div class="tp-comment-area">
                    
<ul class="tp-comment-list -parents">
    <li id="comment-21735" class="tp-comment parent -comment -entity" data-tp="{&quot;id&quot;:21735,&quot;type&quot;:&quot;c&quot;}" itemscope="" itemtype="http://schema.org/UserComments" >
        <div class="tp-comment-content">
                <span itemscope itemprop="creator" itemtype="http://schema.org/Person">
            <a href="http://tech.pro/djbp" style="width:48px;height:48px" class="tp-gravatar large " data-tp="{&quot;id&quot;:16954}">
        <img width="48" height="48"  alt="Duncan Payne" src="//www.gravatar.com/avatar/ed35264c8a14b80a04a13f1e58be7987.png?d=retro&amp;s=48"  
            itemprop="image"/>
    </a>

        <a class="tp-author" href="http://tech.pro/djbp" itemprop="url"><span itemprop="name">Duncan Payne</span></a>
    </span>
    <span class="tp-timestamp"><time datetime="2013-07-02T14:29:28" itemprop="commentTime">one year ago</time></span>

            
                <span class="-vote -comment-vote comment-vote -comment21735 " 
        data-tp="{&quot;commentId&quot;:21735,&quot;id&quot;:1213,&quot;type&quot;:&quot;article&quot;,&quot;score&quot;:0,&quot;hideOnZero&quot;:true}">
        <span class="like-group">
            &middot;
            <a class="like">
                <span>Like</span>
            </a>
            <a class="unlike">
                <span>Unlike</span>
            </a>
        </span>
        
        <span class="score ">
            <span>&middot;</span>
            <i class="icon-thumbs-up"></i>
            <span class="-score amount"></span>
        </span>
    </span>

            <div class="tp-comment-tools">
                        </div>

            <div class="tp-comment-body clean-type -body" itemprop="commentText">
<!-- ko stopBinding: true --><p>Thanks for writing this article. I'm currently in the process of investigating writing an API against a Django system and am doing some research around the area. The biggest question I have having read your article is to do with the addition of parameters after the '?' character in the URL. I've come to this article having <a href="https://mathieu.fenniak.net/stop-designing-fragile-web-apis/">read another</a>, suggesting that the approach you have outlined is a path to writing a fragile API with respect to future compatibility. Please understand that this is all new to me, so I am no expert, but I am intrigued to know what you think about this subject. The API I will be implementing will be on a very complex system, which is frequently updated, so I am keen to get things as correct as possible before I start.</p>

<p>Thanks again.</p>
<!-- /ko -->            </div>
            <div class="tp-interact-group">
                    <a class="tp-reply-toggle -children-toggle" style="display:none;" itemprop="replyToUrl">
                        <i class="tp-di-icon">i</i> Reply
                    </a>
            </div>
        </div>
        <ul class="tp-comment-list child -children" style="display: block">
            
    <li id="comment-21741" class="tp-comment -comment  -entity" data-tp="{&quot;id&quot;:21741,&quot;parent&quot;:21735,&quot;type&quot;:&quot;c&quot;}"  itemscope itemprop="comment" itemtype="http://schema.org/UserComments">
        <div class="tp-comment-content">
                <span itemscope itemprop="creator" itemtype="http://schema.org/Person">
            <a href="http://tech.pro/lpolepeddi" style="width:30px;height:30px" class="tp-gravatar input " data-tp="{&quot;id&quot;:16109}">
        <img width="30" height="30"  alt="Lalith Polepeddi" src="//tpstatic.com/img/usermedia/3I4Xa76fhkWnYTzttmvTcA/cropped-w30-h30.png"  
            itemprop="image"/>
    </a>

        <a class="tp-author" href="http://tech.pro/lpolepeddi" itemprop="url"><span itemprop="name">Lalith Polepeddi</span></a>
    </span>
    <span class="tp-timestamp"><time datetime="2013-07-02T19:22:50" itemprop="commentTime">one year ago</time></span>

                <span class="-vote -comment-vote comment-vote -comment21741 " 
        data-tp="{&quot;commentId&quot;:21741,&quot;id&quot;:1213,&quot;type&quot;:&quot;article&quot;,&quot;score&quot;:0,&quot;hideOnZero&quot;:true}">
        <span class="like-group">
            &middot;
            <a class="like">
                <span>Like</span>
            </a>
            <a class="unlike">
                <span>Unlike</span>
            </a>
        </span>
        
        <span class="score ">
            <span>&middot;</span>
            <i class="icon-thumbs-up"></i>
            <span class="-score amount"></span>
        </span>
    </span>

            

            <div class="tp-comment-body clean-type -body" itemprop="commentText">
                <!-- ko stopBinding: true --><p>Hey Duncan, thanks for the link. API design is subjective - one person's best practices may be another person's worst practices. With that in mind, here is my opinion.</p>

<p>The author of the article you sent compares the two FBI URLs at the beginning, saying the first URL is a programmer's design and the second one shows its intent. APIs are for programmers. Their purpose is to give programmers a flexible interface to your data so that they can build their on services on top of it. </p>

<p>In my article, I could have made my location URL <code>/sightings/nearme</code>. Instead, I made it <code>/sightings/?location=:lat,:lng&amp;radius=:r</code> because this is the more general case; it can be used for "near me" queries as well as queries around other locations. I don't know what application developers might build on top of this API, so providing a general endpoint provides a flexible interface for them to do that.</p>

<p>The author of the article addresses this point of genericness by saying if you design with intent, it allows you to design a better API, because it lets you develop a great user interface. The author is confusing an API endpoint with a URL. A user interface can be built on top of an API and have pretty URLs like <code>/wanted/most</code> or <code>/sightings/nearme</code>. But those pretty URLs don't make sense as API endpoints because they limit an application developer's freedom in deciding what data they want to retrieve. The API endpoint should be the general case. The developer can decide to call those endpoints through pretty URLs in the user interface. But those pretty URLs should not be mixed in with API endpoints, they are not the same thing.</p>

<p>Finally to your comment. For the reasons above, having parameters after the '?' does not automatically mean a fragile or future-incompatible design. I feel it does the opposite - it provides a robust interface for programmers to build whatever they want, which may change in the future.</p>

<p>These are my opinions, and ultimately it is your decision about which design appeals to you. Two good resources for your API design journey are:</p>

<ul>
<li>Apigee's <a href="http://apigee.com/about/api-best-practices">API Best Practices</a></li>
<li>Googles <a href="http://www.youtube.com/watch?v=aAb7hSCtvGw">How To Design A Good API and Why it Matters</a></li>
</ul>

<p>Good luck with your API, and send me a link if it's public. I'd dig checking it out and learning from it.</p>
<!-- /ko -->
            </div>
        </div>
    </li>
    <li id="comment-21742" class="tp-comment -comment  -entity" data-tp="{&quot;id&quot;:21742,&quot;parent&quot;:21735,&quot;type&quot;:&quot;c&quot;}"  itemscope itemprop="comment" itemtype="http://schema.org/UserComments">
        <div class="tp-comment-content">
                <span itemscope itemprop="creator" itemtype="http://schema.org/Person">
            <a href="http://tech.pro/djbp" style="width:30px;height:30px" class="tp-gravatar input " data-tp="{&quot;id&quot;:16954}">
        <img width="30" height="30"  alt="Duncan Payne" src="//www.gravatar.com/avatar/ed35264c8a14b80a04a13f1e58be7987.png?d=retro&amp;s=30"  
            itemprop="image"/>
    </a>

        <a class="tp-author" href="http://tech.pro/djbp" itemprop="url"><span itemprop="name">Duncan Payne</span></a>
    </span>
    <span class="tp-timestamp"><time datetime="2013-07-02T21:50:13" itemprop="commentTime">one year ago</time></span>

                <span class="-vote -comment-vote comment-vote -comment21742 " 
        data-tp="{&quot;commentId&quot;:21742,&quot;id&quot;:1213,&quot;type&quot;:&quot;article&quot;,&quot;score&quot;:0,&quot;hideOnZero&quot;:true}">
        <span class="like-group">
            &middot;
            <a class="like">
                <span>Like</span>
            </a>
            <a class="unlike">
                <span>Unlike</span>
            </a>
        </span>
        
        <span class="score ">
            <span>&middot;</span>
            <i class="icon-thumbs-up"></i>
            <span class="-score amount"></span>
        </span>
    </span>

            

            <div class="tp-comment-body clean-type -body" itemprop="commentText">
                <!-- ko stopBinding: true --><p>Thank you very much for your in-depth reply. Before I read either your post or the article I have referenced above, I had been leaning towards an API which would accept parameters in the end point URLs and it was a shock to read an article suggesting otherwise. So I am very grateful to your reply - and particularly for the links you have provided.</p>

<p>What concerns me about the intent-driven approach is that I would struggle to write an API which would give a developer enough freedom to do what they wanted without accepting parameters. I can certainly see a case for the intent-driven approach in certain situations - perhaps a mix of the two will be of benefit - that's something I will have to see about.</p>

<p>Unfortunately the API will not be publicly available - access to it will be strictly controlled based on the nature of the site - thanks for your interest though. I truly am grateful when people are so thorough in their replies.</p>
<!-- /ko -->
            </div>
        </div>
    </li>
                    </ul>
    </li>
    <li id="comment-21494" class="tp-comment parent -comment -entity" data-tp="{&quot;id&quot;:21494,&quot;type&quot;:&quot;c&quot;}" itemscope="" itemtype="http://schema.org/UserComments" >
        <div class="tp-comment-content">
                <span itemscope itemprop="creator" itemtype="http://schema.org/Person">
            <a href="http://tech.pro/nad2000" style="width:48px;height:48px" class="tp-gravatar large " data-tp="{&quot;id&quot;:16285}">
        <img width="48" height="48"  alt="Rad Cirskis" src="//www.gravatar.com/avatar/5887ca943fb6720a6ae30f2d1fb82b55.png?d=retro&amp;s=48"  
            itemprop="image"/>
    </a>

        <a class="tp-author" href="http://tech.pro/nad2000" itemprop="url"><span itemprop="name">Rad Cirskis</span></a>
    </span>
    <span class="tp-timestamp"><time datetime="2013-04-23T04:07:46" itemprop="commentTime">one year ago</time></span>

            
                <span class="-vote -comment-vote comment-vote -comment21494 " 
        data-tp="{&quot;commentId&quot;:21494,&quot;id&quot;:1213,&quot;type&quot;:&quot;article&quot;,&quot;score&quot;:0,&quot;hideOnZero&quot;:true}">
        <span class="like-group">
            &middot;
            <a class="like">
                <span>Like</span>
            </a>
            <a class="unlike">
                <span>Unlike</span>
            </a>
        </span>
        
        <span class="score ">
            <span>&middot;</span>
            <i class="icon-thumbs-up"></i>
            <span class="-score amount"></span>
        </span>
    </span>

            <div class="tp-comment-tools">
                        </div>

            <div class="tp-comment-body clean-type -body" itemprop="commentText">
<!-- ko stopBinding: true --><p>Quick question: how can I get "distance" value into the result records? Thanks</p>
<!-- /ko -->            </div>
            <div class="tp-interact-group">
                    <a class="tp-reply-toggle -children-toggle" style="display:none;" itemprop="replyToUrl">
                        <i class="tp-di-icon">i</i> Reply
                    </a>
            </div>
        </div>
        <ul class="tp-comment-list child -children" style="display: block">
            
    <li id="comment-21495" class="tp-comment -comment  -entity" data-tp="{&quot;id&quot;:21495,&quot;parent&quot;:21494,&quot;type&quot;:&quot;c&quot;}"  itemscope itemprop="comment" itemtype="http://schema.org/UserComments">
        <div class="tp-comment-content">
                <span itemscope itemprop="creator" itemtype="http://schema.org/Person">
            <a href="http://tech.pro/lpolepeddi" style="width:30px;height:30px" class="tp-gravatar input " data-tp="{&quot;id&quot;:16109}">
        <img width="30" height="30"  alt="Lalith Polepeddi" src="//tpstatic.com/img/usermedia/3I4Xa76fhkWnYTzttmvTcA/cropped-w30-h30.png"  
            itemprop="image"/>
    </a>

        <a class="tp-author" href="http://tech.pro/lpolepeddi" itemprop="url"><span itemprop="name">Lalith Polepeddi</span></a>
    </span>
    <span class="tp-timestamp"><time datetime="2013-04-23T07:04:14" itemprop="commentTime">one year ago</time></span>

                <span class="-vote -comment-vote comment-vote -comment21495 " 
        data-tp="{&quot;commentId&quot;:21495,&quot;id&quot;:1213,&quot;type&quot;:&quot;article&quot;,&quot;score&quot;:0,&quot;hideOnZero&quot;:true}">
        <span class="like-group">
            &middot;
            <a class="like">
                <span>Like</span>
            </a>
            <a class="unlike">
                <span>Unlike</span>
            </a>
        </span>
        
        <span class="score ">
            <span>&middot;</span>
            <i class="icon-thumbs-up"></i>
            <span class="-score amount"></span>
        </span>
    </span>

            

            <div class="tp-comment-body clean-type -body" itemprop="commentText">
                <!-- ko stopBinding: true --><p>To display a 'distance' field inside each JSON item in the API results, you could add a key to the dictionary in <a href="https://github.com/cuttarug/sightings/blob/master/routes.py#L43-L50">lines 43-50 of routes.py</a>:</p>

<pre><code>d = {'sighted_at': result.sighted_at,
     'reported_at': result.reported_at,
      .
      .
      .
     'lng': result.lng 
     'distance': result.distance}
</code></pre>

<p>If you're not doing a location query and you're just doing the regular query in <a href="https://github.com/cuttarug/sightings/blob/master/routes.py#L39">line 39</a>, the results won't have a distance field, so you'll need to check for that so that an error isn't thrown.</p>
<!-- /ko -->
            </div>
        </div>
    </li>
                    </ul>
    </li>
    <li id="comment-21493" class="tp-comment parent -comment -entity" data-tp="{&quot;id&quot;:21493,&quot;type&quot;:&quot;c&quot;}" itemscope="" itemtype="http://schema.org/UserComments" >
        <div class="tp-comment-content">
                <span itemscope itemprop="creator" itemtype="http://schema.org/Person">
            <a href="http://tech.pro/nad2000" style="width:48px;height:48px" class="tp-gravatar large " data-tp="{&quot;id&quot;:16285}">
        <img width="48" height="48"  alt="Rad Cirskis" src="//www.gravatar.com/avatar/5887ca943fb6720a6ae30f2d1fb82b55.png?d=retro&amp;s=48"  
            itemprop="image"/>
    </a>

        <a class="tp-author" href="http://tech.pro/nad2000" itemprop="url"><span itemprop="name">Rad Cirskis</span></a>
    </span>
    <span class="tp-timestamp"><time datetime="2013-04-23T04:06:13" itemprop="commentTime">one year ago</time></span>

            
                <span class="-vote -comment-vote comment-vote -comment21493 " 
        data-tp="{&quot;commentId&quot;:21493,&quot;id&quot;:1213,&quot;type&quot;:&quot;article&quot;,&quot;score&quot;:0,&quot;hideOnZero&quot;:true}">
        <span class="like-group">
            &middot;
            <a class="like">
                <span>Like</span>
            </a>
            <a class="unlike">
                <span>Unlike</span>
            </a>
        </span>
        
        <span class="score ">
            <span>&middot;</span>
            <i class="icon-thumbs-up"></i>
            <span class="-score amount"></span>
        </span>
    </span>

            <div class="tp-comment-tools">
                        </div>

            <div class="tp-comment-body clean-type -body" itemprop="commentText">
<!-- ko stopBinding: true --><p>Thank you for the tutorials. It is a very intro into Pythons web-app stack.
I would suggest to factor out  record mapping to the dictionary.
Here is a versions with that and sqlite3 as a backend https://github.com/nad2000/sightings/tree/sqlite. It requires a hocking-up to the connection event to get to the raw sqlite3 connection to extend it with trigonometric functions.
Cheers!</p>
<!-- /ko -->            </div>
            <div class="tp-interact-group">
                    <a class="tp-reply-toggle -children-toggle"  itemprop="replyToUrl">
                        <i class="tp-di-icon">i</i> Reply
                    </a>
            </div>
        </div>
        <ul class="tp-comment-list child -children" style="display: none">
            
                    </ul>
    </li>
    <li id="comment-21408" class="tp-comment parent -comment -entity" data-tp="{&quot;id&quot;:21408,&quot;type&quot;:&quot;c&quot;}" itemscope="" itemtype="http://schema.org/UserComments" >
        <div class="tp-comment-content">
                <span itemscope itemprop="creator" itemtype="http://schema.org/Person">
            <a href="http://tech.pro/khalidabuhakmeh" style="width:48px;height:48px" class="tp-gravatar large " data-tp="{&quot;id&quot;:16037}">
        <img width="48" height="48"  alt="Khalid Abuhakmeh" src="//tpstatic.com/img/usermedia/1TrAidq2IUWW4_7WW5E2ew/cropped-w48-h48.png"  
            itemprop="image"/>
    </a>

        <a class="tp-author" href="http://tech.pro/khalidabuhakmeh" itemprop="url"><span itemprop="name">Khalid Abuhakmeh</span></a>
    </span>
    <span class="tp-timestamp"><time datetime="2013-04-12T15:09:03" itemprop="commentTime">one year ago</time></span>

            
                <span class="-vote -comment-vote comment-vote -comment21408 " 
        data-tp="{&quot;commentId&quot;:21408,&quot;id&quot;:1213,&quot;type&quot;:&quot;article&quot;,&quot;score&quot;:0,&quot;hideOnZero&quot;:true}">
        <span class="like-group">
            &middot;
            <a class="like">
                <span>Like</span>
            </a>
            <a class="unlike">
                <span>Unlike</span>
            </a>
        </span>
        
        <span class="score ">
            <span>&middot;</span>
            <i class="icon-thumbs-up"></i>
            <span class="-score amount"></span>
        </span>
    </span>

            <div class="tp-comment-tools">
                        </div>

            <div class="tp-comment-body clean-type -body" itemprop="commentText">
<!-- ko stopBinding: true --><p>I am a .NET developer, and wonder isn't there anything in Python that just let's you build RESTful APIs by defining types / contracts / or conventions?</p>

<p>Rails has the resources API, .NET has ServiceStack (WebAPI as a second alternative), and I also manage a library called Restful Routing.</p>

<p>In Restful Routing you just declare a resource like this.</p>

<pre><code>map.Resources&lt;SightingsController&gt;();
</code></pre>

<p>and that gives you:</p>

<pre><code>Index (GET), Show (GET), New(GET), Create (POST), Edit (GET), Update (PUT), Destroy (DELETE).
</code></pre>

<p>New and Edit are for showing forms in a web application, but the other methods request DTOs. Now you just have to implement the methods accordingly.</p>

<p>If that doesn't exist, maybe it would be a fun project for a Pythoner to take on.</p>

<p>Great post, very interesting to see how the other side lives.</p>
<!-- /ko -->            </div>
            <div class="tp-interact-group">
                    <a class="tp-reply-toggle -children-toggle" style="display:none;" itemprop="replyToUrl">
                        <i class="tp-di-icon">i</i> Reply
                    </a>
            </div>
        </div>
        <ul class="tp-comment-list child -children" style="display: block">
            
    <li id="comment-21448" class="tp-comment -comment  -entity" data-tp="{&quot;id&quot;:21448,&quot;parent&quot;:21408,&quot;type&quot;:&quot;c&quot;}"  itemscope itemprop="comment" itemtype="http://schema.org/UserComments">
        <div class="tp-comment-content">
                <span itemscope itemprop="creator" itemtype="http://schema.org/Person">
            <a href="http://tech.pro/lpolepeddi" style="width:30px;height:30px" class="tp-gravatar input " data-tp="{&quot;id&quot;:16109}">
        <img width="30" height="30"  alt="Lalith Polepeddi" src="//tpstatic.com/img/usermedia/3I4Xa76fhkWnYTzttmvTcA/cropped-w30-h30.png"  
            itemprop="image"/>
    </a>

        <a class="tp-author" href="http://tech.pro/lpolepeddi" itemprop="url"><span itemprop="name">Lalith Polepeddi</span></a>
    </span>
    <span class="tp-timestamp"><time datetime="2013-04-15T21:32:45" itemprop="commentTime">one year ago</time></span>

                <span class="-vote -comment-vote comment-vote -comment21448 " 
        data-tp="{&quot;commentId&quot;:21448,&quot;id&quot;:1213,&quot;type&quot;:&quot;article&quot;,&quot;score&quot;:0,&quot;hideOnZero&quot;:true}">
        <span class="like-group">
            &middot;
            <a class="like">
                <span>Like</span>
            </a>
            <a class="unlike">
                <span>Unlike</span>
            </a>
        </span>
        
        <span class="score ">
            <span>&middot;</span>
            <i class="icon-thumbs-up"></i>
            <span class="-score amount"></span>
        </span>
    </span>

            

            <div class="tp-comment-body clean-type -body" itemprop="commentText">
                <!-- ko stopBinding: true --><p>Hey Khalid, thanks for the pointer to Restful Routing. </p>

<p>Flask has an extension called <a href="https://flask-restless.readthedocs.org/en/latest/">Flask-Restless</a> that gives a similar ability to easily create RESTful APIs. For the Django framework, there are plugins like <a href="https://bitbucket.org/jespern/django-piston/wiki/Home">Piston</a> that make this possible too. </p>

<p>Thanks for reading! I'm a fan of your articles, especially Understanding the Physical Internet.</p>
<!-- /ko -->
            </div>
        </div>
    </li>
                    </ul>
    </li>
    </ul>






                </div>
        </div>
</div>



        </div>
            <div id="sidebar" class="pane sidebar">
                
    
        <div class="stats-sidebar">
        
        <div class="stat-widget likes -vote -article1213 -tooltip" data-tp='{"id":1213,"type":"article","score":4}'>
            <div class="wdg-box">
                <span class="img"></span>
                <span class="lbl">Likes</span>
            </div>
            <div class="lbl-box">
                <span class="indicator"></span>
                <span class="amt -score">4</span>
            </div>
        </div>
        
        <div class="stat-widget views pull-right">
            <div class="wdg-box">
                <span class="img"></span>
                <span class="lbl">Views</span>
            </div>
            <div class="lbl-box">
                <span class="indicator"></span>
                <span class="amt">17k</span>
            </div>
        </div>
        
    </div>

    
    <div class="tp-about-author tp-box">
        <div class="header">About the Author</div>
            <a href="http://tech.pro/lpolepeddi" style="width:36px;height:36px" class="tp-gravatar pull-left" data-tp="{&quot;id&quot;:16109}">
        <img width="36" height="36"  alt="Lalith Polepeddi" src="//tpstatic.com/img/usermedia/3I4Xa76fhkWnYTzttmvTcA/cropped-w36-h36.png"  
            itemprop="image"/>
    </a>
    <div style="margin-top: 2px">
        <a class="member-name author" href="http://tech.pro/lpolepeddi">Lalith Polepeddi</a>
    </div>
    <div>
                <a class="-follow" data-tp="{&quot;id&quot;:16109,&quot;type&quot;:&quot;m&quot;}">Follow</a>

    </div>

        <br />
        <p></p>
        <hr class="full-hr" style="margin-top: 15px;" />
    </div>
    
        <div id="D2SlvnE2CkSG-w9Grk7e1g">
        <div style="width: 180px; height: 150px; margin-bottom: 20px;"></div>
    </div>
    <script type="text/javascript">
        TP.ready(function () {
            TP.adQueue.push({ adguid: 'D2SlvnE2CkSG-w9Grk7e1g', sizeId: 4 });
        });
    </script>


    <div class="tp-box">
        <h3>Want to write with us?</h3>
        <p>
            Anyone can write at Tech.pro. Writing at Tech.pro can help you 
            get recognized, spread knowledge, and
            inspire others.
            <br/>
                    <a style="margin-top: 10px;" class="btn " href="/register">Write with us</a>
        </p>
    </div>
<div class="tp-box">
    <h3 class="header">Invite a Friend</h3>
    <div class="tp-box-content">
        <p>
            Tech.pro is a communications platform and will become more useful to you as your colleagues join the site.
            Go ahead and invite a few today and start reaping the benefits of membership.
            
        </p>
        <p>
            <a class="btn btn-primary" href="/account/invite-others">Invite a Friend</a>
        </p>
    </div>
</div>
    

    
        <div id="dOLik2xROkmwY2wOZWYBLw" class="tp-box-content"></div>
    <script type="text/javascript">
        TP.ready(function () {
            $.get('/ajax/post/related?id=1213&title=How+to+Build+an+API+with+Python+and+Flask&pg=1', function (response, status) {  
                if(response.length > 0) {
                    $('#dOLik2xROkmwY2wOZWYBLw').html(response);
                    TP.minSidebarHeight();
                }
            });
        });
    </script>

    
    
    
    
    

        <div class="tp-box">
        <h3>Tech.pro Daily Email</h3>
        <p>
            Get the latest content from Tech.pro delivered to your Inbox each day. 
                Simply create an account to subscribe.
                <br />
            <a style="margin-top: 10px;" type="submit" class="btn" href="http://tech.pro/register">Subscribe</a>
        </p>
    </div>



            </div>    
    </div>
    <div id="footer">



        


<div class="row-fluid wrapper">

    <div class="span2 logo-wrapper" style="text-align: center">
        <a id="footerLogo2" href="http://tech.pro/"></a>
        <div class="footer-copyright">
            Copyright &copy; 2014 Tech.pro
        </div>
    </div>
    <div class="span8 link-lists-container">

        <ul class="footer-link-list pull-left">
            <li><a href="http://tech.pro/">Feed</a></li>
            
            <li><a href="http://tech.pro/tutorials">Tutorials</a></li>
            <li><a href="http://tech.pro/blogs">Blogs</a></li>
            <li><a href="http://tech.pro/links">Links</a></li>
            <li><a href="http://tech.pro/questions">Q&amp;A</a></li>
            <li><a href="http://tech.pro/account/build-network-start">Invite Others</a></li>
        </ul>

        <ul class="footer-link-list  pull-left">
            <li><a href="http://tech.pro/profiles">Network</a></li>
            <li><a href="http://tech.pro/profiles">Profiles</a></li>
            <li><a href="http://tech.pro/authors">Authors</a></li>
            <li><a href="http://tech.pro/projects">Projects</a></li>
            <li><a href="http://tech.pro/companies">Companies</a></li>
            <li><a href="http://tech.pro/network">My Network</a></li>
            
        </ul>

        

        <ul class="footer-link-list  pull-left">
            <li><a href="http://tech.pro/how-it-works">More</a></li>
            <li><a href="http://tech.pro/how-it-works">How Tech.pro Works</a></li>
            
            <li><a href="http://tech.pro/about-us">About Us</a></li>
            <li><a href="http://tech.pro/contact-us">Contact Us</a></li>
            <li><a href="http://tech.pro/privacy">Privacy</a></li>
            <li><a href="http://tech.pro/sitemap">Site Map</a></li>
        </ul>

       

    </div>
    <div class="span2 footer-social-container">
        <ul class="footer-social-list">
            <li>
                <a href="http://blog.tech.pro" target="_blank">
                    <span class="img blog"></span>
                    Blog
                </a>
            </li>
            <li>
                <a href="http://twitter.com/techdotpro" target="_blank">
                    <span class="img twitter"></span>
                    Twitter
                </a>
            </li>
            <li>
                <a href="http://www.linkedin.com/company/tech.pro-" target="_blank">
                    <span class="img linkedin"></span>
                    Linkedin
                </a>
            </li>
            <li>
                <a href="http://www.facebook.com/TechDotPro" target="_blank">
                    <span class="img facebook"></span>
                    Facebook
                </a>
            </li>
        </ul>
        <!--END: Social Icons-->

    </div>

</div>


<!--END: Logo & Links-->






        




    </div>
</div>




        </div>
    </div>
    <div id="fb-root"></div>

    <script src="//tpstatic.com/bundles/js/core?v=tdLV3j4WFPgF6gAnryzoPPo7oWurhWMckDpig-ct3bA1"></script>


    <script type="text/javascript">
        window.TP = $.extend({}, TP, new TechProApp($.extend({isAnonymous:true,verbose:false,rootUrl:"tech.pro",staticUrl:"tpstatic.com",userImagesRoot:"http://tpstatic.com/img/usermedia/",tenant:{site:"TechPro",twitterAccount:"techdotpro",title:"Tech.pro"},enableStyleCode:true,needTemplates:true},{$: jQuery})));
        TP.init();
        ko.applyBindings(new GlobalSearchViewModel(), document.getElementById("global-search"));

        // Check that cookies are enabled
        TP.ready(function() {
            setTimeout(function() {
                TP.setCookie("__test__", "idkfa", 1);
                if (TP.getCookie("__test__") !== "idkfa") {
                    TP.alert({
                        text: "Cookies must be enabled to correctly use this site. Sorry!",
                        lifetime: 60000,
                        type: "alert-error"
                    });
                } else {
                    TP.delCookie("__test__");
                }
            },400);
        });




            TP.bindNotificationCount();
    </script>
    
    <script type="text/html" id="gs_item_template">
        <li class="result mb -item" data-bind="css: {'hover':isHover}">
            <img class="result-img mb_media" data-bind="attr: {src:imageGuid}" />
            <div class="mb_body">
                <div class="result-title" data-bind="highlightText: { text: title, term: $root.query }"></div>
                <div class="result-sub" data-bind="highlightText: { text: subTitle, term: $root.query }"></div>
            </div>
        </li>
    </script>
    

    <script type="text/javascript">
        TP.ready(function() {
            TP.registerView('article', 1213);
            TP.bindVotingArea(".stats-sidebar, .tp-like-bar");
            TP.bindVotingArea(".tp-comment-list, .-comment-vote");
            //todo eventually reimplement along with the follow section
            TP.bindComments({
                entityId: 1213,
                entityType: 'article',
                listSelector: "#comment-container",
                countSelector:".-comment-count",
                currentCount: 9
            });
            TP.bindFollowingArea(".sidebar");
            if (!TP.isAnonymous) {
                $.get("/ajax/post/votes?ids=1213", function(response) {
                    TP.showVoteStatus(response.data);
                });
            }
            TP.bindFlags(".-article-profile", "article");
        });
        
        TP.bindSocialShare({"title":"How to Build an API with Python and Flask","url":"http://tech.pro/tutorial/1213/how-to-build-an-api-with-python-and-flask","twitterUsername":"@cuttarug","image":"//tpstatic.com/img/usermedia/_l-y8DHBzkSP-5z5j7hnWw/original.png","summary":"Behind every great web app is a great API. In this article, I'll show you how to design a RESTful..."});

    </script>

    <script src="//tpstatic.com/scripts/track_reader.js"></script>


    <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-32414873-1']);
_gaq.push(['_setDomainName', 'tech.pro']);
_gaq.push(['_trackPageview']);
_gaq.push(['_setCustomVar',2,'Author','16109 - Lalith Polepeddi',3]);
_gaq.push(['_setCustomVar',4,'PublishDate','04/11/13',3]);
_gaq.push(['_setCustomVar',3,'Tag','API',3]);
_gaq.push(['_setCustomVar',3,'Tag','Python',3]);
_gaq.push(['_setCustomVar',3,'Tag','Flask',3]);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>


    <!--[if lte IE 8]>
    <script type="text/javascript">
        var $buoop = {vs:{i:8,f:15,s:4,n:9}} ;
        $buoop.ol = window.onload;
        window.onload=function(){
         try {if ($buoop.ol) $buoop.ol();}catch (e) {}
         var e = document.createElement("script");
         e.setAttribute("type", "text/javascript");
         e.setAttribute("src", "http://browser-update.org/update.js");
         document.body.appendChild(e);
        };
    </script>
    <![endif]-->
    
        <!-- Google Tag Manager -->
        <noscript>
            <iframe src="//www.googletagmanager.com/ns.html?id=GTM-NW95DB"
                    height="0" width="0" style="display: none; visibility: hidden"></iframe>
        </noscript>
        <script>
            (function(w, d, s, l, i) {w[l] = w[l] || [];w[l].push({'gtm.start':new Date().getTime(),event: 'gtm.js'});
                var f = d.getElementsByTagName(s)[0],j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';j.async = true;
                j.src ='//www.googletagmanager.com/gtm.js?id=' + i + dl;f.parentNode.insertBefore(j, f);
            })(window, document, 'script', 'dataLayer', 'GTM-NW95DB'); </script>
        <!-- End Google Tag Manager -->


    
</body>

</html>
