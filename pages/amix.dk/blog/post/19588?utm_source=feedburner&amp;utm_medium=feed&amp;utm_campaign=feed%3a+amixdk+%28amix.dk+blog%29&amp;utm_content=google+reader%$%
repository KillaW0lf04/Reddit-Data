<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<base href="http://amix.dk/"/>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>How Reddit ranking algorithms work - amix.dk</title>
<script type="text/javascript">
  var PageOracle = {
    view_edit_mode: 'on',
    page_hidden: '0',

    getPageId: function() {
      return '119588';
    },

    isCmsPage: function() {
      return 'False' == 'True';
    },

    getMenuId: function() {
      return 1;
    },

    getBaseURL: function() {
      return 'http://amix.dk';
    },

    hasEditPermission: function() {
      return 'False' == 'True';
    },

    isAdmin: function() {
      return 'False' == 'True';
    },
    
    isHiddenToPublic: function() {
      return PageOracle.page_hidden == '1';
    },

    getViewEditMode: function() {
      return PageOracle.view_edit_mode;
    },

    isLoggedIn: function() {
        return 'True' == 'False';
    }
  };

  function getPageOracle() {
    return PageOracle;
  }
  </script>
<link rel="stylesheet" type="text/css" href="http://amix.dk/generated/SiteHeader_styles.css"/>
<script src="http://amix.dk/generated/SiteHeader_scripts.js" type="text/javascript"></script>
<style type="text/css">#navigation{display:none;}#CMS_HeadLine{display:none;}</style>
<script>
    var win_loc = window.location;
    if(win_loc.host.indexOf('www.') != -1) {
        var cur_loc = window.location.toString();
        window.location = cur_loc.replace('www.', '');
    }
</script>
<style type="text/css">.CMS_ListMenu li#Main a{background-color:#fff;color:#333;}.CMS_ListMenu li#Main a:hover{background-color:#fff;}</style>
<link rel="stylesheet" href="http://f.fontdeck.com/s/css/Uf28uh55+ApRRbdMqWM/5y2U+0o/amix.dk/22182.css" type="text/css"/>
<link rel="alternate" type="application/rdf+xml" title="RSS" href="http://feeds.feedburner.com/amixdk"/>
<link rel="service.feed" type="application/atom+xml" title="Atom" href="http://feeds.feedburner.com/amixdk"/>
</head>
<body class="Main">
<div id="hrtop"></div>
<center>
<div id="container">
<div id="top">
<div id="v7">
 
<form id="searchbox_002288592806869833798:pkqz6zorjec" action="http://amix.dk/GSController/" style="padding: 2px 0 2px 0; margin: 0">
<input type="hidden" name="cx" value="002288592806869833798:pkqz6zorjec"/>
<input name="q" type="text" style="width: 155px" id="google_search" placeholder="Search >"/><br/>
</form>
 
</div>
<div id="logo">
<span style="color:#999; text-shadow: 1px 1px 1px #eee;"><a href="http://amix.dk/">Hacking and Gonzo</a>, a publication by Amir Salihefendic since 2000</span>
</div>
</div>
<table id="cnt_holder">
<tr>
<td id="content">
<div id="CMS_ContentText">
<span class="Content"><div id="Blog_amix.dk blog" post_id="19588"><div class="CMS_BlogEntry" id="BlogEntry_19588">
<h1>
How Reddit ranking algorithms work
</h1>
<div class="CMS_BlogText">
<div style="float:right; padding: 0px 0px 10px 10px"><img src="http://amix.dk/uploads/reddit.png" alt="Reddit Icon"/></div>
<p>
This is a follow up post to <a href="http://amix.dk/blog/post/19574">How Hacker News ranking algorithm works</a>. This time around I will examine how <a href="http://www.reddit.com/" target="_blank">Reddit's</a> default story and comment rankings work. Reddit's algorithms are fairly simple to understand and to implement and in this post I'll dig deeper into them.
</p>
<p>
The first part of this post will focus on story ranking, i.e. how are Reddit stories ranked? The second part of this post will focus on comment ranking, which does not use the same ranking as stories (unlike <a href="http://news.ycombinator.com/" target="_blank">Hacker News</a>), Reddit's comment ranking algorithm is quite interesting and the idea guy behind it is Randall Munroe (the author of <a href="http://xkcd.com/" target="_blank">xkcd</a>).
</p>
<h3>Digging into the story ranking code</h3>
<p>
Reddit is open sourced and the code is freely available. Reddit is implemented in Python and their <a href="http://code.reddit.com/" target="_blank">code is located here</a>. Their sorting algorithms are implemented in <a href="http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/" target="_blank">Pyrex</a>, which is a language to write Python C extensions. They have used Pyrex for speed reasons. I have rewritten <a href="http://code.reddit.com/browser/r2/r2/lib/db/_sorts.pyx" target="_blank">their Pyrex implementation</a> into pure Python since it's easier to read.
</p>
<p>
The default story algorithm called the <span class="hl">hot ranking</span> is implemented like this:
</p>
<div class="highlight"><pre><span class="c">#Rewritten code from /r2/r2/lib/db/_sorts.pyx</span>

<span class="k">from</span> <span class="nn">datetime</span> <span class="k">import</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">timedelta</span>
<span class="k">from</span> <span class="nn">math</span> <span class="k">import</span> <span class="n">log</span>

<span class="n">epoch</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">1970</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">epoch_seconds</span><span class="p">(</span><span class="n">date</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Returns the number of seconds from the epoch to date.&quot;&quot;&quot;</span>
    <span class="n">td</span> <span class="o">=</span> <span class="n">date</span> <span class="o">-</span> <span class="n">epoch</span>
    <span class="k">return</span> <span class="n">td</span><span class="o">.</span><span class="n">days</span> <span class="o">*</span> <span class="mi">86400</span> <span class="o">+</span> <span class="n">td</span><span class="o">.</span><span class="n">seconds</span> <span class="o">+</span> <span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">td</span><span class="o">.</span><span class="n">microseconds</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000000</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">ups</span><span class="p">,</span> <span class="n">downs</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">ups</span> <span class="o">-</span> <span class="n">downs</span>

<span class="k">def</span> <span class="nf">hot</span><span class="p">(</span><span class="n">ups</span><span class="p">,</span> <span class="n">downs</span><span class="p">,</span> <span class="n">date</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;The hot formula. Should match the equivalent function in postgres.&quot;&quot;&quot;</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="n">ups</span><span class="p">,</span> <span class="n">downs</span><span class="p">)</span>
    <span class="n">order</span> <span class="o">=</span> <span class="n">log</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">10</span><span class="p">)</span>
    <span class="n">sign</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">s</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">s</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>
    <span class="n">seconds</span> <span class="o">=</span> <span class="n">epoch_seconds</span><span class="p">(</span><span class="n">date</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1134028003</span>
    <span class="k">return</span> <span class="nb">round</span><span class="p">(</span><span class="n">order</span> <span class="o">+</span> <span class="n">sign</span> <span class="o">*</span> <span class="n">seconds</span> <span class="o">/</span> <span class="mi">45000</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
</pre></div>
<p>
In mathematical notation the <span class="hl">hot algorithm</span> looks like this (I have this from <a href="http://www.seomoz.org/blog/reddit-stumbleupon-delicious-and-hacker-news-algorithms-exposed" target="_blank">SEOmoz</a>, but I doubt they are the author of this):
</p>
<p>
<img src="http://amix.dk/uploads/reddit_cf_algorithm.png" alt="Reddit's algorithm"/>
</p>
<h3>Effects of submission time</h3>
<p>
Following things can be said about submission time related to story ranking:
</p>
<ul>
<li>
Submission time has a big impact on the ranking and the algorithm will rank newer stories higher than older
</li>
<li>
The score won't decrease as time goes by, but newer stories will get a higher score than older. This is a different approach than the Hacker News's algorithm which decreases the score as time goes by
</li>
</ul>
<p>
Here is a visualization of the score for a story that has same amount of up and downvotes, but different submission time:
</p>
<p>
<img src="http://amix.dk/uploads/reddit_score_time.png" alt="Reddit's score"/>
</p>
<h3>The logarithm scale</h3>
<p>
Reddit's <span class="hl">hot ranking</span> uses the logarithm function to weight the first votes higher than the rest. Generally this applies:
</p>
<ul>
<li>
The first 10 upvotes have the same weight as the next 100 upvotes which have the same weight as the next 1000 etc...
</li>
</ul>
<p>
Here is a visualization:
</p>
<p>
<img src="http://amix.dk/uploads/reddit_log_function.png" alt="The logarithm function's effects"/>
</p>
<p>
Without using the logarithm scale the score would look like this:
</p>
<p>
<img src="http://amix.dk/uploads/reddit_without_log.png" alt="Without logarithm function"/>
</p>
<h3>Effects of downvotes</h3>
<p>
Reddit is one of the few sites that has downvotes. As you can read in the code a story's "score" is defined to be:
</p>
<ul>
<li>
<span class="hl">up_votes - down_votes</span>
</li>
</ul>
<p>
The meaning of this can be visualized like this:
</p>
<p>
<img src="http://amix.dk/uploads/reddit_up_down.png" alt="Effects of down votes"/><br/>
This has a big impact for stories that get a lot of upvotes and downvotes (e.g. controversial stories) as they will get a lower ranking than stories that just get upvotes. This could explain why kittens (and other non-controversial stories) rank so high :)
</p>
<h3>Conclusion of Reddit's story ranking</h3>
<ul>
<li>
Submission time is a very important parameter, generally newer stories will rank higher than older
</li>
<li>
The first 10 upvotes count as high as the next 100. E.g. a story that has 10 upvotes and a story that has 50 upvotes will have a similar ranking
</li>
<li>
Controversial stories that get similar amounts of upvotes and downvotes will get a low ranking compared to stories that mainly get upvotes
</li>
</ul>
<h3>How Reddit's comment ranking works</h3>
<p>
<a href="http://xkcd.com/" target="_blank">Randall Munroe</a> of xkcd is the idea guy behind Reddit's <span class="hl">best ranking</span>. He has written a great blog post about it:
</p>
<ul>
<li>
<a href="http://blog.reddit.com/2009/10/reddits-new-comment-sorting-system.html" target="_blank">reddit's new comment sorting system</a>
</li>
</ul>
<p>
You should read his blog post as it explains the algorithm in a very understandable way. The outline of his blog post is following:
</p>
<ul>
<li>
Using the <span class="hl">hot algorithm</span> for comments isn't that smart since it seems to be heavily biased toward comments posted early
</li>
<li>
In a comment system you want to rank the best comments highest regardless of their submission time
</li>
<li>
A solution for this has been found in 1927 by Edwin B. Wilson and it's called "Wilson score interval", Wilson's score interval can be made into "the confidence sort"
</li>
<li>
The confidence sort treats the vote count as a statistical sampling of a hypothetical full vote by everyone - like in an opinion poll
</li>
<li>
<a href="http://www.evanmiller.org/how-not-to-sort-by-average-rating.html" target="_blank">How Not To Sort By Average Rating</a> outlines the confidence ranking in higher detail, definitely recommended reading!
</li>
</ul>
<h3>Digging into the comment ranking code</h3>
<p>
The confidence sort algorithm is implemented in <a href="http://code.reddit.com/browser/r2/r2/lib/db/_sorts.pyx" target="_blank">_sorts.pyx</a>, I have rewritten their Pyrex implementation into pure Python (do also note that I have removed their caching optimization):
</p>
<div class="highlight"><pre><span class="c">#Rewritten code from /r2/r2/lib/db/_sorts.pyx</span>

<span class="k">from</span> <span class="nn">math</span> <span class="k">import</span> <span class="n">sqrt</span>

<span class="k">def</span> <span class="nf">_confidence</span><span class="p">(</span><span class="n">ups</span><span class="p">,</span> <span class="n">downs</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">ups</span> <span class="o">+</span> <span class="n">downs</span>

    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>

    <span class="n">z</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="c">#1.0 = 85%, 1.6 = 95%</span>
    <span class="n">phat</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">ups</span><span class="p">)</span> <span class="o">/</span> <span class="n">n</span>
    <span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">phat</span><span class="o">+</span><span class="n">z</span><span class="o">*</span><span class="n">z</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="n">z</span><span class="o">*</span><span class="p">((</span><span class="n">phat</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">phat</span><span class="p">)</span><span class="o">+</span><span class="n">z</span><span class="o">*</span><span class="n">z</span><span class="o">/</span><span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="n">n</span><span class="p">))</span><span class="o">/</span><span class="n">n</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">z</span><span class="o">*</span><span class="n">z</span><span class="o">/</span><span class="n">n</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">confidence</span><span class="p">(</span><span class="n">ups</span><span class="p">,</span> <span class="n">downs</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">ups</span> <span class="o">+</span> <span class="n">downs</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">_confidence</span><span class="p">(</span><span class="n">ups</span><span class="p">,</span> <span class="n">downs</span><span class="p">)</span>
</pre></div>
<p>
The confidence sort uses <a href="http://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval#Wilson_score_interval" target="_blank">Wilson score interval</a> and the mathematical notation looks like this:
</p>
<p>
<img src="http://amix.dk/uploads/wilsons_score_interval.png" alt="Wilson's score interval"/><br/>
In the above formula the parameters are defined in a following way:
</p>
<ul>
<li>
<span class="hl">p</span> is the observed fraction of positive ratings
</li>
<li>
<span class="hl">n</span> is the total number of ratings
</li>
<li>
<span class="hl">z<sub>α/2</sub></span> is the (1-α/2) quantile of the standard normal distribution
</li>
</ul>
<p>
Let's summarize the above in a following manner:
</p>
<ul>
<li>
The confidence sort treats the vote count as a statistical sampling of a hypothetical full vote by everyone
</li>
<li>
The confidence sort gives a comment a provisional ranking that it is 85% sure it will get to
</li>
<li>
The more votes, the closer the 85% confidence score gets to the actual score
</li>
<li>
Wilson's interval has good properties for a small number of trials and/or an extreme probability
</li>
</ul>
<p>
Randall has a great example of how the confidence sort ranks comments <a href="http://blog.reddit.com/2009/10/reddits-new-comment-sorting-system.html" target="_blank">in his blog post</a>:
</p>
<p>
<blockquote>
<p>
If a comment has one upvote and zero downvotes, it has a 100% upvote rate, but since there's not very much data, the system will keep it near the bottom. But if it has 10 upvotes and only 1 downvote, the system might have enough confidence to place it above something with 40 upvotes and 20 downvotes -- figuring that by the time it's also gotten 40 upvotes, it's almost certain it will have fewer than 20 downvotes. And the best part is that if it's wrong (which it is 15% of the time), it will quickly get more data, since the comment with less data is near the top.
</p>
</blockquote>
</p>
<h3>Effects of submission time: there are none!</h3>
<p>
The great thing about the <span class="hl">confidence sort</span> is that submission time is irrelevant (much unlike the <span class="hl">hot sort</span> or Hacker News's ranking algorithm). Comments are ranked by confidence and by data sampling - - i.e. the more votes a comment gets the more accurate its score will become.
</p>
<h3>Visualization</h3>
<p>
Let's visualize the confidence sort and see how it ranks comments. We can use Randall's example:
</p>
<p>
<img src="http://amix.dk/uploads/reddit_confidence_sort.png" alt="Reddit's confidence score visualized"/><br/>
As you can see the confidence sort does not care about how many votes a comment have received, but about how many upvotes it has compared to the total number of votes and to the sampling size!
</p>
<h3>Application outside of ranking</h3>
<p>
Like <a href="http://www.evanmiller.org/how-not-to-sort-by-average-rating.html" target="_blank">Evan Miller</a> notes Wilson's score interval has applications outside of ranking. He lists 3 examples:
</p>
<ul>
<li>
Detect spam/abuse: What percentage of people who see this item will mark it as spam?
</li>
<li>
Create a "best of" list: What percentage of people who see this item will mark it as "best of"?
</li>
<li>
Create a "Most emailed" list: What percentage of people who see this page will click "Email"?
</li>
</ul>
<p>
To use it you only need two things:
</p>
<ul>
<li>
the total number of ratings/samplings
</li>
<li>
the positive number of ratings/samplings
</li>
</ul>
<p>
Given how powerful and simple this is, it's amazing that most sites today use the naive ways to rank their content. This includes billion dollar companies like <a href="http://amazon.com/" target="_blank">Amazon.com</a>, which define <span class="hl">Average rating = (Positive ratings) / (Total ratings)</span>.
</p>
<h3>Conclusion</h3>
<p>
I hope you have found this useful and leave comments if you have any questions or remarks.
</p>
<p>
Happy hacking as always :)
</p>
<h3>Related</h3>
<ul>
<li>
<a href="http://possiblywrong.wordpress.com/2011/06/05/reddits-comment-ranking-algorithm/" target="_blank">Reddit’s comment ranking algorithm</a>, discusses a bug that Reddit's implementation has
</li>
</ul>
</div>
<div class="CMS_BlogEntryInfo">
23. Nov 2010
<span style="padding: 0 10px">
•
</span>
<span>
<a href="blog/label/7#Code">Code</a>
&middot;
<a href="blog/label/13#Design">Design</a>
&middot;
<a href="blog/label/10#Python">Python</a>
</span>
</div>
</div>
</div></span>
</div>
</td>
<td id="menu">
<div class="about_info">
<div class="author_image"><img src="http://amix.dk/uploads/amix3k1.png" alt="Amir Salihefendic"/></div>
<div class="author_text">
I'm Amir Salihefendic<br/>
founder of <a href="http://doist.io/" target="_blank">Doist</a><br/>
creator of <a href="http://todoist.com/" target="_blank">Todoist</a> and <a href="http://wedoist.com/" target="_blank">Wedoist</a>
</div>
</div>
<b>Stay in Touch</b>
<ul class="blue">
<li><a href="http://twitter.com/amix3k"><span>Twitter @amix3k</span></a></li>
<li><a href="http://www.cloudflare.com/email-protection#09686460714968646071276d62"><span><span class="__cf_email__" data-cfemail="4f2e2226370f2e222637612b24">[email&nbsp;protected]</span><script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script></span></a></li>
<li><a href="http://feeds.feedburner.com/amixdk"><span>Blog RSS feed</span></a></li>
</ul>
<b>Current Focus</b>
<ul class="blue">
<li><a href="https://doist.io/" target="_blank">Doist</a></li>
<li><a href="https://todoist.com/" target="_blank">Todoist</a></li>
<li><a href="https://wedoist.com/" target="_blank">Wedoist</a></li>
<li><a href="http://github.com/amix" target="_blank">github.com/amix</a></li>
</ul>
<b>Labels</b>
<ul class="red">
<ul class="">
<li><a href="blog/label/25#AJAX-and-comet">AJAX and comet</a></li>
<li><a href="blog/label/3#amix-dk-related">amix.dk related</a></li>
<li><a href="blog/label/14#Announcements">Announcements</a></li>
<li><a href="blog/label/26#Benchmarks">Benchmarks</a></li>
<li><a href="blog/label/31#Books">Books</a></li>
<li><a href="blog/label/7#Code">Code</a></li>
<li><a href="blog/label/24#Code-improvement">Code improvement</a></li>
<li><a href="blog/label/20#Code-rewrite">Code rewrite</a></li>
<li><a href="blog/label/23#Database">Database</a></li>
<li><a href="blog/label/13#Design">Design</a></li>
<li><a href="blog/label/12#Education">Education</a></li>
<li><a href="blog/label/18#Interesting">Interesting</a></li>
<li><a href="blog/label/11#JavaScript">JavaScript</a></li>
<li><a href="blog/label/2#Life">Life</a></li>
<li><a href="blog/label/27#node-js">node.js</a></li>
<li><a href="blog/label/8#Orangoo">Orangoo</a></li>
<li><a href="blog/label/19#Plurk">Plurk</a></li>
<li><a href="blog/label/4#Political">Political</a></li>
<li><a href="blog/label/29#Posters">Posters</a></li>
<li><a href="blog/label/30#Presentations">Presentations</a></li>
<li><a href="blog/label/32#Productivity">Productivity</a></li>
<li><a href="blog/label/22#Psychology">Psychology</a></li>
<li><a href="blog/label/10#Python">Python</a></li>
<li><a href="blog/label/33#Reading-list">Reading list</a></li>
<li><a href="blog/label/21#Security">Security</a></li>
<li><a href="blog/label/9#Skeletonz">Skeletonz</a></li>
<li><a href="blog/label/6#Stuff">Stuff</a></li>
<li><a href="blog/label/15#Tips">Tips</a></li>
<li><a href="blog/label/16#Todoist">Todoist</a></li>
<li><a href="blog/label/5#VIM-Editor">VIM Editor</a></li>
<li><a href="blog/label/28#Wedoist">Wedoist</a></li>
</ul>
</ul>
<b>Archive</b>
<ul class="green">
<ul class="">
<li><a href="blog/archive/1-2014">2014</a></li>
<li><a href="blog/archive/1-2013">2013</a></li>
<li><a href="blog/archive/1-2012">2012</a></li>
<li><a href="blog/archive/1-2011">2011</a></li>
<li><a href="blog/archive/1-2010">2010</a></li>
<li><a href="blog/archive/1-2009">2009</a></li>
<li><a href="blog/archive/1-2008">2008</a></li>
<li><a href="blog/archive/1-2007">2007</a></li>
<li><a href="blog/archive/1-2006">2006</a></li>
<li><a href="blog/archive/1-2005">2005</a></li>
<li><a href="blog/archive/1-2004">2004</a></li>
</ul>
</ul>
</td>
</tr>
</table>
</div>
<div id="bottom">
&copy; Amir Salihefendic
</div>
</center>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-5309378-6']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l=document.getElementsByTagName("a"),t=document.createElement("textarea");for(i=0;l.length-i;i++){try{a=l[i].getAttribute("href");if(a&&"www.cloudflare.com/email-protection"==a.substr(7 ,35)){s='';j=43;r=parseInt(a.substr(j,2),16);for(j+=2;a.length-j&&a.substr(j,1)!='X';j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}j+=1;s+=a.substr(j,a.length-j);t.innerHTML=s.replace(/</g,"&lt;").replace(/>/g,"&gt;");l[i].setAttribute("href","mailto:"+t.value);}}catch(e){}}}catch(e){}})();
/* ]]> */
</script>
</body>
</html>
