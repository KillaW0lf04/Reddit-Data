










<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<!-- ViewVC :: http://www.viewvc.org/ -->
<head>
<title>[projects] Contents of /peps/trunk/pep-3146.txt</title>
<meta name="generator" content="ViewVC 1.1.5" />
<link rel="shortcut icon" href="/viewvc/images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="/viewvc/styles.css" type="text/css" />

</head>
<body>
<div class="vc_navheader">
<table><tr>
<td><strong><a href="/view?view=roots"><span class="pathdiv">/</span></a><a href="/view/">[projects]</a><span class="pathdiv">/</span><a href="/view/peps/">peps</a><span class="pathdiv">/</span><a href="/view/peps/trunk/">trunk</a><span class="pathdiv">/</span><a href="/view/peps/trunk/pep-3146.txt?view=log">pep-3146.txt</a></strong></td>
<td style="text-align: right;"></td>
</tr></table>
</div>
<div style="float: right; padding: 5px;"><a href="http://www.viewvc.org/" title="ViewVC Home"><img src="/viewvc/images/viewvc-logo.png" alt="ViewVC logotype" width="240" height="70" /></a></div>
<h1>Contents of /peps/trunk/pep-3146.txt</h1>

<p style="margin:0;">

<a href="/view/peps/trunk/"><img src="/viewvc/images/back_small.png" class="vc_icon" alt="Parent Directory" /> Parent Directory</a>

| <a href="/view/peps/trunk/pep-3146.txt?view=log"><img src="/viewvc/images/log.png" class="vc_icon" alt="Revision Log" /> Revision Log</a>




</p>

<hr />
<div class="vc_summary">
Revision <a href="/view?view=revision&amp;revision=79008"><strong>79008</strong></a> -
(<a href="/view/peps/trunk/pep-3146.txt?annotate=79008"><strong>show annotations</strong></a>)
(<a href="/view/*checkout*/peps/trunk/pep-3146.txt?revision=79008"><strong>download</strong></a>)


<br /><em>Tue Mar 16 23:36:46 2010 UTC</em>
(4 years, 3 months ago)
by <em>collin.winter</em>






<br />File MIME type: text/plain


<br />File size: 68392 byte(s)






<pre class="vc_log">Mark PEP 3146 as accepted, following Guido's decision at PyCon US 2010.</pre>

</div>






<div id="vc_file">
<table cellspacing="0" cellpadding="0">








<tr class="vc_row_odd" id="l1">
<td class="vc_file_line_number">1</td>

<td class="vc_file_line_text">PEP: 3146
</td>
</tr>




<tr class="vc_row_odd" id="l2">
<td class="vc_file_line_number">2</td>

<td class="vc_file_line_text">Title: Merging Unladen Swallow into CPython
</td>
</tr>




<tr class="vc_row_odd" id="l3">
<td class="vc_file_line_number">3</td>

<td class="vc_file_line_text">Version: $Revision$
</td>
</tr>




<tr class="vc_row_odd" id="l4">
<td class="vc_file_line_number">4</td>

<td class="vc_file_line_text">Last-Modified: $Date$
</td>
</tr>




<tr class="vc_row_odd" id="l5">
<td class="vc_file_line_number">5</td>

<td class="vc_file_line_text">Author: Collin Winter &lt;collinwinter@google.com&gt;,
</td>
</tr>




<tr class="vc_row_odd" id="l6">
<td class="vc_file_line_number">6</td>

<td class="vc_file_line_text">        Jeffrey Yasskin &lt;jyasskin@google.com&gt;,
</td>
</tr>




<tr class="vc_row_odd" id="l7">
<td class="vc_file_line_number">7</td>

<td class="vc_file_line_text">        Reid Kleckner &lt;rnk@mit.edu&gt;
</td>
</tr>




<tr class="vc_row_odd" id="l8">
<td class="vc_file_line_number">8</td>

<td class="vc_file_line_text">Status: Accepted
</td>
</tr>




<tr class="vc_row_odd" id="l9">
<td class="vc_file_line_number">9</td>

<td class="vc_file_line_text">Type: Standards Track
</td>
</tr>




<tr class="vc_row_odd" id="l10">
<td class="vc_file_line_number">10</td>

<td class="vc_file_line_text">Content-Type: text/x-rst
</td>
</tr>




<tr class="vc_row_odd" id="l11">
<td class="vc_file_line_number">11</td>

<td class="vc_file_line_text">Created: 1-Jan-2010
</td>
</tr>




<tr class="vc_row_odd" id="l12">
<td class="vc_file_line_number">12</td>

<td class="vc_file_line_text">Python-Version: 3.3
</td>
</tr>




<tr class="vc_row_odd" id="l13">
<td class="vc_file_line_number">13</td>

<td class="vc_file_line_text">Post-History:
</td>
</tr>




<tr class="vc_row_odd" id="l14">
<td class="vc_file_line_number">14</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l15">
<td class="vc_file_line_number">15</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l16">
<td class="vc_file_line_number">16</td>

<td class="vc_file_line_text">Abstract
</td>
</tr>




<tr class="vc_row_odd" id="l17">
<td class="vc_file_line_number">17</td>

<td class="vc_file_line_text">========
</td>
</tr>




<tr class="vc_row_odd" id="l18">
<td class="vc_file_line_number">18</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l19">
<td class="vc_file_line_number">19</td>

<td class="vc_file_line_text">This PEP proposes the merger of the Unladen Swallow project [#us]_ into
</td>
</tr>




<tr class="vc_row_odd" id="l20">
<td class="vc_file_line_number">20</td>

<td class="vc_file_line_text">CPython&#39;s source tree. Unladen Swallow is an open-source branch of CPython
</td>
</tr>




<tr class="vc_row_odd" id="l21">
<td class="vc_file_line_number">21</td>

<td class="vc_file_line_text">focused on performance. Unladen Swallow is source-compatible with valid Python
</td>
</tr>




<tr class="vc_row_odd" id="l22">
<td class="vc_file_line_number">22</td>

<td class="vc_file_line_text">2.6.4 applications and C extension modules.
</td>
</tr>




<tr class="vc_row_odd" id="l23">
<td class="vc_file_line_number">23</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l24">
<td class="vc_file_line_number">24</td>

<td class="vc_file_line_text">Unladen Swallow adds a just-in-time (JIT) compiler to CPython, allowing for the
</td>
</tr>




<tr class="vc_row_odd" id="l25">
<td class="vc_file_line_number">25</td>

<td class="vc_file_line_text">compilation of selected Python code to optimized machine code. Beyond classical
</td>
</tr>




<tr class="vc_row_odd" id="l26">
<td class="vc_file_line_number">26</td>

<td class="vc_file_line_text">static compiler optimizations, Unladen Swallow&#39;s JIT compiler takes advantage of
</td>
</tr>




<tr class="vc_row_odd" id="l27">
<td class="vc_file_line_number">27</td>

<td class="vc_file_line_text">data collected at runtime to make checked assumptions about code behaviour,
</td>
</tr>




<tr class="vc_row_odd" id="l28">
<td class="vc_file_line_number">28</td>

<td class="vc_file_line_text">allowing the production of faster machine code.
</td>
</tr>




<tr class="vc_row_odd" id="l29">
<td class="vc_file_line_number">29</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l30">
<td class="vc_file_line_number">30</td>

<td class="vc_file_line_text">This PEP proposes to integrate Unladen Swallow into CPython&#39;s development tree
</td>
</tr>




<tr class="vc_row_odd" id="l31">
<td class="vc_file_line_number">31</td>

<td class="vc_file_line_text">in a separate ``py3k-jit`` branch, targeted for eventual merger with the main
</td>
</tr>




<tr class="vc_row_odd" id="l32">
<td class="vc_file_line_number">32</td>

<td class="vc_file_line_text">``py3k`` branch. While Unladen Swallow is by no means finished or perfect, we
</td>
</tr>




<tr class="vc_row_odd" id="l33">
<td class="vc_file_line_number">33</td>

<td class="vc_file_line_text">feel that Unladen Swallow has reached sufficient maturity to warrant
</td>
</tr>




<tr class="vc_row_odd" id="l34">
<td class="vc_file_line_number">34</td>

<td class="vc_file_line_text">incorporation into CPython&#39;s roadmap. We have sought to create a stable platform
</td>
</tr>




<tr class="vc_row_odd" id="l35">
<td class="vc_file_line_number">35</td>

<td class="vc_file_line_text">that the wider CPython development team can build upon, a platform that will
</td>
</tr>




<tr class="vc_row_odd" id="l36">
<td class="vc_file_line_number">36</td>

<td class="vc_file_line_text">yield increasing performance for years to come.
</td>
</tr>




<tr class="vc_row_odd" id="l37">
<td class="vc_file_line_number">37</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l38">
<td class="vc_file_line_number">38</td>

<td class="vc_file_line_text">This PEP will detail Unladen Swallow&#39;s implementation and how it differs from
</td>
</tr>




<tr class="vc_row_odd" id="l39">
<td class="vc_file_line_number">39</td>

<td class="vc_file_line_text">CPython 2.6.4; the benchmarks used to measure performance; the tools used to
</td>
</tr>




<tr class="vc_row_odd" id="l40">
<td class="vc_file_line_number">40</td>

<td class="vc_file_line_text">ensure correctness and compatibility; the impact on CPython&#39;s current platform
</td>
</tr>




<tr class="vc_row_odd" id="l41">
<td class="vc_file_line_number">41</td>

<td class="vc_file_line_text">support; and the impact on the CPython core development process. The PEP
</td>
</tr>




<tr class="vc_row_odd" id="l42">
<td class="vc_file_line_number">42</td>

<td class="vc_file_line_text">concludes with a proposed merger plan and brief notes on possible directions
</td>
</tr>




<tr class="vc_row_odd" id="l43">
<td class="vc_file_line_number">43</td>

<td class="vc_file_line_text">for future work.
</td>
</tr>




<tr class="vc_row_odd" id="l44">
<td class="vc_file_line_number">44</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l45">
<td class="vc_file_line_number">45</td>

<td class="vc_file_line_text">We seek the following from the BDFL:
</td>
</tr>




<tr class="vc_row_odd" id="l46">
<td class="vc_file_line_number">46</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l47">
<td class="vc_file_line_number">47</td>

<td class="vc_file_line_text">- Approval for the overall concept of adding a just-in-time compiler to CPython,
</td>
</tr>




<tr class="vc_row_odd" id="l48">
<td class="vc_file_line_number">48</td>

<td class="vc_file_line_text">  following the design laid out below.
</td>
</tr>




<tr class="vc_row_odd" id="l49">
<td class="vc_file_line_number">49</td>

<td class="vc_file_line_text">- Permission to continue working on the just-in-time compiler in the CPython
</td>
</tr>




<tr class="vc_row_odd" id="l50">
<td class="vc_file_line_number">50</td>

<td class="vc_file_line_text">  source tree.
</td>
</tr>




<tr class="vc_row_odd" id="l51">
<td class="vc_file_line_number">51</td>

<td class="vc_file_line_text">- Permission to eventually merge the just-in-time compiler into the ``py3k``
</td>
</tr>




<tr class="vc_row_odd" id="l52">
<td class="vc_file_line_number">52</td>

<td class="vc_file_line_text">  branch once all blocking issues [#us-punchlist]_ have been addressed.
</td>
</tr>




<tr class="vc_row_odd" id="l53">
<td class="vc_file_line_number">53</td>

<td class="vc_file_line_text">- A pony.
</td>
</tr>




<tr class="vc_row_odd" id="l54">
<td class="vc_file_line_number">54</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l55">
<td class="vc_file_line_number">55</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l56">
<td class="vc_file_line_number">56</td>

<td class="vc_file_line_text">Rationale, Implementation
</td>
</tr>




<tr class="vc_row_odd" id="l57">
<td class="vc_file_line_number">57</td>

<td class="vc_file_line_text">=========================
</td>
</tr>




<tr class="vc_row_odd" id="l58">
<td class="vc_file_line_number">58</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l59">
<td class="vc_file_line_number">59</td>

<td class="vc_file_line_text">Many companies and individuals would like Python to be faster, to enable its
</td>
</tr>




<tr class="vc_row_odd" id="l60">
<td class="vc_file_line_number">60</td>

<td class="vc_file_line_text">use in more projects. Google is one such company.
</td>
</tr>




<tr class="vc_row_odd" id="l61">
<td class="vc_file_line_number">61</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l62">
<td class="vc_file_line_number">62</td>

<td class="vc_file_line_text">Unladen Swallow is a Google-sponsored branch of CPython, initiated to improve
</td>
</tr>




<tr class="vc_row_odd" id="l63">
<td class="vc_file_line_number">63</td>

<td class="vc_file_line_text">the performance of Google&#39;s numerous Python libraries, tools and applications.
</td>
</tr>




<tr class="vc_row_odd" id="l64">
<td class="vc_file_line_number">64</td>

<td class="vc_file_line_text">To make the adoption of Unladen Swallow as easy as possible, the project
</td>
</tr>




<tr class="vc_row_odd" id="l65">
<td class="vc_file_line_number">65</td>

<td class="vc_file_line_text">initially aimed at four goals:
</td>
</tr>




<tr class="vc_row_odd" id="l66">
<td class="vc_file_line_number">66</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l67">
<td class="vc_file_line_number">67</td>

<td class="vc_file_line_text">- A performance improvement of 5x over the baseline of CPython 2.6.4 for
</td>
</tr>




<tr class="vc_row_odd" id="l68">
<td class="vc_file_line_number">68</td>

<td class="vc_file_line_text">  single-threaded code.
</td>
</tr>




<tr class="vc_row_odd" id="l69">
<td class="vc_file_line_number">69</td>

<td class="vc_file_line_text">- 100% source compatibility with valid CPython 2.6 applications.
</td>
</tr>




<tr class="vc_row_odd" id="l70">
<td class="vc_file_line_number">70</td>

<td class="vc_file_line_text">- 100% source compatibility with valid CPython 2.6 C extension modules.
</td>
</tr>




<tr class="vc_row_odd" id="l71">
<td class="vc_file_line_number">71</td>

<td class="vc_file_line_text">- Design for eventual merger back into CPython.
</td>
</tr>




<tr class="vc_row_odd" id="l72">
<td class="vc_file_line_number">72</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l73">
<td class="vc_file_line_number">73</td>

<td class="vc_file_line_text">We chose 2.6.4 as our baseline because Google uses CPython 2.4 internally, and
</td>
</tr>




<tr class="vc_row_odd" id="l74">
<td class="vc_file_line_number">74</td>

<td class="vc_file_line_text">jumping directly from CPython 2.4 to CPython 3.x was considered infeasible.
</td>
</tr>




<tr class="vc_row_odd" id="l75">
<td class="vc_file_line_number">75</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l76">
<td class="vc_file_line_number">76</td>

<td class="vc_file_line_text">To achieve the desired performance, Unladen Swallow has implemented a
</td>
</tr>




<tr class="vc_row_odd" id="l77">
<td class="vc_file_line_number">77</td>

<td class="vc_file_line_text">just-in-time (JIT) compiler [#jit]_ in the tradition of Urs Hoelzle&#39;s work on
</td>
</tr>




<tr class="vc_row_odd" id="l78">
<td class="vc_file_line_number">78</td>

<td class="vc_file_line_text">Self [#urs-self]_, gathering feedback at runtime and using that to inform
</td>
</tr>




<tr class="vc_row_odd" id="l79">
<td class="vc_file_line_number">79</td>

<td class="vc_file_line_text">compile-time optimizations. This is similar to the approach taken by the current
</td>
</tr>




<tr class="vc_row_odd" id="l80">
<td class="vc_file_line_number">80</td>

<td class="vc_file_line_text">breed of JavaScript engines [#v8]_, [#squirrelfishextreme]_; most Java virtual
</td>
</tr>




<tr class="vc_row_odd" id="l81">
<td class="vc_file_line_number">81</td>

<td class="vc_file_line_text">machines [#hotspot]_; Rubinius [#rubinius]_, MacRuby [#macruby]_, and other Ruby
</td>
</tr>




<tr class="vc_row_odd" id="l82">
<td class="vc_file_line_number">82</td>

<td class="vc_file_line_text">implementations; Psyco [#psyco]_; and others.
</td>
</tr>




<tr class="vc_row_odd" id="l83">
<td class="vc_file_line_number">83</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l84">
<td class="vc_file_line_number">84</td>

<td class="vc_file_line_text">We explicitly reject any suggestion that our ideas are original. We have sought
</td>
</tr>




<tr class="vc_row_odd" id="l85">
<td class="vc_file_line_number">85</td>

<td class="vc_file_line_text">to reuse the published work of other researchers wherever possible. If we have
</td>
</tr>




<tr class="vc_row_odd" id="l86">
<td class="vc_file_line_number">86</td>

<td class="vc_file_line_text">done any original work, it is by accident. We have tried, as much as possible,
</td>
</tr>




<tr class="vc_row_odd" id="l87">
<td class="vc_file_line_number">87</td>

<td class="vc_file_line_text">to take good ideas from all corners of the academic and industrial community. A
</td>
</tr>




<tr class="vc_row_odd" id="l88">
<td class="vc_file_line_number">88</td>

<td class="vc_file_line_text">partial list of the research papers that have informed Unladen Swallow is
</td>
</tr>




<tr class="vc_row_odd" id="l89">
<td class="vc_file_line_number">89</td>

<td class="vc_file_line_text">available on the Unladen Swallow wiki [#us-relevantpapers]_.
</td>
</tr>




<tr class="vc_row_odd" id="l90">
<td class="vc_file_line_number">90</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l91">
<td class="vc_file_line_number">91</td>

<td class="vc_file_line_text">The key observation about optimizing dynamic languages is that they are only
</td>
</tr>




<tr class="vc_row_odd" id="l92">
<td class="vc_file_line_number">92</td>

<td class="vc_file_line_text">dynamic in theory; in practice, each individual function or snippet of code is
</td>
</tr>




<tr class="vc_row_odd" id="l93">
<td class="vc_file_line_number">93</td>

<td class="vc_file_line_text">relatively static, using a stable set of types and child functions. The current
</td>
</tr>




<tr class="vc_row_odd" id="l94">
<td class="vc_file_line_number">94</td>

<td class="vc_file_line_text">CPython bytecode interpreter assumes the worst about the code it is running,
</td>
</tr>




<tr class="vc_row_odd" id="l95">
<td class="vc_file_line_number">95</td>

<td class="vc_file_line_text">that at any moment the user might override the ``len()`` function or pass a
</td>
</tr>




<tr class="vc_row_odd" id="l96">
<td class="vc_file_line_number">96</td>

<td class="vc_file_line_text">never-before-seen type into a function. In practice this never happens, but user
</td>
</tr>




<tr class="vc_row_odd" id="l97">
<td class="vc_file_line_number">97</td>

<td class="vc_file_line_text">code pays for that support. Unladen Swallow takes advantage of the relatively
</td>
</tr>




<tr class="vc_row_odd" id="l98">
<td class="vc_file_line_number">98</td>

<td class="vc_file_line_text">static nature of user code to improve performance.
</td>
</tr>




<tr class="vc_row_odd" id="l99">
<td class="vc_file_line_number">99</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l100">
<td class="vc_file_line_number">100</td>

<td class="vc_file_line_text">At a high level, the Unladen Swallow JIT compiler works by translating a
</td>
</tr>




<tr class="vc_row_odd" id="l101">
<td class="vc_file_line_number">101</td>

<td class="vc_file_line_text">function&#39;s CPython bytecode to platform-specific machine code, using data
</td>
</tr>




<tr class="vc_row_odd" id="l102">
<td class="vc_file_line_number">102</td>

<td class="vc_file_line_text">collected at runtime, as well as classical compiler optimizations, to improve
</td>
</tr>




<tr class="vc_row_odd" id="l103">
<td class="vc_file_line_number">103</td>

<td class="vc_file_line_text">the quality of the generated machine code. Because we only want to spend
</td>
</tr>




<tr class="vc_row_odd" id="l104">
<td class="vc_file_line_number">104</td>

<td class="vc_file_line_text">resources compiling Python code that will actually benefit the runtime of the
</td>
</tr>




<tr class="vc_row_odd" id="l105">
<td class="vc_file_line_number">105</td>

<td class="vc_file_line_text">program, an online heuristic is used to assess how hot a given function is. Once
</td>
</tr>




<tr class="vc_row_odd" id="l106">
<td class="vc_file_line_number">106</td>

<td class="vc_file_line_text">the hotness value for a function crosses a given threshold, it is selected for
</td>
</tr>




<tr class="vc_row_odd" id="l107">
<td class="vc_file_line_number">107</td>

<td class="vc_file_line_text">compilation and optimization. Until a function is judged hot, however, it runs
</td>
</tr>




<tr class="vc_row_odd" id="l108">
<td class="vc_file_line_number">108</td>

<td class="vc_file_line_text">in the standard CPython eval loop, which in Unladen Swallow has been
</td>
</tr>




<tr class="vc_row_odd" id="l109">
<td class="vc_file_line_number">109</td>

<td class="vc_file_line_text">instrumented to record interesting data about each bytecode executed. This
</td>
</tr>




<tr class="vc_row_odd" id="l110">
<td class="vc_file_line_number">110</td>

<td class="vc_file_line_text">runtime data is used to reduce the flexibility of the generated machine code,
</td>
</tr>




<tr class="vc_row_odd" id="l111">
<td class="vc_file_line_number">111</td>

<td class="vc_file_line_text">allowing us to optimize for the common case. For example, we collect data on
</td>
</tr>




<tr class="vc_row_odd" id="l112">
<td class="vc_file_line_number">112</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l113">
<td class="vc_file_line_number">113</td>

<td class="vc_file_line_text">- Whether a branch was taken/not taken. If a branch is never taken, we will not
</td>
</tr>




<tr class="vc_row_odd" id="l114">
<td class="vc_file_line_number">114</td>

<td class="vc_file_line_text">  compile it to machine code.
</td>
</tr>




<tr class="vc_row_odd" id="l115">
<td class="vc_file_line_number">115</td>

<td class="vc_file_line_text">- Types used by operators. If we find that ``a + b`` is only ever adding
</td>
</tr>




<tr class="vc_row_odd" id="l116">
<td class="vc_file_line_number">116</td>

<td class="vc_file_line_text">  integers, the generated machine code for that snippet will not support adding
</td>
</tr>




<tr class="vc_row_odd" id="l117">
<td class="vc_file_line_number">117</td>

<td class="vc_file_line_text">  floats.
</td>
</tr>




<tr class="vc_row_odd" id="l118">
<td class="vc_file_line_number">118</td>

<td class="vc_file_line_text">- Functions called at each callsite. If we find that a particular ``foo()``
</td>
</tr>




<tr class="vc_row_odd" id="l119">
<td class="vc_file_line_number">119</td>

<td class="vc_file_line_text">  callsite is always calling the same ``foo`` function, we can optimize the
</td>
</tr>




<tr class="vc_row_odd" id="l120">
<td class="vc_file_line_number">120</td>

<td class="vc_file_line_text">  call or inline it away
</td>
</tr>




<tr class="vc_row_odd" id="l121">
<td class="vc_file_line_number">121</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l122">
<td class="vc_file_line_number">122</td>

<td class="vc_file_line_text">Refer to [#us-llvm-notes]_ for a complete list of data points gathered and how
</td>
</tr>




<tr class="vc_row_odd" id="l123">
<td class="vc_file_line_number">123</td>

<td class="vc_file_line_text">they are used.
</td>
</tr>




<tr class="vc_row_odd" id="l124">
<td class="vc_file_line_number">124</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l125">
<td class="vc_file_line_number">125</td>

<td class="vc_file_line_text">However, if by chance the historically-untaken branch is now taken, or some
</td>
</tr>




<tr class="vc_row_odd" id="l126">
<td class="vc_file_line_number">126</td>

<td class="vc_file_line_text">integer-optimized ``a + b`` snippet receives two strings, we must support this.
</td>
</tr>




<tr class="vc_row_odd" id="l127">
<td class="vc_file_line_number">127</td>

<td class="vc_file_line_text">We cannot change Python semantics. Each of these sections of optimized machine
</td>
</tr>




<tr class="vc_row_odd" id="l128">
<td class="vc_file_line_number">128</td>

<td class="vc_file_line_text">code is preceded by a `guard`, which checks whether the simplifying assumptions
</td>
</tr>




<tr class="vc_row_odd" id="l129">
<td class="vc_file_line_number">129</td>

<td class="vc_file_line_text">we made when optimizing still hold. If the assumptions are still valid, we run
</td>
</tr>




<tr class="vc_row_odd" id="l130">
<td class="vc_file_line_number">130</td>

<td class="vc_file_line_text">the optimized machine code; if they are not, we revert back to the interpreter
</td>
</tr>




<tr class="vc_row_odd" id="l131">
<td class="vc_file_line_number">131</td>

<td class="vc_file_line_text">and pick up where we left off.
</td>
</tr>




<tr class="vc_row_odd" id="l132">
<td class="vc_file_line_number">132</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l133">
<td class="vc_file_line_number">133</td>

<td class="vc_file_line_text">We have chosen to reuse a set of existing compiler libraries called LLVM
</td>
</tr>




<tr class="vc_row_odd" id="l134">
<td class="vc_file_line_number">134</td>

<td class="vc_file_line_text">[#llvm]_ for code generation and code optimization. This has saved our small
</td>
</tr>




<tr class="vc_row_odd" id="l135">
<td class="vc_file_line_number">135</td>

<td class="vc_file_line_text">team from needing to understand and debug code generation on multiple machine
</td>
</tr>




<tr class="vc_row_odd" id="l136">
<td class="vc_file_line_number">136</td>

<td class="vc_file_line_text">instruction sets and from needing to implement a large set of classical compiler
</td>
</tr>




<tr class="vc_row_odd" id="l137">
<td class="vc_file_line_number">137</td>

<td class="vc_file_line_text">optimizations. The project would not have been possible without such code reuse.
</td>
</tr>




<tr class="vc_row_odd" id="l138">
<td class="vc_file_line_number">138</td>

<td class="vc_file_line_text">We have found LLVM easy to modify and its community receptive to our suggestions
</td>
</tr>




<tr class="vc_row_odd" id="l139">
<td class="vc_file_line_number">139</td>

<td class="vc_file_line_text">and modifications.
</td>
</tr>




<tr class="vc_row_odd" id="l140">
<td class="vc_file_line_number">140</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l141">
<td class="vc_file_line_number">141</td>

<td class="vc_file_line_text">In somewhat more depth, Unladen Swallow&#39;s JIT works by compiling CPython
</td>
</tr>




<tr class="vc_row_odd" id="l142">
<td class="vc_file_line_number">142</td>

<td class="vc_file_line_text">bytecode to LLVM&#39;s own intermediate representation (IR) [#llvm-langref]_, taking
</td>
</tr>




<tr class="vc_row_odd" id="l143">
<td class="vc_file_line_number">143</td>

<td class="vc_file_line_text">into account any runtime data from the CPython eval loop. We then run a set of
</td>
</tr>




<tr class="vc_row_odd" id="l144">
<td class="vc_file_line_number">144</td>

<td class="vc_file_line_text">LLVM&#39;s built-in optimization passes, producing a smaller, optimized version of
</td>
</tr>




<tr class="vc_row_odd" id="l145">
<td class="vc_file_line_number">145</td>

<td class="vc_file_line_text">the original LLVM IR. LLVM then lowers the IR to platform-specific machine code,
</td>
</tr>




<tr class="vc_row_odd" id="l146">
<td class="vc_file_line_number">146</td>

<td class="vc_file_line_text">performing register allocation, instruction scheduling, and any necessary
</td>
</tr>




<tr class="vc_row_odd" id="l147">
<td class="vc_file_line_number">147</td>

<td class="vc_file_line_text">relocations. This arrangement of the compilation pipeline allows the LLVM-based
</td>
</tr>




<tr class="vc_row_odd" id="l148">
<td class="vc_file_line_number">148</td>

<td class="vc_file_line_text">JIT to be easily omitted from a compiled ``python`` binary by passing
</td>
</tr>




<tr class="vc_row_odd" id="l149">
<td class="vc_file_line_number">149</td>

<td class="vc_file_line_text">``--without-llvm`` to ``./configure``; various use cases for this flag are
</td>
</tr>




<tr class="vc_row_odd" id="l150">
<td class="vc_file_line_number">150</td>

<td class="vc_file_line_text">discussed later.
</td>
</tr>




<tr class="vc_row_odd" id="l151">
<td class="vc_file_line_number">151</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l152">
<td class="vc_file_line_number">152</td>

<td class="vc_file_line_text">For a complete detailing of how Unladen Swallow works, consult the Unladen
</td>
</tr>




<tr class="vc_row_odd" id="l153">
<td class="vc_file_line_number">153</td>

<td class="vc_file_line_text">Swallow documentation [#us-projectplan]_, [#us-llvm-notes]_.
</td>
</tr>




<tr class="vc_row_odd" id="l154">
<td class="vc_file_line_number">154</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l155">
<td class="vc_file_line_number">155</td>

<td class="vc_file_line_text">Unladen Swallow has focused on improving the performance of single-threaded,
</td>
</tr>




<tr class="vc_row_odd" id="l156">
<td class="vc_file_line_number">156</td>

<td class="vc_file_line_text">pure-Python code. We have not made an effort to remove CPython&#39;s global
</td>
</tr>




<tr class="vc_row_odd" id="l157">
<td class="vc_file_line_number">157</td>

<td class="vc_file_line_text">interpreter lock (GIL); we feel this is separate from our work, and due to its
</td>
</tr>




<tr class="vc_row_odd" id="l158">
<td class="vc_file_line_number">158</td>

<td class="vc_file_line_text">sensitivity, is best done in a mainline development branch. We considered
</td>
</tr>




<tr class="vc_row_odd" id="l159">
<td class="vc_file_line_number">159</td>

<td class="vc_file_line_text">making GIL-removal a part of Unladen Swallow, but were concerned by the
</td>
</tr>




<tr class="vc_row_odd" id="l160">
<td class="vc_file_line_number">160</td>

<td class="vc_file_line_text">possibility of introducing subtle bugs when porting our work from CPython 2.6
</td>
</tr>




<tr class="vc_row_odd" id="l161">
<td class="vc_file_line_number">161</td>

<td class="vc_file_line_text">to 3.x.
</td>
</tr>




<tr class="vc_row_odd" id="l162">
<td class="vc_file_line_number">162</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l163">
<td class="vc_file_line_number">163</td>

<td class="vc_file_line_text">A JIT compiler is an extremely versatile tool, and we have by no means
</td>
</tr>




<tr class="vc_row_odd" id="l164">
<td class="vc_file_line_number">164</td>

<td class="vc_file_line_text">exhausted its full potential. We have tried to create a sufficiently flexible
</td>
</tr>




<tr class="vc_row_odd" id="l165">
<td class="vc_file_line_number">165</td>

<td class="vc_file_line_text">framework that the wider CPython development community can build upon it for
</td>
</tr>




<tr class="vc_row_odd" id="l166">
<td class="vc_file_line_number">166</td>

<td class="vc_file_line_text">years to come, extracting increased performance in each subsequent release.
</td>
</tr>




<tr class="vc_row_odd" id="l167">
<td class="vc_file_line_number">167</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l168">
<td class="vc_file_line_number">168</td>

<td class="vc_file_line_text">Alternatives
</td>
</tr>




<tr class="vc_row_odd" id="l169">
<td class="vc_file_line_number">169</td>

<td class="vc_file_line_text">------------
</td>
</tr>




<tr class="vc_row_odd" id="l170">
<td class="vc_file_line_number">170</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l171">
<td class="vc_file_line_number">171</td>

<td class="vc_file_line_text">There are number of alternative strategies for improving Python performance
</td>
</tr>




<tr class="vc_row_odd" id="l172">
<td class="vc_file_line_number">172</td>

<td class="vc_file_line_text">which we considered, but found unsatisfactory.
</td>
</tr>




<tr class="vc_row_odd" id="l173">
<td class="vc_file_line_number">173</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l174">
<td class="vc_file_line_number">174</td>

<td class="vc_file_line_text">- *Cython, Shedskin*: Cython [#cython]_ and Shedskin [#shedskin]_ are both
</td>
</tr>




<tr class="vc_row_odd" id="l175">
<td class="vc_file_line_number">175</td>

<td class="vc_file_line_text">  static compilers for Python. We view these as useful-but-limited workarounds
</td>
</tr>




<tr class="vc_row_odd" id="l176">
<td class="vc_file_line_number">176</td>

<td class="vc_file_line_text">  for CPython&#39;s historically-poor performance. Shedskin does not support the
</td>
</tr>




<tr class="vc_row_odd" id="l177">
<td class="vc_file_line_number">177</td>

<td class="vc_file_line_text">  full Python standard library [#shedskin-library-limits]_, while Cython
</td>
</tr>




<tr class="vc_row_odd" id="l178">
<td class="vc_file_line_number">178</td>

<td class="vc_file_line_text">  requires manual Cython-specific annotations for optimum performance.
</td>
</tr>




<tr class="vc_row_odd" id="l179">
<td class="vc_file_line_number">179</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l180">
<td class="vc_file_line_number">180</td>

<td class="vc_file_line_text">  Static compilers like these are useful for writing extension modules without
</td>
</tr>




<tr class="vc_row_odd" id="l181">
<td class="vc_file_line_number">181</td>

<td class="vc_file_line_text">  worrying about reference counting, but because they are static, ahead-of-time
</td>
</tr>




<tr class="vc_row_odd" id="l182">
<td class="vc_file_line_number">182</td>

<td class="vc_file_line_text">  compilers, they cannot optimize the full range of code under consideration by
</td>
</tr>




<tr class="vc_row_odd" id="l183">
<td class="vc_file_line_number">183</td>

<td class="vc_file_line_text">  a just-in-time compiler informed by runtime data.
</td>
</tr>




<tr class="vc_row_odd" id="l184">
<td class="vc_file_line_number">184</td>

<td class="vc_file_line_text">- *IronPython*: IronPython [#ironpython]_ is Python on Microsoft&#39;s .Net
</td>
</tr>




<tr class="vc_row_odd" id="l185">
<td class="vc_file_line_number">185</td>

<td class="vc_file_line_text">  platform. It is not actively tested on Mono [#mono]_, meaning that it is
</td>
</tr>




<tr class="vc_row_odd" id="l186">
<td class="vc_file_line_number">186</td>

<td class="vc_file_line_text">  essentially Windows-only, making it unsuitable as a general CPython
</td>
</tr>




<tr class="vc_row_odd" id="l187">
<td class="vc_file_line_number">187</td>

<td class="vc_file_line_text">  replacement.
</td>
</tr>




<tr class="vc_row_odd" id="l188">
<td class="vc_file_line_number">188</td>

<td class="vc_file_line_text">- *Jython*: Jython [#jython]_ is a complete implementation of Python 2.5, but
</td>
</tr>




<tr class="vc_row_odd" id="l189">
<td class="vc_file_line_number">189</td>

<td class="vc_file_line_text">  is significantly slower than Unladen Swallow (3-5x on measured benchmarks) and
</td>
</tr>




<tr class="vc_row_odd" id="l190">
<td class="vc_file_line_number">190</td>

<td class="vc_file_line_text">  has no support for CPython extension modules [#jython-c-ext]_, which would
</td>
</tr>




<tr class="vc_row_odd" id="l191">
<td class="vc_file_line_number">191</td>

<td class="vc_file_line_text">  make migration of large applications prohibitively expensive.
</td>
</tr>




<tr class="vc_row_odd" id="l192">
<td class="vc_file_line_number">192</td>

<td class="vc_file_line_text">- *Psyco*: Psyco [#psyco]_ is a specializing JIT compiler for CPython,
</td>
</tr>




<tr class="vc_row_odd" id="l193">
<td class="vc_file_line_number">193</td>

<td class="vc_file_line_text">  implemented as an extension module. It primarily improves performance for
</td>
</tr>




<tr class="vc_row_odd" id="l194">
<td class="vc_file_line_number">194</td>

<td class="vc_file_line_text">  numerical code. Pros: exists; makes some code faster. Cons: 32-bit only, with
</td>
</tr>




<tr class="vc_row_odd" id="l195">
<td class="vc_file_line_number">195</td>

<td class="vc_file_line_text">  no plans for 64-bit support; supports x86 only; very difficult to maintain;
</td>
</tr>




<tr class="vc_row_odd" id="l196">
<td class="vc_file_line_number">196</td>

<td class="vc_file_line_text">  incompatible with SSE2 optimized code due to alignment issues.
</td>
</tr>




<tr class="vc_row_odd" id="l197">
<td class="vc_file_line_number">197</td>

<td class="vc_file_line_text">- *PyPy*: PyPy [#pypy]_ has good performance on numerical code, but is slower
</td>
</tr>




<tr class="vc_row_odd" id="l198">
<td class="vc_file_line_number">198</td>

<td class="vc_file_line_text">  than Unladen Swallow on some workloads. Migration of large applications from 
</td>
</tr>




<tr class="vc_row_odd" id="l199">
<td class="vc_file_line_number">199</td>

<td class="vc_file_line_text">  CPython to PyPy would be prohibitively expensive: PyPy&#39;s JIT compiler supports 
</td>
</tr>




<tr class="vc_row_odd" id="l200">
<td class="vc_file_line_number">200</td>

<td class="vc_file_line_text">  only 32-bit x86 code generation; important modules, such as MySQLdb and 
</td>
</tr>




<tr class="vc_row_odd" id="l201">
<td class="vc_file_line_number">201</td>

<td class="vc_file_line_text">  pycrypto, do not build against PyPy; PyPy does not offer an embedding API,
</td>
</tr>




<tr class="vc_row_odd" id="l202">
<td class="vc_file_line_number">202</td>

<td class="vc_file_line_text">  much less the same API as CPython.
</td>
</tr>




<tr class="vc_row_odd" id="l203">
<td class="vc_file_line_number">203</td>

<td class="vc_file_line_text">- *PyV8*: PyV8 [#pyv8]_ is an alpha-stage experimental Python-to-JavaScript
</td>
</tr>




<tr class="vc_row_odd" id="l204">
<td class="vc_file_line_number">204</td>

<td class="vc_file_line_text">  compiler that runs on top of V8. PyV8 does not implement the whole Python
</td>
</tr>




<tr class="vc_row_odd" id="l205">
<td class="vc_file_line_number">205</td>

<td class="vc_file_line_text">  language, and has no support for CPython extension modules.
</td>
</tr>




<tr class="vc_row_odd" id="l206">
<td class="vc_file_line_number">206</td>

<td class="vc_file_line_text">- *WPython*: WPython [#wpython]_ is a wordcode-based reimplementation of
</td>
</tr>




<tr class="vc_row_odd" id="l207">
<td class="vc_file_line_number">207</td>

<td class="vc_file_line_text">  CPython&#39;s interpreter loop. While it provides a modest improvement to
</td>
</tr>




<tr class="vc_row_odd" id="l208">
<td class="vc_file_line_number">208</td>

<td class="vc_file_line_text">  interpreter performance [#wpython-performance]_, it is not an either-or
</td>
</tr>




<tr class="vc_row_odd" id="l209">
<td class="vc_file_line_number">209</td>

<td class="vc_file_line_text">  substitute for a just-in-time compiler. An interpreter will never be as fast
</td>
</tr>




<tr class="vc_row_odd" id="l210">
<td class="vc_file_line_number">210</td>

<td class="vc_file_line_text">  as optimized machine code. We view WPython and similar interpreter
</td>
</tr>




<tr class="vc_row_odd" id="l211">
<td class="vc_file_line_number">211</td>

<td class="vc_file_line_text">  enhancements as complementary to our work, rather than as competitors.
</td>
</tr>




<tr class="vc_row_odd" id="l212">
<td class="vc_file_line_number">212</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l213">
<td class="vc_file_line_number">213</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l214">
<td class="vc_file_line_number">214</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l215">
<td class="vc_file_line_number">215</td>

<td class="vc_file_line_text">Performance
</td>
</tr>




<tr class="vc_row_odd" id="l216">
<td class="vc_file_line_number">216</td>

<td class="vc_file_line_text">===========
</td>
</tr>




<tr class="vc_row_odd" id="l217">
<td class="vc_file_line_number">217</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l218">
<td class="vc_file_line_number">218</td>

<td class="vc_file_line_text">Benchmarks
</td>
</tr>




<tr class="vc_row_odd" id="l219">
<td class="vc_file_line_number">219</td>

<td class="vc_file_line_text">----------
</td>
</tr>




<tr class="vc_row_odd" id="l220">
<td class="vc_file_line_number">220</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l221">
<td class="vc_file_line_number">221</td>

<td class="vc_file_line_text">Unladen Swallow has developed a fairly large suite of benchmarks, ranging from
</td>
</tr>




<tr class="vc_row_odd" id="l222">
<td class="vc_file_line_number">222</td>

<td class="vc_file_line_text">synthetic microbenchmarks designed to test a single feature up through
</td>
</tr>




<tr class="vc_row_odd" id="l223">
<td class="vc_file_line_number">223</td>

<td class="vc_file_line_text">whole-application macrobenchmarks. The inspiration for these benchmarks has come
</td>
</tr>




<tr class="vc_row_odd" id="l224">
<td class="vc_file_line_number">224</td>

<td class="vc_file_line_text">variously from third-party contributors (in the case of the ``html5lib``
</td>
</tr>




<tr class="vc_row_odd" id="l225">
<td class="vc_file_line_number">225</td>

<td class="vc_file_line_text">benchmark), Google&#39;s own internal workloads (``slowspitfire``, ``pickle``,
</td>
</tr>




<tr class="vc_row_odd" id="l226">
<td class="vc_file_line_number">226</td>

<td class="vc_file_line_text">``unpickle``), as well as tools and libraries in heavy use throughout the wider
</td>
</tr>




<tr class="vc_row_odd" id="l227">
<td class="vc_file_line_number">227</td>

<td class="vc_file_line_text">Python community (``django``, ``2to3``, ``spambayes``). These benchmarks are run
</td>
</tr>




<tr class="vc_row_odd" id="l228">
<td class="vc_file_line_number">228</td>

<td class="vc_file_line_text">through a single interface called ``perf.py`` that takes care of collecting
</td>
</tr>




<tr class="vc_row_odd" id="l229">
<td class="vc_file_line_number">229</td>

<td class="vc_file_line_text">memory usage information, graphing performance, and running statistics on the
</td>
</tr>




<tr class="vc_row_odd" id="l230">
<td class="vc_file_line_number">230</td>

<td class="vc_file_line_text">benchmark results to ensure significance.
</td>
</tr>




<tr class="vc_row_odd" id="l231">
<td class="vc_file_line_number">231</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l232">
<td class="vc_file_line_number">232</td>

<td class="vc_file_line_text">The full list of available benchmarks is available on the Unladen Swallow wiki
</td>
</tr>




<tr class="vc_row_odd" id="l233">
<td class="vc_file_line_number">233</td>

<td class="vc_file_line_text">[#us-benchmarks]_, including instructions on downloading and running the
</td>
</tr>




<tr class="vc_row_odd" id="l234">
<td class="vc_file_line_number">234</td>

<td class="vc_file_line_text">benchmarks for yourself. All our benchmarks are open-source; none are
</td>
</tr>




<tr class="vc_row_odd" id="l235">
<td class="vc_file_line_number">235</td>

<td class="vc_file_line_text">Google-proprietary. We believe this collection of benchmarks serves as a useful
</td>
</tr>




<tr class="vc_row_odd" id="l236">
<td class="vc_file_line_number">236</td>

<td class="vc_file_line_text">tool to benchmark any complete Python implementation, and indeed, PyPy is
</td>
</tr>




<tr class="vc_row_odd" id="l237">
<td class="vc_file_line_number">237</td>

<td class="vc_file_line_text">already using these benchmarks for their own performance testing
</td>
</tr>




<tr class="vc_row_odd" id="l238">
<td class="vc_file_line_number">238</td>

<td class="vc_file_line_text">[#pypy-bmarks]_, [#us-wider-perf-issue]_. We welcome this, and we seek
</td>
</tr>




<tr class="vc_row_odd" id="l239">
<td class="vc_file_line_number">239</td>

<td class="vc_file_line_text">additional workloads for the benchmark suite from the Python community.
</td>
</tr>




<tr class="vc_row_odd" id="l240">
<td class="vc_file_line_number">240</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l241">
<td class="vc_file_line_number">241</td>

<td class="vc_file_line_text">We have focused our efforts on collecting macrobenchmarks and benchmarks that
</td>
</tr>




<tr class="vc_row_odd" id="l242">
<td class="vc_file_line_number">242</td>

<td class="vc_file_line_text">simulate real applications as well as possible, when running a whole application
</td>
</tr>




<tr class="vc_row_odd" id="l243">
<td class="vc_file_line_number">243</td>

<td class="vc_file_line_text">is not feasible. Along a different axis, our benchmark collection originally
</td>
</tr>




<tr class="vc_row_odd" id="l244">
<td class="vc_file_line_number">244</td>

<td class="vc_file_line_text">focused on the kinds of workloads seen by Google&#39;s Python code (webapps, text
</td>
</tr>




<tr class="vc_row_odd" id="l245">
<td class="vc_file_line_number">245</td>

<td class="vc_file_line_text">processing), though we have since expanded the collection to include workloads
</td>
</tr>




<tr class="vc_row_odd" id="l246">
<td class="vc_file_line_number">246</td>

<td class="vc_file_line_text">Google cares nothing about. We have so far shied away from heavily-numerical
</td>
</tr>




<tr class="vc_row_odd" id="l247">
<td class="vc_file_line_number">247</td>

<td class="vc_file_line_text">workloads, since NumPy [#numpy]_ already does an excellent job on such code and
</td>
</tr>




<tr class="vc_row_odd" id="l248">
<td class="vc_file_line_number">248</td>

<td class="vc_file_line_text">so improving numerical performance was not an initial high priority for the
</td>
</tr>




<tr class="vc_row_odd" id="l249">
<td class="vc_file_line_number">249</td>

<td class="vc_file_line_text">team; we have begun to incorporate such benchmarks into the collection
</td>
</tr>




<tr class="vc_row_odd" id="l250">
<td class="vc_file_line_number">250</td>

<td class="vc_file_line_text">[#us-nbody]_ and have started work on optimizing numerical Python code.
</td>
</tr>




<tr class="vc_row_odd" id="l251">
<td class="vc_file_line_number">251</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l252">
<td class="vc_file_line_number">252</td>

<td class="vc_file_line_text">Beyond these benchmarks, there are also a variety of workloads we are explicitly
</td>
</tr>




<tr class="vc_row_odd" id="l253">
<td class="vc_file_line_number">253</td>

<td class="vc_file_line_text">not interested in benchmarking. Unladen Swallow is focused on improving the
</td>
</tr>




<tr class="vc_row_odd" id="l254">
<td class="vc_file_line_number">254</td>

<td class="vc_file_line_text">performance of pure-Python code, so the performance of extension modules like
</td>
</tr>




<tr class="vc_row_odd" id="l255">
<td class="vc_file_line_number">255</td>

<td class="vc_file_line_text">NumPy is uninteresting since NumPy&#39;s core routines are implemented in
</td>
</tr>




<tr class="vc_row_odd" id="l256">
<td class="vc_file_line_number">256</td>

<td class="vc_file_line_text">C. Similarly, workloads that involve a lot of IO like GUIs, databases or
</td>
</tr>




<tr class="vc_row_odd" id="l257">
<td class="vc_file_line_number">257</td>

<td class="vc_file_line_text">socket-heavy applications would, we feel, fail to accurately measure interpreter
</td>
</tr>




<tr class="vc_row_odd" id="l258">
<td class="vc_file_line_number">258</td>

<td class="vc_file_line_text">or code generation optimizations. That said, there&#39;s certainly room to improve
</td>
</tr>




<tr class="vc_row_odd" id="l259">
<td class="vc_file_line_number">259</td>

<td class="vc_file_line_text">the performance of C-language extensions modules in the standard library, and
</td>
</tr>




<tr class="vc_row_odd" id="l260">
<td class="vc_file_line_number">260</td>

<td class="vc_file_line_text">as such, we have added benchmarks for the ``cPickle`` and ``re`` modules.
</td>
</tr>




<tr class="vc_row_odd" id="l261">
<td class="vc_file_line_number">261</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l262">
<td class="vc_file_line_number">262</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l263">
<td class="vc_file_line_number">263</td>

<td class="vc_file_line_text">Performance vs CPython 2.6.4
</td>
</tr>




<tr class="vc_row_odd" id="l264">
<td class="vc_file_line_number">264</td>

<td class="vc_file_line_text">----------------------------
</td>
</tr>




<tr class="vc_row_odd" id="l265">
<td class="vc_file_line_number">265</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l266">
<td class="vc_file_line_number">266</td>

<td class="vc_file_line_text">The charts below compare the arithmetic mean of multiple benchmark iterations
</td>
</tr>




<tr class="vc_row_odd" id="l267">
<td class="vc_file_line_number">267</td>

<td class="vc_file_line_text">for CPython 2.6.4 and Unladen Swallow. ``perf.py`` gathers more data than this,
</td>
</tr>




<tr class="vc_row_odd" id="l268">
<td class="vc_file_line_number">268</td>

<td class="vc_file_line_text">and indeed, arithmetic mean is not the whole story; we reproduce only the mean
</td>
</tr>




<tr class="vc_row_odd" id="l269">
<td class="vc_file_line_number">269</td>

<td class="vc_file_line_text">for the sake of conciseness. We include the ``t`` score from the Student&#39;s
</td>
</tr>




<tr class="vc_row_odd" id="l270">
<td class="vc_file_line_number">270</td>

<td class="vc_file_line_text">two-tailed T-test [#students-t-test]_ at the 95% confidence interval to indicate
</td>
</tr>




<tr class="vc_row_odd" id="l271">
<td class="vc_file_line_number">271</td>

<td class="vc_file_line_text">the significance of the result. Most benchmarks are run for 100 iterations,
</td>
</tr>




<tr class="vc_row_odd" id="l272">
<td class="vc_file_line_number">272</td>

<td class="vc_file_line_text">though some longer-running whole-application benchmarks are run for fewer
</td>
</tr>




<tr class="vc_row_odd" id="l273">
<td class="vc_file_line_number">273</td>

<td class="vc_file_line_text">iterations.
</td>
</tr>




<tr class="vc_row_odd" id="l274">
<td class="vc_file_line_number">274</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l275">
<td class="vc_file_line_number">275</td>

<td class="vc_file_line_text">A description of each of these benchmarks is available on the Unladen Swallow
</td>
</tr>




<tr class="vc_row_odd" id="l276">
<td class="vc_file_line_number">276</td>

<td class="vc_file_line_text">wiki [#us-benchmarks]_.
</td>
</tr>




<tr class="vc_row_odd" id="l277">
<td class="vc_file_line_number">277</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l278">
<td class="vc_file_line_number">278</td>

<td class="vc_file_line_text">Command:
</td>
</tr>




<tr class="vc_row_odd" id="l279">
<td class="vc_file_line_number">279</td>

<td class="vc_file_line_text">::
</td>
</tr>




<tr class="vc_row_odd" id="l280">
<td class="vc_file_line_number">280</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l281">
<td class="vc_file_line_number">281</td>

<td class="vc_file_line_text">  ./perf.py -r -b default,apps ../a/python ../b/python
</td>
</tr>




<tr class="vc_row_odd" id="l282">
<td class="vc_file_line_number">282</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l283">
<td class="vc_file_line_number">283</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l284">
<td class="vc_file_line_number">284</td>

<td class="vc_file_line_text">32-bit; gcc 4.0.3; Ubuntu Dapper; Intel Core2 Duo 6600 @ 2.4GHz; 2 cores; 4MB L2 cache; 4GB RAM
</td>
</tr>




<tr class="vc_row_odd" id="l285">
<td class="vc_file_line_number">285</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l286">
<td class="vc_file_line_number">286</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l287">
<td class="vc_file_line_number">287</td>

<td class="vc_file_line_text">| Benchmark    | CPython 2.6.4 | Unladen Swallow r988 | Change       | Significance  | Timeline                   |
</td>
</tr>




<tr class="vc_row_odd" id="l288">
<td class="vc_file_line_number">288</td>

<td class="vc_file_line_text">+==============+===============+======================+==============+===============+============================+
</td>
</tr>




<tr class="vc_row_odd" id="l289">
<td class="vc_file_line_number">289</td>

<td class="vc_file_line_text">| 2to3         | 25.13 s       | 24.87 s              | 1.01x faster | t=8.94        | http://tinyurl.com/yamhrpg |
</td>
</tr>




<tr class="vc_row_odd" id="l290">
<td class="vc_file_line_number">290</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l291">
<td class="vc_file_line_number">291</td>

<td class="vc_file_line_text">| django       | 1.08 s        | 0.80 s               | 1.35x faster | t=315.59      | http://tinyurl.com/y9mrn8s |
</td>
</tr>




<tr class="vc_row_odd" id="l292">
<td class="vc_file_line_number">292</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l293">
<td class="vc_file_line_number">293</td>

<td class="vc_file_line_text">| html5lib     | 14.29 s       | 13.20 s              | 1.08x faster | t=2.17        | http://tinyurl.com/y8tyslu |
</td>
</tr>




<tr class="vc_row_odd" id="l294">
<td class="vc_file_line_number">294</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l295">
<td class="vc_file_line_number">295</td>

<td class="vc_file_line_text">| nbody        | 0.51 s        | 0.28 s               | 1.84x faster | t=78.007      | http://tinyurl.com/y989qhg |
</td>
</tr>




<tr class="vc_row_odd" id="l296">
<td class="vc_file_line_number">296</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l297">
<td class="vc_file_line_number">297</td>

<td class="vc_file_line_text">| rietveld     | 0.75 s        | 0.55 s               | 1.37x faster | Insignificant | http://tinyurl.com/ye7mqd3 |
</td>
</tr>




<tr class="vc_row_odd" id="l298">
<td class="vc_file_line_number">298</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l299">
<td class="vc_file_line_number">299</td>

<td class="vc_file_line_text">| slowpickle   | 0.75 s        | 0.55 s               | 1.37x faster | t=20.78       | http://tinyurl.com/ybrsfnd |
</td>
</tr>




<tr class="vc_row_odd" id="l300">
<td class="vc_file_line_number">300</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l301">
<td class="vc_file_line_number">301</td>

<td class="vc_file_line_text">| slowspitfire | 0.83 s        | 0.61 s               | 1.36x faster | t=2124.66     | http://tinyurl.com/yfknhaw |
</td>
</tr>




<tr class="vc_row_odd" id="l302">
<td class="vc_file_line_number">302</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l303">
<td class="vc_file_line_number">303</td>

<td class="vc_file_line_text">| slowunpickle | 0.33 s        | 0.26 s               | 1.26x faster | t=15.12       | http://tinyurl.com/yzlakoo |
</td>
</tr>




<tr class="vc_row_odd" id="l304">
<td class="vc_file_line_number">304</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l305">
<td class="vc_file_line_number">305</td>

<td class="vc_file_line_text">| spambayes    | 0.31 s        | 0.34 s               | 1.10x slower | Insignificant | http://tinyurl.com/yem62ub |
</td>
</tr>




<tr class="vc_row_odd" id="l306">
<td class="vc_file_line_number">306</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l307">
<td class="vc_file_line_number">307</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l308">
<td class="vc_file_line_number">308</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l309">
<td class="vc_file_line_number">309</td>

<td class="vc_file_line_text">64-bit; gcc 4.2.4; Ubuntu Hardy; AMD Opteron 8214 HE @ 2.2 GHz; 4 cores; 1MB L2 cache; 8GB RAM
</td>
</tr>




<tr class="vc_row_odd" id="l310">
<td class="vc_file_line_number">310</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l311">
<td class="vc_file_line_number">311</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l312">
<td class="vc_file_line_number">312</td>

<td class="vc_file_line_text">| Benchmark    | CPython 2.6.4 | Unladen Swallow r988 | Change       | Significance  | Timeline                   |
</td>
</tr>




<tr class="vc_row_odd" id="l313">
<td class="vc_file_line_number">313</td>

<td class="vc_file_line_text">+==============+===============+======================+==============+===============+============================+
</td>
</tr>




<tr class="vc_row_odd" id="l314">
<td class="vc_file_line_number">314</td>

<td class="vc_file_line_text">| 2to3         | 31.98 s       | 30.41 s              | 1.05x faster | t=8.35        | http://tinyurl.com/ybcrl3b |
</td>
</tr>




<tr class="vc_row_odd" id="l315">
<td class="vc_file_line_number">315</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l316">
<td class="vc_file_line_number">316</td>

<td class="vc_file_line_text">| django       | 1.22 s        | 0.94 s               | 1.30x faster | t=106.68      | http://tinyurl.com/ybwqll6 |
</td>
</tr>




<tr class="vc_row_odd" id="l317">
<td class="vc_file_line_number">317</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l318">
<td class="vc_file_line_number">318</td>

<td class="vc_file_line_text">| html5lib     | 18.97 s       | 17.79 s              | 1.06x faster | t=2.78        | http://tinyurl.com/yzlyqvk |
</td>
</tr>




<tr class="vc_row_odd" id="l319">
<td class="vc_file_line_number">319</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l320">
<td class="vc_file_line_number">320</td>

<td class="vc_file_line_text">| nbody        | 0.77 s        | 0.27 s               | 2.86x faster | t=133.49      | http://tinyurl.com/yeyqhbg |
</td>
</tr>




<tr class="vc_row_odd" id="l321">
<td class="vc_file_line_number">321</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l322">
<td class="vc_file_line_number">322</td>

<td class="vc_file_line_text">| rietveld     | 0.74 s        | 0.80 s               | 1.08x slower | t=-2.45       | http://tinyurl.com/yzjc6ff |
</td>
</tr>




<tr class="vc_row_odd" id="l323">
<td class="vc_file_line_number">323</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l324">
<td class="vc_file_line_number">324</td>

<td class="vc_file_line_text">| slowpickle   | 0.91 s        | 0.62 s               | 1.48x faster | t=28.04       | http://tinyurl.com/yf7en6k |
</td>
</tr>




<tr class="vc_row_odd" id="l325">
<td class="vc_file_line_number">325</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l326">
<td class="vc_file_line_number">326</td>

<td class="vc_file_line_text">| slowspitfire | 1.01 s        | 0.72 s               | 1.40x faster | t=98.70       | http://tinyurl.com/yc8pe2o |
</td>
</tr>




<tr class="vc_row_odd" id="l327">
<td class="vc_file_line_number">327</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l328">
<td class="vc_file_line_number">328</td>

<td class="vc_file_line_text">| slowunpickle | 0.51 s        | 0.34 s               | 1.51x faster | t=32.65       | http://tinyurl.com/yjufu4j |
</td>
</tr>




<tr class="vc_row_odd" id="l329">
<td class="vc_file_line_number">329</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l330">
<td class="vc_file_line_number">330</td>

<td class="vc_file_line_text">| spambayes    | 0.43 s        | 0.45 s               | 1.06x slower | Insignificant | http://tinyurl.com/yztbjfp |
</td>
</tr>




<tr class="vc_row_odd" id="l331">
<td class="vc_file_line_number">331</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------------+---------------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l332">
<td class="vc_file_line_number">332</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l333">
<td class="vc_file_line_number">333</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l334">
<td class="vc_file_line_number">334</td>

<td class="vc_file_line_text">Many of these benchmarks take a hit under Unladen Swallow because the current
</td>
</tr>




<tr class="vc_row_odd" id="l335">
<td class="vc_file_line_number">335</td>

<td class="vc_file_line_text">version blocks execution to compile Python functions down to machine code. This
</td>
</tr>




<tr class="vc_row_odd" id="l336">
<td class="vc_file_line_number">336</td>

<td class="vc_file_line_text">leads to the behaviour seen in the timeline graphs for the ``html5lib`` and
</td>
</tr>




<tr class="vc_row_odd" id="l337">
<td class="vc_file_line_number">337</td>

<td class="vc_file_line_text">``rietveld`` benchmarks, for example, and slows down the overall performance of
</td>
</tr>




<tr class="vc_row_odd" id="l338">
<td class="vc_file_line_number">338</td>

<td class="vc_file_line_text">``2to3``. We have an active development branch to fix this problem
</td>
</tr>




<tr class="vc_row_odd" id="l339">
<td class="vc_file_line_number">339</td>

<td class="vc_file_line_text">([#us-background-thread]_, [#us-background-thread-issue]_), but working within
</td>
</tr>




<tr class="vc_row_odd" id="l340">
<td class="vc_file_line_number">340</td>

<td class="vc_file_line_text">the strictures of CPython&#39;s current threading system has complicated the process
</td>
</tr>




<tr class="vc_row_odd" id="l341">
<td class="vc_file_line_number">341</td>

<td class="vc_file_line_text">and required far more care and time than originally anticipated. We view this
</td>
</tr>




<tr class="vc_row_odd" id="l342">
<td class="vc_file_line_number">342</td>

<td class="vc_file_line_text">issue as critical to final merger into the ``py3k`` branch.
</td>
</tr>




<tr class="vc_row_odd" id="l343">
<td class="vc_file_line_number">343</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l344">
<td class="vc_file_line_number">344</td>

<td class="vc_file_line_text">We have obviously not met our initial goal of a 5x performance improvement. A
</td>
</tr>




<tr class="vc_row_odd" id="l345">
<td class="vc_file_line_number">345</td>

<td class="vc_file_line_text">`performance retrospective`_ follows, which addresses why we failed to meet our
</td>
</tr>




<tr class="vc_row_odd" id="l346">
<td class="vc_file_line_number">346</td>

<td class="vc_file_line_text">initial performance goal. We maintain a list of yet-to-be-implemented
</td>
</tr>




<tr class="vc_row_odd" id="l347">
<td class="vc_file_line_number">347</td>

<td class="vc_file_line_text">performance work [#us-perf-punchlist]_. 
</td>
</tr>




<tr class="vc_row_odd" id="l348">
<td class="vc_file_line_number">348</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l349">
<td class="vc_file_line_number">349</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l350">
<td class="vc_file_line_number">350</td>

<td class="vc_file_line_text">Memory Usage
</td>
</tr>




<tr class="vc_row_odd" id="l351">
<td class="vc_file_line_number">351</td>

<td class="vc_file_line_text">------------
</td>
</tr>




<tr class="vc_row_odd" id="l352">
<td class="vc_file_line_number">352</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l353">
<td class="vc_file_line_number">353</td>

<td class="vc_file_line_text">The following table shows maximum memory usage (in kilobytes) for each of
</td>
</tr>




<tr class="vc_row_odd" id="l354">
<td class="vc_file_line_number">354</td>

<td class="vc_file_line_text">Unladen Swallow&#39;s default benchmarks for both CPython 2.6.4 and Unladen Swallow
</td>
</tr>




<tr class="vc_row_odd" id="l355">
<td class="vc_file_line_number">355</td>

<td class="vc_file_line_text">r988, as well as a timeline of memory usage across the lifetime of the
</td>
</tr>




<tr class="vc_row_odd" id="l356">
<td class="vc_file_line_number">356</td>

<td class="vc_file_line_text">benchmark. We include tables for both 32- and 64-bit binaries. Memory usage was
</td>
</tr>




<tr class="vc_row_odd" id="l357">
<td class="vc_file_line_number">357</td>

<td class="vc_file_line_text">measured on Linux 2.6 systems by summing the ``Private_`` sections from the
</td>
</tr>




<tr class="vc_row_odd" id="l358">
<td class="vc_file_line_number">358</td>

<td class="vc_file_line_text">kernel&#39;s ``/proc/$pid/smaps`` pseudo-files [#smaps]_.
</td>
</tr>




<tr class="vc_row_odd" id="l359">
<td class="vc_file_line_number">359</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l360">
<td class="vc_file_line_number">360</td>

<td class="vc_file_line_text">Command:
</td>
</tr>




<tr class="vc_row_odd" id="l361">
<td class="vc_file_line_number">361</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l362">
<td class="vc_file_line_number">362</td>

<td class="vc_file_line_text">::
</td>
</tr>




<tr class="vc_row_odd" id="l363">
<td class="vc_file_line_number">363</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l364">
<td class="vc_file_line_number">364</td>

<td class="vc_file_line_text">  ./perf.py -r --track_memory -b default,apps ../a/python ../b/python
</td>
</tr>




<tr class="vc_row_odd" id="l365">
<td class="vc_file_line_number">365</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l366">
<td class="vc_file_line_number">366</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l367">
<td class="vc_file_line_number">367</td>

<td class="vc_file_line_text">32-bit
</td>
</tr>




<tr class="vc_row_odd" id="l368">
<td class="vc_file_line_number">368</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l369">
<td class="vc_file_line_number">369</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l370">
<td class="vc_file_line_number">370</td>

<td class="vc_file_line_text">| Benchmark    | CPython 2.6.4 | Unladen Swallow r988 | Change | Timeline                   |
</td>
</tr>




<tr class="vc_row_odd" id="l371">
<td class="vc_file_line_number">371</td>

<td class="vc_file_line_text">+==============+===============+======================+========+============================+
</td>
</tr>




<tr class="vc_row_odd" id="l372">
<td class="vc_file_line_number">372</td>

<td class="vc_file_line_text">| 2to3         | 26396 kb      | 46896 kb             | 1.77x  | http://tinyurl.com/yhr2h4z |
</td>
</tr>




<tr class="vc_row_odd" id="l373">
<td class="vc_file_line_number">373</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l374">
<td class="vc_file_line_number">374</td>

<td class="vc_file_line_text">| django       | 10028 kb      | 27740 kb             | 2.76x  | http://tinyurl.com/yhan8vs |
</td>
</tr>




<tr class="vc_row_odd" id="l375">
<td class="vc_file_line_number">375</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l376">
<td class="vc_file_line_number">376</td>

<td class="vc_file_line_text">| html5lib     | 150028 kb     | 173924 kb            | 1.15x  | http://tinyurl.com/ybt44en |
</td>
</tr>




<tr class="vc_row_odd" id="l377">
<td class="vc_file_line_number">377</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l378">
<td class="vc_file_line_number">378</td>

<td class="vc_file_line_text">| nbody        | 3020 kb       | 16036 kb             | 5.31x  | http://tinyurl.com/ya8hltw |
</td>
</tr>




<tr class="vc_row_odd" id="l379">
<td class="vc_file_line_number">379</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l380">
<td class="vc_file_line_number">380</td>

<td class="vc_file_line_text">| rietveld     | 15008 kb      | 46400 kb             | 3.09x  | http://tinyurl.com/yhd5dra |
</td>
</tr>




<tr class="vc_row_odd" id="l381">
<td class="vc_file_line_number">381</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l382">
<td class="vc_file_line_number">382</td>

<td class="vc_file_line_text">| slowpickle   | 4608 kb       | 16656 kb             | 3.61x  | http://tinyurl.com/ybukyvo |
</td>
</tr>




<tr class="vc_row_odd" id="l383">
<td class="vc_file_line_number">383</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l384">
<td class="vc_file_line_number">384</td>

<td class="vc_file_line_text">| slowspitfire | 85776 kb      | 97620 kb             | 1.13x  | http://tinyurl.com/y9vj35z |
</td>
</tr>




<tr class="vc_row_odd" id="l385">
<td class="vc_file_line_number">385</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l386">
<td class="vc_file_line_number">386</td>

<td class="vc_file_line_text">| slowunpickle | 3448 kb       | 13744 kb             | 3.98x  | http://tinyurl.com/yexh4d5 |
</td>
</tr>




<tr class="vc_row_odd" id="l387">
<td class="vc_file_line_number">387</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l388">
<td class="vc_file_line_number">388</td>

<td class="vc_file_line_text">| spambayes    | 7352 kb       | 46480 kb             | 6.32x  | http://tinyurl.com/yem62ub |
</td>
</tr>




<tr class="vc_row_odd" id="l389">
<td class="vc_file_line_number">389</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l390">
<td class="vc_file_line_number">390</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l391">
<td class="vc_file_line_number">391</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l392">
<td class="vc_file_line_number">392</td>

<td class="vc_file_line_text">64-bit
</td>
</tr>




<tr class="vc_row_odd" id="l393">
<td class="vc_file_line_number">393</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l394">
<td class="vc_file_line_number">394</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l395">
<td class="vc_file_line_number">395</td>

<td class="vc_file_line_text">| Benchmark    | CPython 2.6.4 | Unladen Swallow r988 | Change | Timeline                   |
</td>
</tr>




<tr class="vc_row_odd" id="l396">
<td class="vc_file_line_number">396</td>

<td class="vc_file_line_text">+==============+===============+======================+========+============================+
</td>
</tr>




<tr class="vc_row_odd" id="l397">
<td class="vc_file_line_number">397</td>

<td class="vc_file_line_text">| 2to3         | 51596 kb      | 82340 kb             | 1.59x  | http://tinyurl.com/yljg6rs |
</td>
</tr>




<tr class="vc_row_odd" id="l398">
<td class="vc_file_line_number">398</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l399">
<td class="vc_file_line_number">399</td>

<td class="vc_file_line_text">| django       | 16020 kb      | 38908 kb             | 2.43x  | http://tinyurl.com/ylqsebh |
</td>
</tr>




<tr class="vc_row_odd" id="l400">
<td class="vc_file_line_number">400</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l401">
<td class="vc_file_line_number">401</td>

<td class="vc_file_line_text">| html5lib     | 259232 kb     | 324968 kb            | 1.25x  | http://tinyurl.com/yha6oee |
</td>
</tr>




<tr class="vc_row_odd" id="l402">
<td class="vc_file_line_number">402</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l403">
<td class="vc_file_line_number">403</td>

<td class="vc_file_line_text">| nbody        | 4296 kb       | 23012 kb             | 5.35x  | http://tinyurl.com/yztozza |
</td>
</tr>




<tr class="vc_row_odd" id="l404">
<td class="vc_file_line_number">404</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l405">
<td class="vc_file_line_number">405</td>

<td class="vc_file_line_text">| rietveld     | 24140 kb      | 73960 kb             | 3.06x  | http://tinyurl.com/ybg2nq7 |
</td>
</tr>




<tr class="vc_row_odd" id="l406">
<td class="vc_file_line_number">406</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l407">
<td class="vc_file_line_number">407</td>

<td class="vc_file_line_text">| slowpickle   | 4928 kb       | 23300 kb             | 4.73x  | http://tinyurl.com/yk5tpbr |
</td>
</tr>




<tr class="vc_row_odd" id="l408">
<td class="vc_file_line_number">408</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l409">
<td class="vc_file_line_number">409</td>

<td class="vc_file_line_text">| slowspitfire | 133276 kb     | 148676 kb            | 1.11x  | http://tinyurl.com/y8bz2xe |
</td>
</tr>




<tr class="vc_row_odd" id="l410">
<td class="vc_file_line_number">410</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l411">
<td class="vc_file_line_number">411</td>

<td class="vc_file_line_text">| slowunpickle | 4896 kb       | 16948 kb             | 3.46x  | http://tinyurl.com/ygywwoc |
</td>
</tr>




<tr class="vc_row_odd" id="l412">
<td class="vc_file_line_number">412</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l413">
<td class="vc_file_line_number">413</td>

<td class="vc_file_line_text">| spambayes    | 10728 kb      | 84992 kb             | 7.92x  | http://tinyurl.com/yhjban5 |
</td>
</tr>




<tr class="vc_row_odd" id="l414">
<td class="vc_file_line_number">414</td>

<td class="vc_file_line_text">+--------------+---------------+----------------------+--------+----------------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l415">
<td class="vc_file_line_number">415</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l416">
<td class="vc_file_line_number">416</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l417">
<td class="vc_file_line_number">417</td>

<td class="vc_file_line_text">The increased memory usage comes from a) LLVM code generation, analysis and
</td>
</tr>




<tr class="vc_row_odd" id="l418">
<td class="vc_file_line_number">418</td>

<td class="vc_file_line_text">optimization libraries; b) native code; c) memory usage issues or leaks in
</td>
</tr>




<tr class="vc_row_odd" id="l419">
<td class="vc_file_line_number">419</td>

<td class="vc_file_line_text">LLVM; d) data structures needed to optimize and generate machine code; e)
</td>
</tr>




<tr class="vc_row_odd" id="l420">
<td class="vc_file_line_number">420</td>

<td class="vc_file_line_text">as-yet uncategorized other sources.
</td>
</tr>




<tr class="vc_row_odd" id="l421">
<td class="vc_file_line_number">421</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l422">
<td class="vc_file_line_number">422</td>

<td class="vc_file_line_text">While we have made significant progress in reducing memory usage since the
</td>
</tr>




<tr class="vc_row_odd" id="l423">
<td class="vc_file_line_number">423</td>

<td class="vc_file_line_text">initial naive JIT implementation [#us-memory-issue]_, there is obviously more
</td>
</tr>




<tr class="vc_row_odd" id="l424">
<td class="vc_file_line_number">424</td>

<td class="vc_file_line_text">to do. We believe that there are still memory savings to be made without
</td>
</tr>




<tr class="vc_row_odd" id="l425">
<td class="vc_file_line_number">425</td>

<td class="vc_file_line_text">sacrificing performance. We have tended to focus on raw performance, and we
</td>
</tr>




<tr class="vc_row_odd" id="l426">
<td class="vc_file_line_number">426</td>

<td class="vc_file_line_text">have not yet made a concerted push to reduce memory usage. We view reducing
</td>
</tr>




<tr class="vc_row_odd" id="l427">
<td class="vc_file_line_number">427</td>

<td class="vc_file_line_text">memory usage as a blocking issue for final merger into the ``py3k`` branch. We
</td>
</tr>




<tr class="vc_row_odd" id="l428">
<td class="vc_file_line_number">428</td>

<td class="vc_file_line_text">seek guidance from the community on an acceptable level of increased memory
</td>
</tr>




<tr class="vc_row_odd" id="l429">
<td class="vc_file_line_number">429</td>

<td class="vc_file_line_text">usage.
</td>
</tr>




<tr class="vc_row_odd" id="l430">
<td class="vc_file_line_number">430</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l431">
<td class="vc_file_line_number">431</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l432">
<td class="vc_file_line_number">432</td>

<td class="vc_file_line_text">Start-up Time
</td>
</tr>




<tr class="vc_row_odd" id="l433">
<td class="vc_file_line_number">433</td>

<td class="vc_file_line_text">-------------
</td>
</tr>




<tr class="vc_row_odd" id="l434">
<td class="vc_file_line_number">434</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l435">
<td class="vc_file_line_number">435</td>

<td class="vc_file_line_text">Statically linking LLVM&#39;s code generation, analysis and optimization libraries
</td>
</tr>




<tr class="vc_row_odd" id="l436">
<td class="vc_file_line_number">436</td>

<td class="vc_file_line_text">increases the time needed to start the Python binary. C++ static initializers
</td>
</tr>




<tr class="vc_row_odd" id="l437">
<td class="vc_file_line_number">437</td>

<td class="vc_file_line_text">used by LLVM also increase start-up time, as does importing the collection of
</td>
</tr>




<tr class="vc_row_odd" id="l438">
<td class="vc_file_line_number">438</td>

<td class="vc_file_line_text">pre-compiled C runtime routines we want to inline to Python code.
</td>
</tr>




<tr class="vc_row_odd" id="l439">
<td class="vc_file_line_number">439</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l440">
<td class="vc_file_line_number">440</td>

<td class="vc_file_line_text">Results from Unladen Swallow&#39;s ``startup`` benchmarks:
</td>
</tr>




<tr class="vc_row_odd" id="l441">
<td class="vc_file_line_number">441</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l442">
<td class="vc_file_line_number">442</td>

<td class="vc_file_line_text">::
</td>
</tr>




<tr class="vc_row_odd" id="l443">
<td class="vc_file_line_number">443</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l444">
<td class="vc_file_line_number">444</td>

<td class="vc_file_line_text">  $ ./perf.py -r -b startup /tmp/cpy-26/bin/python /tmp/unladen/bin/python
</td>
</tr>




<tr class="vc_row_odd" id="l445">
<td class="vc_file_line_number">445</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l446">
<td class="vc_file_line_number">446</td>

<td class="vc_file_line_text">  ### normal_startup ###
</td>
</tr>




<tr class="vc_row_odd" id="l447">
<td class="vc_file_line_number">447</td>

<td class="vc_file_line_text">  Min: 0.219186 -&gt; 0.352075: 1.6063x slower
</td>
</tr>




<tr class="vc_row_odd" id="l448">
<td class="vc_file_line_number">448</td>

<td class="vc_file_line_text">  Avg: 0.227228 -&gt; 0.364384: 1.6036x slower
</td>
</tr>




<tr class="vc_row_odd" id="l449">
<td class="vc_file_line_number">449</td>

<td class="vc_file_line_text">  Significant (t=-51.879098, a=0.95)
</td>
</tr>




<tr class="vc_row_odd" id="l450">
<td class="vc_file_line_number">450</td>

<td class="vc_file_line_text">  Stddev: 0.00762 -&gt; 0.02532: 3.3227x larger
</td>
</tr>




<tr class="vc_row_odd" id="l451">
<td class="vc_file_line_number">451</td>

<td class="vc_file_line_text">  Timeline: http://tinyurl.com/yfe8z3r
</td>
</tr>




<tr class="vc_row_odd" id="l452">
<td class="vc_file_line_number">452</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l453">
<td class="vc_file_line_number">453</td>

<td class="vc_file_line_text">  ### startup_nosite ###
</td>
</tr>




<tr class="vc_row_odd" id="l454">
<td class="vc_file_line_number">454</td>

<td class="vc_file_line_text">  Min: 0.105949 -&gt; 0.264912: 2.5004x slower
</td>
</tr>




<tr class="vc_row_odd" id="l455">
<td class="vc_file_line_number">455</td>

<td class="vc_file_line_text">  Avg: 0.107574 -&gt; 0.267505: 2.4867x slower
</td>
</tr>




<tr class="vc_row_odd" id="l456">
<td class="vc_file_line_number">456</td>

<td class="vc_file_line_text">  Significant (t=-703.557403, a=0.95)
</td>
</tr>




<tr class="vc_row_odd" id="l457">
<td class="vc_file_line_number">457</td>

<td class="vc_file_line_text">  Stddev: 0.00214 -&gt; 0.00240: 1.1209x larger
</td>
</tr>




<tr class="vc_row_odd" id="l458">
<td class="vc_file_line_number">458</td>

<td class="vc_file_line_text">  Timeline: http://tinyurl.com/yajn8fa
</td>
</tr>




<tr class="vc_row_odd" id="l459">
<td class="vc_file_line_number">459</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l460">
<td class="vc_file_line_number">460</td>

<td class="vc_file_line_text">  ### bzr_startup ###
</td>
</tr>




<tr class="vc_row_odd" id="l461">
<td class="vc_file_line_number">461</td>

<td class="vc_file_line_text">  Min: 0.067990 -&gt; 0.097985: 1.4412x slower
</td>
</tr>




<tr class="vc_row_odd" id="l462">
<td class="vc_file_line_number">462</td>

<td class="vc_file_line_text">  Avg: 0.084322 -&gt; 0.111348: 1.3205x slower
</td>
</tr>




<tr class="vc_row_odd" id="l463">
<td class="vc_file_line_number">463</td>

<td class="vc_file_line_text">  Significant (t=-37.432534, a=0.95)
</td>
</tr>




<tr class="vc_row_odd" id="l464">
<td class="vc_file_line_number">464</td>

<td class="vc_file_line_text">  Stddev: 0.00793 -&gt; 0.00643: 1.2330x smaller
</td>
</tr>




<tr class="vc_row_odd" id="l465">
<td class="vc_file_line_number">465</td>

<td class="vc_file_line_text">  Timeline: http://tinyurl.com/ybdm537
</td>
</tr>




<tr class="vc_row_odd" id="l466">
<td class="vc_file_line_number">466</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l467">
<td class="vc_file_line_number">467</td>

<td class="vc_file_line_text">  ### hg_startup ###
</td>
</tr>




<tr class="vc_row_odd" id="l468">
<td class="vc_file_line_number">468</td>

<td class="vc_file_line_text">  Min: 0.016997 -&gt; 0.024997: 1.4707x slower
</td>
</tr>




<tr class="vc_row_odd" id="l469">
<td class="vc_file_line_number">469</td>

<td class="vc_file_line_text">  Avg: 0.026990 -&gt; 0.036772: 1.3625x slower
</td>
</tr>




<tr class="vc_row_odd" id="l470">
<td class="vc_file_line_number">470</td>

<td class="vc_file_line_text">  Significant (t=-53.104502, a=0.95)
</td>
</tr>




<tr class="vc_row_odd" id="l471">
<td class="vc_file_line_number">471</td>

<td class="vc_file_line_text">  Stddev: 0.00406 -&gt; 0.00417: 1.0273x larger
</td>
</tr>




<tr class="vc_row_odd" id="l472">
<td class="vc_file_line_number">472</td>

<td class="vc_file_line_text">  Timeline: http://tinyurl.com/ycout8m
</td>
</tr>




<tr class="vc_row_odd" id="l473">
<td class="vc_file_line_number">473</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l474">
<td class="vc_file_line_number">474</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l475">
<td class="vc_file_line_number">475</td>

<td class="vc_file_line_text">``bzr_startup`` and ``hg_startup`` measure how long it takes Bazaar and
</td>
</tr>




<tr class="vc_row_odd" id="l476">
<td class="vc_file_line_number">476</td>

<td class="vc_file_line_text">Mercurial, respectively, to display their help screens. ``startup_nosite``
</td>
</tr>




<tr class="vc_row_odd" id="l477">
<td class="vc_file_line_number">477</td>

<td class="vc_file_line_text">runs ``python -S`` many times; usage of the ``-S`` option is rare, but we feel
</td>
</tr>




<tr class="vc_row_odd" id="l478">
<td class="vc_file_line_number">478</td>

<td class="vc_file_line_text">this gives a good indication of where increased startup time is coming from.
</td>
</tr>




<tr class="vc_row_odd" id="l479">
<td class="vc_file_line_number">479</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l480">
<td class="vc_file_line_number">480</td>

<td class="vc_file_line_text">Unladen Swallow has made headway toward optimizing startup time, but there is
</td>
</tr>




<tr class="vc_row_odd" id="l481">
<td class="vc_file_line_number">481</td>

<td class="vc_file_line_text">still more work to do and further optimizations to implement. Improving start-up
</td>
</tr>




<tr class="vc_row_odd" id="l482">
<td class="vc_file_line_number">482</td>

<td class="vc_file_line_text">time is a high-priority item [#us-issue-startup-time]_ in Unladen Swallow&#39;s
</td>
</tr>




<tr class="vc_row_odd" id="l483">
<td class="vc_file_line_number">483</td>

<td class="vc_file_line_text">merger punchlist.
</td>
</tr>




<tr class="vc_row_odd" id="l484">
<td class="vc_file_line_number">484</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l485">
<td class="vc_file_line_number">485</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l486">
<td class="vc_file_line_number">486</td>

<td class="vc_file_line_text">Binary Size
</td>
</tr>




<tr class="vc_row_odd" id="l487">
<td class="vc_file_line_number">487</td>

<td class="vc_file_line_text">-----------
</td>
</tr>




<tr class="vc_row_odd" id="l488">
<td class="vc_file_line_number">488</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l489">
<td class="vc_file_line_number">489</td>

<td class="vc_file_line_text">Statically linking LLVM&#39;s code generation, analysis and optimization libraries
</td>
</tr>




<tr class="vc_row_odd" id="l490">
<td class="vc_file_line_number">490</td>

<td class="vc_file_line_text">significantly increases the size of the ``python`` binary. The tables below
</td>
</tr>




<tr class="vc_row_odd" id="l491">
<td class="vc_file_line_number">491</td>

<td class="vc_file_line_text">report stripped on-disk binary sizes; the binaries are stripped to better
</td>
</tr>




<tr class="vc_row_odd" id="l492">
<td class="vc_file_line_number">492</td>

<td class="vc_file_line_text">correspond with the configurations used by system package managers. We feel this
</td>
</tr>




<tr class="vc_row_odd" id="l493">
<td class="vc_file_line_number">493</td>

<td class="vc_file_line_text">is the most realistic measure of any change in binary size.
</td>
</tr>




<tr class="vc_row_odd" id="l494">
<td class="vc_file_line_number">494</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l495">
<td class="vc_file_line_number">495</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l496">
<td class="vc_file_line_number">496</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+-----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l497">
<td class="vc_file_line_number">497</td>

<td class="vc_file_line_text">| Binary size | CPython 2.6.4 | CPython 3.1.1 | Unladen Swallow r1041 |
</td>
</tr>




<tr class="vc_row_odd" id="l498">
<td class="vc_file_line_number">498</td>

<td class="vc_file_line_text">+=============+===============+===============+=======================+
</td>
</tr>




<tr class="vc_row_odd" id="l499">
<td class="vc_file_line_number">499</td>

<td class="vc_file_line_text">| 32-bit      | 1.3M          | 1.4M          | 12M                   |
</td>
</tr>




<tr class="vc_row_odd" id="l500">
<td class="vc_file_line_number">500</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+-----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l501">
<td class="vc_file_line_number">501</td>

<td class="vc_file_line_text">| 64-bit      | 1.6M          | 1.6M          | 12M                   |
</td>
</tr>




<tr class="vc_row_odd" id="l502">
<td class="vc_file_line_number">502</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+-----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l503">
<td class="vc_file_line_number">503</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l504">
<td class="vc_file_line_number">504</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l505">
<td class="vc_file_line_number">505</td>

<td class="vc_file_line_text">The increased binary size is caused by statically linking LLVM&#39;s code
</td>
</tr>




<tr class="vc_row_odd" id="l506">
<td class="vc_file_line_number">506</td>

<td class="vc_file_line_text">generation, analysis and optimization libraries into the ``python`` binary.
</td>
</tr>




<tr class="vc_row_odd" id="l507">
<td class="vc_file_line_number">507</td>

<td class="vc_file_line_text">This can be straightforwardly addressed by modifying LLVM to better support
</td>
</tr>




<tr class="vc_row_odd" id="l508">
<td class="vc_file_line_number">508</td>

<td class="vc_file_line_text">shared linking and then using that, instead of the current static linking. For
</td>
</tr>




<tr class="vc_row_odd" id="l509">
<td class="vc_file_line_number">509</td>

<td class="vc_file_line_text">the moment, though, static linking provides an accurate look at the cost of
</td>
</tr>




<tr class="vc_row_odd" id="l510">
<td class="vc_file_line_number">510</td>

<td class="vc_file_line_text">linking against LLVM.
</td>
</tr>




<tr class="vc_row_odd" id="l511">
<td class="vc_file_line_number">511</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l512">
<td class="vc_file_line_number">512</td>

<td class="vc_file_line_text">Even when statically linking, we believe there is still headroom to improve
</td>
</tr>




<tr class="vc_row_odd" id="l513">
<td class="vc_file_line_number">513</td>

<td class="vc_file_line_text">on-disk binary size by narrowing Unladen Swallow&#39;s dependencies on LLVM. This
</td>
</tr>




<tr class="vc_row_odd" id="l514">
<td class="vc_file_line_number">514</td>

<td class="vc_file_line_text">issue is actively being addressed [#us-binary-size]_.
</td>
</tr>




<tr class="vc_row_odd" id="l515">
<td class="vc_file_line_number">515</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l516">
<td class="vc_file_line_number">516</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l517">
<td class="vc_file_line_number">517</td>

<td class="vc_file_line_text">Performance Retrospective
</td>
</tr>




<tr class="vc_row_odd" id="l518">
<td class="vc_file_line_number">518</td>

<td class="vc_file_line_text">-------------------------
</td>
</tr>




<tr class="vc_row_odd" id="l519">
<td class="vc_file_line_number">519</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l520">
<td class="vc_file_line_number">520</td>

<td class="vc_file_line_text">Our initial goal for Unladen Swallow was a 5x performance improvement over
</td>
</tr>




<tr class="vc_row_odd" id="l521">
<td class="vc_file_line_number">521</td>

<td class="vc_file_line_text">CPython 2.6. We did not hit that, nor to put it bluntly, even come close. Why
</td>
</tr>




<tr class="vc_row_odd" id="l522">
<td class="vc_file_line_number">522</td>

<td class="vc_file_line_text">did the project not hit that goal, and can an LLVM-based JIT ever hit that goal?
</td>
</tr>




<tr class="vc_row_odd" id="l523">
<td class="vc_file_line_number">523</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l524">
<td class="vc_file_line_number">524</td>

<td class="vc_file_line_text">Why did Unladen Swallow not achieve its 5x goal? The primary reason was
</td>
</tr>




<tr class="vc_row_odd" id="l525">
<td class="vc_file_line_number">525</td>

<td class="vc_file_line_text">that LLVM required more work than we had initially anticipated. Based on the
</td>
</tr>




<tr class="vc_row_odd" id="l526">
<td class="vc_file_line_number">526</td>

<td class="vc_file_line_text">fact that Apple was shipping products based on LLVM [#llvm-users]_, and
</td>
</tr>




<tr class="vc_row_odd" id="l527">
<td class="vc_file_line_number">527</td>

<td class="vc_file_line_text">other high-level languages had successfully implemented LLVM-based JITs
</td>
</tr>




<tr class="vc_row_odd" id="l528">
<td class="vc_file_line_number">528</td>

<td class="vc_file_line_text">([#rubinius]_, [#macruby]_, [#hlvm]_), we had assumed that LLVM&#39;s JIT was
</td>
</tr>




<tr class="vc_row_odd" id="l529">
<td class="vc_file_line_number">529</td>

<td class="vc_file_line_text">relatively free of show-stopper bugs.
</td>
</tr>




<tr class="vc_row_odd" id="l530">
<td class="vc_file_line_number">530</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l531">
<td class="vc_file_line_number">531</td>

<td class="vc_file_line_text">That turned out to be incorrect. We had to turn our attention away from
</td>
</tr>




<tr class="vc_row_odd" id="l532">
<td class="vc_file_line_number">532</td>

<td class="vc_file_line_text">performance to fix a number of critical bugs in LLVM&#39;s JIT infrastructure (for
</td>
</tr>




<tr class="vc_row_odd" id="l533">
<td class="vc_file_line_number">533</td>

<td class="vc_file_line_text">example, [#llvm-far-call-issue]_, [#llvm-jmm-rev]_) as well as a number of
</td>
</tr>




<tr class="vc_row_odd" id="l534">
<td class="vc_file_line_number">534</td>

<td class="vc_file_line_text">nice-to-have enhancements that would enable further optimizations along various
</td>
</tr>




<tr class="vc_row_odd" id="l535">
<td class="vc_file_line_number">535</td>

<td class="vc_file_line_text">axes (for example, [#llvm-globaldce-rev]_,
</td>
</tr>




<tr class="vc_row_odd" id="l536">
<td class="vc_file_line_number">536</td>

<td class="vc_file_line_text">[#llvm-memleak-rev]_, [#llvm-availext-issue]_). LLVM&#39;s static code generation
</td>
</tr>




<tr class="vc_row_odd" id="l537">
<td class="vc_file_line_number">537</td>

<td class="vc_file_line_text">facilities, tools and optimization passes are stable and stress-tested, but the
</td>
</tr>




<tr class="vc_row_odd" id="l538">
<td class="vc_file_line_number">538</td>

<td class="vc_file_line_text">just-in-time infrastructure was relatively untested and buggy. We have fixed
</td>
</tr>




<tr class="vc_row_odd" id="l539">
<td class="vc_file_line_number">539</td>

<td class="vc_file_line_text">this.
</td>
</tr>




<tr class="vc_row_odd" id="l540">
<td class="vc_file_line_number">540</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l541">
<td class="vc_file_line_number">541</td>

<td class="vc_file_line_text">(Our hypothesis is that we hit these problems -- problems other projects had
</td>
</tr>




<tr class="vc_row_odd" id="l542">
<td class="vc_file_line_number">542</td>

<td class="vc_file_line_text">avoided -- because of the complexity and thoroughness of CPython&#39;s standard
</td>
</tr>




<tr class="vc_row_odd" id="l543">
<td class="vc_file_line_number">543</td>

<td class="vc_file_line_text">library test suite.)
</td>
</tr>




<tr class="vc_row_odd" id="l544">
<td class="vc_file_line_number">544</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l545">
<td class="vc_file_line_number">545</td>

<td class="vc_file_line_text">We also diverted engineering effort away from performance and into support tools
</td>
</tr>




<tr class="vc_row_odd" id="l546">
<td class="vc_file_line_number">546</td>

<td class="vc_file_line_text">such as gdb and oProfile. gdb did not work well with JIT compilers at all, and
</td>
</tr>




<tr class="vc_row_odd" id="l547">
<td class="vc_file_line_number">547</td>

<td class="vc_file_line_text">LLVM previously had no integration with oProfile. Having JIT-aware debuggers and
</td>
</tr>




<tr class="vc_row_odd" id="l548">
<td class="vc_file_line_number">548</td>

<td class="vc_file_line_text">profilers has been very valuable to the project, and we do not regret
</td>
</tr>




<tr class="vc_row_odd" id="l549">
<td class="vc_file_line_number">549</td>

<td class="vc_file_line_text">channeling our time in these directions. See the `Debugging`_ and `Profiling`_
</td>
</tr>




<tr class="vc_row_odd" id="l550">
<td class="vc_file_line_number">550</td>

<td class="vc_file_line_text">sections for more information.
</td>
</tr>




<tr class="vc_row_odd" id="l551">
<td class="vc_file_line_number">551</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l552">
<td class="vc_file_line_number">552</td>

<td class="vc_file_line_text">Can an LLVM-based CPython JIT ever hit the 5x performance target? The benchmark
</td>
</tr>




<tr class="vc_row_odd" id="l553">
<td class="vc_file_line_number">553</td>

<td class="vc_file_line_text">results for JIT-based JavaScript implementations suggest that 5x is indeed
</td>
</tr>




<tr class="vc_row_odd" id="l554">
<td class="vc_file_line_number">554</td>

<td class="vc_file_line_text">possible, as do the results PyPy&#39;s JIT has delivered for numeric workloads. The
</td>
</tr>




<tr class="vc_row_odd" id="l555">
<td class="vc_file_line_number">555</td>

<td class="vc_file_line_text">experience of Self-92 [#urs-self]_ is also instructive.
</td>
</tr>




<tr class="vc_row_odd" id="l556">
<td class="vc_file_line_number">556</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l557">
<td class="vc_file_line_number">557</td>

<td class="vc_file_line_text">Can LLVM deliver this? We believe that we have only begun to scratch the surface
</td>
</tr>




<tr class="vc_row_odd" id="l558">
<td class="vc_file_line_number">558</td>

<td class="vc_file_line_text">of what our LLVM-based JIT can deliver. The optimizations we have incorporated
</td>
</tr>




<tr class="vc_row_odd" id="l559">
<td class="vc_file_line_number">559</td>

<td class="vc_file_line_text">into this system thus far have borne significant fruit (for example,
</td>
</tr>




<tr class="vc_row_odd" id="l560">
<td class="vc_file_line_number">560</td>

<td class="vc_file_line_text">[#us-specialization-issue]_, [#us-direct-calling-issue]_,
</td>
</tr>




<tr class="vc_row_odd" id="l561">
<td class="vc_file_line_number">561</td>

<td class="vc_file_line_text">[#us-fast-globals-issue]_). Our experience to date is that the limiting factor
</td>
</tr>




<tr class="vc_row_odd" id="l562">
<td class="vc_file_line_number">562</td>

<td class="vc_file_line_text">on Unladen Swallow&#39;s performance is the engineering cycles needed to implement
</td>
</tr>




<tr class="vc_row_odd" id="l563">
<td class="vc_file_line_number">563</td>

<td class="vc_file_line_text">the literature. We have found LLVM easy to work with and to modify, and its
</td>
</tr>




<tr class="vc_row_odd" id="l564">
<td class="vc_file_line_number">564</td>

<td class="vc_file_line_text">built-in optimizations have greatly simplified the task of implementing
</td>
</tr>




<tr class="vc_row_odd" id="l565">
<td class="vc_file_line_number">565</td>

<td class="vc_file_line_text">Python-level optimizations.
</td>
</tr>




<tr class="vc_row_odd" id="l566">
<td class="vc_file_line_number">566</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l567">
<td class="vc_file_line_number">567</td>

<td class="vc_file_line_text">An overview of further performance opportunities is discussed in the
</td>
</tr>




<tr class="vc_row_odd" id="l568">
<td class="vc_file_line_number">568</td>

<td class="vc_file_line_text">`Future Work`_ section.
</td>
</tr>




<tr class="vc_row_odd" id="l569">
<td class="vc_file_line_number">569</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l570">
<td class="vc_file_line_number">570</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l571">
<td class="vc_file_line_number">571</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l572">
<td class="vc_file_line_number">572</td>

<td class="vc_file_line_text">Correctness and Compatibility
</td>
</tr>




<tr class="vc_row_odd" id="l573">
<td class="vc_file_line_number">573</td>

<td class="vc_file_line_text">=============================
</td>
</tr>




<tr class="vc_row_odd" id="l574">
<td class="vc_file_line_number">574</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l575">
<td class="vc_file_line_number">575</td>

<td class="vc_file_line_text">Unladen Swallow&#39;s correctness test suite includes CPython&#39;s test suite (under
</td>
</tr>




<tr class="vc_row_odd" id="l576">
<td class="vc_file_line_number">576</td>

<td class="vc_file_line_text">``Lib/test/``), as well as a number of important third-party applications and
</td>
</tr>




<tr class="vc_row_odd" id="l577">
<td class="vc_file_line_number">577</td>

<td class="vc_file_line_text">libraries [#tested-apps]_. A full list of these applications and libraries is
</td>
</tr>




<tr class="vc_row_odd" id="l578">
<td class="vc_file_line_number">578</td>

<td class="vc_file_line_text">reproduced below. Any dependencies needed by these packages, such as
</td>
</tr>




<tr class="vc_row_odd" id="l579">
<td class="vc_file_line_number">579</td>

<td class="vc_file_line_text">``zope.interface`` [#zope-interface]_, are also tested indirectly as a part of
</td>
</tr>




<tr class="vc_row_odd" id="l580">
<td class="vc_file_line_number">580</td>

<td class="vc_file_line_text">testing the primary package, thus widening the corpus of tested third-party
</td>
</tr>




<tr class="vc_row_odd" id="l581">
<td class="vc_file_line_number">581</td>

<td class="vc_file_line_text">Python code.
</td>
</tr>




<tr class="vc_row_odd" id="l582">
<td class="vc_file_line_number">582</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l583">
<td class="vc_file_line_number">583</td>

<td class="vc_file_line_text">- 2to3
</td>
</tr>




<tr class="vc_row_odd" id="l584">
<td class="vc_file_line_number">584</td>

<td class="vc_file_line_text">- Cheetah
</td>
</tr>




<tr class="vc_row_odd" id="l585">
<td class="vc_file_line_number">585</td>

<td class="vc_file_line_text">- cvs2svn
</td>
</tr>




<tr class="vc_row_odd" id="l586">
<td class="vc_file_line_number">586</td>

<td class="vc_file_line_text">- Django
</td>
</tr>




<tr class="vc_row_odd" id="l587">
<td class="vc_file_line_number">587</td>

<td class="vc_file_line_text">- Nose
</td>
</tr>




<tr class="vc_row_odd" id="l588">
<td class="vc_file_line_number">588</td>

<td class="vc_file_line_text">- NumPy
</td>
</tr>




<tr class="vc_row_odd" id="l589">
<td class="vc_file_line_number">589</td>

<td class="vc_file_line_text">- PyCrypto
</td>
</tr>




<tr class="vc_row_odd" id="l590">
<td class="vc_file_line_number">590</td>

<td class="vc_file_line_text">- pyOpenSSL
</td>
</tr>




<tr class="vc_row_odd" id="l591">
<td class="vc_file_line_number">591</td>

<td class="vc_file_line_text">- PyXML
</td>
</tr>




<tr class="vc_row_odd" id="l592">
<td class="vc_file_line_number">592</td>

<td class="vc_file_line_text">- Setuptools
</td>
</tr>




<tr class="vc_row_odd" id="l593">
<td class="vc_file_line_number">593</td>

<td class="vc_file_line_text">- SQLAlchemy
</td>
</tr>




<tr class="vc_row_odd" id="l594">
<td class="vc_file_line_number">594</td>

<td class="vc_file_line_text">- SWIG
</td>
</tr>




<tr class="vc_row_odd" id="l595">
<td class="vc_file_line_number">595</td>

<td class="vc_file_line_text">- SymPy
</td>
</tr>




<tr class="vc_row_odd" id="l596">
<td class="vc_file_line_number">596</td>

<td class="vc_file_line_text">- Twisted
</td>
</tr>




<tr class="vc_row_odd" id="l597">
<td class="vc_file_line_number">597</td>

<td class="vc_file_line_text">- ZODB
</td>
</tr>




<tr class="vc_row_odd" id="l598">
<td class="vc_file_line_number">598</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l599">
<td class="vc_file_line_number">599</td>

<td class="vc_file_line_text">These applications pass all relevant tests when run under Unladen Swallow. Note
</td>
</tr>




<tr class="vc_row_odd" id="l600">
<td class="vc_file_line_number">600</td>

<td class="vc_file_line_text">that some tests that failed against our baseline of CPython 2.6.4 were disabled,
</td>
</tr>




<tr class="vc_row_odd" id="l601">
<td class="vc_file_line_number">601</td>

<td class="vc_file_line_text">as were tests that made assumptions about CPython internals such as exact
</td>
</tr>




<tr class="vc_row_odd" id="l602">
<td class="vc_file_line_number">602</td>

<td class="vc_file_line_text">bytecode numbers or bytecode format. Any package with disabled tests includes
</td>
</tr>




<tr class="vc_row_odd" id="l603">
<td class="vc_file_line_number">603</td>

<td class="vc_file_line_text">a ``README.unladen`` file that details the changes (for example,
</td>
</tr>




<tr class="vc_row_odd" id="l604">
<td class="vc_file_line_number">604</td>

<td class="vc_file_line_text">[#us-sqlalchemy-readme]_).
</td>
</tr>




<tr class="vc_row_odd" id="l605">
<td class="vc_file_line_number">605</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l606">
<td class="vc_file_line_number">606</td>

<td class="vc_file_line_text">In addition, Unladen Swallow is tested automatically against an array of
</td>
</tr>




<tr class="vc_row_odd" id="l607">
<td class="vc_file_line_number">607</td>

<td class="vc_file_line_text">internal Google Python libraries and applications. These include Google&#39;s
</td>
</tr>




<tr class="vc_row_odd" id="l608">
<td class="vc_file_line_number">608</td>

<td class="vc_file_line_text">internal Python bindings for BigTable [#bigtable]_, the Mondrian code review
</td>
</tr>




<tr class="vc_row_odd" id="l609">
<td class="vc_file_line_number">609</td>

<td class="vc_file_line_text">application [#mondrian]_, and Google&#39;s Python standard library, among others.
</td>
</tr>




<tr class="vc_row_odd" id="l610">
<td class="vc_file_line_number">610</td>

<td class="vc_file_line_text">The changes needed to run these projects under Unladen Swallow have consistently
</td>
</tr>




<tr class="vc_row_odd" id="l611">
<td class="vc_file_line_number">611</td>

<td class="vc_file_line_text">broken into one of three camps:
</td>
</tr>




<tr class="vc_row_odd" id="l612">
<td class="vc_file_line_number">612</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l613">
<td class="vc_file_line_number">613</td>

<td class="vc_file_line_text">- Adding CPython 2.6 C API compatibility. Since Google still primarily uses
</td>
</tr>




<tr class="vc_row_odd" id="l614">
<td class="vc_file_line_number">614</td>

<td class="vc_file_line_text">  CPython 2.4 internally, we have needed to convert uses of ``int`` to
</td>
</tr>




<tr class="vc_row_odd" id="l615">
<td class="vc_file_line_number">615</td>

<td class="vc_file_line_text">  ``Py_ssize_t`` and similar API changes.
</td>
</tr>




<tr class="vc_row_odd" id="l616">
<td class="vc_file_line_number">616</td>

<td class="vc_file_line_text">- Fixing or disabling explicit, incorrect tests of the CPython version number.
</td>
</tr>




<tr class="vc_row_odd" id="l617">
<td class="vc_file_line_number">617</td>

<td class="vc_file_line_text">- Conditionally disabling code that worked around or depending on bugs in
</td>
</tr>




<tr class="vc_row_odd" id="l618">
<td class="vc_file_line_number">618</td>

<td class="vc_file_line_text">  CPython 2.4 that have since been fixed.
</td>
</tr>




<tr class="vc_row_odd" id="l619">
<td class="vc_file_line_number">619</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l620">
<td class="vc_file_line_number">620</td>

<td class="vc_file_line_text">Testing against this wide range of public and proprietary applications and
</td>
</tr>




<tr class="vc_row_odd" id="l621">
<td class="vc_file_line_number">621</td>

<td class="vc_file_line_text">libraries has been instrumental in ensuring the correctness of Unladen Swallow.
</td>
</tr>




<tr class="vc_row_odd" id="l622">
<td class="vc_file_line_number">622</td>

<td class="vc_file_line_text">Testing has exposed bugs that we have duly corrected. Our automated regression
</td>
</tr>




<tr class="vc_row_odd" id="l623">
<td class="vc_file_line_number">623</td>

<td class="vc_file_line_text">testing regime has given us high confidence in our changes as we have moved
</td>
</tr>




<tr class="vc_row_odd" id="l624">
<td class="vc_file_line_number">624</td>

<td class="vc_file_line_text">forward.
</td>
</tr>




<tr class="vc_row_odd" id="l625">
<td class="vc_file_line_number">625</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l626">
<td class="vc_file_line_number">626</td>

<td class="vc_file_line_text">In addition to third-party testing, we have added further tests to CPython&#39;s
</td>
</tr>




<tr class="vc_row_odd" id="l627">
<td class="vc_file_line_number">627</td>

<td class="vc_file_line_text">test suite for corner cases of the language or implementation that we felt were
</td>
</tr>




<tr class="vc_row_odd" id="l628">
<td class="vc_file_line_number">628</td>

<td class="vc_file_line_text">untested or underspecified (for example, [#us-import-tests]_,
</td>
</tr>




<tr class="vc_row_odd" id="l629">
<td class="vc_file_line_number">629</td>

<td class="vc_file_line_text">[#us-tracing-tests]_). These have been especially important when implementing
</td>
</tr>




<tr class="vc_row_odd" id="l630">
<td class="vc_file_line_number">630</td>

<td class="vc_file_line_text">optimizations, helping make sure we have not accidentally broken the darker
</td>
</tr>




<tr class="vc_row_odd" id="l631">
<td class="vc_file_line_number">631</td>

<td class="vc_file_line_text">corners of Python.
</td>
</tr>




<tr class="vc_row_odd" id="l632">
<td class="vc_file_line_number">632</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l633">
<td class="vc_file_line_number">633</td>

<td class="vc_file_line_text">We have also constructed a test suite focused solely on the LLVM-based JIT
</td>
</tr>




<tr class="vc_row_odd" id="l634">
<td class="vc_file_line_number">634</td>

<td class="vc_file_line_text">compiler and the optimizations implemented for it [#us-test_llvm]_. Because of
</td>
</tr>




<tr class="vc_row_odd" id="l635">
<td class="vc_file_line_number">635</td>

<td class="vc_file_line_text">the complexity and subtlety inherent in writing an optimizing compiler, we have
</td>
</tr>




<tr class="vc_row_odd" id="l636">
<td class="vc_file_line_number">636</td>

<td class="vc_file_line_text">attempted to exhaustively enumerate the constructs, scenarios and corner cases
</td>
</tr>




<tr class="vc_row_odd" id="l637">
<td class="vc_file_line_number">637</td>

<td class="vc_file_line_text">we are compiling and optimizing. The JIT tests also include tests for things
</td>
</tr>




<tr class="vc_row_odd" id="l638">
<td class="vc_file_line_number">638</td>

<td class="vc_file_line_text">like the JIT hotness model, making it easier for future CPython developers to
</td>
</tr>




<tr class="vc_row_odd" id="l639">
<td class="vc_file_line_number">639</td>

<td class="vc_file_line_text">maintain and improve.
</td>
</tr>




<tr class="vc_row_odd" id="l640">
<td class="vc_file_line_number">640</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l641">
<td class="vc_file_line_number">641</td>

<td class="vc_file_line_text">We have recently begun using fuzz testing [#fuzz-testing]_ to stress-test the
</td>
</tr>




<tr class="vc_row_odd" id="l642">
<td class="vc_file_line_number">642</td>

<td class="vc_file_line_text">compiler. We have used both pyfuzz [#pyfuzz]_ and Fusil [#fusil]_ in the past,
</td>
</tr>




<tr class="vc_row_odd" id="l643">
<td class="vc_file_line_number">643</td>

<td class="vc_file_line_text">and we recommend they be introduced as an automated part of the CPython testing
</td>
</tr>




<tr class="vc_row_odd" id="l644">
<td class="vc_file_line_number">644</td>

<td class="vc_file_line_text">process.
</td>
</tr>




<tr class="vc_row_odd" id="l645">
<td class="vc_file_line_number">645</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l646">
<td class="vc_file_line_number">646</td>

<td class="vc_file_line_text">Known Incompatibilities
</td>
</tr>




<tr class="vc_row_odd" id="l647">
<td class="vc_file_line_number">647</td>

<td class="vc_file_line_text">-----------------------
</td>
</tr>




<tr class="vc_row_odd" id="l648">
<td class="vc_file_line_number">648</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l649">
<td class="vc_file_line_number">649</td>

<td class="vc_file_line_text">The only application or library we know to not work with Unladen Swallow that
</td>
</tr>




<tr class="vc_row_odd" id="l650">
<td class="vc_file_line_number">650</td>

<td class="vc_file_line_text">does work with CPython 2.6.4 is Psyco [#psyco]_. We are aware of some libraries
</td>
</tr>




<tr class="vc_row_odd" id="l651">
<td class="vc_file_line_number">651</td>

<td class="vc_file_line_text">such as PyGame [#pygame]_ that work well with CPython 2.6.4, but suffer some
</td>
</tr>




<tr class="vc_row_odd" id="l652">
<td class="vc_file_line_number">652</td>

<td class="vc_file_line_text">degradation due to changes made in Unladen Swallow. We are tracking this issue
</td>
</tr>




<tr class="vc_row_odd" id="l653">
<td class="vc_file_line_number">653</td>

<td class="vc_file_line_text">[#us-background-thread-issue]_ and are working to resolve these instances of
</td>
</tr>




<tr class="vc_row_odd" id="l654">
<td class="vc_file_line_number">654</td>

<td class="vc_file_line_text">degradation.
</td>
</tr>




<tr class="vc_row_odd" id="l655">
<td class="vc_file_line_number">655</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l656">
<td class="vc_file_line_number">656</td>

<td class="vc_file_line_text">While Unladen Swallow is source-compatible with CPython 2.6.4, it is not
</td>
</tr>




<tr class="vc_row_odd" id="l657">
<td class="vc_file_line_number">657</td>

<td class="vc_file_line_text">binary compatible. C extension modules compiled against one will need to be
</td>
</tr>




<tr class="vc_row_odd" id="l658">
<td class="vc_file_line_number">658</td>

<td class="vc_file_line_text">recompiled to work with the other.
</td>
</tr>




<tr class="vc_row_odd" id="l659">
<td class="vc_file_line_number">659</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l660">
<td class="vc_file_line_number">660</td>

<td class="vc_file_line_text">The merger of Unladen Swallow should have minimal impact on long-lived
</td>
</tr>




<tr class="vc_row_odd" id="l661">
<td class="vc_file_line_number">661</td>

<td class="vc_file_line_text">CPython optimization branches like WPython. WPython [#wpython]_ and Unladen
</td>
</tr>




<tr class="vc_row_odd" id="l662">
<td class="vc_file_line_number">662</td>

<td class="vc_file_line_text">Swallow are largely orthogonal, and there is no technical reason why both
</td>
</tr>




<tr class="vc_row_odd" id="l663">
<td class="vc_file_line_number">663</td>

<td class="vc_file_line_text">could not be merged into CPython. The changes needed to make WPython
</td>
</tr>




<tr class="vc_row_odd" id="l664">
<td class="vc_file_line_number">664</td>

<td class="vc_file_line_text">compatible with a JIT-enhanced version of CPython should be minimal
</td>
</tr>




<tr class="vc_row_odd" id="l665">
<td class="vc_file_line_number">665</td>

<td class="vc_file_line_text">[#us-wpython-compat]_. The same should be true for other CPython optimization
</td>
</tr>




<tr class="vc_row_odd" id="l666">
<td class="vc_file_line_number">666</td>

<td class="vc_file_line_text">projects (for example, [#asher-rotem]_).
</td>
</tr>




<tr class="vc_row_odd" id="l667">
<td class="vc_file_line_number">667</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l668">
<td class="vc_file_line_number">668</td>

<td class="vc_file_line_text">Invasive forks of CPython such as Stackless Python [#stackless]_ are more
</td>
</tr>




<tr class="vc_row_odd" id="l669">
<td class="vc_file_line_number">669</td>

<td class="vc_file_line_text">challenging to support. Since Stackless is highly unlikely to be merged into
</td>
</tr>




<tr class="vc_row_odd" id="l670">
<td class="vc_file_line_number">670</td>

<td class="vc_file_line_text">CPython [#stackless-merger]_ and an increased maintenance burden is part and
</td>
</tr>




<tr class="vc_row_odd" id="l671">
<td class="vc_file_line_number">671</td>

<td class="vc_file_line_text">parcel of any fork, we consider compatibility with Stackless to be relatively
</td>
</tr>




<tr class="vc_row_odd" id="l672">
<td class="vc_file_line_number">672</td>

<td class="vc_file_line_text">low-priority. JIT-compiled stack frames use the C stack, so Stackless should
</td>
</tr>




<tr class="vc_row_odd" id="l673">
<td class="vc_file_line_number">673</td>

<td class="vc_file_line_text">be able to treat them the same as it treats calls through extension modules.
</td>
</tr>




<tr class="vc_row_odd" id="l674">
<td class="vc_file_line_number">674</td>

<td class="vc_file_line_text">If that turns out to be unacceptable, Stackless could either remove the JIT
</td>
</tr>




<tr class="vc_row_odd" id="l675">
<td class="vc_file_line_number">675</td>

<td class="vc_file_line_text">compiler or improve JIT code generation to better support heap-based stack
</td>
</tr>




<tr class="vc_row_odd" id="l676">
<td class="vc_file_line_number">676</td>

<td class="vc_file_line_text">frames [#llvm-heap-frames]_, [#llvm-heap-frames-disc]_.
</td>
</tr>




<tr class="vc_row_odd" id="l677">
<td class="vc_file_line_number">677</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l678">
<td class="vc_file_line_number">678</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l679">
<td class="vc_file_line_number">679</td>

<td class="vc_file_line_text">Platform Support
</td>
</tr>




<tr class="vc_row_odd" id="l680">
<td class="vc_file_line_number">680</td>

<td class="vc_file_line_text">================
</td>
</tr>




<tr class="vc_row_odd" id="l681">
<td class="vc_file_line_number">681</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l682">
<td class="vc_file_line_number">682</td>

<td class="vc_file_line_text">Unladen Swallow is inherently limited by the platform support provided by LLVM,
</td>
</tr>




<tr class="vc_row_odd" id="l683">
<td class="vc_file_line_number">683</td>

<td class="vc_file_line_text">especially LLVM&#39;s JIT compilation system [#llvm-hardware]_. LLVM&#39;s JIT has the
</td>
</tr>




<tr class="vc_row_odd" id="l684">
<td class="vc_file_line_number">684</td>

<td class="vc_file_line_text">best support on x86 and x86-64 systems, and these are the platforms where
</td>
</tr>




<tr class="vc_row_odd" id="l685">
<td class="vc_file_line_number">685</td>

<td class="vc_file_line_text">Unladen Swallow has received the most testing. We are confident in LLVM/Unladen
</td>
</tr>




<tr class="vc_row_odd" id="l686">
<td class="vc_file_line_number">686</td>

<td class="vc_file_line_text">Swallow&#39;s support for x86 and x86-64 hardware. PPC and ARM support exists, but
</td>
</tr>




<tr class="vc_row_odd" id="l687">
<td class="vc_file_line_number">687</td>

<td class="vc_file_line_text">is not widely used and may be buggy (for example, [#llvm-ppc-eager-jit-issue]_,
</td>
</tr>




<tr class="vc_row_odd" id="l688">
<td class="vc_file_line_number">688</td>

<td class="vc_file_line_text">[#llvm-far-call-issue]_, [#llvm-arm-jit-issue]_).
</td>
</tr>




<tr class="vc_row_odd" id="l689">
<td class="vc_file_line_number">689</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l690">
<td class="vc_file_line_number">690</td>

<td class="vc_file_line_text">Unladen Swallow is known to work on the following operating systems: Linux,
</td>
</tr>




<tr class="vc_row_odd" id="l691">
<td class="vc_file_line_number">691</td>

<td class="vc_file_line_text">Darwin, Windows. Unladen Swallow has received the most testing on Linux and
</td>
</tr>




<tr class="vc_row_odd" id="l692">
<td class="vc_file_line_number">692</td>

<td class="vc_file_line_text">Darwin, though it still builds and passes its tests on Windows.
</td>
</tr>




<tr class="vc_row_odd" id="l693">
<td class="vc_file_line_number">693</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l694">
<td class="vc_file_line_number">694</td>

<td class="vc_file_line_text">In order to support hardware and software platforms where LLVM&#39;s JIT does not
</td>
</tr>




<tr class="vc_row_odd" id="l695">
<td class="vc_file_line_number">695</td>

<td class="vc_file_line_text">work, Unladen Swallow provides a ``./configure --without-llvm`` option. This
</td>
</tr>




<tr class="vc_row_odd" id="l696">
<td class="vc_file_line_number">696</td>

<td class="vc_file_line_text">flag carves out any part of Unladen Swallow that depends on LLVM, yielding a
</td>
</tr>




<tr class="vc_row_odd" id="l697">
<td class="vc_file_line_number">697</td>

<td class="vc_file_line_text">Python binary that works and passes its tests, but has no performance
</td>
</tr>




<tr class="vc_row_odd" id="l698">
<td class="vc_file_line_number">698</td>

<td class="vc_file_line_text">advantages. This configuration is recommended for hardware unsupported by LLVM,
</td>
</tr>




<tr class="vc_row_odd" id="l699">
<td class="vc_file_line_number">699</td>

<td class="vc_file_line_text">or systems that care more about memory usage than performance.
</td>
</tr>




<tr class="vc_row_odd" id="l700">
<td class="vc_file_line_number">700</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l701">
<td class="vc_file_line_number">701</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l702">
<td class="vc_file_line_number">702</td>

<td class="vc_file_line_text">Impact on CPython Development
</td>
</tr>




<tr class="vc_row_odd" id="l703">
<td class="vc_file_line_number">703</td>

<td class="vc_file_line_text">=============================
</td>
</tr>




<tr class="vc_row_odd" id="l704">
<td class="vc_file_line_number">704</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l705">
<td class="vc_file_line_number">705</td>

<td class="vc_file_line_text">Experimenting with Changes to Python or CPython Bytecode
</td>
</tr>




<tr class="vc_row_odd" id="l706">
<td class="vc_file_line_number">706</td>

<td class="vc_file_line_text">--------------------------------------------------------
</td>
</tr>




<tr class="vc_row_odd" id="l707">
<td class="vc_file_line_number">707</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l708">
<td class="vc_file_line_number">708</td>

<td class="vc_file_line_text">Unladen Swallow&#39;s JIT compiler operates on CPython bytecode, and as such, it is
</td>
</tr>




<tr class="vc_row_odd" id="l709">
<td class="vc_file_line_number">709</td>

<td class="vc_file_line_text">immune to Python language changes that affect only the parser.
</td>
</tr>




<tr class="vc_row_odd" id="l710">
<td class="vc_file_line_number">710</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l711">
<td class="vc_file_line_number">711</td>

<td class="vc_file_line_text">We recommend that changes to the CPython bytecode compiler or the semantics of
</td>
</tr>




<tr class="vc_row_odd" id="l712">
<td class="vc_file_line_number">712</td>

<td class="vc_file_line_text">individual bytecodes be prototyped in the interpreter loop first, then be ported
</td>
</tr>




<tr class="vc_row_odd" id="l713">
<td class="vc_file_line_number">713</td>

<td class="vc_file_line_text">to the JIT compiler once the semantics are clear. To make this easier, Unladen
</td>
</tr>




<tr class="vc_row_odd" id="l714">
<td class="vc_file_line_number">714</td>

<td class="vc_file_line_text">Swallow includes a ``--without-llvm`` configure-time option that strips out the
</td>
</tr>




<tr class="vc_row_odd" id="l715">
<td class="vc_file_line_number">715</td>

<td class="vc_file_line_text">JIT compiler and all associated infrastructure. This leaves the current burden
</td>
</tr>




<tr class="vc_row_odd" id="l716">
<td class="vc_file_line_number">716</td>

<td class="vc_file_line_text">of experimentation unchanged so that developers can prototype in the current
</td>
</tr>




<tr class="vc_row_odd" id="l717">
<td class="vc_file_line_number">717</td>

<td class="vc_file_line_text">low-barrier-to-entry interpreter loop.
</td>
</tr>




<tr class="vc_row_odd" id="l718">
<td class="vc_file_line_number">718</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l719">
<td class="vc_file_line_number">719</td>

<td class="vc_file_line_text">Unladen Swallow began implementing its JIT compiler by doing straightforward,
</td>
</tr>




<tr class="vc_row_odd" id="l720">
<td class="vc_file_line_number">720</td>

<td class="vc_file_line_text">naive translations from bytecode implementations into LLVM API calls. We found
</td>
</tr>




<tr class="vc_row_odd" id="l721">
<td class="vc_file_line_number">721</td>

<td class="vc_file_line_text">this process to be easily understood, and we recommend the same approach for
</td>
</tr>




<tr class="vc_row_odd" id="l722">
<td class="vc_file_line_number">722</td>

<td class="vc_file_line_text">CPython. We include several sample changes from the Unladen Swallow repository
</td>
</tr>




<tr class="vc_row_odd" id="l723">
<td class="vc_file_line_number">723</td>

<td class="vc_file_line_text">here as examples of this style of development: [#us-r359]_, [#us-r376]_,
</td>
</tr>




<tr class="vc_row_odd" id="l724">
<td class="vc_file_line_number">724</td>

<td class="vc_file_line_text">[#us-r417]_, [#us-r517]_.
</td>
</tr>




<tr class="vc_row_odd" id="l725">
<td class="vc_file_line_number">725</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l726">
<td class="vc_file_line_number">726</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l727">
<td class="vc_file_line_number">727</td>

<td class="vc_file_line_text">Debugging
</td>
</tr>




<tr class="vc_row_odd" id="l728">
<td class="vc_file_line_number">728</td>

<td class="vc_file_line_text">---------
</td>
</tr>




<tr class="vc_row_odd" id="l729">
<td class="vc_file_line_number">729</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l730">
<td class="vc_file_line_number">730</td>

<td class="vc_file_line_text">The Unladen Swallow team implemented changes to gdb to make it easier to use gdb
</td>
</tr>




<tr class="vc_row_odd" id="l731">
<td class="vc_file_line_number">731</td>

<td class="vc_file_line_text">to debug JIT-compiled Python code. These changes were released in gdb 7.0
</td>
</tr>




<tr class="vc_row_odd" id="l732">
<td class="vc_file_line_number">732</td>

<td class="vc_file_line_text">[#gdb70]_. They make it possible for gdb to identify and unwind past
</td>
</tr>




<tr class="vc_row_odd" id="l733">
<td class="vc_file_line_number">733</td>

<td class="vc_file_line_text">JIT-generated call stack frames. This allows gdb to continue to function as
</td>
</tr>




<tr class="vc_row_odd" id="l734">
<td class="vc_file_line_number">734</td>

<td class="vc_file_line_text">before for CPython development if one is changing, for example, the ``list``
</td>
</tr>




<tr class="vc_row_odd" id="l735">
<td class="vc_file_line_number">735</td>

<td class="vc_file_line_text">type or builtin functions.
</td>
</tr>




<tr class="vc_row_odd" id="l736">
<td class="vc_file_line_number">736</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l737">
<td class="vc_file_line_number">737</td>

<td class="vc_file_line_text">Example backtrace after our changes, where ``baz``, ``bar`` and ``foo`` are
</td>
</tr>




<tr class="vc_row_odd" id="l738">
<td class="vc_file_line_number">738</td>

<td class="vc_file_line_text">JIT-compiled:
</td>
</tr>




<tr class="vc_row_odd" id="l739">
<td class="vc_file_line_number">739</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l740">
<td class="vc_file_line_number">740</td>

<td class="vc_file_line_text">::
</td>
</tr>




<tr class="vc_row_odd" id="l741">
<td class="vc_file_line_number">741</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l742">
<td class="vc_file_line_number">742</td>

<td class="vc_file_line_text">  Program received signal SIGSEGV, Segmentation fault.
</td>
</tr>




<tr class="vc_row_odd" id="l743">
<td class="vc_file_line_number">743</td>

<td class="vc_file_line_text">  0x00002aaaabe7d1a8 in baz ()
</td>
</tr>




<tr class="vc_row_odd" id="l744">
<td class="vc_file_line_number">744</td>

<td class="vc_file_line_text">  (gdb) bt
</td>
</tr>




<tr class="vc_row_odd" id="l745">
<td class="vc_file_line_number">745</td>

<td class="vc_file_line_text">  #0 0x00002aaaabe7d1a8 in baz ()
</td>
</tr>




<tr class="vc_row_odd" id="l746">
<td class="vc_file_line_number">746</td>

<td class="vc_file_line_text">  #1 0x00002aaaabe7d12c in bar ()
</td>
</tr>




<tr class="vc_row_odd" id="l747">
<td class="vc_file_line_number">747</td>

<td class="vc_file_line_text">  #2 0x00002aaaabe7d0aa in foo ()
</td>
</tr>




<tr class="vc_row_odd" id="l748">
<td class="vc_file_line_number">748</td>

<td class="vc_file_line_text">  #3 0x00002aaaabe7d02c in main ()
</td>
</tr>




<tr class="vc_row_odd" id="l749">
<td class="vc_file_line_number">749</td>

<td class="vc_file_line_text">  #4 0x0000000000b870a2 in llvm::JIT::runFunction (this=0x1405b70, F=0x14024e0, ArgValues=...)
</td>
</tr>




<tr class="vc_row_odd" id="l750">
<td class="vc_file_line_number">750</td>

<td class="vc_file_line_text">  at /home/rnk/llvm-gdb/lib/ExecutionEngine/JIT/JIT.cpp:395
</td>
</tr>




<tr class="vc_row_odd" id="l751">
<td class="vc_file_line_number">751</td>

<td class="vc_file_line_text">  #5 0x0000000000baa4c5 in llvm::ExecutionEngine::runFunctionAsMain
</td>
</tr>




<tr class="vc_row_odd" id="l752">
<td class="vc_file_line_number">752</td>

<td class="vc_file_line_text">  (this=0x1405b70, Fn=0x14024e0, argv=..., envp=0x7fffffffe3c0)
</td>
</tr>




<tr class="vc_row_odd" id="l753">
<td class="vc_file_line_number">753</td>

<td class="vc_file_line_text">  at /home/rnk/llvm-gdb/lib/ExecutionEngine/ExecutionEngine.cpp:377
</td>
</tr>




<tr class="vc_row_odd" id="l754">
<td class="vc_file_line_number">754</td>

<td class="vc_file_line_text">  #6 0x00000000007ebd52 in main (argc=2, argv=0x7fffffffe3a8,
</td>
</tr>




<tr class="vc_row_odd" id="l755">
<td class="vc_file_line_number">755</td>

<td class="vc_file_line_text">  envp=0x7fffffffe3c0) at /home/rnk/llvm-gdb/tools/lli/lli.cpp:208
</td>
</tr>




<tr class="vc_row_odd" id="l756">
<td class="vc_file_line_number">756</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l757">
<td class="vc_file_line_number">757</td>

<td class="vc_file_line_text">Previously, the JIT-compiled frames would have caused gdb to unwind incorrectly,
</td>
</tr>




<tr class="vc_row_odd" id="l758">
<td class="vc_file_line_number">758</td>

<td class="vc_file_line_text">generating lots of obviously-incorrect ``#6 0x00002aaaabe7d0aa in ?? ()``-style
</td>
</tr>




<tr class="vc_row_odd" id="l759">
<td class="vc_file_line_number">759</td>

<td class="vc_file_line_text">stack frames.
</td>
</tr>




<tr class="vc_row_odd" id="l760">
<td class="vc_file_line_number">760</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l761">
<td class="vc_file_line_number">761</td>

<td class="vc_file_line_text">Highlights:
</td>
</tr>




<tr class="vc_row_odd" id="l762">
<td class="vc_file_line_number">762</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l763">
<td class="vc_file_line_number">763</td>

<td class="vc_file_line_text">- gdb 7.0 is able to correctly parse JIT-compiled stack frames, allowing full
</td>
</tr>




<tr class="vc_row_odd" id="l764">
<td class="vc_file_line_number">764</td>

<td class="vc_file_line_text">  use of gdb on non-JIT-compiled functions, that is, the vast majority of the
</td>
</tr>




<tr class="vc_row_odd" id="l765">
<td class="vc_file_line_number">765</td>

<td class="vc_file_line_text">  CPython codebase.
</td>
</tr>




<tr class="vc_row_odd" id="l766">
<td class="vc_file_line_number">766</td>

<td class="vc_file_line_text">- Disassembling inside a JIT-compiled stack frame automatically prints the full
</td>
</tr>




<tr class="vc_row_odd" id="l767">
<td class="vc_file_line_number">767</td>

<td class="vc_file_line_text">  list of instructions making up that function. This is an advance over the
</td>
</tr>




<tr class="vc_row_odd" id="l768">
<td class="vc_file_line_number">768</td>

<td class="vc_file_line_text">  state of gdb before our work: developers needed to guess the starting address
</td>
</tr>




<tr class="vc_row_odd" id="l769">
<td class="vc_file_line_number">769</td>

<td class="vc_file_line_text">  of the function and manually disassemble the assembly code.
</td>
</tr>




<tr class="vc_row_odd" id="l770">
<td class="vc_file_line_number">770</td>

<td class="vc_file_line_text">- Flexible underlying mechanism allows CPython to add more and more information,
</td>
</tr>




<tr class="vc_row_odd" id="l771">
<td class="vc_file_line_number">771</td>

<td class="vc_file_line_text">  and eventually reach parity with C/C++ support in gdb for JIT-compiled machine
</td>
</tr>




<tr class="vc_row_odd" id="l772">
<td class="vc_file_line_number">772</td>

<td class="vc_file_line_text">  code.
</td>
</tr>




<tr class="vc_row_odd" id="l773">
<td class="vc_file_line_number">773</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l774">
<td class="vc_file_line_number">774</td>

<td class="vc_file_line_text">Lowlights:
</td>
</tr>




<tr class="vc_row_odd" id="l775">
<td class="vc_file_line_number">775</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l776">
<td class="vc_file_line_number">776</td>

<td class="vc_file_line_text">- gdb cannot print local variables or tell you what line you&#39;re currently
</td>
</tr>




<tr class="vc_row_odd" id="l777">
<td class="vc_file_line_number">777</td>

<td class="vc_file_line_text">  executing inside a JIT-compiled function. Nor can it step through
</td>
</tr>




<tr class="vc_row_odd" id="l778">
<td class="vc_file_line_number">778</td>

<td class="vc_file_line_text">  JIT-compiled code, except for one instruction at a time.
</td>
</tr>




<tr class="vc_row_odd" id="l779">
<td class="vc_file_line_number">779</td>

<td class="vc_file_line_text">- Not yet integrated with Apple&#39;s gdb or Microsoft&#39;s Visual Studio debuggers.
</td>
</tr>




<tr class="vc_row_odd" id="l780">
<td class="vc_file_line_number">780</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l781">
<td class="vc_file_line_number">781</td>

<td class="vc_file_line_text">The Unladen Swallow team is working with Apple to get these changes
</td>
</tr>




<tr class="vc_row_odd" id="l782">
<td class="vc_file_line_number">782</td>

<td class="vc_file_line_text">incorporated into their future gdb releases.
</td>
</tr>




<tr class="vc_row_odd" id="l783">
<td class="vc_file_line_number">783</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l784">
<td class="vc_file_line_number">784</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l785">
<td class="vc_file_line_number">785</td>

<td class="vc_file_line_text">Profiling
</td>
</tr>




<tr class="vc_row_odd" id="l786">
<td class="vc_file_line_number">786</td>

<td class="vc_file_line_text">---------
</td>
</tr>




<tr class="vc_row_odd" id="l787">
<td class="vc_file_line_number">787</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l788">
<td class="vc_file_line_number">788</td>

<td class="vc_file_line_text">Unladen Swallow integrates with oProfile 0.9.4 and newer [#oprofile]_ to support
</td>
</tr>




<tr class="vc_row_odd" id="l789">
<td class="vc_file_line_number">789</td>

<td class="vc_file_line_text">assembly-level profiling on Linux systems. This means that oProfile will
</td>
</tr>




<tr class="vc_row_odd" id="l790">
<td class="vc_file_line_number">790</td>

<td class="vc_file_line_text">correctly symbolize JIT-compiled functions in its reports.
</td>
</tr>




<tr class="vc_row_odd" id="l791">
<td class="vc_file_line_number">791</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l792">
<td class="vc_file_line_number">792</td>

<td class="vc_file_line_text">Example report, where the ``#u#``-prefixed symbol names are JIT-compiled Python
</td>
</tr>




<tr class="vc_row_odd" id="l793">
<td class="vc_file_line_number">793</td>

<td class="vc_file_line_text">functions:
</td>
</tr>




<tr class="vc_row_odd" id="l794">
<td class="vc_file_line_number">794</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l795">
<td class="vc_file_line_number">795</td>

<td class="vc_file_line_text">::
</td>
</tr>




<tr class="vc_row_odd" id="l796">
<td class="vc_file_line_number">796</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l797">
<td class="vc_file_line_number">797</td>

<td class="vc_file_line_text">  $ opreport -l ./python | less
</td>
</tr>




<tr class="vc_row_odd" id="l798">
<td class="vc_file_line_number">798</td>

<td class="vc_file_line_text">  CPU: Core 2, speed 1600 MHz (estimated)
</td>
</tr>




<tr class="vc_row_odd" id="l799">
<td class="vc_file_line_number">799</td>

<td class="vc_file_line_text">  Counted CPU_CLK_UNHALTED events (Clock cycles when not halted) with a unit mask of 0x00 (Unhalted core cycles) count 100000
</td>
</tr>




<tr class="vc_row_odd" id="l800">
<td class="vc_file_line_number">800</td>

<td class="vc_file_line_text">  samples % image name symbol name
</td>
</tr>




<tr class="vc_row_odd" id="l801">
<td class="vc_file_line_number">801</td>

<td class="vc_file_line_text">  79589 4.2329 python PyString_FromFormatV
</td>
</tr>




<tr class="vc_row_odd" id="l802">
<td class="vc_file_line_number">802</td>

<td class="vc_file_line_text">  62971 3.3491 python PyEval_EvalCodeEx
</td>
</tr>




<tr class="vc_row_odd" id="l803">
<td class="vc_file_line_number">803</td>

<td class="vc_file_line_text">  62713 3.3354 python tupledealloc
</td>
</tr>




<tr class="vc_row_odd" id="l804">
<td class="vc_file_line_number">804</td>

<td class="vc_file_line_text">  57071 3.0353 python _PyEval_CallFunction
</td>
</tr>




<tr class="vc_row_odd" id="l805">
<td class="vc_file_line_number">805</td>

<td class="vc_file_line_text">  50009 2.6597 24532.jo #u#force_unicode
</td>
</tr>




<tr class="vc_row_odd" id="l806">
<td class="vc_file_line_number">806</td>

<td class="vc_file_line_text">  47468 2.5246 python PyUnicodeUCS2_Decode
</td>
</tr>




<tr class="vc_row_odd" id="l807">
<td class="vc_file_line_number">807</td>

<td class="vc_file_line_text">  45829 2.4374 python PyFrame_New
</td>
</tr>




<tr class="vc_row_odd" id="l808">
<td class="vc_file_line_number">808</td>

<td class="vc_file_line_text">  45173 2.4025 python lookdict_string
</td>
</tr>




<tr class="vc_row_odd" id="l809">
<td class="vc_file_line_number">809</td>

<td class="vc_file_line_text">  43082 2.2913 python PyType_IsSubtype
</td>
</tr>




<tr class="vc_row_odd" id="l810">
<td class="vc_file_line_number">810</td>

<td class="vc_file_line_text">  39763 2.1148 24532.jo #u#render5
</td>
</tr>




<tr class="vc_row_odd" id="l811">
<td class="vc_file_line_number">811</td>

<td class="vc_file_line_text">  38145 2.0287 python _PyType_Lookup
</td>
</tr>




<tr class="vc_row_odd" id="l812">
<td class="vc_file_line_number">812</td>

<td class="vc_file_line_text">  37643 2.0020 python PyObject_GC_UnTrack
</td>
</tr>




<tr class="vc_row_odd" id="l813">
<td class="vc_file_line_number">813</td>

<td class="vc_file_line_text">  37105 1.9734 python frame_dealloc
</td>
</tr>




<tr class="vc_row_odd" id="l814">
<td class="vc_file_line_number">814</td>

<td class="vc_file_line_text">  36849 1.9598 python PyEval_EvalFrame
</td>
</tr>




<tr class="vc_row_odd" id="l815">
<td class="vc_file_line_number">815</td>

<td class="vc_file_line_text">  35630 1.8950 24532.jo #u#resolve
</td>
</tr>




<tr class="vc_row_odd" id="l816">
<td class="vc_file_line_number">816</td>

<td class="vc_file_line_text">  33313 1.7717 python PyObject_IsInstance
</td>
</tr>




<tr class="vc_row_odd" id="l817">
<td class="vc_file_line_number">817</td>

<td class="vc_file_line_text">  33208 1.7662 python PyDict_GetItem
</td>
</tr>




<tr class="vc_row_odd" id="l818">
<td class="vc_file_line_number">818</td>

<td class="vc_file_line_text">  33168 1.7640 python PyTuple_New
</td>
</tr>




<tr class="vc_row_odd" id="l819">
<td class="vc_file_line_number">819</td>

<td class="vc_file_line_text">  30458 1.6199 python PyCFunction_NewEx
</td>
</tr>




<tr class="vc_row_odd" id="l820">
<td class="vc_file_line_number">820</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l821">
<td class="vc_file_line_number">821</td>

<td class="vc_file_line_text">This support is functional, but as-yet unpolished. Unladen Swallow maintains a
</td>
</tr>




<tr class="vc_row_odd" id="l822">
<td class="vc_file_line_number">822</td>

<td class="vc_file_line_text">punchlist of items we feel are important to improve in our oProfile integration
</td>
</tr>




<tr class="vc_row_odd" id="l823">
<td class="vc_file_line_number">823</td>

<td class="vc_file_line_text">to make it more useful to core CPython developers [#us-oprofile-punchlist]_.
</td>
</tr>




<tr class="vc_row_odd" id="l824">
<td class="vc_file_line_number">824</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l825">
<td class="vc_file_line_number">825</td>

<td class="vc_file_line_text">Highlights:
</td>
</tr>




<tr class="vc_row_odd" id="l826">
<td class="vc_file_line_number">826</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l827">
<td class="vc_file_line_number">827</td>

<td class="vc_file_line_text">- Symbolization of JITted frames working in oProfile on Linux.
</td>
</tr>




<tr class="vc_row_odd" id="l828">
<td class="vc_file_line_number">828</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l829">
<td class="vc_file_line_number">829</td>

<td class="vc_file_line_text">Lowlights:
</td>
</tr>




<tr class="vc_row_odd" id="l830">
<td class="vc_file_line_number">830</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l831">
<td class="vc_file_line_number">831</td>

<td class="vc_file_line_text">- No work yet invested in improving symbolization of JIT-compiled frames for
</td>
</tr>




<tr class="vc_row_odd" id="l832">
<td class="vc_file_line_number">832</td>

<td class="vc_file_line_text">  Apple&#39;s Shark [#shark]_ or Microsoft&#39;s Visual Studio profiling tools.
</td>
</tr>




<tr class="vc_row_odd" id="l833">
<td class="vc_file_line_number">833</td>

<td class="vc_file_line_text">- Some polishing still desired for oProfile output.
</td>
</tr>




<tr class="vc_row_odd" id="l834">
<td class="vc_file_line_number">834</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l835">
<td class="vc_file_line_number">835</td>

<td class="vc_file_line_text">We recommend using oProfile 0.9.5 (and newer) to work around a now-fixed bug on
</td>
</tr>




<tr class="vc_row_odd" id="l836">
<td class="vc_file_line_number">836</td>

<td class="vc_file_line_text">x86-64 platforms in oProfile. oProfile 0.9.4 will work fine on 32-bit platforms,
</td>
</tr>




<tr class="vc_row_odd" id="l837">
<td class="vc_file_line_number">837</td>

<td class="vc_file_line_text">however.
</td>
</tr>




<tr class="vc_row_odd" id="l838">
<td class="vc_file_line_number">838</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l839">
<td class="vc_file_line_number">839</td>

<td class="vc_file_line_text">Given the ease of integrating oProfile with LLVM [#llvm-oprofile-change]_ and
</td>
</tr>




<tr class="vc_row_odd" id="l840">
<td class="vc_file_line_number">840</td>

<td class="vc_file_line_text">Unladen Swallow [#us-oprofile-change]_, other profiling tools should be easy as
</td>
</tr>




<tr class="vc_row_odd" id="l841">
<td class="vc_file_line_number">841</td>

<td class="vc_file_line_text">well, provided they support a similar JIT interface [#oprofile-jit-interface]_.
</td>
</tr>




<tr class="vc_row_odd" id="l842">
<td class="vc_file_line_number">842</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l843">
<td class="vc_file_line_number">843</td>

<td class="vc_file_line_text">We have documented the process for using oProfile to profile Unladen Swallow
</td>
</tr>




<tr class="vc_row_odd" id="l844">
<td class="vc_file_line_number">844</td>

<td class="vc_file_line_text">[#oprofile-workflow]_. This document will be merged into CPython&#39;s `Doc/` tree
</td>
</tr>




<tr class="vc_row_odd" id="l845">
<td class="vc_file_line_number">845</td>

<td class="vc_file_line_text">in the merge.
</td>
</tr>




<tr class="vc_row_odd" id="l846">
<td class="vc_file_line_number">846</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l847">
<td class="vc_file_line_number">847</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l848">
<td class="vc_file_line_number">848</td>

<td class="vc_file_line_text">Addition of C++ to CPython
</td>
</tr>




<tr class="vc_row_odd" id="l849">
<td class="vc_file_line_number">849</td>

<td class="vc_file_line_text">--------------------------
</td>
</tr>




<tr class="vc_row_odd" id="l850">
<td class="vc_file_line_number">850</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l851">
<td class="vc_file_line_number">851</td>

<td class="vc_file_line_text">In order to use LLVM, Unladen Swallow has introduced C++ into the core CPython
</td>
</tr>




<tr class="vc_row_odd" id="l852">
<td class="vc_file_line_number">852</td>

<td class="vc_file_line_text">tree and build process. This is an unavoidable part of depending on LLVM; though
</td>
</tr>




<tr class="vc_row_odd" id="l853">
<td class="vc_file_line_number">853</td>

<td class="vc_file_line_text">LLVM offers a C API [#llvm-c-api]_, it is limited and does not expose the
</td>
</tr>




<tr class="vc_row_odd" id="l854">
<td class="vc_file_line_number">854</td>

<td class="vc_file_line_text">functionality needed by CPython. Because of this, we have implemented the
</td>
</tr>




<tr class="vc_row_odd" id="l855">
<td class="vc_file_line_number">855</td>

<td class="vc_file_line_text">internal details of the Unladen Swallow JIT and its supporting infrastructure
</td>
</tr>




<tr class="vc_row_odd" id="l856">
<td class="vc_file_line_number">856</td>

<td class="vc_file_line_text">in C++. We do not propose converting the entire CPython codebase to C++.
</td>
</tr>




<tr class="vc_row_odd" id="l857">
<td class="vc_file_line_number">857</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l858">
<td class="vc_file_line_number">858</td>

<td class="vc_file_line_text">Highlights:
</td>
</tr>




<tr class="vc_row_odd" id="l859">
<td class="vc_file_line_number">859</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l860">
<td class="vc_file_line_number">860</td>

<td class="vc_file_line_text">- Easy use of LLVM&#39;s full, powerful code generation and related APIs.
</td>
</tr>




<tr class="vc_row_odd" id="l861">
<td class="vc_file_line_number">861</td>

<td class="vc_file_line_text">- Convenient, abstract data structures simplify code.
</td>
</tr>




<tr class="vc_row_odd" id="l862">
<td class="vc_file_line_number">862</td>

<td class="vc_file_line_text">- C++ is limited to relatively small corners of the CPython codebase.
</td>
</tr>




<tr class="vc_row_odd" id="l863">
<td class="vc_file_line_number">863</td>

<td class="vc_file_line_text">- C++ can be disabled via ``./configure --without-llvm``, which even omits the
</td>
</tr>




<tr class="vc_row_odd" id="l864">
<td class="vc_file_line_number">864</td>

<td class="vc_file_line_text">  dependency on ``libstdc++``.
</td>
</tr>




<tr class="vc_row_odd" id="l865">
<td class="vc_file_line_number">865</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l866">
<td class="vc_file_line_number">866</td>

<td class="vc_file_line_text">Lowlights:
</td>
</tr>




<tr class="vc_row_odd" id="l867">
<td class="vc_file_line_number">867</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l868">
<td class="vc_file_line_number">868</td>

<td class="vc_file_line_text">- Developers must know two related languages, C and C++ to work on the full
</td>
</tr>




<tr class="vc_row_odd" id="l869">
<td class="vc_file_line_number">869</td>

<td class="vc_file_line_text">  range of CPython&#39;s internals.
</td>
</tr>




<tr class="vc_row_odd" id="l870">
<td class="vc_file_line_number">870</td>

<td class="vc_file_line_text">- A C++ style guide will need to be developed and enforced. PEP 7 will be
</td>
</tr>




<tr class="vc_row_odd" id="l871">
<td class="vc_file_line_number">871</td>

<td class="vc_file_line_text">  extended [#pep7-cpp]_ to encompass C++ by taking the relevant parts of
</td>
</tr>




<tr class="vc_row_odd" id="l872">
<td class="vc_file_line_number">872</td>

<td class="vc_file_line_text">  the C++ style guides from Unladen Swallow [#us-styleguide]_, LLVM
</td>
</tr>




<tr class="vc_row_odd" id="l873">
<td class="vc_file_line_number">873</td>

<td class="vc_file_line_text">  [#llvm-styleguide]_ and Google [#google-styleguide]_.
</td>
</tr>




<tr class="vc_row_odd" id="l874">
<td class="vc_file_line_number">874</td>

<td class="vc_file_line_text">- Different C++ compilers emit different ABIs; this can cause problems if
</td>
</tr>




<tr class="vc_row_odd" id="l875">
<td class="vc_file_line_number">875</td>

<td class="vc_file_line_text">  CPython is compiled with one C++ compiler and extensions modules are compiled
</td>
</tr>




<tr class="vc_row_odd" id="l876">
<td class="vc_file_line_number">876</td>

<td class="vc_file_line_text">  with a different C++ compiler.
</td>
</tr>




<tr class="vc_row_odd" id="l877">
<td class="vc_file_line_number">877</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l878">
<td class="vc_file_line_number">878</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l879">
<td class="vc_file_line_number">879</td>

<td class="vc_file_line_text">Managing LLVM Releases, C++ API Changes
</td>
</tr>




<tr class="vc_row_odd" id="l880">
<td class="vc_file_line_number">880</td>

<td class="vc_file_line_text">---------------------------------------
</td>
</tr>




<tr class="vc_row_odd" id="l881">
<td class="vc_file_line_number">881</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l882">
<td class="vc_file_line_number">882</td>

<td class="vc_file_line_text">LLVM is released regularly every six months. This means that LLVM may be
</td>
</tr>




<tr class="vc_row_odd" id="l883">
<td class="vc_file_line_number">883</td>

<td class="vc_file_line_text">released two or three times during the course of development of a CPython 3.x
</td>
</tr>




<tr class="vc_row_odd" id="l884">
<td class="vc_file_line_number">884</td>

<td class="vc_file_line_text">release. Each LLVM release brings newer and more powerful optimizations,
</td>
</tr>




<tr class="vc_row_odd" id="l885">
<td class="vc_file_line_number">885</td>

<td class="vc_file_line_text">improved platform support and more sophisticated code generation.
</td>
</tr>




<tr class="vc_row_odd" id="l886">
<td class="vc_file_line_number">886</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l887">
<td class="vc_file_line_number">887</td>

<td class="vc_file_line_text">LLVM releases usually include incompatible changes to the LLVM C++ API; the
</td>
</tr>




<tr class="vc_row_odd" id="l888">
<td class="vc_file_line_number">888</td>

<td class="vc_file_line_text">release notes for LLVM 2.6 [#llvm-26-whatsnew]_ include a list of
</td>
</tr>




<tr class="vc_row_odd" id="l889">
<td class="vc_file_line_number">889</td>

<td class="vc_file_line_text">intentionally-introduced incompatibilities. Unladen Swallow has tracked LLVM
</td>
</tr>




<tr class="vc_row_odd" id="l890">
<td class="vc_file_line_number">890</td>

<td class="vc_file_line_text">trunk closely over the course of development. Our experience has been
</td>
</tr>




<tr class="vc_row_odd" id="l891">
<td class="vc_file_line_number">891</td>

<td class="vc_file_line_text">that LLVM API changes are obvious and easily or mechanically remedied. We
</td>
</tr>




<tr class="vc_row_odd" id="l892">
<td class="vc_file_line_number">892</td>

<td class="vc_file_line_text">include two such changes from the Unladen Swallow tree as references here:
</td>
</tr>




<tr class="vc_row_odd" id="l893">
<td class="vc_file_line_number">893</td>

<td class="vc_file_line_text">[#us-llvm-r820]_, [#us-llvm-r532]_.
</td>
</tr>




<tr class="vc_row_odd" id="l894">
<td class="vc_file_line_number">894</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l895">
<td class="vc_file_line_number">895</td>

<td class="vc_file_line_text">Due to API incompatibilities, we recommend that an LLVM-based CPython target
</td>
</tr>




<tr class="vc_row_odd" id="l896">
<td class="vc_file_line_number">896</td>

<td class="vc_file_line_text">compatibility with a single version of LLVM at a time. This will lower the
</td>
</tr>




<tr class="vc_row_odd" id="l897">
<td class="vc_file_line_number">897</td>

<td class="vc_file_line_text">overhead on the core development team. Pegging to an LLVM version should not be
</td>
</tr>




<tr class="vc_row_odd" id="l898">
<td class="vc_file_line_number">898</td>

<td class="vc_file_line_text">a problem from a packaging perspective, because pre-built LLVM packages
</td>
</tr>




<tr class="vc_row_odd" id="l899">
<td class="vc_file_line_number">899</td>

<td class="vc_file_line_text">generally become available via standard system package managers fairly quickly
</td>
</tr>




<tr class="vc_row_odd" id="l900">
<td class="vc_file_line_number">900</td>

<td class="vc_file_line_text">following an LLVM release, and failing that, llvm.org itself includes binary
</td>
</tr>




<tr class="vc_row_odd" id="l901">
<td class="vc_file_line_number">901</td>

<td class="vc_file_line_text">releases.
</td>
</tr>




<tr class="vc_row_odd" id="l902">
<td class="vc_file_line_number">902</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l903">
<td class="vc_file_line_number">903</td>

<td class="vc_file_line_text">Unladen Swallow has historically included a copy of the LLVM and Clang source
</td>
</tr>




<tr class="vc_row_odd" id="l904">
<td class="vc_file_line_number">904</td>

<td class="vc_file_line_text">trees in the Unladen Swallow tree; this was done to allow us to closely track
</td>
</tr>




<tr class="vc_row_odd" id="l905">
<td class="vc_file_line_number">905</td>

<td class="vc_file_line_text">LLVM trunk as we made patches to it. We do not recommend this model of
</td>
</tr>




<tr class="vc_row_odd" id="l906">
<td class="vc_file_line_number">906</td>

<td class="vc_file_line_text">development for CPython. CPython releases should be based on official LLVM
</td>
</tr>




<tr class="vc_row_odd" id="l907">
<td class="vc_file_line_number">907</td>

<td class="vc_file_line_text">releases. Pre-built LLVM packages are available from MacPorts [#llvm-macports]_
</td>
</tr>




<tr class="vc_row_odd" id="l908">
<td class="vc_file_line_number">908</td>

<td class="vc_file_line_text">for Darwin, and from most major Linux distributions ([#llvm-ubuntu]_,
</td>
</tr>




<tr class="vc_row_odd" id="l909">
<td class="vc_file_line_number">909</td>

<td class="vc_file_line_text">[#llvm-debian]_, [#llvm-fedora]_). LLVM itself provides additional binaries,
</td>
</tr>




<tr class="vc_row_odd" id="l910">
<td class="vc_file_line_number">910</td>

<td class="vc_file_line_text">such as for MinGW [#llvm-mingw]_.
</td>
</tr>




<tr class="vc_row_odd" id="l911">
<td class="vc_file_line_number">911</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l912">
<td class="vc_file_line_number">912</td>

<td class="vc_file_line_text">LLVM is currently intended to be statically linked; this means that binary
</td>
</tr>




<tr class="vc_row_odd" id="l913">
<td class="vc_file_line_number">913</td>

<td class="vc_file_line_text">releases of CPython will include the relevant parts (not all!) of LLVM. This
</td>
</tr>




<tr class="vc_row_odd" id="l914">
<td class="vc_file_line_number">914</td>

<td class="vc_file_line_text">will increase the binary size, as noted above. To simplify downstream package
</td>
</tr>




<tr class="vc_row_odd" id="l915">
<td class="vc_file_line_number">915</td>

<td class="vc_file_line_text">management, we will modify LLVM to better support shared linking. This issue
</td>
</tr>




<tr class="vc_row_odd" id="l916">
<td class="vc_file_line_number">916</td>

<td class="vc_file_line_text">will block final merger [#us-shared-link-issue]_.
</td>
</tr>




<tr class="vc_row_odd" id="l917">
<td class="vc_file_line_number">917</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l918">
<td class="vc_file_line_number">918</td>

<td class="vc_file_line_text">Unladen Swallow has tasked a full-time engineer with fixing any remaining
</td>
</tr>




<tr class="vc_row_odd" id="l919">
<td class="vc_file_line_number">919</td>

<td class="vc_file_line_text">critical issues in LLVM before LLVM&#39;s 2.7 release. We consider it essential that
</td>
</tr>




<tr class="vc_row_odd" id="l920">
<td class="vc_file_line_number">920</td>

<td class="vc_file_line_text">CPython 3.x be able to depend on a released version of LLVM, rather than closely
</td>
</tr>




<tr class="vc_row_odd" id="l921">
<td class="vc_file_line_number">921</td>

<td class="vc_file_line_text">tracking LLVM trunk as Unladen Swallow has done. We believe we will finish this
</td>
</tr>




<tr class="vc_row_odd" id="l922">
<td class="vc_file_line_number">922</td>

<td class="vc_file_line_text">work [#us-llvm-punchlist]_ before the release of LLVM 2.7, expected in May 2010.
</td>
</tr>




<tr class="vc_row_odd" id="l923">
<td class="vc_file_line_number">923</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l924">
<td class="vc_file_line_number">924</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l925">
<td class="vc_file_line_number">925</td>

<td class="vc_file_line_text">Building CPython
</td>
</tr>




<tr class="vc_row_odd" id="l926">
<td class="vc_file_line_number">926</td>

<td class="vc_file_line_text">----------------
</td>
</tr>




<tr class="vc_row_odd" id="l927">
<td class="vc_file_line_number">927</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l928">
<td class="vc_file_line_number">928</td>

<td class="vc_file_line_text">In addition to a runtime dependency on LLVM, Unladen Swallow includes a
</td>
</tr>




<tr class="vc_row_odd" id="l929">
<td class="vc_file_line_number">929</td>

<td class="vc_file_line_text">build-time dependency on Clang [#clang]_, an LLVM-based C/C++ compiler. We use
</td>
</tr>




<tr class="vc_row_odd" id="l930">
<td class="vc_file_line_number">930</td>

<td class="vc_file_line_text">this to compile parts of the C-language Python runtime to LLVM&#39;s intermediate
</td>
</tr>




<tr class="vc_row_odd" id="l931">
<td class="vc_file_line_number">931</td>

<td class="vc_file_line_text">representation; this allows us to perform cross-language inlining, yielding
</td>
</tr>




<tr class="vc_row_odd" id="l932">
<td class="vc_file_line_number">932</td>

<td class="vc_file_line_text">increased performance. Clang is not required to run Unladen Swallow. Clang
</td>
</tr>




<tr class="vc_row_odd" id="l933">
<td class="vc_file_line_number">933</td>

<td class="vc_file_line_text">binary packages are available from most major Linux distributions (for example,
</td>
</tr>




<tr class="vc_row_odd" id="l934">
<td class="vc_file_line_number">934</td>

<td class="vc_file_line_text">[#clang-debian]_).
</td>
</tr>




<tr class="vc_row_odd" id="l935">
<td class="vc_file_line_number">935</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l936">
<td class="vc_file_line_number">936</td>

<td class="vc_file_line_text">We examined the impact of Unladen Swallow on the time needed to build Python,
</td>
</tr>




<tr class="vc_row_odd" id="l937">
<td class="vc_file_line_number">937</td>

<td class="vc_file_line_text">including configure, full builds and incremental builds after touching a single
</td>
</tr>




<tr class="vc_row_odd" id="l938">
<td class="vc_file_line_number">938</td>

<td class="vc_file_line_text">C source file.
</td>
</tr>




<tr class="vc_row_odd" id="l939">
<td class="vc_file_line_number">939</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l940">
<td class="vc_file_line_number">940</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l941">
<td class="vc_file_line_number">941</td>

<td class="vc_file_line_text">| ./configure | CPython 2.6.4 | CPython 3.1.1 | Unladen Swallow r988 |
</td>
</tr>




<tr class="vc_row_odd" id="l942">
<td class="vc_file_line_number">942</td>

<td class="vc_file_line_text">+=============+===============+===============+======================+
</td>
</tr>




<tr class="vc_row_odd" id="l943">
<td class="vc_file_line_number">943</td>

<td class="vc_file_line_text">| Run 1       | 0m20.795s     | 0m16.558s     | 0m15.477s            |
</td>
</tr>




<tr class="vc_row_odd" id="l944">
<td class="vc_file_line_number">944</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l945">
<td class="vc_file_line_number">945</td>

<td class="vc_file_line_text">| Run 2       | 0m15.255s     | 0m16.349s     | 0m15.391s            |
</td>
</tr>




<tr class="vc_row_odd" id="l946">
<td class="vc_file_line_number">946</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l947">
<td class="vc_file_line_number">947</td>

<td class="vc_file_line_text">| Run 3       | 0m15.228s     | 0m16.299s     | 0m15.528s            |
</td>
</tr>




<tr class="vc_row_odd" id="l948">
<td class="vc_file_line_number">948</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l949">
<td class="vc_file_line_number">949</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l950">
<td class="vc_file_line_number">950</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l951">
<td class="vc_file_line_number">951</td>

<td class="vc_file_line_text">| Full make   | CPython 2.6.4 | CPython 3.1.1 | Unladen Swallow r988 |
</td>
</tr>




<tr class="vc_row_odd" id="l952">
<td class="vc_file_line_number">952</td>

<td class="vc_file_line_text">+=============+===============+===============+======================+
</td>
</tr>




<tr class="vc_row_odd" id="l953">
<td class="vc_file_line_number">953</td>

<td class="vc_file_line_text">| Run 1       | 1m30.776s     | 1m22.367s     | 1m54.053s            |
</td>
</tr>




<tr class="vc_row_odd" id="l954">
<td class="vc_file_line_number">954</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l955">
<td class="vc_file_line_number">955</td>

<td class="vc_file_line_text">| Run 2       | 1m21.374s     | 1m22.064s     | 1m49.448s            |
</td>
</tr>




<tr class="vc_row_odd" id="l956">
<td class="vc_file_line_number">956</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l957">
<td class="vc_file_line_number">957</td>

<td class="vc_file_line_text">| Run 3       | 1m22.047s     | 1m23.645s     | 1m49.305s            |
</td>
</tr>




<tr class="vc_row_odd" id="l958">
<td class="vc_file_line_number">958</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l959">
<td class="vc_file_line_number">959</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l960">
<td class="vc_file_line_number">960</td>

<td class="vc_file_line_text">Full builds take a hit due to a) additional ``.cc`` files needed for LLVM
</td>
</tr>




<tr class="vc_row_odd" id="l961">
<td class="vc_file_line_number">961</td>

<td class="vc_file_line_text">interaction, b) statically linking LLVM into ``libpython``, c) compiling parts
</td>
</tr>




<tr class="vc_row_odd" id="l962">
<td class="vc_file_line_number">962</td>

<td class="vc_file_line_text">of the Python runtime to LLVM IR to enable cross-language inlining.
</td>
</tr>




<tr class="vc_row_odd" id="l963">
<td class="vc_file_line_number">963</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l964">
<td class="vc_file_line_number">964</td>

<td class="vc_file_line_text">Incremental builds are also somewhat slower than mainline CPython. The table
</td>
</tr>




<tr class="vc_row_odd" id="l965">
<td class="vc_file_line_number">965</td>

<td class="vc_file_line_text">below shows incremental rebuild times after touching ``Objects/listobject.c``.
</td>
</tr>




<tr class="vc_row_odd" id="l966">
<td class="vc_file_line_number">966</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l967">
<td class="vc_file_line_number">967</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+-----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l968">
<td class="vc_file_line_number">968</td>

<td class="vc_file_line_text">| Incr make   | CPython 2.6.4 | CPython 3.1.1 | Unladen Swallow r1024 |
</td>
</tr>




<tr class="vc_row_odd" id="l969">
<td class="vc_file_line_number">969</td>

<td class="vc_file_line_text">+=============+===============+===============+=======================+
</td>
</tr>




<tr class="vc_row_odd" id="l970">
<td class="vc_file_line_number">970</td>

<td class="vc_file_line_text">| Run 1       | 0m1.854s      | 0m1.456s      | 0m6.680s              |
</td>
</tr>




<tr class="vc_row_odd" id="l971">
<td class="vc_file_line_number">971</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+-----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l972">
<td class="vc_file_line_number">972</td>

<td class="vc_file_line_text">| Run 2       | 0m1.437s      | 0m1.442s      | 0m5.310s              |
</td>
</tr>




<tr class="vc_row_odd" id="l973">
<td class="vc_file_line_number">973</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+-----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l974">
<td class="vc_file_line_number">974</td>

<td class="vc_file_line_text">| Run 3       | 0m1.440s      | 0m1.425s      | 0m7.639s              |
</td>
</tr>




<tr class="vc_row_odd" id="l975">
<td class="vc_file_line_number">975</td>

<td class="vc_file_line_text">+-------------+---------------+---------------+-----------------------+
</td>
</tr>




<tr class="vc_row_odd" id="l976">
<td class="vc_file_line_number">976</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l977">
<td class="vc_file_line_number">977</td>

<td class="vc_file_line_text">As with full builds, this extra time comes from statically linking LLVM
</td>
</tr>




<tr class="vc_row_odd" id="l978">
<td class="vc_file_line_number">978</td>

<td class="vc_file_line_text">into ``libpython``. If ``libpython`` were linked shared against LLVM, this
</td>
</tr>




<tr class="vc_row_odd" id="l979">
<td class="vc_file_line_number">979</td>

<td class="vc_file_line_text">overhead would go down.
</td>
</tr>




<tr class="vc_row_odd" id="l980">
<td class="vc_file_line_number">980</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l981">
<td class="vc_file_line_number">981</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l982">
<td class="vc_file_line_number">982</td>

<td class="vc_file_line_text">Proposed Merge Plan
</td>
</tr>




<tr class="vc_row_odd" id="l983">
<td class="vc_file_line_number">983</td>

<td class="vc_file_line_text">===================
</td>
</tr>




<tr class="vc_row_odd" id="l984">
<td class="vc_file_line_number">984</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l985">
<td class="vc_file_line_number">985</td>

<td class="vc_file_line_text">We propose focusing our efforts on eventual merger with CPython&#39;s 3.x line of
</td>
</tr>




<tr class="vc_row_odd" id="l986">
<td class="vc_file_line_number">986</td>

<td class="vc_file_line_text">development. The BDFL has indicated that 2.7 is to be the final release of
</td>
</tr>




<tr class="vc_row_odd" id="l987">
<td class="vc_file_line_number">987</td>

<td class="vc_file_line_text">CPython&#39;s 2.x line of development [#bdfl-27-final]_, and since 2.7 alpha 1 has
</td>
</tr>




<tr class="vc_row_odd" id="l988">
<td class="vc_file_line_number">988</td>

<td class="vc_file_line_text">already been released [#cpy-27a1]_, we have missed the window. Python 3 is the
</td>
</tr>




<tr class="vc_row_odd" id="l989">
<td class="vc_file_line_number">989</td>

<td class="vc_file_line_text">future, and that is where we will target our performance efforts.
</td>
</tr>




<tr class="vc_row_odd" id="l990">
<td class="vc_file_line_number">990</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l991">
<td class="vc_file_line_number">991</td>

<td class="vc_file_line_text">We recommend the following plan for merger of Unladen Swallow into the CPython
</td>
</tr>




<tr class="vc_row_odd" id="l992">
<td class="vc_file_line_number">992</td>

<td class="vc_file_line_text">source tree:
</td>
</tr>




<tr class="vc_row_odd" id="l993">
<td class="vc_file_line_number">993</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l994">
<td class="vc_file_line_number">994</td>

<td class="vc_file_line_text">- Creation of a branch in the CPython SVN repository to work in, call it
</td>
</tr>




<tr class="vc_row_odd" id="l995">
<td class="vc_file_line_number">995</td>

<td class="vc_file_line_text">  ``py3k-jit`` as a strawman. This will be a branch of the CPython ``py3k``
</td>
</tr>




<tr class="vc_row_odd" id="l996">
<td class="vc_file_line_number">996</td>

<td class="vc_file_line_text">  branch.
</td>
</tr>




<tr class="vc_row_odd" id="l997">
<td class="vc_file_line_number">997</td>

<td class="vc_file_line_text">- We will keep this branch closely integrated to ``py3k``. The further we
</td>
</tr>




<tr class="vc_row_odd" id="l998">
<td class="vc_file_line_number">998</td>

<td class="vc_file_line_text">  deviate, the harder our work will be.
</td>
</tr>




<tr class="vc_row_odd" id="l999">
<td class="vc_file_line_number">999</td>

<td class="vc_file_line_text">- Any JIT-related patches will go into the ``py3k-jit`` branch.
</td>
</tr>




<tr class="vc_row_odd" id="l1000">
<td class="vc_file_line_number">1000</td>

<td class="vc_file_line_text">- Non-JIT-related patches will go into the ``py3k`` branch (once reviewed and
</td>
</tr>




<tr class="vc_row_odd" id="l1001">
<td class="vc_file_line_number">1001</td>

<td class="vc_file_line_text">  approved) and be merged back into the ``py3k-jit`` branch.
</td>
</tr>




<tr class="vc_row_odd" id="l1002">
<td class="vc_file_line_number">1002</td>

<td class="vc_file_line_text">- Potentially-contentious issues, such as the introduction of new command line
</td>
</tr>




<tr class="vc_row_odd" id="l1003">
<td class="vc_file_line_number">1003</td>

<td class="vc_file_line_text">  flags or environment variables, will be discussed on python-dev.
</td>
</tr>




<tr class="vc_row_odd" id="l1004">
<td class="vc_file_line_number">1004</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1005">
<td class="vc_file_line_number">1005</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1006">
<td class="vc_file_line_number">1006</td>

<td class="vc_file_line_text">Because Google uses CPython 2.x internally, Unladen Swallow is based on CPython
</td>
</tr>




<tr class="vc_row_odd" id="l1007">
<td class="vc_file_line_number">1007</td>

<td class="vc_file_line_text">2.6. We would need to port our compiler to Python 3; this would be done as
</td>
</tr>




<tr class="vc_row_odd" id="l1008">
<td class="vc_file_line_number">1008</td>

<td class="vc_file_line_text">patches are applied to the ``py3k-jit`` branch, so that the branch remains a
</td>
</tr>




<tr class="vc_row_odd" id="l1009">
<td class="vc_file_line_number">1009</td>

<td class="vc_file_line_text">consistent implementation of Python 3 at all times.
</td>
</tr>




<tr class="vc_row_odd" id="l1010">
<td class="vc_file_line_number">1010</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1011">
<td class="vc_file_line_number">1011</td>

<td class="vc_file_line_text">We believe this approach will be minimally disruptive to the 3.2 or 3.3 release
</td>
</tr>




<tr class="vc_row_odd" id="l1012">
<td class="vc_file_line_number">1012</td>

<td class="vc_file_line_text">process while we iron out any remaining issues blocking final merger into
</td>
</tr>




<tr class="vc_row_odd" id="l1013">
<td class="vc_file_line_number">1013</td>

<td class="vc_file_line_text">``py3k``. Unladen Swallow maintains a punchlist of known issues needed before
</td>
</tr>




<tr class="vc_row_odd" id="l1014">
<td class="vc_file_line_number">1014</td>

<td class="vc_file_line_text">final merger [#us-punchlist]_, which includes all problems mentioned in this
</td>
</tr>




<tr class="vc_row_odd" id="l1015">
<td class="vc_file_line_number">1015</td>

<td class="vc_file_line_text">PEP; we trust the CPython community will have its own concerns. This punchlist
</td>
</tr>




<tr class="vc_row_odd" id="l1016">
<td class="vc_file_line_number">1016</td>

<td class="vc_file_line_text">is not static; other issues may emerge in the future that will block final
</td>
</tr>




<tr class="vc_row_odd" id="l1017">
<td class="vc_file_line_number">1017</td>

<td class="vc_file_line_text">merger into the ``py3k`` branch.
</td>
</tr>




<tr class="vc_row_odd" id="l1018">
<td class="vc_file_line_number">1018</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1019">
<td class="vc_file_line_number">1019</td>

<td class="vc_file_line_text">Changes will be committed directly to the ``py3k-jit`` branch, with only large,
</td>
</tr>




<tr class="vc_row_odd" id="l1020">
<td class="vc_file_line_number">1020</td>

<td class="vc_file_line_text">tricky or controversial changes sent for pre-commit code review.
</td>
</tr>




<tr class="vc_row_odd" id="l1021">
<td class="vc_file_line_number">1021</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1022">
<td class="vc_file_line_number">1022</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1023">
<td class="vc_file_line_number">1023</td>

<td class="vc_file_line_text">Contingency Plans
</td>
</tr>




<tr class="vc_row_odd" id="l1024">
<td class="vc_file_line_number">1024</td>

<td class="vc_file_line_text">-----------------
</td>
</tr>




<tr class="vc_row_odd" id="l1025">
<td class="vc_file_line_number">1025</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1026">
<td class="vc_file_line_number">1026</td>

<td class="vc_file_line_text">There is a chance that we will not be able to reduce memory usage or startup
</td>
</tr>




<tr class="vc_row_odd" id="l1027">
<td class="vc_file_line_number">1027</td>

<td class="vc_file_line_text">time to a level satisfactory to the CPython community. Our primary contingency
</td>
</tr>




<tr class="vc_row_odd" id="l1028">
<td class="vc_file_line_number">1028</td>

<td class="vc_file_line_text">plan for this situation is to shift from a online just-in-time compilation
</td>
</tr>




<tr class="vc_row_odd" id="l1029">
<td class="vc_file_line_number">1029</td>

<td class="vc_file_line_text">strategy to an offline ahead-of-time strategy using an instrumented CPython
</td>
</tr>




<tr class="vc_row_odd" id="l1030">
<td class="vc_file_line_number">1030</td>

<td class="vc_file_line_text">interpreter loop to obtain feedback. This is the same model used by gcc&#39;s
</td>
</tr>




<tr class="vc_row_odd" id="l1031">
<td class="vc_file_line_number">1031</td>

<td class="vc_file_line_text">feedback-directed optimizations (`-fprofile-generate`) [#gcc-fdo]_ and
</td>
</tr>




<tr class="vc_row_odd" id="l1032">
<td class="vc_file_line_number">1032</td>

<td class="vc_file_line_text">Microsoft Visual Studio&#39;s profile-guided optimizations [#msvc-pgo]_; we will
</td>
</tr>




<tr class="vc_row_odd" id="l1033">
<td class="vc_file_line_number">1033</td>

<td class="vc_file_line_text">refer to this as &quot;feedback-directed optimization&quot; here, or FDO.
</td>
</tr>




<tr class="vc_row_odd" id="l1034">
<td class="vc_file_line_number">1034</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1035">
<td class="vc_file_line_number">1035</td>

<td class="vc_file_line_text">We believe that an FDO compiler for Python would be inferior to a JIT compiler.
</td>
</tr>




<tr class="vc_row_odd" id="l1036">
<td class="vc_file_line_number">1036</td>

<td class="vc_file_line_text">FDO requires a high-quality, representative benchmark suite, which is a relative
</td>
</tr>




<tr class="vc_row_odd" id="l1037">
<td class="vc_file_line_number">1037</td>

<td class="vc_file_line_text">rarity in both open- and closed-source development. A JIT compiler can
</td>
</tr>




<tr class="vc_row_odd" id="l1038">
<td class="vc_file_line_number">1038</td>

<td class="vc_file_line_text">dynamically find and optimize the hot spots in any application -- benchmark
</td>
</tr>




<tr class="vc_row_odd" id="l1039">
<td class="vc_file_line_number">1039</td>

<td class="vc_file_line_text">suite or no -- allowing it to adapt to changes in application bottlenecks
</td>
</tr>




<tr class="vc_row_odd" id="l1040">
<td class="vc_file_line_number">1040</td>

<td class="vc_file_line_text">without human intervention.
</td>
</tr>




<tr class="vc_row_odd" id="l1041">
<td class="vc_file_line_number">1041</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1042">
<td class="vc_file_line_number">1042</td>

<td class="vc_file_line_text">If an ahead-of-time FDO compiler is required, it should be able to leverage a
</td>
</tr>




<tr class="vc_row_odd" id="l1043">
<td class="vc_file_line_number">1043</td>

<td class="vc_file_line_text">large percentage of the code and infrastructure already developed for Unladen
</td>
</tr>




<tr class="vc_row_odd" id="l1044">
<td class="vc_file_line_number">1044</td>

<td class="vc_file_line_text">Swallow&#39;s JIT compiler. Indeed, these two compilation strategies could exist
</td>
</tr>




<tr class="vc_row_odd" id="l1045">
<td class="vc_file_line_number">1045</td>

<td class="vc_file_line_text">side-by-side.
</td>
</tr>




<tr class="vc_row_odd" id="l1046">
<td class="vc_file_line_number">1046</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1047">
<td class="vc_file_line_number">1047</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1048">
<td class="vc_file_line_number">1048</td>

<td class="vc_file_line_text">Future Work
</td>
</tr>




<tr class="vc_row_odd" id="l1049">
<td class="vc_file_line_number">1049</td>

<td class="vc_file_line_text">===========
</td>
</tr>




<tr class="vc_row_odd" id="l1050">
<td class="vc_file_line_number">1050</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1051">
<td class="vc_file_line_number">1051</td>

<td class="vc_file_line_text">A JIT compiler is an extremely flexible tool, and we have by no means exhausted
</td>
</tr>




<tr class="vc_row_odd" id="l1052">
<td class="vc_file_line_number">1052</td>

<td class="vc_file_line_text">its full potential. Unladen Swallow maintains a list of yet-to-be-implemented
</td>
</tr>




<tr class="vc_row_odd" id="l1053">
<td class="vc_file_line_number">1053</td>

<td class="vc_file_line_text">performance optimizations [#us-perf-punchlist]_ that the team has not yet
</td>
</tr>




<tr class="vc_row_odd" id="l1054">
<td class="vc_file_line_number">1054</td>

<td class="vc_file_line_text">had time to fully implement. Examples:
</td>
</tr>




<tr class="vc_row_odd" id="l1055">
<td class="vc_file_line_number">1055</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1056">
<td class="vc_file_line_number">1056</td>

<td class="vc_file_line_text">- Python/Python inlining [#inlining]_. Our compiler currently performs no
</td>
</tr>




<tr class="vc_row_odd" id="l1057">
<td class="vc_file_line_number">1057</td>

<td class="vc_file_line_text">  inlining between pure-Python functions. Work on this is on-going
</td>
</tr>




<tr class="vc_row_odd" id="l1058">
<td class="vc_file_line_number">1058</td>

<td class="vc_file_line_text">  [#us-inlining]_.
</td>
</tr>




<tr class="vc_row_odd" id="l1059">
<td class="vc_file_line_number">1059</td>

<td class="vc_file_line_text">- Unboxing [#unboxing]_. Unboxing is critical for numerical performance. PyPy
</td>
</tr>




<tr class="vc_row_odd" id="l1060">
<td class="vc_file_line_number">1060</td>

<td class="vc_file_line_text">  in particular has demonstrated the value of unboxing to heavily-numeric
</td>
</tr>




<tr class="vc_row_odd" id="l1061">
<td class="vc_file_line_number">1061</td>

<td class="vc_file_line_text">  workloads.
</td>
</tr>




<tr class="vc_row_odd" id="l1062">
<td class="vc_file_line_number">1062</td>

<td class="vc_file_line_text">- Recompilation, adaptation. Unladen Swallow currently only compiles a Python
</td>
</tr>




<tr class="vc_row_odd" id="l1063">
<td class="vc_file_line_number">1063</td>

<td class="vc_file_line_text">  function once, based on its usage pattern up to that point. If the usage
</td>
</tr>




<tr class="vc_row_odd" id="l1064">
<td class="vc_file_line_number">1064</td>

<td class="vc_file_line_text">  pattern changes, limitations in LLVM [#us-recompile-issue]_ prevent us from
</td>
</tr>




<tr class="vc_row_odd" id="l1065">
<td class="vc_file_line_number">1065</td>

<td class="vc_file_line_text">  recompiling the function to better serve the new usage pattern.
</td>
</tr>




<tr class="vc_row_odd" id="l1066">
<td class="vc_file_line_number">1066</td>

<td class="vc_file_line_text">- JIT-compile regular expressions. Modern JavaScript engines reuse their JIT
</td>
</tr>




<tr class="vc_row_odd" id="l1067">
<td class="vc_file_line_number">1067</td>

<td class="vc_file_line_text">  compilation infrastructure to boost regex performance [#us-regex-perf]_.
</td>
</tr>




<tr class="vc_row_odd" id="l1068">
<td class="vc_file_line_number">1068</td>

<td class="vc_file_line_text">  Unladen Swallow has developed benchmarks for Python regular expression
</td>
</tr>




<tr class="vc_row_odd" id="l1069">
<td class="vc_file_line_number">1069</td>

<td class="vc_file_line_text">  performance ([#us-bm-re-compile]_, [#us-bm-re-v8]_, [#us-bm-re-effbot]_), but
</td>
</tr>




<tr class="vc_row_odd" id="l1070">
<td class="vc_file_line_number">1070</td>

<td class="vc_file_line_text">  work on regex performance is still at an early stage [#us-regex-issue]_.
</td>
</tr>




<tr class="vc_row_odd" id="l1071">
<td class="vc_file_line_number">1071</td>

<td class="vc_file_line_text">- Trace compilation [#traces-waste-of-time]_, [#traces-explicit-pipeline]_.
</td>
</tr>




<tr class="vc_row_odd" id="l1072">
<td class="vc_file_line_number">1072</td>

<td class="vc_file_line_text">  Based on the results of PyPy and Tracemonkey [#tracemonkey]_, we believe that
</td>
</tr>




<tr class="vc_row_odd" id="l1073">
<td class="vc_file_line_number">1073</td>

<td class="vc_file_line_text">  a CPython JIT should incorporate trace compilation to some degree. We
</td>
</tr>




<tr class="vc_row_odd" id="l1074">
<td class="vc_file_line_number">1074</td>

<td class="vc_file_line_text">  initially avoided a purely-tracing JIT compiler in favor of a simpler,
</td>
</tr>




<tr class="vc_row_odd" id="l1075">
<td class="vc_file_line_number">1075</td>

<td class="vc_file_line_text">  function-at-a-time compiler. However this function-at-a-time compiler has laid
</td>
</tr>




<tr class="vc_row_odd" id="l1076">
<td class="vc_file_line_number">1076</td>

<td class="vc_file_line_text">  the groundwork for a future tracing compiler implemented in the same terms.
</td>
</tr>




<tr class="vc_row_odd" id="l1077">
<td class="vc_file_line_number">1077</td>

<td class="vc_file_line_text">- Profile generation/reuse. The runtime data gathered by the JIT could be
</td>
</tr>




<tr class="vc_row_odd" id="l1078">
<td class="vc_file_line_number">1078</td>

<td class="vc_file_line_text">  persisted to disk and reused by subsequent JIT compilations, or by external
</td>
</tr>




<tr class="vc_row_odd" id="l1079">
<td class="vc_file_line_number">1079</td>

<td class="vc_file_line_text">  tools such as Cython [#cython]_ or a feedback-enhanced code coverage tool.
</td>
</tr>




<tr class="vc_row_odd" id="l1080">
<td class="vc_file_line_number">1080</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1081">
<td class="vc_file_line_number">1081</td>

<td class="vc_file_line_text">This list is by no means exhaustive. There is a vast literature on optimizations
</td>
</tr>




<tr class="vc_row_odd" id="l1082">
<td class="vc_file_line_number">1082</td>

<td class="vc_file_line_text">for dynamic languages that could and should be implemented in terms of Unladen
</td>
</tr>




<tr class="vc_row_odd" id="l1083">
<td class="vc_file_line_number">1083</td>

<td class="vc_file_line_text">Swallow&#39;s LLVM-based JIT compiler [#us-relevantpapers]_.
</td>
</tr>




<tr class="vc_row_odd" id="l1084">
<td class="vc_file_line_number">1084</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1085">
<td class="vc_file_line_number">1085</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1086">
<td class="vc_file_line_number">1086</td>

<td class="vc_file_line_text">Unladen Swallow Community
</td>
</tr>




<tr class="vc_row_odd" id="l1087">
<td class="vc_file_line_number">1087</td>

<td class="vc_file_line_text">=========================
</td>
</tr>




<tr class="vc_row_odd" id="l1088">
<td class="vc_file_line_number">1088</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1089">
<td class="vc_file_line_number">1089</td>

<td class="vc_file_line_text">We would like to thank the community of developers who have contributed to
</td>
</tr>




<tr class="vc_row_odd" id="l1090">
<td class="vc_file_line_number">1090</td>

<td class="vc_file_line_text">Unladen Swallow, in particular: James Abbatiello, Joerg Blank, Eric Christopher,
</td>
</tr>




<tr class="vc_row_odd" id="l1091">
<td class="vc_file_line_number">1091</td>

<td class="vc_file_line_text">Alex Gaynor, Chris Lattner, Nick Lewycky, Evan Phoenix and Thomas Wouters.
</td>
</tr>




<tr class="vc_row_odd" id="l1092">
<td class="vc_file_line_number">1092</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1093">
<td class="vc_file_line_number">1093</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1094">
<td class="vc_file_line_number">1094</td>

<td class="vc_file_line_text">Licensing
</td>
</tr>




<tr class="vc_row_odd" id="l1095">
<td class="vc_file_line_number">1095</td>

<td class="vc_file_line_text">=========
</td>
</tr>




<tr class="vc_row_odd" id="l1096">
<td class="vc_file_line_number">1096</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1097">
<td class="vc_file_line_number">1097</td>

<td class="vc_file_line_text">All work on Unladen Swallow is licensed to the Python Software Foundation (PSF)
</td>
</tr>




<tr class="vc_row_odd" id="l1098">
<td class="vc_file_line_number">1098</td>

<td class="vc_file_line_text">under the terms of the Python Software Foundation License v2 [#psf-lic]_ under
</td>
</tr>




<tr class="vc_row_odd" id="l1099">
<td class="vc_file_line_number">1099</td>

<td class="vc_file_line_text">the umbrella of Google&#39;s blanket Contributor License Agreement with the PSF.
</td>
</tr>




<tr class="vc_row_odd" id="l1100">
<td class="vc_file_line_number">1100</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1101">
<td class="vc_file_line_number">1101</td>

<td class="vc_file_line_text">LLVM is licensed [#llvm-lic]_ under the University of llinois/NCSA Open Source
</td>
</tr>




<tr class="vc_row_odd" id="l1102">
<td class="vc_file_line_number">1102</td>

<td class="vc_file_line_text">License [#ui-lic]_, a liberal, OSI-approved license. The University of Illinois
</td>
</tr>




<tr class="vc_row_odd" id="l1103">
<td class="vc_file_line_number">1103</td>

<td class="vc_file_line_text">Urbana-Champaign is the sole copyright holder for LLVM.
</td>
</tr>




<tr class="vc_row_odd" id="l1104">
<td class="vc_file_line_number">1104</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1105">
<td class="vc_file_line_number">1105</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1106">
<td class="vc_file_line_number">1106</td>

<td class="vc_file_line_text">References
</td>
</tr>




<tr class="vc_row_odd" id="l1107">
<td class="vc_file_line_number">1107</td>

<td class="vc_file_line_text">==========
</td>
</tr>




<tr class="vc_row_odd" id="l1108">
<td class="vc_file_line_number">1108</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1109">
<td class="vc_file_line_number">1109</td>

<td class="vc_file_line_text">.. [#us]
</td>
</tr>




<tr class="vc_row_odd" id="l1110">
<td class="vc_file_line_number">1110</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/
</td>
</tr>




<tr class="vc_row_odd" id="l1111">
<td class="vc_file_line_number">1111</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1112">
<td class="vc_file_line_number">1112</td>

<td class="vc_file_line_text">.. [#llvm]
</td>
</tr>




<tr class="vc_row_odd" id="l1113">
<td class="vc_file_line_number">1113</td>

<td class="vc_file_line_text">   http://llvm.org/
</td>
</tr>




<tr class="vc_row_odd" id="l1114">
<td class="vc_file_line_number">1114</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1115">
<td class="vc_file_line_number">1115</td>

<td class="vc_file_line_text">.. [#clang]
</td>
</tr>




<tr class="vc_row_odd" id="l1116">
<td class="vc_file_line_number">1116</td>

<td class="vc_file_line_text">   http://clang.llvm.org/
</td>
</tr>




<tr class="vc_row_odd" id="l1117">
<td class="vc_file_line_number">1117</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1118">
<td class="vc_file_line_number">1118</td>

<td class="vc_file_line_text">.. [#tested-apps]
</td>
</tr>




<tr class="vc_row_odd" id="l1119">
<td class="vc_file_line_number">1119</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/wiki/Testing
</td>
</tr>




<tr class="vc_row_odd" id="l1120">
<td class="vc_file_line_number">1120</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1121">
<td class="vc_file_line_number">1121</td>

<td class="vc_file_line_text">.. [#llvm-hardware]
</td>
</tr>




<tr class="vc_row_odd" id="l1122">
<td class="vc_file_line_number">1122</td>

<td class="vc_file_line_text">   http://llvm.org/docs/GettingStarted.html#hardware
</td>
</tr>




<tr class="vc_row_odd" id="l1123">
<td class="vc_file_line_number">1123</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1124">
<td class="vc_file_line_number">1124</td>

<td class="vc_file_line_text">.. [#llvm-c-api]
</td>
</tr>




<tr class="vc_row_odd" id="l1125">
<td class="vc_file_line_number">1125</td>

<td class="vc_file_line_text">   http://llvm.org/viewvc/llvm-project/llvm/trunk/include/llvm-c/
</td>
</tr>




<tr class="vc_row_odd" id="l1126">
<td class="vc_file_line_number">1126</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1127">
<td class="vc_file_line_number">1127</td>

<td class="vc_file_line_text">.. [#llvm-26-whatsnew]
</td>
</tr>




<tr class="vc_row_odd" id="l1128">
<td class="vc_file_line_number">1128</td>

<td class="vc_file_line_text">   http://llvm.org/releases/2.6/docs/ReleaseNotes.html#whatsnew
</td>
</tr>




<tr class="vc_row_odd" id="l1129">
<td class="vc_file_line_number">1129</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1130">
<td class="vc_file_line_number">1130</td>

<td class="vc_file_line_text">.. [#us-llvm-r820]
</td>
</tr>




<tr class="vc_row_odd" id="l1131">
<td class="vc_file_line_number">1131</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/detail?r=820
</td>
</tr>




<tr class="vc_row_odd" id="l1132">
<td class="vc_file_line_number">1132</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1133">
<td class="vc_file_line_number">1133</td>

<td class="vc_file_line_text">.. [#us-llvm-r532]
</td>
</tr>




<tr class="vc_row_odd" id="l1134">
<td class="vc_file_line_number">1134</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/detail?r=532
</td>
</tr>




<tr class="vc_row_odd" id="l1135">
<td class="vc_file_line_number">1135</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1136">
<td class="vc_file_line_number">1136</td>

<td class="vc_file_line_text">.. [#llvm-macports]
</td>
</tr>




<tr class="vc_row_odd" id="l1137">
<td class="vc_file_line_number">1137</td>

<td class="vc_file_line_text">   http://trac.macports.org/browser/trunk/dports/lang/llvm/Portfile
</td>
</tr>




<tr class="vc_row_odd" id="l1138">
<td class="vc_file_line_number">1138</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1139">
<td class="vc_file_line_number">1139</td>

<td class="vc_file_line_text">.. [#llvm-ubuntu]
</td>
</tr>




<tr class="vc_row_odd" id="l1140">
<td class="vc_file_line_number">1140</td>

<td class="vc_file_line_text">   http://packages.ubuntu.com/karmic/llvm
</td>
</tr>




<tr class="vc_row_odd" id="l1141">
<td class="vc_file_line_number">1141</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1142">
<td class="vc_file_line_number">1142</td>

<td class="vc_file_line_text">.. [#llvm-debian]
</td>
</tr>




<tr class="vc_row_odd" id="l1143">
<td class="vc_file_line_number">1143</td>

<td class="vc_file_line_text">   http://packages.debian.org/unstable/devel/llvm
</td>
</tr>




<tr class="vc_row_odd" id="l1144">
<td class="vc_file_line_number">1144</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1145">
<td class="vc_file_line_number">1145</td>

<td class="vc_file_line_text">.. [#clang-debian]
</td>
</tr>




<tr class="vc_row_odd" id="l1146">
<td class="vc_file_line_number">1146</td>

<td class="vc_file_line_text">   http://packages.debian.org/sid/clang
</td>
</tr>




<tr class="vc_row_odd" id="l1147">
<td class="vc_file_line_number">1147</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1148">
<td class="vc_file_line_number">1148</td>

<td class="vc_file_line_text">.. [#llvm-fedora]
</td>
</tr>




<tr class="vc_row_odd" id="l1149">
<td class="vc_file_line_number">1149</td>

<td class="vc_file_line_text">   http://koji.fedoraproject.org/koji/buildinfo?buildID=134384
</td>
</tr>




<tr class="vc_row_odd" id="l1150">
<td class="vc_file_line_number">1150</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1151">
<td class="vc_file_line_number">1151</td>

<td class="vc_file_line_text">.. [#gdb70]
</td>
</tr>




<tr class="vc_row_odd" id="l1152">
<td class="vc_file_line_number">1152</td>

<td class="vc_file_line_text">   http://www.gnu.org/software/gdb/download/ANNOUNCEMENT
</td>
</tr>




<tr class="vc_row_odd" id="l1153">
<td class="vc_file_line_number">1153</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1154">
<td class="vc_file_line_number">1154</td>

<td class="vc_file_line_text">.. [#oprofile]
</td>
</tr>




<tr class="vc_row_odd" id="l1155">
<td class="vc_file_line_number">1155</td>

<td class="vc_file_line_text">   http://oprofile.sourceforge.net/news/
</td>
</tr>




<tr class="vc_row_odd" id="l1156">
<td class="vc_file_line_number">1156</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1157">
<td class="vc_file_line_number">1157</td>

<td class="vc_file_line_text">.. [#us-oprofile-punchlist]
</td>
</tr>




<tr class="vc_row_odd" id="l1158">
<td class="vc_file_line_number">1158</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/detail?id=63
</td>
</tr>




<tr class="vc_row_odd" id="l1159">
<td class="vc_file_line_number">1159</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1160">
<td class="vc_file_line_number">1160</td>

<td class="vc_file_line_text">.. [#shark]
</td>
</tr>




<tr class="vc_row_odd" id="l1161">
<td class="vc_file_line_number">1161</td>

<td class="vc_file_line_text">   http://developer.apple.com/tools/sharkoptimize.html
</td>
</tr>




<tr class="vc_row_odd" id="l1162">
<td class="vc_file_line_number">1162</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1163">
<td class="vc_file_line_number">1163</td>

<td class="vc_file_line_text">.. [#llvm-oprofile-change]
</td>
</tr>




<tr class="vc_row_odd" id="l1164">
<td class="vc_file_line_number">1164</td>

<td class="vc_file_line_text">   http://llvm.org/viewvc/llvm-project?view=rev&amp;revision=75279
</td>
</tr>




<tr class="vc_row_odd" id="l1165">
<td class="vc_file_line_number">1165</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1166">
<td class="vc_file_line_number">1166</td>

<td class="vc_file_line_text">.. [#us-oprofile-change]
</td>
</tr>




<tr class="vc_row_odd" id="l1167">
<td class="vc_file_line_number">1167</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/detail?r=986
</td>
</tr>




<tr class="vc_row_odd" id="l1168">
<td class="vc_file_line_number">1168</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1169">
<td class="vc_file_line_number">1169</td>

<td class="vc_file_line_text">.. [#oprofile-jit-interface]
</td>
</tr>




<tr class="vc_row_odd" id="l1170">
<td class="vc_file_line_number">1170</td>

<td class="vc_file_line_text">   http://oprofile.sourceforge.net/doc/devel/jit-interface.html
</td>
</tr>




<tr class="vc_row_odd" id="l1171">
<td class="vc_file_line_number">1171</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1172">
<td class="vc_file_line_number">1172</td>

<td class="vc_file_line_text">.. [#oprofile-workflow]
</td>
</tr>




<tr class="vc_row_odd" id="l1173">
<td class="vc_file_line_number">1173</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/wiki/UsingOProfile
</td>
</tr>




<tr class="vc_row_odd" id="l1174">
<td class="vc_file_line_number">1174</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1175">
<td class="vc_file_line_number">1175</td>

<td class="vc_file_line_text">.. [#llvm-mingw]
</td>
</tr>




<tr class="vc_row_odd" id="l1176">
<td class="vc_file_line_number">1176</td>

<td class="vc_file_line_text">   http://llvm.org/releases/download.html
</td>
</tr>




<tr class="vc_row_odd" id="l1177">
<td class="vc_file_line_number">1177</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1178">
<td class="vc_file_line_number">1178</td>

<td class="vc_file_line_text">.. [#us-r359]
</td>
</tr>




<tr class="vc_row_odd" id="l1179">
<td class="vc_file_line_number">1179</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/detail?r=359
</td>
</tr>




<tr class="vc_row_odd" id="l1180">
<td class="vc_file_line_number">1180</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1181">
<td class="vc_file_line_number">1181</td>

<td class="vc_file_line_text">.. [#us-r376]
</td>
</tr>




<tr class="vc_row_odd" id="l1182">
<td class="vc_file_line_number">1182</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/detail?r=376
</td>
</tr>




<tr class="vc_row_odd" id="l1183">
<td class="vc_file_line_number">1183</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1184">
<td class="vc_file_line_number">1184</td>

<td class="vc_file_line_text">.. [#us-r417]
</td>
</tr>




<tr class="vc_row_odd" id="l1185">
<td class="vc_file_line_number">1185</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/detail?r=417
</td>
</tr>




<tr class="vc_row_odd" id="l1186">
<td class="vc_file_line_number">1186</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1187">
<td class="vc_file_line_number">1187</td>

<td class="vc_file_line_text">.. [#us-r517]
</td>
</tr>




<tr class="vc_row_odd" id="l1188">
<td class="vc_file_line_number">1188</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/detail?r=517
</td>
</tr>




<tr class="vc_row_odd" id="l1189">
<td class="vc_file_line_number">1189</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1190">
<td class="vc_file_line_number">1190</td>

<td class="vc_file_line_text">.. [#bdfl-27-final]
</td>
</tr>




<tr class="vc_row_odd" id="l1191">
<td class="vc_file_line_number">1191</td>

<td class="vc_file_line_text">   http://mail.python.org/pipermail/python-dev/2010-January/095682.html
</td>
</tr>




<tr class="vc_row_odd" id="l1192">
<td class="vc_file_line_number">1192</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1193">
<td class="vc_file_line_number">1193</td>

<td class="vc_file_line_text">.. [#cpy-27a1]
</td>
</tr>




<tr class="vc_row_odd" id="l1194">
<td class="vc_file_line_number">1194</td>

<td class="vc_file_line_text">   http://www.python.org/dev/peps/pep-0373/
</td>
</tr>




<tr class="vc_row_odd" id="l1195">
<td class="vc_file_line_number">1195</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1196">
<td class="vc_file_line_number">1196</td>

<td class="vc_file_line_text">.. [#cpy-32]_
</td>
</tr>




<tr class="vc_row_odd" id="l1197">
<td class="vc_file_line_number">1197</td>

<td class="vc_file_line_text">   http://www.python.org/dev/peps/pep-0392/
</td>
</tr>




<tr class="vc_row_odd" id="l1198">
<td class="vc_file_line_number">1198</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1199">
<td class="vc_file_line_number">1199</td>

<td class="vc_file_line_text">.. [#us-punchlist]
</td>
</tr>




<tr class="vc_row_odd" id="l1200">
<td class="vc_file_line_number">1200</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/list?q=label:Merger
</td>
</tr>




<tr class="vc_row_odd" id="l1201">
<td class="vc_file_line_number">1201</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1202">
<td class="vc_file_line_number">1202</td>

<td class="vc_file_line_text">.. [#us-binary-size]
</td>
</tr>




<tr class="vc_row_odd" id="l1203">
<td class="vc_file_line_number">1203</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/detail?id=118
</td>
</tr>




<tr class="vc_row_odd" id="l1204">
<td class="vc_file_line_number">1204</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1205">
<td class="vc_file_line_number">1205</td>

<td class="vc_file_line_text">.. [#us-issue-startup-time]
</td>
</tr>




<tr class="vc_row_odd" id="l1206">
<td class="vc_file_line_number">1206</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/detail?id=64
</td>
</tr>




<tr class="vc_row_odd" id="l1207">
<td class="vc_file_line_number">1207</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1208">
<td class="vc_file_line_number">1208</td>

<td class="vc_file_line_text">.. [#zope-interface]
</td>
</tr>




<tr class="vc_row_odd" id="l1209">
<td class="vc_file_line_number">1209</td>

<td class="vc_file_line_text">   http://www.zope.org/Products/ZopeInterface
</td>
</tr>




<tr class="vc_row_odd" id="l1210">
<td class="vc_file_line_number">1210</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1211">
<td class="vc_file_line_number">1211</td>

<td class="vc_file_line_text">.. [#bigtable]
</td>
</tr>




<tr class="vc_row_odd" id="l1212">
<td class="vc_file_line_number">1212</td>

<td class="vc_file_line_text">   http://en.wikipedia.org/wiki/BigTable
</td>
</tr>




<tr class="vc_row_odd" id="l1213">
<td class="vc_file_line_number">1213</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1214">
<td class="vc_file_line_number">1214</td>

<td class="vc_file_line_text">.. [#mondrian]
</td>
</tr>




<tr class="vc_row_odd" id="l1215">
<td class="vc_file_line_number">1215</td>

<td class="vc_file_line_text">   http://www.niallkennedy.com/blog/2006/11/google-mondrian.html
</td>
</tr>




<tr class="vc_row_odd" id="l1216">
<td class="vc_file_line_number">1216</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1217">
<td class="vc_file_line_number">1217</td>

<td class="vc_file_line_text">.. [#us-sqlalchemy-readme]
</td>
</tr>




<tr class="vc_row_odd" id="l1218">
<td class="vc_file_line_number">1218</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/browse/tests/lib/sqlalchemy/README.unladen
</td>
</tr>




<tr class="vc_row_odd" id="l1219">
<td class="vc_file_line_number">1219</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1220">
<td class="vc_file_line_number">1220</td>

<td class="vc_file_line_text">.. [#us-test_llvm]
</td>
</tr>




<tr class="vc_row_odd" id="l1221">
<td class="vc_file_line_number">1221</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/browse/trunk/Lib/test/test_llvm.py
</td>
</tr>




<tr class="vc_row_odd" id="l1222">
<td class="vc_file_line_number">1222</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1223">
<td class="vc_file_line_number">1223</td>

<td class="vc_file_line_text">.. [#fuzz-testing]
</td>
</tr>




<tr class="vc_row_odd" id="l1224">
<td class="vc_file_line_number">1224</td>

<td class="vc_file_line_text">   http://en.wikipedia.org/wiki/Fuzz_testing
</td>
</tr>




<tr class="vc_row_odd" id="l1225">
<td class="vc_file_line_number">1225</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1226">
<td class="vc_file_line_number">1226</td>

<td class="vc_file_line_text">.. [#pyfuzz]
</td>
</tr>




<tr class="vc_row_odd" id="l1227">
<td class="vc_file_line_number">1227</td>

<td class="vc_file_line_text">   http://bitbucket.org/ebo/pyfuzz/overview/
</td>
</tr>




<tr class="vc_row_odd" id="l1228">
<td class="vc_file_line_number">1228</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1229">
<td class="vc_file_line_number">1229</td>

<td class="vc_file_line_text">.. [#fusil]
</td>
</tr>




<tr class="vc_row_odd" id="l1230">
<td class="vc_file_line_number">1230</td>

<td class="vc_file_line_text">   http://lwn.net/Articles/322826/
</td>
</tr>




<tr class="vc_row_odd" id="l1231">
<td class="vc_file_line_number">1231</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1232">
<td class="vc_file_line_number">1232</td>

<td class="vc_file_line_text">.. [#us-memory-issue]
</td>
</tr>




<tr class="vc_row_odd" id="l1233">
<td class="vc_file_line_number">1233</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/detail?id=68
</td>
</tr>




<tr class="vc_row_odd" id="l1234">
<td class="vc_file_line_number">1234</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1235">
<td class="vc_file_line_number">1235</td>

<td class="vc_file_line_text">.. [#us-benchmarks]
</td>
</tr>




<tr class="vc_row_odd" id="l1236">
<td class="vc_file_line_number">1236</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/wiki/Benchmarks
</td>
</tr>




<tr class="vc_row_odd" id="l1237">
<td class="vc_file_line_number">1237</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1238">
<td class="vc_file_line_number">1238</td>

<td class="vc_file_line_text">.. [#students-t-test]
</td>
</tr>




<tr class="vc_row_odd" id="l1239">
<td class="vc_file_line_number">1239</td>

<td class="vc_file_line_text">   http://en.wikipedia.org/wiki/Student&#39;s_t-test
</td>
</tr>




<tr class="vc_row_odd" id="l1240">
<td class="vc_file_line_number">1240</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1241">
<td class="vc_file_line_number">1241</td>

<td class="vc_file_line_text">.. [#smaps]
</td>
</tr>




<tr class="vc_row_odd" id="l1242">
<td class="vc_file_line_number">1242</td>

<td class="vc_file_line_text">   http://bmaurer.blogspot.com/2006/03/memory-usage-with-smaps.html
</td>
</tr>




<tr class="vc_row_odd" id="l1243">
<td class="vc_file_line_number">1243</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1244">
<td class="vc_file_line_number">1244</td>

<td class="vc_file_line_text">.. [#us-background-thread]
</td>
</tr>




<tr class="vc_row_odd" id="l1245">
<td class="vc_file_line_number">1245</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/browse/branches/background-thread
</td>
</tr>




<tr class="vc_row_odd" id="l1246">
<td class="vc_file_line_number">1246</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1247">
<td class="vc_file_line_number">1247</td>

<td class="vc_file_line_text">.. [#us-background-thread-issue]
</td>
</tr>




<tr class="vc_row_odd" id="l1248">
<td class="vc_file_line_number">1248</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/detail?id=40
</td>
</tr>




<tr class="vc_row_odd" id="l1249">
<td class="vc_file_line_number">1249</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1250">
<td class="vc_file_line_number">1250</td>

<td class="vc_file_line_text">.. [#us-import-tests]
</td>
</tr>




<tr class="vc_row_odd" id="l1251">
<td class="vc_file_line_number">1251</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/detail?r=888
</td>
</tr>




<tr class="vc_row_odd" id="l1252">
<td class="vc_file_line_number">1252</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1253">
<td class="vc_file_line_number">1253</td>

<td class="vc_file_line_text">.. [#us-tracing-tests]
</td>
</tr>




<tr class="vc_row_odd" id="l1254">
<td class="vc_file_line_number">1254</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/diff?spec=svn576&amp;r=576&amp;format=side&amp;path=/trunk/Lib/test/test_trace.py
</td>
</tr>




<tr class="vc_row_odd" id="l1255">
<td class="vc_file_line_number">1255</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1256">
<td class="vc_file_line_number">1256</td>

<td class="vc_file_line_text">.. [#us-perf-punchlist]
</td>
</tr>




<tr class="vc_row_odd" id="l1257">
<td class="vc_file_line_number">1257</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/list?q=label:Performance
</td>
</tr>




<tr class="vc_row_odd" id="l1258">
<td class="vc_file_line_number">1258</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1259">
<td class="vc_file_line_number">1259</td>

<td class="vc_file_line_text">.. [#jit]
</td>
</tr>




<tr class="vc_row_odd" id="l1260">
<td class="vc_file_line_number">1260</td>

<td class="vc_file_line_text">   http://en.wikipedia.org/wiki/Just-in-time_compilation
</td>
</tr>




<tr class="vc_row_odd" id="l1261">
<td class="vc_file_line_number">1261</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1262">
<td class="vc_file_line_number">1262</td>

<td class="vc_file_line_text">.. [#urs-self]
</td>
</tr>




<tr class="vc_row_odd" id="l1263">
<td class="vc_file_line_number">1263</td>

<td class="vc_file_line_text">   http://research.sun.com/self/papers/urs-thesis.html
</td>
</tr>




<tr class="vc_row_odd" id="l1264">
<td class="vc_file_line_number">1264</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1265">
<td class="vc_file_line_number">1265</td>

<td class="vc_file_line_text">.. [#us-projectplan]
</td>
</tr>




<tr class="vc_row_odd" id="l1266">
<td class="vc_file_line_number">1266</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/wiki/ProjectPlan
</td>
</tr>




<tr class="vc_row_odd" id="l1267">
<td class="vc_file_line_number">1267</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1268">
<td class="vc_file_line_number">1268</td>

<td class="vc_file_line_text">.. [#us-relevantpapers]
</td>
</tr>




<tr class="vc_row_odd" id="l1269">
<td class="vc_file_line_number">1269</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/wiki/RelevantPapers
</td>
</tr>




<tr class="vc_row_odd" id="l1270">
<td class="vc_file_line_number">1270</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1271">
<td class="vc_file_line_number">1271</td>

<td class="vc_file_line_text">.. [#us-llvm-notes]
</td>
</tr>




<tr class="vc_row_odd" id="l1272">
<td class="vc_file_line_number">1272</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/browse/trunk/Python/llvm_notes.txt
</td>
</tr>




<tr class="vc_row_odd" id="l1273">
<td class="vc_file_line_number">1273</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1274">
<td class="vc_file_line_number">1274</td>

<td class="vc_file_line_text">.. [#psf-lic]
</td>
</tr>




<tr class="vc_row_odd" id="l1275">
<td class="vc_file_line_number">1275</td>

<td class="vc_file_line_text">   http://www.python.org/psf/license/
</td>
</tr>




<tr class="vc_row_odd" id="l1276">
<td class="vc_file_line_number">1276</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1277">
<td class="vc_file_line_number">1277</td>

<td class="vc_file_line_text">.. [#llvm-lic]
</td>
</tr>




<tr class="vc_row_odd" id="l1278">
<td class="vc_file_line_number">1278</td>

<td class="vc_file_line_text">   http://llvm.org/docs/DeveloperPolicy.html#clp
</td>
</tr>




<tr class="vc_row_odd" id="l1279">
<td class="vc_file_line_number">1279</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1280">
<td class="vc_file_line_number">1280</td>

<td class="vc_file_line_text">.. [#ui-lic]
</td>
</tr>




<tr class="vc_row_odd" id="l1281">
<td class="vc_file_line_number">1281</td>

<td class="vc_file_line_text">   http://www.opensource.org/licenses/UoI-NCSA.php
</td>
</tr>




<tr class="vc_row_odd" id="l1282">
<td class="vc_file_line_number">1282</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1283">
<td class="vc_file_line_number">1283</td>

<td class="vc_file_line_text">.. [#v8]
</td>
</tr>




<tr class="vc_row_odd" id="l1284">
<td class="vc_file_line_number">1284</td>

<td class="vc_file_line_text">   http://code.google.com/p/v8/
</td>
</tr>




<tr class="vc_row_odd" id="l1285">
<td class="vc_file_line_number">1285</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1286">
<td class="vc_file_line_number">1286</td>

<td class="vc_file_line_text">.. [#squirrelfishextreme]
</td>
</tr>




<tr class="vc_row_odd" id="l1287">
<td class="vc_file_line_number">1287</td>

<td class="vc_file_line_text">   http://webkit.org/blog/214/introducing-squirrelfish-extreme/
</td>
</tr>




<tr class="vc_row_odd" id="l1288">
<td class="vc_file_line_number">1288</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1289">
<td class="vc_file_line_number">1289</td>

<td class="vc_file_line_text">.. [#rubinius]
</td>
</tr>




<tr class="vc_row_odd" id="l1290">
<td class="vc_file_line_number">1290</td>

<td class="vc_file_line_text">   http://rubini.us/
</td>
</tr>




<tr class="vc_row_odd" id="l1291">
<td class="vc_file_line_number">1291</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1292">
<td class="vc_file_line_number">1292</td>

<td class="vc_file_line_text">.. [#parrot-on-llvm]
</td>
</tr>




<tr class="vc_row_odd" id="l1293">
<td class="vc_file_line_number">1293</td>

<td class="vc_file_line_text">   http://lists.parrot.org/pipermail/parrot-dev/2009-September/002811.html
</td>
</tr>




<tr class="vc_row_odd" id="l1294">
<td class="vc_file_line_number">1294</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1295">
<td class="vc_file_line_number">1295</td>

<td class="vc_file_line_text">.. [#macruby]
</td>
</tr>




<tr class="vc_row_odd" id="l1296">
<td class="vc_file_line_number">1296</td>

<td class="vc_file_line_text">   http://www.macruby.org/
</td>
</tr>




<tr class="vc_row_odd" id="l1297">
<td class="vc_file_line_number">1297</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1298">
<td class="vc_file_line_number">1298</td>

<td class="vc_file_line_text">.. [#hotspot]
</td>
</tr>




<tr class="vc_row_odd" id="l1299">
<td class="vc_file_line_number">1299</td>

<td class="vc_file_line_text">   http://en.wikipedia.org/wiki/HotSpot
</td>
</tr>




<tr class="vc_row_odd" id="l1300">
<td class="vc_file_line_number">1300</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1301">
<td class="vc_file_line_number">1301</td>

<td class="vc_file_line_text">.. [#psyco]
</td>
</tr>




<tr class="vc_row_odd" id="l1302">
<td class="vc_file_line_number">1302</td>

<td class="vc_file_line_text">   http://psyco.sourceforge.net/
</td>
</tr>




<tr class="vc_row_odd" id="l1303">
<td class="vc_file_line_number">1303</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1304">
<td class="vc_file_line_number">1304</td>

<td class="vc_file_line_text">.. [#pypy]
</td>
</tr>




<tr class="vc_row_odd" id="l1305">
<td class="vc_file_line_number">1305</td>

<td class="vc_file_line_text">   http://codespeak.net/pypy/dist/pypy/doc/
</td>
</tr>




<tr class="vc_row_odd" id="l1306">
<td class="vc_file_line_number">1306</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1307">
<td class="vc_file_line_number">1307</td>

<td class="vc_file_line_text">.. [#inlining]
</td>
</tr>




<tr class="vc_row_odd" id="l1308">
<td class="vc_file_line_number">1308</td>

<td class="vc_file_line_text">   http://en.wikipedia.org/wiki/Inline_expansion
</td>
</tr>




<tr class="vc_row_odd" id="l1309">
<td class="vc_file_line_number">1309</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1310">
<td class="vc_file_line_number">1310</td>

<td class="vc_file_line_text">.. [#unboxing]
</td>
</tr>




<tr class="vc_row_odd" id="l1311">
<td class="vc_file_line_number">1311</td>

<td class="vc_file_line_text">   http://en.wikipedia.org/wiki/Object_type_(object-oriented_programming%29
</td>
</tr>




<tr class="vc_row_odd" id="l1312">
<td class="vc_file_line_number">1312</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1313">
<td class="vc_file_line_number">1313</td>

<td class="vc_file_line_text">.. [#us-inlining]
</td>
</tr>




<tr class="vc_row_odd" id="l1314">
<td class="vc_file_line_number">1314</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/detail?id=86
</td>
</tr>




<tr class="vc_row_odd" id="l1315">
<td class="vc_file_line_number">1315</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1316">
<td class="vc_file_line_number">1316</td>

<td class="vc_file_line_text">.. [#us-styleguide]
</td>
</tr>




<tr class="vc_row_odd" id="l1317">
<td class="vc_file_line_number">1317</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/wiki/StyleGuide
</td>
</tr>




<tr class="vc_row_odd" id="l1318">
<td class="vc_file_line_number">1318</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1319">
<td class="vc_file_line_number">1319</td>

<td class="vc_file_line_text">.. [#llvm-styleguide]
</td>
</tr>




<tr class="vc_row_odd" id="l1320">
<td class="vc_file_line_number">1320</td>

<td class="vc_file_line_text">   http://llvm.org/docs/CodingStandards.html
</td>
</tr>




<tr class="vc_row_odd" id="l1321">
<td class="vc_file_line_number">1321</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1322">
<td class="vc_file_line_number">1322</td>

<td class="vc_file_line_text">.. [#google-styleguide]
</td>
</tr>




<tr class="vc_row_odd" id="l1323">
<td class="vc_file_line_number">1323</td>

<td class="vc_file_line_text">   http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml
</td>
</tr>




<tr class="vc_row_odd" id="l1324">
<td class="vc_file_line_number">1324</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1325">
<td class="vc_file_line_number">1325</td>

<td class="vc_file_line_text">.. [#us-recompile-issue]
</td>
</tr>




<tr class="vc_row_odd" id="l1326">
<td class="vc_file_line_number">1326</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/detail?id=41
</td>
</tr>




<tr class="vc_row_odd" id="l1327">
<td class="vc_file_line_number">1327</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1328">
<td class="vc_file_line_number">1328</td>

<td class="vc_file_line_text">.. [#us-regex-perf]
</td>
</tr>




<tr class="vc_row_odd" id="l1329">
<td class="vc_file_line_number">1329</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/wiki/ProjectPlan#Regular_Expressions
</td>
</tr>




<tr class="vc_row_odd" id="l1330">
<td class="vc_file_line_number">1330</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1331">
<td class="vc_file_line_number">1331</td>

<td class="vc_file_line_text">.. [#us-bm-re-compile]
</td>
</tr>




<tr class="vc_row_odd" id="l1332">
<td class="vc_file_line_number">1332</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/browse/tests/performance/bm_regex_compile.py
</td>
</tr>




<tr class="vc_row_odd" id="l1333">
<td class="vc_file_line_number">1333</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1334">
<td class="vc_file_line_number">1334</td>

<td class="vc_file_line_text">.. [#us-bm-re-v8]
</td>
</tr>




<tr class="vc_row_odd" id="l1335">
<td class="vc_file_line_number">1335</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/browse/tests/performance/bm_regex_v8.py
</td>
</tr>




<tr class="vc_row_odd" id="l1336">
<td class="vc_file_line_number">1336</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1337">
<td class="vc_file_line_number">1337</td>

<td class="vc_file_line_text">.. [#us-bm-re-effbot]
</td>
</tr>




<tr class="vc_row_odd" id="l1338">
<td class="vc_file_line_number">1338</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/browse/tests/performance/bm_regex_effbot.py
</td>
</tr>




<tr class="vc_row_odd" id="l1339">
<td class="vc_file_line_number">1339</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1340">
<td class="vc_file_line_number">1340</td>

<td class="vc_file_line_text">.. [#us-regex-issue]
</td>
</tr>




<tr class="vc_row_odd" id="l1341">
<td class="vc_file_line_number">1341</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/detail?id=13
</td>
</tr>




<tr class="vc_row_odd" id="l1342">
<td class="vc_file_line_number">1342</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1343">
<td class="vc_file_line_number">1343</td>

<td class="vc_file_line_text">.. [#pygame]
</td>
</tr>




<tr class="vc_row_odd" id="l1344">
<td class="vc_file_line_number">1344</td>

<td class="vc_file_line_text">   http://www.pygame.org/
</td>
</tr>




<tr class="vc_row_odd" id="l1345">
<td class="vc_file_line_number">1345</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1346">
<td class="vc_file_line_number">1346</td>

<td class="vc_file_line_text">.. [#numpy]
</td>
</tr>




<tr class="vc_row_odd" id="l1347">
<td class="vc_file_line_number">1347</td>

<td class="vc_file_line_text">   http://numpy.scipy.org/
</td>
</tr>




<tr class="vc_row_odd" id="l1348">
<td class="vc_file_line_number">1348</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1349">
<td class="vc_file_line_number">1349</td>

<td class="vc_file_line_text">.. [#pypy-bmarks]
</td>
</tr>




<tr class="vc_row_odd" id="l1350">
<td class="vc_file_line_number">1350</td>

<td class="vc_file_line_text">   http://codespeak.net:8099/plotsummary.html
</td>
</tr>




<tr class="vc_row_odd" id="l1351">
<td class="vc_file_line_number">1351</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1352">
<td class="vc_file_line_number">1352</td>

<td class="vc_file_line_text">.. [#llvm-users]
</td>
</tr>




<tr class="vc_row_odd" id="l1353">
<td class="vc_file_line_number">1353</td>

<td class="vc_file_line_text">   http://llvm.org/Users.html
</td>
</tr>




<tr class="vc_row_odd" id="l1354">
<td class="vc_file_line_number">1354</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1355">
<td class="vc_file_line_number">1355</td>

<td class="vc_file_line_text">.. [#hlvm]
</td>
</tr>




<tr class="vc_row_odd" id="l1356">
<td class="vc_file_line_number">1356</td>

<td class="vc_file_line_text">   http://www.ffconsultancy.com/ocaml/hlvm/
</td>
</tr>




<tr class="vc_row_odd" id="l1357">
<td class="vc_file_line_number">1357</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1358">
<td class="vc_file_line_number">1358</td>

<td class="vc_file_line_text">.. [#llvm-far-call-issue]
</td>
</tr>




<tr class="vc_row_odd" id="l1359">
<td class="vc_file_line_number">1359</td>

<td class="vc_file_line_text">   http://llvm.org/PR5201
</td>
</tr>




<tr class="vc_row_odd" id="l1360">
<td class="vc_file_line_number">1360</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1361">
<td class="vc_file_line_number">1361</td>

<td class="vc_file_line_text">.. [#llvm-jmm-rev]
</td>
</tr>




<tr class="vc_row_odd" id="l1362">
<td class="vc_file_line_number">1362</td>

<td class="vc_file_line_text">   http://llvm.org/viewvc/llvm-project?view=rev&amp;revision=76828
</td>
</tr>




<tr class="vc_row_odd" id="l1363">
<td class="vc_file_line_number">1363</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1364">
<td class="vc_file_line_number">1364</td>

<td class="vc_file_line_text">.. [#llvm-memleak-rev]
</td>
</tr>




<tr class="vc_row_odd" id="l1365">
<td class="vc_file_line_number">1365</td>

<td class="vc_file_line_text">   http://llvm.org/viewvc/llvm-project?rev=91611&amp;view=rev
</td>
</tr>




<tr class="vc_row_odd" id="l1366">
<td class="vc_file_line_number">1366</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1367">
<td class="vc_file_line_number">1367</td>

<td class="vc_file_line_text">.. [#llvm-globaldce-rev]
</td>
</tr>




<tr class="vc_row_odd" id="l1368">
<td class="vc_file_line_number">1368</td>

<td class="vc_file_line_text">   http://llvm.org/viewvc/llvm-project?rev=85182&amp;view=rev
</td>
</tr>




<tr class="vc_row_odd" id="l1369">
<td class="vc_file_line_number">1369</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1370">
<td class="vc_file_line_number">1370</td>

<td class="vc_file_line_text">.. [#llvm-availext-issue]
</td>
</tr>




<tr class="vc_row_odd" id="l1371">
<td class="vc_file_line_number">1371</td>

<td class="vc_file_line_text">   http://llvm.org/PR5735
</td>
</tr>




<tr class="vc_row_odd" id="l1372">
<td class="vc_file_line_number">1372</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1373">
<td class="vc_file_line_number">1373</td>

<td class="vc_file_line_text">.. [#us-specialization-issue]
</td>
</tr>




<tr class="vc_row_odd" id="l1374">
<td class="vc_file_line_number">1374</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/detail?id=73
</td>
</tr>




<tr class="vc_row_odd" id="l1375">
<td class="vc_file_line_number">1375</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1376">
<td class="vc_file_line_number">1376</td>

<td class="vc_file_line_text">.. [#us-direct-calling-issue]
</td>
</tr>




<tr class="vc_row_odd" id="l1377">
<td class="vc_file_line_number">1377</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/detail?id=88
</td>
</tr>




<tr class="vc_row_odd" id="l1378">
<td class="vc_file_line_number">1378</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1379">
<td class="vc_file_line_number">1379</td>

<td class="vc_file_line_text">.. [#us-fast-globals-issue]
</td>
</tr>




<tr class="vc_row_odd" id="l1380">
<td class="vc_file_line_number">1380</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/detail?id=67
</td>
</tr>




<tr class="vc_row_odd" id="l1381">
<td class="vc_file_line_number">1381</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1382">
<td class="vc_file_line_number">1382</td>

<td class="vc_file_line_text">.. [#traces-waste-of-time]
</td>
</tr>




<tr class="vc_row_odd" id="l1383">
<td class="vc_file_line_number">1383</td>

<td class="vc_file_line_text">   http://www.ics.uci.edu/~franz/Site/pubs-pdf/C44Prepub.pdf
</td>
</tr>




<tr class="vc_row_odd" id="l1384">
<td class="vc_file_line_number">1384</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1385">
<td class="vc_file_line_number">1385</td>

<td class="vc_file_line_text">.. [#traces-explicit-pipeline]
</td>
</tr>




<tr class="vc_row_odd" id="l1386">
<td class="vc_file_line_number">1386</td>

<td class="vc_file_line_text">   http://www.ics.uci.edu/~franz/Site/pubs-pdf/ICS-TR-07-12.pdf
</td>
</tr>




<tr class="vc_row_odd" id="l1387">
<td class="vc_file_line_number">1387</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1388">
<td class="vc_file_line_number">1388</td>

<td class="vc_file_line_text">.. [#tracemonkey]
</td>
</tr>




<tr class="vc_row_odd" id="l1389">
<td class="vc_file_line_number">1389</td>

<td class="vc_file_line_text">   https://wiki.mozilla.org/JavaScript:TraceMonkey
</td>
</tr>




<tr class="vc_row_odd" id="l1390">
<td class="vc_file_line_number">1390</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1391">
<td class="vc_file_line_number">1391</td>

<td class="vc_file_line_text">.. [#llvm-langref]
</td>
</tr>




<tr class="vc_row_odd" id="l1392">
<td class="vc_file_line_number">1392</td>

<td class="vc_file_line_text">   http://llvm.org/docs/LangRef.html
</td>
</tr>




<tr class="vc_row_odd" id="l1393">
<td class="vc_file_line_number">1393</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1394">
<td class="vc_file_line_number">1394</td>

<td class="vc_file_line_text">.. [#us-wider-perf-issue]
</td>
</tr>




<tr class="vc_row_odd" id="l1395">
<td class="vc_file_line_number">1395</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/detail?id=120
</td>
</tr>




<tr class="vc_row_odd" id="l1396">
<td class="vc_file_line_number">1396</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1397">
<td class="vc_file_line_number">1397</td>

<td class="vc_file_line_text">.. [#us-nbody]
</td>
</tr>




<tr class="vc_row_odd" id="l1398">
<td class="vc_file_line_number">1398</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/source/browse/tests/performance/bm_nbody.py
</td>
</tr>




<tr class="vc_row_odd" id="l1399">
<td class="vc_file_line_number">1399</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1400">
<td class="vc_file_line_number">1400</td>

<td class="vc_file_line_text">.. [#us-shared-link-issue]
</td>
</tr>




<tr class="vc_row_odd" id="l1401">
<td class="vc_file_line_number">1401</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/detail?id=130
</td>
</tr>




<tr class="vc_row_odd" id="l1402">
<td class="vc_file_line_number">1402</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1403">
<td class="vc_file_line_number">1403</td>

<td class="vc_file_line_text">.. [#us-llvm-punchlist]
</td>
</tr>




<tr class="vc_row_odd" id="l1404">
<td class="vc_file_line_number">1404</td>

<td class="vc_file_line_text">   http://code.google.com/p/unladen-swallow/issues/detail?id=131
</td>
</tr>




<tr class="vc_row_odd" id="l1405">
<td class="vc_file_line_number">1405</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1406">
<td class="vc_file_line_number">1406</td>

<td class="vc_file_line_text">.. [#llvm-ppc-eager-jit-issue]
</td>
</tr>




<tr class="vc_row_odd" id="l1407">
<td class="vc_file_line_number">1407</td>

<td class="vc_file_line_text">   http://llvm.org/PR4816
</td>
</tr>




<tr class="vc_row_odd" id="l1408">
<td class="vc_file_line_number">1408</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1409">
<td class="vc_file_line_number">1409</td>

<td class="vc_file_line_text">.. [#llvm-arm-jit-issue]
</td>
</tr>




<tr class="vc_row_odd" id="l1410">
<td class="vc_file_line_number">1410</td>

<td class="vc_file_line_text">   http://llvm.org/PR6065
</td>
</tr>




<tr class="vc_row_odd" id="l1411">
<td class="vc_file_line_number">1411</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1412">
<td class="vc_file_line_number">1412</td>

<td class="vc_file_line_text">.. [#cython]
</td>
</tr>




<tr class="vc_row_odd" id="l1413">
<td class="vc_file_line_number">1413</td>

<td class="vc_file_line_text">   http://www.cython.org/
</td>
</tr>




<tr class="vc_row_odd" id="l1414">
<td class="vc_file_line_number">1414</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1415">
<td class="vc_file_line_number">1415</td>

<td class="vc_file_line_text">.. [#shedskin]
</td>
</tr>




<tr class="vc_row_odd" id="l1416">
<td class="vc_file_line_number">1416</td>

<td class="vc_file_line_text">   http://shed-skin.blogspot.com/
</td>
</tr>




<tr class="vc_row_odd" id="l1417">
<td class="vc_file_line_number">1417</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1418">
<td class="vc_file_line_number">1418</td>

<td class="vc_file_line_text">.. [#shedskin-library-limits]
</td>
</tr>




<tr class="vc_row_odd" id="l1419">
<td class="vc_file_line_number">1419</td>

<td class="vc_file_line_text">   http://shedskin.googlecode.com/files/shedskin-tutorial-0.3.html
</td>
</tr>




<tr class="vc_row_odd" id="l1420">
<td class="vc_file_line_number">1420</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1421">
<td class="vc_file_line_number">1421</td>

<td class="vc_file_line_text">.. [#wpython]
</td>
</tr>




<tr class="vc_row_odd" id="l1422">
<td class="vc_file_line_number">1422</td>

<td class="vc_file_line_text">   http://code.google.com/p/wpython/
</td>
</tr>




<tr class="vc_row_odd" id="l1423">
<td class="vc_file_line_number">1423</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1424">
<td class="vc_file_line_number">1424</td>

<td class="vc_file_line_text">.. [#wpython-performance]
</td>
</tr>




<tr class="vc_row_odd" id="l1425">
<td class="vc_file_line_number">1425</td>

<td class="vc_file_line_text">   http://www.mail-archive.com/python-dev@python.org/msg45143.html
</td>
</tr>




<tr class="vc_row_odd" id="l1426">
<td class="vc_file_line_number">1426</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1427">
<td class="vc_file_line_number">1427</td>

<td class="vc_file_line_text">.. [#ironpython]
</td>
</tr>




<tr class="vc_row_odd" id="l1428">
<td class="vc_file_line_number">1428</td>

<td class="vc_file_line_text">   http://ironpython.net/
</td>
</tr>




<tr class="vc_row_odd" id="l1429">
<td class="vc_file_line_number">1429</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1430">
<td class="vc_file_line_number">1430</td>

<td class="vc_file_line_text">.. [#mono]
</td>
</tr>




<tr class="vc_row_odd" id="l1431">
<td class="vc_file_line_number">1431</td>

<td class="vc_file_line_text">   http://www.mono-project.com/
</td>
</tr>




<tr class="vc_row_odd" id="l1432">
<td class="vc_file_line_number">1432</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1433">
<td class="vc_file_line_number">1433</td>

<td class="vc_file_line_text">.. [#jython]
</td>
</tr>




<tr class="vc_row_odd" id="l1434">
<td class="vc_file_line_number">1434</td>

<td class="vc_file_line_text">   http://www.jython.org/
</td>
</tr>




<tr class="vc_row_odd" id="l1435">
<td class="vc_file_line_number">1435</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1436">
<td class="vc_file_line_number">1436</td>

<td class="vc_file_line_text">.. [#jython-c-ext]
</td>
</tr>




<tr class="vc_row_odd" id="l1437">
<td class="vc_file_line_number">1437</td>

<td class="vc_file_line_text">   http://wiki.python.org/jython/JythonFaq/GeneralInfo
</td>
</tr>




<tr class="vc_row_odd" id="l1438">
<td class="vc_file_line_number">1438</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1439">
<td class="vc_file_line_number">1439</td>

<td class="vc_file_line_text">.. [#pyv8]
</td>
</tr>




<tr class="vc_row_odd" id="l1440">
<td class="vc_file_line_number">1440</td>

<td class="vc_file_line_text">   http://code.google.com/p/pyv8/
</td>
</tr>




<tr class="vc_row_odd" id="l1441">
<td class="vc_file_line_number">1441</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1442">
<td class="vc_file_line_number">1442</td>

<td class="vc_file_line_text">.. [#gcc-fdo]
</td>
</tr>




<tr class="vc_row_odd" id="l1443">
<td class="vc_file_line_number">1443</td>

<td class="vc_file_line_text">   http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
</td>
</tr>




<tr class="vc_row_odd" id="l1444">
<td class="vc_file_line_number">1444</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1445">
<td class="vc_file_line_number">1445</td>

<td class="vc_file_line_text">.. [#msvc-pgo]
</td>
</tr>




<tr class="vc_row_odd" id="l1446">
<td class="vc_file_line_number">1446</td>

<td class="vc_file_line_text">   http://msdn.microsoft.com/en-us/library/e7k32f4k.aspx
</td>
</tr>




<tr class="vc_row_odd" id="l1447">
<td class="vc_file_line_number">1447</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1448">
<td class="vc_file_line_number">1448</td>

<td class="vc_file_line_text">.. [#us-wpython-compat]
</td>
</tr>




<tr class="vc_row_odd" id="l1449">
<td class="vc_file_line_number">1449</td>

<td class="vc_file_line_text">   http://www.mail-archive.com/python-dev@python.org/msg44962.html
</td>
</tr>




<tr class="vc_row_odd" id="l1450">
<td class="vc_file_line_number">1450</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1451">
<td class="vc_file_line_number">1451</td>

<td class="vc_file_line_text">.. [#asher-rotem]
</td>
</tr>




<tr class="vc_row_odd" id="l1452">
<td class="vc_file_line_number">1452</td>

<td class="vc_file_line_text">   http://portal.acm.org/citation.cfm?id=1534530.1534550
</td>
</tr>




<tr class="vc_row_odd" id="l1453">
<td class="vc_file_line_number">1453</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1454">
<td class="vc_file_line_number">1454</td>

<td class="vc_file_line_text">.. [#stackless]
</td>
</tr>




<tr class="vc_row_odd" id="l1455">
<td class="vc_file_line_number">1455</td>

<td class="vc_file_line_text">   http://www.stackless.com/
</td>
</tr>




<tr class="vc_row_odd" id="l1456">
<td class="vc_file_line_number">1456</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1457">
<td class="vc_file_line_number">1457</td>

<td class="vc_file_line_text">.. [#stackless-merger]
</td>
</tr>




<tr class="vc_row_odd" id="l1458">
<td class="vc_file_line_number">1458</td>

<td class="vc_file_line_text">   http://mail.python.org/pipermail/python-dev/2004-June/045165.html
</td>
</tr>




<tr class="vc_row_odd" id="l1459">
<td class="vc_file_line_number">1459</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1460">
<td class="vc_file_line_number">1460</td>

<td class="vc_file_line_text">.. [#llvm-heap-frames]
</td>
</tr>




<tr class="vc_row_odd" id="l1461">
<td class="vc_file_line_number">1461</td>

<td class="vc_file_line_text">   http://www.nondot.org/sabre/LLVMNotes/ExplicitlyManagedStackFrames.txt
</td>
</tr>




<tr class="vc_row_odd" id="l1462">
<td class="vc_file_line_number">1462</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1463">
<td class="vc_file_line_number">1463</td>

<td class="vc_file_line_text">.. [#llvm-heap-frames-disc]
</td>
</tr>




<tr class="vc_row_odd" id="l1464">
<td class="vc_file_line_number">1464</td>

<td class="vc_file_line_text">   http://old.nabble.com/LLVM-and-coroutines-microthreads-td23080883.html
</td>
</tr>




<tr class="vc_row_odd" id="l1465">
<td class="vc_file_line_number">1465</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1466">
<td class="vc_file_line_number">1466</td>

<td class="vc_file_line_text">.. [#pep7-cpp]
</td>
</tr>




<tr class="vc_row_odd" id="l1467">
<td class="vc_file_line_number">1467</td>

<td class="vc_file_line_text">   http://www.mail-archive.com/python-dev@python.org/msg45544.html
</td>
</tr>




<tr class="vc_row_odd" id="l1468">
<td class="vc_file_line_number">1468</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1469">
<td class="vc_file_line_number">1469</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1470">
<td class="vc_file_line_number">1470</td>

<td class="vc_file_line_text">Copyright
</td>
</tr>




<tr class="vc_row_odd" id="l1471">
<td class="vc_file_line_number">1471</td>

<td class="vc_file_line_text">=========
</td>
</tr>




<tr class="vc_row_odd" id="l1472">
<td class="vc_file_line_number">1472</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1473">
<td class="vc_file_line_number">1473</td>

<td class="vc_file_line_text">This document has been placed in the public domain.
</td>
</tr>




<tr class="vc_row_odd" id="l1474">
<td class="vc_file_line_number">1474</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1475">
<td class="vc_file_line_number">1475</td>

<td class="vc_file_line_text">..
</td>
</tr>




<tr class="vc_row_odd" id="l1476">
<td class="vc_file_line_number">1476</td>

<td class="vc_file_line_text">   Local Variables:
</td>
</tr>




<tr class="vc_row_odd" id="l1477">
<td class="vc_file_line_number">1477</td>

<td class="vc_file_line_text">   mode: indented-text
</td>
</tr>




<tr class="vc_row_odd" id="l1478">
<td class="vc_file_line_number">1478</td>

<td class="vc_file_line_text">   indent-tabs-mode: nil
</td>
</tr>




<tr class="vc_row_odd" id="l1479">
<td class="vc_file_line_number">1479</td>

<td class="vc_file_line_text">   sentence-end-double-space: t
</td>
</tr>




<tr class="vc_row_odd" id="l1480">
<td class="vc_file_line_number">1480</td>

<td class="vc_file_line_text">   fill-column: 70
</td>
</tr>




<tr class="vc_row_odd" id="l1481">
<td class="vc_file_line_number">1481</td>

<td class="vc_file_line_text">   coding: utf-8
</td>
</tr>




<tr class="vc_row_odd" id="l1482">
<td class="vc_file_line_number">1482</td>

<td class="vc_file_line_text">   End:
</td>
</tr>




<tr class="vc_row_odd" id="l1483">
<td class="vc_file_line_number">1483</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1484">
<td class="vc_file_line_number">1484</td>

<td class="vc_file_line_text">
</td>
</tr>




<tr class="vc_row_odd" id="l1485">
<td class="vc_file_line_number">1485</td>

<td class="vc_file_line_text"> 
</td>
</tr>


</table>
</div>



<hr/>
<div class="vc_properties">
<h2>Properties</h2>
<table cellspacing="1" cellpadding="2" class="auto">
<thead>
<tr>
<th class="vc_header_sort">Name</th>
<th class="vc_header">Value</th>
</tr>
</thead>
<tbody>

<tr class="vc_row_even">
<td><strong>svn:eol-style</strong></td>

<td style="white-space: pre;">native</td>

</tr>

<tr class="vc_row_odd">
<td><strong>svn:keywords</strong></td>

<td style="white-space: pre;">Author Date Id Revision</td>

</tr>

</tbody>
</table>
</div>



<hr />
<table>
<tr>
<td><address><a href="mailto:webmaster@python.org">webmaster@python.org</a></address></td>
<td style="text-align: right;"><strong><a href="/viewvc/help_rootview.html">ViewVC Help</a></strong></td>
</tr>
<tr>
<td>Powered by <a href="http://viewvc.tigris.org/">ViewVC 1.1.5</a></td>
<td style="text-align: right;">&nbsp;</td>
</tr>
</table>
</body>
</html>

