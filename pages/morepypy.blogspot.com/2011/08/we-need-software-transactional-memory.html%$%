<!DOCTYPE html>
<!-- this template contains two modifications: it adds flattr buttons, and adds an image of the logo just before the title --><html class='v2' dir='ltr' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'>
<head>
<script type='text/javascript'>
  /*  <![CDATA[ */
    (function() {
      var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
        
      s.type = 'text/javascript';
      s.async = true;
      s.src = 'https://api.flattr.com/js/0.6/load.js?mode=manual&uid=cfbolz&category=text&language=en_GB';
      t.parentNode.insertBefore(s, t);
    })();
    function displayFlattrButton(postid, url, tags) {
      var flattr_tle = document.getElementById("flattr_title_" + postid).innerHTML;  
      if (flattr_tle.length > 80) {
        flattr_tle = flattr_tle.replace(/(.{0,71}) .*/, "$1 &#8230;");
        flattr_tle = flattr_tle.slice(0,79);
      }
      var flattr_dsc = document.getElementById("flattr_summary_" + postid).innerHTML;  
      flattr_dsc = flattr_dsc.replace(/<.*?>/g, "");
      if (flattr_dsc.length > 980) {
        flattr_dsc = flattr_dsc.replace(/\n/g, " ");
        flattr_dsc = flattr_dsc.replace(/(.{0,971}) .*/, "$1 &#8230;");
        flattr_dsc = flattr_dsc.slice(0,979);
      }
      if (tags.length > 230) {
        tags = tags.replace(/(.{0,230}),/, "$1");
        tags = tags.slice(0,229);
      }
      tags = tags + ';';
     
      document.write('<a class="FlattrButton" style="display:none;" title="' +
flattr_tle + '" href="' + url + '" rev="flattr;button:compact;tags:' + tags + '">' + flattr_dsc + '</a>');
    }
  /* ]]> */
  </script>
<meta content='IE=EmulateIE7' http-equiv='X-UA-Compatible'/>
<meta content='width=1100' name='viewport'/>
<meta content='text/html; charset=UTF-8' http-equiv='Content-Type'/>
<script type="text/javascript">(function() { var b=window,f="chrome",g="tick",k="jstiming";(function(){function d(a){this.t={};this.tick=function(a,d,c){var e=void 0!=c?c:(new Date).getTime();this.t[a]=[e,d];if(void 0==c)try{b.console.timeStamp("CSI/"+a)}catch(h){}};this[g]("start",null,a)}var a;b.performance&&(a=b.performance.timing);var n=a?new d(a.responseStart):new d;b.jstiming={Timer:d,load:n};if(a){var c=a.navigationStart,h=a.responseStart;0<c&&h>=c&&(b[k].srt=h-c)}if(a){var e=b[k].load;0<c&&h>=c&&(e[g]("_wtsrt",void 0,c),e[g]("wtsrt_","_wtsrt",h),e[g]("tbsd_","wtsrt_"))}try{a=null,
b[f]&&b[f].csi&&(a=Math.floor(b[f].csi().pageT),e&&0<c&&(e[g]("_tbnd",void 0,b[f].csi().startE),e[g]("tbnd_","_tbnd",c))),null==a&&b.gtbExternal&&(a=b.gtbExternal.pageT()),null==a&&b.external&&(a=b.external.pageT,e&&0<c&&(e[g]("_tbnd",void 0,b.external.startE),e[g]("tbnd_","_tbnd",c))),a&&(b[k].pt=a)}catch(p){}})();b.tickAboveFold=function(d){var a=0;if(d.offsetParent){do a+=d.offsetTop;while(d=d.offsetParent)}d=a;750>=d&&b[k].load[g]("aft")};var l=!1;function m(){l||(l=!0,b[k].load[g]("firstScrollTime"))}b.addEventListener?b.addEventListener("scroll",m,!1):b.attachEvent("onscroll",m);
 })();</script>
<meta content='blogger' name='generator'/>
<link href='http://morepypy.blogspot.co.uk/favicon.ico' rel='icon' type='image/x-icon'/>
<link href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html' rel='canonical'/>
<link rel="alternate" type="application/atom+xml" title="PyPy Status Blog - Atom" href="http://morepypy.blogspot.com/feeds/posts/default" />
<link rel="alternate" type="application/rss+xml" title="PyPy Status Blog - RSS" href="http://morepypy.blogspot.com/feeds/posts/default?alt=rss" />
<link rel="service.post" type="application/atom+xml" title="PyPy Status Blog - Atom" href="http://www.blogger.com/feeds/3971202189709462152/posts/default" />

<link rel="alternate" type="application/atom+xml" title="PyPy Status Blog - Atom" href="http://morepypy.blogspot.com/feeds/6513983438425039230/comments/default" />
<!--[if IE]><script type="text/javascript" src="https://www.blogger.com/static/v1/jsbin/1163241896-ieretrofit.js"></script>
<![endif]-->
<!--[if IE]> <script> (function() { var html5 = ("abbr,article,aside,audio,canvas,datalist,details," + "figure,footer,header,hgroup,mark,menu,meter,nav,output," + "progress,section,time,video").split(','); for (var i = 0; i < html5.length; i++) { document.createElement(html5[i]); } try { document.execCommand('BackgroundImageCache', false, true); } catch(e) {} })(); </script> <![endif]-->
<title>PyPy Status Blog: We need Software Transactional Memory</title>
<link type='text/css' rel='stylesheet' href='https://www.blogger.com/static/v1/widgets/1535467126-widget_css_2_bundle.css' />
<link type='text/css' rel='stylesheet' href='https://www.blogger.com/dyn-css/authorization.css?targetBlogID=3971202189709462152&zx=03c7d52b-cbc2-4097-90ef-9563a73317ea' />
<style id='page-skin-1' type='text/css'><!--
/*
-----------------------------------------------
Blogger Template Style
Name:     Simple
Designer: Josh Peterson
URL:      www.noaesthetic.com
----------------------------------------------- */
/* Variable definitions
====================
<Variable name="keycolor" description="Main Color" type="color" default="#66bbdd"/>
<Group description="Page Text" selector="body">
<Variable name="body.font" description="Font" type="font"
default="normal normal 12px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="body.text.color" description="Text Color" type="color" default="#222222"/>
</Group>
<Group description="Backgrounds" selector=".body-fauxcolumns-outer">
<Variable name="body.background.color" description="Outer Background" type="color" default="#66bbdd"/>
<Variable name="content.background.color" description="Main Background" type="color" default="#ffffff"/>
<Variable name="header.background.color" description="Header Background" type="color" default="transparent"/>
</Group>
<Group description="Links" selector=".main-outer">
<Variable name="link.color" description="Link Color" type="color" default="#2288bb"/>
<Variable name="link.visited.color" description="Visited Color" type="color" default="#888888"/>
<Variable name="link.hover.color" description="Hover Color" type="color" default="#33aaff"/>
</Group>
<Group description="Blog Title" selector=".header h1">
<Variable name="header.font" description="Font" type="font"
default="normal normal 60px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="header.text.color" description="Title Color" type="color" default="#3399bb" />
</Group>
<Group description="Blog Description" selector=".header .description">
<Variable name="description.text.color" description="Description Color" type="color"
default="#777777" />
</Group>
<Group description="Tabs Text" selector=".tabs-inner .widget li a">
<Variable name="tabs.font" description="Font" type="font"
default="normal normal 14px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="tabs.text.color" description="Text Color" type="color" default="#999999"/>
<Variable name="tabs.selected.text.color" description="Selected Color" type="color" default="#000000"/>
</Group>
<Group description="Tabs Background" selector=".tabs-outer .PageList">
<Variable name="tabs.background.color" description="Background Color" type="color" default="#f5f5f5"/>
<Variable name="tabs.selected.background.color" description="Selected Color" type="color" default="#eeeeee"/>
</Group>
<Group description="Post Title" selector="h3.post-title, .comments h4">
<Variable name="post.title.font" description="Font" type="font"
default="normal normal 22px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
</Group>
<Group description="Date Header" selector=".date-header">
<Variable name="date.header.color" description="Text Color" type="color"
default="#222222"/>
<Variable name="date.header.background.color" description="Background Color" type="color"
default="transparent"/>
</Group>
<Group description="Post Footer" selector=".post-footer">
<Variable name="post.footer.text.color" description="Text Color" type="color" default="#666666"/>
<Variable name="post.footer.background.color" description="Background Color" type="color"
default="#f9f9f9"/>
<Variable name="post.footer.border.color" description="Shadow Color" type="color" default="#eeeeee"/>
</Group>
<Group description="Gadgets" selector="h2">
<Variable name="widget.title.font" description="Title Font" type="font"
default="normal bold 11px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="widget.title.text.color" description="Title Color" type="color" default="#000000"/>
<Variable name="widget.alternate.text.color" description="Alternate Color" type="color" default="#999999"/>
</Group>
<Group description="Images" selector=".main-inner">
<Variable name="image.background.color" description="Background Color" type="color" default="#ffffff"/>
<Variable name="image.border.color" description="Border Color" type="color" default="#eeeeee"/>
<Variable name="image.text.color" description="Caption Text Color" type="color" default="#222222"/>
</Group>
<Group description="Accents" selector=".content-inner">
<Variable name="body.rule.color" description="Separator Line Color" type="color" default="#eeeeee"/>
<Variable name="tabs.border.color" description="Tabs Border Color" type="color" default="#eeeeee"/>
</Group>
<Variable name="body.background" description="Body Background" type="background"
color="#66bbdd" default="$(color) none repeat scroll top left"/>
<Variable name="body.background.override" description="Body Background Override" type="string" default=""/>
<Variable name="body.background.gradient.cap" description="Body Gradient Cap" type="url"
default="url(http://www.blogblog.com/1kt/simple/gradients_light.png)"/>
<Variable name="body.background.gradient.tile" description="Body Gradient Tile" type="url"
default="url(http://www.blogblog.com/1kt/simple/body_gradient_tile_light.png)"/>
<Variable name="content.background.color.selector" description="Content Background Color Selector" type="string" default=".content-inner"/>
<Variable name="content.padding" description="Content Padding" type="length" default="10px"/>
<Variable name="content.padding.horizontal" description="Content Horizontal Padding" type="length" default="10px"/>
<Variable name="content.shadow.spread" description="Content Shadow Spread" type="length" default="40px"/>
<Variable name="content.shadow.spread.webkit" description="Content Shadow Spread (WebKit)" type="length" default="5px"/>
<Variable name="content.shadow.spread.ie" description="Content Shadow Spread (IE)" type="length" default="10px"/>
<Variable name="main.border.width" description="Main Border Width" type="length" default="0"/>
<Variable name="header.background.gradient" description="Header Gradient" type="url" default="none"/>
<Variable name="header.shadow.offset.left" description="Header Shadow Offset Left" type="length" default="-1px"/>
<Variable name="header.shadow.offset.top" description="Header Shadow Offset Top" type="length" default="-1px"/>
<Variable name="header.shadow.spread" description="Header Shadow Spread" type="length" default="1px"/>
<Variable name="header.padding" description="Header Padding" type="length" default="30px"/>
<Variable name="header.border.size" description="Header Border Size" type="length" default="1px"/>
<Variable name="header.bottom.border.size" description="Header Bottom Border Size" type="length" default="1px"/>
<Variable name="header.border.horizontalsize" description="Header Horizontal Border Size" type="length" default="0"/>
<Variable name="description.text.size" description="Description Text Size" type="string" default="140%"/>
<Variable name="tabs.margin.top" description="Tabs Margin Top" type="length" default="0" />
<Variable name="tabs.margin.side" description="Tabs Side Margin" type="length" default="30px" />
<Variable name="tabs.background.gradient" description="Tabs Background Gradient" type="url"
default="url(http://www.blogblog.com/1kt/simple/gradients_light.png)"/>
<Variable name="tabs.border.width" description="Tabs Border Width" type="length" default="1px"/>
<Variable name="tabs.bevel.border.width" description="Tabs Bevel Border Width" type="length" default="1px"/>
<Variable name="date.header.padding" description="Date Header Padding" type="string" default="inherit"/>
<Variable name="date.header.letterspacing" description="Date Header Letter Spacing" type="string" default="inherit"/>
<Variable name="date.header.margin" description="Date Header Margin" type="string" default="inherit"/>
<Variable name="post.margin.bottom" description="Post Bottom Margin" type="length" default="25px"/>
<Variable name="image.border.small.size" description="Image Border Small Size" type="length" default="2px"/>
<Variable name="image.border.large.size" description="Image Border Large Size" type="length" default="5px"/>
<Variable name="page.width.selector" description="Page Width Selector" type="string" default=".region-inner"/>
<Variable name="page.width" description="Page Width" type="string" default="auto"/>
<Variable name="main.section.margin" description="Main Section Margin" type="length" default="0px"/>
<Variable name="main.padding" description="Main Padding" type="length" default="15px"/>
<Variable name="main.padding.top" description="Main Padding Top" type="length" default="30px"/>
<Variable name="main.padding.bottom" description="Main Padding Bottom" type="length" default="30px"/>
<Variable name="paging.background"
color="#ffffff"
description="Background of blog paging area" type="background"
default="transparent none no-repeat scroll top center"/>
<Variable name="footer.bevel" description="Bevel border length of footer" type="length" default="0"/>
<Variable name="startSide" description="Side where text starts in blog language" type="automatic" default="left"/>
<Variable name="endSide" description="Side where text ends in blog language" type="automatic" default="right"/>
*/
/* Content
----------------------------------------------- */
body {
font: normal normal 12px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #222222;
background: #66bbdd none repeat scroll top left;
padding: 0 40px 40px 40px;
}
html body .region-inner {
min-width: 0;
max-width: 100%;
width: auto;
}
a:link {
text-decoration:none;
color: #2288bb;
}
a:visited {
text-decoration:none;
color: #888888;
}
a:hover {
text-decoration:underline;
color: #33aaff;
}
.body-fauxcolumn-outer .fauxcolumn-inner {
background: transparent url(http://www.blogblog.com/1kt/simple/body_gradient_tile_light.png) repeat scroll top left;
_background-image: none;
}
.body-fauxcolumn-outer .cap-top {
position: absolute;
z-index: 1;
height: 400px;
width: 100%;
background: #66bbdd none repeat scroll top left;
}
.body-fauxcolumn-outer .cap-top .cap-left {
width: 100%;
background: transparent url(http://www.blogblog.com/1kt/simple/gradients_light.png) repeat-x scroll top left;
_background-image: none;
}
.content-outer {
-moz-box-shadow: 0 0 40px rgba(0, 0, 0, .15);
-webkit-box-shadow: 0 0 5px rgba(0, 0, 0, .15);
-goog-ms-box-shadow: 0 0 10px #333333;
box-shadow: 0 0 40px rgba(0, 0, 0, .15);
margin-bottom: 1px;
}
.content-inner {
padding: 10px 10px;
}
.content-inner {
background-color: #ffffff;
}
/* Header
----------------------------------------------- */
.header-outer {
background: transparent none repeat-x scroll 0 -400px;
_background-image: none;
}
.Header h1 {
font: normal normal 60px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #3399bb;
text-shadow: -1px -1px 1px rgba(0, 0, 0, .2);
}
.Header h1 a {
color: #3399bb;
}
.Header .description {
font-size: 140%;
color: #777777;
}
.header-inner .Header .titlewrapper {
padding: 22px 30px;
}
.header-inner .Header .descriptionwrapper {
padding: 0 30px;
}
/* Tabs
----------------------------------------------- */
.tabs-inner .section:first-child {
border-top: 1px solid #eeeeee;
}
.tabs-inner .section:first-child ul {
margin-top: -1px;
border-top: 1px solid #eeeeee;
border-left: 0 solid #eeeeee;
border-right: 0 solid #eeeeee;
}
.tabs-inner .widget ul {
background: #f5f5f5 url(http://www.blogblog.com/1kt/simple/gradients_light.png) repeat-x scroll 0 -800px;
_background-image: none;
border-bottom: 1px solid #eeeeee;
margin-top: 0;
margin-left: -30px;
margin-right: -30px;
}
.tabs-inner .widget li a {
display: inline-block;
padding: .6em 1em;
font: normal normal 14px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #999999;
border-left: 1px solid #ffffff;
border-right: 1px solid #eeeeee;
}
.tabs-inner .widget li:first-child a {
border-left: none;
}
.tabs-inner .widget li.selected a, .tabs-inner .widget li a:hover {
color: #000000;
background-color: #eeeeee;
text-decoration: none;
}
/* Columns
----------------------------------------------- */
.main-outer {
border-top: 0 solid #eeeeee;
}
.fauxcolumn-left-outer .fauxcolumn-inner {
border-right: 1px solid #eeeeee;
}
.fauxcolumn-right-outer .fauxcolumn-inner {
border-left: 1px solid #eeeeee;
}
/* Headings
----------------------------------------------- */
h2 {
margin: 0 0 1em 0;
font: normal bold 11px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #000000;
text-transform: uppercase;
}
/* Widgets
----------------------------------------------- */
.widget .zippy {
color: #999999;
text-shadow: 2px 2px 1px rgba(0, 0, 0, .1);
}
.widget .popular-posts ul {
list-style: none;
}
/* Posts
----------------------------------------------- */
.date-header span {
background-color: transparent;
color: #222222;
padding: inherit;
letter-spacing: inherit;
margin: inherit;
}
.main-inner {
padding-top: 30px;
padding-bottom: 30px;
}
.main-inner .column-center-inner {
padding: 0 15px;
}
.main-inner .column-center-inner .section {
margin: 0 0px;
}
.post {
margin: 0 0 25px 0;
}
h3.post-title, .comments h4 {
font: normal normal 22px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
margin: .75em 0 0;
}
.post-body {
font-size: 110%;
line-height: 1.4;
position: relative;
}
.post-body img, .post-body .tr-caption-container, .Profile img, .Image img,
.BlogList .item-thumbnail img {
padding: 2px;
background: #ffffff;
border: 1px solid #eeeeee;
-moz-box-shadow: 1px 1px 5px rgba(0, 0, 0, .1);
-webkit-box-shadow: 1px 1px 5px rgba(0, 0, 0, .1);
box-shadow: 1px 1px 5px rgba(0, 0, 0, .1);
}
.post-body img, .post-body .tr-caption-container {
padding: 5px;
}
.post-body .tr-caption-container {
color: #222222;
}
.post-body .tr-caption-container img {
padding: 0;
background: transparent;
border: none;
-moz-box-shadow: 0 0 0 rgba(0, 0, 0, .1);
-webkit-box-shadow: 0 0 0 rgba(0, 0, 0, .1);
box-shadow: 0 0 0 rgba(0, 0, 0, .1);
}
.post-header {
margin: 0 0 1.5em;
line-height: 1.6;
font-size: 90%;
}
.post-footer {
margin: 20px -2px 0;
padding: 5px 10px;
color: #666666;
background-color: #f9f9f9;
border-bottom: 1px solid #eeeeee;
line-height: 1.6;
font-size: 90%;
}
#comments .comment-author {
padding-top: 1.5em;
border-top: 1px solid #eeeeee;
background-position: 0 1.5em;
}
#comments .comment-author:first-child {
padding-top: 0;
border-top: none;
}
.avatar-image-container {
margin: .2em 0 0;
}
#comments .avatar-image-container img {
border: 1px solid #eeeeee;
}
/* Accents
---------------------------------------------- */
.section-columns td.columns-cell {
border-left: 1px solid #eeeeee;
}
.blog-pager {
background: transparent none no-repeat scroll top center;
}
.blog-pager-older-link, .home-link,
.blog-pager-newer-link {
background-color: #ffffff;
padding: 5px;
}
.footer-outer {
border-top: 0 dashed #bbbbbb;
}
/* Mobile
----------------------------------------------- */
.mobile .content-outer {
-webkit-box-shadow: 0 0 3px rgba(0, 0, 0, .15);
box-shadow: 0 0 3px rgba(0, 0, 0, .15);
padding: 0 40px;
}
body.mobile .AdSense {
margin-left: -40px;
}
.mobile .tabs-inner .widget ul {
margin-left: 0;
margin-right: 0;
}
.mobile .post {
margin: 0;
}
.mobile .main-inner .column-center-inner .section {
margin: 0;
}
.mobile .date-header span {
padding: 0.4em 10px;
margin: 0 -10px;
}
.mobile h3.post-title {
margin: 0;
}
.mobile .blog-pager {
background: transparent;
}
.mobile .footer-outer {
border-top: none;
}
.mobile .main-inner, .mobile .footer-inner {
background-color: #ffffff;
}
.mobile-index-contents {
color: #222222;
}
.mobile-link-button {
background-color: #2288bb;
}
.mobile-link-button a:link, .mobile-link-button a:visited {
color: #ffffff;
}

--></style>
<style id='template-skin-1' type='text/css'><!--
body {
min-width: 930px;
}
.content-outer, .content-fauxcolumn-outer, .region-inner {
min-width: 930px;
max-width: 930px;
_width: 930px;
}
.main-inner .columns {
padding-left: 250px;
padding-right: 0px;
}
.main-inner .fauxcolumn-center-outer {
left: 250px;
right: 0px;
/* IE6 does not respect left and right together */
_width: expression(this.parentNode.offsetWidth -
parseInt("250px") -
parseInt("0px") + 'px');
}
.main-inner .fauxcolumn-left-outer {
width: 250px;
}
.main-inner .fauxcolumn-right-outer {
width: 0px;
}
.main-inner .column-left-outer {
width: 250px;
right: 100%;
margin-left: -250px;
}
.main-inner .column-right-outer {
width: 0px;
margin-right: -0px;
}
#layout {
min-width: 0;
}
#layout .content-outer {
min-width: 0;
width: 800px;
}
#layout .region-inner {
min-width: 0;
width: auto;
}
--></style>
<script type="text/javascript">var a="indexOf",b="&m=1",e="(^|&)m=",f="?",g="?m=1";function h(){var c=window.location.href,d=c.split(f);switch(d.length){case 1:return c+g;case 2:return 0<=d[1].search(e)?null:c+b;default:return null}}var k=navigator.userAgent;if(-1!=k[a]("Mobile")&&-1!=k[a]("WebKit")&&-1==k[a]("iPad")||-1!=k[a]("Opera Mini")||-1!=k[a]("IEMobile")){var l=h();l&&window.location.replace(l)};
</script><script type="text/javascript">
if (window.jstiming) window.jstiming.load.tick('headEnd');
</script></head>
<body class='loading'>
<div class='navbar section' id='navbar'><div class='widget Navbar' id='Navbar1'><script type="text/javascript">
    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener('load',
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent('onload', function(){ object[attribute] = val; });
      }
    }
  </script>
<div id="navbar-iframe-container"></div>
<script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script>
<script type="text/javascript">
        gapi.load("gapi.iframes:gapi.iframes.style.bubble", function() {
          if (gapi.iframes && gapi.iframes.getContext) {
            gapi.iframes.getContext().openChild({
                url: 'https://www.blogger.com/navbar.g?targetBlogID\0753971202189709462152\46blogName\75PyPy+Status+Blog\46publishMode\75PUBLISH_MODE_BLOGSPOT\46navbarType\75LIGHT\46layoutType\75LAYOUTS\46searchRoot\75http://morepypy.blogspot.com/search\46blogLocale\75en\46v\0752\46homepageUrl\75http://morepypy.blogspot.com/\46targetPostID\0756513983438425039230\46blogPostOrPageUrl\75http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html\46vt\75-8128759178198414623',
                where: document.getElementById("navbar-iframe-container"),
                id: "navbar-iframe"
            });
          }
        });
      </script><script type="text/javascript">
(function() {
var script = document.createElement('script');
script.type = 'text/javascript';
script.src = '//pagead2.googlesyndication.com/pagead/js/google_top_exp.js';
var head = document.getElementsByTagName('head')[0];
if (head) {
head.appendChild(script);
}})();
</script>
</div></div>
<div class='body-fauxcolumns'>
<div class='fauxcolumn-outer body-fauxcolumn-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</div>
<div class='content'>
<div class='content-fauxcolumns'>
<div class='fauxcolumn-outer content-fauxcolumn-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</div>
<div class='content-outer'>
<div class='content-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left content-fauxborder-left'>
<div class='fauxborder-right content-fauxborder-right'></div>
<div class='content-inner'>
<header>
<div class='header-outer'>
<div class='header-cap-top cap-top'>
<div class='cap-left'>
<img src='http://2.bp.blogspot.com/-iO_dZU_FAR0/Tbre-StkIhI/AAAAAAAAAM4/m3P9wi1e-ng/s150/pypy_small128.png'/>
</div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left header-fauxborder-left'>
<div class='fauxborder-right header-fauxborder-right'></div>
<div class='region-inner header-inner' style='margin-left: 128px'>
<div class='header section' id='header'><div class='widget Header' id='Header1'>
<div id='header-inner'>
<div class='titlewrapper'>
<h1 class='title'>
<a href='http://morepypy.blogspot.co.uk/'>PyPy Status Blog</a>
</h1>
</div>
<div class='descriptionwrapper'>
<p class='description'><span>
</span></p>
</div>
</div>
</div></div>
</div>
</div>
<div class='header-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</header>
<div class='tabs-outer'>
<div class='tabs-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left tabs-fauxborder-left'>
<div class='fauxborder-right tabs-fauxborder-right'></div>
<div class='region-inner tabs-inner'>
<div class='tabs section' id='crosscol'></div>
<div class='tabs section' id='crosscol-overflow'></div>
</div>
</div>
<div class='tabs-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<div class='main-outer'>
<div class='main-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left main-fauxborder-left'>
<div class='fauxborder-right main-fauxborder-right'></div>
<div class='region-inner main-inner'>
<div class='columns fauxcolumns'>
<div class='fauxcolumn-outer fauxcolumn-center-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<div class='fauxcolumn-outer fauxcolumn-left-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<div class='fauxcolumn-outer fauxcolumn-right-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<!-- corrects IE6 width calculation -->
<div class='columns-inner'>
<div class='column-center-outer'>
<div class='column-center-inner'>
<div class='main section' id='main'><div class='widget Blog' id='Blog1'>
<div class='blog-posts hfeed'>
<!-- google_ad_section_start(name=default) -->

          <div class="date-outer">
        
<h2 class='date-header'><span>Tuesday, August 23, 2011</span></h2>

          <div class="date-posts">
        
<div class='post-outer'>
<div class='post hentry'>
<a name='6513983438425039230'></a>
<h3 class='post-title entry-title'>
We need Software Transactional Memory
</h3>
<div class='post-header'>
<div class='post-header-line-1'></div>
</div>
<div class='post-body entry-content' id='post-body-6513983438425039230'>
<p>Hi all.  Here is (an extract of) a short summary paper about my current position on
Software Transactional Memory as a general tool in the implementation
of Python or Python-like languages.  Thanks to people on IRC for discussion on making
this blog post better (lucian, Alex Gaynor, rguillebert, timonator, Da_Blitz).
For the purpose of the present discussion, we are comparing Java with Python
when it comes to multi-threading.</p>

<h2>The problem in complex high-level languages</h2>
<p>Like Java, the Python language gives guarantees: it is not acceptable
for the Python virtual machine to crash due to incorrect usage of
threads.  A primitive operation in Java is something like reading or
writing a field of an object; the corresponding guarantees are along the
lines of: if the program reads a field of an object, and another thread
writes to the same field of the same object, then the program will see
either the old value, or the new value, but not something else entirely,
and the virtual machine will not crash.</p>
<p>Higher-level languages like Python differ from Java by the fact that a
&quot;primitive operation&quot; is far more complex.  It may for example involve
looking in several hash maps, perhaps doing updates.  In general, it is
completely impossible to map every operation that must be atomic to a
single processor instruction.</p>

<h2>Jython: fine-grained locking</h2>
<p>This problem has been solved &quot;explicitly&quot; in the Jython interpreter that
runs on top of Java.  The solution is explicit in the following sense:
throughout the Jython interpreter, every single operation makes careful
use of Java-level locking mechanisms.  This is an application of
&quot;fine-grained locking&quot;.  For example, operations like attribute lookup,
which need to perform look-ups in a number of hash maps, are protected
by acquiring and releasing locks (in __getattribute__).</p>
<p>A draw-back of this solution is the attention to detail required.
If even one place misses a lock, then there is either a
bug --- and such bugs occur in cases that are increasingly rare and hard
to debug as the previous bugs are fixed --- or we just file it under "differences
from CPython".  There is however the risk of
deadlock, if two threads attempt to lock the same objects in different
order.</p>

<p>In practice, the situation is actually not as bad as
I may paint it: the number of locks in Jython is reasonable, and allows for
all the &quot;common cases&quot; to work as expected.
(For the uncommon cases, see below.)</p>

<p>Performance-wise, the Java virtual machine itself comes with locks that
have been heavily optimized over a long period of time, so the
performance is acceptable.  However if this solution were coded in C, it
would need a lot of extra work to optimize the locks manually (possibly
introducing more of the subtle bugs).</p>

<h2>CPython: coarse-grained locking</h2>
<p>CPython, the standard implementation of Python in C, took a different
and simpler approach: it has a single global lock, called the Global
Interpreter Lock (GIL).  It uses &quot;coarse-grained locking&quot;: the lock is
acquired and released around the whole execution of one bytecode (or
actually a small number of bytecodes, like 100).  This solution is
enough to ensure that no two operations can conflict with each other,
because the two bytecodes that invoke them are themselves
serialized by the GIL.  It is a solution which avoids --- unlike Jython
--- writing careful lock-acquiring code all over the interpreter.  It
also offers even stronger guarantees: every bytecode runs entirely
atomically.</p>
<p>Nowadays, the draw-back of the GIL approach is obvious on multi-core
machines: by serializing the execution of bytecodes, starting multiple
threads does not actually let the interpreter use of more than one core.</p>
<p>PyPy, the Python implementation in Python, takes the same approach so
far.</p>

<h2>Existing usage</h2>
<p>As we have seen, we have the following situation: the existing Python
language, as CPython implements it, offers very strong guarantees about
multi-threaded usage.  It is important to emphasize that most existing
multi-threaded Python programs actually rely on such strong guarantees.
This can be seen for example in a problem that takes a populated list
and does in several threads:</p>
<pre class="literal-block">
next_item = global_list.pop()
</pre>
<p>This implicitly relies on the fact that pop() will perform atomic
removal from the list.  If two threads try to pop() from the same list
at the same time, then the two operations will occur in one order or the
other; but they will not e.g. return the same object to both threads or
mess up the internal state of the list object.</p>
<p>With such an example in mind, it should be clear that we do not want a
solution to the multi-core issue that involves dropping these strong
guarantees.  It is ok however to lower the barrier, as Jython does; but
any Python implementation must offer <i>some</i> guarantees, or not offer
multi-threading at all.  This includes the fact that a lot of methods on
built-in types are supposed to be atomic.</p>

<p>(It should be noted that not offering multi-threading at all is actually
also a (partial) solution to the problem.  Recently, several &quot;hacks&quot;
have appeared that give a programmer more-or-less transparent access to
multiple independent processes (e.g. <a href="http://docs.python.org/library/multiprocessing.html">multiprocessing</a>).  While these provide appropriate
solutions in some context, they are not as widely applicable as
multi-threading.  As a typical example, they fail to apply when the
mutiple cores need to process information that cannot be serialized at
all --- a requirement for any data exchange between several processes.)</p>

<p>Here is an example of how Jython's consistency is weaker than CPython's GIL.
It takes uncommon examples to show it, and the fact that it does not work
like a CPython programmer expect them to is generally considered as an
implementation detail.  Consider:</p>
<pre>Thread 1:  set1.update(set2)
Thread 2:  set2.update(set3)
Thread 3:  set3.update(set1)</pre>
<p>Each operation is atomic in the case of CPython, but decomposed in two steps
(which can each be considered atomic) in the case of Jython: reading from the
argument, and then updating the target set.  Suppose that initially
set1 = {1}, set2 = {2}, set3 = {3}.  On CPython, independently on
the order in which the threads run, we will end up with at least one of the
sets being {1, 2, 3}.  On Jython, it is possible that all
three sets end up as containing two items only.  The example is a bit
far-fetched but should show that CPython's consistency is strictly stronger
than Jython's.</p>

<h2>PyPy</h2>
<p>PyPy is a Python interpreter much like CPython or Jython, but the way it
is produced is particular.  It is an interpreter written in RPython, a
subset of Python, which gets turned into a complete virtual machine (as
generated C code) automatically by a step called the &quot;translation&quot;.  In
this context, the trade-offs are different from the ones in CPython and
in Jython: it is possible in PyPy, and even easy, to apply arbitrary
whole-program transformations to the interpreter at &quot;translation-time&quot;.</p>
<p>With this in mind, it is possible to imagine a whole-program
transformation that would add locking on every object manipulated in
RPython by the interpreter.  This would end up in a situation similar to
Jython.  However, it would not automatically solve the issue of
deadlocks, which is avoided in the case of Jython by careful manual
placement of the locks.  (In fact, being deadlock-free is a global
program property that cannot be automatically ensured or verified; any
change to Jython can in theory break this property, and thus introduce
subtle deadlocks.  The same applies to non-atomicity.)</p>
<p>In fact, we can easily check that if the interpreter accesses (for
both reading and writing)
objects A and B in a bytecode of thread 1, and objects B and A (in the
opposite order) in a bytecode of thread 2 --- and moreover if you need to
have accessed the first object before you can decide that you will need
to access the second object --- then there is no way (apart from the GIL) to avoid
a deadlock while keeping the strong guarantee of atomicity.  Indeed, if
both threads have progressed to the middle of the execution of their
bytecode, then A has already been mutated by thread 1 and similarly B
has already been mutated by thread 2.  It is not possible to
successfully continue running the threads in that case.</p>

<h2>Using Software Transactional Memory</h2>
<p>Software Transactional Memory (STM) is an approach that gives a solution
to precisely the above problem.  If a thread ended up in a situation
where continuing to run it would be wrong, then we can <i>abort and
rollback.</i>  This is similar to the notion of transaction on databases.
In the above example, one or both threads would notice that they are
about to run into troubles and abort.  This means more concretely that
they need to have a way to restart execution at the start of the
bytecode, with all the side-effects of what they did so far being either
cancelled or just not committed yet.</p>
<p>We think that this capacity to abort and rollback is the missing piece
of the puzzle of multi-threaded implementations of Python.
Actually, according to the presentation of the problem given
above, it is unavoidable that any solution that wants to offer the
same level of consistency and atomicity as CPython would involve
the capacity of aborting and rolling back --- <i>which means precisely
that STM cannot be avoided.</i></p>

<p>Ok, but why not settle down with Jython's
approach and put careful locks left and right throughout the interpreter?
Because (1) we would have to consider every operation's atomicity and make decisions
(or steal Jython's) and document them
<a href="http://doc.pypy.org/en/latest/cpython_differences.html">here</a>;
(2) it would also be really a lot of work, to optimize these locks e.g. with the
JIT as well as the JVM does; and (3) it is not the PyPy way to require manually
tweaking your code everywhere for a feature that should be orthogonal.  Point
(3) is probably the most important here: you need to redo the work for every
language you implement in PyPy.
It also implies my own point (4): <i>it is not fun :-)</i></p>

<p>In more details, the process would work as follows.  (This gives an
overview of one possible model; it is possible that a different model
will end up being better.)  In every thread:</p>
<ul>
<li>At the start of a bytecode, we start a &quot;transaction&quot;.  This means
setting up a thread-local data structure to record a log of what
occurs in the transaction.</li>
<li>We record in the log all objects that are read, as well as the
modifications that we would like to make.</li>
<li>During this time, we detect &quot;read&quot; inconsistencies, shown by the
object's &quot;last-modified&quot; timestamp being later than the start time
of the current transaction, and abort.  This prevents the rest of
the code from running with inconsistent values.</li>
<li>If we reach the end of the bytecode without a &quot;read&quot; inconsistency,
then we atomically check for &quot;write&quot; inconsistencies.  These are
inconsistencies which arise from concurrent updates to objects
in the other threads --- either our &quot;write&quot; objects, or our &quot;read&quot;
objects.</li>
<li>If no inconsistency is found, we &quot;commit&quot; the transaction by copying
the delayed writes from the log into main memory.</li>
</ul>

<p>The points at which a transaction starts or ends are exactly the
points at which, in CPython, the Global Interpreter Lock is
respectively acquired and released.  If we ignore the fact that (purely for
performance) CPython acquires and releases the GIL only every N bytecodes,
then this means:</p>
<ol>
<li>Before any bytecode we acquire the GIL (start a transaction), and after
the bytecode we release it (ends the transaction); and
<li>Before doing an external call to the C library or the OS we release the GIL
(ends the transaction) and afterwards re-acquire it (start the next transaction).
</ol>
So in particular this model is well suited to the STM condition that we cannot
do anything in a transaction that cannot be rolled back, like --- precisely ---
system calls.  Indeed, by construction, these system calls occur outside a
transaction, because in CPython they occur with the GIL released.</p>

<h2>Performance</h2>
<p>A large number of implementation details are still open for now.
From a user's point of view (i.e. the programmer using Python),
the most relevant one is the overall performance impact.  We
cannot give precise numbers so far, and we expect the initial
performance to be abysmally bad (maybe 10x slower); however, with
successive improvements to the locking mechanism, to the global
program transformation inserting the locks, to the garbage 
collector (GC), and to the Just-in-Time (JIT) compiler, we
believe that it should be possible to get a roughly reasonable
performance (up to maybe 2x slower).  For example, the GC can
maintain flags on the objects to know that they did not escape
their creation thread, and do not need any logging; and the JIT
compiler can aggregate several reads or writes to an object into
one.  We believe that these are the kind of optimizations that
can give back a lot of the performance lost.</p>

<h2>The state of STM</h2>
<p>Transactional Memory is itself a relatively old idea, originating
from a 1986 paper by Tom Knight.  At first based on hardware
support, the idea of software-only transactional memory (STM) was
popularized in 1995 and has recently been the focus of intense 
research.</p>
<p>The approach outlined above --- using STM to form the core of the
implementation of a language --- is new, as far as we know.  So
far, most implementations provide STM as a library feature.  It
requires explicit usage, often in the form of explicitly
declaring which objects must be protected by STM (object-based
STMs).  It is only recently that native STM support has started
to appear, notably in the Clojure language.</p>
<p>STM is described on Wikipedia as an approach that &quot;greatly
simplifies conceptual understanding of multithreaded programs and
helps make programs more maintainable by working in harmony with
existing high-level abstractions such as objects and modules.&quot;
We actually think that these benefits are important enough to
warrant being exposed to the Python programmer as well, instead
of being used only internally.  This would give the Python
programmer a very simple interface:</p>
<pre class="literal-block">
with atomic:
    &lt;these operations are executed atomically&gt;
</pre>
<p>(This is <a href="http://mail.python.org/pipermail/python-dev/2003-February/033259.html">an old idea.</a>  Funny how back in 2003 people, including me, thought that this was a hack.  Now I'm writing a blog post to say "it was not a hack; it's explicitly using locks that is a hack."  I'm buying the idea of <a href="http://en.wikipedia.org/wiki/Software_transactional_memory#Composable_operations">composability.</a>)</p>

<p>From a practical point of view, I started looking seriously at
the University of Rochester STM (RSTM), a C++ library that has
been a focus of --- and a collection of results from --- recent
research.  One particularly representative paper is
<a href="http://www.cs.rochester.edu/u/spear/ppopp09.pdf">A
Comprehensive Strategy for Contention Management in Software
Transactional Memory</a> by Michael F. Spear, Luke Dalessandro,
Virendra J. Marathe and Michael L. Scott.</p>

<h2>Conclusion</h2>
<p>Taking these ideas and applying them in the context of an
implementation of a complex high-level language like Python comes
with its own challanges.  In this context, using PyPy makes sense
as both an experimentation platform and as a platform that is
recently gaining attention for its performance.  The alternatives
are unattractive: doing it in CPython for example would mean
globally rewriting the interpreter.  In PyPy instead, we write it
as a transformation that is applied systematically at translation-time.
Also, PyPy is a general platform for generating fast interpreters
for dynamic languages; the STM implementation in PyPy would work
out of the box for other language implementations as well, instead
of just for Python.</p>
<br>
<p><b>Update:</b>
<ul>
<li>This is mostly me (Armin Rigo) ranting aloud and trying experiments;
this post should not be confused as meaning that the whole PyPy team
will now spend the next years working on it full-time.
As I said it is orthogonal to the actual Python interpreter, and it is in
any case a feature that can be turned on or off during translation; I know
that in many or most use cases, people are more interested in getting a
fast PyPy rather than one which is twice as slow but scales well.
<li>Nothing I said is really new.  For proof, see
<a href="http://sabi.net/nriley/pubs/dls6-riley.pdf">Riley and Zilles (2006)</a>
as well as <a href="http://www.cs.auckland.ac.nz/~fuad/parpycan.pdf">Tabba (2010)</a> who both experimented with <i>Hardware</i> Transactional Memory, turning CPython or PyPy interpreter's GIL into start/end transactions, as I describe here.
</ul>
<div style='clear: both;'></div>
</div>
<div class='post-footer'>
<div class='post-footer-line post-footer-line-1'><span class='post-author vcard'>
<div id='flattr_summary_6513983438425039230' style='display: none;'>
<p>Hi all.  Here is (an extract of) a short summary paper about my current position on
Software Transactional Memory as a general tool in the implementation
of Python or Python-like languages.  Thanks to people on IRC for discussion on making
this blog post better (lucian, Alex Gaynor, rguillebert, timonator, Da_Blitz).
For the purpose of the present discussion, we are comparing Java with Python
when it comes to multi-threading.</p>

<h2>The problem in complex high-level languages</h2>
<p>Like Java, the Python language gives guarantees: it is not acceptable
for the Python virtual machine to crash due to incorrect usage of
threads.  A primitive operation in Java is something like reading or
writing a field of an object; the corresponding guarantees are along the
lines of: if the program reads a field of an object, and another thread
writes to the same field of the same object, then the program will see
either the old value, or the new value, but not something else entirely,
and the virtual machine will not crash.</p>
<p>Higher-level languages like Python differ from Java by the fact that a
&quot;primitive operation&quot; is far more complex.  It may for example involve
looking in several hash maps, perhaps doing updates.  In general, it is
completely impossible to map every operation that must be atomic to a
single processor instruction.</p>

<h2>Jython: fine-grained locking</h2>
<p>This problem has been solved &quot;explicitly&quot; in the Jython interpreter that
runs on top of Java.  The solution is explicit in the following sense:
throughout the Jython interpreter, every single operation makes careful
use of Java-level locking mechanisms.  This is an application of
&quot;fine-grained locking&quot;.  For example, operations like attribute lookup,
which need to perform look-ups in a number of hash maps, are protected
by acquiring and releasing locks (in __getattribute__).</p>
<p>A draw-back of this solution is the attention to detail required.
If even one place misses a lock, then there is either a
bug --- and such bugs occur in cases that are increasingly rare and hard
to debug as the previous bugs are fixed --- or we just file it under "differences
from CPython".  There is however the risk of
deadlock, if two threads attempt to lock the same objects in different
order.</p>

<p>In practice, the situation is actually not as bad as
I may paint it: the number of locks in Jython is reasonable, and allows for
all the &quot;common cases&quot; to work as expected.
(For the uncommon cases, see below.)</p>

<p>Performance-wise, the Java virtual machine itself comes with locks that
have been heavily optimized over a long period of time, so the
performance is acceptable.  However if this solution were coded in C, it
would need a lot of extra work to optimize the locks manually (possibly
introducing more of the subtle bugs).</p>

<h2>CPython: coarse-grained locking</h2>
<p>CPython, the standard implementation of Python in C, took a different
and simpler approach: it has a single global lock, called the Global
Interpreter Lock (GIL).  It uses &quot;coarse-grained locking&quot;: the lock is
acquired and released around the whole execution of one bytecode (or
actually a small number of bytecodes, like 100).  This solution is
enough to ensure that no two operations can conflict with each other,
because the two bytecodes that invoke them are themselves
serialized by the GIL.  It is a solution which avoids --- unlike Jython
--- writing careful lock-acquiring code all over the interpreter.  It
also offers even stronger guarantees: every bytecode runs entirely
atomically.</p>
<p>Nowadays, the draw-back of the GIL approach is obvious on multi-core
machines: by serializing the execution of bytecodes, starting multiple
threads does not actually let the interpreter use of more than one core.</p>
<p>PyPy, the Python implementation in Python, takes the same approach so
far.</p>

<h2>Existing usage</h2>
<p>As we have seen, we have the following situation: the existing Python
language, as CPython implements it, offers very strong guarantees about
multi-threaded usage.  It is important to emphasize that most existing
multi-threaded Python programs actually rely on such strong guarantees.
This can be seen for example in a problem that takes a populated list
and does in several threads:</p>
<pre class="literal-block">
next_item = global_list.pop()
</pre>
<p>This implicitly relies on the fact that pop() will perform atomic
removal from the list.  If two threads try to pop() from the same list
at the same time, then the two operations will occur in one order or the
other; but they will not e.g. return the same object to both threads or
mess up the internal state of the list object.</p>
<p>With such an example in mind, it should be clear that we do not want a
solution to the multi-core issue that involves dropping these strong
guarantees.  It is ok however to lower the barrier, as Jython does; but
any Python implementation must offer <i>some</i> guarantees, or not offer
multi-threading at all.  This includes the fact that a lot of methods on
built-in types are supposed to be atomic.</p>

<p>(It should be noted that not offering multi-threading at all is actually
also a (partial) solution to the problem.  Recently, several &quot;hacks&quot;
have appeared that give a programmer more-or-less transparent access to
multiple independent processes (e.g. <a href="http://docs.python.org/library/multiprocessing.html">multiprocessing</a>).  While these provide appropriate
solutions in some context, they are not as widely applicable as
multi-threading.  As a typical example, they fail to apply when the
mutiple cores need to process information that cannot be serialized at
all --- a requirement for any data exchange between several processes.)</p>

<p>Here is an example of how Jython's consistency is weaker than CPython's GIL.
It takes uncommon examples to show it, and the fact that it does not work
like a CPython programmer expect them to is generally considered as an
implementation detail.  Consider:</p>
<pre>Thread 1:  set1.update(set2)
Thread 2:  set2.update(set3)
Thread 3:  set3.update(set1)</pre>
<p>Each operation is atomic in the case of CPython, but decomposed in two steps
(which can each be considered atomic) in the case of Jython: reading from the
argument, and then updating the target set.  Suppose that initially
set1 = {1}, set2 = {2}, set3 = {3}.  On CPython, independently on
the order in which the threads run, we will end up with at least one of the
sets being {1, 2, 3}.  On Jython, it is possible that all
three sets end up as containing two items only.  The example is a bit
far-fetched but should show that CPython's consistency is strictly stronger
than Jython's.</p>

<h2>PyPy</h2>
<p>PyPy is a Python interpreter much like CPython or Jython, but the way it
is produced is particular.  It is an interpreter written in RPython, a
subset of Python, which gets turned into a complete virtual machine (as
generated C code) automatically by a step called the &quot;translation&quot;.  In
this context, the trade-offs are different from the ones in CPython and
in Jython: it is possible in PyPy, and even easy, to apply arbitrary
whole-program transformations to the interpreter at &quot;translation-time&quot;.</p>
<p>With this in mind, it is possible to imagine a whole-program
transformation that would add locking on every object manipulated in
RPython by the interpreter.  This would end up in a situation similar to
Jython.  However, it would not automatically solve the issue of
deadlocks, which is avoided in the case of Jython by careful manual
placement of the locks.  (In fact, being deadlock-free is a global
program property that cannot be automatically ensured or verified; any
change to Jython can in theory break this property, and thus introduce
subtle deadlocks.  The same applies to non-atomicity.)</p>
<p>In fact, we can easily check that if the interpreter accesses (for
both reading and writing)
objects A and B in a bytecode of thread 1, and objects B and A (in the
opposite order) in a bytecode of thread 2 --- and moreover if you need to
have accessed the first object before you can decide that you will need
to access the second object --- then there is no way (apart from the GIL) to avoid
a deadlock while keeping the strong guarantee of atomicity.  Indeed, if
both threads have progressed to the middle of the execution of their
bytecode, then A has already been mutated by thread 1 and similarly B
has already been mutated by thread 2.  It is not possible to
successfully continue running the threads in that case.</p>

<h2>Using Software Transactional Memory</h2>
<p>Software Transactional Memory (STM) is an approach that gives a solution
to precisely the above problem.  If a thread ended up in a situation
where continuing to run it would be wrong, then we can <i>abort and
rollback.</i>  This is similar to the notion of transaction on databases.
In the above example, one or both threads would notice that they are
about to run into troubles and abort.  This means more concretely that
they need to have a way to restart execution at the start of the
bytecode, with all the side-effects of what they did so far being either
cancelled or just not committed yet.</p>
<p>We think that this capacity to abort and rollback is the missing piece
of the puzzle of multi-threaded implementations of Python.
Actually, according to the presentation of the problem given
above, it is unavoidable that any solution that wants to offer the
same level of consistency and atomicity as CPython would involve
the capacity of aborting and rolling back --- <i>which means precisely
that STM cannot be avoided.</i></p>

<p>Ok, but why not settle down with Jython's
approach and put careful locks left and right throughout the interpreter?
Because (1) we would have to consider every operation's atomicity and make decisions
(or steal Jython's) and document them
<a href="http://doc.pypy.org/en/latest/cpython_differences.html">here</a>;
(2) it would also be really a lot of work, to optimize these locks e.g. with the
JIT as well as the JVM does; and (3) it is not the PyPy way to require manually
tweaking your code everywhere for a feature that should be orthogonal.  Point
(3) is probably the most important here: you need to redo the work for every
language you implement in PyPy.
It also implies my own point (4): <i>it is not fun :-)</i></p>

<p>In more details, the process would work as follows.  (This gives an
overview of one possible model; it is possible that a different model
will end up being better.)  In every thread:</p>
<ul>
<li>At the start of a bytecode, we start a &quot;transaction&quot;.  This means
setting up a thread-local data structure to record a log of what
occurs in the transaction.</li>
<li>We record in the log all objects that are read, as well as the
modifications that we would like to make.</li>
<li>During this time, we detect &quot;read&quot; inconsistencies, shown by the
object's &quot;last-modified&quot; timestamp being later than the start time
of the current transaction, and abort.  This prevents the rest of
the code from running with inconsistent values.</li>
<li>If we reach the end of the bytecode without a &quot;read&quot; inconsistency,
then we atomically check for &quot;write&quot; inconsistencies.  These are
inconsistencies which arise from concurrent updates to objects
in the other threads --- either our &quot;write&quot; objects, or our &quot;read&quot;
objects.</li>
<li>If no inconsistency is found, we &quot;commit&quot; the transaction by copying
the delayed writes from the log into main memory.</li>
</ul>

<p>The points at which a transaction starts or ends are exactly the
points at which, in CPython, the Global Interpreter Lock is
respectively acquired and released.  If we ignore the fact that (purely for
performance) CPython acquires and releases the GIL only every N bytecodes,
then this means:</p>
<ol>
<li>Before any bytecode we acquire the GIL (start a transaction), and after
the bytecode we release it (ends the transaction); and
<li>Before doing an external call to the C library or the OS we release the GIL
(ends the transaction) and afterwards re-acquire it (start the next transaction).
</ol>
So in particular this model is well suited to the STM condition that we cannot
do anything in a transaction that cannot be rolled back, like --- precisely ---
system calls.  Indeed, by construction, these system calls occur outside a
transaction, because in CPython they occur with the GIL released.</p>

<h2>Performance</h2>
<p>A large number of implementation details are still open for now.
From a user's point of view (i.e. the programmer using Python),
the most relevant one is the overall performance impact.  We
cannot give precise numbers so far, and we expect the initial
performance to be abysmally bad (maybe 10x slower); however, with
successive improvements to the locking mechanism, to the global
program transformation inserting the locks, to the garbage 
collector (GC), and to the Just-in-Time (JIT) compiler, we
believe that it should be possible to get a roughly reasonable
performance (up to maybe 2x slower).  For example, the GC can
maintain flags on the objects to know that they did not escape
their creation thread, and do not need any logging; and the JIT
compiler can aggregate several reads or writes to an object into
one.  We believe that these are the kind of optimizations that
can give back a lot of the performance lost.</p>

<h2>The state of STM</h2>
<p>Transactional Memory is itself a relatively old idea, originating
from a 1986 paper by Tom Knight.  At first based on hardware
support, the idea of software-only transactional memory (STM) was
popularized in 1995 and has recently been the focus of intense 
research.</p>
<p>The approach outlined above --- using STM to form the core of the
implementation of a language --- is new, as far as we know.  So
far, most implementations provide STM as a library feature.  It
requires explicit usage, often in the form of explicitly
declaring which objects must be protected by STM (object-based
STMs).  It is only recently that native STM support has started
to appear, notably in the Clojure language.</p>
<p>STM is described on Wikipedia as an approach that &quot;greatly
simplifies conceptual understanding of multithreaded programs and
helps make programs more maintainable by working in harmony with
existing high-level abstractions such as objects and modules.&quot;
We actually think that these benefits are important enough to
warrant being exposed to the Python programmer as well, instead
of being used only internally.  This would give the Python
programmer a very simple interface:</p>
<pre class="literal-block">
with atomic:
    &lt;these operations are executed atomically&gt;
</pre>
<p>(This is <a href="http://mail.python.org/pipermail/python-dev/2003-February/033259.html">an old idea.</a>  Funny how back in 2003 people, including me, thought that this was a hack.  Now I'm writing a blog post to say "it was not a hack; it's explicitly using locks that is a hack."  I'm buying the idea of <a href="http://en.wikipedia.org/wiki/Software_transactional_memory#Composable_operations">composability.</a>)</p>

<p>From a practical point of view, I started looking seriously at
the University of Rochester STM (RSTM), a C++ library that has
been a focus of --- and a collection of results from --- recent
research.  One particularly representative paper is
<a href="http://www.cs.rochester.edu/u/spear/ppopp09.pdf">A
Comprehensive Strategy for Contention Management in Software
Transactional Memory</a> by Michael F. Spear, Luke Dalessandro,
Virendra J. Marathe and Michael L. Scott.</p>

<h2>Conclusion</h2>
<p>Taking these ideas and applying them in the context of an
implementation of a complex high-level language like Python comes
with its own challanges.  In this context, using PyPy makes sense
as both an experimentation platform and as a platform that is
recently gaining attention for its performance.  The alternatives
are unattractive: doing it in CPython for example would mean
globally rewriting the interpreter.  In PyPy instead, we write it
as a transformation that is applied systematically at translation-time.
Also, PyPy is a general platform for generating fast interpreters
for dynamic languages; the STM implementation in PyPy would work
out of the box for other language implementations as well, instead
of just for Python.</p>
<br>
<p><b>Update:</b>
<ul>
<li>This is mostly me (Armin Rigo) ranting aloud and trying experiments;
this post should not be confused as meaning that the whole PyPy team
will now spend the next years working on it full-time.
As I said it is orthogonal to the actual Python interpreter, and it is in
any case a feature that can be turned on or off during translation; I know
that in many or most use cases, people are more interested in getting a
fast PyPy rather than one which is twice as slow but scales well.
<li>Nothing I said is really new.  For proof, see
<a href="http://sabi.net/nriley/pubs/dls6-riley.pdf">Riley and Zilles (2006)</a>
as well as <a href="http://www.cs.auckland.ac.nz/~fuad/parpycan.pdf">Tabba (2010)</a> who both experimented with <i>Hardware</i> Transactional Memory, turning CPython or PyPy interpreter's GIL into start/end transactions, as I describe here.
</ul>
</div>
<div id='flattr_title_6513983438425039230' style='display: none;'>
We need Software Transactional Memory
</div>
<div class='post-share-buttons goog-inline-block'>
<script type='text/javascript'>  
          displayFlattrButton('6513983438425039230', 'http://morepypy.blogspot.co.uk/2011/08/we-need-software-transactional-memory.html', '');
        </script>
</div>
Posted by
<span class='fn'>Armin Rigo</span>
</span>
<span class='post-timestamp'>
at
<a class='timestamp-link' href='http://morepypy.blogspot.co.uk/2011/08/we-need-software-transactional-memory.html' rel='bookmark' title='permanent link'><abbr class='published' title='2011-08-23T13:53:00+02:00'>13:53</abbr></a>
</span>
<span class='post-comment-link'>
</span>
<span class='post-icons'>
<span class='item-control blog-admin pid-1181195972'>
<a href='http://www.blogger.com/post-edit.g?blogID=3971202189709462152&postID=6513983438425039230&from=pencil' title='Edit Post'>
<img alt='' class='icon-action' height='18' src='http://img2.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/>
</a>
</span>
</span>
<div class='post-share-buttons goog-inline-block'>
<a class='goog-inline-block share-button sb-email' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=6513983438425039230&target=email' target='_blank' title='Email This'><span class='share-button-link-text'>Email This</span></a><a class='goog-inline-block share-button sb-blog' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=6513983438425039230&target=blog' onclick='window.open(this.href, "_blank", "height=270,width=475"); return false;' target='_blank' title='BlogThis!'><span class='share-button-link-text'>BlogThis!</span></a><a class='goog-inline-block share-button sb-twitter' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=6513983438425039230&target=twitter' target='_blank' title='Share to Twitter'><span class='share-button-link-text'>Share to Twitter</span></a><a class='goog-inline-block share-button sb-facebook' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=6513983438425039230&target=facebook' onclick='window.open(this.href, "_blank", "height=430,width=640"); return false;' target='_blank' title='Share to Facebook'><span class='share-button-link-text'>Share to Facebook</span></a><a class='goog-inline-block share-button sb-pinterest' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=6513983438425039230&target=pinterest' target='_blank' title='Share to Pinterest'><span class='share-button-link-text'>Share to Pinterest</span></a><div class='goog-inline-block dummy-container'><g:plusone source='blogger:blog:plusone' href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html' size='medium' width='300' annotation='inline'/></div>
</div>
</div>
<div class='post-footer-line post-footer-line-2'><span class='post-labels'>
</span>
</div>
<div class='post-footer-line post-footer-line-3'><span class='post-backlinks post-comment-link'>
</span>
</div>
</div>
</div>
<div class='comments' id='comments'>
<a name='comments'></a>
<h4>37 comments:</h4>
<div id='Blog1_comments-block-wrapper'>
<dl class='avatar-comment-indent' id='comments-block'>
<dt class='comment-author ' id='c2413167444689638946'>
<a name='c2413167444689638946'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2413167444689638946'>
<p>
How to handle composability (&quot;with atomic&quot;) when something inside composed block turns out to make a system call? With explicit locking, this shouldn&#39;t be a problem.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314103207819#c2413167444689638946' title='comment permalink'>
August 23, 2011 at 2:40 PM
</a>
<span class='item-control blog-admin pid-76809540'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2413167444689638946' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8338135678673808956'>
<a name='c8338135678673808956'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/10994107691982145141" rel="nofollow" onclick="" class="avatar-hovercard" id="av-1-10994107691982145141"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="ajuc">

</a></span></div>
<a href='http://www.blogger.com/profile/10994107691982145141' rel='nofollow'>ajuc</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8338135678673808956'>
<p>
Re sys calls in transactions:<br /><br />In clojure it is solved by requiring that code in transaction is side effect free.<br /><br />You can tag code as having side effects by macro &quot;io!&quot; :<br /><br />(defn launch-missiles<br />&#8220;Launch attack on remote targets with everything we have.&#8221;<br />[]<br />(io!<br />(doseq [missile (all-silos)]<br />(fire missile))))<br /><br />Then if you try to execut this code in transaction clojure will complain, because you can&#39;t really rollback launching nuclear missiles :)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314107019032#c8338135678673808956' title='comment permalink'>
August 23, 2011 at 3:43 PM
</a>
<span class='item-control blog-admin pid-1472434374'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=8338135678673808956' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c2528779304023100167'>
<a name='c2528779304023100167'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/10994107691982145141" rel="nofollow" onclick="" class="avatar-hovercard" id="av-2-10994107691982145141"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="ajuc">

</a></span></div>
<a href='http://www.blogger.com/profile/10994107691982145141' rel='nofollow'>ajuc</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2528779304023100167'>
<p>
Ehh, I should&#39;ve thought more before posting.<br /><br />Code in transactions need not be side effect free - in fact in clojure side effects are the whole point of transactions. But this code should only change STM controlled variables, not outside world.<br /><br />And &quot;io!&quot; macro is for marking code that changes things outside of STM.<br /><br />Sorry for confusion.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314107362409#c2528779304023100167' title='comment permalink'>
August 23, 2011 at 3:49 PM
</a>
<span class='item-control blog-admin pid-1472434374'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2528779304023100167' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c219184611646737735'>
<a name='c219184611646737735'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-3-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-219184611646737735'>
<p>
Here are my current hacks in C, based on RSTM: https://bitbucket.org/arigo/arigo/raw/default/hack/stm/c , from the repo https://bitbucket.org/arigo/arigo .
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314107797302#c219184611646737735' title='comment permalink'>
August 23, 2011 at 3:56 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=219184611646737735' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c5883675089644735702'>
<a name='c5883675089644735702'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/04274984206279511399" rel="nofollow" onclick="" class="avatar-hovercard" id="av-4-04274984206279511399"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Thomas Schilling">

</a></span></div>
<a href='http://www.blogger.com/profile/04274984206279511399' rel='nofollow'>Thomas Schilling</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5883675089644735702'>
<p>
Implementing STM at a core level is certainly a nice research topic, but I wonder whether it&#39;s the best way forward for Python.<br /><br />STM works well in Haskell because it has the type system to enforce several constraints.  Also most data is immutable in Haskell, so threading is mostly safe by default.<br /><br />Most Python objects are mutable (by default), so users have to be very careful when using multi-threading.  STM gives you a nice, composable primitive to protect your critical sections, but it does not tell <b>where</b> your critical sections are.<br /><br />You dismiss multiprocessing because of serialization issues, but what about multiprocessing within the same process?  You have a VM already, so my guess would be that it wouldn&#39;t be that hard to implement software processes (a la Erlang).  Sure, using message passing may lead to a fair amount of copying, but I it seems to be much easier to implement and easier to use than shared-memory concurrency + STM.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314107818240#c5883675089644735702' title='comment permalink'>
August 23, 2011 at 3:56 PM
</a>
<span class='item-control blog-admin pid-278017577'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=5883675089644735702' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c7844308630289145107'>
<a name='c7844308630289145107'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-5-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7844308630289145107'>
<p>
@Thomas Schilling: I don&#39;t see how having a &quot;multiprocessing&quot; that uses the same process, rather than different processes, makes a difference.  In both cases you need to write your threading code specially and care about explicitly transferring objects via shared memory --- either to another OS thread in the same process, or to a different process altogether.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314109439585#c7844308630289145107' title='comment permalink'>
August 23, 2011 at 4:23 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7844308630289145107' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8697711460090759773'>
<a name='c8697711460090759773'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/17762358075557755436" rel="nofollow" onclick="" class="avatar-hovercard" id="av-6-17762358075557755436"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://2.bp.blogspot.com/_eJJgehXCsQ4/TE10UANSEKI/AAAAAAAAAIc/qVtc1CFUUAQ/S45/rd.png" title="illume">

<noscript><img src="http://2.bp.blogspot.com/_eJJgehXCsQ4/TE10UANSEKI/AAAAAAAAAIc/qVtc1CFUUAQ/S45/rd.png" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/17762358075557755436' rel='nofollow'>illume</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8697711460090759773'>
<p>
closures
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314111877440#c8697711460090759773' title='comment permalink'>
August 23, 2011 at 5:04 PM
</a>
<span class='item-control blog-admin pid-1228691345'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=8697711460090759773' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c4458303753132923233'>
<a name='c4458303753132923233'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://numbsafari.com" rel="nofollow" onclick=""><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Sam Wilson">

</a></span></div>
<a href='http://numbsafari.com' rel='nofollow'>Sam Wilson</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4458303753132923233'>
<p>
I&#39;m with illume... look at what Apple has done with blocks. This seems like a very efficient way forward.<br /><br />Separately, you are missing something about the Java-side.<br /><br />For many of the data structures in Java there are atomic and non-atomic versions. That is, when you are using a data structure on a single thread, you grab the non-atomic version. This way, you don&#39;t pay for the overhead of the locking. But, when you are sharing a data structure between threads, you use the atomic version. As a by-product of history, though it is a nice by-product, you usually get the atomic version by default. That is to say, you have to go looking for trouble by explicitly asking for the non-atomic version.<br /><br />By baking this into the language, you are forcing a single policy on all programs, rather than letting the programmer choose what policy is going to be best in that scenario. Either that, or they will be forced to put code guards all over the place.<br /><br />To me, it seems like the language/runtime should provide the most basic of atomic operations, and the run-time library on top should provide the policy. That&#39;s the Java approach, in a nutshell. It gives the programmer flexibility and keeps the core runtime simple and easier to optimize.<br /><br />Granted, you want a high-level language where the programmer doesn&#39;t make a lot of these decisions. So... looking at your own arguments... you are expecting an initial 10x performance hit relative to the current GIL-python approach, with hopes of getting it down to 2x performance... If that&#39;s the case, why not just stick with the GIL and have Python programmers take advantage of multiprocessing by creating co-operative programs using a message passing API. In some ways, it&#39;s a little more TAUP to do it that way, isn&#39;t it?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314113551057#c4458303753132923233' title='comment permalink'>
August 23, 2011 at 5:32 PM
</a>
<span class='item-control blog-admin pid-1090830464'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=4458303753132923233' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1944385877647011715'>
<a name='c1944385877647011715'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/03289731826123761949" rel="nofollow" onclick="" class="avatar-hovercard" id="av-8-03289731826123761949"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="nekto0n">

</a></span></div>
<a href='http://www.blogger.com/profile/03289731826123761949' rel='nofollow'>nekto0n</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1944385877647011715'>
<p>
What about replaying syscalls? Is it possible that such situation will happen?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314113834848#c1944385877647011715' title='comment permalink'>
August 23, 2011 at 5:37 PM
</a>
<span class='item-control blog-admin pid-701750760'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1944385877647011715' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c4182713227454616753'>
<a name='c4182713227454616753'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-9-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4182713227454616753'>
<p>
@Anonymous: this case can be handled on a case-by-case basis (e.g. special-casing &quot;prints&quot; to buffer), but it also has a general solution: we turn the transaction into an &quot;inevitable&quot; transaction, i.e. one which cannot fail.<br /><br />I already have support for this in my demo code, because it is needed to handle the cases where the nesting of the C program is such that setjmp/longjmp can no longer work.  The typical example is the RETURN_VALUE bytecode.  It starts a transaction, returns to the caller by popping off some C frames, then ends the transaction in the caller.  When we return from the C frame of the callee, in the middle of the transaction, we notice that we won&#39;t have the setjmp around any longer, so we are not allowed to abort and rollback any more.<br /><br />Inevitable transactions have the property of being &quot;a bit like&quot; a GIL in the sense that you can only have one in total, and other transactions cannot commit before it does.  In case of the RETURN_VALUE, it&#39;s a very short transaction so it shouldn&#39;t really be a problem.  For the case of a user-specified &quot;with atomic:&quot; block, it can make all the other threads pause.  Not ideal, but at least better than nothing...
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314114312863#c4182713227454616753' title='comment permalink'>
August 23, 2011 at 5:45 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=4182713227454616753' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c4289702079798383834'>
<a name='c4289702079798383834'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/12894665096195054783" rel="nofollow" onclick="" class="avatar-hovercard" id="av-10-12894665096195054783"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="TomV">

</a></span></div>
<a href='http://www.blogger.com/profile/12894665096195054783' rel='nofollow'>TomV</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4289702079798383834'>
<p>
Could you explain a bit more what PyPy currently does to prevent these kinds of problems?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314114568390#c4289702079798383834' title='comment permalink'>
August 23, 2011 at 5:49 PM
</a>
<span class='item-control blog-admin pid-40803967'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=4289702079798383834' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7974275952910874833'>
<a name='c7974275952910874833'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/03289731826123761949" rel="nofollow" onclick="" class="avatar-hovercard" id="av-11-03289731826123761949"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="nekto0n">

</a></span></div>
<a href='http://www.blogger.com/profile/03289731826123761949' rel='nofollow'>nekto0n</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7974275952910874833'>
<p>
@TomV PyPy uses GIL
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314114755523#c7974275952910874833' title='comment permalink'>
August 23, 2011 at 5:52 PM
</a>
<span class='item-control blog-admin pid-701750760'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7974275952910874833' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c7913053725739157011'>
<a name='c7913053725739157011'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-12-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7913053725739157011'>
<p>
@Sam Wilson: as you know, the PyPy approach is to sacrifice nothing to performance for the user, and get reasonably good (if not exactly Java-level) performance anyway :-)<br /><br />I should also mention generally that for some programs that I have in mind, using a message-passing API would be a complete rewrite (if it is really possible at all), whereas &quot;just&quot; making them multithreaded can be done.  The &quot;translate.py&quot; of PyPy falls into this category.  It is a program that heavily use objects within objects within objects in a big non-nicely-separable &quot;mess&quot;, and I would not dare to think about how to send parts of this object graph over a messaging API and get back localized updates.<br /><br />Of course there are also other use cases where you can naturally get a model that plays nicely with message passing.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314114893070#c7913053725739157011' title='comment permalink'>
August 23, 2011 at 5:54 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7913053725739157011' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c104891792177726745'>
<a name='c104891792177726745'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-13-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-104891792177726745'>
<p>
@nekto0n: that&#39;s not really possible in general, because you need to have the return value of the syscall to decide what to do next, which normally means that you have to really do the syscall.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314115403184#c104891792177726745' title='comment permalink'>
August 23, 2011 at 6:03 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=104891792177726745' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c2864503186023382210'>
<a name='c2864503186023382210'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/03289731826123761949" rel="nofollow" onclick="" class="avatar-hovercard" id="av-14-03289731826123761949"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="nekto0n">

</a></span></div>
<a href='http://www.blogger.com/profile/03289731826123761949' rel='nofollow'>nekto0n</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2864503186023382210'>
<p>
@armin please describe what will happen if 2 threads call write() on single socket object? what exactly should/will happen when iterpreter begins to dispatch CALL bytecode?<br /><br />I think, it&#39;s the most questionable part of STM approach.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314115936144#c2864503186023382210' title='comment permalink'>
August 23, 2011 at 6:12 PM
</a>
<span class='item-control blog-admin pid-701750760'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2864503186023382210' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6034340347554293027'>
<a name='c6034340347554293027'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Rodrigo Ara&uacute;jo">

</span></div>
Rodrigo Araújo
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6034340347554293027'>
<p>
some change in my code<br /><br />http://paste.pocoo.org/show/463085/
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314117219585#c6034340347554293027' title='comment permalink'>
August 23, 2011 at 6:33 PM
</a>
<span class='item-control blog-admin pid-1203745879'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6034340347554293027' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c1522836423051094915'>
<a name='c1522836423051094915'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-16-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1522836423051094915'>
<p>
@nekto0n: nothing particular.  The two threads will run the calls in parallel, just like CPython, which calls the send() function without any GIL acquired.  What exactly occurs depends on the OS and not on the language.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314117256418#c1522836423051094915' title='comment permalink'>
August 23, 2011 at 6:34 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1522836423051094915' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7048529467948214143'>
<a name='c7048529467948214143'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7048529467948214143'>
<p>
I dissagree to the fact that threads whose transactions would be invalidated, are stealing CPU timeshares from other processes / threads.<br /><br />STM is an &#39;egoist&#39; aproach
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314117421194#c7048529467948214143' title='comment permalink'>
August 23, 2011 at 6:37 PM
</a>
<span class='item-control blog-admin pid-1651702435'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7048529467948214143' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1431667169635265661'>
<a name='c1431667169635265661'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/05385916050136636671" rel="nofollow" onclick="" class="avatar-hovercard" id="av-18-05385916050136636671"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://4.bp.blogspot.com/_O0zBnKef3zk/SwwWqjO3ldI/AAAAAAAAAXI/3P7wg3z8RGw/S45/2.jpg" title="kost BebiX">

<noscript><img src="http://4.bp.blogspot.com/_O0zBnKef3zk/SwwWqjO3ldI/AAAAAAAAAXI/3P7wg3z8RGw/S45/2.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/05385916050136636671' rel='nofollow'>kost BebiX</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1431667169635265661'>
<p>
I know this might sound stupid, but is it possible to enable/disable STM on the fly? Like to enable it only for several threads involved.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314129265551#c1431667169635265661' title='comment permalink'>
August 23, 2011 at 9:54 PM
</a>
<span class='item-control blog-admin pid-645320815'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1431667169635265661' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6504810880618934457'>
<a name='c6504810880618934457'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/05385916050136636671" rel="nofollow" onclick="" class="avatar-hovercard" id="av-19-05385916050136636671"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://4.bp.blogspot.com/_O0zBnKef3zk/SwwWqjO3ldI/AAAAAAAAAXI/3P7wg3z8RGw/S45/2.jpg" title="kost BebiX">

<noscript><img src="http://4.bp.blogspot.com/_O0zBnKef3zk/SwwWqjO3ldI/AAAAAAAAAXI/3P7wg3z8RGw/S45/2.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/05385916050136636671' rel='nofollow'>kost BebiX</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6504810880618934457'>
<p>
Or just not open transaction when there&#39;s only 1 thread?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314129318131#c6504810880618934457' title='comment permalink'>
August 23, 2011 at 9:55 PM
</a>
<span class='item-control blog-admin pid-645320815'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6504810880618934457' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3067222387706714551'>
<a name='c3067222387706714551'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/09368106766743622124" rel="nofollow" onclick="" class="avatar-hovercard" id="av-20-09368106766743622124"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Albert Zeyer">

</a></span></div>
<a href='http://www.blogger.com/profile/09368106766743622124' rel='nofollow'>Albert Zeyer</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3067222387706714551'>
<p>
Hi,<br /><br />I thought a bit about what you said about Jython. Mostly, I was thinking about a way to do this automatically instead of making it explicitly.<br /><br />I came up with this first draft: https://github.com/albertz/automatic_object_locking<br /><br />This will obviously also be very slow but it should be possible to optimize this well (similarly to STM). And I think it is much easier than STM.<br /><br />-Albert
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314135789877#c3067222387706714551' title='comment permalink'>
August 23, 2011 at 11:43 PM
</a>
<span class='item-control blog-admin pid-494361309'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3067222387706714551' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c4022730260305278833'>
<a name='c4022730260305278833'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4022730260305278833'>
<p>
Funny to see how Python eats itself like an Ouroboros. Wrong design decisions that made concurrency almost impossible, dirty hacks (&quot;dirty&quot; compared to, for example, Erlang&#39;s approach to SMP &#8212; almost linear scalability with a number of cores with 10-20% static overhead thanks to locks) that PyPy team are trying to do to solve problems introduced by Guido&#39;s ignorance, and a lot of Python &quot;programmers&quot; that don&#39;t understand what SMP is. Python is a ghetto, for real.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314167956155#c4022730260305278833' title='comment permalink'>
August 24, 2011 at 8:39 AM
</a>
<span class='item-control blog-admin pid-123613672'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=4022730260305278833' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6664269580343846798'>
<a name='c6664269580343846798'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/16075937464283403018" rel="nofollow" onclick="" class="avatar-hovercard" id="av-22-16075937464283403018"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Paul Harrison">

</a></span></div>
<a href='http://www.blogger.com/profile/16075937464283403018' rel='nofollow'>Paul Harrison</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6664269580343846798'>
<p>
Seems like it should be possible to guarantee performance not much worse than with a GIL.<br /><br />Am I right in thinking there is a locked section where changes are written to memory? The execution before this is effectively just some speculative computation to to speed up the locked section. If it turns out there&#39;s an inconsistency, just execute the locked section as you would normally. If the speculative computation is failing most of the time or is slow, switch to not doing it -- and we are back to GIL performance.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314168666713#c6664269580343846798' title='comment permalink'>
August 24, 2011 at 8:51 AM
</a>
<span class='item-control blog-admin pid-1922662292'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6664269580343846798' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c475038430560503263'>
<a name='c475038430560503263'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-23-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-475038430560503263'>
<p>
@all: please come to the #pypy irc channel on irc.freenode.net if you want to discuss this further.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314178150165#c475038430560503263' title='comment permalink'>
August 24, 2011 at 11:29 AM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=475038430560503263' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c2878747439923990242'>
<a name='c2878747439923990242'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/04274984206279511399" rel="nofollow" onclick="" class="avatar-hovercard" id="av-24-04274984206279511399"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Thomas Schilling">

</a></span></div>
<a href='http://www.blogger.com/profile/04274984206279511399' rel='nofollow'>Thomas Schilling</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2878747439923990242'>
<p>
@Armin: Each in-memory process would use its own part of the heap so there would be no locking necessary except during message sending.  You also don&#39;t need to have a 1-to-1 mapping of OS threads to processes.  You could schedule N processes onto M OS threads (preferably chosen to match the number of CPU cores).<br /><br />Of course, if you don&#39;t want a message-passing model (as you mentioned in another comment) then fine.<br /><br />My argument is just that: STM is difficult to implement, difficult to make fast, and it still isn&#39;t that easy to use.  A message passing model is much easier to implement and easier to use for end users.  (You can still get deadlocks, but you could provide libraries for standard communication patterns which you only have to get right once, like Erlang&#39;s OTP.)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314183671480#c2878747439923990242' title='comment permalink'>
August 24, 2011 at 1:01 PM
</a>
<span class='item-control blog-admin pid-278017577'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2878747439923990242' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8328783528921012438'>
<a name='c8328783528921012438'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/00398184141815003668" rel="nofollow" onclick="" class="avatar-hovercard" id="av-25-00398184141815003668"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="&#9883;">

</a></span></div>
<a href='http://www.blogger.com/profile/00398184141815003668' rel='nofollow'>&#9883;</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8328783528921012438'>
<p>
I think that there is some confusion here about what the underlying problem that you are trying to solve is.<br /><br />The underlying (fundamental) problem that transactional memory as a method to replace GIL in Python is trying to solve is: automatic parallelization. That *is* hard.<br /><br />Mediocre implementations of transactional memory are trivial to implement. Almost anybody can do it. Of course, the performance will be horrible.<br /><br />If we stick to the idea about the underlying problem (automatic parallelization) and keep it in our minds while thinking, it is clear and utterly obvious that *any* implementation of transactional memory which is slower than serial execution is simply missing the target. The target is, obviously, to run the program faster than serial execution. Otherwise, it would be totally pointless.<br /><br />Based on this reasoning, it is an *obvious* conclusion that a transactional memory implementation simply cannot be allowed to result in lower performance than serial execution of the code. Allowing lower performance would be completely irrational.<br /><br />We are humans, not animals. Rationality is our distinctive feature. We have to try to follow rationality.<br /><br />In light of this, saying that &quot;It is OK for transactional memory to result in 2x slowdown&quot; is irrational. I will write it one more time: accepting 2x slowdown is irrational.<br /><br />Now, it is crucial to note that there are various kinds of performance measurements. And it is OK to slow down one performance indicator while boosting another performance indicator. For example, in web server environment, it is OK to slow down the delivery of individual web pages by a factor 1.3 - while boosting the number of requests per second by 2.3. That is *rational* and perfectly OK. Also, 3x developer productivity boost would be OK.<br /><br />Following this example, if transactional memory is allowed to slow down performance of the program (compared to serial execution) by 2x, a person who follows rationally would immediately be drawn to seek for the evidence of a greater-than-2x performance boost in another area of the program.<br /><br />Omitting developer productivity, how are the PyPy developers going to deliver the *mandatory* greater-than-2x performance boost (in some area) without actually solving the underlying hard problems requiring hard-core code analysis?<br /><br />If PyPy&#39;s transactional memory implementation would serialize calls to the Linux kernel (because it is hard to emulate them in user-space), then this alone would prevent some programs to achieve the more-than-2x performance boost. This is because it is impossible to boost program performance (in some areas, given a particular performance indicator) unless the modified program is allowed to call kernel functions out-of-order or in parallel.<br /><br />-----<br /><br />Note: I am *not* saying that PyPy should give up. I am just trying to note that you do not seem to know what you are doing. But I may be wrong.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314189541103#c8328783528921012438' title='comment permalink'>
August 24, 2011 at 2:39 PM
</a>
<span class='item-control blog-admin pid-620121459'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=8328783528921012438' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c3607630193498235800'>
<a name='c3607630193498235800'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-26-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3607630193498235800'>
<p>
Of course the sentence &quot;It is OK for transactional memory to result in 2x slowdown&quot; was meant &quot;on one thread&quot;.  As soon as your program uses more than 2 threads, on a more-than-2-CPUs machine, then you win.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314201047761#c3607630193498235800' title='comment permalink'>
August 24, 2011 at 5:50 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3607630193498235800' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1231623510528316211'>
<a name='c1231623510528316211'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/00398184141815003668" rel="nofollow" onclick="" class="avatar-hovercard" id="av-27-00398184141815003668"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="&#9883;">

</a></span></div>
<a href='http://www.blogger.com/profile/00398184141815003668' rel='nofollow'>&#9883;</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1231623510528316211'>
<p>
I read &quot;Tabba (2010)&quot; (Tabba: Adding Concurrency in Python Using a Commercial Processor&#8217;s Hardware Transactional Memory Support) just now.<br /><br /><br />The article:<br /><br />- benchmark &quot;iterate&quot;: This function is not making calls to other functions. The authors are independently running 16 instances of the &quot;iterate&quot; function on a 16-core CPU using 16 threads. The speedup in respect to unmodified CPython is 7x. The slowdown in respect to 16 CPython processes is 2.2x.<br /><br />- benchmark &quot;count&quot;: This is similar to &quot;iterate&quot;. The speedup in respect to unmodified CPython is 4.5x. The slowdown in respect to 16 CPython processes is 3.5x.<br /><br />- benchmark &quot;pystone&quot;: This function is making calls to other functions. 16 instances of the &quot;pystone&quot; function on a 16-core CPU using 16 threads. The speedup in respect to unmodified CPython is 0.9x. The slowdown in respect to 16 CPython processes is 17x.<br /><br /><br />My analysis:<br /><br />- iterate: The fact that N instances of this function can run in parallel without any interference can be determined easily. The algorithm to determine this is trivial. (Not to mention, the pointless loop in the function can be replaced by a NOP in a dead-code elimination pass).<br /><br />- count: same as &quot;iterate&quot;.<br /><br />- pystone: It is not trivial to determine whether multiple instances can run in parallel. So, it should presumably run single-threaded.<br /><br />- The article is *not* mentioning any real problem that was solved by TM in the case of &quot;iterate&quot;, &quot;count&quot; or &quot;pystone&quot;. That is logical, since the truth is that there is no real problem to solve here. The benchmark functions can be trivially run in 16 CPython Linux processes - anybody can do that (even your grandma).<br /><br /><br />My summary:<br /><br />- In case of the two functions for which it *can* be trivially determined whether their instances can run in parallel, the TM approach results in a 2x-3x slowdown compared to the most basic auto-parallelization algorithm.<br /><br />- In case of the function for which it *cannot* be trivially determined whether multiple instances can run in parallel, the TM approach running on 4-16 threads achieved 90% (loss of 10%) of the speed of single-threaded CPython without TM. On 1 thread, the TM approach is 2.1x slower.<br /><br /><br />Bottom line:<br /><br />Call me crazy, but my conclusion from this article is that TM (at least the TM approach from the article) is not working at all.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314202822247#c1231623510528316211' title='comment permalink'>
August 24, 2011 at 6:20 PM
</a>
<span class='item-control blog-admin pid-620121459'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1231623510528316211' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c746133189326067689'>
<a name='c746133189326067689'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.third-bit.com" rel="nofollow" onclick=""><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Greg Wilson">

</a></span></div>
<a href='http://www.third-bit.com' rel='nofollow'>Greg Wilson</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-746133189326067689'>
<p>
Cool to see this happening. What&#39;s also cool is the result reported in Rossbach et al&#39;s study (http://www.neverworkintheory.org/?p=122): novices using STM did <i>better</i> in simple programming problems than students using traditional mechanisms, even though they thought they had done <i>worse</i>.  &quot;Baroque syntax&quot; may be part of the problem; I&#39;m sure the paper&#39;s authors would be happy to chat.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314204193117#c746133189326067689' title='comment permalink'>
August 24, 2011 at 6:43 PM
</a>
<span class='item-control blog-admin pid-817735008'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=746133189326067689' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c5506709174254681028'>
<a name='c5506709174254681028'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/08514218440159967492" rel="nofollow" onclick="" class="avatar-hovercard" id="av-29-08514218440159967492"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="la timos">

</a></span></div>
<a href='http://www.blogger.com/profile/08514218440159967492' rel='nofollow'>la timos</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5506709174254681028'>
<p>
&#9883;, you&#39;re missing a very important bit of the paper. In it, the authors say, that the Rock hardware only holds 256 bytes of write-buffer content, while Riley and Zilles&#185; determined the average write-buffer size needed for transactions to not fail prematurely would be &quot;less than 640 bytes&quot;, which is almost three times as much as Rock offers.<br /><br />Thus, the big slowdown that the pystone benchmark experiences could be caused by the shortcomings of the TM built into Rock.<br /><br />I do have to agree, though, that the &quot;benchmarks&quot; used in the paper are not very satisfactory. However, the magical &quot;simple parallelization algorithm&quot; you summon in your comment would break down quite easily shortly after the complexity of the situation increases by just a bit, would it not?<br /><br />&#185; I only briefly glanced over the paper, so if anyone read it more thoroughly, they can feel free to correct me.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314449548228#c5506709174254681028' title='comment permalink'>
August 27, 2011 at 2:52 PM
</a>
<span class='item-control blog-admin pid-62333720'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=5506709174254681028' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c2404362792346927299'>
<a name='c2404362792346927299'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/14180694986659591222" rel="nofollow" onclick="" class="avatar-hovercard" id="av-30-14180694986659591222"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://3.bp.blogspot.com/_SU5o9S_INvk/TL0wVGkT-FI/AAAAAAAAAa0/E_39oDkjWM8/S45/avatar22716_2.gif" title="Mystilleef">

<noscript><img src="http://3.bp.blogspot.com/_SU5o9S_INvk/TL0wVGkT-FI/AAAAAAAAAa0/E_39oDkjWM8/S45/avatar22716_2.gif" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/14180694986659591222' rel='nofollow'>Mystilleef</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2404362792346927299'>
<p>
I thought Erlang successfully solved this problem years ago? And I don&#39;t think anything scales better than it. So why aren&#39;t we just copying them? Message passing, where each thread or process share absolutely nothing, is the sanest and safest way to do concurrent and multi-threaded programming. I mean, you don&#39;t even have to worry about locking! STM always seemed complicated to me.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314486095495#c2404362792346927299' title='comment permalink'>
August 28, 2011 at 1:01 AM
</a>
<span class='item-control blog-admin pid-530723552'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2404362792346927299' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7195777204013130530'>
<a name='c7195777204013130530'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7195777204013130530'>
<p>
is there a branch we can check this out?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314669643224#c7195777204013130530' title='comment permalink'>
August 30, 2011 at 4:00 AM
</a>
<span class='item-control blog-admin pid-1064704441'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7195777204013130530' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7137530463798478310'>
<a name='c7137530463798478310'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/17437556881221099403" rel="nofollow" onclick="" class="avatar-hovercard" id="av-32-17437556881221099403"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="squeaky_pl">

</a></span></div>
<a href='http://www.blogger.com/profile/17437556881221099403' rel='nofollow'>squeaky_pl</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7137530463798478310'>
<p>
Hardware transactional memory anyone? http://arstechnica.com/hardware/news/2011/08/ibms-new-transactional-memory-make-or-break-time-for-multithreaded-revolution.ars
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1314869492847#c7137530463798478310' title='comment permalink'>
September 1, 2011 at 11:31 AM
</a>
<span class='item-control blog-admin pid-73187604'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7137530463798478310' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c6853320227030958680'>
<a name='c6853320227030958680'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-33-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6853320227030958680'>
<p>
@squeaky_pl: thanks for the link.  In some way researching this is ultimately doomed: either transactional memory doesn&#39;t work, or it does and in 5 or 10 years all CPUs will have good hardware support and will be able to run existing software like CPython with minor changes.  :-)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1316628637456#c6853320227030958680' title='comment permalink'>
September 21, 2011 at 8:10 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6853320227030958680' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3941250212293457365'>
<a name='c3941250212293457365'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="staila">

</span></div>
staila
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3941250212293457365'>
<p>
We are actually working on implementing this directly into <a href="http://blog.staila.com/?p=81" rel="nofollow">stailaOS</a>.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1320298274052#c3941250212293457365' title='comment permalink'>
November 3, 2011 at 6:31 AM
</a>
<span class='item-control blog-admin pid-705247959'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3941250212293457365' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1824199823810479371'>
<a name='c1824199823810479371'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/13558027109535076027" rel="nofollow" onclick="" class="avatar-hovercard" id="av-35-13558027109535076027"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="//lh3.googleusercontent.com/-RSQCTOzHeZo/AAAAAAAAAAI/AAAAAAAAABU/BnhN5DqXstY/s512-c/photo.jpg" title="Rene Nejsum">

<noscript><img src="//lh3.googleusercontent.com/-RSQCTOzHeZo/AAAAAAAAAAI/AAAAAAAAABU/BnhN5DqXstY/s512-c/photo.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/13558027109535076027' rel='nofollow'>Rene Nejsum</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1824199823810479371'>
<p>
@Mystilleef agree 100%
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1336814663335#c1824199823810479371' title='comment permalink'>
May 12, 2012 at 11:24 AM
</a>
<span class='item-control blog-admin pid-1186486995'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1824199823810479371' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6697447537028188824'>
<a name='c6697447537028188824'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/13334191191530764798" rel="nofollow" onclick="" class="avatar-hovercard" id="av-36-13334191191530764798"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Juanca">

</a></span></div>
<a href='http://www.blogger.com/profile/13334191191530764798' rel='nofollow'>Juanca</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6697447537028188824'>
<p>
The high-level semantics that the Python VM provides through the GIL are perfect for most programs, and for most programmer&#39;s knowledge about concurrency.<br /><br />What is the purpose of going after the GIL? <br /><br />If it&#39;s just a performance boost on multiple cores, then an GIOL (global IO lock) implemented on the VM, as the GIL is, should be considered. The VM could run several OS threads blocking them on IO and releasing GIL.<br /><br />If the purpose is to make concurrent programming easy and correct, it can be proven that it <b>is not possible</b>.<br /><br />Yet, there are alternatives that don&#39;t alter the language or the semantics that can be explored. <br /><br />Erlang-style message passing can be provided through object proxies implemented on top or beneath the VM, so the threads/processes can even run on different computers.<br /><br />In short, an Actor model is much preferable to a shared-memory one.<br /><br />http://en.wikipedia.org/wiki/Actor_model
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html?showComment=1341524553803#c6697447537028188824' title='comment permalink'>
July 5, 2012 at 11:42 PM
</a>
<span class='item-control blog-admin pid-1925607756'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6697447537028188824' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
</dl>
</div>
<p class='comment-footer'>
<a href='http://www.blogger.com/comment.g?blogID=3971202189709462152&amp;postID=6513983438425039230' onclick=''>Post a Comment</a>
</p>
<div id='backlinks-container'>
<div id='Blog1_backlinks-container'>
<a name='links'></a><h4>
</h4>
<p class='comment-footer'>
<a class='comment-link' href='' id='Blog1_backlinks-create-link' target='_blank'>
</a>
</p>
</div>
</div>
</div>
</div>

        </div></div>
      
<!-- google_ad_section_end -->
</div>
<div class='blog-pager' id='blog-pager'>
<span id='blog-pager-newer-link'>
<a class='blog-pager-newer-link' href='http://morepypy.blogspot.co.uk/2011/08/wrapping-c-libraries-with-reflection.html' id='Blog1_blog-pager-newer-link' title='Newer Post'>Newer Post</a>
</span>
<span id='blog-pager-older-link'>
<a class='blog-pager-older-link' href='http://morepypy.blogspot.co.uk/2011/08/pypy-16-kickass-panda.html' id='Blog1_blog-pager-older-link' title='Older Post'>Older Post</a>
</span>
<a class='home-link' href='http://morepypy.blogspot.co.uk/'>Home</a>
</div>
<div class='clear'></div>
<div class='post-feeds'>
<div class='feed-links'>
Subscribe to:
<a class='feed-link' href='http://morepypy.blogspot.com/feeds/6513983438425039230/comments/default' target='_blank' type='application/atom+xml'>Post Comments (Atom)</a>
</div>
</div>
<script type="text/javascript">window.___gcfg = {'lang': 'en'};</script>
</div></div>
</div>
</div>
<div class='column-left-outer'>
<div class='column-left-inner'>
<aside>
<div class='sidebar section' id='sidebar-left-1'><div class='widget LinkList' id='LinkList1'>
<h2>Links of Interest</h2>
<div class='widget-content'>
<ul>
<li><a href='http://pypy.org/'>PyPy Homepage</a></li>
<li><a href='http://doc.pypy.org/'>Dev Documentation</a></li>
<li><a href='http://mail.python.org/mailman/listinfo/pypy-dev'>Mailing List</a></li>
</ul>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=LinkList&widgetId=LinkList1&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("LinkList1"));' target='configLinkList1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget HTML' id='HTML2'>
<h2 class='title'>Donate</h2>
<div class='widget-content'>
<a href="http://pypy.org/py3donate.html">Donation page</a>

<!--

<script type="text/javascript">
function validateAmount(amount){
       if(amount.value.match( /^[0-9]+(\.([0-9]+))?$/)){
               return true;
       }else{
               alert('You must enter a valid donation.');
               amount.focus();
               return false;
       }
}
</script>
<form action="https://checkout.google.com/cws/v2/Donations/622836985124940/checkoutForm" id="BB_BuyButtonForm" method="post" name="BB_BuyButtonForm" onsubmit="return validateAmount(this.item_price_1)" target="_top">
   <input name="item_name_1" type="hidden" value="PyPy Directed Donation via Software Freedom Conservancy, Inc."/>
   <input name="item_description_1" type="hidden" value="This is a donation to the Software Freedom Conservancy, Inc. The donation will be directed for the PyPy project."/>
   <input name="item_quantity_1" type="hidden" value="1"/>
   <input name="item_currency_1" type="hidden" value="USD"/>
   <input name="item_is_modifiable_1" type="hidden" value="true"/>
   <input name="item_min_price_1" type="hidden" value="5.0"/>
   <input name="item_max_price_1" type="hidden" value="25000.0"/>
   <input name="_charset_" type="hidden" value="utf-8"/>
   <table cellpadding="5" cellspacing="0" width="1%">
       <tr>
           <td align="left" nowrap="nowrap" width="1%">&#x24; <input id="item_price_1" name="item_price_1" onfocus="this.style.color='black'; this.value='';" size="11" style="color:grey;" type="text" value="Enter Amount"/>
           </td>
       </tr>
       <tr>
           <td align="left" width="1%">
               <input alt="Donate" src="https://checkout.google.com/buttons/donateNow.gif?merchant_id=622836985124940&amp;w=115&amp;h=50&amp;style=white&amp;variant=text&amp;loc=en_US" type="image"/>
           </td>
       </tr>
   </table>
</form>

<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="J268ZTLRE2BW8" />
<input type="image" src="https://www.paypal.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!" />
<img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1" />
</form>
-->
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=HTML&widgetId=HTML2&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML2"));' target='configHTML2' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div><div class='widget BlogArchive' id='BlogArchive1'>
<h2>Blog Archive</h2>
<div class='widget-content'>
<div id='ArchiveList'>
<div id='BlogArchive1_ArchiveList'>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2014-01-01T00:00:00%2B01:00&amp;updated-max=2015-01-01T00:00:00%2B01:00&amp;max-results=12'>2014</a>
<span class='post-count' dir='ltr'>(12)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2013-01-01T00:00:00%2B01:00&amp;updated-max=2014-01-01T00:00:00%2B01:00&amp;max-results=46'>2013</a>
<span class='post-count' dir='ltr'>(46)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(8)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2012-01-01T00:00:00%2B01:00&amp;updated-max=2013-01-01T00:00:00%2B01:00&amp;max-results=44'>2012</a>
<span class='post-count' dir='ltr'>(44)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate expanded'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy toggle-open'>&#9660;&#160;</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2011-01-01T00:00:00%2B01:00&amp;updated-max=2012-01-01T00:00:00%2B01:00&amp;max-results=43'>2011</a>
<span class='post-count' dir='ltr'>(43)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate expanded'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy toggle-open'>&#9660;&#160;</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(5)</span>
<ul class='posts'>
<li><a href='http://morepypy.blogspot.co.uk/2011/08/wrapping-c-libraries-with-reflection.html'>Wrapping C++ Libraries with Reflection &#8212; Status Re...</a></li>
<li><a href='http://morepypy.blogspot.co.uk/2011/08/we-need-software-transactional-memory.html'>We need Software Transactional Memory</a></li>
<li><a href='http://morepypy.blogspot.co.uk/2011/08/pypy-16-kickass-panda.html'>PyPy 1.6 - kickass panda</a></li>
<li><a href='http://morepypy.blogspot.co.uk/2011/08/visualization-of-jitted-code.html'>Visualization of JITted code</a></li>
<li><a href='http://morepypy.blogspot.co.uk/2011/08/pypy-is-faster-than-c-again-string.html'>PyPy is faster than C, again: string formatting</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2010-01-01T00:00:00%2B01:00&amp;updated-max=2011-01-01T00:00:00%2B01:00&amp;max-results=44'>2010</a>
<span class='post-count' dir='ltr'>(44)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2009-01-01T00:00:00%2B01:00&amp;updated-max=2010-01-01T00:00:00%2B01:00&amp;max-results=38'>2009</a>
<span class='post-count' dir='ltr'>(38)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2008-01-01T00:00:00%2B01:00&amp;updated-max=2009-01-01T00:00:00%2B01:00&amp;max-results=50'>2008</a>
<span class='post-count' dir='ltr'>(62)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(10)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(8)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2007-01-01T00:00:00%2B01:00&amp;updated-max=2008-01-01T00:00:00%2B01:00&amp;max-results=19'>2007</a>
<span class='post-count' dir='ltr'>(19)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2007_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2007_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2007_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
</li>
</ul>
</div>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=BlogArchive&widgetId=BlogArchive1&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("BlogArchive1"));' target='configBlogArchive1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget Profile' id='Profile1'>
<h2>Contributors</h2>
<div class='widget-content'>
<ul>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/01704836367815055402' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Brian Kearns</a></li>
<li><a class='profile-name-link g-profile' href='https://plus.google.com/105620569112540575905' style='background-image: url(//www.google.com/images/icons/ui/gprofile_button-16.png);'>Remi Meier</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/00985924698593515074' style='background-image: url(//www.blogger.com/img/logo-16.png);'>holger krekel</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/06300515270104686574' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Armin Rigo</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/14054821112394577330' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Alex</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/07336549270776418081' style='background-image: url(//www.blogger.com/img/logo-16.png);'>mattip</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/17017456817083804792' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Antonio Cuni</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/08077054122516411452' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Samuele Pedroni</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/15466911074154154640' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Hakan Ardo</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/08851437269223332169' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Alexander Schremmer</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/13855081749436495258' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Romain Guillebert</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/00518922641059511014' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Carl Friedrich Bolz</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/05365013582304921306' style='background-image: url(//www.blogger.com/img/logo-16.png);'>David Schneider</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/11410841070239382771' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Maciej Fijalkowski</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/06229713779852499022' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Michael Foord</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/07891333377712029026' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Wim Lavrijsen</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/06955536323236904839' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Benjamin</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/09838979615980113137' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Philip Jenvey</a></li>
</ul>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=Profile&widgetId=Profile1&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("Profile1"));' target='configProfile1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget HTML' id='HTML1'>
<h2 class='title'>Subscribe Now</h2>
<div class='widget-content'>
<a 
href="http://feeds.feedburner.com/PyPyStatusBlog" rel="alternate" title="Subscribe to the newsfeed" type="application/rss+xml"><img alt="" style="border:0" src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png"/></a><a href="http://feeds.feedburner.com/PyPyStatusBlog" rel="alternate" title="Subscribe to my feed" type="application/rss+xml"> Subscribe in a reader</a>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=HTML&widgetId=HTML1&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML1"));' target='configHTML1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div><div class='widget HTML' id='HTML3'>
<h2 class='title'>Subscriber Count</h2>
<div class='widget-content'>
<p><a href="http://feeds.feedburner.com/PyPyStatusBlog"><img width="88" style="border:0" alt="" src="http://feeds.feedburner.com/~fc/PyPyStatusBlog?bg=FF9900&amp;fg=000000&amp;anim=0" height="26"/></a></p>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=HTML&widgetId=HTML3&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML3"));' target='configHTML3' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div><div class='widget HTML' id='HTML4'>
<h2 class='title'>Google Analytics</h2>
<div class='widget-content'>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-7778406-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=HTML&widgetId=HTML4&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML4"));' target='configHTML4' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div></div>
<table border='0' cellpadding='0' cellspacing='0' class='section-columns columns-2'>
<tbody>
<tr>
<td class='first columns-cell'>
<div class='sidebar section' id='sidebar-left-2-1'></div>
</td>
<td class='columns-cell'>
<div class='sidebar section' id='sidebar-left-2-2'></div>
</td>
</tr>
</tbody>
</table>
<div class='sidebar section' id='sidebar-left-3'></div>
</aside>
</div>
</div>
<div class='column-right-outer'>
<div class='column-right-inner'>
<aside>
</aside>
</div>
</div>
</div>
<div style='clear: both'></div>
<!-- columns -->
</div>
<!-- main -->
</div>
</div>
<div class='main-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<footer>
<div class='footer-outer'>
<div class='footer-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left footer-fauxborder-left'>
<div class='fauxborder-right footer-fauxborder-right'></div>
<div class='region-inner footer-inner'>
<div class='foot section' id='footer-1'></div>
<table border='0' cellpadding='0' cellspacing='0' class='section-columns columns-2'>
<tbody>
<tr>
<td class='first columns-cell'>
<div class='foot section' id='footer-2-1'></div>
</td>
<td class='columns-cell'>
<div class='foot section' id='footer-2-2'></div>
</td>
</tr>
</tbody>
</table>
<!-- outside of the include in order to lock Attribution widget -->
<div class='foot section' id='footer-3'><div class='widget Attribution' id='Attribution1'>
<div class='widget-content' style='text-align: center;'>
Powered by <a href='http://www.blogger.com' target='_blank'>Blogger</a>.
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=Attribution&widgetId=Attribution1&action=editWidget&sectionId=footer-3' onclick='return _WidgetManager._PopupConfig(document.getElementById("Attribution1"));' target='configAttribution1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div></div>
</div>
</div>
<div class='footer-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</footer>
<!-- content -->
</div>
</div>
<div class='content-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</div>
<script type='text/javascript'>
    window.setTimeout(function() {
        document.body.className = document.body.className.replace('loading', '');
      }, 10);
  </script>
<script type='text/javascript'>
  // http://stackoverflow.com/questions/3484924/javascript-using-flattr-api-how-to-wait-until-api-is-loaded
  function loadFlattr() {
    if(typeof(FlattrLoader) == "undefined")
        setTimeout(loadFlattr, 100);
    else
        FlattrLoader.setup(); 
  }
  loadFlattr();
</script>
<script type="text/javascript">
if (window.jstiming) window.jstiming.load.tick('widgetJsBefore');
</script><script type="text/javascript" src="https://www.blogger.com/static/v1/widgets/3401484092-widgets.js"></script>
<script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script>
<script type='text/javascript'>
if (typeof(BLOG_attachCsiOnload) != 'undefined' && BLOG_attachCsiOnload != null) { window['blogger_templates_experiment_id'] = "templatesV2";window['blogger_blog_id'] = '3971202189709462152';BLOG_attachCsiOnload('item_'); }_WidgetManager._Init('//www.blogger.com/rearrange?blogID\x3d3971202189709462152','//morepypy.blogspot.co.uk/2011/08/we-need-software-transactional-memory.html','3971202189709462152');
_WidgetManager._SetDataContext([{'name': 'blog', 'data': {'blogId': '3971202189709462152', 'bloggerUrl': 'http://www.blogger.com', 'title': 'PyPy Status Blog', 'pageType': 'item', 'postId': '6513983438425039230', 'url': 'http://morepypy.blogspot.co.uk/2011/08/we-need-software-transactional-memory.html', 'canonicalUrl': 'http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html', 'canonicalHomepageUrl': 'http://morepypy.blogspot.com/', 'homepageUrl': 'http://morepypy.blogspot.co.uk/', 'blogspotFaviconUrl': 'http://morepypy.blogspot.co.uk/favicon.ico', 'enabledCommentProfileImages': true, 'adultContent': false, 'disableAdSenseWidget': false, 'analyticsAccountNumber': '', 'searchLabel': '', 'searchQuery': '', 'pageName': 'We need Software Transactional Memory', 'pageTitle': 'PyPy Status Blog: We need Software Transactional Memory', 'encoding': 'UTF-8', 'locale': 'en', 'localeUnderscoreDelimited': 'en', 'isPrivate': false, 'isMobile': false, 'isMobileRequest': false, 'mobileClass': '', 'isPrivateBlog': false, 'languageDirection': 'ltr', 'feedLinks': '\74link rel\75\42alternate\42 type\75\42application/atom+xml\42 title\75\42PyPy Status Blog - Atom\42 href\75\42http://morepypy.blogspot.com/feeds/posts/default\42 /\76\n\74link rel\75\42alternate\42 type\75\42application/rss+xml\42 title\75\42PyPy Status Blog - RSS\42 href\75\42http://morepypy.blogspot.com/feeds/posts/default?alt\75rss\42 /\76\n\74link rel\75\42service.post\42 type\75\42application/atom+xml\42 title\75\42PyPy Status Blog - Atom\42 href\75\42http://www.blogger.com/feeds/3971202189709462152/posts/default\42 /\76\n\n\74link rel\75\42alternate\42 type\75\42application/atom+xml\42 title\75\42PyPy Status Blog - Atom\42 href\75\42http://morepypy.blogspot.com/feeds/6513983438425039230/comments/default\42 /\76\n', 'meTag': '', 'openIdOpTag': '', 'latencyHeadScript': '\74script type\75\42text/javascript\42\76(function() { var b\75window,f\75\42chrome\42,g\75\42tick\42,k\75\42jstiming\42;(function(){function d(a){this.t\75{};this.tick\75function(a,d,c){var e\75void 0!\75c?c:(new Date).getTime();this.t[a]\75[e,d];if(void 0\75\75c)try{b.console.timeStamp(\42CSI/\42+a)}catch(h){}};this[g](\42start\42,null,a)}var a;b.performance\46\46(a\75b.performance.timing);var n\75a?new d(a.responseStart):new d;b.jstiming\75{Timer:d,load:n};if(a){var c\75a.navigationStart,h\75a.responseStart;0\74c\46\46h\76\75c\46\46(b[k].srt\75h-c)}if(a){var e\75b[k].load;0\74c\46\46h\76\75c\46\46(e[g](\42_wtsrt\42,void 0,c),e[g](\42wtsrt_\42,\42_wtsrt\42,h),e[g](\42tbsd_\42,\42wtsrt_\42))}try{a\75null,\nb[f]\46\46b[f].csi\46\46(a\75Math.floor(b[f].csi().pageT),e\46\0460\74c\46\46(e[g](\42_tbnd\42,void 0,b[f].csi().startE),e[g](\42tbnd_\42,\42_tbnd\42,c))),null\75\75a\46\46b.gtbExternal\46\46(a\75b.gtbExternal.pageT()),null\75\75a\46\46b.external\46\46(a\75b.external.pageT,e\46\0460\74c\46\46(e[g](\42_tbnd\42,void 0,b.external.startE),e[g](\42tbnd_\42,\42_tbnd\42,c))),a\46\46(b[k].pt\75a)}catch(p){}})();b.tickAboveFold\75function(d){var a\0750;if(d.offsetParent){do a+\75d.offsetTop;while(d\75d.offsetParent)}d\75a;750\76\75d\46\46b[k].load[g](\42aft\42)};var l\75!1;function m(){l||(l\75!0,b[k].load[g](\42firstScrollTime\42))}b.addEventListener?b.addEventListener(\42scroll\42,m,!1):b.attachEvent(\42onscroll\42,m);\n })();\74/script\076', 'mobileHeadScript': '', 'ieCssRetrofitLinks': '\74!--[if IE]\76\74script type\75\42text/javascript\42 src\75\42https://www.blogger.com/static/v1/jsbin/1163241896-ieretrofit.js\42\76\74/script\76\n\74![endif]--\076', 'view': '', 'dynamicViewsCommentsSrc': '//www.blogblog.com/dynamicviews/4224c15c4e7c9321/js/comments.js', 'dynamicViewsScriptSrc': '//www.blogblog.com/dynamicviews/76f25a6f2e06af76', 'plusOneApiSrc': 'https://apis.google.com/js/plusone.js', 'sf': 'n', 'tf': ''}}, {'name': 'skin', 'data': {'vars': {'content_padding': '10px', 'paging_background': 'transparent none no-repeat scroll top center', 'image_border_small_size': '2px', 'body_background_gradient_cap': 'url(http://www.blogblog.com/1kt/simple/gradients_light.png)', 'tabs_selected_background_color': '#eeeeee', 'body_rule_color': '#eeeeee', 'header_shadow_spread': '1px', 'header_shadow_offset_left': '-1px', 'header_padding': '30px', 'link_visited_color': '#888888', 'post_title_font': 'normal normal 22px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'tabs_text_color': '#999999', 'date_header_margin': 'inherit', 'header_background_gradient': 'none', 'header_bottom_border_size': '1px', 'content_shadow_spread_webkit': '5px', 'header_shadow_offset_top': '-1px', 'widget_title_font': 'normal bold 11px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'main_section_margin': '0px', 'keycolor': '#66bbdd', 'content_shadow_spread': '40px', 'image_background_color': '#ffffff', 'header_font': 'normal normal 60px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'header_background_color': 'transparent', 'main_border_width': '0', 'main_padding': '15px', 'tabs_border_color': '#eeeeee', 'image_text_color': '#222222', 'description_text_size': '140%', 'post_footer_background_color': '#f9f9f9', 'body_background_gradient_tile': 'url(http://www.blogblog.com/1kt/simple/body_gradient_tile_light.png)', 'page_width': 'auto', 'tabs_background_gradient': 'url(http://www.blogblog.com/1kt/simple/gradients_light.png)', 'main_padding_bottom': '30px', 'tabs_background_color': '#f5f5f5', 'image_border_large_size': '5px', 'post_margin_bottom': '25px', 'body_background_override': '', 'tabs_margin_side': '30px', 'link_hover_color': '#33aaff', 'description_text_color': '#777777', 'body_text_color': '#222222', 'content_padding_horizontal': '10px', 'endSide': 'right', 'page_width_selector': '.region-inner', 'date_header_padding': 'inherit', 'post_footer_text_color': '#666666', 'startSide': 'left', 'date_header_color': '#222222', 'tabs_font': 'normal normal 14px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'post_footer_border_color': '#eeeeee', 'body_font': 'normal normal 12px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'footer_bevel': '0', 'tabs_bevel_border_width': '1px', 'date_header_background_color': 'transparent', 'content_shadow_spread_ie': '10px', 'widget_title_text_color': '#000000', 'header_border_horizontalsize': '0', 'image_border_color': '#eeeeee', 'tabs_border_width': '1px', 'content_background_color': '#ffffff', 'link_color': '#2288bb', 'header_text_color': '#3399bb', 'date_header_letterspacing': 'inherit', 'tabs_margin_top': '0', 'main_padding_top': '30px', 'header_border_size': '1px', 'tabs_selected_text_color': '#000000', 'content_background_color_selector': '.content-inner', 'body_background_color': '#66bbdd', 'widget_alternate_text_color': '#999999'}, 'override': ''}}, {'name': 'view', 'data': {'classic': {'name': 'classic', 'url': '?view\75classic'}, 'flipcard': {'name': 'flipcard', 'url': '?view\75flipcard'}, 'magazine': {'name': 'magazine', 'url': '?view\75magazine'}, 'mosaic': {'name': 'mosaic', 'url': '?view\75mosaic'}, 'sidebar': {'name': 'sidebar', 'url': '?view\75sidebar'}, 'snapshot': {'name': 'snapshot', 'url': '?view\75snapshot'}, 'timeslide': {'name': 'timeslide', 'url': '?view\75timeslide'}}}]);
_WidgetManager._RegisterWidget('_AttributionView', new _WidgetInfo('Attribution1', 'footer-3', null, document.getElementById('Attribution1'), {'attribution': 'Powered by \74a href\75\47http://www.blogger.com\47 target\75\47_blank\47\76Blogger\74/a\76.'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HeaderView', new _WidgetInfo('Header1', 'header', null, document.getElementById('Header1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogView', new _WidgetInfo('Blog1', 'main', null, document.getElementById('Blog1'), {'cmtInteractionsEnabled': false, 'showBacklinks': true, 'postId': '6513983438425039230', 'lightboxEnabled': true, 'lightboxModuleUrl': 'https://www.blogger.com/static/v1/jsbin/1938910137-lbx.js', 'lightboxCssUrl': 'https://www.blogger.com/static/v1/v-css/2392111094-lightbox_bundle.css'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LinkListView', new _WidgetInfo('LinkList1', 'sidebar-left-1', null, document.getElementById('LinkList1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML2', 'sidebar-left-1', null, document.getElementById('HTML2'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogArchiveView', new _WidgetInfo('BlogArchive1', 'sidebar-left-1', null, document.getElementById('BlogArchive1'), {'languageDirection': 'ltr'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_ProfileView', new _WidgetInfo('Profile1', 'sidebar-left-1', null, document.getElementById('Profile1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML1', 'sidebar-left-1', null, document.getElementById('HTML1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML3', 'sidebar-left-1', null, document.getElementById('HTML3'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML4', 'sidebar-left-1', null, document.getElementById('HTML4'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_NavbarView', new _WidgetInfo('Navbar1', 'navbar', null, document.getElementById('Navbar1'), {}, 'displayModeFull'));
</script>
</body>
</html>