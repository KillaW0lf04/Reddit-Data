<!DOCTYPE html>
<!-- this template contains two modifications: it adds flattr buttons, and adds an image of the logo just before the title --><html class='v2' dir='ltr' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'>
<head>
<script type='text/javascript'>
  /*  <![CDATA[ */
    (function() {
      var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
        
      s.type = 'text/javascript';
      s.async = true;
      s.src = 'https://api.flattr.com/js/0.6/load.js?mode=manual&uid=cfbolz&category=text&language=en_GB';
      t.parentNode.insertBefore(s, t);
    })();
    function displayFlattrButton(postid, url, tags) {
      var flattr_tle = document.getElementById("flattr_title_" + postid).innerHTML;  
      if (flattr_tle.length > 80) {
        flattr_tle = flattr_tle.replace(/(.{0,71}) .*/, "$1 &#8230;");
        flattr_tle = flattr_tle.slice(0,79);
      }
      var flattr_dsc = document.getElementById("flattr_summary_" + postid).innerHTML;  
      flattr_dsc = flattr_dsc.replace(/<.*?>/g, "");
      if (flattr_dsc.length > 980) {
        flattr_dsc = flattr_dsc.replace(/\n/g, " ");
        flattr_dsc = flattr_dsc.replace(/(.{0,971}) .*/, "$1 &#8230;");
        flattr_dsc = flattr_dsc.slice(0,979);
      }
      if (tags.length > 230) {
        tags = tags.replace(/(.{0,230}),/, "$1");
        tags = tags.slice(0,229);
      }
      tags = tags + ';';
     
      document.write('<a class="FlattrButton" style="display:none;" title="' +
flattr_tle + '" href="' + url + '" rev="flattr;button:compact;tags:' + tags + '">' + flattr_dsc + '</a>');
    }
  /* ]]> */
  </script>
<meta content='IE=EmulateIE7' http-equiv='X-UA-Compatible'/>
<meta content='width=1100' name='viewport'/>
<meta content='text/html; charset=UTF-8' http-equiv='Content-Type'/>
<script type="text/javascript">(function() { var b=window,f="chrome",g="tick",k="jstiming";(function(){function d(a){this.t={};this.tick=function(a,d,c){var e=void 0!=c?c:(new Date).getTime();this.t[a]=[e,d];if(void 0==c)try{b.console.timeStamp("CSI/"+a)}catch(h){}};this[g]("start",null,a)}var a;b.performance&&(a=b.performance.timing);var n=a?new d(a.responseStart):new d;b.jstiming={Timer:d,load:n};if(a){var c=a.navigationStart,h=a.responseStart;0<c&&h>=c&&(b[k].srt=h-c)}if(a){var e=b[k].load;0<c&&h>=c&&(e[g]("_wtsrt",void 0,c),e[g]("wtsrt_","_wtsrt",h),e[g]("tbsd_","wtsrt_"))}try{a=null,
b[f]&&b[f].csi&&(a=Math.floor(b[f].csi().pageT),e&&0<c&&(e[g]("_tbnd",void 0,b[f].csi().startE),e[g]("tbnd_","_tbnd",c))),null==a&&b.gtbExternal&&(a=b.gtbExternal.pageT()),null==a&&b.external&&(a=b.external.pageT,e&&0<c&&(e[g]("_tbnd",void 0,b.external.startE),e[g]("tbnd_","_tbnd",c))),a&&(b[k].pt=a)}catch(p){}})();b.tickAboveFold=function(d){var a=0;if(d.offsetParent){do a+=d.offsetTop;while(d=d.offsetParent)}d=a;750>=d&&b[k].load[g]("aft")};var l=!1;function m(){l||(l=!0,b[k].load[g]("firstScrollTime"))}b.addEventListener?b.addEventListener("scroll",m,!1):b.attachEvent("onscroll",m);
 })();</script>
<meta content='blogger' name='generator'/>
<link href='http://morepypy.blogspot.co.uk/favicon.ico' rel='icon' type='image/x-icon'/>
<link href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html' rel='canonical'/>
<link rel="alternate" type="application/atom+xml" title="PyPy Status Blog - Atom" href="http://morepypy.blogspot.com/feeds/posts/default" />
<link rel="alternate" type="application/rss+xml" title="PyPy Status Blog - RSS" href="http://morepypy.blogspot.com/feeds/posts/default?alt=rss" />
<link rel="service.post" type="application/atom+xml" title="PyPy Status Blog - Atom" href="http://www.blogger.com/feeds/3971202189709462152/posts/default" />

<link rel="alternate" type="application/atom+xml" title="PyPy Status Blog - Atom" href="http://morepypy.blogspot.com/feeds/6756589731691762127/comments/default" />
<!--[if IE]><script type="text/javascript" src="https://www.blogger.com/static/v1/jsbin/1163241896-ieretrofit.js"></script>
<![endif]-->
<!--[if IE]> <script> (function() { var html5 = ("abbr,article,aside,audio,canvas,datalist,details," + "figure,footer,header,hgroup,mark,menu,meter,nav,output," + "progress,section,time,video").split(','); for (var i = 0; i < html5.length; i++) { document.createElement(html5[i]); } try { document.execCommand('BackgroundImageCache', false, true); } catch(e) {} })(); </script> <![endif]-->
<title>PyPy Status Blog: PyPy is faster than C, again: string formatting</title>
<link type='text/css' rel='stylesheet' href='https://www.blogger.com/static/v1/widgets/1535467126-widget_css_2_bundle.css' />
<link type='text/css' rel='stylesheet' href='https://www.blogger.com/dyn-css/authorization.css?targetBlogID=3971202189709462152&zx=03c7d52b-cbc2-4097-90ef-9563a73317ea' />
<style id='page-skin-1' type='text/css'><!--
/*
-----------------------------------------------
Blogger Template Style
Name:     Simple
Designer: Josh Peterson
URL:      www.noaesthetic.com
----------------------------------------------- */
/* Variable definitions
====================
<Variable name="keycolor" description="Main Color" type="color" default="#66bbdd"/>
<Group description="Page Text" selector="body">
<Variable name="body.font" description="Font" type="font"
default="normal normal 12px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="body.text.color" description="Text Color" type="color" default="#222222"/>
</Group>
<Group description="Backgrounds" selector=".body-fauxcolumns-outer">
<Variable name="body.background.color" description="Outer Background" type="color" default="#66bbdd"/>
<Variable name="content.background.color" description="Main Background" type="color" default="#ffffff"/>
<Variable name="header.background.color" description="Header Background" type="color" default="transparent"/>
</Group>
<Group description="Links" selector=".main-outer">
<Variable name="link.color" description="Link Color" type="color" default="#2288bb"/>
<Variable name="link.visited.color" description="Visited Color" type="color" default="#888888"/>
<Variable name="link.hover.color" description="Hover Color" type="color" default="#33aaff"/>
</Group>
<Group description="Blog Title" selector=".header h1">
<Variable name="header.font" description="Font" type="font"
default="normal normal 60px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="header.text.color" description="Title Color" type="color" default="#3399bb" />
</Group>
<Group description="Blog Description" selector=".header .description">
<Variable name="description.text.color" description="Description Color" type="color"
default="#777777" />
</Group>
<Group description="Tabs Text" selector=".tabs-inner .widget li a">
<Variable name="tabs.font" description="Font" type="font"
default="normal normal 14px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="tabs.text.color" description="Text Color" type="color" default="#999999"/>
<Variable name="tabs.selected.text.color" description="Selected Color" type="color" default="#000000"/>
</Group>
<Group description="Tabs Background" selector=".tabs-outer .PageList">
<Variable name="tabs.background.color" description="Background Color" type="color" default="#f5f5f5"/>
<Variable name="tabs.selected.background.color" description="Selected Color" type="color" default="#eeeeee"/>
</Group>
<Group description="Post Title" selector="h3.post-title, .comments h4">
<Variable name="post.title.font" description="Font" type="font"
default="normal normal 22px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
</Group>
<Group description="Date Header" selector=".date-header">
<Variable name="date.header.color" description="Text Color" type="color"
default="#222222"/>
<Variable name="date.header.background.color" description="Background Color" type="color"
default="transparent"/>
</Group>
<Group description="Post Footer" selector=".post-footer">
<Variable name="post.footer.text.color" description="Text Color" type="color" default="#666666"/>
<Variable name="post.footer.background.color" description="Background Color" type="color"
default="#f9f9f9"/>
<Variable name="post.footer.border.color" description="Shadow Color" type="color" default="#eeeeee"/>
</Group>
<Group description="Gadgets" selector="h2">
<Variable name="widget.title.font" description="Title Font" type="font"
default="normal bold 11px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="widget.title.text.color" description="Title Color" type="color" default="#000000"/>
<Variable name="widget.alternate.text.color" description="Alternate Color" type="color" default="#999999"/>
</Group>
<Group description="Images" selector=".main-inner">
<Variable name="image.background.color" description="Background Color" type="color" default="#ffffff"/>
<Variable name="image.border.color" description="Border Color" type="color" default="#eeeeee"/>
<Variable name="image.text.color" description="Caption Text Color" type="color" default="#222222"/>
</Group>
<Group description="Accents" selector=".content-inner">
<Variable name="body.rule.color" description="Separator Line Color" type="color" default="#eeeeee"/>
<Variable name="tabs.border.color" description="Tabs Border Color" type="color" default="#eeeeee"/>
</Group>
<Variable name="body.background" description="Body Background" type="background"
color="#66bbdd" default="$(color) none repeat scroll top left"/>
<Variable name="body.background.override" description="Body Background Override" type="string" default=""/>
<Variable name="body.background.gradient.cap" description="Body Gradient Cap" type="url"
default="url(http://www.blogblog.com/1kt/simple/gradients_light.png)"/>
<Variable name="body.background.gradient.tile" description="Body Gradient Tile" type="url"
default="url(http://www.blogblog.com/1kt/simple/body_gradient_tile_light.png)"/>
<Variable name="content.background.color.selector" description="Content Background Color Selector" type="string" default=".content-inner"/>
<Variable name="content.padding" description="Content Padding" type="length" default="10px"/>
<Variable name="content.padding.horizontal" description="Content Horizontal Padding" type="length" default="10px"/>
<Variable name="content.shadow.spread" description="Content Shadow Spread" type="length" default="40px"/>
<Variable name="content.shadow.spread.webkit" description="Content Shadow Spread (WebKit)" type="length" default="5px"/>
<Variable name="content.shadow.spread.ie" description="Content Shadow Spread (IE)" type="length" default="10px"/>
<Variable name="main.border.width" description="Main Border Width" type="length" default="0"/>
<Variable name="header.background.gradient" description="Header Gradient" type="url" default="none"/>
<Variable name="header.shadow.offset.left" description="Header Shadow Offset Left" type="length" default="-1px"/>
<Variable name="header.shadow.offset.top" description="Header Shadow Offset Top" type="length" default="-1px"/>
<Variable name="header.shadow.spread" description="Header Shadow Spread" type="length" default="1px"/>
<Variable name="header.padding" description="Header Padding" type="length" default="30px"/>
<Variable name="header.border.size" description="Header Border Size" type="length" default="1px"/>
<Variable name="header.bottom.border.size" description="Header Bottom Border Size" type="length" default="1px"/>
<Variable name="header.border.horizontalsize" description="Header Horizontal Border Size" type="length" default="0"/>
<Variable name="description.text.size" description="Description Text Size" type="string" default="140%"/>
<Variable name="tabs.margin.top" description="Tabs Margin Top" type="length" default="0" />
<Variable name="tabs.margin.side" description="Tabs Side Margin" type="length" default="30px" />
<Variable name="tabs.background.gradient" description="Tabs Background Gradient" type="url"
default="url(http://www.blogblog.com/1kt/simple/gradients_light.png)"/>
<Variable name="tabs.border.width" description="Tabs Border Width" type="length" default="1px"/>
<Variable name="tabs.bevel.border.width" description="Tabs Bevel Border Width" type="length" default="1px"/>
<Variable name="date.header.padding" description="Date Header Padding" type="string" default="inherit"/>
<Variable name="date.header.letterspacing" description="Date Header Letter Spacing" type="string" default="inherit"/>
<Variable name="date.header.margin" description="Date Header Margin" type="string" default="inherit"/>
<Variable name="post.margin.bottom" description="Post Bottom Margin" type="length" default="25px"/>
<Variable name="image.border.small.size" description="Image Border Small Size" type="length" default="2px"/>
<Variable name="image.border.large.size" description="Image Border Large Size" type="length" default="5px"/>
<Variable name="page.width.selector" description="Page Width Selector" type="string" default=".region-inner"/>
<Variable name="page.width" description="Page Width" type="string" default="auto"/>
<Variable name="main.section.margin" description="Main Section Margin" type="length" default="0px"/>
<Variable name="main.padding" description="Main Padding" type="length" default="15px"/>
<Variable name="main.padding.top" description="Main Padding Top" type="length" default="30px"/>
<Variable name="main.padding.bottom" description="Main Padding Bottom" type="length" default="30px"/>
<Variable name="paging.background"
color="#ffffff"
description="Background of blog paging area" type="background"
default="transparent none no-repeat scroll top center"/>
<Variable name="footer.bevel" description="Bevel border length of footer" type="length" default="0"/>
<Variable name="startSide" description="Side where text starts in blog language" type="automatic" default="left"/>
<Variable name="endSide" description="Side where text ends in blog language" type="automatic" default="right"/>
*/
/* Content
----------------------------------------------- */
body {
font: normal normal 12px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #222222;
background: #66bbdd none repeat scroll top left;
padding: 0 40px 40px 40px;
}
html body .region-inner {
min-width: 0;
max-width: 100%;
width: auto;
}
a:link {
text-decoration:none;
color: #2288bb;
}
a:visited {
text-decoration:none;
color: #888888;
}
a:hover {
text-decoration:underline;
color: #33aaff;
}
.body-fauxcolumn-outer .fauxcolumn-inner {
background: transparent url(http://www.blogblog.com/1kt/simple/body_gradient_tile_light.png) repeat scroll top left;
_background-image: none;
}
.body-fauxcolumn-outer .cap-top {
position: absolute;
z-index: 1;
height: 400px;
width: 100%;
background: #66bbdd none repeat scroll top left;
}
.body-fauxcolumn-outer .cap-top .cap-left {
width: 100%;
background: transparent url(http://www.blogblog.com/1kt/simple/gradients_light.png) repeat-x scroll top left;
_background-image: none;
}
.content-outer {
-moz-box-shadow: 0 0 40px rgba(0, 0, 0, .15);
-webkit-box-shadow: 0 0 5px rgba(0, 0, 0, .15);
-goog-ms-box-shadow: 0 0 10px #333333;
box-shadow: 0 0 40px rgba(0, 0, 0, .15);
margin-bottom: 1px;
}
.content-inner {
padding: 10px 10px;
}
.content-inner {
background-color: #ffffff;
}
/* Header
----------------------------------------------- */
.header-outer {
background: transparent none repeat-x scroll 0 -400px;
_background-image: none;
}
.Header h1 {
font: normal normal 60px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #3399bb;
text-shadow: -1px -1px 1px rgba(0, 0, 0, .2);
}
.Header h1 a {
color: #3399bb;
}
.Header .description {
font-size: 140%;
color: #777777;
}
.header-inner .Header .titlewrapper {
padding: 22px 30px;
}
.header-inner .Header .descriptionwrapper {
padding: 0 30px;
}
/* Tabs
----------------------------------------------- */
.tabs-inner .section:first-child {
border-top: 1px solid #eeeeee;
}
.tabs-inner .section:first-child ul {
margin-top: -1px;
border-top: 1px solid #eeeeee;
border-left: 0 solid #eeeeee;
border-right: 0 solid #eeeeee;
}
.tabs-inner .widget ul {
background: #f5f5f5 url(http://www.blogblog.com/1kt/simple/gradients_light.png) repeat-x scroll 0 -800px;
_background-image: none;
border-bottom: 1px solid #eeeeee;
margin-top: 0;
margin-left: -30px;
margin-right: -30px;
}
.tabs-inner .widget li a {
display: inline-block;
padding: .6em 1em;
font: normal normal 14px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #999999;
border-left: 1px solid #ffffff;
border-right: 1px solid #eeeeee;
}
.tabs-inner .widget li:first-child a {
border-left: none;
}
.tabs-inner .widget li.selected a, .tabs-inner .widget li a:hover {
color: #000000;
background-color: #eeeeee;
text-decoration: none;
}
/* Columns
----------------------------------------------- */
.main-outer {
border-top: 0 solid #eeeeee;
}
.fauxcolumn-left-outer .fauxcolumn-inner {
border-right: 1px solid #eeeeee;
}
.fauxcolumn-right-outer .fauxcolumn-inner {
border-left: 1px solid #eeeeee;
}
/* Headings
----------------------------------------------- */
h2 {
margin: 0 0 1em 0;
font: normal bold 11px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #000000;
text-transform: uppercase;
}
/* Widgets
----------------------------------------------- */
.widget .zippy {
color: #999999;
text-shadow: 2px 2px 1px rgba(0, 0, 0, .1);
}
.widget .popular-posts ul {
list-style: none;
}
/* Posts
----------------------------------------------- */
.date-header span {
background-color: transparent;
color: #222222;
padding: inherit;
letter-spacing: inherit;
margin: inherit;
}
.main-inner {
padding-top: 30px;
padding-bottom: 30px;
}
.main-inner .column-center-inner {
padding: 0 15px;
}
.main-inner .column-center-inner .section {
margin: 0 0px;
}
.post {
margin: 0 0 25px 0;
}
h3.post-title, .comments h4 {
font: normal normal 22px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
margin: .75em 0 0;
}
.post-body {
font-size: 110%;
line-height: 1.4;
position: relative;
}
.post-body img, .post-body .tr-caption-container, .Profile img, .Image img,
.BlogList .item-thumbnail img {
padding: 2px;
background: #ffffff;
border: 1px solid #eeeeee;
-moz-box-shadow: 1px 1px 5px rgba(0, 0, 0, .1);
-webkit-box-shadow: 1px 1px 5px rgba(0, 0, 0, .1);
box-shadow: 1px 1px 5px rgba(0, 0, 0, .1);
}
.post-body img, .post-body .tr-caption-container {
padding: 5px;
}
.post-body .tr-caption-container {
color: #222222;
}
.post-body .tr-caption-container img {
padding: 0;
background: transparent;
border: none;
-moz-box-shadow: 0 0 0 rgba(0, 0, 0, .1);
-webkit-box-shadow: 0 0 0 rgba(0, 0, 0, .1);
box-shadow: 0 0 0 rgba(0, 0, 0, .1);
}
.post-header {
margin: 0 0 1.5em;
line-height: 1.6;
font-size: 90%;
}
.post-footer {
margin: 20px -2px 0;
padding: 5px 10px;
color: #666666;
background-color: #f9f9f9;
border-bottom: 1px solid #eeeeee;
line-height: 1.6;
font-size: 90%;
}
#comments .comment-author {
padding-top: 1.5em;
border-top: 1px solid #eeeeee;
background-position: 0 1.5em;
}
#comments .comment-author:first-child {
padding-top: 0;
border-top: none;
}
.avatar-image-container {
margin: .2em 0 0;
}
#comments .avatar-image-container img {
border: 1px solid #eeeeee;
}
/* Accents
---------------------------------------------- */
.section-columns td.columns-cell {
border-left: 1px solid #eeeeee;
}
.blog-pager {
background: transparent none no-repeat scroll top center;
}
.blog-pager-older-link, .home-link,
.blog-pager-newer-link {
background-color: #ffffff;
padding: 5px;
}
.footer-outer {
border-top: 0 dashed #bbbbbb;
}
/* Mobile
----------------------------------------------- */
.mobile .content-outer {
-webkit-box-shadow: 0 0 3px rgba(0, 0, 0, .15);
box-shadow: 0 0 3px rgba(0, 0, 0, .15);
padding: 0 40px;
}
body.mobile .AdSense {
margin-left: -40px;
}
.mobile .tabs-inner .widget ul {
margin-left: 0;
margin-right: 0;
}
.mobile .post {
margin: 0;
}
.mobile .main-inner .column-center-inner .section {
margin: 0;
}
.mobile .date-header span {
padding: 0.4em 10px;
margin: 0 -10px;
}
.mobile h3.post-title {
margin: 0;
}
.mobile .blog-pager {
background: transparent;
}
.mobile .footer-outer {
border-top: none;
}
.mobile .main-inner, .mobile .footer-inner {
background-color: #ffffff;
}
.mobile-index-contents {
color: #222222;
}
.mobile-link-button {
background-color: #2288bb;
}
.mobile-link-button a:link, .mobile-link-button a:visited {
color: #ffffff;
}

--></style>
<style id='template-skin-1' type='text/css'><!--
body {
min-width: 930px;
}
.content-outer, .content-fauxcolumn-outer, .region-inner {
min-width: 930px;
max-width: 930px;
_width: 930px;
}
.main-inner .columns {
padding-left: 250px;
padding-right: 0px;
}
.main-inner .fauxcolumn-center-outer {
left: 250px;
right: 0px;
/* IE6 does not respect left and right together */
_width: expression(this.parentNode.offsetWidth -
parseInt("250px") -
parseInt("0px") + 'px');
}
.main-inner .fauxcolumn-left-outer {
width: 250px;
}
.main-inner .fauxcolumn-right-outer {
width: 0px;
}
.main-inner .column-left-outer {
width: 250px;
right: 100%;
margin-left: -250px;
}
.main-inner .column-right-outer {
width: 0px;
margin-right: -0px;
}
#layout {
min-width: 0;
}
#layout .content-outer {
min-width: 0;
width: 800px;
}
#layout .region-inner {
min-width: 0;
width: auto;
}
--></style>
<script type="text/javascript">var a="indexOf",b="&m=1",e="(^|&)m=",f="?",g="?m=1";function h(){var c=window.location.href,d=c.split(f);switch(d.length){case 1:return c+g;case 2:return 0<=d[1].search(e)?null:c+b;default:return null}}var k=navigator.userAgent;if(-1!=k[a]("Mobile")&&-1!=k[a]("WebKit")&&-1==k[a]("iPad")||-1!=k[a]("Opera Mini")||-1!=k[a]("IEMobile")){var l=h();l&&window.location.replace(l)};
</script><script type="text/javascript">
if (window.jstiming) window.jstiming.load.tick('headEnd');
</script></head>
<body class='loading'>
<div class='navbar section' id='navbar'><div class='widget Navbar' id='Navbar1'><script type="text/javascript">
    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener('load',
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent('onload', function(){ object[attribute] = val; });
      }
    }
  </script>
<div id="navbar-iframe-container"></div>
<script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script>
<script type="text/javascript">
        gapi.load("gapi.iframes:gapi.iframes.style.bubble", function() {
          if (gapi.iframes && gapi.iframes.getContext) {
            gapi.iframes.getContext().openChild({
                url: 'https://www.blogger.com/navbar.g?targetBlogID\0753971202189709462152\46blogName\75PyPy+Status+Blog\46publishMode\75PUBLISH_MODE_BLOGSPOT\46navbarType\75LIGHT\46layoutType\75LAYOUTS\46searchRoot\75http://morepypy.blogspot.com/search\46blogLocale\75en\46v\0752\46homepageUrl\75http://morepypy.blogspot.com/\46targetPostID\0756756589731691762127\46blogPostOrPageUrl\75http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html\46vt\075719567509017919966',
                where: document.getElementById("navbar-iframe-container"),
                id: "navbar-iframe"
            });
          }
        });
      </script><script type="text/javascript">
(function() {
var script = document.createElement('script');
script.type = 'text/javascript';
script.src = '//pagead2.googlesyndication.com/pagead/js/google_top_exp.js';
var head = document.getElementsByTagName('head')[0];
if (head) {
head.appendChild(script);
}})();
</script>
</div></div>
<div class='body-fauxcolumns'>
<div class='fauxcolumn-outer body-fauxcolumn-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</div>
<div class='content'>
<div class='content-fauxcolumns'>
<div class='fauxcolumn-outer content-fauxcolumn-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</div>
<div class='content-outer'>
<div class='content-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left content-fauxborder-left'>
<div class='fauxborder-right content-fauxborder-right'></div>
<div class='content-inner'>
<header>
<div class='header-outer'>
<div class='header-cap-top cap-top'>
<div class='cap-left'>
<img src='http://2.bp.blogspot.com/-iO_dZU_FAR0/Tbre-StkIhI/AAAAAAAAAM4/m3P9wi1e-ng/s150/pypy_small128.png'/>
</div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left header-fauxborder-left'>
<div class='fauxborder-right header-fauxborder-right'></div>
<div class='region-inner header-inner' style='margin-left: 128px'>
<div class='header section' id='header'><div class='widget Header' id='Header1'>
<div id='header-inner'>
<div class='titlewrapper'>
<h1 class='title'>
<a href='http://morepypy.blogspot.co.uk/'>PyPy Status Blog</a>
</h1>
</div>
<div class='descriptionwrapper'>
<p class='description'><span>
</span></p>
</div>
</div>
</div></div>
</div>
</div>
<div class='header-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</header>
<div class='tabs-outer'>
<div class='tabs-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left tabs-fauxborder-left'>
<div class='fauxborder-right tabs-fauxborder-right'></div>
<div class='region-inner tabs-inner'>
<div class='tabs section' id='crosscol'></div>
<div class='tabs section' id='crosscol-overflow'></div>
</div>
</div>
<div class='tabs-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<div class='main-outer'>
<div class='main-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left main-fauxborder-left'>
<div class='fauxborder-right main-fauxborder-right'></div>
<div class='region-inner main-inner'>
<div class='columns fauxcolumns'>
<div class='fauxcolumn-outer fauxcolumn-center-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<div class='fauxcolumn-outer fauxcolumn-left-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<div class='fauxcolumn-outer fauxcolumn-right-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<!-- corrects IE6 width calculation -->
<div class='columns-inner'>
<div class='column-center-outer'>
<div class='column-center-inner'>
<div class='main section' id='main'><div class='widget Blog' id='Blog1'>
<div class='blog-posts hfeed'>
<!-- google_ad_section_start(name=default) -->

          <div class="date-outer">
        
<h2 class='date-header'><span>Tuesday, August 2, 2011</span></h2>

          <div class="date-posts">
        
<div class='post-outer'>
<div class='post hentry'>
<a name='6756589731691762127'></a>
<h3 class='post-title entry-title'>
PyPy is faster than C, again: string formatting
</h3>
<div class='post-header'>
<div class='post-header-line-1'></div>
</div>
<div class='post-body entry-content' id='post-body-6756589731691762127'>
<p>String formatting is probably something you do just about every day in Python,
and never think about.  It's so easy, just <tt class="docutils literal">&quot;%d %d&quot; % (i, i)</tt> and you're
done.  No thinking about how to size your result buffer, whether your output
has an appropriate NULL byte at the end, or any other details.  A C
equivalent might be:</p>
<pre class="literal-block">
char x[44];
sprintf(x, &quot;%d %d&quot;, i, i);
</pre>
<p>Note that we had to stop for a second and consider how big numbers might get
and overestimate the size (44 = length of the biggest number on 64bit (20) +
1 for the sign * 2 + 1 (for the space) + 1 (NUL byte)), it took the authors of
this post, fijal and alex, 3 tries to get the math right on this :-)</p>
<p>This is fine, except you can't even return <tt class="docutils literal">x</tt> from this function, a more
fair comparison might be:</p>
<pre class="literal-block">
char *x = malloc(44 * sizeof(char));
sprintf(x, &quot;%d %d&quot;, i, i);
</pre>
<p><tt class="docutils literal">x</tt> is slightly overallocated in some situations, but that's fine.</p>
<p>But we're not here to just discuss the implementation of string
formatting, we're here to discuss how blazing fast PyPy is at it, with
the new <tt class="docutils literal"><span class="pre">unroll-if-alt</span></tt> branch.  Given the Python code:</p>
<pre class="literal-block">
def main():
    for i in xrange(10000000):
        &quot;%d %d&quot; % (i, i)

main()
</pre>
<p>and the C code:</p>
<pre class="literal-block">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;


int main() {
    int i = 0;
    char x[44];
    for (i = 0; i &lt; 10000000; i++) {
        sprintf(x, &quot;%d %d&quot;, i, i);
    }
}
</pre>
<p>Run under PyPy, at the head of the <tt class="docutils literal"><span class="pre">unroll-if-alt</span></tt> branch, and
compiled with GCC 4.5.2 at -O4 (other optimization levels were tested,
this produced the best performance). It took <strong>0.85</strong> seconds to
execute under PyPy, and <strong>1.63</strong> seconds with the compiled binary. We
think this demonstrates the incredible potential of dynamic
compilation, GCC is unable to inline or unroll the <tt class="docutils literal">sprintf</tt> call,
because it sits inside of libc.</p>
<p>Benchmarking the C code:</p>
<pre class="literal-block">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;


int main() {
    int i = 0;
    for (i = 0; i &lt; 10000000; i++) {
        char *x = malloc(44 * sizeof(char));
        sprintf(x, &quot;%d %d&quot;, i, i);
        free(x);
    }
}
</pre>
<p>Which as discussed above, is more comperable to the Python, gives a
result of <strong>1.96</strong> seconds.</p>
<p>Summary of performance:</p>
<table border="1" class="docutils">
<colgroup>
<col width="20%" />
<col width="19%" />
<col width="19%" />
<col width="12%" />
<col width="30%" />
</colgroup>
<tbody valign="top">
<tr><td>Platform</td>
<td>GCC (stack)</td>
<td>GCC (malloc)</td>
<td>CPython</td>
<td>PyPy (unroll-if-alt)</td>
</tr>
<tr><td>Time</td>
<td>1.63s</td>
<td>1.96s</td>
<td>10.2s</td>
<td>0.85s</td>
</tr>
<tr><td>relative to C</td>
<td>1x</td>
<td>0.83x</td>
<td>0.16x</td>
<td><strong>1.9x</strong></td>
</tr>
</tbody>
</table>
<p>Overall PyPy is almost <strong>2x</strong> faster. This is clearly win for dynamic
compilation over static - the <cite>sprintf</cite> function lives in libc and so
cannot be specializing over the constant string, which has to be parsed
every time it's executed. In the case of PyPy, we specialize
the assembler if we detect the left hand string of the modulo operator
to be constant.</p>
<p>Cheers,<br/>
alex &amp; fijal</p>
<div style='clear: both;'></div>
</div>
<div class='post-footer'>
<div class='post-footer-line post-footer-line-1'><span class='post-author vcard'>
<div id='flattr_summary_6756589731691762127' style='display: none;'>
<p>String formatting is probably something you do just about every day in Python,
and never think about.  It's so easy, just <tt class="docutils literal">&quot;%d %d&quot; % (i, i)</tt> and you're
done.  No thinking about how to size your result buffer, whether your output
has an appropriate NULL byte at the end, or any other details.  A C
equivalent might be:</p>
<pre class="literal-block">
char x[44];
sprintf(x, &quot;%d %d&quot;, i, i);
</pre>
<p>Note that we had to stop for a second and consider how big numbers might get
and overestimate the size (44 = length of the biggest number on 64bit (20) +
1 for the sign * 2 + 1 (for the space) + 1 (NUL byte)), it took the authors of
this post, fijal and alex, 3 tries to get the math right on this :-)</p>
<p>This is fine, except you can't even return <tt class="docutils literal">x</tt> from this function, a more
fair comparison might be:</p>
<pre class="literal-block">
char *x = malloc(44 * sizeof(char));
sprintf(x, &quot;%d %d&quot;, i, i);
</pre>
<p><tt class="docutils literal">x</tt> is slightly overallocated in some situations, but that's fine.</p>
<p>But we're not here to just discuss the implementation of string
formatting, we're here to discuss how blazing fast PyPy is at it, with
the new <tt class="docutils literal"><span class="pre">unroll-if-alt</span></tt> branch.  Given the Python code:</p>
<pre class="literal-block">
def main():
    for i in xrange(10000000):
        &quot;%d %d&quot; % (i, i)

main()
</pre>
<p>and the C code:</p>
<pre class="literal-block">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;


int main() {
    int i = 0;
    char x[44];
    for (i = 0; i &lt; 10000000; i++) {
        sprintf(x, &quot;%d %d&quot;, i, i);
    }
}
</pre>
<p>Run under PyPy, at the head of the <tt class="docutils literal"><span class="pre">unroll-if-alt</span></tt> branch, and
compiled with GCC 4.5.2 at -O4 (other optimization levels were tested,
this produced the best performance). It took <strong>0.85</strong> seconds to
execute under PyPy, and <strong>1.63</strong> seconds with the compiled binary. We
think this demonstrates the incredible potential of dynamic
compilation, GCC is unable to inline or unroll the <tt class="docutils literal">sprintf</tt> call,
because it sits inside of libc.</p>
<p>Benchmarking the C code:</p>
<pre class="literal-block">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;


int main() {
    int i = 0;
    for (i = 0; i &lt; 10000000; i++) {
        char *x = malloc(44 * sizeof(char));
        sprintf(x, &quot;%d %d&quot;, i, i);
        free(x);
    }
}
</pre>
<p>Which as discussed above, is more comperable to the Python, gives a
result of <strong>1.96</strong> seconds.</p>
<p>Summary of performance:</p>
<table border="1" class="docutils">
<colgroup>
<col width="20%" />
<col width="19%" />
<col width="19%" />
<col width="12%" />
<col width="30%" />
</colgroup>
<tbody valign="top">
<tr><td>Platform</td>
<td>GCC (stack)</td>
<td>GCC (malloc)</td>
<td>CPython</td>
<td>PyPy (unroll-if-alt)</td>
</tr>
<tr><td>Time</td>
<td>1.63s</td>
<td>1.96s</td>
<td>10.2s</td>
<td>0.85s</td>
</tr>
<tr><td>relative to C</td>
<td>1x</td>
<td>0.83x</td>
<td>0.16x</td>
<td><strong>1.9x</strong></td>
</tr>
</tbody>
</table>
<p>Overall PyPy is almost <strong>2x</strong> faster. This is clearly win for dynamic
compilation over static - the <cite>sprintf</cite> function lives in libc and so
cannot be specializing over the constant string, which has to be parsed
every time it's executed. In the case of PyPy, we specialize
the assembler if we detect the left hand string of the modulo operator
to be constant.</p>
<p>Cheers,<br/>
alex &amp; fijal</p>
</div>
<div id='flattr_title_6756589731691762127' style='display: none;'>
PyPy is faster than C, again: string formatting
</div>
<div class='post-share-buttons goog-inline-block'>
<script type='text/javascript'>  
          displayFlattrButton('6756589731691762127', 'http://morepypy.blogspot.co.uk/2011/08/pypy-is-faster-than-c-again-string.html', '');
        </script>
</div>
Posted by
<span class='fn'>Maciej Fijalkowski</span>
</span>
<span class='post-timestamp'>
at
<a class='timestamp-link' href='http://morepypy.blogspot.co.uk/2011/08/pypy-is-faster-than-c-again-string.html' rel='bookmark' title='permanent link'><abbr class='published' title='2011-08-02T19:50:00+02:00'>19:50</abbr></a>
</span>
<span class='post-comment-link'>
</span>
<span class='post-icons'>
<span class='item-control blog-admin pid-1633129755'>
<a href='http://www.blogger.com/post-edit.g?blogID=3971202189709462152&postID=6756589731691762127&from=pencil' title='Edit Post'>
<img alt='' class='icon-action' height='18' src='http://img2.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/>
</a>
</span>
</span>
<div class='post-share-buttons goog-inline-block'>
<a class='goog-inline-block share-button sb-email' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=6756589731691762127&target=email' target='_blank' title='Email This'><span class='share-button-link-text'>Email This</span></a><a class='goog-inline-block share-button sb-blog' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=6756589731691762127&target=blog' onclick='window.open(this.href, "_blank", "height=270,width=475"); return false;' target='_blank' title='BlogThis!'><span class='share-button-link-text'>BlogThis!</span></a><a class='goog-inline-block share-button sb-twitter' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=6756589731691762127&target=twitter' target='_blank' title='Share to Twitter'><span class='share-button-link-text'>Share to Twitter</span></a><a class='goog-inline-block share-button sb-facebook' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=6756589731691762127&target=facebook' onclick='window.open(this.href, "_blank", "height=430,width=640"); return false;' target='_blank' title='Share to Facebook'><span class='share-button-link-text'>Share to Facebook</span></a><a class='goog-inline-block share-button sb-pinterest' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=6756589731691762127&target=pinterest' target='_blank' title='Share to Pinterest'><span class='share-button-link-text'>Share to Pinterest</span></a><div class='goog-inline-block dummy-container'><g:plusone source='blogger:blog:plusone' href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html' size='medium' width='300' annotation='inline'/></div>
</div>
</div>
<div class='post-footer-line post-footer-line-2'><span class='post-labels'>
</span>
</div>
<div class='post-footer-line post-footer-line-3'><span class='post-backlinks post-comment-link'>
</span>
</div>
</div>
</div>
<div class='comments' id='comments'>
<a name='comments'></a>
<h4>52 comments:</h4>
<div id='Blog1_comments-block-wrapper'>
<dl class='avatar-comment-indent' id='comments-block'>
<dt class='comment-author ' id='c8549734260032489673'>
<a name='c8549734260032489673'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/16553111330208171286" rel="nofollow" onclick="" class="avatar-hovercard" id="av-0-16553111330208171286"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="salmon">

</a></span></div>
<a href='http://www.blogger.com/profile/16553111330208171286' rel='nofollow'>salmon</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8549734260032489673'>
<p>
What about &#39;{0}&#39;.format(&#39;pypy&#39;) ?<br />Is this also faster?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312309386490#c8549734260032489673' title='comment permalink'>
August 2, 2011 at 8:23 PM
</a>
<span class='item-control blog-admin pid-1368805639'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=8549734260032489673' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c2346883473253657369'>
<a name='c2346883473253657369'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/12092097273427421063" rel="nofollow" onclick="" class="avatar-hovercard" id="av-1-12092097273427421063"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="JoeHillen">

</a></span></div>
<a href='http://www.blogger.com/profile/12092097273427421063' rel='nofollow'>JoeHillen</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2346883473253657369'>
<p>
Where can we see this &quot;unroll-if-alt&quot; branch?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312311540288#c2346883473253657369' title='comment permalink'>
August 2, 2011 at 8:59 PM
</a>
<span class='item-control blog-admin pid-1000757947'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2346883473253657369' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1848248575826608609'>
<a name='c1848248575826608609'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://greghaines.net/" rel="nofollow" onclick=""><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Greg Haines">

</a></span></div>
<a href='http://greghaines.net/' rel='nofollow'>Greg Haines</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1848248575826608609'>
<p>
Are you sure the compiler isn&#39;t optimizing away the actual execution since you&#39;re not doing anything with the result?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312312436608#c1848248575826608609' title='comment permalink'>
August 2, 2011 at 9:13 PM
</a>
<span class='item-control blog-admin pid-124576297'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1848248575826608609' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c4004366549817031533'>
<a name='c4004366549817031533'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/04274984206279511399" rel="nofollow" onclick="" class="avatar-hovercard" id="av-3-04274984206279511399"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Thomas Schilling">

</a></span></div>
<a href='http://www.blogger.com/profile/04274984206279511399' rel='nofollow'>Thomas Schilling</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4004366549817031533'>
<p>
How are those two loops equivalent?  You&#39;re not printing anything in the Python loop.  I/O buffering etc. can eat quite a bit of runtime.  It would also be nice to see what the particular improvements in this &quot;unroll-if-alt&quot; branch are.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312312734133#c4004366549817031533' title='comment permalink'>
August 2, 2011 at 9:18 PM
</a>
<span class='item-control blog-admin pid-278017577'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=4004366549817031533' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1500656059432769204'>
<a name='c1500656059432769204'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1500656059432769204'>
<p>
How about doing something like that:<br />....<br />char p[5] = &quot;%d %d&quot;<br />//and then<br />sprintf(x, p, i,i);<br />....<br /><br />?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312312790832#c1500656059432769204' title='comment permalink'>
August 2, 2011 at 9:19 PM
</a>
<span class='item-control blog-admin pid-577660694'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1500656059432769204' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c322236938083229206'>
<a name='c322236938083229206'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/12130268974611649068" rel="nofollow" onclick="" class="avatar-hovercard" id="av-5-12130268974611649068"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Andrew Pendleton">

</a></span></div>
<a href='http://www.blogger.com/profile/12130268974611649068' rel='nofollow'>Andrew Pendleton</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-322236938083229206'>
<p>
@Thomas the C one doesn&#39;t print anything, either; sprintf just returns a string.  printf is the one that prints.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312313132795#c322236938083229206' title='comment permalink'>
August 2, 2011 at 9:25 PM
</a>
<span class='item-control blog-admin pid-1363178237'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=322236938083229206' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3077470909634093215'>
<a name='c3077470909634093215'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://hobbs.cleverdomain.org/" rel="nofollow" onclick="" class="avatar-hovercard" id="av-6-01509054165597224740"><img src="http://img1.blogblog.com/img/openid16-rounded.gif" width="16" height="16" alt="" title="hobbs">

</a></span></div>
<a href='http://hobbs.cleverdomain.org/' rel='nofollow'>hobbs</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3077470909634093215'>
<p>
@Thomas the C one doesn&#39;t print anything either, so it sounds pretty equivalent to me.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312313216744#c3077470909634093215' title='comment permalink'>
August 2, 2011 at 9:26 PM
</a>
<span class='item-control blog-admin pid-586805703'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3077470909634093215' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6210890615556329311'>
<a name='c6210890615556329311'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/06875432206357419172" rel="nofollow" onclick="" class="avatar-hovercard" id="av-7-06875432206357419172"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://4.bp.blogspot.com/_aoxvifxtAEg/S1i_0RTYvwI/AAAAAAAAW1w/j9OuUFj4ZkI/S45/b52bc71fb15db17f585b912aed45b217.png" title="Johan Tibell">

<noscript><img src="http://4.bp.blogspot.com/_aoxvifxtAEg/S1i_0RTYvwI/AAAAAAAAW1w/j9OuUFj4ZkI/S45/b52bc71fb15db17f585b912aed45b217.png" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/06875432206357419172' rel='nofollow'>Johan Tibell</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6210890615556329311'>
<p>
This doesn&#39;t really have anything to do with dynamic compilation, but cross module optimization. There are static compilers, such as the Glasgow Haskell Compiler, that do this. If the compilation strategy depended on runtime data (e.g. measure hot spots), it would be dynamic compilation.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312313311167#c6210890615556329311' title='comment permalink'>
August 2, 2011 at 9:28 PM
</a>
<span class='item-control blog-admin pid-115079396'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6210890615556329311' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c4459479332389604269'>
<a name='c4459479332389604269'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://sean-chittenden.myopenid.com/" rel="nofollow" onclick="" class="avatar-hovercard" id="av-8-05676528363564309387"><img src="http://img1.blogblog.com/img/openid16-rounded.gif" width="16" height="16" alt="" title="Sean">

</a></span></div>
<a href='http://sean-chittenden.myopenid.com/' rel='nofollow'>Sean</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4459479332389604269'>
<p>
*yawn* If you want to see ridiculously fast string formatting, look at the Boost&#39;s Spirit library (specifically Karma). Small test case, but point well illustrated: http://www.boost.org/doc/libs/1_47_0/libs/spirit/doc/html/spirit/karma/performance_measurements/numeric_performance/int_performance.html Or look at Spirit&#39;s input parser for even integers: http://alexott.blogspot.com/2010/01/boostspirit2-vs-atoi.html
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312314985665#c4459479332389604269' title='comment permalink'>
August 2, 2011 at 9:56 PM
</a>
<span class='item-control blog-admin pid-977941504'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=4459479332389604269' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c207875433882257655'>
<a name='c207875433882257655'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/17017456817083804792" rel="nofollow" onclick="" class="avatar-hovercard" id="av-9-17017456817083804792"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://1.bp.blogspot.com/-DJs3bVn7ZH0/Tb3MupJ7oqI/AAAAAAAAANg/s7ZUXOlGoss/s45/anto-bn3.jpg" title="Antonio Cuni">

<noscript><img src="http://1.bp.blogspot.com/-DJs3bVn7ZH0/Tb3MupJ7oqI/AAAAAAAAANg/s7ZUXOlGoss/s45/anto-bn3.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/17017456817083804792' rel='nofollow'>Antonio Cuni</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-207875433882257655'>
<p>
@JoeHillen: the unroll-if-alt branch is inside the main pypy repo on bitbucket (together with all the other branches).<br /><br />@Greg: yes, we checked the generated code, it&#39;s not optimized away.<br /><br />@anonymous: why it should be any faster? String literals in C are constants, it&#39;s not that you need to create a new one at each iteration<br /><br />@Johan: note that the PyPy approach can generate code optimized for a formatting string loaded from a disk, or computed at runtime. No static compiler could do that.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312315070217#c207875433882257655' title='comment permalink'>
August 2, 2011 at 9:57 PM
</a>
<span class='item-control blog-admin pid-957825604'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=207875433882257655' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c9006643932216839467'>
<a name='c9006643932216839467'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-9006643932216839467'>
<p>
What machine are you on that an int is 64 bits?  Hardly anybody uses ILP64 or SILP64 data models ( http://en.wikipedia.org/wiki/64-bit#Specific_C-language_data_models ).  Maybe a fourth try is in order? :P
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312315836267#c9006643932216839467' title='comment permalink'>
August 2, 2011 at 10:10 PM
</a>
<span class='item-control blog-admin pid-369153202'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=9006643932216839467' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c5927487656373714703'>
<a name='c5927487656373714703'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/06875432206357419172" rel="nofollow" onclick="" class="avatar-hovercard" id="av-11-06875432206357419172"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://4.bp.blogspot.com/_aoxvifxtAEg/S1i_0RTYvwI/AAAAAAAAW1w/j9OuUFj4ZkI/S45/b52bc71fb15db17f585b912aed45b217.png" title="Johan Tibell">

<noscript><img src="http://4.bp.blogspot.com/_aoxvifxtAEg/S1i_0RTYvwI/AAAAAAAAW1w/j9OuUFj4ZkI/S45/b52bc71fb15db17f585b912aed45b217.png" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/06875432206357419172' rel='nofollow'>Johan Tibell</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5927487656373714703'>
<p>
Antonio, that is indeed neat.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312316042304#c5927487656373714703' title='comment permalink'>
August 2, 2011 at 10:14 PM
</a>
<span class='item-control blog-admin pid-115079396'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=5927487656373714703' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c5934681704643865363'>
<a name='c5934681704643865363'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/10131127807440335781" rel="nofollow" onclick="" class="avatar-hovercard" id="av-12-10131127807440335781"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Reid Kleckner">

</a></span></div>
<a href='http://www.blogger.com/profile/10131127807440335781' rel='nofollow'>Reid Kleckner</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5934681704643865363'>
<p>
So when are you going to teach PyPy that the result of an unused string formatting can be deleted, and then delete the loop?  ;)<br /><br />I&#39;m not sure how you&#39;d get there from a tracing JIT, though.  WIth Python, you still have to call all the formatting and stringification methods because they might have side effects.  You only get to know that the entire operation is a no-op after you&#39;ve inlined everything, but by then it will be at a low enough representation that it&#39;s hard to tell.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312319053846#c5934681704643865363' title='comment permalink'>
August 2, 2011 at 11:04 PM
</a>
<span class='item-control blog-admin pid-125472004'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=5934681704643865363' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c4906250535693137554'>
<a name='c4906250535693137554'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4906250535693137554'>
<p>
sizeof(char)==1.  By definition.  Argh.<br /><br />PS: negative karma for lying headline
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312319066504#c4906250535693137554' title='comment permalink'>
August 2, 2011 at 11:04 PM
</a>
<span class='item-control blog-admin pid-1538722597'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=4906250535693137554' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c81508328450910436'>
<a name='c81508328450910436'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-81508328450910436'>
<p>
Check that you&#39;re not spending all your time in malloc/free(). Also use the return value from a failed snprintf(), plus 1, to size your output buffer.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312319731728#c81508328450910436' title='comment permalink'>
August 2, 2011 at 11:15 PM
</a>
<span class='item-control blog-admin pid-516632443'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=81508328450910436' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8836770953439937355'>
<a name='c8836770953439937355'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/10131127807440335781" rel="nofollow" onclick="" class="avatar-hovercard" id="av-15-10131127807440335781"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Reid Kleckner">

</a></span></div>
<a href='http://www.blogger.com/profile/10131127807440335781' rel='nofollow'>Reid Kleckner</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8836770953439937355'>
<p>
@Anonymous 2: Even if all the time were spent in malloc/free, PyPy has to dynamically allocate the string data structure, as well as provide a buffer to fill with the characters from the integers, since it has no way of knowing how much space will be needed (could be a custom integer class).<br /><br />However, you&#39;re right that malloc and free are slow and a good gc system would have a faster allocator.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312320110564#c8836770953439937355' title='comment permalink'>
August 2, 2011 at 11:21 PM
</a>
<span class='item-control blog-admin pid-125472004'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=8836770953439937355' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7916479943368840430'>
<a name='c7916479943368840430'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://dev.frozeneskimo.com/" rel="nofollow" onclick=""><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="vsergeev">

</a></span></div>
<a href='http://dev.frozeneskimo.com/' rel='nofollow'>vsergeev</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7916479943368840430'>
<p>
a quick tip to minimize the math in determining your sprintf buffer size for your experiment:<br />#include &lt; stdint.h &gt;<br />len = snprintf(NULL, 0, &quot;%d %d&quot;, INT32_MIN, INT32_MIN);<br />will give you the string length required (not including null terminating byte) to fit the formatted string.<br /><br />Similarly, %lld and INT64_MIN will do the trick (on the right platform) for 64-bit signed integers.<br /><br />(not that I advocate fixed sized buffers for formatted strings based on min/max digit lengths for any real application)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312320272145#c7916479943368840430' title='comment permalink'>
August 2, 2011 at 11:24 PM
</a>
<span class='item-control blog-admin pid-204280059'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7916479943368840430' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7428487986448993372'>
<a name='c7428487986448993372'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7428487986448993372'>
<p>
You wrote:<br /><i>and compiled with GCC 4.5.2 at -O4</i><br /><br />Please read the manual of GCC. There you will see that every optimization level above 3 is handled as it would be 3. &#39;-O4&#39; is nothing else than &#39;-O3&#39;.<br /><br />It is also known that optimizing with -O3 may lead to several problems at runtime (e.g. memory delays for short programs or memory allocation failure in larger programs).<br />That&#39;s why the recommended optimization level is &#39;2&#39; (or &#39;s&#39; for embedded systems) and not &#39;3&#39;.<br /><br />Did you test with a realtime kernel?<br />How about the scheduler?<br /><br />Maybe you should double check your test environment.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312320787999#c7428487986448993372' title='comment permalink'>
August 2, 2011 at 11:33 PM
</a>
<span class='item-control blog-admin pid-1484444313'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7428487986448993372' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7606502834538440880'>
<a name='c7606502834538440880'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7606502834538440880'>
<p>
For all you complaining about test eviorment. Pypy would still have to do that internaly. If they should be truely comparable, then you need to also include snprintf inside the loop, making C even slower. Also, I doubt you will get 200% performance boost from scheduler change.<br /><br />unroll-if-alt will be included in 1.6 right? Also when will 1.6 be released?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312321666373#c7606502834538440880' title='comment permalink'>
August 2, 2011 at 11:47 PM
</a>
<span class='item-control blog-admin pid-581310144'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7606502834538440880' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1734383319348443493'>
<a name='c1734383319348443493'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/04274984206279511399" rel="nofollow" onclick="" class="avatar-hovercard" id="av-19-04274984206279511399"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Thomas Schilling">

</a></span></div>
<a href='http://www.blogger.com/profile/04274984206279511399' rel='nofollow'>Thomas Schilling</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1734383319348443493'>
<p>
@Andrew, @hobbs: Oh, sorry I overlooked the &quot;s&quot; in &quot;sprintf&quot;.  It would still be nice compare the generated machine code to explain the differences.<br /><br />Whenever, someone claims language L1 implementation A is faster than language L2 implementation B there are obvious questions about (1) fairness of comparison, (2) what is being measured.  In this case PyPy is specializing on the format string interpreter (does that require library annotations?) which a C compiler could do in principle here (but probably doesn&#39;t.)  So, I&#39;m always a bit suspicious when I see these kinds of comparisons.<br /><br />@Johan: GHC&#39;s cross-module optimization often comes at the expense of binary compatibility.  A JIT has a big advantage here.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312321825425#c1734383319348443493' title='comment permalink'>
August 2, 2011 at 11:50 PM
</a>
<span class='item-control blog-admin pid-278017577'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1734383319348443493' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7105823921529412975'>
<a name='c7105823921529412975'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/17762358075557755436" rel="nofollow" onclick="" class="avatar-hovercard" id="av-20-17762358075557755436"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://2.bp.blogspot.com/_eJJgehXCsQ4/TE10UANSEKI/AAAAAAAAAIc/qVtc1CFUUAQ/S45/rd.png" title="illume">

<noscript><img src="http://2.bp.blogspot.com/_eJJgehXCsQ4/TE10UANSEKI/AAAAAAAAAIc/qVtc1CFUUAQ/S45/rd.png" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/17762358075557755436' rel='nofollow'>illume</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7105823921529412975'>
<p>
The python faster than C day has come!  Congrats.<br /><br />ps. Did you try it with (Link Time Optimization)LTO?  that is with gcc the option: -flto ?  Also, are you using PGO with gcc?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312324418330#c7105823921529412975' title='comment permalink'>
August 3, 2011 at 12:33 AM
</a>
<span class='item-control blog-admin pid-1228691345'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7105823921529412975' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c2792433294640140627'>
<a name='c2792433294640140627'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/03289731826123761949" rel="nofollow" onclick="" class="avatar-hovercard" id="av-21-03289731826123761949"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="nekto0n">

</a></span></div>
<a href='http://www.blogger.com/profile/03289731826123761949' rel='nofollow'>nekto0n</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2792433294640140627'>
<p>
@salmon According to this <a href="https://bitbucket.org/pypy/pypy/changeset/f45b04b331a6#chg-pypy/objspace/std/newformat.py" rel="nofollow">commit</a> new style formatting is supported too.<br /><br />Someone correct me if I&#39;m wrong.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312324802383#c2792433294640140627' title='comment permalink'>
August 3, 2011 at 12:40 AM
</a>
<span class='item-control blog-admin pid-701750760'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2792433294640140627' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1284618952149817016'>
<a name='c1284618952149817016'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1284618952149817016'>
<p>
I think that computation is not correct yet. IIRC, you only get 20 digits in an unsigned 64-bit quantity.<br /><br />Worse, (again IIRC) sprintf is locale dependent. It may insert thousands separators.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312325350286#c1284618952149817016' title='comment permalink'>
August 3, 2011 at 12:49 AM
</a>
<span class='item-control blog-admin pid-1369934903'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1284618952149817016' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3559546173966141322'>
<a name='c3559546173966141322'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3559546173966141322'>
<p>
This is not a good performance test because all printf function have high constant complexity, without looking at format string, check it
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312327866291#c3559546173966141322' title='comment permalink'>
August 3, 2011 at 1:31 AM
</a>
<span class='item-control blog-admin pid-2135907388'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3559546173966141322' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3674129131548011685'>
<a name='c3674129131548011685'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/04148620174874622501" rel="nofollow" onclick="" class="avatar-hovercard" id="av-24-04148620174874622501"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://3.bp.blogspot.com/_teIzpwTqvkE/SXpdrxgzD6I/AAAAAAAAACI/czCzawSAev4/S45/member_5046483.jpg" title="Strohan">

<noscript><img src="http://3.bp.blogspot.com/_teIzpwTqvkE/SXpdrxgzD6I/AAAAAAAAACI/czCzawSAev4/S45/member_5046483.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/04148620174874622501' rel='nofollow'>Strohan</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3674129131548011685'>
<p>
wouldn&#39;t it be better to run your test with a more modern c++ library like cstring?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312332860506#c3674129131548011685' title='comment permalink'>
August 3, 2011 at 2:54 AM
</a>
<span class='item-control blog-admin pid-836724605'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3674129131548011685' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c9011623056493186601'>
<a name='c9011623056493186601'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-9011623056493186601'>
<p>
If 1.9x is &quot;almost 2x faster&quot;, then what is &quot;1x faster&quot;?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312337240068#c9011623056493186601' title='comment permalink'>
August 3, 2011 at 4:07 AM
</a>
<span class='item-control blog-admin pid-884968592'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=9011623056493186601' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8056695997075130866'>
<a name='c8056695997075130866'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/00613199471248624159" rel="nofollow" onclick="" class="avatar-hovercard" id="av-26-00613199471248624159"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Poposhka">

</a></span></div>
<a href='http://www.blogger.com/profile/00613199471248624159' rel='nofollow'>Poposhka</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8056695997075130866'>
<p>
post the Assembly code, map files and call graph or it didnt happen!!!!!!!!
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312344564543#c8056695997075130866' title='comment permalink'>
August 3, 2011 at 6:09 AM
</a>
<span class='item-control blog-admin pid-1721452413'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=8056695997075130866' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6225551896160358432'>
<a name='c6225551896160358432'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/14271127522458529063" rel="nofollow" onclick="" class="avatar-hovercard" id="av-27-14271127522458529063"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://3.bp.blogspot.com/_7-fspE8NrW0/SeOD_rhnswI/AAAAAAAAABk/5z0JIUTA2iQ/S45/zoom_twitter1.gif" title="Reinis I.">

<noscript><img src="http://3.bp.blogspot.com/_7-fspE8NrW0/SeOD_rhnswI/AAAAAAAAABk/5z0JIUTA2iQ/S45/zoom_twitter1.gif" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/14271127522458529063' rel='nofollow'>Reinis I.</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6225551896160358432'>
<p>
&quot;one time faster&quot; is bad English.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312352020013#c6225551896160358432' title='comment permalink'>
August 3, 2011 at 8:13 AM
</a>
<span class='item-control blog-admin pid-1535647414'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6225551896160358432' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6625735662149629937'>
<a name='c6625735662149629937'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6625735662149629937'>
<p>
What performance impact does the malloc/free produce in the C code? AFAIK Python allocates memory in larger chunks from the operating system. Probably Python does not have to call malloc after initialization after it allocated the first chunk.<br /><br />AFAIK each malloc/free crosses the boundaries between user-mode/kernel-mode.<br /><br />So, IMHO you should compare the numbers of a C program which<br />does not allocate dynamic memory more than once and uses an internal memory management system.<br /><br />These numbers would be interesting.<br /><br />Have fun
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312357118659#c6625735662149629937' title='comment permalink'>
August 3, 2011 at 9:38 AM
</a>
<span class='item-control blog-admin pid-248563362'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6625735662149629937' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6708170690935286644'>
<a name='c6708170690935286644'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/14035230583687290855" rel="nofollow" onclick="" class="avatar-hovercard" id="av-29-14035230583687290855"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Damian Cugley">

</a></span></div>
<a href='http://www.blogger.com/profile/14035230583687290855' rel='nofollow'>Damian Cugley</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6708170690935286644'>
<p>
The point here is not that the Python implementation of formatting is better than the C standard library, but that dynamic optimisation can make a big difference.  The first time the formatting operator is called its format string is parsed and assembly code for assembling the output generated. The next 999999 times that assembly code is used without doing the parsing step. Even if sprintf were defined locally, a static compiler can&#8217;t optimise away the parsing step, so that work is done redundantly every time around the loop.<br /><br />In a language like Haskell something similar happens. A string formatting function in the style of sprintf would take a format string as a parameter and return a new function that formats its arguments according to that string. The new function corresponds to the specialized assembly code generated by PyPy&#8217;s JIT. I think if you wanted to give the static compiler the opportunity to do optimizations that PyPy does at runtime you would need to use a custom type rather than a string as the formatting spec. (NB my knowledge of functional-language implementation is 20 years out of date so take the above with a pinch of salt.)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312357475889#c6708170690935286644' title='comment permalink'>
August 3, 2011 at 9:44 AM
</a>
<span class='item-control blog-admin pid-510283621'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6708170690935286644' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c415195237064488124'>
<a name='c415195237064488124'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/05692608289845036146" rel="nofollow" onclick="" class="avatar-hovercard" id="av-30-05692608289845036146"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Dave Kirby">

</a></span></div>
<a href='http://www.blogger.com/profile/05692608289845036146' rel='nofollow'>Dave Kirby</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-415195237064488124'>
<p>
@Anonymous:<br /><br />The C code shown does not do any malloc/free.  The sprintf function formats the string into the char array x, which is allocated on the stack.  It is highly unlikely that the sprintf function itself mallocs any memory.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312372205351#c415195237064488124' title='comment permalink'>
August 3, 2011 at 1:50 PM
</a>
<span class='item-control blog-admin pid-924310660'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=415195237064488124' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1076746612002500813'>
<a name='c1076746612002500813'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/06797024508394246580" rel="nofollow" onclick="" class="avatar-hovercard" id="av-31-06797024508394246580"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://2.bp.blogspot.com/_4Pv1u9ozKR0/TCcePDCwtvI/AAAAAAAAAG0/woSSEz19128/S45/Paul_128.png" title="Paul Jaros">

<noscript><img src="http://2.bp.blogspot.com/_4Pv1u9ozKR0/TCcePDCwtvI/AAAAAAAAAG0/woSSEz19128/S45/Paul_128.png" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/06797024508394246580' rel='nofollow'>Paul Jaros</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1076746612002500813'>
<p>
I&#39;m following the progress on pypy since many years and the potential is and has always been here. And boy, pypy has come a looong way.<br /><br />You are my favorite open-source project and I am excited to see what will happen next. Go pypy-team, go!
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312382724015#c1076746612002500813' title='comment permalink'>
August 3, 2011 at 4:45 PM
</a>
<span class='item-control blog-admin pid-1377481542'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1076746612002500813' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c4060331138568834151'>
<a name='c4060331138568834151'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/10486237398155393850" rel="nofollow" onclick="" class="avatar-hovercard" id="av-32-10486237398155393850"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Stepan Koltsov">

</a></span></div>
<a href='http://www.blogger.com/profile/10486237398155393850' rel='nofollow'>Stepan Koltsov</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4060331138568834151'>
<p>
PyPy does nothing 1.9 times faster than C.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312392306413#c4060331138568834151' title='comment permalink'>
August 3, 2011 at 7:25 PM
</a>
<span class='item-control blog-admin pid-1640087335'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=4060331138568834151' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c442286616724560885'>
<a name='c442286616724560885'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/00398184141815003668" rel="nofollow" onclick="" class="avatar-hovercard" id="av-33-00398184141815003668"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="&#9883;">

</a></span></div>
<a href='http://www.blogger.com/profile/00398184141815003668' rel='nofollow'>&#9883;</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-442286616724560885'>
<p>
You wrote: &quot;We think this demonstrates the incredible potential of dynamic compilation, ...&quot;<br /><br />I disagree. You tested a microbenchmark. Claims about compiler or language X winning over Y should be made after observing patterns in real programs. That is: execute or analyse real C programs which are making use of &#39;sprintf&#39;, record their use of &#39;sprintf&#39;, create a statistics out of the recorded data and then finally use the statistical distributions to create Python programs with a similar distribution of calls to &#39;%&#39;.<br /><br />Trivial microbenchmarks can be deceiving.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312397474813#c442286616724560885' title='comment permalink'>
August 3, 2011 at 8:51 PM
</a>
<span class='item-control blog-admin pid-620121459'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=442286616724560885' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3959527016695567914'>
<a name='c3959527016695567914'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://sqlrob.livejournal.com/" rel="nofollow" onclick="" class="avatar-hovercard" id="av-34-07170839222173960078"><img src="http://img1.blogblog.com/img/openid16-rounded.gif" width="16" height="16" alt="" title="sqlrob">

</a></span></div>
<a href='http://sqlrob.livejournal.com/' rel='nofollow'>sqlrob</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3959527016695567914'>
<p>
@Dave Kirby:<br /><br />There are two C programs there. One on the stack, one with a malloc / free in the loop.<br /><br />Which one is used for the faster claim?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312416704024#c3959527016695567914' title='comment permalink'>
August 4, 2011 at 2:11 AM
</a>
<span class='item-control blog-admin pid-929587297'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3959527016695567914' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c4068929081443684480'>
<a name='c4068929081443684480'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-35-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4068929081443684480'>
<p>
@Anonymous: this branch, unroll-if-alt, will not be included in the release 1.6, which we&#39;re doing right now (it should be out any day now).  It will only be included in the next release, which we hope to do soonish.  It will also be in the nightly builds as soon as it is merged.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312444077943#c4068929081443684480' title='comment permalink'>
August 4, 2011 at 9:47 AM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=4068929081443684480' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7104690340776437777'>
<a name='c7104690340776437777'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/02568908952592933174" rel="nofollow" onclick="" class="avatar-hovercard" id="av-36-02568908952592933174"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Connelly Barnes">

</a></span></div>
<a href='http://www.blogger.com/profile/02568908952592933174' rel='nofollow'>Connelly Barnes</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7104690340776437777'>
<p>
Is string/IO performance in general being worked on in Pypy? Last I looked Pypy showed it was faster than CPython in many cases on its benchmarks page, but for many string/IO intensive tasks I tried Pypy v1.5 on, it was slower.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312487438070#c7104690340776437777' title='comment permalink'>
August 4, 2011 at 9:50 PM
</a>
<span class='item-control blog-admin pid-1847344837'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7104690340776437777' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c3710046042028182472'>
<a name='c3710046042028182472'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/11410841070239382771" rel="nofollow" onclick="" class="avatar-hovercard" id="av-37-11410841070239382771"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Maciej Fijalkowski">

</a></span></div>
<a href='http://www.blogger.com/profile/11410841070239382771' rel='nofollow'>Maciej Fijalkowski</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3710046042028182472'>
<p>
@Connelly yes, for some definition of working (being thought about). that&#39;s one reason why twisted_tcp is slower than other twisted benchmarks. We however welcome simple benchmarks as bugs on the issue tracker
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312524402542#c3710046042028182472' title='comment permalink'>
August 5, 2011 at 8:06 AM
</a>
<span class='item-control blog-admin pid-1633129755'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3710046042028182472' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c2471477793777742440'>
<a name='c2471477793777742440'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="tt">

</span></div>
tt
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2471477793777742440'>
<p>
This is a horribly flawed benchmark which illustrates absolutely nothing. First of all, an optimizing JIT should be (easily) able to detect that your inner loop has no side effects and optimize it away. Secondly, with code like that you should expect all kinds of weirds transformations by the compiler, hence - you can&#39;t be really sure what you are comparing here. As many here have pointed out, you should compare the output assembly.<br /><br />Anyway, if you really want to do a benchmark like that, do it the right way. Make the loop grow a string by continuous appending and write the string to the file in the end (time the loop only). This way you will get accurate results which really compare the performance of two compilers performing the same task.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312535128835#c2471477793777742440' title='comment permalink'>
August 5, 2011 at 11:05 AM
</a>
<span class='item-control blog-admin pid-1768182739'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2471477793777742440' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c9110238064234290648'>
<a name='c9110238064234290648'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-9110238064234290648'>
<p>
try in nodejs:<br /><br />var t = (new Date()).getTime();<br /><br />function main() {<br />    var x;<br />    for (var i = 0; i &lt; 10000000; i++)<br />        x = i + &quot; &quot; + i;<br />    return x;<br />}<br />x = main();<br /><br />t = (new Date()).getTime() - t;<br />console.log(x + &quot;, &quot; + t);
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312540127516#c9110238064234290648' title='comment permalink'>
August 5, 2011 at 12:28 PM
</a>
<span class='item-control blog-admin pid-672573687'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=9110238064234290648' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c2293194787886399905'>
<a name='c2293194787886399905'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="tt">

</span></div>
tt
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2293194787886399905'>
<p>
I have now put a small, slightly more realistic benchmark. I used following code.<br /><br /><b>Python </b><br /><br />def main():<br /> x = &quot;&quot;<br /> for i in xrange(50000):<br />  x = &quot;%s %d&quot; % (x, i)<br /> return x<br /><br />x = main()<br /><br />f = open(&quot;log.txt&quot;, &quot;w&quot;)<br />f.write(x)<br />f.close()<br /><br /><b>C</b><br />#include <br />#include <br />#include <br /><br /><br />int main() {<br /> int i;<br />    char *x = malloc(0);<br /> FILE *file; <br /><br />    *x = 0x00;<br /><br />    for (i = 0; i &lt; 50000; i++) {<br />     char *nx = malloc(strlen(x) + 16); // +16 bytes to be on the safe side<br /><br />        sprintf(nx, &quot;%s %d&quot;, x, i);<br />        free(x);<br />        x = nx;<br />    }<br /><br /> file = fopen(&quot;log1.txt&quot;,&quot;w&quot;); <br /> fprintf(file, &quot;%s&quot;, x); <br /> fclose(file); <br />}<br /><br /><b>JavaScript (NodeJS)</b><br /><br />var fs = require(&#39;fs&#39;);<br /><br />String.prototype.format = function() {<br />    var formatted = this;<br />    for (var i = 0; i &lt; arguments.length; i++) {<br />        var regexp = new RegExp(&#39;\\{&#39;+i+&#39;\\}&#39;, &#39;gi&#39;);<br />        formatted = formatted.replace(regexp, arguments[i]);<br />    }<br />    return formatted;<br />};<br /><br /><br />function main() {<br />var x = &quot;&quot;;<br />for (var i = 0; i &lt; 50000; i++)<br /> x = &quot;{0} {1}&quot;.format(x, i);<br />return(x)<br />}<br /><br />x = main();<br />fs.writeFile(&#39;log.txt&#39;, x)<br /><br /><br />Note for JS example: I did not want to use the  stuff like i + &quot; &quot; + i because it bypasses the format function call. Obviously, using the + operator the nodejs example would be much faster (but pypy probably as well).<br /><br />Also, I used PyPy 1.5 as I did not find any precompiled PyPy 1.6 for OS X. <br /><br />Results:<br /><br />PyPy: real 0m13.307s<br />NodeJS: real 0m44.350s<br />C: real 0m1.812s
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312557339746#c2293194787886399905' title='comment permalink'>
August 5, 2011 at 5:15 PM
</a>
<span class='item-control blog-admin pid-1768182739'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2293194787886399905' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8196183060405841801'>
<a name='c8196183060405841801'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/00398184141815003668" rel="nofollow" onclick="" class="avatar-hovercard" id="av-41-00398184141815003668"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="&#9883;">

</a></span></div>
<a href='http://www.blogger.com/profile/00398184141815003668' rel='nofollow'>&#9883;</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8196183060405841801'>
<p>
@tt: This is a very <b>inefficient</b> C/C++ implementation of the idea &quot;make a loop grow a string by continuous appending and write the string to the file in the end&quot;. In addition, it appears to be an <b>uncommon</b> piece of C/C++ code.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312565567731#c8196183060405841801' title='comment permalink'>
August 5, 2011 at 7:32 PM
</a>
<span class='item-control blog-admin pid-620121459'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=8196183060405841801' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7034552848818282014'>
<a name='c7034552848818282014'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="tt">

</span></div>
tt
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7034552848818282014'>
<p>
Well, I never said anything about writing super efficient C code. Anyway, I don&#39;t see how you want to implement string formatting more efficiently  - if we talk about general usage scenario. You can&#39;t really reuse the old string buffer, you basically have to allocate new one each time the string grows. Or pre-allocate a larger string buffer and do some substring copies (which will result in a much more complicated code). Anyway, the malloc() on OS X is very fast.<br /><br />My point is: even this C code, which you call inefficient is around 6 times faster then pypy 1.5
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312570995698#c7034552848818282014' title='comment permalink'>
August 5, 2011 at 9:03 PM
</a>
<span class='item-control blog-admin pid-2026006255'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7034552848818282014' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8973221726765232994'>
<a name='c8973221726765232994'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/00307747349924930767" rel="nofollow" onclick="" class="avatar-hovercard" id="av-43-00307747349924930767"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Antiplutocrat">

</a></span></div>
<a href='http://www.blogger.com/profile/00307747349924930767' rel='nofollow'>Antiplutocrat</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8973221726765232994'>
<p>
@tt except one of the main points of the post was that they had implemented a *new* feature (unroll-if-alt, I believe) that sped things up a bunch. <br /><br />I&#39;m not sure how much any comparison that *doesn&#39;t* use this new feature is worth ...<br /><br />So many haters ! ;)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312574923914#c8973221726765232994' title='comment permalink'>
August 5, 2011 at 10:08 PM
</a>
<span class='item-control blog-admin pid-1226982973'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=8973221726765232994' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8120059732906295773'>
<a name='c8120059732906295773'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8120059732906295773'>
<p>
The compare is good because both use standard langauge fetatures to do the same thing, using a third part lib is not the same, then I have to code the same implant in RPython and people would still complain do to RPython often being faster then C regardless.<br /><br />Python could have detected that the loop is not doing anything, but give that one value had a __str__ call it could&#39;ve broken some code. Anyway, C compiler could also see that you didn&#39;t do anything with the value and optimalize it the same way.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312588758842#c8120059732906295773' title='comment permalink'>
August 6, 2011 at 1:59 AM
</a>
<span class='item-control blog-admin pid-581310144'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=8120059732906295773' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c82206416910885214'>
<a name='c82206416910885214'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="tt">

</span></div>
tt
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-82206416910885214'>
<p>
@Antiplutocrat:<br />Honestly, I expected a bit more objectivity from posters here. I am really disappointed that you compare me to &quot;haters&quot; (whoever that may be). <br /><br />Your point about unroll-if-alt is absolutely valid and I myself have explicitly stated that I did not use that feature. At no point I have refuted that the original blog post was wrong - it is still very well possible that PyPy 1.6 is faster then C in this usage scenario. The main goal of my post was to make clear that the original benchmarks were flawed, as they grant the compiler too much  space for unpredictable optimizations. I believe that my benchmark code produces more realistic results and I suggest that the authors of this blog entry re-run the benchmark using my code (or something similar, which controls for unpredictable optimizations).
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312625124706#c82206416910885214' title='comment permalink'>
August 6, 2011 at 12:05 PM
</a>
<span class='item-control blog-admin pid-1496167328'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=82206416910885214' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3908814753897430340'>
<a name='c3908814753897430340'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3908814753897430340'>
<p>
@tt: Code is doing something else so it&#39;s not the same.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1312644908344#c3908814753897430340' title='comment permalink'>
August 6, 2011 at 5:35 PM
</a>
<span class='item-control blog-admin pid-581310144'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3908814753897430340' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c2494310827119670528'>
<a name='c2494310827119670528'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2494310827119670528'>
<p>
Only a quick note OffTopic: in the python FAQ, one could update adding PyPy besides Psyco in the performance tips:<br /><br />http://docs.python.org/faq/programming.html#my-program-is-too-slow-how-do-i-speed-it-up
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1313165232055#c2494310827119670528' title='comment permalink'>
August 12, 2011 at 6:07 PM
</a>
<span class='item-control blog-admin pid-68868247'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2494310827119670528' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3529683872234984787'>
<a name='c3529683872234984787'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/00398184141815003668" rel="nofollow" onclick="" class="avatar-hovercard" id="av-48-00398184141815003668"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="&#9883;">

</a></span></div>
<a href='http://www.blogger.com/profile/00398184141815003668' rel='nofollow'>&#9883;</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3529683872234984787'>
<p>
@Anonymous: I agree with your other paragraphs, but not with the one where you wrote that &quot;... OLDER version (4.5.x) of GCC whilst a newer version (4.6.x) is available with major improvements to the optimizer in general&quot;.<br /><br />I am not sure, what &quot;major improvements&quot; in GCC 4.6 do you mean? Do you have benchmark numbers to back up your claim?<br /><br />As far as well-written C code is concerned, in my opinion, there haven&#39;t been any &quot;major improvements&quot; in GCC for more than 5+ years. There have been improvements of a few percent in a limited number of cases - but nothing major.<br /><br />Even LTO (link-time optimization (and lets hope it will be safe/stable to use when GCC 4.7 is released)) isn&#39;t a major boost. I haven&#39;t seen LTO being able to optimize calls to functions living in dynamic libraries (the bsearch(3) function would be a nice candidate). And I also haven&#39;t seen GCC&#39;s LTO being able to optimize calls to/within the Qt GUI library when painting pixels or lines onto the screen.<br /><br />The main point of the PyPy article was that run-time optimizations in PyPy have a chance of surpassing GCC in certain cases.<br /><br />Personally, I probably wouldn&#39;t willingly choose to work on a project like PyPy - since, err, I believe that hard-core JIT optimizations on a dynamically typed language like Python are generally a bad idea - but I am (in a positive way) eager to see what the PyPy team will be able to do in this field in the years to come.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1313343250673#c3529683872234984787' title='comment permalink'>
August 14, 2011 at 7:34 PM
</a>
<span class='item-control blog-admin pid-620121459'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3529683872234984787' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c29307641900913078'>
<a name='c29307641900913078'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-29307641900913078'>
<p>
@&#9883;: I indeed do not have benchmarks for these claims, but GCC 4.6 indeed added some newer optimization techniques to its assortment. Maybe these may not have had a significant influence in said case but they might have somewhere else. I&#39;m merely saying: you can&#39;t really compare the latest hot inventions with something that is surpassed (e.g. compare Java 7 to a program output by Visual C++ back form the VS 2003 IDE).<br /><br />All by all, I&#39;m not saying that Python sucks and don&#39;t want to sound like a fanboy (on the contrary, Linux uses a great deal of Python and if this could mean a major speedup, then why the hell not ;).<br /><br />I guess I was pissed off because the written article sounds very much fanboyish and pro-Python (just look at the title alone).
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1313349444954#c29307641900913078' title='comment permalink'>
August 14, 2011 at 9:17 PM
</a>
<span class='item-control blog-admin pid-1703658889'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=29307641900913078' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c4441342449976828444'>
<a name='c4441342449976828444'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4441342449976828444'>
<p>
So a loop that doesn&#39;t print in Python is compared to a loop in C that does and that was compiled on one of the slowest C compilers out there.<br /><br /><a href="http://linuxhaters.blogspot.ca/" rel="nofollow">YearOfTheLinuxDesktopIsAtHand(TM)</a>
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1351790758797#c4441342449976828444' title='comment permalink'>
November 1, 2012 at 6:25 PM
</a>
<span class='item-control blog-admin pid-187085006'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=4441342449976828444' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6085220478226409773'>
<a name='c6085220478226409773'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/09503128896817151851" rel="nofollow" onclick="" class="avatar-hovercard" id="av-51-09503128896817151851"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="//lh4.googleusercontent.com/-OgD1ILIsh14/AAAAAAAAAAI/AAAAAAAAABo/U4HCQzU3bn8/s512-c/photo.jpg" title="C. Timmerman">

<noscript><img src="//lh4.googleusercontent.com/-OgD1ILIsh14/AAAAAAAAAAI/AAAAAAAAABo/U4HCQzU3bn8/s512-c/photo.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/09503128896817151851' rel='nofollow'>C. Timmerman</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6085220478226409773'>
<p>
@Anonymous, &quot;the C one doesn&#39;t print anything, either; sprintf just returns a string. printf is the one that prints.&quot; - Andrew Pendleton, this page, August 2, 2011 9:25 PM
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html?showComment=1352734568201#c6085220478226409773' title='comment permalink'>
November 12, 2012 at 4:36 PM
</a>
<span class='item-control blog-admin pid-1140643154'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6085220478226409773' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
</dl>
</div>
<p class='comment-footer'>
<a href='http://www.blogger.com/comment.g?blogID=3971202189709462152&amp;postID=6756589731691762127' onclick=''>Post a Comment</a>
</p>
<div id='backlinks-container'>
<div id='Blog1_backlinks-container'>
<a name='links'></a><h4>
</h4>
<p class='comment-footer'>
<a class='comment-link' href='' id='Blog1_backlinks-create-link' target='_blank'>
</a>
</p>
</div>
</div>
</div>
</div>

        </div></div>
      
<!-- google_ad_section_end -->
</div>
<div class='blog-pager' id='blog-pager'>
<span id='blog-pager-newer-link'>
<a class='blog-pager-newer-link' href='http://morepypy.blogspot.co.uk/2011/08/visualization-of-jitted-code.html' id='Blog1_blog-pager-newer-link' title='Newer Post'>Newer Post</a>
</span>
<span id='blog-pager-older-link'>
<a class='blog-pager-older-link' href='http://morepypy.blogspot.co.uk/2011/07/realtime-image-processing-in-python.html' id='Blog1_blog-pager-older-link' title='Older Post'>Older Post</a>
</span>
<a class='home-link' href='http://morepypy.blogspot.co.uk/'>Home</a>
</div>
<div class='clear'></div>
<div class='post-feeds'>
<div class='feed-links'>
Subscribe to:
<a class='feed-link' href='http://morepypy.blogspot.com/feeds/6756589731691762127/comments/default' target='_blank' type='application/atom+xml'>Post Comments (Atom)</a>
</div>
</div>
<script type="text/javascript">window.___gcfg = {'lang': 'en'};</script>
</div></div>
</div>
</div>
<div class='column-left-outer'>
<div class='column-left-inner'>
<aside>
<div class='sidebar section' id='sidebar-left-1'><div class='widget LinkList' id='LinkList1'>
<h2>Links of Interest</h2>
<div class='widget-content'>
<ul>
<li><a href='http://pypy.org/'>PyPy Homepage</a></li>
<li><a href='http://doc.pypy.org/'>Dev Documentation</a></li>
<li><a href='http://mail.python.org/mailman/listinfo/pypy-dev'>Mailing List</a></li>
</ul>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=LinkList&widgetId=LinkList1&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("LinkList1"));' target='configLinkList1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget HTML' id='HTML2'>
<h2 class='title'>Donate</h2>
<div class='widget-content'>
<a href="http://pypy.org/py3donate.html">Donation page</a>

<!--

<script type="text/javascript">
function validateAmount(amount){
       if(amount.value.match( /^[0-9]+(\.([0-9]+))?$/)){
               return true;
       }else{
               alert('You must enter a valid donation.');
               amount.focus();
               return false;
       }
}
</script>
<form action="https://checkout.google.com/cws/v2/Donations/622836985124940/checkoutForm" id="BB_BuyButtonForm" method="post" name="BB_BuyButtonForm" onsubmit="return validateAmount(this.item_price_1)" target="_top">
   <input name="item_name_1" type="hidden" value="PyPy Directed Donation via Software Freedom Conservancy, Inc."/>
   <input name="item_description_1" type="hidden" value="This is a donation to the Software Freedom Conservancy, Inc. The donation will be directed for the PyPy project."/>
   <input name="item_quantity_1" type="hidden" value="1"/>
   <input name="item_currency_1" type="hidden" value="USD"/>
   <input name="item_is_modifiable_1" type="hidden" value="true"/>
   <input name="item_min_price_1" type="hidden" value="5.0"/>
   <input name="item_max_price_1" type="hidden" value="25000.0"/>
   <input name="_charset_" type="hidden" value="utf-8"/>
   <table cellpadding="5" cellspacing="0" width="1%">
       <tr>
           <td align="left" nowrap="nowrap" width="1%">&#x24; <input id="item_price_1" name="item_price_1" onfocus="this.style.color='black'; this.value='';" size="11" style="color:grey;" type="text" value="Enter Amount"/>
           </td>
       </tr>
       <tr>
           <td align="left" width="1%">
               <input alt="Donate" src="https://checkout.google.com/buttons/donateNow.gif?merchant_id=622836985124940&amp;w=115&amp;h=50&amp;style=white&amp;variant=text&amp;loc=en_US" type="image"/>
           </td>
       </tr>
   </table>
</form>

<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="J268ZTLRE2BW8" />
<input type="image" src="https://www.paypal.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!" />
<img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1" />
</form>
-->
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=HTML&widgetId=HTML2&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML2"));' target='configHTML2' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div><div class='widget BlogArchive' id='BlogArchive1'>
<h2>Blog Archive</h2>
<div class='widget-content'>
<div id='ArchiveList'>
<div id='BlogArchive1_ArchiveList'>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2014-01-01T00:00:00%2B01:00&amp;updated-max=2015-01-01T00:00:00%2B01:00&amp;max-results=12'>2014</a>
<span class='post-count' dir='ltr'>(12)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2013-01-01T00:00:00%2B01:00&amp;updated-max=2014-01-01T00:00:00%2B01:00&amp;max-results=46'>2013</a>
<span class='post-count' dir='ltr'>(46)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(8)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2012-01-01T00:00:00%2B01:00&amp;updated-max=2013-01-01T00:00:00%2B01:00&amp;max-results=44'>2012</a>
<span class='post-count' dir='ltr'>(44)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate expanded'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy toggle-open'>&#9660;&#160;</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2011-01-01T00:00:00%2B01:00&amp;updated-max=2012-01-01T00:00:00%2B01:00&amp;max-results=43'>2011</a>
<span class='post-count' dir='ltr'>(43)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate expanded'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy toggle-open'>&#9660;&#160;</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(5)</span>
<ul class='posts'>
<li><a href='http://morepypy.blogspot.co.uk/2011/08/wrapping-c-libraries-with-reflection.html'>Wrapping C++ Libraries with Reflection &#8212; Status Re...</a></li>
<li><a href='http://morepypy.blogspot.co.uk/2011/08/we-need-software-transactional-memory.html'>We need Software Transactional Memory</a></li>
<li><a href='http://morepypy.blogspot.co.uk/2011/08/pypy-16-kickass-panda.html'>PyPy 1.6 - kickass panda</a></li>
<li><a href='http://morepypy.blogspot.co.uk/2011/08/visualization-of-jitted-code.html'>Visualization of JITted code</a></li>
<li><a href='http://morepypy.blogspot.co.uk/2011/08/pypy-is-faster-than-c-again-string.html'>PyPy is faster than C, again: string formatting</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2010-01-01T00:00:00%2B01:00&amp;updated-max=2011-01-01T00:00:00%2B01:00&amp;max-results=44'>2010</a>
<span class='post-count' dir='ltr'>(44)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2009-01-01T00:00:00%2B01:00&amp;updated-max=2010-01-01T00:00:00%2B01:00&amp;max-results=38'>2009</a>
<span class='post-count' dir='ltr'>(38)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2008-01-01T00:00:00%2B01:00&amp;updated-max=2009-01-01T00:00:00%2B01:00&amp;max-results=50'>2008</a>
<span class='post-count' dir='ltr'>(62)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(10)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(8)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2007-01-01T00:00:00%2B01:00&amp;updated-max=2008-01-01T00:00:00%2B01:00&amp;max-results=19'>2007</a>
<span class='post-count' dir='ltr'>(19)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2007_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2007_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2007_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
</li>
</ul>
</div>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=BlogArchive&widgetId=BlogArchive1&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("BlogArchive1"));' target='configBlogArchive1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget Profile' id='Profile1'>
<h2>Contributors</h2>
<div class='widget-content'>
<ul>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/01704836367815055402' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Brian Kearns</a></li>
<li><a class='profile-name-link g-profile' href='https://plus.google.com/105620569112540575905' style='background-image: url(//www.google.com/images/icons/ui/gprofile_button-16.png);'>Remi Meier</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/00985924698593515074' style='background-image: url(//www.blogger.com/img/logo-16.png);'>holger krekel</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/06300515270104686574' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Armin Rigo</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/14054821112394577330' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Alex</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/07336549270776418081' style='background-image: url(//www.blogger.com/img/logo-16.png);'>mattip</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/17017456817083804792' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Antonio Cuni</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/08077054122516411452' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Samuele Pedroni</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/15466911074154154640' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Hakan Ardo</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/08851437269223332169' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Alexander Schremmer</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/13855081749436495258' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Romain Guillebert</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/00518922641059511014' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Carl Friedrich Bolz</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/05365013582304921306' style='background-image: url(//www.blogger.com/img/logo-16.png);'>David Schneider</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/11410841070239382771' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Maciej Fijalkowski</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/06229713779852499022' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Michael Foord</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/07891333377712029026' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Wim Lavrijsen</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/06955536323236904839' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Benjamin</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/09838979615980113137' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Philip Jenvey</a></li>
</ul>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=Profile&widgetId=Profile1&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("Profile1"));' target='configProfile1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget HTML' id='HTML1'>
<h2 class='title'>Subscribe Now</h2>
<div class='widget-content'>
<a 
href="http://feeds.feedburner.com/PyPyStatusBlog" rel="alternate" title="Subscribe to the newsfeed" type="application/rss+xml"><img alt="" style="border:0" src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png"/></a><a href="http://feeds.feedburner.com/PyPyStatusBlog" rel="alternate" title="Subscribe to my feed" type="application/rss+xml"> Subscribe in a reader</a>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=HTML&widgetId=HTML1&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML1"));' target='configHTML1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div><div class='widget HTML' id='HTML3'>
<h2 class='title'>Subscriber Count</h2>
<div class='widget-content'>
<p><a href="http://feeds.feedburner.com/PyPyStatusBlog"><img width="88" style="border:0" alt="" src="http://feeds.feedburner.com/~fc/PyPyStatusBlog?bg=FF9900&amp;fg=000000&amp;anim=0" height="26"/></a></p>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=HTML&widgetId=HTML3&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML3"));' target='configHTML3' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div><div class='widget HTML' id='HTML4'>
<h2 class='title'>Google Analytics</h2>
<div class='widget-content'>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-7778406-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=HTML&widgetId=HTML4&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML4"));' target='configHTML4' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div></div>
<table border='0' cellpadding='0' cellspacing='0' class='section-columns columns-2'>
<tbody>
<tr>
<td class='first columns-cell'>
<div class='sidebar section' id='sidebar-left-2-1'></div>
</td>
<td class='columns-cell'>
<div class='sidebar section' id='sidebar-left-2-2'></div>
</td>
</tr>
</tbody>
</table>
<div class='sidebar section' id='sidebar-left-3'></div>
</aside>
</div>
</div>
<div class='column-right-outer'>
<div class='column-right-inner'>
<aside>
</aside>
</div>
</div>
</div>
<div style='clear: both'></div>
<!-- columns -->
</div>
<!-- main -->
</div>
</div>
<div class='main-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<footer>
<div class='footer-outer'>
<div class='footer-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left footer-fauxborder-left'>
<div class='fauxborder-right footer-fauxborder-right'></div>
<div class='region-inner footer-inner'>
<div class='foot section' id='footer-1'></div>
<table border='0' cellpadding='0' cellspacing='0' class='section-columns columns-2'>
<tbody>
<tr>
<td class='first columns-cell'>
<div class='foot section' id='footer-2-1'></div>
</td>
<td class='columns-cell'>
<div class='foot section' id='footer-2-2'></div>
</td>
</tr>
</tbody>
</table>
<!-- outside of the include in order to lock Attribution widget -->
<div class='foot section' id='footer-3'><div class='widget Attribution' id='Attribution1'>
<div class='widget-content' style='text-align: center;'>
Powered by <a href='http://www.blogger.com' target='_blank'>Blogger</a>.
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=Attribution&widgetId=Attribution1&action=editWidget&sectionId=footer-3' onclick='return _WidgetManager._PopupConfig(document.getElementById("Attribution1"));' target='configAttribution1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div></div>
</div>
</div>
<div class='footer-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</footer>
<!-- content -->
</div>
</div>
<div class='content-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</div>
<script type='text/javascript'>
    window.setTimeout(function() {
        document.body.className = document.body.className.replace('loading', '');
      }, 10);
  </script>
<script type='text/javascript'>
  // http://stackoverflow.com/questions/3484924/javascript-using-flattr-api-how-to-wait-until-api-is-loaded
  function loadFlattr() {
    if(typeof(FlattrLoader) == "undefined")
        setTimeout(loadFlattr, 100);
    else
        FlattrLoader.setup(); 
  }
  loadFlattr();
</script>
<script type="text/javascript">
if (window.jstiming) window.jstiming.load.tick('widgetJsBefore');
</script><script type="text/javascript" src="https://www.blogger.com/static/v1/widgets/3401484092-widgets.js"></script>
<script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script>
<script type='text/javascript'>
if (typeof(BLOG_attachCsiOnload) != 'undefined' && BLOG_attachCsiOnload != null) { window['blogger_templates_experiment_id'] = "templatesV2";window['blogger_blog_id'] = '3971202189709462152';BLOG_attachCsiOnload('item_'); }_WidgetManager._Init('//www.blogger.com/rearrange?blogID\x3d3971202189709462152','//morepypy.blogspot.co.uk/2011/08/pypy-is-faster-than-c-again-string.html','3971202189709462152');
_WidgetManager._SetDataContext([{'name': 'blog', 'data': {'blogId': '3971202189709462152', 'bloggerUrl': 'http://www.blogger.com', 'title': 'PyPy Status Blog', 'pageType': 'item', 'postId': '6756589731691762127', 'url': 'http://morepypy.blogspot.co.uk/2011/08/pypy-is-faster-than-c-again-string.html', 'canonicalUrl': 'http://morepypy.blogspot.com/2011/08/pypy-is-faster-than-c-again-string.html', 'canonicalHomepageUrl': 'http://morepypy.blogspot.com/', 'homepageUrl': 'http://morepypy.blogspot.co.uk/', 'blogspotFaviconUrl': 'http://morepypy.blogspot.co.uk/favicon.ico', 'enabledCommentProfileImages': true, 'adultContent': false, 'disableAdSenseWidget': false, 'analyticsAccountNumber': '', 'searchLabel': '', 'searchQuery': '', 'pageName': 'PyPy is faster than C, again: string formatting', 'pageTitle': 'PyPy Status Blog: PyPy is faster than C, again: string formatting', 'encoding': 'UTF-8', 'locale': 'en', 'localeUnderscoreDelimited': 'en', 'isPrivate': false, 'isMobile': false, 'isMobileRequest': false, 'mobileClass': '', 'isPrivateBlog': false, 'languageDirection': 'ltr', 'feedLinks': '\74link rel\75\42alternate\42 type\75\42application/atom+xml\42 title\75\42PyPy Status Blog - Atom\42 href\75\42http://morepypy.blogspot.com/feeds/posts/default\42 /\76\n\74link rel\75\42alternate\42 type\75\42application/rss+xml\42 title\75\42PyPy Status Blog - RSS\42 href\75\42http://morepypy.blogspot.com/feeds/posts/default?alt\75rss\42 /\76\n\74link rel\75\42service.post\42 type\75\42application/atom+xml\42 title\75\42PyPy Status Blog - Atom\42 href\75\42http://www.blogger.com/feeds/3971202189709462152/posts/default\42 /\76\n\n\74link rel\75\42alternate\42 type\75\42application/atom+xml\42 title\75\42PyPy Status Blog - Atom\42 href\75\42http://morepypy.blogspot.com/feeds/6756589731691762127/comments/default\42 /\76\n', 'meTag': '', 'openIdOpTag': '', 'latencyHeadScript': '\74script type\75\42text/javascript\42\76(function() { var b\75window,f\75\42chrome\42,g\75\42tick\42,k\75\42jstiming\42;(function(){function d(a){this.t\75{};this.tick\75function(a,d,c){var e\75void 0!\75c?c:(new Date).getTime();this.t[a]\75[e,d];if(void 0\75\75c)try{b.console.timeStamp(\42CSI/\42+a)}catch(h){}};this[g](\42start\42,null,a)}var a;b.performance\46\46(a\75b.performance.timing);var n\75a?new d(a.responseStart):new d;b.jstiming\75{Timer:d,load:n};if(a){var c\75a.navigationStart,h\75a.responseStart;0\74c\46\46h\76\75c\46\46(b[k].srt\75h-c)}if(a){var e\75b[k].load;0\74c\46\46h\76\75c\46\46(e[g](\42_wtsrt\42,void 0,c),e[g](\42wtsrt_\42,\42_wtsrt\42,h),e[g](\42tbsd_\42,\42wtsrt_\42))}try{a\75null,\nb[f]\46\46b[f].csi\46\46(a\75Math.floor(b[f].csi().pageT),e\46\0460\74c\46\46(e[g](\42_tbnd\42,void 0,b[f].csi().startE),e[g](\42tbnd_\42,\42_tbnd\42,c))),null\75\75a\46\46b.gtbExternal\46\46(a\75b.gtbExternal.pageT()),null\75\75a\46\46b.external\46\46(a\75b.external.pageT,e\46\0460\74c\46\46(e[g](\42_tbnd\42,void 0,b.external.startE),e[g](\42tbnd_\42,\42_tbnd\42,c))),a\46\46(b[k].pt\75a)}catch(p){}})();b.tickAboveFold\75function(d){var a\0750;if(d.offsetParent){do a+\75d.offsetTop;while(d\75d.offsetParent)}d\75a;750\76\75d\46\46b[k].load[g](\42aft\42)};var l\75!1;function m(){l||(l\75!0,b[k].load[g](\42firstScrollTime\42))}b.addEventListener?b.addEventListener(\42scroll\42,m,!1):b.attachEvent(\42onscroll\42,m);\n })();\74/script\076', 'mobileHeadScript': '', 'ieCssRetrofitLinks': '\74!--[if IE]\76\74script type\75\42text/javascript\42 src\75\42https://www.blogger.com/static/v1/jsbin/1163241896-ieretrofit.js\42\76\74/script\76\n\74![endif]--\076', 'view': '', 'dynamicViewsCommentsSrc': '//www.blogblog.com/dynamicviews/4224c15c4e7c9321/js/comments.js', 'dynamicViewsScriptSrc': '//www.blogblog.com/dynamicviews/76f25a6f2e06af76', 'plusOneApiSrc': 'https://apis.google.com/js/plusone.js', 'sf': 'n', 'tf': ''}}, {'name': 'skin', 'data': {'vars': {'content_padding': '10px', 'paging_background': 'transparent none no-repeat scroll top center', 'image_border_small_size': '2px', 'body_background_gradient_cap': 'url(http://www.blogblog.com/1kt/simple/gradients_light.png)', 'tabs_selected_background_color': '#eeeeee', 'body_rule_color': '#eeeeee', 'header_shadow_spread': '1px', 'header_shadow_offset_left': '-1px', 'header_padding': '30px', 'link_visited_color': '#888888', 'post_title_font': 'normal normal 22px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'tabs_text_color': '#999999', 'date_header_margin': 'inherit', 'header_background_gradient': 'none', 'header_bottom_border_size': '1px', 'content_shadow_spread_webkit': '5px', 'header_shadow_offset_top': '-1px', 'widget_title_font': 'normal bold 11px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'main_section_margin': '0px', 'keycolor': '#66bbdd', 'content_shadow_spread': '40px', 'image_background_color': '#ffffff', 'header_font': 'normal normal 60px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'header_background_color': 'transparent', 'main_border_width': '0', 'main_padding': '15px', 'tabs_border_color': '#eeeeee', 'image_text_color': '#222222', 'description_text_size': '140%', 'post_footer_background_color': '#f9f9f9', 'body_background_gradient_tile': 'url(http://www.blogblog.com/1kt/simple/body_gradient_tile_light.png)', 'page_width': 'auto', 'tabs_background_gradient': 'url(http://www.blogblog.com/1kt/simple/gradients_light.png)', 'main_padding_bottom': '30px', 'tabs_background_color': '#f5f5f5', 'image_border_large_size': '5px', 'post_margin_bottom': '25px', 'body_background_override': '', 'tabs_margin_side': '30px', 'link_hover_color': '#33aaff', 'description_text_color': '#777777', 'body_text_color': '#222222', 'content_padding_horizontal': '10px', 'endSide': 'right', 'page_width_selector': '.region-inner', 'date_header_padding': 'inherit', 'post_footer_text_color': '#666666', 'startSide': 'left', 'date_header_color': '#222222', 'tabs_font': 'normal normal 14px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'post_footer_border_color': '#eeeeee', 'body_font': 'normal normal 12px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'footer_bevel': '0', 'tabs_bevel_border_width': '1px', 'date_header_background_color': 'transparent', 'content_shadow_spread_ie': '10px', 'widget_title_text_color': '#000000', 'header_border_horizontalsize': '0', 'image_border_color': '#eeeeee', 'tabs_border_width': '1px', 'content_background_color': '#ffffff', 'link_color': '#2288bb', 'header_text_color': '#3399bb', 'date_header_letterspacing': 'inherit', 'tabs_margin_top': '0', 'main_padding_top': '30px', 'header_border_size': '1px', 'tabs_selected_text_color': '#000000', 'content_background_color_selector': '.content-inner', 'body_background_color': '#66bbdd', 'widget_alternate_text_color': '#999999'}, 'override': ''}}, {'name': 'view', 'data': {'classic': {'name': 'classic', 'url': '?view\75classic'}, 'flipcard': {'name': 'flipcard', 'url': '?view\75flipcard'}, 'magazine': {'name': 'magazine', 'url': '?view\75magazine'}, 'mosaic': {'name': 'mosaic', 'url': '?view\75mosaic'}, 'sidebar': {'name': 'sidebar', 'url': '?view\75sidebar'}, 'snapshot': {'name': 'snapshot', 'url': '?view\75snapshot'}, 'timeslide': {'name': 'timeslide', 'url': '?view\75timeslide'}}}]);
_WidgetManager._RegisterWidget('_AttributionView', new _WidgetInfo('Attribution1', 'footer-3', null, document.getElementById('Attribution1'), {'attribution': 'Powered by \74a href\75\47http://www.blogger.com\47 target\75\47_blank\47\76Blogger\74/a\76.'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HeaderView', new _WidgetInfo('Header1', 'header', null, document.getElementById('Header1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogView', new _WidgetInfo('Blog1', 'main', null, document.getElementById('Blog1'), {'cmtInteractionsEnabled': false, 'showBacklinks': true, 'postId': '6756589731691762127', 'lightboxEnabled': true, 'lightboxModuleUrl': 'https://www.blogger.com/static/v1/jsbin/1938910137-lbx.js', 'lightboxCssUrl': 'https://www.blogger.com/static/v1/v-css/2392111094-lightbox_bundle.css'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LinkListView', new _WidgetInfo('LinkList1', 'sidebar-left-1', null, document.getElementById('LinkList1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML2', 'sidebar-left-1', null, document.getElementById('HTML2'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogArchiveView', new _WidgetInfo('BlogArchive1', 'sidebar-left-1', null, document.getElementById('BlogArchive1'), {'languageDirection': 'ltr'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_ProfileView', new _WidgetInfo('Profile1', 'sidebar-left-1', null, document.getElementById('Profile1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML1', 'sidebar-left-1', null, document.getElementById('HTML1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML3', 'sidebar-left-1', null, document.getElementById('HTML3'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML4', 'sidebar-left-1', null, document.getElementById('HTML4'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_NavbarView', new _WidgetInfo('Navbar1', 'navbar', null, document.getElementById('Navbar1'), {}, 'displayModeFull'));
</script>
</body>
</html>