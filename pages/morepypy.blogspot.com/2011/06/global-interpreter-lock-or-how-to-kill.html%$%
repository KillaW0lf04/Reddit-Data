<!DOCTYPE html>
<!-- this template contains two modifications: it adds flattr buttons, and adds an image of the logo just before the title --><html class='v2' dir='ltr' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'>
<head>
<script type='text/javascript'>
  /*  <![CDATA[ */
    (function() {
      var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
        
      s.type = 'text/javascript';
      s.async = true;
      s.src = 'https://api.flattr.com/js/0.6/load.js?mode=manual&uid=cfbolz&category=text&language=en_GB';
      t.parentNode.insertBefore(s, t);
    })();
    function displayFlattrButton(postid, url, tags) {
      var flattr_tle = document.getElementById("flattr_title_" + postid).innerHTML;  
      if (flattr_tle.length > 80) {
        flattr_tle = flattr_tle.replace(/(.{0,71}) .*/, "$1 &#8230;");
        flattr_tle = flattr_tle.slice(0,79);
      }
      var flattr_dsc = document.getElementById("flattr_summary_" + postid).innerHTML;  
      flattr_dsc = flattr_dsc.replace(/<.*?>/g, "");
      if (flattr_dsc.length > 980) {
        flattr_dsc = flattr_dsc.replace(/\n/g, " ");
        flattr_dsc = flattr_dsc.replace(/(.{0,971}) .*/, "$1 &#8230;");
        flattr_dsc = flattr_dsc.slice(0,979);
      }
      if (tags.length > 230) {
        tags = tags.replace(/(.{0,230}),/, "$1");
        tags = tags.slice(0,229);
      }
      tags = tags + ';';
     
      document.write('<a class="FlattrButton" style="display:none;" title="' +
flattr_tle + '" href="' + url + '" rev="flattr;button:compact;tags:' + tags + '">' + flattr_dsc + '</a>');
    }
  /* ]]> */
  </script>
<meta content='IE=EmulateIE7' http-equiv='X-UA-Compatible'/>
<meta content='width=1100' name='viewport'/>
<meta content='text/html; charset=UTF-8' http-equiv='Content-Type'/>
<script type="text/javascript">(function() { var b=window,f="chrome",g="tick",k="jstiming";(function(){function d(a){this.t={};this.tick=function(a,d,c){var e=void 0!=c?c:(new Date).getTime();this.t[a]=[e,d];if(void 0==c)try{b.console.timeStamp("CSI/"+a)}catch(h){}};this[g]("start",null,a)}var a;b.performance&&(a=b.performance.timing);var n=a?new d(a.responseStart):new d;b.jstiming={Timer:d,load:n};if(a){var c=a.navigationStart,h=a.responseStart;0<c&&h>=c&&(b[k].srt=h-c)}if(a){var e=b[k].load;0<c&&h>=c&&(e[g]("_wtsrt",void 0,c),e[g]("wtsrt_","_wtsrt",h),e[g]("tbsd_","wtsrt_"))}try{a=null,
b[f]&&b[f].csi&&(a=Math.floor(b[f].csi().pageT),e&&0<c&&(e[g]("_tbnd",void 0,b[f].csi().startE),e[g]("tbnd_","_tbnd",c))),null==a&&b.gtbExternal&&(a=b.gtbExternal.pageT()),null==a&&b.external&&(a=b.external.pageT,e&&0<c&&(e[g]("_tbnd",void 0,b.external.startE),e[g]("tbnd_","_tbnd",c))),a&&(b[k].pt=a)}catch(p){}})();b.tickAboveFold=function(d){var a=0;if(d.offsetParent){do a+=d.offsetTop;while(d=d.offsetParent)}d=a;750>=d&&b[k].load[g]("aft")};var l=!1;function m(){l||(l=!0,b[k].load[g]("firstScrollTime"))}b.addEventListener?b.addEventListener("scroll",m,!1):b.attachEvent("onscroll",m);
 })();</script>
<meta content='blogger' name='generator'/>
<link href='http://morepypy.blogspot.co.uk/favicon.ico' rel='icon' type='image/x-icon'/>
<link href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html' rel='canonical'/>
<link rel="alternate" type="application/atom+xml" title="PyPy Status Blog - Atom" href="http://morepypy.blogspot.com/feeds/posts/default" />
<link rel="alternate" type="application/rss+xml" title="PyPy Status Blog - RSS" href="http://morepypy.blogspot.com/feeds/posts/default?alt=rss" />
<link rel="service.post" type="application/atom+xml" title="PyPy Status Blog - Atom" href="http://www.blogger.com/feeds/3971202189709462152/posts/default" />

<link rel="alternate" type="application/atom+xml" title="PyPy Status Blog - Atom" href="http://morepypy.blogspot.com/feeds/8270246310848099963/comments/default" />
<!--[if IE]><script type="text/javascript" src="https://www.blogger.com/static/v1/jsbin/1163241896-ieretrofit.js"></script>
<![endif]-->
<!--[if IE]> <script> (function() { var html5 = ("abbr,article,aside,audio,canvas,datalist,details," + "figure,footer,header,hgroup,mark,menu,meter,nav,output," + "progress,section,time,video").split(','); for (var i = 0; i < html5.length; i++) { document.createElement(html5[i]); } try { document.execCommand('BackgroundImageCache', false, true); } catch(e) {} })(); </script> <![endif]-->
<title>PyPy Status Blog: Global Interpreter Lock, or how to kill it</title>
<link type='text/css' rel='stylesheet' href='https://www.blogger.com/static/v1/widgets/1535467126-widget_css_2_bundle.css' />
<link type='text/css' rel='stylesheet' href='https://www.blogger.com/dyn-css/authorization.css?targetBlogID=3971202189709462152&zx=03c7d52b-cbc2-4097-90ef-9563a73317ea' />
<style id='page-skin-1' type='text/css'><!--
/*
-----------------------------------------------
Blogger Template Style
Name:     Simple
Designer: Josh Peterson
URL:      www.noaesthetic.com
----------------------------------------------- */
/* Variable definitions
====================
<Variable name="keycolor" description="Main Color" type="color" default="#66bbdd"/>
<Group description="Page Text" selector="body">
<Variable name="body.font" description="Font" type="font"
default="normal normal 12px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="body.text.color" description="Text Color" type="color" default="#222222"/>
</Group>
<Group description="Backgrounds" selector=".body-fauxcolumns-outer">
<Variable name="body.background.color" description="Outer Background" type="color" default="#66bbdd"/>
<Variable name="content.background.color" description="Main Background" type="color" default="#ffffff"/>
<Variable name="header.background.color" description="Header Background" type="color" default="transparent"/>
</Group>
<Group description="Links" selector=".main-outer">
<Variable name="link.color" description="Link Color" type="color" default="#2288bb"/>
<Variable name="link.visited.color" description="Visited Color" type="color" default="#888888"/>
<Variable name="link.hover.color" description="Hover Color" type="color" default="#33aaff"/>
</Group>
<Group description="Blog Title" selector=".header h1">
<Variable name="header.font" description="Font" type="font"
default="normal normal 60px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="header.text.color" description="Title Color" type="color" default="#3399bb" />
</Group>
<Group description="Blog Description" selector=".header .description">
<Variable name="description.text.color" description="Description Color" type="color"
default="#777777" />
</Group>
<Group description="Tabs Text" selector=".tabs-inner .widget li a">
<Variable name="tabs.font" description="Font" type="font"
default="normal normal 14px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="tabs.text.color" description="Text Color" type="color" default="#999999"/>
<Variable name="tabs.selected.text.color" description="Selected Color" type="color" default="#000000"/>
</Group>
<Group description="Tabs Background" selector=".tabs-outer .PageList">
<Variable name="tabs.background.color" description="Background Color" type="color" default="#f5f5f5"/>
<Variable name="tabs.selected.background.color" description="Selected Color" type="color" default="#eeeeee"/>
</Group>
<Group description="Post Title" selector="h3.post-title, .comments h4">
<Variable name="post.title.font" description="Font" type="font"
default="normal normal 22px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
</Group>
<Group description="Date Header" selector=".date-header">
<Variable name="date.header.color" description="Text Color" type="color"
default="#222222"/>
<Variable name="date.header.background.color" description="Background Color" type="color"
default="transparent"/>
</Group>
<Group description="Post Footer" selector=".post-footer">
<Variable name="post.footer.text.color" description="Text Color" type="color" default="#666666"/>
<Variable name="post.footer.background.color" description="Background Color" type="color"
default="#f9f9f9"/>
<Variable name="post.footer.border.color" description="Shadow Color" type="color" default="#eeeeee"/>
</Group>
<Group description="Gadgets" selector="h2">
<Variable name="widget.title.font" description="Title Font" type="font"
default="normal bold 11px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="widget.title.text.color" description="Title Color" type="color" default="#000000"/>
<Variable name="widget.alternate.text.color" description="Alternate Color" type="color" default="#999999"/>
</Group>
<Group description="Images" selector=".main-inner">
<Variable name="image.background.color" description="Background Color" type="color" default="#ffffff"/>
<Variable name="image.border.color" description="Border Color" type="color" default="#eeeeee"/>
<Variable name="image.text.color" description="Caption Text Color" type="color" default="#222222"/>
</Group>
<Group description="Accents" selector=".content-inner">
<Variable name="body.rule.color" description="Separator Line Color" type="color" default="#eeeeee"/>
<Variable name="tabs.border.color" description="Tabs Border Color" type="color" default="#eeeeee"/>
</Group>
<Variable name="body.background" description="Body Background" type="background"
color="#66bbdd" default="$(color) none repeat scroll top left"/>
<Variable name="body.background.override" description="Body Background Override" type="string" default=""/>
<Variable name="body.background.gradient.cap" description="Body Gradient Cap" type="url"
default="url(http://www.blogblog.com/1kt/simple/gradients_light.png)"/>
<Variable name="body.background.gradient.tile" description="Body Gradient Tile" type="url"
default="url(http://www.blogblog.com/1kt/simple/body_gradient_tile_light.png)"/>
<Variable name="content.background.color.selector" description="Content Background Color Selector" type="string" default=".content-inner"/>
<Variable name="content.padding" description="Content Padding" type="length" default="10px"/>
<Variable name="content.padding.horizontal" description="Content Horizontal Padding" type="length" default="10px"/>
<Variable name="content.shadow.spread" description="Content Shadow Spread" type="length" default="40px"/>
<Variable name="content.shadow.spread.webkit" description="Content Shadow Spread (WebKit)" type="length" default="5px"/>
<Variable name="content.shadow.spread.ie" description="Content Shadow Spread (IE)" type="length" default="10px"/>
<Variable name="main.border.width" description="Main Border Width" type="length" default="0"/>
<Variable name="header.background.gradient" description="Header Gradient" type="url" default="none"/>
<Variable name="header.shadow.offset.left" description="Header Shadow Offset Left" type="length" default="-1px"/>
<Variable name="header.shadow.offset.top" description="Header Shadow Offset Top" type="length" default="-1px"/>
<Variable name="header.shadow.spread" description="Header Shadow Spread" type="length" default="1px"/>
<Variable name="header.padding" description="Header Padding" type="length" default="30px"/>
<Variable name="header.border.size" description="Header Border Size" type="length" default="1px"/>
<Variable name="header.bottom.border.size" description="Header Bottom Border Size" type="length" default="1px"/>
<Variable name="header.border.horizontalsize" description="Header Horizontal Border Size" type="length" default="0"/>
<Variable name="description.text.size" description="Description Text Size" type="string" default="140%"/>
<Variable name="tabs.margin.top" description="Tabs Margin Top" type="length" default="0" />
<Variable name="tabs.margin.side" description="Tabs Side Margin" type="length" default="30px" />
<Variable name="tabs.background.gradient" description="Tabs Background Gradient" type="url"
default="url(http://www.blogblog.com/1kt/simple/gradients_light.png)"/>
<Variable name="tabs.border.width" description="Tabs Border Width" type="length" default="1px"/>
<Variable name="tabs.bevel.border.width" description="Tabs Bevel Border Width" type="length" default="1px"/>
<Variable name="date.header.padding" description="Date Header Padding" type="string" default="inherit"/>
<Variable name="date.header.letterspacing" description="Date Header Letter Spacing" type="string" default="inherit"/>
<Variable name="date.header.margin" description="Date Header Margin" type="string" default="inherit"/>
<Variable name="post.margin.bottom" description="Post Bottom Margin" type="length" default="25px"/>
<Variable name="image.border.small.size" description="Image Border Small Size" type="length" default="2px"/>
<Variable name="image.border.large.size" description="Image Border Large Size" type="length" default="5px"/>
<Variable name="page.width.selector" description="Page Width Selector" type="string" default=".region-inner"/>
<Variable name="page.width" description="Page Width" type="string" default="auto"/>
<Variable name="main.section.margin" description="Main Section Margin" type="length" default="0px"/>
<Variable name="main.padding" description="Main Padding" type="length" default="15px"/>
<Variable name="main.padding.top" description="Main Padding Top" type="length" default="30px"/>
<Variable name="main.padding.bottom" description="Main Padding Bottom" type="length" default="30px"/>
<Variable name="paging.background"
color="#ffffff"
description="Background of blog paging area" type="background"
default="transparent none no-repeat scroll top center"/>
<Variable name="footer.bevel" description="Bevel border length of footer" type="length" default="0"/>
<Variable name="startSide" description="Side where text starts in blog language" type="automatic" default="left"/>
<Variable name="endSide" description="Side where text ends in blog language" type="automatic" default="right"/>
*/
/* Content
----------------------------------------------- */
body {
font: normal normal 12px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #222222;
background: #66bbdd none repeat scroll top left;
padding: 0 40px 40px 40px;
}
html body .region-inner {
min-width: 0;
max-width: 100%;
width: auto;
}
a:link {
text-decoration:none;
color: #2288bb;
}
a:visited {
text-decoration:none;
color: #888888;
}
a:hover {
text-decoration:underline;
color: #33aaff;
}
.body-fauxcolumn-outer .fauxcolumn-inner {
background: transparent url(http://www.blogblog.com/1kt/simple/body_gradient_tile_light.png) repeat scroll top left;
_background-image: none;
}
.body-fauxcolumn-outer .cap-top {
position: absolute;
z-index: 1;
height: 400px;
width: 100%;
background: #66bbdd none repeat scroll top left;
}
.body-fauxcolumn-outer .cap-top .cap-left {
width: 100%;
background: transparent url(http://www.blogblog.com/1kt/simple/gradients_light.png) repeat-x scroll top left;
_background-image: none;
}
.content-outer {
-moz-box-shadow: 0 0 40px rgba(0, 0, 0, .15);
-webkit-box-shadow: 0 0 5px rgba(0, 0, 0, .15);
-goog-ms-box-shadow: 0 0 10px #333333;
box-shadow: 0 0 40px rgba(0, 0, 0, .15);
margin-bottom: 1px;
}
.content-inner {
padding: 10px 10px;
}
.content-inner {
background-color: #ffffff;
}
/* Header
----------------------------------------------- */
.header-outer {
background: transparent none repeat-x scroll 0 -400px;
_background-image: none;
}
.Header h1 {
font: normal normal 60px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #3399bb;
text-shadow: -1px -1px 1px rgba(0, 0, 0, .2);
}
.Header h1 a {
color: #3399bb;
}
.Header .description {
font-size: 140%;
color: #777777;
}
.header-inner .Header .titlewrapper {
padding: 22px 30px;
}
.header-inner .Header .descriptionwrapper {
padding: 0 30px;
}
/* Tabs
----------------------------------------------- */
.tabs-inner .section:first-child {
border-top: 1px solid #eeeeee;
}
.tabs-inner .section:first-child ul {
margin-top: -1px;
border-top: 1px solid #eeeeee;
border-left: 0 solid #eeeeee;
border-right: 0 solid #eeeeee;
}
.tabs-inner .widget ul {
background: #f5f5f5 url(http://www.blogblog.com/1kt/simple/gradients_light.png) repeat-x scroll 0 -800px;
_background-image: none;
border-bottom: 1px solid #eeeeee;
margin-top: 0;
margin-left: -30px;
margin-right: -30px;
}
.tabs-inner .widget li a {
display: inline-block;
padding: .6em 1em;
font: normal normal 14px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #999999;
border-left: 1px solid #ffffff;
border-right: 1px solid #eeeeee;
}
.tabs-inner .widget li:first-child a {
border-left: none;
}
.tabs-inner .widget li.selected a, .tabs-inner .widget li a:hover {
color: #000000;
background-color: #eeeeee;
text-decoration: none;
}
/* Columns
----------------------------------------------- */
.main-outer {
border-top: 0 solid #eeeeee;
}
.fauxcolumn-left-outer .fauxcolumn-inner {
border-right: 1px solid #eeeeee;
}
.fauxcolumn-right-outer .fauxcolumn-inner {
border-left: 1px solid #eeeeee;
}
/* Headings
----------------------------------------------- */
h2 {
margin: 0 0 1em 0;
font: normal bold 11px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #000000;
text-transform: uppercase;
}
/* Widgets
----------------------------------------------- */
.widget .zippy {
color: #999999;
text-shadow: 2px 2px 1px rgba(0, 0, 0, .1);
}
.widget .popular-posts ul {
list-style: none;
}
/* Posts
----------------------------------------------- */
.date-header span {
background-color: transparent;
color: #222222;
padding: inherit;
letter-spacing: inherit;
margin: inherit;
}
.main-inner {
padding-top: 30px;
padding-bottom: 30px;
}
.main-inner .column-center-inner {
padding: 0 15px;
}
.main-inner .column-center-inner .section {
margin: 0 0px;
}
.post {
margin: 0 0 25px 0;
}
h3.post-title, .comments h4 {
font: normal normal 22px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
margin: .75em 0 0;
}
.post-body {
font-size: 110%;
line-height: 1.4;
position: relative;
}
.post-body img, .post-body .tr-caption-container, .Profile img, .Image img,
.BlogList .item-thumbnail img {
padding: 2px;
background: #ffffff;
border: 1px solid #eeeeee;
-moz-box-shadow: 1px 1px 5px rgba(0, 0, 0, .1);
-webkit-box-shadow: 1px 1px 5px rgba(0, 0, 0, .1);
box-shadow: 1px 1px 5px rgba(0, 0, 0, .1);
}
.post-body img, .post-body .tr-caption-container {
padding: 5px;
}
.post-body .tr-caption-container {
color: #222222;
}
.post-body .tr-caption-container img {
padding: 0;
background: transparent;
border: none;
-moz-box-shadow: 0 0 0 rgba(0, 0, 0, .1);
-webkit-box-shadow: 0 0 0 rgba(0, 0, 0, .1);
box-shadow: 0 0 0 rgba(0, 0, 0, .1);
}
.post-header {
margin: 0 0 1.5em;
line-height: 1.6;
font-size: 90%;
}
.post-footer {
margin: 20px -2px 0;
padding: 5px 10px;
color: #666666;
background-color: #f9f9f9;
border-bottom: 1px solid #eeeeee;
line-height: 1.6;
font-size: 90%;
}
#comments .comment-author {
padding-top: 1.5em;
border-top: 1px solid #eeeeee;
background-position: 0 1.5em;
}
#comments .comment-author:first-child {
padding-top: 0;
border-top: none;
}
.avatar-image-container {
margin: .2em 0 0;
}
#comments .avatar-image-container img {
border: 1px solid #eeeeee;
}
/* Accents
---------------------------------------------- */
.section-columns td.columns-cell {
border-left: 1px solid #eeeeee;
}
.blog-pager {
background: transparent none no-repeat scroll top center;
}
.blog-pager-older-link, .home-link,
.blog-pager-newer-link {
background-color: #ffffff;
padding: 5px;
}
.footer-outer {
border-top: 0 dashed #bbbbbb;
}
/* Mobile
----------------------------------------------- */
.mobile .content-outer {
-webkit-box-shadow: 0 0 3px rgba(0, 0, 0, .15);
box-shadow: 0 0 3px rgba(0, 0, 0, .15);
padding: 0 40px;
}
body.mobile .AdSense {
margin-left: -40px;
}
.mobile .tabs-inner .widget ul {
margin-left: 0;
margin-right: 0;
}
.mobile .post {
margin: 0;
}
.mobile .main-inner .column-center-inner .section {
margin: 0;
}
.mobile .date-header span {
padding: 0.4em 10px;
margin: 0 -10px;
}
.mobile h3.post-title {
margin: 0;
}
.mobile .blog-pager {
background: transparent;
}
.mobile .footer-outer {
border-top: none;
}
.mobile .main-inner, .mobile .footer-inner {
background-color: #ffffff;
}
.mobile-index-contents {
color: #222222;
}
.mobile-link-button {
background-color: #2288bb;
}
.mobile-link-button a:link, .mobile-link-button a:visited {
color: #ffffff;
}

--></style>
<style id='template-skin-1' type='text/css'><!--
body {
min-width: 930px;
}
.content-outer, .content-fauxcolumn-outer, .region-inner {
min-width: 930px;
max-width: 930px;
_width: 930px;
}
.main-inner .columns {
padding-left: 250px;
padding-right: 0px;
}
.main-inner .fauxcolumn-center-outer {
left: 250px;
right: 0px;
/* IE6 does not respect left and right together */
_width: expression(this.parentNode.offsetWidth -
parseInt("250px") -
parseInt("0px") + 'px');
}
.main-inner .fauxcolumn-left-outer {
width: 250px;
}
.main-inner .fauxcolumn-right-outer {
width: 0px;
}
.main-inner .column-left-outer {
width: 250px;
right: 100%;
margin-left: -250px;
}
.main-inner .column-right-outer {
width: 0px;
margin-right: -0px;
}
#layout {
min-width: 0;
}
#layout .content-outer {
min-width: 0;
width: 800px;
}
#layout .region-inner {
min-width: 0;
width: auto;
}
--></style>
<script type="text/javascript">var a="indexOf",b="&m=1",e="(^|&)m=",f="?",g="?m=1";function h(){var c=window.location.href,d=c.split(f);switch(d.length){case 1:return c+g;case 2:return 0<=d[1].search(e)?null:c+b;default:return null}}var k=navigator.userAgent;if(-1!=k[a]("Mobile")&&-1!=k[a]("WebKit")&&-1==k[a]("iPad")||-1!=k[a]("Opera Mini")||-1!=k[a]("IEMobile")){var l=h();l&&window.location.replace(l)};
</script><script type="text/javascript">
if (window.jstiming) window.jstiming.load.tick('headEnd');
</script></head>
<body class='loading'>
<div class='navbar section' id='navbar'><div class='widget Navbar' id='Navbar1'><script type="text/javascript">
    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener('load',
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent('onload', function(){ object[attribute] = val; });
      }
    }
  </script>
<div id="navbar-iframe-container"></div>
<script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script>
<script type="text/javascript">
        gapi.load("gapi.iframes:gapi.iframes.style.bubble", function() {
          if (gapi.iframes && gapi.iframes.getContext) {
            gapi.iframes.getContext().openChild({
                url: 'https://www.blogger.com/navbar.g?targetBlogID\0753971202189709462152\46blogName\75PyPy+Status+Blog\46publishMode\75PUBLISH_MODE_BLOGSPOT\46navbarType\75LIGHT\46layoutType\75LAYOUTS\46searchRoot\75http://morepypy.blogspot.com/search\46blogLocale\75en\46v\0752\46homepageUrl\75http://morepypy.blogspot.com/\46targetPostID\758270246310848099963\46blogPostOrPageUrl\75http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html\46vt\75-110619592113761166',
                where: document.getElementById("navbar-iframe-container"),
                id: "navbar-iframe"
            });
          }
        });
      </script><script type="text/javascript">
(function() {
var script = document.createElement('script');
script.type = 'text/javascript';
script.src = '//pagead2.googlesyndication.com/pagead/js/google_top_exp.js';
var head = document.getElementsByTagName('head')[0];
if (head) {
head.appendChild(script);
}})();
</script>
</div></div>
<div class='body-fauxcolumns'>
<div class='fauxcolumn-outer body-fauxcolumn-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</div>
<div class='content'>
<div class='content-fauxcolumns'>
<div class='fauxcolumn-outer content-fauxcolumn-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</div>
<div class='content-outer'>
<div class='content-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left content-fauxborder-left'>
<div class='fauxborder-right content-fauxborder-right'></div>
<div class='content-inner'>
<header>
<div class='header-outer'>
<div class='header-cap-top cap-top'>
<div class='cap-left'>
<img src='http://2.bp.blogspot.com/-iO_dZU_FAR0/Tbre-StkIhI/AAAAAAAAAM4/m3P9wi1e-ng/s150/pypy_small128.png'/>
</div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left header-fauxborder-left'>
<div class='fauxborder-right header-fauxborder-right'></div>
<div class='region-inner header-inner' style='margin-left: 128px'>
<div class='header section' id='header'><div class='widget Header' id='Header1'>
<div id='header-inner'>
<div class='titlewrapper'>
<h1 class='title'>
<a href='http://morepypy.blogspot.co.uk/'>PyPy Status Blog</a>
</h1>
</div>
<div class='descriptionwrapper'>
<p class='description'><span>
</span></p>
</div>
</div>
</div></div>
</div>
</div>
<div class='header-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</header>
<div class='tabs-outer'>
<div class='tabs-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left tabs-fauxborder-left'>
<div class='fauxborder-right tabs-fauxborder-right'></div>
<div class='region-inner tabs-inner'>
<div class='tabs section' id='crosscol'></div>
<div class='tabs section' id='crosscol-overflow'></div>
</div>
</div>
<div class='tabs-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<div class='main-outer'>
<div class='main-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left main-fauxborder-left'>
<div class='fauxborder-right main-fauxborder-right'></div>
<div class='region-inner main-inner'>
<div class='columns fauxcolumns'>
<div class='fauxcolumn-outer fauxcolumn-center-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<div class='fauxcolumn-outer fauxcolumn-left-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<div class='fauxcolumn-outer fauxcolumn-right-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<!-- corrects IE6 width calculation -->
<div class='columns-inner'>
<div class='column-center-outer'>
<div class='column-center-inner'>
<div class='main section' id='main'><div class='widget Blog' id='Blog1'>
<div class='blog-posts hfeed'>
<!-- google_ad_section_start(name=default) -->

          <div class="date-outer">
        
<h2 class='date-header'><span>Wednesday, June 29, 2011</span></h2>

          <div class="date-posts">
        
<div class='post-outer'>
<div class='post hentry'>
<a name='8270246310848099963'></a>
<h3 class='post-title entry-title'>
Global Interpreter Lock, or how to kill it
</h3>
<div class='post-header'>
<div class='post-header-line-1'></div>
</div>
<div class='post-body entry-content' id='post-body-8270246310848099963'>
<p>People that listened to my (Armin Rigo) lightning talk at EuroPython know that
suddenly, we have a plan to remove the Global Interpreter Lock --- the
infamous GIL, the thing in CPython that prevents multiple threads from
actually running in your Python code in parallel.</p>
<p>That's not actually new, because Jython has been doing it all along.
Jython works by very carefully adding locks to
all the mutable built-in types, and by relying on the underlying Java
platform to be efficient about them (so that the result is faster than,
say, very carefully adding similar locks in CPython).  By &quot;very
carefully&quot;, I mean <em>really</em> <em>really</em> carefully; for example,
'dict1.update(dict2)' needs to lock both dict1 and dict2, but if you do
it naively, then a parallel 'dict2.update(dict1)' might cause a
deadlock.</p>
<p>All of PyPy, CPython and IronPython have a GIL.  But for PyPy we are considering
a quite different approach than Jython's, based on <a class="reference" href="http://en.wikipedia.org/wiki/Software_transactional_memory">Software
Transactional Memory</a>.  This is a recent development in computer
science, and it gives a nicer solution than locking.  Here is a short
introduction to it.</p>
<p>Say you want to atomically pop an item from 'list1' and append it to
'list2':</p>
<pre class="literal-block">
def f(list1, list2):
    x = list1.pop()
    list2.append(x)
</pre>
<p>This is not safe in multithreaded cases (even with the GIL).  Say that
you call <tt class="docutils literal"><span class="pre">f(l1,</span> <span class="pre">l2)</span></tt> in thread 1 and <tt class="docutils literal"><span class="pre">f(l2,</span> <span class="pre">l1)</span></tt> in thread 2.  What
you want is that it has no effect at all (x is moved from one list to
the other, then back).  But what can occur is that instead the top of
the two lists are swapped, depending on timing issues.</p>
<p>One way to fix it is with a global lock:</p>
<pre class="literal-block">
def f(list1, list2):
    global_lock.acquire()
    x = list1.pop()
    list2.append(x)
    global_lock.release()
</pre>
<p>A finer way to fix it is with locks that come with the lists:</p>
<pre class="literal-block">
def f(list1, list2):
    acquire_all_locks(list1.lock, list2.lock)
    x = list1.pop()
    list2.append(x)
    release_all_locks(list1.lock, list2.lock)
</pre>
<p>The second solution is a model for Jython's, while the first is a model
for CPython's.  Indeed, in CPython's interpreter, we acquire the GIL,
then we do one bytecode (or actually a number of them, like 100), then
we release the GIL; and then we proceed to the next bunch of 100.</p>
<p>Software Transactional Memory (STM) gives a third solution:</p>
<pre class="literal-block">
def f(list1, list2):
    while True:
        t = transaction()
        x = list1.pop(t)
        list2.append(t, x)
        if t.commit():
            break
</pre>
<p>In this solution, we make a <tt class="docutils literal"><span class="pre">transaction</span></tt> object and use it in all
reads and writes we do to the lists.  There are actually several
different models, but let's focus on one of them.  During a transaction,
we don't actually change the global memory at all.  Instead, we use the
thread-local <tt class="docutils literal"><span class="pre">transaction</span></tt> object.  We store in it which objects we
read from, which objects we write to, and what values we write.  It is
only when the transaction reaches its end that we attempt to &quot;commit&quot;
it.  Committing might fail if other commits have occurred in between,
creating inconsistencies; in that case, the transaction aborts and
must restart from the beginning.</p>
<p>In the same way as the previous two solutions are models for CPython and
Jython, the STM solution looks like it could be a model for PyPy in the
future.  In such a PyPy, the interpreter would start a transaction, do
one or several bytecodes, and then end the transaction; and repeat.
This is very similar to what is going on in CPython with the GIL.  In
particular, it means that it gives programmers all the same guarantees
as the GIL does.  The <em>only</em> difference is that it can actually run
multiple threads in parallel, as long as their code does not interfere
with each other.  (In particular, if you need not just the GIL but actual
locks in your existing multi-threaded program, then this will not
magically remove the need for them.  You might get an additional built-in
module that exposes STM to your Python programs, if you prefer it over
locks, but that's another question.)</p>
<p>Why not apply that idea to CPython?  Because we would need to change
everything everywhere.  In the example above, you may have noted that I
no longer call 'list1.pop()', but 'list1.pop(t)'; this is a way to tell
that the implementation of all the methods needs to be changed, in order
to do their work &quot;transactionally&quot;.  This means that instead of really
changing the global memory in which the list is stored, it must instead
record the change in the <tt class="docutils literal"><span class="pre">transation</span></tt> object.  If our interpreter is
written in C, as CPython is, then we need to write it explicitly
everywhere.  If it is written instead in a higher-level language, as
PyPy is, then we can add this behavior as as set of translation rules, and
apply them automatically wherever it is necessary.  Moreover, it can be
a translation-time option: you can either get the current &quot;pypy&quot; with a
GIL, or a version with STM, which would be slower due to the extra
bookkeeping.  (How much slower?  I have no clue, but as a wild guess,
maybe between 2 and 5 times slower.  That is fine if you have enough
cores, as long as it scales nicely :-)</p>
<p>A final note: as STM research is very recent (it started around 2003),
there are a number of variants around, and it's not clear yet which one
is better in which cases.  As far as I can tell, the approach described
in &quot;A Comprehensive Strategy for Contention Management in Software
Transactional Memory&quot; seems to be one possible state-of-the-art; it also
seems to be &quot;good enough for all cases&quot;.</p>
<p>So, when will it be done?  I cannot say yet.  It is still at the idea
stage, but I <em>think</em> that it can work.  How long would it take us to
write it?  Again no clue, but we are looking at many months rather
than many days.  This is the sort of thing that I would
like to be able to work on full time after the <a class="reference" href="http://morepypy.blogspot.com/2010/12/oh-and-btw-pypy-gets-funding-through.html">Eurostars funding</a>
runs out on September 1.  We are currently looking at ways to use
<a class="reference" href="http://en.wikipedia.org/wiki/Crowd_funding">crowdfunding</a> to raise money so that I can do exactly that.  Expect
a blog post about that very soon.  But this looks like a perfect
candidate for crowdfunding -- there are at least thousands of you who
would be willing to pay 10s of Euros to Kill the GIL.  Now we only
have to make this happen.</p>
<div style='clear: both;'></div>
</div>
<div class='post-footer'>
<div class='post-footer-line post-footer-line-1'><span class='post-author vcard'>
<div id='flattr_summary_8270246310848099963' style='display: none;'>
<p>People that listened to my (Armin Rigo) lightning talk at EuroPython know that
suddenly, we have a plan to remove the Global Interpreter Lock --- the
infamous GIL, the thing in CPython that prevents multiple threads from
actually running in your Python code in parallel.</p>
<p>That's not actually new, because Jython has been doing it all along.
Jython works by very carefully adding locks to
all the mutable built-in types, and by relying on the underlying Java
platform to be efficient about them (so that the result is faster than,
say, very carefully adding similar locks in CPython).  By &quot;very
carefully&quot;, I mean <em>really</em> <em>really</em> carefully; for example,
'dict1.update(dict2)' needs to lock both dict1 and dict2, but if you do
it naively, then a parallel 'dict2.update(dict1)' might cause a
deadlock.</p>
<p>All of PyPy, CPython and IronPython have a GIL.  But for PyPy we are considering
a quite different approach than Jython's, based on <a class="reference" href="http://en.wikipedia.org/wiki/Software_transactional_memory">Software
Transactional Memory</a>.  This is a recent development in computer
science, and it gives a nicer solution than locking.  Here is a short
introduction to it.</p>
<p>Say you want to atomically pop an item from 'list1' and append it to
'list2':</p>
<pre class="literal-block">
def f(list1, list2):
    x = list1.pop()
    list2.append(x)
</pre>
<p>This is not safe in multithreaded cases (even with the GIL).  Say that
you call <tt class="docutils literal"><span class="pre">f(l1,</span> <span class="pre">l2)</span></tt> in thread 1 and <tt class="docutils literal"><span class="pre">f(l2,</span> <span class="pre">l1)</span></tt> in thread 2.  What
you want is that it has no effect at all (x is moved from one list to
the other, then back).  But what can occur is that instead the top of
the two lists are swapped, depending on timing issues.</p>
<p>One way to fix it is with a global lock:</p>
<pre class="literal-block">
def f(list1, list2):
    global_lock.acquire()
    x = list1.pop()
    list2.append(x)
    global_lock.release()
</pre>
<p>A finer way to fix it is with locks that come with the lists:</p>
<pre class="literal-block">
def f(list1, list2):
    acquire_all_locks(list1.lock, list2.lock)
    x = list1.pop()
    list2.append(x)
    release_all_locks(list1.lock, list2.lock)
</pre>
<p>The second solution is a model for Jython's, while the first is a model
for CPython's.  Indeed, in CPython's interpreter, we acquire the GIL,
then we do one bytecode (or actually a number of them, like 100), then
we release the GIL; and then we proceed to the next bunch of 100.</p>
<p>Software Transactional Memory (STM) gives a third solution:</p>
<pre class="literal-block">
def f(list1, list2):
    while True:
        t = transaction()
        x = list1.pop(t)
        list2.append(t, x)
        if t.commit():
            break
</pre>
<p>In this solution, we make a <tt class="docutils literal"><span class="pre">transaction</span></tt> object and use it in all
reads and writes we do to the lists.  There are actually several
different models, but let's focus on one of them.  During a transaction,
we don't actually change the global memory at all.  Instead, we use the
thread-local <tt class="docutils literal"><span class="pre">transaction</span></tt> object.  We store in it which objects we
read from, which objects we write to, and what values we write.  It is
only when the transaction reaches its end that we attempt to &quot;commit&quot;
it.  Committing might fail if other commits have occurred in between,
creating inconsistencies; in that case, the transaction aborts and
must restart from the beginning.</p>
<p>In the same way as the previous two solutions are models for CPython and
Jython, the STM solution looks like it could be a model for PyPy in the
future.  In such a PyPy, the interpreter would start a transaction, do
one or several bytecodes, and then end the transaction; and repeat.
This is very similar to what is going on in CPython with the GIL.  In
particular, it means that it gives programmers all the same guarantees
as the GIL does.  The <em>only</em> difference is that it can actually run
multiple threads in parallel, as long as their code does not interfere
with each other.  (In particular, if you need not just the GIL but actual
locks in your existing multi-threaded program, then this will not
magically remove the need for them.  You might get an additional built-in
module that exposes STM to your Python programs, if you prefer it over
locks, but that's another question.)</p>
<p>Why not apply that idea to CPython?  Because we would need to change
everything everywhere.  In the example above, you may have noted that I
no longer call 'list1.pop()', but 'list1.pop(t)'; this is a way to tell
that the implementation of all the methods needs to be changed, in order
to do their work &quot;transactionally&quot;.  This means that instead of really
changing the global memory in which the list is stored, it must instead
record the change in the <tt class="docutils literal"><span class="pre">transation</span></tt> object.  If our interpreter is
written in C, as CPython is, then we need to write it explicitly
everywhere.  If it is written instead in a higher-level language, as
PyPy is, then we can add this behavior as as set of translation rules, and
apply them automatically wherever it is necessary.  Moreover, it can be
a translation-time option: you can either get the current &quot;pypy&quot; with a
GIL, or a version with STM, which would be slower due to the extra
bookkeeping.  (How much slower?  I have no clue, but as a wild guess,
maybe between 2 and 5 times slower.  That is fine if you have enough
cores, as long as it scales nicely :-)</p>
<p>A final note: as STM research is very recent (it started around 2003),
there are a number of variants around, and it's not clear yet which one
is better in which cases.  As far as I can tell, the approach described
in &quot;A Comprehensive Strategy for Contention Management in Software
Transactional Memory&quot; seems to be one possible state-of-the-art; it also
seems to be &quot;good enough for all cases&quot;.</p>
<p>So, when will it be done?  I cannot say yet.  It is still at the idea
stage, but I <em>think</em> that it can work.  How long would it take us to
write it?  Again no clue, but we are looking at many months rather
than many days.  This is the sort of thing that I would
like to be able to work on full time after the <a class="reference" href="http://morepypy.blogspot.com/2010/12/oh-and-btw-pypy-gets-funding-through.html">Eurostars funding</a>
runs out on September 1.  We are currently looking at ways to use
<a class="reference" href="http://en.wikipedia.org/wiki/Crowd_funding">crowdfunding</a> to raise money so that I can do exactly that.  Expect
a blog post about that very soon.  But this looks like a perfect
candidate for crowdfunding -- there are at least thousands of you who
would be willing to pay 10s of Euros to Kill the GIL.  Now we only
have to make this happen.</p>
</div>
<div id='flattr_title_8270246310848099963' style='display: none;'>
Global Interpreter Lock, or how to kill it
</div>
<div class='post-share-buttons goog-inline-block'>
<script type='text/javascript'>  
          displayFlattrButton('8270246310848099963', 'http://morepypy.blogspot.co.uk/2011/06/global-interpreter-lock-or-how-to-kill.html', '');
        </script>
</div>
Posted by
<span class='fn'>Armin Rigo</span>
</span>
<span class='post-timestamp'>
at
<a class='timestamp-link' href='http://morepypy.blogspot.co.uk/2011/06/global-interpreter-lock-or-how-to-kill.html' rel='bookmark' title='permanent link'><abbr class='published' title='2011-06-29T18:50:00+02:00'>18:50</abbr></a>
</span>
<span class='post-comment-link'>
</span>
<span class='post-icons'>
<span class='item-control blog-admin pid-1181195972'>
<a href='http://www.blogger.com/post-edit.g?blogID=3971202189709462152&postID=8270246310848099963&from=pencil' title='Edit Post'>
<img alt='' class='icon-action' height='18' src='http://img2.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/>
</a>
</span>
</span>
<div class='post-share-buttons goog-inline-block'>
<a class='goog-inline-block share-button sb-email' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=8270246310848099963&target=email' target='_blank' title='Email This'><span class='share-button-link-text'>Email This</span></a><a class='goog-inline-block share-button sb-blog' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=8270246310848099963&target=blog' onclick='window.open(this.href, "_blank", "height=270,width=475"); return false;' target='_blank' title='BlogThis!'><span class='share-button-link-text'>BlogThis!</span></a><a class='goog-inline-block share-button sb-twitter' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=8270246310848099963&target=twitter' target='_blank' title='Share to Twitter'><span class='share-button-link-text'>Share to Twitter</span></a><a class='goog-inline-block share-button sb-facebook' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=8270246310848099963&target=facebook' onclick='window.open(this.href, "_blank", "height=430,width=640"); return false;' target='_blank' title='Share to Facebook'><span class='share-button-link-text'>Share to Facebook</span></a><a class='goog-inline-block share-button sb-pinterest' href='http://www.blogger.com/share-post.g?blogID=3971202189709462152&postID=8270246310848099963&target=pinterest' target='_blank' title='Share to Pinterest'><span class='share-button-link-text'>Share to Pinterest</span></a><div class='goog-inline-block dummy-container'><g:plusone source='blogger:blog:plusone' href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html' size='medium' width='300' annotation='inline'/></div>
</div>
</div>
<div class='post-footer-line post-footer-line-2'><span class='post-labels'>
</span>
</div>
<div class='post-footer-line post-footer-line-3'><span class='post-backlinks post-comment-link'>
</span>
</div>
</div>
</div>
<div class='comments' id='comments'>
<a name='comments'></a>
<h4>48 comments:</h4>
<div id='Blog1_comments-block-wrapper'>
<dl class='avatar-comment-indent' id='comments-block'>
<dt class='comment-author blog-author' id='c628611677788214346'>
<a name='c628611677788214346'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/06229713779852499022" rel="nofollow" onclick="" class="avatar-hovercard" id="av-0-06229713779852499022"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://1.bp.blogspot.com/_Bn8hwSKb0pY/SlsopwL8EVI/AAAAAAAAAKo/p8cUWUMELfI/S45/fuzzy-logic.gif" title="Michael Foord">

<noscript><img src="http://1.bp.blogspot.com/_Bn8hwSKb0pY/SlsopwL8EVI/AAAAAAAAAKo/p8cUWUMELfI/S45/fuzzy-logic.gif" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/06229713779852499022' rel='nofollow'>Michael Foord</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-628611677788214346'>
<p>
If you concurrently run two transactions that interfere with each other - and they both restart on failure - isn&#39;t there a possibility that neither would ever complete? How would you mitigate against that? (Fallback to a global lock after a certain number of transaction failures perhaps?)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309366471373#c628611677788214346' title='comment permalink'>
June 29, 2011 at 6:54 PM
</a>
<span class='item-control blog-admin pid-1214434033'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=628611677788214346' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6668524582711124473'>
<a name='c6668524582711124473'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6668524582711124473'>
<p>
There&#39;s a thing that is not clear to me: how do you detect failures during commits?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309367610302#c6668524582711124473' title='comment permalink'>
June 29, 2011 at 7:13 PM
</a>
<span class='item-control blog-admin pid-1584763118'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6668524582711124473' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7167137279227454167'>
<a name='c7167137279227454167'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/00222070640958234371" rel="nofollow" onclick="" class="avatar-hovercard" id="av-2-00222070640958234371"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="jdhardy">

</a></span></div>
<a href='http://www.blogger.com/profile/00222070640958234371' rel='nofollow'>jdhardy</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7167137279227454167'>
<p>
IronPython doesn&#39;t have a GIL - it&#39;s the same as Jython.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309367797850#c7167137279227454167' title='comment permalink'>
June 29, 2011 at 7:16 PM
</a>
<span class='item-control blog-admin pid-1210277598'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7167137279227454167' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c4781270299362140228'>
<a name='c4781270299362140228'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/06229713779852499022" rel="nofollow" onclick="" class="avatar-hovercard" id="av-3-06229713779852499022"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://1.bp.blogspot.com/_Bn8hwSKb0pY/SlsopwL8EVI/AAAAAAAAAKo/p8cUWUMELfI/S45/fuzzy-logic.gif" title="Michael Foord">

<noscript><img src="http://1.bp.blogspot.com/_Bn8hwSKb0pY/SlsopwL8EVI/AAAAAAAAAKo/p8cUWUMELfI/S45/fuzzy-logic.gif" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/06229713779852499022' rel='nofollow'>Michael Foord</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4781270299362140228'>
<p>
Plus transactions have to be scoped around code that is side-effect free (or you can guarantee containing the side-effects within the transaction). Why STM research was done in Haskell I guess. Anyway, it sounds like a hard problem. That&#39;s why Armin is interested I guess... :-)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309367836055#c4781270299362140228' title='comment permalink'>
June 29, 2011 at 7:17 PM
</a>
<span class='item-control blog-admin pid-1214434033'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=4781270299362140228' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c206114760853298404'>
<a name='c206114760853298404'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/17017456817083804792" rel="nofollow" onclick="" class="avatar-hovercard" id="av-4-17017456817083804792"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://1.bp.blogspot.com/-DJs3bVn7ZH0/Tb3MupJ7oqI/AAAAAAAAANg/s7ZUXOlGoss/s45/anto-bn3.jpg" title="Antonio Cuni">

<noscript><img src="http://1.bp.blogspot.com/-DJs3bVn7ZH0/Tb3MupJ7oqI/AAAAAAAAANg/s7ZUXOlGoss/s45/anto-bn3.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/17017456817083804792' rel='nofollow'>Antonio Cuni</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-206114760853298404'>
<p>
@michael: if two transactions conflict, you rollback only one of those, and from the external the effect is the same as having one locked by the GIL<br /><br />About side effects: the plan is to close a transaction before a side effect operation and reopen a new one after it: this is what happens already with the GIL, which is released e.g. before I/O calls.<br /><br />At least, this is how I understand it, and since I&#39;m not Armin I might be wrong :-)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309368195765#c206114760853298404' title='comment permalink'>
June 29, 2011 at 7:23 PM
</a>
<span class='item-control blog-admin pid-957825604'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=206114760853298404' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c216583284979187040'>
<a name='c216583284979187040'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/06229713779852499022" rel="nofollow" onclick="" class="avatar-hovercard" id="av-5-06229713779852499022"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://1.bp.blogspot.com/_Bn8hwSKb0pY/SlsopwL8EVI/AAAAAAAAAKo/p8cUWUMELfI/S45/fuzzy-logic.gif" title="Michael Foord">

<noscript><img src="http://1.bp.blogspot.com/_Bn8hwSKb0pY/SlsopwL8EVI/AAAAAAAAAKo/p8cUWUMELfI/S45/fuzzy-logic.gif" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/06229713779852499022' rel='nofollow'>Michael Foord</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-216583284979187040'>
<p>
@antonio<br />Ah, that makes sense. Thanks. :-)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309368389960#c216583284979187040' title='comment permalink'>
June 29, 2011 at 7:26 PM
</a>
<span class='item-control blog-admin pid-1214434033'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=216583284979187040' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8899599186958586874'>
<a name='c8899599186958586874'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8899599186958586874'>
<p>
This sounds like a great idea...<br /><br />What happens when transaction interleaves together and fail? Both threads will still continue trying so to me this appears to be somewhat as efficient as locks. (Note I know nothing in this topic and would definitely like to learn more).
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309368654951#c8899599186958586874' title='comment permalink'>
June 29, 2011 at 7:30 PM
</a>
<span class='item-control blog-admin pid-1215874321'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=8899599186958586874' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c9041635715751962988'>
<a name='c9041635715751962988'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/15193496768630474922" rel="nofollow" onclick="" class="avatar-hovercard" id="av-7-15193496768630474922"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Sebastian Noack">

</a></span></div>
<a href='http://www.blogger.com/profile/15193496768630474922' rel='nofollow'>Sebastian Noack</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-9041635715751962988'>
<p>
I don&#39;t think that the primary reason STM is slower than the GIL, is the extra bookkeeping, but the fact that things need to be repeated. However, I could imagine, that STM still might yield better response times than acquiring locks, in some cases.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309371240072#c9041635715751962988' title='comment permalink'>
June 29, 2011 at 8:14 PM
</a>
<span class='item-control blog-admin pid-162156371'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=9041635715751962988' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1950756093134518252'>
<a name='c1950756093134518252'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/15193496768630474922" rel="nofollow" onclick="" class="avatar-hovercard" id="av-8-15193496768630474922"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Sebastian Noack">

</a></span></div>
<a href='http://www.blogger.com/profile/15193496768630474922' rel='nofollow'>Sebastian Noack</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1950756093134518252'>
<span class='deleted-comment'>This comment has been removed by the author.</span>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309371341147#c1950756093134518252' title='comment permalink'>
June 29, 2011 at 8:15 PM
</a>
<span class='item-control blog-admin '>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1950756093134518252' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c5744936094617644796'>
<a name='c5744936094617644796'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/10589632911057089881" rel="nofollow" onclick="" class="avatar-hovercard" id="av-9-10589632911057089881"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="tuomasjjrasanen">

</a></span></div>
<a href='http://www.blogger.com/profile/10589632911057089881' rel='nofollow'>tuomasjjrasanen</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5744936094617644796'>
<p>
STM is not ot that &quot;recent&quot; though: <br /><br />Nir Shavit and Dan Touitou. Software transactional memory. In PODC &#39;95: Proceedings of the fourteenth annual ACM symposium on Principles of distributed computing, pages 204-213, New York, NY, USA, 1995. ACM.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309375636401#c5744936094617644796' title='comment permalink'>
June 29, 2011 at 9:27 PM
</a>
<span class='item-control blog-admin pid-1149231287'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=5744936094617644796' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3788388016546296950'>
<a name='c3788388016546296950'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/12322006417042391733" rel="nofollow" onclick="" class="avatar-hovercard" id="av-10-12322006417042391733"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="xyproto">

</a></span></div>
<a href='http://www.blogger.com/profile/12322006417042391733' rel='nofollow'>xyproto</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3788388016546296950'>
<p>
I can imagine the reason this is efficient is because code often work on different parts of memory in different threads.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309376060700#c3788388016546296950' title='comment permalink'>
June 29, 2011 at 9:34 PM
</a>
<span class='item-control blog-admin pid-229644492'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3788388016546296950' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8245011911419012530'>
<a name='c8245011911419012530'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/16233666825312252602" rel="nofollow" onclick="" class="avatar-hovercard" id="av-11-16233666825312252602"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="ChrisW">

</a></span></div>
<a href='http://www.blogger.com/profile/16233666825312252602' rel='nofollow'>ChrisW</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8245011911419012530'>
<p>
Hmm, ZODB has this kind of optimistic transaction committing, it results in having to deal with ConflictErrors and slowness from retrying requests when they conflict amongst other pain. If that&#39;s the price for losing the GIL, I&#39;ll stick with the GIL, thanks...
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309382227015#c8245011911419012530' title='comment permalink'>
June 29, 2011 at 11:17 PM
</a>
<span class='item-control blog-admin pid-1445266032'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=8245011911419012530' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c5453623043023019250'>
<a name='c5453623043023019250'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/04917910715318384537" rel="nofollow" onclick="" class="avatar-hovercard" id="av-12-04917910715318384537"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="gertjan">

</a></span></div>
<a href='http://www.blogger.com/profile/04917910715318384537' rel='nofollow'>gertjan</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5453623043023019250'>
<p>
Well when it comes to removing the GIL I have always had my hopes on pypy, and I&#39;d be very happy to contribute some coin to make it happen. I&#39;ll be looking out for that crowdfunding post.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309384091552#c5453623043023019250' title='comment permalink'>
June 29, 2011 at 11:48 PM
</a>
<span class='item-control blog-admin pid-2028965297'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=5453623043023019250' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3600793507471169461'>
<a name='c3600793507471169461'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/17346639363388456729" rel="nofollow" onclick="" class="avatar-hovercard" id="av-13-17346639363388456729"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Zemantic dreams">

</a></span></div>
<a href='http://www.blogger.com/profile/17346639363388456729' rel='nofollow'>Zemantic dreams</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3600793507471169461'>
<p>
Ok, so where can we give a small contribution?<br /><br /><br /><br /><br />Andraz Tori, Zemanta
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309384819909#c3600793507471169461' title='comment permalink'>
June 30, 2011 at 12:00 AM
</a>
<span class='item-control blog-admin pid-1870186354'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3600793507471169461' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1434230658918180491'>
<a name='c1434230658918180491'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/16059166933270492555" rel="nofollow" onclick="" class="avatar-hovercard" id="av-14-16059166933270492555"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Richard">

</a></span></div>
<a href='http://www.blogger.com/profile/16059166933270492555' rel='nofollow'>Richard</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1434230658918180491'>
<p>
Have you read about Microsoft&#39;s <a href="http://www.infoq.com/news/2010/05/STM-Dropped" rel="nofollow">abandoned attempt</a> to bring STM to .NET?  Have you considered the problems they had?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309390326570#c1434230658918180491' title='comment permalink'>
June 30, 2011 at 1:32 AM
</a>
<span class='item-control blog-admin pid-30285431'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1434230658918180491' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c2708918130587197327'>
<a name='c2708918130587197327'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/13434834424707954610" rel="nofollow" onclick="" class="avatar-hovercard" id="av-15-13434834424707954610"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Jon Morgan">

</a></span></div>
<a href='http://www.blogger.com/profile/13434834424707954610' rel='nofollow'>Jon Morgan</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2708918130587197327'>
<p>
Interesting idea, but some questions:<br />1. What do C extensions do? (extensions designed for CPython that are using GIL methods).  Would they still be able to be used, or would they have to be rewritten for PyPy?<br /><br />2. What happens if repeatable operations are interleaved with operations that are not repeatable? (e.g. logging values to a file - we wouldn&#39;t want it to happen twice if there was a conflict, unless of course you are using that logging to trace what is happening...).
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309409778308#c2708918130587197327' title='comment permalink'>
June 30, 2011 at 6:56 AM
</a>
<span class='item-control blog-admin pid-166287729'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2708918130587197327' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c5465099268551807244'>
<a name='c5465099268551807244'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06711199476448783192" rel="nofollow" onclick="" class="avatar-hovercard" id="av-16-06711199476448783192"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Ben">

</a></span></div>
<a href='http://www.blogger.com/profile/06711199476448783192' rel='nofollow'>Ben</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5465099268551807244'>
<p>
@Michael Foord: In state-of-the-art lazy[1] STM systems, the probability of two transactions continually causing each other to restart is minuscule. A transaction only causes another one to restart when it tries to commit. So when somebody restarts, it means that someone else has successfully committed.<br /><br />[1] In &quot;Lazy&quot; STMs, transactions only get exclusive access to the things they&#39;re trying to write to for a very short window of time at the end. This means they have to record writes in a transaction log,  as Armin described, because there might be many pending writes for the same object. An alternative design is &quot;eager&quot; STM, where transactions write directly and have to &quot;undo&quot; their writes if they get aborted. Eager systems look good on paper, but in my opinion they&#39;re not worth it. With eager STM, the runtime system has to be very carefully designed to avoid livelock (when the system hangs because some transactions constantly abort each other). Lazy STM is almost impossible to livelock in practice, because even if some transactions are highly conflicting at least one of them (almost always) has to commit.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309426213197#c5465099268551807244' title='comment permalink'>
June 30, 2011 at 11:30 AM
</a>
<span class='item-control blog-admin pid-507540425'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=5465099268551807244' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1049876517038254333'>
<a name='c1049876517038254333'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06711199476448783192" rel="nofollow" onclick="" class="avatar-hovercard" id="av-17-06711199476448783192"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Ben">

</a></span></div>
<a href='http://www.blogger.com/profile/06711199476448783192' rel='nofollow'>Ben</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1049876517038254333'>
<p>
Also, my honours project was implementing most of an STM system, and I&#39;ve been a long time fan of (and sometime tinkerer with) PyPy, so I would be very interested in where this goes.<br /><br />And I know this is extremely premature, but if there were enough money coming in for this project and the PyPy team were willing to include outside developers, I would absolutely love to put serious work into this.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309427559590#c1049876517038254333' title='comment permalink'>
June 30, 2011 at 11:52 AM
</a>
<span class='item-control blog-admin pid-507540425'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1049876517038254333' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c2696537202720074437'>
<a name='c2696537202720074437'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-18-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2696537202720074437'>
<p>
@Richard: reading the web page you point out, Microsoft&#39;s STM attempt (like most others I&#39;m aware of) seems to work at a different level: basically as a library for application programmers.  I can go through all 4 points and show why they are not relevant in our context:<br /><br />* any visible I/O (e.g. writing to a file or a log) is going to end the transaction and start the next one, just like the GIL is released and re-acquired around most calls to the C library&#39;s write() function<br /><br />* the 2nd issue is moot, because STM will be an internal detail in PyPy, not a user-visible feature<br /><br />* the 3nd issue he describes is about &quot;update-in-place&quot; STM, which I believe is not the best solution: we want instead to keep a local log of the changes, and apply them only at commit-time (as described e.g. in the paper I pointed out)<br /><br />* the final issue is the lack of real successes with STM.  Well, we can&#39;t do anything about that ahead of time :-)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309429708435#c2696537202720074437' title='comment permalink'>
June 30, 2011 at 12:28 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2696537202720074437' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8056242036004521729'>
<a name='c8056242036004521729'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8056242036004521729'>
<p>
One note on the lock-based example you gave, that locks list1 and then list2: It isn&#39;t free of deadlocks!<br /><br />Having two threads call the function simultaneously with swapped args may cause a deadlock. See the bank account problem.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309429751895#c8056242036004521729' title='comment permalink'>
June 30, 2011 at 12:29 PM
</a>
<span class='item-control blog-admin pid-1375538803'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=8056242036004521729' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c2679223478450410025'>
<a name='c2679223478450410025'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/07139387039591209153" rel="nofollow" onclick="" class="avatar-hovercard" id="av-20-07139387039591209153"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Groupdmt">

</a></span></div>
<a href='http://www.blogger.com/profile/07139387039591209153' rel='nofollow'>Groupdmt</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2679223478450410025'>
<span class='deleted-comment'>This comment has been removed by a blog administrator.</span>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309430295769#c2679223478450410025' title='comment permalink'>
June 30, 2011 at 12:38 PM
</a>
<span class='item-control blog-admin '>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2679223478450410025' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c4555765567937989462'>
<a name='c4555765567937989462'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-21-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4555765567937989462'>
<p>
@Anonymous: yes, I know it can deadlock.  I have hidden the problem into some theoretical function acquire_all_locks(), which should somehow make sure that all locks are atomically acquired, in any order (which I think is possible by first sorting the locks according to their address in memory).  I didn&#39;t want to put too much emphasis on the negative side of locks :-)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309430982619#c4555765567937989462' title='comment permalink'>
June 30, 2011 at 12:49 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=4555765567937989462' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c134973505104874184'>
<a name='c134973505104874184'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-22-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-134973505104874184'>
<p>
@Jon Morgan:<br /><br />1. We would most probably still <br />have a GIL for the CPython C<br />extensions.  Only one can run at a<br />time, but any number of PyPy<br />threads can run at the same time.<br />(This is because the CPython C <br />extensions never access PyPy&#39;s own<br />objects directly --- they cannot,<br />because PyPy&#39;s own objects can<br />move, and the C code is not<br />prepared for that.)<br /><br />2. Logging to a file is done with a<br />call to a function like write().<br />In CPython and so far in PyPy, the<br />call to write() is preceded by<br />&quot;release GIL&quot; and followed by <br />&quot;re-acquire GIL&quot;.  In the STM PyPy,<br />it would be preceded by &quot;end the<br />current transaction&quot; and &quot;start the<br />next transaction&quot;.  This gives the<br />same behavior.  But we may have to<br />think a bit harder about writes<br />that are buffered, because it seems<br />that if all threads write into the<br />same buffer then it will cause many<br />transaction conflicts.<br /><br />Note however that we are talking<br />here about very short-lived<br />transactions.  Even if you have 20<br />threads all writing to the same log<br />file, each thread is going to run<br />much more than 20 bytecodes between<br />any two writes to the log file.<br />You only get conflicts if two of<br />these threads are running the<br />write() call at the same time, and<br />such a conflict only causes one of<br />the threads to roll back and retry<br />the write(), not more.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309431106766#c134973505104874184' title='comment permalink'>
June 30, 2011 at 12:51 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=134973505104874184' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c7607226165209444983'>
<a name='c7607226165209444983'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-23-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7607226165209444983'>
<p>
@tuomasjjrasanen: yes, actually the first paper is from the 80&#39;s.  But I think that it&#39;s only from around 2003 or 2004 that research seriously started, in the sense that papers were produced regularly, from several teams.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309431272434#c7607226165209444983' title='comment permalink'>
June 30, 2011 at 12:54 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7607226165209444983' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6005851428934007013'>
<a name='c6005851428934007013'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/05007506782555207970" rel="nofollow" onclick="" class="avatar-hovercard" id="av-24-05007506782555207970"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Kevin Granade">

</a></span></div>
<a href='http://www.blogger.com/profile/05007506782555207970' rel='nofollow'>Kevin Granade</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6005851428934007013'>
<p>
To address the anonymous question near the start of the comments, one way to detect commit collision is to copy a global generation counter at the start of your transaction, and then compare your stored copy to the current generation counter at commit time (after taking a lock), and if no one else has incremented the generation counter, you do so and complete your operation.<br /><br />So transaction does:<br />  self.generation = global.generation<br /><br />And commit does:<br />  if lock(global.lock):<br />    if self.generation == global.generation:<br />      global.generation += 1<br />      return True<br />  unlock(global.lock)<br />  return False
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309441659184#c6005851428934007013' title='comment permalink'>
June 30, 2011 at 3:47 PM
</a>
<span class='item-control blog-admin pid-225233885'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6005851428934007013' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c4682548028533622273'>
<a name='c4682548028533622273'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/00398184141815003668" rel="nofollow" onclick="" class="avatar-hovercard" id="av-25-00398184141815003668"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="&#9883;">

</a></span></div>
<a href='http://www.blogger.com/profile/00398184141815003668' rel='nofollow'>&#9883;</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4682548028533622273'>
<p>
I am not sure what to make out of the solution (=STM) to GIL you proposed in the article. You are essentially suggesting to slow down all Python programs in PyPy by a factor of, say, 4 and hope to recover the loss for a very small percentage of programs on an 8-core machine.<br /><br />That can&#39;t be right. Please tell me I am dreaming ... :)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309448863758#c4682548028533622273' title='comment permalink'>
June 30, 2011 at 5:47 PM
</a>
<span class='item-control blog-admin pid-620121459'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=4682548028533622273' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c5509470870472646674'>
<a name='c5509470870472646674'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/06229713779852499022" rel="nofollow" onclick="" class="avatar-hovercard" id="av-26-06229713779852499022"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://1.bp.blogspot.com/_Bn8hwSKb0pY/SlsopwL8EVI/AAAAAAAAAKo/p8cUWUMELfI/S45/fuzzy-logic.gif" title="Michael Foord">

<noscript><img src="http://1.bp.blogspot.com/_Bn8hwSKb0pY/SlsopwL8EVI/AAAAAAAAAKo/p8cUWUMELfI/S45/fuzzy-logic.gif" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/06229713779852499022' rel='nofollow'>Michael Foord</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5509470870472646674'>
<p>
So if there is only one thread transactions will be disabled?<br /><br />I wonder how &quot;fine grained&quot; transactions will be: if you have parallel operations working concurrently on a large array do you think you will be able to allow threads to simultaneously modify different areas of the array?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309458565359#c5509470870472646674' title='comment permalink'>
June 30, 2011 at 8:29 PM
</a>
<span class='item-control blog-admin pid-1214434033'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=5509470870472646674' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8423294810568751286'>
<a name='c8423294810568751286'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06711199476448783192" rel="nofollow" onclick="" class="avatar-hovercard" id="av-27-06711199476448783192"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Ben">

</a></span></div>
<a href='http://www.blogger.com/profile/06711199476448783192' rel='nofollow'>Ben</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8423294810568751286'>
<p>
@&#9883;: That&#39;s kind of how parallelization goes. There <i>are</i> overheads, and the only way to make up for them is to hope you have enough parallel speedup. STM (and any approach to this problem based on fine-grained locking) would work best if only a small known set of objects are shared between threads, and only those are synchronized, which unfortunately cannot be the case for a general GIL-removal proposal.<br /><br />However I think PyPy&#39;s JIT could potentially help a little here. The escape analysis PyPy already does can also prove &quot;this value cannot be accessed by another thread&quot; and used to avoid logging some values, since they cannot conflict with parallel transactions. There are probably some more STM-specific optimizations the JIT could do as well.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309465322258#c8423294810568751286' title='comment permalink'>
June 30, 2011 at 10:22 PM
</a>
<span class='item-control blog-admin pid-507540425'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=8423294810568751286' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3374399962905503180'>
<a name='c3374399962905503180'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06711199476448783192" rel="nofollow" onclick="" class="avatar-hovercard" id="av-28-06711199476448783192"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Ben">

</a></span></div>
<a href='http://www.blogger.com/profile/06711199476448783192' rel='nofollow'>Ben</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3374399962905503180'>
<p>
@Michael Foord: STM definitely can be made as fine-grained as you like. Some existing STM systems operate at the level of machine words. Given that this one will be operating at the interpreter level, I would guess that code working on different sections of the same object (or array) would able to run in parallel, but I guess it depends on how the tradeoffs play out.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309465675441#c3374399962905503180' title='comment permalink'>
June 30, 2011 at 10:27 PM
</a>
<span class='item-control blog-admin pid-507540425'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3374399962905503180' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c2639152976720743471'>
<a name='c2639152976720743471'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-29-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2639152976720743471'>
<p>
@&#9883;: to complete Ben&#39;s answer: yes, you are correct, but that&#39;s why the translation step &quot;insert STM logic&quot; is never going to be mandatory.  You will get either a regular pypy-c-gil or a pypy-c-stm, as two different executables, and you will choose the one most suited for your particular program.  I still expect pypy-c-gil to be the most used one, with pypy-c-stm an alternative that is only useful for people with massively multi-threaded programs.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309468342909#c2639152976720743471' title='comment permalink'>
June 30, 2011 at 11:12 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2639152976720743471' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6458560080848730942'>
<a name='c6458560080848730942'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/03210607518851888200" rel="nofollow" onclick="" class="avatar-hovercard" id="av-30-03210607518851888200"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="EmilK">

</a></span></div>
<a href='http://www.blogger.com/profile/03210607518851888200' rel='nofollow'>EmilK</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6458560080848730942'>
<p>
It would be cool, if the python programmer could mark &quot;uncritical&quot; sections, such that the stm book keeping is disabled for those sections where the programmer knows that there is no concurrency.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309514102945#c6458560080848730942' title='comment permalink'>
July 1, 2011 at 11:55 AM
</a>
<span class='item-control blog-admin pid-1784350517'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6458560080848730942' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1099543276947994014'>
<a name='c1099543276947994014'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Jacob Hall&eacute;n">

</span></div>
Jacob Hallén
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1099543276947994014'>
<p>
@EmilK: I think that would be very uncool. You would allow the developer to introduce bugs that would be extremely hard to locate. Parallel programs are quite difficult to get right to start with, and anyone who does not have complete understanding of what constitutes a critical section will be very likely to make an error.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309526222357#c1099543276947994014' title='comment permalink'>
July 1, 2011 at 3:17 PM
</a>
<span class='item-control blog-admin pid-2052112852'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1099543276947994014' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6749810887714222730'>
<a name='c6749810887714222730'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/03657421926790640934" rel="nofollow" onclick="" class="avatar-hovercard" id="av-32-03657421926790640934"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Skandalfo">

</a></span></div>
<a href='http://www.blogger.com/profile/03657421926790640934' rel='nofollow'>Skandalfo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6749810887714222730'>
<p>
There&#39;s an intermediate option between the GIL and the careful locking done by Jython, that I had a look at some time ago for making Python more thread friendly.<br /><br />Just exchanging the GIL for a global readers-writer lock would allow Python to use way more concurrency. You would run all Python code under a reader lock for operations that were read-only on objects. For modifying built in mutable objects, or for things like the one involving both lists in the Jython example, or when calling into C modules, you would have to acquire the writer version of the lock.<br /><br />Python threads would relinquish the reader lock each N opcodes, just like it&#39;s done now for the GIL, and I guess the acquisition of the writer lock should be given priority over the reader ones.<br /><br />This approach should be simpler to implement than using the transactional memory approach, and it should be possible to bake it into CPython too. I think I remember having read some discussion about this somewhere, but it didn&#39;t seem to come to anything...
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309634333762#c6749810887714222730' title='comment permalink'>
July 2, 2011 at 9:18 PM
</a>
<span class='item-control blog-admin pid-1498481358'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6749810887714222730' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c4360965247723485188'>
<a name='c4360965247723485188'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-33-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4360965247723485188'>
<p>
@Skandalfo: this cannot work with CPython, because of reference counting -- every bytecode modifies reference counts, so needs the &quot;write&quot; lock.  But it could be a possible idea to consider in PyPy.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309958792805#c4360965247723485188' title='comment permalink'>
July 6, 2011 at 3:26 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=4360965247723485188' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3621744944885004349'>
<a name='c3621744944885004349'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/12247054079055709296" rel="nofollow" onclick="" class="avatar-hovercard" id="av-34-12247054079055709296"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://2.bp.blogspot.com/_UCRucidkBow/TJph1cpoz4I/AAAAAAAAABc/XfkkgYcc0BM/S45/avatar_3.png" title="WhiteLynx">

<noscript><img src="http://2.bp.blogspot.com/_UCRucidkBow/TJph1cpoz4I/AAAAAAAAABc/XfkkgYcc0BM/S45/avatar_3.png" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/12247054079055709296' rel='nofollow'>WhiteLynx</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3621744944885004349'>
<p>
I love this idea.<br /><br />Just musing on an implementation detail here, but isn&#39;t the &quot;lazy&quot; STM implementation&#39;s transaction system effectively just an in-memory implementation of <a href="http://en.wikipedia.org/wiki/Copy-on-write" rel="nofollow">copy-on-write</a> semantics? It might be interesting to take a look at other things that have used COW for inspiration. (ZFS and btrfs come to mind) I like the idea that committing a transaction for a given object would just involve changing the object&#39;s address in memory to the modified copy.<br /><br />Also, I&#39;d be interested to see the read/write lock system get implemented, because it seems like it might be a better choice for programs that only use a couple threads.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309977740010#c3621744944885004349' title='comment permalink'>
July 6, 2011 at 8:42 PM
</a>
<span class='item-control blog-admin pid-390263282'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3621744944885004349' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c144044994863551132'>
<a name='c144044994863551132'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-144044994863551132'>
<p>
What is wrong with Jython&#39;s lock model? Java is a pretty efficient language, no? And there is also no need to acquire locks for objects that you can prove won&#39;t cause conflicts...
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309984248051#c144044994863551132' title='comment permalink'>
July 6, 2011 at 10:30 PM
</a>
<span class='item-control blog-admin pid-1606355422'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=144044994863551132' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1893492960642092934'>
<a name='c1893492960642092934'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/03657421926790640934" rel="nofollow" onclick="" class="avatar-hovercard" id="av-36-03657421926790640934"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Skandalfo">

</a></span></div>
<a href='http://www.blogger.com/profile/03657421926790640934' rel='nofollow'>Skandalfo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1893492960642092934'>
<p>
@Armin Rigo: If the problem for the RW-lock approach in CPython is just about reference count updates and checks, perhaps those could be done via atomic primitives, as supported on most modern architectures. This is what boost::shared_ptr does, IIRC, for the pointers to be thread-safe by default.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1309985273763#c1893492960642092934' title='comment permalink'>
July 6, 2011 at 10:47 PM
</a>
<span class='item-control blog-admin pid-1498481358'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1893492960642092934' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c1491011458610268082'>
<a name='c1491011458610268082'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-37-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1491011458610268082'>
<p>
@Skandalfo: right, indeed.  I don&#39;t know exactly the cost of such atomic operations.  Maybe it&#39;s fine, but I fear that doing tons of increfs/decrefs all the time (as needed for refcounts in CPython&#39;s simple interpreter) has an important cost.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1310213917631#c1491011458610268082' title='comment permalink'>
July 9, 2011 at 2:18 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=1491011458610268082' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3619688778116585484'>
<a name='c3619688778116585484'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/13818385078868452282" rel="nofollow" onclick="" class="avatar-hovercard" id="av-38-13818385078868452282"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Tuure Laurinolli">

</a></span></div>
<a href='http://www.blogger.com/profile/13818385078868452282' rel='nofollow'>Tuure Laurinolli</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3619688778116585484'>
<p>
@Armin Rigo<br /><br />You&#39;d need similar atomic instructions for an STM implementation too - although perhaps not as many? In any case they should be about as cheap as L1 cache writes unless there&#39;s contention, but then things are going to be slow in any case if you have contention. Of course you might have false sharing of objects etc. to muddle things up.<br /><br />In any case, what sort of semantics would a GIL-free Python have in multi-threaded case, compared to current GIL-infested Python? Each opcode can assumed to execute atomically?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1310411432626#c3619688778116585484' title='comment permalink'>
July 11, 2011 at 9:10 PM
</a>
<span class='item-control blog-admin pid-815490169'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3619688778116585484' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3690567214095593762'>
<a name='c3690567214095593762'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3690567214095593762'>
<p>
One thread have one interpreter.<br />Threads interactive like os native thread, use the os interactive method wrap by py.<br /><br />I want to embed multi interpreter in my c code!<br /><br />Please kill GIL!!!
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1310902366131#c3690567214095593762' title='comment permalink'>
July 17, 2011 at 1:32 PM
</a>
<span class='item-control blog-admin pid-1118741580'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3690567214095593762' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c643993945714192163'>
<a name='c643993945714192163'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06571920491893166679" rel="nofollow" onclick="" class="avatar-hovercard" id="av-40-06571920491893166679"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Raymin">

</a></span></div>
<a href='http://www.blogger.com/profile/06571920491893166679' rel='nofollow'>Raymin</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-643993945714192163'>
<p>
One thread have one interpreter.<br />Threads interactive like os native thread, use the os interactive method wrap by py.<br /><br />I want to embed multi interpreter in my c code!<br /><br />Please kill GIL!!!
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1310903284077#c643993945714192163' title='comment permalink'>
July 17, 2011 at 1:48 PM
</a>
<span class='item-control blog-admin pid-1040109567'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=643993945714192163' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c2402558896068760101'>
<a name='c2402558896068760101'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/06300515270104686574" rel="nofollow" onclick="" class="avatar-hovercard" id="av-41-06300515270104686574"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Armin Rigo">

</a></span></div>
<a href='http://www.blogger.com/profile/06300515270104686574' rel='nofollow'>Armin Rigo</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2402558896068760101'>
<p>
@Tuure Laurinolli: yes, but PyPy has no refcounts.  I was just discussing the pro/cons of the proposed locking solution on CPython (which is off-topic as far as this original blog post is concerned).  I don&#39;t even want to think about STM for CPython :-)<br /><br />For your second question, from the user&#39;s point of view, the semantics we would get with STM are automatically the same as with the GIL, which is why I like the approach.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1311509261673#c2402558896068760101' title='comment permalink'>
July 24, 2011 at 2:07 PM
</a>
<span class='item-control blog-admin pid-1181195972'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=2402558896068760101' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7546734685749852345'>
<a name='c7546734685749852345'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7546734685749852345'>
<p>
Also, what about the performance if the lazy commit method used in the post? Every transaction will create additional memory? Is that really efficient, IMHO this model is aiming a very small number of use cases??
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1311944895711#c7546734685749852345' title='comment permalink'>
July 29, 2011 at 3:08 PM
</a>
<span class='item-control blog-admin pid-1243930446'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=7546734685749852345' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6810451534659548339'>
<a name='c6810451534659548339'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/05255172019231560487" rel="nofollow" onclick="" class="avatar-hovercard" id="av-43-05255172019231560487"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="klaussfreire">

</a></span></div>
<a href='http://www.blogger.com/profile/05255172019231560487' rel='nofollow'>klaussfreire</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6810451534659548339'>
<p>
I can see a use for STM in CPython, too, though. Even though it seems to be not applicable, it need not be true.<br /><br />I worked on making the reference counting thread-friendly, in the sense that when you have multiple threads reading a big data structure, CPython&#39;s reference counting turns all the reads into writes, which is awful for performance.<br /><br />I wrote a patch to pack all writes in the same memory page (ie, reference pools, external reference counting), and was working on a patch for STM reference count updates.<br /><br />The thing with STM and reference counting, is that many operations cancel out at the end of the transaction. Like when you just read objects while performing computations, you acquire a reference, work, then release it.<br /><br />In the end, STM here would remove the need to write to shared memory.<br /><br />In the process of working on that patch, I can tell CPython can be made to use STM techniques. You have thread-local storage at the VM level already, macros handle almost all reference counting operations, it&#39;s all abstracted enough that it might be possible.<br /><br />For reference counting, the only problem is that STM is way slower for single threaded applications. WAY slower. For multithreaded, it pays off considerably, but CPython guys are very strongly set in favouring single-threaded performance.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1318627572994#c6810451534659548339' title='comment permalink'>
October 14, 2011 at 11:26 PM
</a>
<span class='item-control blog-admin pid-1055196864'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=6810451534659548339' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3485706436970942630'>
<a name='c3485706436970942630'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/13150889494647791786" rel="nofollow" onclick="" class="avatar-hovercard" id="av-44-13150889494647791786"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="halfaleague">

</a></span></div>
<a href='http://www.blogger.com/profile/13150889494647791786' rel='nofollow'>halfaleague</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3485706436970942630'>
<p>
How can we fund this?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1319774144248#c3485706436970942630' title='comment permalink'>
October 28, 2011 at 5:55 AM
</a>
<span class='item-control blog-admin pid-1893104655'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3485706436970942630' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c792407158724749987'>
<a name='c792407158724749987'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/11410841070239382771" rel="nofollow" onclick="" class="avatar-hovercard" id="av-45-11410841070239382771"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Maciej Fijalkowski">

</a></span></div>
<a href='http://www.blogger.com/profile/11410841070239382771' rel='nofollow'>Maciej Fijalkowski</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-792407158724749987'>
<p>
@halfaleague get in contact. pypy@sfconservancy.org is the right address for non-profit funding inquires.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1319787085803#c792407158724749987' title='comment permalink'>
October 28, 2011 at 9:31 AM
</a>
<span class='item-control blog-admin pid-1633129755'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=792407158724749987' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8308243215197803650'>
<a name='c8308243215197803650'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/04591470870683677596" rel="nofollow" onclick="" class="avatar-hovercard" id="av-46-04591470870683677596"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Daniel Waterworth">

</a></span></div>
<a href='http://www.blogger.com/profile/04591470870683677596' rel='nofollow'>Daniel Waterworth</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8308243215197803650'>
<p>
I managed to write a Haskell STM implementation in a single morning. It may not be the most efficient implementation (I&#39;ve found it to be about half the speed of the GHC implementation in the limited testing I&#39;ve done), but it&#39;s really simple and only uses atomic CAS.<br /><br />https://gist.github.com/1454995
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1323589215356#c8308243215197803650' title='comment permalink'>
December 11, 2011 at 8:40 AM
</a>
<span class='item-control blog-admin pid-211064414'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=8308243215197803650' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3970134007873174905'>
<a name='c3970134007873174905'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/07624923560639217913" rel="nofollow" onclick="" class="avatar-hovercard" id="av-47-07624923560639217913"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="shawn">

</a></span></div>
<a href='http://www.blogger.com/profile/07624923560639217913' rel='nofollow'>shawn</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3970134007873174905'>
<p>
have you looked at all at &quot;Worlds&quot; as a simpler interface to STM?<br /><br />http://www.vpri.org/pdf/tr2011001_final_worlds.pdf
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html?showComment=1325363913829#c3970134007873174905' title='comment permalink'>
December 31, 2011 at 9:38 PM
</a>
<span class='item-control blog-admin pid-356398142'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=3971202189709462152&postID=3970134007873174905' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
</dl>
</div>
<p class='comment-footer'>
<a href='http://www.blogger.com/comment.g?blogID=3971202189709462152&amp;postID=8270246310848099963' onclick=''>Post a Comment</a>
</p>
<div id='backlinks-container'>
<div id='Blog1_backlinks-container'>
<a name='links'></a><h4>
</h4>
<p class='comment-footer'>
<a class='comment-link' href='' id='Blog1_backlinks-create-link' target='_blank'>
</a>
</p>
</div>
</div>
</div>
</div>

        </div></div>
      
<!-- google_ad_section_end -->
</div>
<div class='blog-pager' id='blog-pager'>
<span id='blog-pager-newer-link'>
<a class='blog-pager-newer-link' href='http://morepypy.blogspot.co.uk/2011/07/realtime-image-processing-in-python.html' id='Blog1_blog-pager-newer-link' title='Newer Post'>Newer Post</a>
</span>
<span id='blog-pager-older-link'>
<a class='blog-pager-older-link' href='http://morepypy.blogspot.co.uk/2011/06/report-back-from-our-survey.html' id='Blog1_blog-pager-older-link' title='Older Post'>Older Post</a>
</span>
<a class='home-link' href='http://morepypy.blogspot.co.uk/'>Home</a>
</div>
<div class='clear'></div>
<div class='post-feeds'>
<div class='feed-links'>
Subscribe to:
<a class='feed-link' href='http://morepypy.blogspot.com/feeds/8270246310848099963/comments/default' target='_blank' type='application/atom+xml'>Post Comments (Atom)</a>
</div>
</div>
<script type="text/javascript">window.___gcfg = {'lang': 'en'};</script>
</div></div>
</div>
</div>
<div class='column-left-outer'>
<div class='column-left-inner'>
<aside>
<div class='sidebar section' id='sidebar-left-1'><div class='widget LinkList' id='LinkList1'>
<h2>Links of Interest</h2>
<div class='widget-content'>
<ul>
<li><a href='http://pypy.org/'>PyPy Homepage</a></li>
<li><a href='http://doc.pypy.org/'>Dev Documentation</a></li>
<li><a href='http://mail.python.org/mailman/listinfo/pypy-dev'>Mailing List</a></li>
</ul>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=LinkList&widgetId=LinkList1&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("LinkList1"));' target='configLinkList1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget HTML' id='HTML2'>
<h2 class='title'>Donate</h2>
<div class='widget-content'>
<a href="http://pypy.org/py3donate.html">Donation page</a>

<!--

<script type="text/javascript">
function validateAmount(amount){
       if(amount.value.match( /^[0-9]+(\.([0-9]+))?$/)){
               return true;
       }else{
               alert('You must enter a valid donation.');
               amount.focus();
               return false;
       }
}
</script>
<form action="https://checkout.google.com/cws/v2/Donations/622836985124940/checkoutForm" id="BB_BuyButtonForm" method="post" name="BB_BuyButtonForm" onsubmit="return validateAmount(this.item_price_1)" target="_top">
   <input name="item_name_1" type="hidden" value="PyPy Directed Donation via Software Freedom Conservancy, Inc."/>
   <input name="item_description_1" type="hidden" value="This is a donation to the Software Freedom Conservancy, Inc. The donation will be directed for the PyPy project."/>
   <input name="item_quantity_1" type="hidden" value="1"/>
   <input name="item_currency_1" type="hidden" value="USD"/>
   <input name="item_is_modifiable_1" type="hidden" value="true"/>
   <input name="item_min_price_1" type="hidden" value="5.0"/>
   <input name="item_max_price_1" type="hidden" value="25000.0"/>
   <input name="_charset_" type="hidden" value="utf-8"/>
   <table cellpadding="5" cellspacing="0" width="1%">
       <tr>
           <td align="left" nowrap="nowrap" width="1%">&#x24; <input id="item_price_1" name="item_price_1" onfocus="this.style.color='black'; this.value='';" size="11" style="color:grey;" type="text" value="Enter Amount"/>
           </td>
       </tr>
       <tr>
           <td align="left" width="1%">
               <input alt="Donate" src="https://checkout.google.com/buttons/donateNow.gif?merchant_id=622836985124940&amp;w=115&amp;h=50&amp;style=white&amp;variant=text&amp;loc=en_US" type="image"/>
           </td>
       </tr>
   </table>
</form>

<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="J268ZTLRE2BW8" />
<input type="image" src="https://www.paypal.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!" />
<img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1" />
</form>
-->
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=HTML&widgetId=HTML2&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML2"));' target='configHTML2' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div><div class='widget BlogArchive' id='BlogArchive1'>
<h2>Blog Archive</h2>
<div class='widget-content'>
<div id='ArchiveList'>
<div id='BlogArchive1_ArchiveList'>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2014-01-01T00:00:00%2B01:00&amp;updated-max=2015-01-01T00:00:00%2B01:00&amp;max-results=12'>2014</a>
<span class='post-count' dir='ltr'>(12)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2014_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2013-01-01T00:00:00%2B01:00&amp;updated-max=2014-01-01T00:00:00%2B01:00&amp;max-results=46'>2013</a>
<span class='post-count' dir='ltr'>(46)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(8)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2013_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2012-01-01T00:00:00%2B01:00&amp;updated-max=2013-01-01T00:00:00%2B01:00&amp;max-results=44'>2012</a>
<span class='post-count' dir='ltr'>(44)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2012_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate expanded'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy toggle-open'>&#9660;&#160;</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2011-01-01T00:00:00%2B01:00&amp;updated-max=2012-01-01T00:00:00%2B01:00&amp;max-results=43'>2011</a>
<span class='post-count' dir='ltr'>(43)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate expanded'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy toggle-open'>&#9660;&#160;</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(2)</span>
<ul class='posts'>
<li><a href='http://morepypy.blogspot.co.uk/2011/06/global-interpreter-lock-or-how-to-kill.html'>Global Interpreter Lock, or how to kill it</a></li>
<li><a href='http://morepypy.blogspot.co.uk/2011/06/report-back-from-our-survey.html'>Report back from our survey</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2011_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2010-01-01T00:00:00%2B01:00&amp;updated-max=2011-01-01T00:00:00%2B01:00&amp;max-results=44'>2010</a>
<span class='post-count' dir='ltr'>(44)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2010_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2009-01-01T00:00:00%2B01:00&amp;updated-max=2010-01-01T00:00:00%2B01:00&amp;max-results=38'>2009</a>
<span class='post-count' dir='ltr'>(38)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2009_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2008-01-01T00:00:00%2B01:00&amp;updated-max=2009-01-01T00:00:00%2B01:00&amp;max-results=50'>2008</a>
<span class='post-count' dir='ltr'>(62)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(10)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(8)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2008_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/search?updated-min=2007-01-01T00:00:00%2B01:00&amp;updated-max=2008-01-01T00:00:00%2B01:00&amp;max-results=19'>2007</a>
<span class='post-count' dir='ltr'>(19)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2007_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2007_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://morepypy.blogspot.co.uk/2007_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
</li>
</ul>
</div>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=BlogArchive&widgetId=BlogArchive1&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("BlogArchive1"));' target='configBlogArchive1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget Profile' id='Profile1'>
<h2>Contributors</h2>
<div class='widget-content'>
<ul>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/01704836367815055402' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Brian Kearns</a></li>
<li><a class='profile-name-link g-profile' href='https://plus.google.com/105620569112540575905' style='background-image: url(//www.google.com/images/icons/ui/gprofile_button-16.png);'>Remi Meier</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/00985924698593515074' style='background-image: url(//www.blogger.com/img/logo-16.png);'>holger krekel</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/06300515270104686574' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Armin Rigo</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/14054821112394577330' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Alex</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/07336549270776418081' style='background-image: url(//www.blogger.com/img/logo-16.png);'>mattip</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/17017456817083804792' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Antonio Cuni</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/08077054122516411452' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Samuele Pedroni</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/15466911074154154640' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Hakan Ardo</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/08851437269223332169' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Alexander Schremmer</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/13855081749436495258' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Romain Guillebert</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/00518922641059511014' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Carl Friedrich Bolz</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/05365013582304921306' style='background-image: url(//www.blogger.com/img/logo-16.png);'>David Schneider</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/11410841070239382771' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Maciej Fijalkowski</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/06229713779852499022' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Michael Foord</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/07891333377712029026' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Wim Lavrijsen</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/06955536323236904839' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Benjamin</a></li>
<li><a class='profile-name-link g-profile' href='http://www.blogger.com/profile/09838979615980113137' style='background-image: url(//www.blogger.com/img/logo-16.png);'>Philip Jenvey</a></li>
</ul>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=Profile&widgetId=Profile1&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("Profile1"));' target='configProfile1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget HTML' id='HTML1'>
<h2 class='title'>Subscribe Now</h2>
<div class='widget-content'>
<a 
href="http://feeds.feedburner.com/PyPyStatusBlog" rel="alternate" title="Subscribe to the newsfeed" type="application/rss+xml"><img alt="" style="border:0" src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png"/></a><a href="http://feeds.feedburner.com/PyPyStatusBlog" rel="alternate" title="Subscribe to my feed" type="application/rss+xml"> Subscribe in a reader</a>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=HTML&widgetId=HTML1&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML1"));' target='configHTML1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div><div class='widget HTML' id='HTML3'>
<h2 class='title'>Subscriber Count</h2>
<div class='widget-content'>
<p><a href="http://feeds.feedburner.com/PyPyStatusBlog"><img width="88" style="border:0" alt="" src="http://feeds.feedburner.com/~fc/PyPyStatusBlog?bg=FF9900&amp;fg=000000&amp;anim=0" height="26"/></a></p>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=HTML&widgetId=HTML3&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML3"));' target='configHTML3' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div><div class='widget HTML' id='HTML4'>
<h2 class='title'>Google Analytics</h2>
<div class='widget-content'>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-7778406-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=HTML&widgetId=HTML4&action=editWidget&sectionId=sidebar-left-1' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML4"));' target='configHTML4' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div></div>
<table border='0' cellpadding='0' cellspacing='0' class='section-columns columns-2'>
<tbody>
<tr>
<td class='first columns-cell'>
<div class='sidebar section' id='sidebar-left-2-1'></div>
</td>
<td class='columns-cell'>
<div class='sidebar section' id='sidebar-left-2-2'></div>
</td>
</tr>
</tbody>
</table>
<div class='sidebar section' id='sidebar-left-3'></div>
</aside>
</div>
</div>
<div class='column-right-outer'>
<div class='column-right-inner'>
<aside>
</aside>
</div>
</div>
</div>
<div style='clear: both'></div>
<!-- columns -->
</div>
<!-- main -->
</div>
</div>
<div class='main-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<footer>
<div class='footer-outer'>
<div class='footer-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left footer-fauxborder-left'>
<div class='fauxborder-right footer-fauxborder-right'></div>
<div class='region-inner footer-inner'>
<div class='foot section' id='footer-1'></div>
<table border='0' cellpadding='0' cellspacing='0' class='section-columns columns-2'>
<tbody>
<tr>
<td class='first columns-cell'>
<div class='foot section' id='footer-2-1'></div>
</td>
<td class='columns-cell'>
<div class='foot section' id='footer-2-2'></div>
</td>
</tr>
</tbody>
</table>
<!-- outside of the include in order to lock Attribution widget -->
<div class='foot section' id='footer-3'><div class='widget Attribution' id='Attribution1'>
<div class='widget-content' style='text-align: center;'>
Powered by <a href='http://www.blogger.com' target='_blank'>Blogger</a>.
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='//www.blogger.com/rearrange?blogID=3971202189709462152&widgetType=Attribution&widgetId=Attribution1&action=editWidget&sectionId=footer-3' onclick='return _WidgetManager._PopupConfig(document.getElementById("Attribution1"));' target='configAttribution1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div></div>
</div>
</div>
<div class='footer-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</footer>
<!-- content -->
</div>
</div>
<div class='content-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</div>
<script type='text/javascript'>
    window.setTimeout(function() {
        document.body.className = document.body.className.replace('loading', '');
      }, 10);
  </script>
<script type='text/javascript'>
  // http://stackoverflow.com/questions/3484924/javascript-using-flattr-api-how-to-wait-until-api-is-loaded
  function loadFlattr() {
    if(typeof(FlattrLoader) == "undefined")
        setTimeout(loadFlattr, 100);
    else
        FlattrLoader.setup(); 
  }
  loadFlattr();
</script>
<script type="text/javascript">
if (window.jstiming) window.jstiming.load.tick('widgetJsBefore');
</script><script type="text/javascript" src="https://www.blogger.com/static/v1/widgets/3401484092-widgets.js"></script>
<script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script>
<script type='text/javascript'>
if (typeof(BLOG_attachCsiOnload) != 'undefined' && BLOG_attachCsiOnload != null) { window['blogger_templates_experiment_id'] = "templatesV2";window['blogger_blog_id'] = '3971202189709462152';BLOG_attachCsiOnload('item_'); }_WidgetManager._Init('//www.blogger.com/rearrange?blogID\x3d3971202189709462152','//morepypy.blogspot.co.uk/2011/06/global-interpreter-lock-or-how-to-kill.html','3971202189709462152');
_WidgetManager._SetDataContext([{'name': 'blog', 'data': {'blogId': '3971202189709462152', 'bloggerUrl': 'http://www.blogger.com', 'title': 'PyPy Status Blog', 'pageType': 'item', 'postId': '8270246310848099963', 'url': 'http://morepypy.blogspot.co.uk/2011/06/global-interpreter-lock-or-how-to-kill.html', 'canonicalUrl': 'http://morepypy.blogspot.com/2011/06/global-interpreter-lock-or-how-to-kill.html', 'canonicalHomepageUrl': 'http://morepypy.blogspot.com/', 'homepageUrl': 'http://morepypy.blogspot.co.uk/', 'blogspotFaviconUrl': 'http://morepypy.blogspot.co.uk/favicon.ico', 'enabledCommentProfileImages': true, 'adultContent': false, 'disableAdSenseWidget': false, 'analyticsAccountNumber': '', 'searchLabel': '', 'searchQuery': '', 'pageName': 'Global Interpreter Lock, or how to kill it', 'pageTitle': 'PyPy Status Blog: Global Interpreter Lock, or how to kill it', 'encoding': 'UTF-8', 'locale': 'en', 'localeUnderscoreDelimited': 'en', 'isPrivate': false, 'isMobile': false, 'isMobileRequest': false, 'mobileClass': '', 'isPrivateBlog': false, 'languageDirection': 'ltr', 'feedLinks': '\74link rel\75\42alternate\42 type\75\42application/atom+xml\42 title\75\42PyPy Status Blog - Atom\42 href\75\42http://morepypy.blogspot.com/feeds/posts/default\42 /\76\n\74link rel\75\42alternate\42 type\75\42application/rss+xml\42 title\75\42PyPy Status Blog - RSS\42 href\75\42http://morepypy.blogspot.com/feeds/posts/default?alt\75rss\42 /\76\n\74link rel\75\42service.post\42 type\75\42application/atom+xml\42 title\75\42PyPy Status Blog - Atom\42 href\75\42http://www.blogger.com/feeds/3971202189709462152/posts/default\42 /\76\n\n\74link rel\75\42alternate\42 type\75\42application/atom+xml\42 title\75\42PyPy Status Blog - Atom\42 href\75\42http://morepypy.blogspot.com/feeds/8270246310848099963/comments/default\42 /\76\n', 'meTag': '', 'openIdOpTag': '', 'latencyHeadScript': '\74script type\75\42text/javascript\42\76(function() { var b\75window,f\75\42chrome\42,g\75\42tick\42,k\75\42jstiming\42;(function(){function d(a){this.t\75{};this.tick\75function(a,d,c){var e\75void 0!\75c?c:(new Date).getTime();this.t[a]\75[e,d];if(void 0\75\75c)try{b.console.timeStamp(\42CSI/\42+a)}catch(h){}};this[g](\42start\42,null,a)}var a;b.performance\46\46(a\75b.performance.timing);var n\75a?new d(a.responseStart):new d;b.jstiming\75{Timer:d,load:n};if(a){var c\75a.navigationStart,h\75a.responseStart;0\74c\46\46h\76\75c\46\46(b[k].srt\75h-c)}if(a){var e\75b[k].load;0\74c\46\46h\76\75c\46\46(e[g](\42_wtsrt\42,void 0,c),e[g](\42wtsrt_\42,\42_wtsrt\42,h),e[g](\42tbsd_\42,\42wtsrt_\42))}try{a\75null,\nb[f]\46\46b[f].csi\46\46(a\75Math.floor(b[f].csi().pageT),e\46\0460\74c\46\46(e[g](\42_tbnd\42,void 0,b[f].csi().startE),e[g](\42tbnd_\42,\42_tbnd\42,c))),null\75\75a\46\46b.gtbExternal\46\46(a\75b.gtbExternal.pageT()),null\75\75a\46\46b.external\46\46(a\75b.external.pageT,e\46\0460\74c\46\46(e[g](\42_tbnd\42,void 0,b.external.startE),e[g](\42tbnd_\42,\42_tbnd\42,c))),a\46\46(b[k].pt\75a)}catch(p){}})();b.tickAboveFold\75function(d){var a\0750;if(d.offsetParent){do a+\75d.offsetTop;while(d\75d.offsetParent)}d\75a;750\76\75d\46\46b[k].load[g](\42aft\42)};var l\75!1;function m(){l||(l\75!0,b[k].load[g](\42firstScrollTime\42))}b.addEventListener?b.addEventListener(\42scroll\42,m,!1):b.attachEvent(\42onscroll\42,m);\n })();\74/script\076', 'mobileHeadScript': '', 'ieCssRetrofitLinks': '\74!--[if IE]\76\74script type\75\42text/javascript\42 src\75\42https://www.blogger.com/static/v1/jsbin/1163241896-ieretrofit.js\42\76\74/script\76\n\74![endif]--\076', 'view': '', 'dynamicViewsCommentsSrc': '//www.blogblog.com/dynamicviews/4224c15c4e7c9321/js/comments.js', 'dynamicViewsScriptSrc': '//www.blogblog.com/dynamicviews/76f25a6f2e06af76', 'plusOneApiSrc': 'https://apis.google.com/js/plusone.js', 'sf': 'n', 'tf': ''}}, {'name': 'skin', 'data': {'vars': {'content_padding': '10px', 'paging_background': 'transparent none no-repeat scroll top center', 'image_border_small_size': '2px', 'body_background_gradient_cap': 'url(http://www.blogblog.com/1kt/simple/gradients_light.png)', 'tabs_selected_background_color': '#eeeeee', 'body_rule_color': '#eeeeee', 'header_shadow_spread': '1px', 'header_shadow_offset_left': '-1px', 'header_padding': '30px', 'link_visited_color': '#888888', 'post_title_font': 'normal normal 22px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'tabs_text_color': '#999999', 'date_header_margin': 'inherit', 'header_background_gradient': 'none', 'header_bottom_border_size': '1px', 'content_shadow_spread_webkit': '5px', 'header_shadow_offset_top': '-1px', 'widget_title_font': 'normal bold 11px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'main_section_margin': '0px', 'keycolor': '#66bbdd', 'content_shadow_spread': '40px', 'image_background_color': '#ffffff', 'header_font': 'normal normal 60px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'header_background_color': 'transparent', 'main_border_width': '0', 'main_padding': '15px', 'tabs_border_color': '#eeeeee', 'image_text_color': '#222222', 'description_text_size': '140%', 'post_footer_background_color': '#f9f9f9', 'body_background_gradient_tile': 'url(http://www.blogblog.com/1kt/simple/body_gradient_tile_light.png)', 'page_width': 'auto', 'tabs_background_gradient': 'url(http://www.blogblog.com/1kt/simple/gradients_light.png)', 'main_padding_bottom': '30px', 'tabs_background_color': '#f5f5f5', 'image_border_large_size': '5px', 'post_margin_bottom': '25px', 'body_background_override': '', 'tabs_margin_side': '30px', 'link_hover_color': '#33aaff', 'description_text_color': '#777777', 'body_text_color': '#222222', 'content_padding_horizontal': '10px', 'endSide': 'right', 'page_width_selector': '.region-inner', 'date_header_padding': 'inherit', 'post_footer_text_color': '#666666', 'startSide': 'left', 'date_header_color': '#222222', 'tabs_font': 'normal normal 14px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'post_footer_border_color': '#eeeeee', 'body_font': 'normal normal 12px Arial, Tahoma, Helvetica, FreeSans, sans-serif', 'footer_bevel': '0', 'tabs_bevel_border_width': '1px', 'date_header_background_color': 'transparent', 'content_shadow_spread_ie': '10px', 'widget_title_text_color': '#000000', 'header_border_horizontalsize': '0', 'image_border_color': '#eeeeee', 'tabs_border_width': '1px', 'content_background_color': '#ffffff', 'link_color': '#2288bb', 'header_text_color': '#3399bb', 'date_header_letterspacing': 'inherit', 'tabs_margin_top': '0', 'main_padding_top': '30px', 'header_border_size': '1px', 'tabs_selected_text_color': '#000000', 'content_background_color_selector': '.content-inner', 'body_background_color': '#66bbdd', 'widget_alternate_text_color': '#999999'}, 'override': ''}}, {'name': 'view', 'data': {'classic': {'name': 'classic', 'url': '?view\75classic'}, 'flipcard': {'name': 'flipcard', 'url': '?view\75flipcard'}, 'magazine': {'name': 'magazine', 'url': '?view\75magazine'}, 'mosaic': {'name': 'mosaic', 'url': '?view\75mosaic'}, 'sidebar': {'name': 'sidebar', 'url': '?view\75sidebar'}, 'snapshot': {'name': 'snapshot', 'url': '?view\75snapshot'}, 'timeslide': {'name': 'timeslide', 'url': '?view\75timeslide'}}}]);
_WidgetManager._RegisterWidget('_AttributionView', new _WidgetInfo('Attribution1', 'footer-3', null, document.getElementById('Attribution1'), {'attribution': 'Powered by \74a href\75\47http://www.blogger.com\47 target\75\47_blank\47\76Blogger\74/a\76.'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HeaderView', new _WidgetInfo('Header1', 'header', null, document.getElementById('Header1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogView', new _WidgetInfo('Blog1', 'main', null, document.getElementById('Blog1'), {'cmtInteractionsEnabled': false, 'showBacklinks': true, 'postId': '8270246310848099963', 'lightboxEnabled': true, 'lightboxModuleUrl': 'https://www.blogger.com/static/v1/jsbin/1938910137-lbx.js', 'lightboxCssUrl': 'https://www.blogger.com/static/v1/v-css/2392111094-lightbox_bundle.css'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LinkListView', new _WidgetInfo('LinkList1', 'sidebar-left-1', null, document.getElementById('LinkList1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML2', 'sidebar-left-1', null, document.getElementById('HTML2'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogArchiveView', new _WidgetInfo('BlogArchive1', 'sidebar-left-1', null, document.getElementById('BlogArchive1'), {'languageDirection': 'ltr'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_ProfileView', new _WidgetInfo('Profile1', 'sidebar-left-1', null, document.getElementById('Profile1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML1', 'sidebar-left-1', null, document.getElementById('HTML1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML3', 'sidebar-left-1', null, document.getElementById('HTML3'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML4', 'sidebar-left-1', null, document.getElementById('HTML4'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_NavbarView', new _WidgetInfo('Navbar1', 'navbar', null, document.getElementById('Navbar1'), {}, 'displayModeFull'));
</script>
</body>
</html>