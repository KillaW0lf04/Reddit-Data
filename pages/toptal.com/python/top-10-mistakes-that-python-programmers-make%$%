<!DOCTYPE html><!--[if IE 7]><html class="layout-wrapper ie ie7 lte9 lte8 lte7"><![endif]--><!--[if IE 8]><html class="layout-wrapper ie ie8 lte9 lte8"><![endif]--><!--[if IE 9]><html class="layout-wrapper ie ie9 lte9"><![endif]--><!--[if (gte IE 9)|!(IE)]<!--><html class="layout-wrapper"><head><title>10 Most Common Python Programming Mistakes | Toptal</title><meta content="This article describes 10 of the most common mistakes made, or pitfalls to be avoided, by Python programmers.  Familiarize yourself with them to help optimize your use of the language." name="description" /><meta charset="utf-8" /><meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible" />
<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"beacon-6.newrelic.com","errorBeacon":"bam.nr-data.net","licenseKey":"e3359cee6b","applicationID":"2530279","transactionName":"JV0NEUYJCQkARxgVEwReCgYbFgoWEUYYFg4JRQ==","queueTime":0,"applicationTime":22,"ttGuid":"","agentToken":null,"agent":"js-agent.newrelic.com/nr-411.min.js","extra":""}</script>
<script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(t,n,e){function r(e){if(!n[e]){var o=n[e]={exports:{}};t[e][0].call(o.exports,function(n){var o=t[e][1][n];return r(o?o:n)},o,o.exports)}return n[e].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<e.length;o++)r(e[o]);return r}({D5DuLP:[function(t,n){function e(t,n){var e=r[t];return e?e.apply(this,n):(o[t]||(o[t]=[]),void o[t].push(n))}var r={},o={};n.exports=e,e.queues=o,e.handlers=r},{}],handle:[function(t,n){n.exports=t("D5DuLP")},{}],G9z0Bl:[function(t,n){function e(){var t=l.info=NREUM.info;if(t&&t.agent&&t.licenseKey&&t.applicationID&&p&&p.body){l.proto="https"===f.split(":")[0]||t.sslForHttp?"https://":"http://",i("mark",["onload",a()]);var n=p.createElement("script");n.src=l.proto+t.agent,p.body.appendChild(n)}}function r(){"complete"===p.readyState&&o()}function o(){i("mark",["domContent",a()])}function a(){return(new Date).getTime()}var i=t("handle"),u=window,p=u.document,s="addEventListener",c="attachEvent",f=(""+location).split("?")[0],l=n.exports={offset:a(),origin:f,features:[]};p[s]?(p[s]("DOMContentLoaded",o,!1),u[s]("load",e,!1)):(p[c]("onreadystatechange",r),u[c]("onload",e)),i("mark",["firstbyte",a()])},{handle:"D5DuLP"}],loader:[function(t,n){n.exports=t("G9z0Bl")},{}]},{},["G9z0Bl"]);</script><meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport" /><meta content="authenticity_token" name="csrf-param" />
<meta content="DDsdLqbZXmm+/TV++XxqfKRyU3LHdEe/T2OQvJ1/d8c=" name="csrf-token" /><meta content="10 Most Common Mistakes that Python Programmers Make" property="og:title" /><meta content="http://www.toptal.com/uploads/blog/post_image/67/preview_article.png" property="og:image" /><meta content="Toptal Engineering Blog" property="og:site_name" /><meta content="This article describes 10 of the most common mistakes made, or pitfalls to be avoided, by Python programmers.  Familiarize yourself with them to help optimize your use of the language." property="og:description" /><link href="https://plus.google.com/104994258145522313271" rel="author" /><link href="/assets/favicons/favicon-a5173aa0a5d20de36b536216059b41ac.png" rel="icon" /><!--[if IE]><link href="/assets/favicons/favicon-df902fdb5f2fad2e38c444084cd2dcd5.ico" rel="shortcut icon" /><![endif]--><link href="/assets/favicons/touch_x57-b7bbea2ab94e028d8763d877ea57e003.png" rel="apple-touch-icon-precomposed" sizes="57x57" /><link href="/assets/favicons/touch_x72-d31b8e9543a50369f67a979121acefc6.png" rel="apple-touch-icon-precomposed" sizes="72x72" /><link href="/assets/favicons/touch_x114-d888198306815f26972b3c5bb6d1cbf2.png" rel="apple-touch-icon-precomposed" sizes="114x114" /><link href="/assets/favicons/touch_x57-b7bbea2ab94e028d8763d877ea57e003.png" rel="apple-touch-icon-precomposed" /><meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport" /><link href="/blog.rss" rel="alternate" title="Toptal Engineering Blog" type="application/rss+xml" /><meta content="authenticity_token" name="csrf-param" />
<meta content="DDsdLqbZXmm+/TV++XxqfKRyU3LHdEe/T2OQvJ1/d8c=" name="csrf-token" /><script src="//cdnjs.cloudflare.com/ajax/libs/modernizr/2.7.1/modernizr.min.js" type="text/javascript"></script><script type="text/javascript">// TODO: Figure out how to override Modernizr test
(function () {
  var isIE, noFlexboxClassName;
  isIE = /MSIE/.test(navigator.userAgent) && !/Opera/.test(navigator.userAgent);
  isIE11 = !!window.MSInputMethodContext
  if (Modernizr && (Modernizr.flexbox && (isIE || isIE11))) {
    noFlexboxClassName = document.documentElement.className.replace('flexbox', 'no-flexbox');
    document.documentElement.className = noFlexboxClassName;
  }
})();</script><!--[if (lte IE 8)]><script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7/html5shiv.js" type="text/javascript"></script><![endif]--><script type="text/javascript">
//<![CDATA[
window.gon = {};gon.flash={};
//]]>
</script><link href="/assets/public-71ddce1b200b3e1daedf2dfab32d02b9.css" media="all" rel="stylesheet" type="text/css" /><link href="/assets/portal-7359598eefa899e625755b9ae507105b.css" media="all" rel="stylesheet" type="text/css" /><link href="/assets/blog-4949a22537f77758c6d2e10caa877229.css" media="all" rel="stylesheet" type="text/css" /><!--[if (lte IE 8)]><script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js" type="text/javascript"></script><![endif]--><!--[if (gte IE 9)|(!IE)]><!--><script src="//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js" type="text/javascript"></script><![endif]--><script src="//cdn.optimizely.com/js/186204918.js" type="text/javascript"></script><script type="text/javascript">window.optimizely = window.optimizely || [];</script></head><body class="layout" id="top"><div class="layout_layer" data-view="layout#layout"><header class="page_header" data-role="fixed-header"><div class="page_header_line"></div><div class="page_header" data-view="layout#menu"><div class="grid-row is-light_gray"><div class="grid-row-inner is-wide has-padding page_header_top"><div class="page_header_top-logotype_wrapper"><div class="page_header_top-logotype"><a class="logo is-big is-link" href="http://www.toptal.com/">Toptal</a></div></div><a class="page_header_top-expand" data-role="expand_menu" href="#"><span class="page_header_top-expand_icon"></span></a><nav class="page_header_top-nav_wrapper"><ul class="page_header_top-nav"><li class="page_header_top-nav_item">Join <span class="page_header_top-label_chunk is-toptal">Toptal </span>as a</li><li class="page_header_top-nav_item"><a class="button is-green_candy is-small page_header_top-nav_link is-button" href="https://www.toptal.com/companies/apply">Company</a></li><li class="page_header_top-nav_item has-right_border"><a class="button is-green_candy is-small page_header_top-nav_link is-button" href="/developers">Developer</a></li><li class="page_header_top-nav_item"><a class="button is-small is-light page_header_top-nav_link is-button" href="https://www.toptal.com/users/login">Login</a></li></ul></nav></div></div><nav class="grid-row has-top_border is-light_gray page_header_menu-wrapper" data-role="menu_wrapper"><div class="grid-row-inner is-wide has-small_padding page_header_menu"><div class="page_header_menu-items-wrapper"><ul class="page_header_menu-items" data-role="menu"><li class="page_header_menu-item is-home"><a class="page_header_menu-link" href="http://www.toptal.com/"></a></li><li class="page_header_menu-item"><a class="page_header_menu-link" href="/why">Why</a></li><li class="page_header_menu-item"><a class="page_header_menu-link" href="/how">How</a></li><li class="page_header_menu-item"><a class="page_header_menu-link" href="/what">What</a></li><li class="page_header_menu-item"><a class="page_header_menu-link" href="/clients">Clients</a></li><li class="page_header_menu-item"><a class="page_header_menu-link" href="/team">Team</a></li><li class="page_header_menu-item"><a class="page_header_menu-link" href="/community">Community</a></li><li class="page_header_menu-item"><a class="page_header_menu-link" href="/blog">Blog</a></li><li class="page_header_menu-item"><a class="page_header_menu-link" href="/contact">Contact</a></li><li class="page_header_menu-item"><a class="page_header_menu-link" href="/faq">FAQ</a></li><li class="page_header_menu-item is-join"><a class="button is-green_candy is-small page_hader_menu-button" href="https://www.toptal.com/companies/apply">Hire a developer</a></li><li class="page_header_menu-item is-join"><a class="button is-green_candy is-small page_hader_menu-button" href="/developers">Apply as a developer</a></li><li class="page_header_menu-item is-login"><a class="button is-light is-small page_hader_menu-button is-login" href="https://www.toptal.com/users/login">Login</a></li><li class="page_header_menu-item is-contacts"><ul class="page_header_menu-contact-items is-replacable"><li class="page_header_menu-contact-item">Call us:</li><li class="page_header_menu-contact-item"><a class="link is-dark page_header_menu-contact-link" href="tel:8886043188">888.604.3188</a></li><li class="page_header_menu-contact-item"><a class="page_header_menu-contact-link is-social is-facebook" href="https://www.facebook.com/pages/toptal/141928212544793"><span class="page_header_menu-contact-link-icon"></span></a></li><li class="page_header_menu-contact-item"><a class="page_header_menu-contact-link is-social is-twitter" href="https://twitter.com/toptalllc"><span class="page_header_menu-contact-link-icon"></span></a></li><li class="page_header_menu-contact-item"><a class="page_header_menu-contact-link is-social is-google_plus" href="https://plus.google.com/+Toptalllc/"><span class="page_header_menu-contact-link-icon"></span></a></li></ul></li></ul></div><a class="button is-green_candy is-tiny page_header_menu-hire" href="https://www.toptal.com/companies/apply">Hire a developer</a><ul class="page_header_menu-contact-items is-replacable"><li class="page_header_menu-contact-item">Call us:</li><li class="page_header_menu-contact-item"><a class="link is-dark page_header_menu-contact-link" href="tel:8886043188">888.604.3188</a></li><li class="page_header_menu-contact-item"><a class="page_header_menu-contact-link is-social is-facebook" href="https://www.facebook.com/pages/toptal/141928212544793"><span class="page_header_menu-contact-link-icon"></span></a></li><li class="page_header_menu-contact-item"><a class="page_header_menu-contact-link is-social is-twitter" href="https://twitter.com/toptalllc"><span class="page_header_menu-contact-link-icon"></span></a></li><li class="page_header_menu-contact-item"><a class="page_header_menu-contact-link is-social is-google_plus" href="https://plus.google.com/+Toptalllc/"><span class="page_header_menu-contact-link-icon"></span></a></li></ul></div></nav></div></header><main class="layout-main"><div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_GB/all.js#xfbml=1&appId=565054136848482";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<header class="grid-row has-top_border has-bottom_border post_cover is-post"><div class="grid-row-inner is-wide has-big_padding blog_title for-show"></div></header><article class="grid-row is-transparent"><div class="grid-row-inner is-wide"><div class="post_title"><h1 class="post_title-text">10 Most Common Mistakes that Python Programmers Make</h1><a class="post_title-back" href="/blog">View all articles</a></div></div></article><section class="grid-row has-top_border is-transparent has-no_border" id="main_content"><div class="grid-row-inner has-medium_padding two_columns_layout is-wide"><div class="two_columns_layout-content"><div class="post is-full"><div class="post-meta-wrapper post_header"><div class="post_header-triangle"></div><div class="post_avatar post-meta-avatar"><img alt="Small_05032010050" class="post_avatar-image" src="/uploads/user/photo/11/small_05032010050.jpg" width="50" /></div><div class="post-meta is-full"><div class="post-meta-author"><p>by <strong><a href="/resume/martin-chikilian" class="link is-blue" target="_blank">Martin Chikilian</a></strong> - Python Software Engineer
@ <a href="http://www.toptal.com" class="link is-blue" target="_blank">Toptal</a>
</p>
</div><div class="post-meta-tags"><a href="/blog#python-posts">#Python</a> </div></div><div class="post-meta-extra"><div class="post-meta-extra-row"><div class="post-meta-extra-icon"><div class="post-meta-extra-icon-image is-share"></div></div><div class="post-share"><ul class="social_share"><li class="social_share-item is-facebook"><div class="fb-like" data-href="http://www.toptal.com/python/top-10-mistakes-that-python-programmers-make" data-send="false" data-layout="button_count" data-width="450" data-show-faces="false"></div>
</li><li class="social_share-item is-google_plus"><!-- Place this tag where you want the share button to render. -->
<div class="g-plus" data-action="share" data-annotation="bubble" data-href="http://www.toptal.com/python/top-10-mistakes-that-python-programmers-make"></div>

<!-- Place this tag after the last share tag. -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</li><li class="social_share-item is-linkedin"><script src="//platform.linkedin.com/in.js" type="text/javascript"> lang: en_US</script><script type="IN/Share" data-url="http://www.toptal.com/python/top-10-mistakes-that-python-programmers-make" data-counter="right"></script>
</li><li class="social_share-item is-twitter"><a href="https://twitter.com/share" class="twitter-share-button" data-url="http://www.toptal.com/python/top-10-mistakes-that-python-programmers-make" data-text="" data-via="toptalllc">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</li></ul></div></div></div></div><div class="content_body" data-subscribe="true" data-view="content#body"><h2 id="about-python">About Python</h2>

<p><a href="https://www.python.org/">Python</a> is an interpreted, object-oriented, high-level programming language with dynamic semantics. Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for <a href="http://en.wikipedia.org/wiki/Rapid_application_development">Rapid Application Development</a>, as well as for use as a scripting or glue language to connect existing components or services. Python supports modules and packages, thereby encouraging program modularity and code reuse.</p>

<h2 id="about-this-article">About this article</h2>

<p>Python’s simple, easy-to-learn syntax can mislead Python developers – especially those who are newer to the language – into missing some of its subtleties and underestimating the power of the language.</p>

<p>With that in mind, this article presents a “top 10” list of somewhat subtle, harder-to-catch mistakes that can bite even the most advanced Python developer in the rear.</p>

<p><img src="/uploads/blog/image/391/toptal-blog-image-1399578614447.png" alt="" /></p>

<p><em>(Note:  This article is intended for a more advanced audience than <a href="http://www.onlamp.com/pub/a/python/2004/02/05/learn_python.html">Common Mistakes of Python Programmers</a>, which is geared more toward those who are newer to the language.)</em></p>

<h2 id="common-mistake-1-misusing-expressions-as-defaults-for-function-arguments">Common Mistake #1: Misusing expressions as defaults for function arguments</h2>

<p>Python allows you to specify that a function argument is <em>optional</em> by providing a <em>default value</em> for it.  While this is a great feature of the language, it can lead to some confusion when the default value is <em><a href="https://docs.python.org/2/reference/datamodel.html">mutable</a></em>.  For example, consider this Python function definition:</p>

<pre><code>&gt;&gt;&gt; def foo(bar=[]):        # bar is optional and defaults to [] if not specified
...    bar.append("baz")    # but this line could be problematic, as we'll see...
...    return bar
</code></pre>

<p>A common mistake is to think that the optional argument will be set to the specified default expression <em>each time</em> the function is called without supplying a value for the optional argument.  In the above code, for example, one might expect that calling <code>foo()</code> repeatedly (i.e., without specifying a <code>bar</code> argument) would always return <code>'baz'</code>, since the assumption would be that <em>each time</em> <code>foo()</code> is called (without a <code>bar</code> argument specified) <code>bar</code> is set to <code>[]</code> (i.e., a new empty list).</p>

<p>But let’s look at what actually happens when you do this:</p>

<pre><code>&gt;&gt;&gt; foo()
["baz"]
&gt;&gt;&gt; foo()
["baz", "baz"]
&gt;&gt;&gt; foo()
["baz", "baz", "baz"]
</code></pre>

<p>Huh?  Why did it keep appending the default value of <code>"baz"</code> to an <em>existing</em> list each time <code>foo()</code> was called, rather than creating a <em>new</em> list each time?</p>

<p>The answer is that <em>the default value for a function argument is only evaluated once, at the time that the function is defined.</em>  Thus, the <code>bar</code> argument is initialized to its default (i.e., an empty list) only when <code>foo()</code> is first defined, but then calls to <code>foo()</code> (i.e., without a <code>bar</code> argument specified) will continue to use the same list to which <code>bar</code> was originally initialized.</p>

<p>FYI, a common workaround for this is as follows:</p>

<pre><code>&gt;&gt;&gt; def foo(bar=None):
...    if bar is None:		# or if not bar:
...        bar = []
...    bar.append("baz")
...    return bar
...
&gt;&gt;&gt; foo()
["baz"]
&gt;&gt;&gt; foo()
["baz"]
&gt;&gt;&gt; foo()
["baz"]
</code></pre>

<h2 id="common-mistake-2-using-class-variables-incorrectly">Common Mistake #2: Using class variables incorrectly</h2>

<p>Consider the following example:</p>

<pre><code>&gt;&gt;&gt; class A(object):
...     x = 1
...
&gt;&gt;&gt; class B(A):
...     pass
...
&gt;&gt;&gt; class C(A):
...     pass
...
&gt;&gt;&gt; print A.x, B.x, C.x
1 1 1
</code></pre>

<p>Makes sense.</p>

<pre><code>&gt;&gt;&gt; B.x = 2
&gt;&gt;&gt; print A.x, B.x, C.x
1 2 1
</code></pre>

<p>Yup, again as expected.</p>

<pre><code>&gt;&gt;&gt; A.x = 3
&gt;&gt;&gt; print A.x, B.x, C.x
3 2 3
</code></pre>

<p>What the <em>$%#!&amp;</em>??  We only changed <code>A.x</code>.  Why did <code>C.x</code> change too?</p>

<p>In Python, class variables are internally handled as dictionaries and follow what is often referred to as <a href="http://python-history.blogspot.com.ar/2010/06/method-resolution-order.html">Method Resolution Order (MRO)</a>.  So in the above code, since the attribute <code>x</code> is not found in class <code>C</code>, it will be looked up in its base classes (only <code>A</code> in the above example, although Python supports multiple inheritance).  In other words, <code>C</code> doesn’t have its own <code>x</code> property, independent of <code>A</code>.  Thus, references to <code>C.x</code> are in fact references to <code>A.x</code>.</p>

<h2 id="common-mistake-3-specifying-parameters-incorrectly-for-an-exception-block">Common Mistake #3: Specifying parameters incorrectly for an exception block</h2>

<p>Suppose you have the following code:</p>

<pre><code>&gt;&gt;&gt; try:
...     l = ["a", "b"]
...     int(l[2])
... except ValueError, IndexError:  # To catch both exceptions, right?
...     pass
...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 3, in &lt;module&gt;
IndexError: list index out of range
</code></pre>

<p>The problem here is that the <code>except</code> statement does <em>not</em> take a list of exceptions specified in this manner.  Rather, In Python 2.x, the syntax <code>except Exception, e</code> is used to bind the exception to the <em>optional</em> second parameter specified (in this case <code>e</code>), in order to make it available for further inspection.  As a result, in the above code, the <code>IndexError</code> exception is <em>not</em> being caught by the <code>except</code> statement; rather, the exception instead ends up being bound to a parameter named <code>IndexError</code>.</p>

<p>The proper way to catch multiple exceptions in an <code>except</code> statement is to specify the first parameter as a <a href="https://docs.python.org/2/tutorial/datastructures.html#tut-tuples">tuple</a> containing all exceptions to be caught.  Also, for maximum portability, use the <code>as</code> keyword, since that syntax is supported by both Python 2 and Python 3:</p>

<pre><code>&gt;&gt;&gt; try:
...     l = ["a", "b"]
...     int(l[2])
... except (ValueError, IndexError) as e:  
...     pass
...
&gt;&gt;&gt;
</code></pre>

<h2 id="common-mistake-4--misunderstanding-python-scope-rules">Common Mistake #4:  Misunderstanding Python scope rules</h2>

<p>Python scope resolution is based on what is known as the <a href="https://blog.mozilla.org/webdev/2011/01/31/python-scoping-understanding-legb/">LEGB</a> rule, which is shorthand for <strong>L</strong>ocal, <strong>E</strong>nclosing, <strong>G</strong>lobal, <strong>B</strong>uilt-in.  Seems straightforward enough, right?  Well, actually, there are some subtleties to the way this works in Python.  Consider the following:</p>

<pre><code>&gt;&gt;&gt; x = 10
&gt;&gt;&gt; def foo():
...     x += 1
...     print x
...
&gt;&gt;&gt; foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in foo
UnboundLocalError: local variable 'x' referenced before assignment
</code></pre>

<p>What’s the problem?</p>

<p>The above error occurs because, when you make an <em>assignment</em> to a variable in a scope, <em>that variable is automatically considered by Python to be local to that scope</em> and shadows any similarly named variable in any outer scope.</p>

<p>Many are thereby surprised to get an <code>UnboundLocalError</code> in previously working code when it is modified by adding an assignment statement somewhere in the body of a function.  (You can read more about this <a href="https://docs.python.org/2/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value">here</a>.)</p>

<p>It is particularly common for this to trip up developers when using <a href="https://docs.python.org/2/tutorial/datastructures.html">lists</a>.  Consider the following example:</p>

<pre><code>&gt;&gt;&gt; lst = [1, 2, 3]
&gt;&gt;&gt; def foo1():
...     lst.append(5)   # This works ok...
...
&gt;&gt;&gt; foo1()
&gt;&gt;&gt; lst
[1, 2, 3, 5]

&gt;&gt;&gt; lst = [1, 2, 3]
&gt;&gt;&gt; def foo2():
...     lst += [5]      # ... but this bombs!
...
&gt;&gt;&gt; foo2()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in foo
UnboundLocalError: local variable 'lst' referenced before assignment
</code></pre>

<p>Huh?  Why did <code>foo2</code> bomb while <code>foo1</code> ran fine?</p>

<p>The answer is the same as in the prior example, but is admittedly more subtle.  <code>foo1</code> is not making an <em>assignment</em> to <code>lst</code>, whereas <code>foo2</code> is.  Remembering that <code>lst += [5]</code> is really just shorthand for <code>lst = lst + [5]</code>, we see that we are attempting to <em>assign</em> a value to <code>lst</code> (therefore presumed by Python to be in the local scope).  However, the value we are looking to assign to <code>lst</code> is based on <code>lst</code> itself (again, now presumed to be in the local scope), which has not yet been defined.  Boom.</p>

<h2 id="common-mistake-5-modifying-a-list-while-iterating-over-it">Common Mistake #5: Modifying a list while iterating over it</h2>

<p>The problem with the following code should be fairly obvious:</p>

<pre><code>&gt;&gt;&gt; odd = lambda x : bool(x % 2)
&gt;&gt;&gt; numbers = [n for n in range(10)]
&gt;&gt;&gt; for i in range(len(numbers)):
...     if odd(numbers[i]):
...         del numbers[i]  # BAD: Deleting item from a list while iterating over it
...
Traceback (most recent call last):
  	  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
IndexError: list index out of range
</code></pre>

<p>Deleting an item from a list or array while iterating over it is a faux pas well known to any experienced software developer.  But while the example above may be fairly obvious, even advanced developers can be unintentionally bitten by this in code that is much more complex.</p>

<p>Fortunately, Python incorporates a number of elegant programming paradigms which, when used properly, can result in significantly simplified and streamlined code.  A side benefit of this is that simpler code is less likely to be bitten by the accidental-deletion-of-a-list-item-while-iterating-over-it bug.  One such paradigm is that of <a href="https://docs.python.org/2/tutorial/datastructures.html#tut-listcomps">list comprehensions</a>.  Moreover, list comprehensions are particularly useful for avoiding this specific problem, as shown by this alternate implementation of the above code which works perfectly:</p>

<pre><code>&gt;&gt;&gt; odd = lambda x : bool(x % 2)
&gt;&gt;&gt; numbers = [n for n in range(10)]
&gt;&gt;&gt; numbers[:] = [n for n in numbers if not odd(n)]  # ahh, the beauty of it all
&gt;&gt;&gt; numbers
[0, 2, 4, 6, 8]
</code></pre>

<h2 id="common-mistake-6-confusing-how-python-binds-variables-in-closures">Common Mistake #6: Confusing how Python binds variables in closures</h2>

<p>Considering the following example:</p>

<pre><code>&gt;&gt;&gt; def create_multipliers():
...     return [lambda x : i * x for i in range(5)]
&gt;&gt;&gt; for multiplier in create_multipliers():
...     print multiplier(2)
...
</code></pre>

<p>You might expect the following output:</p>

<pre><code>0
2
4
6
8
</code></pre>

<p>But you actually get:</p>

<pre><code>8
8
8
8
8
</code></pre>

<p>Surprise!</p>

<p>This happens due to Python’s <em>late binding</em> behavior which says that the values of variables used in closures are looked up at the time the inner function is called.  So in the above code, whenever any of the returned functions are called, the value of <code>i</code> is looked up <em>in the surrounding scope at the time it is called</em> (and by then, the loop has completed, so <code>i</code> has already been assigned its final value of 4).</p>

<p>The solution to this is a bit of a hack:</p>

<pre><code>&gt;&gt;&gt; def create_multipliers():
...     return [lambda x, i=i : i * x for i in range(5)]
...
&gt;&gt;&gt; for multiplier in create_multipliers():
...     print multiplier(2)
...
0
2
4
6
8
</code></pre>

<p>Voilà! We are taking advantage of default arguments here to generate anonymous functions in order to achieve the desired behavior.  Some would call this elegant.  Some would call it subtle.  Some hate it.  But if you’re a Python developer, it’s important to understand in any case.</p>

<h2 id="common-mistake-7-creating-circular-module-dependencies">Common Mistake #7: Creating circular module dependencies</h2>

<p>Let’s say you have two files, <code>a.py</code> and <code>b.py</code>, each of which imports the other, as follows:</p>

<p>In <code>a.py</code>:</p>

<pre><code>import b

def f():
    return b.x
	
print f()
</code></pre>

<p>And in <code>b.py</code>:</p>

<pre><code>import a

x = 1

def g():
    print a.f()
</code></pre>

<p>First, let’s try importing <code>a.py</code>:</p>

<pre><code>&gt;&gt;&gt; import a
1
</code></pre>

<p>Worked just fine.  Perhaps that surprises you.  After all, we do have a circular import here which presumably should be a problem, shouldn’t it?</p>

<p>The answer is that the mere <em>presence</em> of a circular import is not in and of itself a problem in Python.  If a module has already been imported, Python is smart enough not to try to re-import it.  However, depending on the point at which each module is attempting to access functions or variables defined in the other, you may indeed run into problems.</p>

<p>So returning to our example, when we imported <code>a.py</code>, it had no problem importing <code>b.py</code>, since <code>b.py</code> does not require anything from <code>a.py</code> to be defined <em>at the time it is imported</em>.  The only reference in <code>b.py</code> to <code>a</code> is the call to <code>a.f()</code>.  But that call is in <code>g()</code> and nothing in <code>a.py</code> or <code>b.py</code> invokes <code>g()</code>.  So life is good.</p>

<p>But what happens if we attempt to import <code>b.py</code> (without having previously imported <code>a.py</code>, that is):</p>

<pre><code>&gt;&gt;&gt; import b
Traceback (most recent call last):
  	  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  	  File "b.py", line 1, in &lt;module&gt;
    import a
  	  File "a.py", line 6, in &lt;module&gt;
	print f()
  	  File "a.py", line 4, in f
	return b.x
AttributeError: 'module' object has no attribute 'x'
</code></pre>

<p>Uh-oh.  That’s not good!  The problem here is that, in the process of importing <code>b.py</code>, it attempts to import <code>a.py</code>, which in turn calls <code>f()</code>, which attempts to access <code>b.x</code>.  But <code>b.x</code> has not yet been defined.  Hence the <code>AttributeError</code> exception. </p>

<p>At least one solution to this is quite trivial.  Simply modify <code>b.py</code> to import <code>a.py</code> <em>within</em> <code>g()</code>:</p>

<pre><code>x = 1

def g():
    import a	# This will be evaluated only when g() is called
    print a.f()
</code></pre>

<p>No when we import it, everything is fine:</p>

<pre><code>&gt;&gt;&gt; import b
&gt;&gt;&gt; b.g()
1	# Printed a first time since module 'a' calls 'print f()' at the end
1	# Printed a second time, this one is our call to 'g'
</code></pre>

<h2 id="common-mistake-8-name-clashing-with-python-standard-library-modules">Common Mistake #8: Name clashing with Python Standard Library modules</h2>

<p>One of the beauties of Python is the wealth of library modules that it comes with “out of the box”.  But as a result, if you’re not consciously avoiding it, it’s not that difficult to run into a name clash between the name of one of your modules and a module with the same name in the standard library that ships with Python (for example, you might have a module named <code>email.py</code> in your code, which would be in conflict with the standard library module of the same name). </p>

<p>This can lead to gnarly problems, such as importing another library which in turns tries to import the Python Standard Library version of a module but, since you have a module with the same name, the other package mistakenly imports your version instead of the one within the Python Standard Library.  This is where bad stuff happens.</p>

<p>Care should therefore be exercised to avoid using the same names as those in the Python Standard Library modules.  It’s way easier for you to change the name of a module within your package than it is to file a <a href="http://legacy.python.org/dev/peps/">Python Enhancement Proposal (PEP)</a> to request a name change upstream and to try and get that approved.</p>

<h2 id="common-mistake-9-failing-to-address-differences-between-python-2-and-python-3">Common Mistake #9: Failing to address differences between Python 2 and Python 3</h2>

<p>Consider the following file <code>foo.py</code>:</p>

<pre><code>import sys

def bar(i):
    if i == 1:
        raise KeyError(1)
    if i == 2:
        raise ValueError(2)

def bad():
    e = None
    try:
        bar(int(sys.argv[1]))
    except KeyError as e:
        print('key error')
    except ValueError as e:
        print('value error')
    print(e)

bad()
</code></pre>

<p>On Python 2, this runs fine:</p>

<pre><code>$ python foo.py 1
key error
1
$ python foo.py 2
value error
2
</code></pre>

<p>But now let’s give it a whirl on Python 3:</p>

<pre><code>$ python3 foo.py 1
key error
Traceback (most recent call last):
  File "foo.py", line 19, in &lt;module&gt;
    bad()
  File "foo.py", line 17, in bad
    print(e)
UnboundLocalError: local variable 'e' referenced before assignment
</code></pre>

<p>What has just happened here?  The “problem” is that, in Python 3, the exception object is not accessible beyond the scope of the <code>except</code> block. (The reason for this is that, otherwise, it would keep a reference cycle with the stack frame in memory until the garbage collector runs and purges the references from memory.  More technical detail about this is available <a href="https://docs.python.org/3/reference/compound_stmts.html#except">here</a>).</p>

<p>One way to avoid this issue is to maintain a reference to the exception object <em>outside</em> the scope of the <code>except</code> block so that it remains accessible.  Here’s a version of the previous example that uses this technique, thereby yielding code that is both Python 2 and Python 3 friendly:</p>

<pre><code>import sys

def bar(i):
    if i == 1:
        raise KeyError(1)
    if i == 2:
        raise ValueError(2)

def good():
    exception = None
    try:
        bar(int(sys.argv[1]))
    except KeyError as e:
        exception = e
        print('key error')
    except ValueError as e:
        exception = e
        print('value error')
    print(exception)

good()
</code></pre>

<p>Running this on Py3k:</p>

<pre><code>$ python3 foo.py 1
key error
1
$ python3 foo.py 2
value error
2
</code></pre>

<p>Yippee!</p>

<p>(Incidentally, our <a href="http://www.toptal.com/python#hiring-guide">Python Hiring Guide</a> discusses a number of other important differences to be aware of when migrating code from Python 2 to Python 3.)</p>

<h2 id="common-mistake-10-misusing-the-del-method">Common Mistake #10: Misusing the <code>__del__</code> method</h2>

<p>Let’s say you had this in a file called <code>mod.py</code>:</p>

<pre><code>import foo

class Bar(object):
   	    ...
    def __del__(self):
        foo.cleanup(self.myhandle)
</code></pre>

<p>And you then tried to do this from <code>another_mod.py</code>:</p>

<pre><code>import mod
mybar = mod.Bar()
</code></pre>

<p>You’d get an ugly <code>AttributeError</code> exception.</p>

<p>Why?  Because, as reported <a href="https://mail.python.org/pipermail/python-bugs-list/2009-January/069209.html">here</a>, when the interpreter shuts down, the module’s global variables are all set to <code>None</code>.  As a result, in the above example, at the point that <a href="https://docs.python.org/2/reference/datamodel.html#object.__del__"><code>__del__</code></a> is invoked, the name <code>foo</code> has already been set to <code>None</code>.</p>

<p>A solution would be to use <a href="https://docs.python.org/2/library/atexit.html"><code>atexit.register()</code></a> instead.  That way, when your program is finished executing (when exiting normally, that is), your registered handlers are kicked off <em>before</em> the interpreter is shut down.</p>

<p>With that understanding, a fix for the above <code>mod.py</code> code might then look something like this:</p>

<pre><code>import foo
import atexit

def cleanup(handle):
    foo.cleanup(handle)


class Bar(object):
    def __init__(self):
        ...
        atexit.register(cleanup, self.myhandle)
</code></pre>

<p>This implementation provides a clean and reliable way of calling any needed cleanup functionality upon normal program termination.  Obviously, it’s up to <code>foo.cleanup</code> to decide what to do with the object bound to the name <code>self.myhandle</code>, but you get the idea. </p>

<h2 id="wrap-up">Wrap-up</h2>

<p>Python is a powerful and flexible language with many mechanisms and paradigms that can greatly improve productivity.  As with any software tool or language, though, having a limited understanding or appreciation of its capabilities can sometimes be more of an impediment than a benefit, leaving one in the proverbial state of “knowing enough to be dangerous”.</p>

<p>Familiarizing oneself with the key nuances of Python, such as (but by no means limited to) the issues raised in this article, will help optimize use of the language while avoiding some of its more common pitfalls.</p>

<p>You might also want to check out our <a href="http://www.toptal.com/python#hiring-guide">Insider’s Guide to Python Interviewing</a> for suggestions on interview questions that can help identify Python experts.</p>

<p>We hope you’ve found the pointers in this article helpful and welcome your feedback.  </p>
<div class="post-join"><a class="button is-white_and_green is-default is-full_width" href="/python">Looking to hire top engineers? Check out Toptal's Python developers!</a></div><div class="template" data-role="subscribe_template"><form action="/blog/subscribe" class="blog_subscribe for-post" data-placement="post" data-remote="" data-type="text" data-view="blog_subscribe#subscribe" method="post"><div class="blog_subscribe-row"><div class="blog_subscribe-label">Editor&#39;s note: want posts just like this delivered straight to your inbox? Subscribe below to receive our latest engineering articles.</div></div><div class="blog_subscribe-row"><input class="input is-medium" data-role="email" name="email" placeholder="Enter your email address..." /></div><div class="blog_subscribe-row-wrapper is-footer"><div class="blog_subscribe-row is-submit"><input class="button is-green_candy is-default is-full_width" data-role="submit" type="submit" value="Subscribe Now" /></div><div class="blog_subscribe-row is-privacy"><div class="blog_subscribe-privacy"><div class="blog_subscribe-privacy-icon"></div><div class="blog_subscribe-privacy_text">We will never share your email with any 3rd party or spam you</div></div></div></div><div class="blog_subscribe-template" data-role="success_template" style="display:none"><div class="blog_subscribe-row"><div class="blog_subscribe-label">Subscribe to Engineering Articles by Email</div></div><div class="blog_subscribe-row"><div class="blog_subscribe-label is-header">Thank you for subscribing!</div></div><div class="blog_subscribe-row"><div class="blog_subscribe-done"><ul class="blog_follow_us"><li class="blog_follow_us-source"><div class="fb-like" data-href="http://www.toptal.com/blog" data-send="false" data-layout="button_count" data-width="450" data-show-faces="false"></div</li><li class="blog_follow_us-source is-twitter"><a href="https://twitter.com/toptalllc" class="twitter-follow-button" data-show-count="true">Follow @toptalllc</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script></li><li class="blog_follow_us-source"><div class="g-follow" data-annotation="bubble" data-height="20" data-href="https://plus.google.com/109028009576318848424" data-rel="publisher"></div>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/platform.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></li></ul></div></div></div></form></div></div><form action="/blog/subscribe" class="blog_subscribe for-below" data-placement="below" data-remote="" data-type="text" data-view="blog_subscribe#subscribe" method="post"><div class="blog_subscribe-row"><div class="blog_subscribe-label">Subscribe to our engineering blog for the latest tips</div></div><div class="blog_subscribe-row"><input class="input is-medium" data-role="email" name="email" placeholder="Enter your email address..." /></div><div class="blog_subscribe-row-wrapper is-footer"><div class="blog_subscribe-row is-submit"><input class="button is-green_candy is-default is-full_width" data-role="submit" type="submit" value="Subscribe Now" /></div><div class="blog_subscribe-row is-privacy"><div class="blog_subscribe-privacy"><div class="blog_subscribe-privacy-icon"></div><div class="blog_subscribe-privacy_text">We will never share your email with any 3rd party or spam you</div></div></div></div><div class="blog_subscribe-template" data-role="success_template" style="display:none"><div class="blog_subscribe-row"><div class="blog_subscribe-label">Subscribe to Engineering Articles by Email</div></div><div class="blog_subscribe-row"><div class="blog_subscribe-label is-header">Thank you for subscribing!</div></div><div class="blog_subscribe-row"><div class="blog_subscribe-done"><ul class="blog_follow_us"><li class="blog_follow_us-source"><div class="fb-like" data-href="http://www.toptal.com/blog" data-send="false" data-layout="button_count" data-width="450" data-show-faces="false"></div</li><li class="blog_follow_us-source is-twitter"><a href="https://twitter.com/toptalllc" class="twitter-follow-button" data-show-count="true">Follow @toptalllc</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script></li><li class="blog_follow_us-source"><div class="g-follow" data-annotation="bubble" data-height="20" data-href="https://plus.google.com/109028009576318848424" data-rel="publisher"></div>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/platform.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></li></ul></div></div></div></form><div class="post_comments"><div id="disqus_thread_container"><div id="disqus_thread"><div class="d-noscript-comments"><h3>Comments</h3><div class="post-comment"><div class="post-comment-author">Hubert OG</div><div class="post-comment-body">Common Mistake #0: Programming in Python</div></div><div class="post-comment"><div class="post-comment-author">Dan Riti</div><div class="post-comment-body">For Common Mistake #3, you should be using the `as` syntax for capturing exceptions, as it&#39;s both Python2.6+ &amp; Python3+ compatible:

https://docs.python.org/3/howto/pyporting.html#capturing-the-currently-raised-exception</div></div><div class="post-comment"><div class="post-comment-author">not me</div><div class="post-comment-body">Common Mistake #-1: Being a programmer</div></div><div class="post-comment"><div class="post-comment-author">Oskar Olsson</div><div class="post-comment-body">So brave.</div></div><div class="post-comment"><div class="post-comment-author">Alex</div><div class="post-comment-body">so common, very python</div></div><div class="post-comment"><div class="post-comment-author">Adam Hitchcock</div><div class="post-comment-body">Why not Python? What alternative would you propose? And why is it specifically better than Python?</div></div><div class="post-comment"><div class="post-comment-author">cocoflunchy</div><div class="post-comment-body">Any reason why you&#39;re using a slice here?
&gt;&gt;&gt; numbers[:] = [n for n in numbers if not odd(n)]
I&#39;m thinking that doing 
&gt;&gt;&gt; numbers = [n for n in numbers if not odd(n)]
wouldn&#39;t be a problem since the assignment is executed after the computation of the list comprehension.</div></div><div class="post-comment"><div class="post-comment-author">Andres Moreno</div><div class="post-comment-body">for common mistake #6 you can replace the list comprehension with a generator (substitute the square brackets for parentheses) and the code will work fine....

In [6]: def create_multipliers():

   ...:     return (lambda x: x*i for i in range(5))

   ...: 

In [7]: for multiplies in create_multipliers():

   ...:     print multiplies(2)

   ...:     

0

2

4

6

8</div></div><div class="post-comment"><div class="post-comment-author">Kim Scheibel</div><div class="post-comment-body">Re. #1: If you&#39;re mutating arguments that have been passed by reference, and you&#39;re surprised that this has sideeffects, then you have problems more generally than just when handling defaulted arguments. For example, what happens when the client actually does pass in a list (which in Python is always a reference) and your function blithely changes it?  I know this is a minority view, but I don&#39;t think that the solution is to do the &quot;if arg is None&quot; dance (notwithstanding the Google style guide, etc). The solution is for the implementor of any function to understand that changing an argument that was passed in by reference, generally, has sideeffects, and that this should only be done very deliberately, and then only when the function is named to make it obvious that it&#39;s going to mess with its arguments.</div></div><div class="post-comment"><div class="post-comment-author">Adam Hitchcock</div><div class="post-comment-body">I found the &lt;code&gt;numbers[:]&lt;/code&gt; an odd way of doing that assignment. So I looked it up. It looks like it keeps the same object.

&lt;code class=&quot;python&quot;&gt;
&gt;&gt;&gt; odd = lambda x : bool(x % 2)
&gt;&gt;&gt; numbers = [n for n in range(10)]
&gt;&gt;&gt; id(numbers)
4424446032
&gt;&gt;&gt; numbers = [n for n in numbers if not odd(n)]  # ahh, the beauty of it all
&gt;&gt;&gt; id(numbers)
4424505176
&gt;&gt;&gt; numbers
[0, 2, 4, 6, 8]
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; odd = lambda x : bool(x % 2)
&gt;&gt;&gt; numbers = [n for n in range(10)]
&gt;&gt;&gt; id(numbers)
4424446032
&gt;&gt;&gt; numbers[:] = [n for n in numbers if not odd(n)]  # ahh, the beauty of it all
&gt;&gt;&gt; id(numbers)
4424446032
&gt;&gt;&gt; numbers
[0, 2, 4, 6, 8]
&lt;/code&gt;

Cool, it looks like it keeps the same id/object. What do we get out of this though?

&lt;code class=&quot;python&quot;&gt;
&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt;
&gt;&gt;&gt; setup = &quot;&quot;&quot;
... odd = lambda x : bool(x % 2)
... numbers = [n for n in range(10)]
... &quot;&quot;&quot;
&gt;&gt;&gt; stmnt_1 = &quot;numbers[:] = [n for n in numbers if not odd(n)]&quot;
&gt;&gt;&gt; stmnt_2 = &quot;numbers = [n for n in numbers if not odd(n)]&quot;
&gt;&gt;&gt;
&gt;&gt;&gt; timeit(stmnt_1, setup, number=1000000)
1.7668359279632568
&gt;&gt;&gt; timeit(stmnt_1, setup, number=10000000)
17.681034088134766
&gt;&gt;&gt; timeit(stmnt_2, setup, number=1000000)
1.7781000137329102
&gt;&gt;&gt; timeit(stmnt_2, setup, number=10000000)
17.093994855880737
&gt;&gt;&gt; # to account for nutrinos:
&gt;&gt;&gt; s = [(timeit(stmnt_1, setup, number=1000000), timeit(stmnt_2, setup, number=1000000)) for _ in range(10)]
&gt;&gt;&gt; s
[(1.7270538806915283, 1.7055668830871582), (1.7197210788726807, 1.672379970550537), (1.7634928226470947, 1.6488819122314453), (1.717656135559082, 1.7615430355072021), (1.8057420253753662, 1.690622091293335), (1.7476260662078857, 1.7099308967590332), (1.8953900337219238, 1.6794281005859375), (1.8406779766082764, 1.839482069015503), (1.8078999519348145, 1.8191499710083008), (1.7242348194122314, 1.8715410232543945)]
&gt;&gt;&gt; [a - b for a, b in s]
[0.021486997604370117, 0.047341108322143555, 0.11461091041564941, -0.04388689994812012, 0.11511993408203125, 0.03769516944885254, 0.21596193313598633, 0.0011959075927734375, -0.011250019073486328, -0.14730620384216309]
&lt;/code&gt;


Weird, it actually seems (a very very small amount) slower. Any other reasons the [:] syntax could be beneficial?</div></div><div class="post-comment"><div class="post-comment-author">Adam Hitchcock</div><div class="post-comment-body">You mean mistake #0.</div></div><div class="post-comment"><div class="post-comment-author">Hubert OG</div><div class="post-comment-body">A sense of humor, perhaps.</div></div><div class="post-comment"><div class="post-comment-author">Adam Hitchcock</div><div class="post-comment-body">see my analysis here: http://www.toptal.com/python/top-10-mistakes-that-python-programmers-make#comment-1375427290</div></div><div class="post-comment"><div class="post-comment-author">Adam Hitchcock</div><div class="post-comment-body">Oh, sorry, I left that at home today. To heavy to carry on bike to work day.</div></div><div class="post-comment"><div class="post-comment-author">H. Singer</div><div class="post-comment-body">Good point!  We updated this accordingly.  Thanks for the input.

[Toptal blog editor]</div></div><div class="post-comment"><div class="post-comment-author">Martin Chikilian</div><div class="post-comment-body">As you correctly pointed out the form without the empty slice `numbers = ...` creates a new list and binds it to a new `numbers` name whereas using the `numbers[:] = ...` version modifies the already existent object. Code in this example wasn&#39;t written taking performance into consideration and the use of the empty slice notation is only to reflect that the same list as before has been modified (&#39;[n for n in range(10)]&#39;)</div></div><div class="post-comment"><div class="post-comment-author">Martin Chikilian</div><div class="post-comment-body">Very nice one!</div></div><div class="post-comment"><div class="post-comment-author">Mario Campos</div><div class="post-comment-body">I noticed something strange about common mistake #5. You used `numbers = [n for n in range(10)]` as opposed to just `numbers = range(10)`. Curiously, I wanted to see what difference this made:

```
&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit(&quot;&quot;&quot;n = [x for x in range(10)]&quot;&quot;&quot;, number=1000000)
1.0391340255737305
&gt;&gt;&gt; timeit(&quot;&quot;&quot;n = range(10)&quot;&quot;&quot;, number=1000000)
0.27240204811096191
&gt;&gt;&gt; timeit(&quot;&quot;&quot;n = [x for x in range(10)]&quot;&quot;&quot;, number=10000000)
10.304471969604492
&gt;&gt;&gt; timeit(&quot;&quot;&quot;n = range(10)&quot;&quot;&quot;, number=10000000)
2.7591819763183594
```

Quite the difference! A whole factor of 5!</div></div><div class="post-comment"><div class="post-comment-author">Martin Chikilian</div><div class="post-comment-body">Good comment, glad that you bring this up! Actually doing just `numbers = range(10)` doesn&#39;t make a lot of sense in Python 3 as `range` produces (initializes) a different kind of object than a list in this version (object `range` to be more specific) so the intention behind writing down with list comprehension syntax here was for readability.</div></div><div class="post-comment"><div class="post-comment-author">Martin Chikilian</div><div class="post-comment-body">Good point! As I explained to @NorthIsUp:disqus here the reason is to make it clear we were modifying (and deleting) the previous list, performance hasn&#39;t been considered (although the difference in time is quite minimal across multiple executions of the same block). Thanks for asking!</div></div><div class="post-comment"><div class="post-comment-author">Eli Collins</div><div class="post-comment-body">For mistake #4, might want to point out that Python 3 added the `nonlocal` keyword ([PEP 3104](http://legacy.python.org/dev/peps/pep-3104/)), which indicates that a variable should be shared with the enclosing scope rather than shadow it.</div></div><div class="post-comment"><div class="post-comment-author">killermonkey</div><div class="post-comment-body">For #5 you should just do:

numbers = [n for n in range(10) if not odd(n)]

Your common mistake contained a common mistake... that is doing more work than is necessary in your program to achieve the same result. Plus this 1 line of code is much more readable.</div></div><div class="post-comment"><div class="post-comment-author">22bytes</div><div class="post-comment-body">Lambda has rare use lately.
P.S. Your correction should rather be
    numbers = [ n for n in range(10) if not odd(n) ]
You forgot `n`. :)</div></div><div class="post-comment"><div class="post-comment-author">22bytes</div><div class="post-comment-body">For lists, &lt;code&gt;+=&lt;/code&gt; is not a shorthand for &lt;code&gt;lst = lst + iterable&lt;/code&gt;. The longer version creates a new object (with a different &lt;code&gt;id&lt;/code&gt;). Also unlike the shorthand, it only accepts lists as operands of the &lt;code&gt;+&lt;/code&gt; operator.</div></div><div class="post-comment"><div class="post-comment-author">Jamis Johnson</div><div class="post-comment-body">I felt #5 could be slightly cleaned up. I made sure the same IndexError still occurred.

https://gist.github.com/jamiis/9075c95477d4becd49c9


    odd = lambda x : bool(x % 2)
    numbers = range(10)
    for i in numbers:
        if odd(numbers[i]):
            del numbers[i]</div></div><div class="post-comment"><div class="post-comment-author">jimbobx</div><div class="post-comment-body">Was #6 (and maybe #1) stolen from http://docs.python-guide.org/en/latest/writing/gotchas/#late-binding-closures ? The examples date from 2012 and I don&#39;t see any attribution as required under their creative commons Attribution-NonCommercial-ShareAlike license. ( 
http://creativecommons.org/licenses/by-nc-sa/3.0/ )</div></div><div class="post-comment"><div class="post-comment-author">Mihai Caraman</div><div class="post-comment-body">Also list() is just a bit faster.
```python
&gt;&gt;&gt; timeit(&quot;&quot;&quot;n = [x for x in range(10)]&quot;&quot;&quot;, number=10000000)
8.42811918258667
&gt;&gt;&gt; timeit(&quot;&quot;&quot;n = list(range(10))&quot;&quot;&quot;, number=10000000)
5.411137104034424
```</div></div><div class="post-comment"><div class="post-comment-author">Martin Chikilian</div><div class="post-comment-body">I don&#39;t necessarily agree with you on the statement &quot;Lambda has rare use lately&quot;, most people used to style their code according to the functional programming paradigm use it and the rest of the people too (maybe less frequently). Although personally I prefer not to use them in favor of named functions, people coming from other languages and used to functional programming too will feel at home when they see Python has support for anonymous functions.</div></div><div class="post-comment"><div class="post-comment-author">Martin Chikilian</div><div class="post-comment-body">Good point! Although I&#39;d write the code on any program just like you did, the intention behind separating it out into two lines in the example was to make it more readable (when you first see the two separate lines you know exactly what&#39;s going on with `numbers`).</div></div><div class="post-comment"><div class="post-comment-author">lcfseth</div><div class="post-comment-body">Mistake #0: Python is not an interpreted language but a compiled one (yep, compiled).</div></div><div class="post-comment"><div class="post-comment-author">alexeiramone</div><div class="post-comment-body">Cool. i&#39;m glad i&#39;m not making any of these...</div></div><div class="post-comment"><div class="post-comment-author">Uri Laserson</div><div class="post-comment-body">Great list! For #8, PEP 328 largely addresses the issue.</div></div><div class="post-comment"><div class="post-comment-author">Pooya Eghbali</div><div class="post-comment-body">You can replace:
    if bar is None: bar = []
with:
    bar = bar or []</div></div><div class="post-comment"><div class="post-comment-author">Myautsai</div><div class="post-comment-body">
Common Mistake #11:

    for each in (STR_CONST1, STR_CONST2):...

But one day we do not need STR_CONSTS2 anymore:

    for each in (STR_CONST1):... #wrong
    for each in (STR_CONST1, ):... #right</div></div><div class="post-comment"><div class="post-comment-author">introom</div><div class="post-comment-body">#!/usr/bin/env python3
import sys

def bar(i):
    if i == 1:
        raise KeyError(1)
    if i == 2:
        raise ValueError(2)

def bad():
    a = None
    try:
        bar(int(1))
    except KeyError as e:
        a = e
        print(&#39;key error&#39;)
    except ValueError as e:
        print(&#39;value error&#39;)
    print(a)

bad()


One question. In the above code, watch the assignment a = e changes the final print(a) outcome. So we can guess the scope 
inside except as KeyError as e is the same as the function scope. However, as discussed in the article, the name e is only accessible
in that except scope. How to explain this phenomenon?</div></div><div class="post-comment"><div class="post-comment-author">Ruitao Xu</div><div class="post-comment-body">In #2，why is B.x still 2 ?</div></div><div class="post-comment"><div class="post-comment-author">Udi Oron</div><div class="post-comment-body">Regarding common mistake #5, your mistake is to iterate using len(numbers).  There is no problem modifying a list you iterate over if you use enumerate:

    for i, x in enumerate(numbers):
        if odd(x):
            del numbers[i]</div></div><div class="post-comment"><div class="post-comment-author">Udi Oron</div><div class="post-comment-body">Regarding #6, although the solution below is much longer, I find it the easiest to grasp, and I will tend to use it if I will need this in my real life code:

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;
def create_multiplier(i):
    def f(x):
        return x * i

    return f

def create_multipliers():
    return [create_multiplier(i) for i in range(5)]

for multiplier in create_multipliers():
    print multiplier(2)

&lt;/code&gt;&lt;/pre&gt;</div></div><div class="post-comment"><div class="post-comment-author">Udi Oron</div><div class="post-comment-body">Regarding circular imports and #7:

The main problem in importing is when using the &lt;code class=&quot;python&quot;&gt;from mymodule import mysymbol&lt;/code&gt;.

You have solved this issue properly by using &lt;code class=&quot;python&quot;&gt;import mymodule&lt;/code&gt;, although this might cause some more problem if your design is wrong. What you introduce here is a design problem. Calling &lt;code class=&quot;python&quot;&gt;f()&lt;/code&gt; from the module (library) code itself is a very bad idea.  Instead one should do this:

a.py:
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;
import b

def f():
    return b.x
&lt;/code&gt;&lt;/pre&gt;

b.py:
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;
import a

x = 1

def g():
    print a.f()
&lt;/code&gt;&lt;/pre&gt;

main.py:
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;
import a

a.f()
&lt;/code&gt;&lt;/pre&gt;</div></div><div class="post-comment"><div class="post-comment-author">Udi Oron</div><div class="post-comment-body">Regarding name clashing (#8):  Hopefully your code (modules) are already in packages.  To avoid name clashing (in packages) use absolute imports or explicit relative imports as suggested by &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0008/#imports&quot;&gt;PEP8&lt;/a&gt;, which also states:

 &gt; Implicit relative imports should never be used and have been removed in Python 3.

i.e., one should use one of

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;
from mypkg import email
from . import email
import mypkg.email
#or:
from .email import foo()
from ..email import foo()
&lt;/code&gt;&lt;/pre&gt;


etc.</div></div><div class="post-comment"><div class="post-comment-author">katisss@gmx.de</div><div class="post-comment-body">&gt;&gt;&gt; def foo(bar=None):
...    if bar is None:		# or if not bar:
...        bar = []

How about 

bar=bar or []

Shorter and easier to read?</div></div><div class="post-comment"><div class="post-comment-author">Laurent</div><div class="post-comment-body">One reason where I would see a use of [:] is if you have other names pointing to the array, and you want them to see the change.</div></div><div class="post-comment"><div class="post-comment-author">wittawatj</div><div class="post-comment-body">About common mintake #6: the binding in lambda expressions. Apart from using the generator, another way:

def create_multipliers():
    def make_lambda(i):
        return lambda x: i*x;
    return [make_lambda(i) for i in range(5)]

for multiplier in create_multipliers():
    print multiplier(2)</div></div><div class="post-comment"><div class="post-comment-author">TheKestrel</div><div class="post-comment-body">In terms of scripting languages, Python is better than Ruby, but I would say Javascript is the best of the bunch if for no other reason because it is so much more widely used that it has forced folks to confront more of the gremlins - either by language enhancements or libraries such as Underscore and Backbone.  Also, it&#39;s variable scoping, while containing a gotcha or two, is generally better - especially when &#39;use strict&#39; is applied so that all declarations are explicit.  If we&#39;re including non-scripting languages, there are a few candidates - C# has the best data querying syntax I&#39;ve seen in any language courtesy of LINQ, and now that it supports dynamically typed variables it has the ability to do virtually everything Python can, with the (in my humble opinion) much wiser choice to make dynamic typing the 1% use-case and static typing the 99%.</div></div><div class="post-comment"><div class="post-comment-author">22bytes</div><div class="post-comment-body">You know, Python is not Haskell or for that matter any other programming language. Past experience in one language is not a license to write forgotten Python. You&#39;re better served discussing the state of &lt;code&gt;lambda&lt;/code&gt; in #python.</div></div><div class="post-comment"><div class="post-comment-author">introom</div><div class="post-comment-body">OK. In case it confuses someone like me. The except clause doesn&#39;t introduce a new scope. It just deletes the name &#39;e&#39; after its execution. It is documented on the website.</div></div><div class="post-comment"><div class="post-comment-author">Tetsuya Morimoto</div><div class="post-comment-body">No. The boolean value is able to change with a special method if bar is a custom object.
 - py2: __nonzero__
 - py3:__bool__</div></div><div class="post-comment"><div class="post-comment-author">Tetsuya Morimoto</div><div class="post-comment-body">Good article! Can I translate this article into Japanese?</div></div><div class="post-comment"><div class="post-comment-author">Abhishek Anurag</div><div class="post-comment-body">Good point.
Also, I&#39;m not sure if going by the suggestion  &quot;#or not bar&quot; works correctly in all cases, I tried that with a list in the code below and it does not work as is explained.

def inorder(self, inorder_opt=None):
    if inorder_opt is None:    #if not bar doesn&#39;t work correctly here, get&#39;s reinitialized again in recursive calls
   inorder_opt = []

    if (self.left != None):
    self.left.inorder(inorder_opt)

if (self.key != None):
    inorder_opt.append(self.key)

  if (self.right != None):
    self.right.inorder(inorder_opt)

        return inorder_opt</div></div><div class="post-comment"><div class="post-comment-author">22bytes</div><div class="post-comment-body">I prefer &lt;code&gt;if bar is None: ...&lt;/code&gt;. There&#39;s a lot of Python values that coerce to false including the empty list.</div></div><div class="post-comment"><div class="post-comment-author">Ionel Cristian Mărieș</div><div class="post-comment-body">I&#39;m a bit surprised (and disapointed) there&#39;s nothing here about &#39;too broad exception handling&#39;.

Ever did a bare &lt;code&gt;except:&lt;/code&gt; ? How about &lt;code&gt;except: pass&lt;/code&gt; ? That&#39;s a fairly common mistake - still rampaging today ...</div></div><div class="post-comment"><div class="post-comment-author">Meep Johnston</div><div class="post-comment-body">Assigning to B.x in the example directly above gives B its own name x and thusly detaches it from A.x. Had B.x not been assigned directly first, B.x and C.x would both reflect the new value of A.x</div></div><div class="post-comment"><div class="post-comment-author">Vaquero de Oro</div><div class="post-comment-body">This post should be renamed &quot;Top 10 Mistakes Made in Python&#39;s Design&quot; (which most often confuse sensible people), IMO.</div></div><div class="post-comment"><div class="post-comment-author">etermory</div><div class="post-comment-body">#6: another way.
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;
def create_multipliers():
    for i in range(5):
        yield lambda x : i * x

for multiplier in create_multipliers():
    print(multiplier(2))

&lt;/code&gt;&lt;/pre&gt;</div></div></div></div></div><script type="text/javascript">function isIos() {
  return /(iPad|iPhone|iPod)/g.test(navigator.userAgent);
}

function adjustHeightInIos() {
  if (isIos()) {
    var height = $('#disqus_thread').outerHeight();
    $('#disqus_thread_container').height(height);
  }
}

if (isIos()) {
  var el = document.getElementById('disqus_thread_container');
  el.style.height = '1px';
  el.style.overflow = 'hidden';
  el.style.width = '100%';
}

function disqus_config() {
  this.callbacks.onNewComment = [function() {
    $.post('/blog/comments/on_create');
    adjustHeightInIos();
  }];

  this.callbacks.onReady = [adjustHeightInIos];
}

var disqus_shortname = 'toptal';
var disqus_identifier = 'python/top-10-mistakes-that-python-programmers-make';

(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();</script><noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript><a class="dsq-brlink" href="http://disqus.com">comments powered by <span class="logo-disqus">Disqus</span></a></div></div></div><div class="two_columns_layout-extra"><div class="blog-block-wrapper"><div class="blog-block-header">Subscribe</div><div class="blog-block"><div class="blog-block-row"><form action="/blog/subscribe" class="blog_subscribe for-extra" data-placement="extra" data-remote="" data-type="text" data-view="blog_subscribe#subscribe" method="post"><div class="blog_subscribe-row"><div class="blog_subscribe-label">Subscribe to Engineering Articles by Email</div></div><div class="blog_subscribe-row"><input class="input is-medium" data-role="email" name="email" placeholder="Enter your email address..." /></div><div class="blog_subscribe-row-wrapper is-footer"><div class="blog_subscribe-row is-submit"><input class="button is-green_candy is-default is-full_width" data-role="submit" type="submit" value="Subscribe Now" /></div><div class="blog_subscribe-row is-privacy"><div class="blog_subscribe-privacy"><div class="blog_subscribe-privacy-icon"></div><div class="blog_subscribe-privacy_text">We will never share your email with any 3rd party or spam you</div></div></div></div><div class="blog_subscribe-template" data-role="success_template" style="display:none"><div class="blog_subscribe-row"><div class="blog_subscribe-label">Subscribe to Engineering Articles by Email</div></div><div class="blog_subscribe-row"><div class="blog_subscribe-label is-header">Thank you for subscribing!</div></div><div class="blog_subscribe-row"><div class="blog_subscribe-done"><ul class="blog_follow_us"><li class="blog_follow_us-source"><div class="fb-like" data-href="http://www.toptal.com/blog" data-send="false" data-layout="button_count" data-width="450" data-show-faces="false"></div</li><li class="blog_follow_us-source is-twitter"><a href="https://twitter.com/toptalllc" class="twitter-follow-button" data-show-count="true">Follow @toptalllc</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script></li><li class="blog_follow_us-source"><div class="g-follow" data-annotation="bubble" data-height="20" data-href="https://plus.google.com/109028009576318848424" data-rel="publisher"></div>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/platform.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script></li></ul></div></div></div></form></div></div><div class="blog-block-header">Trending articles</div><div class="blog-block"><nav class="blog-trending"><a class="post is-preview blog-trending-item" href="/emberjs/a-thorough-guide-to-ember-data"><span class="post_cover is-preview for-technology"><span class="post_cover-image" style="background-image: url(&#39;/uploads/blog/cover_image/77/side_list_cover-cover.png&#39;);"></span></span><span class="post-preview"><span class="post-title">A Thorough Guide to Ember Data</span><span class="post-meta"><span class="post-meta-date">11 days ago</span></span></span></a><a class="post is-preview blog-trending-item" href="/python/top-10-mistakes-that-python-programmers-make"><span class="post_cover is-preview for-technology"><span class="post_cover-image" style="background-image: url(&#39;/uploads/blog/cover_image/69/side_list_cover-cover.png&#39;);"></span></span><span class="post-preview"><span class="post-title">10 Most Common Mistakes that Python Programmers Make</span><span class="post-meta"><span class="post-meta-date">about 1 month ago</span></span></span></a><a class="post is-preview blog-trending-item" href="/ruby-on-rails/top-10-mistakes-that-rails-programmers-make"><span class="post_cover is-preview for-technology"><span class="post_cover-image" style="background-image: url(&#39;/uploads/blog/cover_image/74/side_list_cover-cover.png&#39;);"></span></span><span class="post-preview"><span class="post-title">10 Most Common Mistakes that Rails Programmers Make</span><span class="post-meta"><span class="post-meta-date">26 days ago</span></span></span></a><a class="post is-preview blog-trending-item" href="/c-sharp/top-10-mistakes-that-c-sharp-programmers-make"><span class="post_cover is-preview for-technology"><span class="post_cover-image" style="background-image: url(&#39;/uploads/blog/cover_image/67/side_list_cover-cover.png&#39;);"></span></span><span class="post-preview"><span class="post-title">10 Most Common Mistakes that C# Programmers Make</span><span class="post-meta"><span class="post-meta-date">2 months ago</span></span></span></a><a class="post is-preview blog-trending-item" href="/api-developers/5-golden-rules-for-designing-a-great-web-api"><span class="post_cover is-preview for-technology"><span class="post_cover-image" style="background-image: url(&#39;/uploads/blog/cover_image/75/side_list_cover-cover.png&#39;);"></span></span><span class="post-preview"><span class="post-title">5 Golden Rules for Designing a Great Web API</span><span class="post-meta"><span class="post-meta-date">19 days ago</span></span></span></a><a class="post is-preview blog-trending-item" href="/ruby/the-many-shades-of-the-ruby-programming-language"><span class="post_cover is-preview for-technology"><span class="post_cover-image" style="background-image: url(&#39;/uploads/blog/cover_image/76/side_list_cover-cover.png&#39;);"></span></span><span class="post-preview"><span class="post-title">The Many Shades of the Ruby Programming Language</span><span class="post-meta"><span class="post-meta-date">17 days ago</span></span></span></a></nav></div><div class="blog-block-header">Relevant technologies</div><div class="blog-block"><div class="blog-block-row"><ul class="blog-relevant"><li class="blog-relevant-item"><a class="link is-blue" href="/python">Python</a></li></ul></div></div></div></div></div></section></main><footer><section class="grid-row page_footer_map-wrapper"><div class="grid-row-inner has-huge_padding page_footer_map"><p>At <strong>Toptal</strong>, we connect the best developers all over the world.</p>
</div></section><section class="grid-row has-top_border"><div class="grid-row-inner has-padding page_footer_join"><h2 class="page_footer_join-header">Join the Toptal community.</h2><nav class="page_footer_join-actions"><div class="page_footer_join-item"><a class="button is-green_candy is-big is-fixed page_footer_join-button" href="https://www.toptal.com/companies/apply">Hire a Developer</a></div><div class="page_footer_join-item is-or">or</div><div class="page_footer_join-item"><a class="button is-green_candy is-big is-fixed page_footer_join-button" href="/developers">Apply as a Developer</a></div></nav></div></section><section class="grid-row page_footer_links-wrapper"><div class="grid-row-inner is-wide has-big_padding"><nav class="page_footer_links"><section class="page_footer_links-column is-1"><h3 class="page_footer_links-column-header">Trending on blog</h3><ul class="page_footer_links-list is-trending"><li class="page_footer_links-item"><a class="page_footer_links-link" href="/emberjs/a-thorough-guide-to-ember-data">A Thorough Guide to Ember Data</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/python/top-10-mistakes-that-python-programmers-make">10 Most Common Mistakes that Python Programmers Make</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/ruby-on-rails/top-10-mistakes-that-rails-programmers-make">10 Most Common Mistakes that Rails Programmers Make</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/c-sharp/top-10-mistakes-that-c-sharp-programmers-make">10 Most Common Mistakes that C# Programmers Make</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/api-developers/5-golden-rules-for-designing-a-great-web-api">5 Golden Rules for Designing a Great Web API</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/ruby/the-many-shades-of-the-ruby-programming-language">The Many Shades of the Ruby Programming Language</a></li></ul></section><section class="page_footer_links-column is-2"><h3 class="page_footer_links-column-header">Navigation</h3><ul class="page_footer_links-list is-main"><li class="page_footer_links-item"><a class="page_footer_links-link" href="/why">Why</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/how">How</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/what">What</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/clients">Clients</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/team">Team</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/community">Community</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/blog">Blog</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/contact">Contact</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/faq">FAQ</a></li></ul></section><section class="page_footer_links-column is-3"><h3 class="page_footer_links-column-header">Contact</h3><ul class="page_footer_links-list"><li class="page_footer_links-item"><a class="page_footer_links-link" href="/developers">Apply for work</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/talent_partners">Become a partner</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="/contact">Send us an email</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="tel:8886043188">Call 888.604.3188</a></li></ul></section><section class="page_footer_links-column is-4"><h3 class="page_footer_links-column-header">Social</h3><ul class="page_footer_links-list"><li class="page_footer_links-item"><a class="page_footer_links-link" href="https://www.facebook.com/pages/toptal/141928212544793" target="_blank">Facebook</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="https://twitter.com/toptalllc" target="_blank">Twitter</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="https://plus.google.com/+Toptalllc/" target="_blank">Google+</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="https://github.com/toptal" target="_blank">GitHub</a></li><li class="page_footer_links-item"><a class="page_footer_links-link" href="http://dribbble.com/toptal" target="_blank">Dribbble</a></li></ul></section></nav></div></section><section class="grid-row page_footer_legal-wrapper"><div class="grid-row-inner is-wide has-medium_padding page_footer_legal"><div class="logo-wrapper page_footer_legal-logotype"><a class="logo is-mini is-link" href="/">Toptal</a><p class="logo-motto is-mini">Exclusive access to top developers</p></div><ul class="page_footer_legal-links"><li class="page_footer_legal-links_item is-copyright"><p class="page_footer_legal-copyright">© Copyright 2010 - 2014 Toptal, LLC</p></li><li class="page_footer_legal-links_item"><a class="page_footer_legal-link" href="/privacy">Privacy Policy</a>,</li><li class="page_footer_legal-links_item"><a class="page_footer_legal-link" href="/developers/tos">Terms of Service</a></li></ul></div></section></footer></div><div class="layout-overlay" data-view="layout#overlay"></div><div class="notification-container" data-view="notifications#service"></div><script type="text/javascript">setTimeout(function () {
  classNameWithFont = document.documentElement.className + ' wf-active'
  document.documentElement.className = classNameWithFont
}, 0);</script><script src="/assets/public-2a61b67bebbcdc9a4b67d266ce9e7055.js" type="text/javascript"></script><script src="/assets/blog-636ea15588c60c125b834ec87204def9.js" type="text/javascript"></script><div class="layout-counters"><script type="text/javascript">window.googleAnalytics = new Widgets.GoogleAnalytics('UA-21104039-1', 'auto');
window.googleAnalytics.trackPageview();
window.googleAnalytics.track15secondsRead();</script><script type="text/javascript">(function(d) {
  var e = d.createElement('script');
  e.src = d.location.protocol + '//bounceexchange.com/tag/929/i.js';
  e.async = true;
  d.getElementsByTagName("head")[0].appendChild(e);
}(document));</script><!-- begin olark code --><script type='text/javascript'>/*{literal}<![CDATA[*/window.olark||(function(i){var e=window,h=document,a=e.location.protocol=="https:"?"https:":"http:",g=i.name,b="load";(function(){e[g]=function(){(c.s=c.s||[]).push(arguments)};var c=e[g]._={},f=i.methods.length; while(f--){(function(j){e[g][j]=function(){e[g]("call",j,arguments)}})(i.methods[f])} c.l=i.loader;c.i=arguments.callee;c.f=setTimeout(function(){if(c.f){(new Image).src=a+"//"+c.l.replace(".js",".png")+"&"+escape(e.location.href)}c.f=null},20000);c.p={0:+new Date};c.P=function(j){c.p[j]=new Date-c.p[0]};function d(){c.P(b);e[g](b)}e.addEventListener?e.addEventListener(b,d,false):e.attachEvent("on"+b,d); (function(){function l(j){j="head";return["<",j,"></",j,"><",z,' onl'+'oad="var d=',B,";d.getElementsByTagName('head')[0].",y,"(d.",A,"('script')).",u,"='",a,"//",c.l,"'",'"',"></",z,">"].join("")}var z="body",s=h[z];if(!s){return setTimeout(arguments.callee,100)}c.P(1);var y="appendChild",A="createElement",u="src",r=h[A]("div"),G=r[y](h[A](g)),D=h[A]("iframe"),B="document",C="domain",q;r.style.display="none";s.insertBefore(r,s.firstChild).id=g;D.frameBorder="0";D.id=g+"-loader";if(/MSIE[ ]+6/.test(navigator.userAgent)){D.src="javascript:false"} D.allowTransparency="true";G[y](D);try{D.contentWindow[B].open()}catch(F){i[C]=h[C];q="javascript:var d="+B+".open();d.domain='"+h.domain+"';";D[u]=q+"void(0);"}try{var H=D.contentWindow[B];H.write(l());H.close()}catch(E){D[u]=q+'d.write("'+l().replace(/"/g,String.fromCharCode(92)+'"')+'");d.close();'}c.P(2)})()})()})({loader:(function(a){return "static.olark.com/jsclient/loader0.js?ts="+(a?a[1]:(+new Date))})(document.cookie.match(/olarkld=([0-9]+)/)),name:"olark",methods:["configure","extend","declare","identify"]});
/* custom configuration goes here (www.olark.com/documentation) */
olark.identify('5230-809-10-4522');/*]]>{/literal}*/</script>
<!-- end olark code --><script type="text/javascript">
adroll_adv_id = "6ZOMR2QLHZBEFEIMAJHJ4K";
adroll_pix_id = "FBQUGOS3RRAI3PZP2HVOYG";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script><img src="//ib.adnxs.com/seg?add=308219&t=2" width="1" height="1" /></div></body></html>